   1               		.file	"mouseKeyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               		.section	.text.restoreRedLED,"ax",@progbits
  13               	.global	restoreRedLED
  15               	restoreRedLED:
  16               	.LFB74:
  17               		.file 1 "../droplet_programs/mouseKeyboard/mouseKeyboard.h"
   1:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #pragma once
   2:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
   3:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #include "droplet_init.h"
   4:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #include "button.h"
   5:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #include "button_press_queue.h"
   6:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
   7:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define KEYPRESS_MSG_FLAG 'K'
   8:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define MOUSE_MOVE_MSG_FLAG 'M'
   9:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define ACK_MSG_FLAG 'A'
  10:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  11:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  12:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** //#define KEYBOARD_DEBUG_MODE
  13:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #ifdef KEYBOARD_DEBUG_MODE
  14:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define KEYBOARD_DEBUG_MODE(format, ...) printf_P(PSTR(format), ##__VA_ARGS__)
  15:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #else
  16:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define KEYBOARD_DEBUG_MODE(format, ...)
  17:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #endif
  18:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  19:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** //#define RNB_DEBUG_MODE
  20:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #ifdef RNB_DEBUG_MODE
  21:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define RNB_DEBUG_PRINT(format, ...) printf_P(PSTR(format), ##__VA_ARGS__)
  22:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #else
  23:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define RNB_DEBUG_PRINT(format, ...)
  24:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #endif
  25:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  26:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define SLOT_LENGTH_MS			397
  27:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define SLOTS_PER_FRAME			38
  28:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define FRAME_LENGTH_MS			(((uint32_t)SLOT_LENGTH_MS)*((uint32_t)SLOTS_PER_FRAME))
  29:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define LOOP_DELAY_MS			11
  30:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  31:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  32:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define MK_SLOT_LENGTH 300
  33:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define MK_FRAME_LENGTH 3000
  34:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define MK_SLOTS_PER_FRAME (MK_FRAME_LENGTH/MK_SLOT_LENGTH)
  35:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  36:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** typedef enum droplet_role{
  37:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	UNKNOWN,
  38:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	KEYBOARD,
  39:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	MOUSE	
  40:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }DropletRole;
  41:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  42:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** typedef struct ack_msg_struct{
  43:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	uint32_t time;
  44:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	uint8_t flag;
  45:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }AckMsg;
  46:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define IS_ACK_MSG(msgStruct) ( (msgStruct->length==sizeof(AckMsg)) && (((AckMsg*)(msgStruct->msg))
  47:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** typedef struct ack_msg_node_struct{
  48:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	AckMsg msg;
  49:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	id_t target;
  50:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	uint8_t numTries;
  51:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }AckMsgNode;
  52:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  53:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** typedef struct mouse_move_msg_struct{
  54:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	uint32_t	  time;
  55:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	int8_t		deltaX;
  56:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	int8_t		deltaY;
  57:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	uint8_t	      flag;
  58:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }MouseMoveMsg;
  59:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define IS_MOUSE_MOVE_MSG(msgStruct) ( (msgStruct->length==sizeof(MouseMoveMsg)) && (((MouseMoveMsg
  60:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** typedef struct mouse_move_msg_node_struct{
  61:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	MouseMoveMsg msg;
  62:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	uint8_t numTries;
  63:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }MouseMoveMsgNode;
  64:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  65:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** typedef struct button_press_msg_struct{
  66:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	ButtonPressEvent	evt;
  67:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	uint8_t			flag;
  68:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }ButtonPressMsg;
  69:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** #define IS_BUTTON_PRESS_MSG(msgStruct) ( (msgStruct->length==sizeof(ButtonPressMsg)) && (((ButtonPr
  70:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** typedef struct button_press_msg_node_struct{
  71:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	ButtonPressMsg msg;
  72:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	uint8_t numTries;
  73:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }ButtonPressMsgNode;
  74:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  75:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** uint32_t	frameStart;
  76:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** uint32_t	lastKeypress;
  77:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** uint16_t	mySlot;
  78:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** uint16_t	loopID;
  79:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** uint16_t	prevLoopID;
  80:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** uint8_t		isWired;
  81:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** uint8_t		isShifted;
  82:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  83:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** id_t		leftMouseID;
  84:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** DropletRole myRole;
  85:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** Button myButton;
  86:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** BotPos newPos;
  87:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** DensePosCovar newPosCovar;
  88:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** volatile Task_t* wireSleepTask;
  89:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** uint8_t periodicMouseBroadcast;
  90:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** uint8_t isBlinking;
  91:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  92:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void		init(void);
  93:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void		loop(void);
  94:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void		handleMsg(irMsg* msg_struct);
  95:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
  96:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** uint8_t combineBotMeasEvents(uint32_t);
  97:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void prepMouseMoveMsg(MouseMoveEvent* evt);
  98:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void sendMouseMoveMsg(MouseMoveMsgNode* msgNode);
  99:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void prepButtonPressMsg(ButtonPressEvent* evt);
 100:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void sendButtonPressMsg(ButtonPressMsgNode* msgNode);
 101:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void mouseHandleBotMeasMsg(BotMeasMsg* msg);
 102:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void handleButtonPressMsg(ButtonPressMsg* msg);
 103:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void handleMouseMoveMsg(MouseMoveMsg* msg);
 104:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void checkPosition(void);
 105:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void rnbBroadcastDebugWrapper(void);
 106:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void wireSleep(void);
 107:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
 108:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** uint32_t getExponentialBackoff(uint8_t c);
 109:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
 110:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** static inline uint16_t getSlot(id_t id){
 111:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	return (id%(SLOTS_PER_FRAME-1));
 112:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 113:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
 114:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** inline void setRoleAndButton(Button button){
 115:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	if(button == BUTTON_UNKNOWN){
 116:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		myRole = UNKNOWN;	
 117:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}else if( (button!=BUTTON_L_CLICK) && (button!=BUTTON_R_CLICK) ){
 118:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		myRole = KEYBOARD;
 119:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}else{
 120:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		myRole = MOUSE;
 121:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}
 122:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	myButton = button;
 123:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 124:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
 125:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void restoreRedLED(uint16_t val){
  18               		.loc 1 125 0
  19               		.cfi_startproc
  20               	.LVL0:
  21               	/* prologue: function */
  22               	/* frame size = 0 */
  23               	/* stack size = 0 */
  24               	.L__stack_usage = 0
  25 0000 9927      		clr r25
  26               	.LVL1:
  27               	.LBB440:
  28               	.LBB441:
  29               		.file 2 "../include/rgb_led.h"
   1:../include/rgb_led.h **** #pragma once
   2:../include/rgb_led.h **** #include "droplet_base.h"
   3:../include/rgb_led.h **** #include <math.h>
   4:../include/rgb_led.h **** 
   5:../include/rgb_led.h **** #define LED_R_PIN_bm			PIN5_bm
   6:../include/rgb_led.h **** #define LED_G_PIN_bm			PIN4_bm
   7:../include/rgb_led.h **** #define LED_B_PIN_bm			PIN4_bm
   8:../include/rgb_led.h **** 
   9:../include/rgb_led.h **** void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM
  10:../include/rgb_led.h **** 
  11:../include/rgb_led.h **** // Get and set intensity for red LED
  12:../include/rgb_led.h **** inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
  13:../include/rgb_led.h **** inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
  30               		.loc 2 13 0
  31 0002 8093 7A0A 		sts 2682,r24
  32 0006 9093 7B0A 		sts 2682+1,r25
  33               	.LVL2:
  34               	.LBE441:
  35               	.LBE440:
 126:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	setRedLED((uint8_t)val);
 127:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	isBlinking = 0;
  36               		.loc 1 127 0
  37 000a 1092 0000 		sts isBlinking,__zero_reg__
  38 000e 0895      		ret
  39               		.cfi_endproc
  40               	.LFE74:
  42               		.section	.text.restoreGreenLED,"ax",@progbits
  43               	.global	restoreGreenLED
  45               	restoreGreenLED:
  46               	.LFB75:
 128:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 129:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void restoreGreenLED(uint16_t val){
  47               		.loc 1 129 0
  48               		.cfi_startproc
  49               	.LVL3:
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  54 0000 9927      		clr r25
  55               	.LVL4:
  56               	.LBB442:
  57               	.LBB443:
  14:../include/rgb_led.h **** 
  15:../include/rgb_led.h **** // Get and set intensity for green LED
  16:../include/rgb_led.h **** inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
  17:../include/rgb_led.h **** inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
  58               		.loc 2 17 0
  59 0002 8093 780A 		sts 2680,r24
  60 0006 9093 790A 		sts 2680+1,r25
  61               	.LVL5:
  62               	.LBE443:
  63               	.LBE442:
 130:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	setGreenLED((uint8_t)val);
 131:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	isBlinking = 0;
  64               		.loc 1 131 0
  65 000a 1092 0000 		sts isBlinking,__zero_reg__
  66 000e 0895      		ret
  67               		.cfi_endproc
  68               	.LFE75:
  70               		.section	.text.restoreBlueLED,"ax",@progbits
  71               	.global	restoreBlueLED
  73               	restoreBlueLED:
  74               	.LFB76:
 132:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 133:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** void restoreBlueLED(uint16_t val){
  75               		.loc 1 133 0
  76               		.cfi_startproc
  77               	.LVL6:
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
  82 0000 9927      		clr r25
  83               	.LVL7:
  84               	.LBB444:
  85               	.LBB445:
  18:../include/rgb_led.h **** 	
  19:../include/rgb_led.h **** // Get and set intensity for blue LED
  20:../include/rgb_led.h **** inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
  21:../include/rgb_led.h **** inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
  86               		.loc 2 21 0
  87 0002 8093 7809 		sts 2424,r24
  88 0006 9093 7909 		sts 2424+1,r25
  89               	.LVL8:
  90               	.LBE445:
  91               	.LBE444:
 134:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	setBlueLED((uint8_t)val);
 135:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	isBlinking = 0;
  92               		.loc 1 135 0
  93 000a 1092 0000 		sts isBlinking,__zero_reg__
  94 000e 0895      		ret
  95               		.cfi_endproc
  96               	.LFE76:
  98               		.section	.text.wireSleep,"ax",@progbits
  99               	.global	wireSleep
 101               	wireSleep:
 102               	.LFB103:
 103               		.file 3 "../droplet_programs/mouseKeyboard/mouseKeyboard.c"
   1:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** #include "mouseKeyboard.h"
   2:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
   3:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
   4:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
   5:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void init(){
   6:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if((LOCALIZATION_DUR)>=SLOT_LENGTH_MS){
   7:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		printf_P(PSTR("Error! Localization requires SLOT_LENGTH_MS to be greater than LOCALIZATION_DUR!\r
   8:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
   9:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	queueInit();
  10:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	myRole = UNKNOWN;
  11:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	myButton = BUTTON_UNKNOWN;
  12:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	loopID = 0xFFFF;
  13:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	isShifted = 0;
  14:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	lastKeypress = 0;
  15:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	wireSleepTask = NULL;
  16:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	isWired = 0;
  17:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.x = UNDF;
  18:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.y = UNDF;
  19:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.o = UNDF;
  20:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	periodicMouseBroadcast = 0;
  21:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	isBlinking = 0;
  22:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	leftMouseID = 0xFFFF;
  23:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	frameStart = getTime();
  24:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	mySlot = getSlot(getDropletID());
  25:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	//printf("mySlot: %u, frame_length: %lu\r\n\r\n", mySlot, FRAME_LENGTH_MS);
  26:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(!POS_DEFINED(&myPos)){
  27:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		//BotPos tmpPos;
  28:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		//tmpPos.x = (BUTTON_HALFWIDTH + BUTTON_WIDTH*(randShort()%10));
  29:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		//tmpPos.y = 10 + ((randShort()%3)+1)*BUTTON_HEIGHT;
  30:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		//setRoleAndButton(getButtonFromPosition(&tmpPos));
  31:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		//printf("%d, %d, %hu, %hu\r\n", tmpPos.x, tmpPos.y, myRole, myButton);
  32:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else{
  33:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		setRoleAndButton(getButtonFromPosition(&myPos));
  34:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		printf("%d, %d, %hu, %hu\r\n", myPos.x, myPos.y, myRole, myButton);
  35:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
  36:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
  37:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	
  38:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	//if(POS_DEFINED(&myPos)){
  39:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	//	setRoleAndButton(getButtonFromPosition(&myPos));
  40:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	//}
  41:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	#ifdef AUDIO_DROPLET
  42:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		enableMicInterrupt();
  43:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	#endif	
  44:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	//setAllirPowers(225);
  45:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
  46:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
  47:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** static void roleUnknownLoop(void){
  48:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	uint32_t frameTime = getTime()-frameStart;
  49:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(frameTime>FRAME_LENGTH_MS){
  50:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameTime = frameTime - FRAME_LENGTH_MS;
  51:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameStart += FRAME_LENGTH_MS;
  52:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
  53:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(loopID!=(frameTime/SLOT_LENGTH_MS)){ //This is a new slot.
  54:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		loopID = frameTime/SLOT_LENGTH_MS;
  55:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(loopID==mySlot){ //This is my slot.
  56:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			blinkLED(1,30);
  57:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			broadcastRnbData();
  58:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else if(loopID==SLOTS_PER_FRAME-1){
  59:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			printf("%lu\r\n", getTime());
  60:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(POS_DEFINED(&myPos)){
  61:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				printf("\tMy Pos: {%d, %d, %d}\r\n", myPos.x, myPos.y, myPos.o);
  62:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				printPosCovar(&myPosCovar);
  63:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				printf("\r\n");
  64:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				checkPosition();
  65:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}
  66:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
  67:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(!isBlinking){
  68:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			uint8_t newR = 0, newG = 0, newB = 0;
  69:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			getPosColor(&newR, &newG, &newB);
  70:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			setRGB(newR, newG, newB);
  71:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
  72:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
  73:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
  74:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
  75:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** static void mouseLoop(void){
  76:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	uint32_t frameTime = getTime()-frameStart;
  77:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(frameTime>MK_FRAME_LENGTH){
  78:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameTime = frameTime-MK_FRAME_LENGTH;
  79:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameStart += MK_FRAME_LENGTH;
  80:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
  81:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(loopID!=(frameTime/MK_SLOT_LENGTH)){
  82:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		loopID = frameTime/MK_SLOT_LENGTH;
  83:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(loopID==0 && periodicMouseBroadcast){
  84:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			blinkLED(1,30);
  85:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			broadcastRnbData();
  86:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else if(loopID==MK_SLOTS_PER_FRAME-2){
  87:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(POS_DEFINED(&newPos)){
  88:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				MouseMoveEvent evt;
  89:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.deltaX = newPos.x - myPos.x;
  90:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.deltaY = newPos.y - myPos.y;
  91:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.mouseEventMarker = MOUSE_EVENT_MARKER_FLAG;
  92:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.time = getTime();
  93:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				printf("(% 5d, % 5d) -> (% 5d, % 5d)\r\n", myPos.x, myPos.y, newPos.x, newPos.y);								
  94:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				prepMouseMoveMsg(&evt);
  95:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				myPos = newPos;
  96:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				newPos.x = UNDF;
  97:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				newPos.y = UNDF;
  98:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				newPos.o = UNDF;
  99:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}
 100:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else{
 101:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			ButtonPressEvent thisEvt;
 102:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			checkForEvent(frameStart+MK_SLOT_LENGTH*prevLoopID, frameStart+MK_SLOT_LENGTH*loopID, &thisEvt);
 103:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(thisEvt.button!=BUTTON_UNKNOWN && thisEvt.button!=MOUSE_EVENT_MARKER_FLAG){
 104:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				if(thisEvt.src == getDropletID()){
 105:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					if(isWired){
 106:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 						wireTxButtonPress(thisEvt.button);
 107:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					}else{
 108:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 						prepButtonPressMsg(&thisEvt);
 109:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					}
 110:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				}
 111:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}		
 112:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			prevLoopID = loopID;
 113:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 114:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(!isBlinking){
 115:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			setRGB(5,0, 15);
 116:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}		
 117:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 118:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 119:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 120:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** static void keyboardLoop(void){
 121:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	uint32_t frameTime = getTime()-frameStart;
 122:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(frameTime>MK_FRAME_LENGTH){
 123:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameTime = frameTime-MK_FRAME_LENGTH;
 124:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameStart += MK_FRAME_LENGTH;
 125:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 126:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(loopID!=(frameTime/MK_SLOT_LENGTH)){
 127:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		loopID = frameTime/MK_SLOT_LENGTH;
 128:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		ButtonPressEvent thisEvt;
 129:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		checkForEvent(frameStart+MK_SLOT_LENGTH*(loopID-1), frameStart+MK_SLOT_LENGTH*loopID, &thisEvt);
 130:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(thisEvt.button!=BUTTON_UNKNOWN && thisEvt.button!=MOUSE_EVENT_MARKER_FLAG){
 131:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(thisEvt.src == getDropletID()){
 132:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				if(myButton == BUTTON_SHIFT){
 133:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					isShifted = handleShiftPressed();
 134:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					thisEvt.button = isShifted ? BUTTON_CAPSLOCK_ON : BUTTON_CAPSLOCK_OFF;
 135:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				}
 136:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				if(isWired){
 137:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					wireTxButtonPress(thisEvt.button);
 138:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				}else{
 139:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					prepButtonPressMsg(&thisEvt);
 140:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				}
 141:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}else{
 142:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				if(isWired){
 143:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					wireTxButtonPress(thisEvt.button);
 144:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				}else if(thisEvt.button==BUTTON_SHIFT){
 145:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					prepButtonPressMsg(&thisEvt);
 146:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				}
 147:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}
 148:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 149:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(!isBlinking){
 150:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			setRGB(0,0, 15);
 151:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 152:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 153:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 154:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 155:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void loop(){
 156:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	switch(myRole){
 157:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		case  UNKNOWN: roleUnknownLoop(); break;
 158:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		case    MOUSE: mouseLoop(); break;
 159:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		case KEYBOARD: keyboardLoop(); break;
 160:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 161:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	delayMS(LOOP_DELAY_MS);
 162:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 163:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 164:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void handleMeas(Rnb* meas){
 165:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	RNB_DEBUG_PRINT("\t(RNB) ID: %04X | R: %4u B: %4d H: %4d\r\n", last_good_rnb.id, last_good_rnb.ran
 166:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(myRole != MOUSE){
 167:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		useRNBmeas(meas);
 168:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 169:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 170:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 171:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void handleMsg(irMsg* msgStruct){
 172:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(IS_BOT_MEAS_MSG(msgStruct)){
 173:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(myRole != MOUSE){ //mouse will be moving too much to participate in localization.
 174:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			handleBotMeasMsg((BotMeasMsg*)(msgStruct->msg), msgStruct->senderID);
 175:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else if(myRole == MOUSE && periodicMouseBroadcast){
 176:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			mouseHandleBotMeasMsg((BotMeasMsg*)(msgStruct->msg));
 177:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}//The right mouse button isn't going to worry about its position at all.
 178:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else if(IS_BUTTON_PRESS_MSG(msgStruct)){
 179:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		handleButtonPressMsg((ButtonPressMsg*)(msgStruct->msg));
 180:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else if(IS_MOUSE_MOVE_MSG(msgStruct)){
 181:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		handleMouseMoveMsg((MouseMoveMsg*)(msgStruct->msg));
 182:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 183:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 184:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 185:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** static void mouseUpdatePos(BotPos* pos, Matrix* yourP){
 186:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Vector xMe = {newPos.x, newPos.y, degToRad(newPos.o)};
 187:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Vector xMeFromYou = {pos->x, pos->y, degToRad(pos->o)};
 188:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Matrix myP;
 189:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	decompressP(&myP, &newPosCovar);
 190:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Matrix myNewP;
 191:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Vector myNewPos;
 192:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 193:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	covarIntersection(&myNewPos, &myNewP, &xMe, &myP, &xMeFromYou, yourP);
 194:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(!positiveDefiniteQ(&myNewP)){
 195:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 196:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 197:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	float updateDist = updateDistance(&xMe, &myP, &xMeFromYou, yourP);
 198:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(updateDist>4.0){
 199:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 200:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else if(updateDist>1.0){
 201:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		covarUnion(&myNewPos, &myNewP, &xMe, &myP, &xMeFromYou, yourP);
 202:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(!positiveDefiniteQ(&myNewP)){
 203:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			return;
 204:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 205:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 206:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 207:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.x = myNewPos[0]>8191 ? 8191 : (myNewPos[0]<-8192 ? -8192 : myNewPos[0]);
 208:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.y = myNewPos[1]>8191 ? 8191 : (myNewPos[1]<-8192 ? -8192 : myNewPos[1]);
 209:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.o = (radToDeg(myNewPos[2]) + 0.5);
 210:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	compressP(&myNewP, &newPosCovar);
 211:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 212:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 213:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void mouseHandleBotMeasMsg(BotMeasMsg* msg){
 214:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(!POS_DEFINED(&(msg->pos))){
 215:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 216:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 217:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Matrix covar;
 218:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	decompressP(&covar, &(msg->covar));
 219:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(!POS_DEFINED(&newPos)){
 220:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		newPos = msg->pos;
 221:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		for(uint8_t i=0;i<6;i++){
 222:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			newPosCovar[i].u = msg->covar[i].u;
 223:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 224:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else{
 225:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		mouseUpdatePos(&(msg->pos), &covar);
 226:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 227:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 228:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 229:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 230:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void handleButtonPressMsg(ButtonPressMsg* msg){
 231:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	ButtonPressEvent* evt = &(msg->evt);
 232:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	evt->time = (getTime()/MIN_MULTIPRESS_DELAY)*MIN_MULTIPRESS_DELAY + ((evt->time)%MIN_MULTIPRESS_DE
 233:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(evt->button == BUTTON_L_CLICK){
 234:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		leftMouseID = evt->src;
 235:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 236:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(addEvent(evt)){
 237:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(evt->button==BUTTON_CAPSLOCK_ON){
 238:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			isShifted = 1;
 239:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			setGreenLED(5);
 240:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else if(evt->button==BUTTON_CAPSLOCK_OFF){
 241:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			isShifted = 0;
 242:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			setGreenLED(0);
 243:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 244:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 245:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 246:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 247:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void handleMouseMoveMsg(MouseMoveMsg* msg){
 248:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	MouseMoveEvent evt;
 249:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	evt.time = (getTime()/MIN_MULTIPRESS_DELAY)*MIN_MULTIPRESS_DELAY + ((msg->time)%MIN_MULTIPRESS_DEL
 250:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	evt.deltaX = msg->deltaX;
 251:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	evt.deltaY = msg->deltaY;
 252:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	evt.mouseEventMarker = MOUSE_EVENT_MARKER_FLAG;
 253:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(addEvent(&evt)){
 254:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(isWired){
 255:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			wireMouseMove(evt.deltaX, evt.deltaY);
 256:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else{
 257:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			//prepMouseMoveMsg(&evt);
 258:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 259:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 260:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 261:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 262:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** //This seems to take ~600us per sample.
 263:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** #define NUM_CHECK_SAMPLES 100
 264:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** inline static uint8_t targetMaxCount(void){
 265:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(getTime()<120000) return 255; //Impossible for the first two minutes.
 266:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(getTime()<600000) return (uint8_t)(0.5*NUM_CHECK_SAMPLES); //Less high for 2-10 minutes
 267:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	return (uint8_t)(0.33*NUM_CHECK_SAMPLES);
 268:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 269:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 270:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** #define NUM_MAXIMUMS_TRACKED 6
 271:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void checkPosition(){
 272:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Matrix covar;
 273:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	decompressP(&covar, &myPosCovar);
 274:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Vector eigValues;
 275:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Matrix eigVectors;
 276:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	eigensystem(&eigValues, &eigVectors, &covar);
 277:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	
 278:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Matrix diagSqrtEigValues = {{sqrt(eigValues[0]), 0, 0}, {0, sqrt(eigValues[1]), 0}, {0, 0, sqrt(ei
 279:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	matrixInplaceMultiply(&diagSqrtEigValues, &eigVectors, &diagSqrtEigValues);
 280:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Vector randNormSample;
 281:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Vector result;
 282:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	BotPos resultPos;
 283:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	resultPos.o = 0;
 284:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Button resultKeys[(LARGEST_KEYBOARD_KEY+1)] = {0}; //according to internet, this initializes every
 285:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	for(uint8_t i=0;i<NUM_CHECK_SAMPLES;i++){
 286:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		randNormSample[0] = randNorm(0,1);
 287:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		randNormSample[1] = randNorm(0,1);
 288:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		randNormSample[2] = randNorm(0,1);
 289:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		matrixTimesVector(&result, &diagSqrtEigValues, &randNormSample);
 290:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		resultPos.x = myPos.x + result[0];
 291:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		resultPos.y = myPos.y + result[1];
 292:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		resultKeys[getButtonFromPosition(&resultPos)]++;
 293:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 294:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Button maxButtons[NUM_MAXIMUMS_TRACKED] = {BUTTON_UNKNOWN};
 295:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	uint8_t maxButtonCounts[NUM_MAXIMUMS_TRACKED] = {0};	
 296:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	for(uint8_t i=0;i<=LARGEST_KEYBOARD_KEY;i++){
 297:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		for(uint8_t j=0;j<NUM_MAXIMUMS_TRACKED;j++){
 298:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(resultKeys[i]>maxButtonCounts[j]){
 299:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				for(uint8_t k=(NUM_MAXIMUMS_TRACKED-1);k>j;k--){
 300:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					maxButtons[k] = maxButtons[k-1];
 301:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					maxButtonCounts[k] = maxButtonCounts[k-1];
 302:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				}
 303:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				maxButtons[j] = i;
 304:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				maxButtonCounts[j] = resultKeys[i];
 305:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				break;
 306:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}
 307:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 308:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 309:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	printf("Max Keys:\r\n");
 310:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	printf(isprint(maxButtons[0]) ? "'%c' (%hu)" : "\\%2hu (%hu)", maxButtons[0], maxButtonCounts[0]);
 311:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	for(uint8_t i=1;i<NUM_MAXIMUMS_TRACKED;i++){
 312:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		printf(isprint(maxButtons[i]) ? ", '%c' (%hu)" : ", \\%2hu (%hu)", maxButtons[i], maxButtonCounts
 313:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 314:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	printf("\r\n");
 315:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(maxButtonCounts[0]>targetMaxCount() && maxButtons[0]!=BUTTON_UNKNOWN){
 316:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		setRoleAndButton(maxButtons[0]);
 317:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	} 
 318:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 319:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 320:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void rnbBroadcastDebugWrapper(){
 321:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	printf("Pre Broadcast\r\n");
 322:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	broadcastRnbData();
 323:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	printf("Post Broadcast\r\n");
 324:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 325:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 326:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void userMicInterrupt(){
 327:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(myRole==UNKNOWN || getTime()<1500 || ( (getTime()-lastKeypress) < MIN_MULTIPRESS_DELAY ) ){
 328:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 329:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 330:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	lastKeypress = getTime();
 331:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	ButtonPressEvent evt;
 332:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	buildButtonPressEvent(&evt);
 333:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(myButton == BUTTON_L_CLICK){
 334:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		periodicMouseBroadcast = 1;
 335:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 336:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(addEvent(&evt)){ //This keeps us from repeating or otherwise responding to ourselves.
 337:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		blinkLED(2, 100);	
 338:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 339:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 340:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 341:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** ///*
 342:../droplet_programs/mouseKeyboard/mouseKeyboard.c ****  //*	The function below is optional - commenting it in can be useful for debugging if you want to q
 343:../droplet_programs/mouseKeyboard/mouseKeyboard.c ****  //*	user variables over a serial connection.
 344:../droplet_programs/mouseKeyboard/mouseKeyboard.c ****  //*/
 345:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** uint8_t userHandleCommand(char* commandWord, char* commandArgs __attribute__ ((unused))){
 346:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(strcmp(commandWord,"WAKE")==0){
 347:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(wireSleepTask!=NULL){
 348:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			removeTask(wireSleepTask);
 349:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 350:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		wireSleepTask = scheduleTask(10000, wireSleep, NULL);
 351:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		isWired = 1;
 352:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return 1;
 353:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else if(strcmp(commandWord,"press")==0){
 354:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		char charPressed = commandArgs[0];
 355:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(charPressed == '\0'){
 356:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			return 0;
 357:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else if(isprint(charPressed)){
 358:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			ButtonPressEvent evt;
 359:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(isupper(charPressed) && !isShifted){
 360:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.button = tolower(charPressed);
 361:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}else if(islower(charPressed) && isShifted){
 362:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.button = toupper(charPressed);
 363:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}else{
 364:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.button = charPressed;
 365:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}
 366:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			evt.time = getTime();
 367:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			evt.src = getDropletID();			
 368:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			printf("PRESSED:    '%c'\r\n", evt.button);
 369:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			addEvent(&evt);
 370:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 371:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return 1;	
 372:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else if(strcmp(commandWord,"set_role")==0){
 373:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		Button button = atoi(commandArgs);
 374:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		setRoleAndButton(button);		
 375:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return 1;
 376:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else{
 377:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return 0;
 378:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 379:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 380:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 381:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void prepMouseMoveMsg(MouseMoveEvent* evt){
 382:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(isWired){
 383:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		wireMouseMove(evt->deltaX, evt->deltaY);
 384:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else{
 385:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		MouseMoveMsg msg;
 386:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		msg.time   = evt->time;
 387:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		msg.deltaX = evt->deltaX;
 388:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		msg.deltaY = evt->deltaY;
 389:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		msg.flag = MOUSE_MOVE_MSG_FLAG;
 390:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		MouseMoveMsgNode* msgNode = (MouseMoveMsgNode*)myMalloc(sizeof(MouseMoveMsgNode));
 391:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		msgNode->numTries = 0;
 392:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		msgNode->msg = msg;
 393:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		sendMouseMoveMsg(msgNode);
 394:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 395:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 396:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 397:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void sendMouseMoveMsg(MouseMoveMsgNode* msgNode){
 398:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(irIsBusy(ALL_DIRS)){
 399:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 400:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if( msgNode->numTries > 6 ){
 401:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				myFree(msgNode);
 402:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}else{
 403:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				scheduleTask(getExponentialBackoff(msgNode->numTries), (arg_func_t)sendButtonPressMsg, (void*)m
 404:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}
 405:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			msgNode->numTries++;
 406:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 407:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else{
 408:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		irSend(ALL_DIRS, (char*)(&(msgNode->msg)), sizeof(MouseMoveMsg));
 409:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		myFree(msgNode);
 410:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 411:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 412:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 413:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void prepButtonPressMsg(ButtonPressEvent* evt){
 414:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	ButtonPressMsg msg;
 415:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	msg.evt = *evt;
 416:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	msg.flag = KEYPRESS_MSG_FLAG;
 417:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	ButtonPressMsgNode* msgNode = (ButtonPressMsgNode*)myMalloc(sizeof(ButtonPressMsgNode));
 418:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	msgNode->numTries = 0;
 419:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	msgNode->msg = msg;
 420:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	sendButtonPressMsg(msgNode);
 421:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 422:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 423:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void sendButtonPressMsg(ButtonPressMsgNode* msgNode){
 424:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(irIsBusy(ALL_DIRS)){
 425:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 426:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(msgNode->numTries>6){
 427:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				myFree(msgNode);
 428:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}else{
 429:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				scheduleTask(getExponentialBackoff(msgNode->numTries), (arg_func_t)sendButtonPressMsg, (void*)m
 430:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}
 431:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			msgNode->numTries++;
 432:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 433:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else{
 434:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		irSend(ALL_DIRS, (char*)(&(msgNode->msg)), sizeof(ButtonPressMsg));
 435:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		myFree(msgNode);
 436:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		//if(rebroadcastButton(((msgNode->msg).evt).button)){
 437:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			//msgNode->numTries = 0;
 438:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			//scheduleTask(200, (arg_func_t)sendButtonPressMsg, (void*)msgNode);
 439:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		//}else{
 440:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			//myFree(msgNode);
 441:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		//}
 442:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 443:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 444:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 445:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void wireSleep(){
 104               		.loc 3 445 0
 105               		.cfi_startproc
 106               	/* prologue: function */
 107               	/* frame size = 0 */
 108               	/* stack size = 0 */
 109               	.L__stack_usage = 0
 446:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	isWired = 0;
 110               		.loc 3 446 0
 111 0000 1092 0000 		sts isWired,__zero_reg__
 112 0004 0895      		ret
 113               		.cfi_endproc
 114               	.LFE103:
 116               		.section	.rodata.str1.1,"aMS",@progbits,1
 117               	.LC0:
 118 0000 2564 2C20 		.string	"%d, %d, %hu, %hu\r\n"
 118      2564 2C20 
 118      2568 752C 
 118      2025 6875 
 118      0D0A 00
 119               		.section	.text.init,"ax",@progbits
 120               	.global	init
 122               	init:
 123               	.LFB83:
   5:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		printf_P(PSTR("Error! Localization requires SLOT_LENGTH_MS to be greater than LOCALIZATION_DUR!\r
 124               		.loc 3 5 0
 125               		.cfi_startproc
 126               	/* prologue: function */
 127               	/* frame size = 0 */
 128               	/* stack size = 0 */
 129               	.L__stack_usage = 0
   9:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	myRole = UNKNOWN;
 130               		.loc 3 9 0
 131 0000 0E94 0000 		call queueInit
  10:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	myButton = BUTTON_UNKNOWN;
 132               		.loc 3 10 0
 133 0004 1092 0000 		sts myRole,__zero_reg__
  11:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	loopID = 0xFFFF;
 134               		.loc 3 11 0
 135 0008 1092 0000 		sts myButton,__zero_reg__
  12:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	isShifted = 0;
 136               		.loc 3 12 0
 137 000c 2FEF      		ldi r18,lo8(-1)
 138 000e 3FEF      		ldi r19,lo8(-1)
 139 0010 2093 0000 		sts loopID,r18
 140 0014 3093 0000 		sts loopID+1,r19
  13:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	lastKeypress = 0;
 141               		.loc 3 13 0
 142 0018 1092 0000 		sts isShifted,__zero_reg__
  14:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	wireSleepTask = NULL;
 143               		.loc 3 14 0
 144 001c 1092 0000 		sts lastKeypress,__zero_reg__
 145 0020 1092 0000 		sts lastKeypress+1,__zero_reg__
 146 0024 1092 0000 		sts lastKeypress+2,__zero_reg__
 147 0028 1092 0000 		sts lastKeypress+3,__zero_reg__
  15:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	isWired = 0;
 148               		.loc 3 15 0
 149 002c 1092 0000 		sts wireSleepTask,__zero_reg__
 150 0030 1092 0000 		sts wireSleepTask+1,__zero_reg__
  16:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.x = UNDF;
 151               		.loc 3 16 0
 152 0034 1092 0000 		sts isWired,__zero_reg__
  17:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.y = UNDF;
 153               		.loc 3 17 0
 154 0038 80E0      		ldi r24,0
 155 003a 90E8      		ldi r25,lo8(-128)
 156 003c 8093 0000 		sts newPos,r24
 157 0040 9093 0000 		sts newPos+1,r25
  18:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.o = UNDF;
 158               		.loc 3 18 0
 159 0044 8093 0000 		sts newPos+2,r24
 160 0048 9093 0000 		sts newPos+2+1,r25
  19:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	periodicMouseBroadcast = 0;
 161               		.loc 3 19 0
 162 004c 8093 0000 		sts newPos+4,r24
 163 0050 9093 0000 		sts newPos+4+1,r25
  20:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	isBlinking = 0;
 164               		.loc 3 20 0
 165 0054 1092 0000 		sts periodicMouseBroadcast,__zero_reg__
  21:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	leftMouseID = 0xFFFF;
 166               		.loc 3 21 0
 167 0058 1092 0000 		sts isBlinking,__zero_reg__
  22:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	frameStart = getTime();
 168               		.loc 3 22 0
 169 005c 2093 0000 		sts leftMouseID,r18
 170 0060 3093 0000 		sts leftMouseID+1,r19
  23:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	mySlot = getSlot(getDropletID());
 171               		.loc 3 23 0
 172 0064 0E94 0000 		call getTime
 173 0068 6093 0000 		sts frameStart,r22
 174 006c 7093 0000 		sts frameStart+1,r23
 175 0070 8093 0000 		sts frameStart+2,r24
 176 0074 9093 0000 		sts frameStart+3,r25
  24:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	//printf("mySlot: %u, frame_length: %lu\r\n\r\n", mySlot, FRAME_LENGTH_MS);
 177               		.loc 3 24 0
 178 0078 4091 0000 		lds r20,droplet_ID
 179 007c 5091 0000 		lds r21,droplet_ID+1
 180 0080 9A01      		movw r18,r20
 181 0082 ADEA      		ldi r26,lo8(-83)
 182 0084 BBE1      		ldi r27,lo8(27)
 183 0086 0E94 0000 		call __umulhisi3
 184 008a 9695      		lsr r25
 185 008c 8795      		ror r24
 186 008e 9695      		lsr r25
 187 0090 8795      		ror r24
 188 0092 65E2      		ldi r22,lo8(37)
 189 0094 689F      		mul r22,r24
 190 0096 9001      		movw r18,r0
 191 0098 699F      		mul r22,r25
 192 009a 300D      		add r19,r0
 193 009c 1124      		clr __zero_reg__
 194 009e 421B      		sub r20,r18
 195 00a0 530B      		sbc r21,r19
 196 00a2 4093 0000 		sts mySlot,r20
 197 00a6 5093 0000 		sts mySlot+1,r21
  26:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		//BotPos tmpPos;
 198               		.loc 3 26 0
 199 00aa 2091 0000 		lds r18,myPos
 200 00ae 3091 0000 		lds r19,myPos+1
 201 00b2 2115      		cp r18,__zero_reg__
 202 00b4 40E8      		ldi r20,-128
 203 00b6 3407      		cpc r19,r20
 204 00b8 01F4      		brne .+2
 205 00ba 00C0      		rjmp .L6
  26:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		//BotPos tmpPos;
 206               		.loc 3 26 0 is_stmt 0 discriminator 1
 207 00bc E091 0000 		lds r30,myPos+2
 208 00c0 F091 0000 		lds r31,myPos+2+1
 209 00c4 E115      		cp r30,__zero_reg__
 210 00c6 80E8      		ldi r24,-128
 211 00c8 F807      		cpc r31,r24
 212 00ca 01F4      		brne .+2
 213 00cc 00C0      		rjmp .L6
  26:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		//BotPos tmpPos;
 214               		.loc 3 26 0 discriminator 2
 215 00ce 8091 0000 		lds r24,myPos+4
 216 00d2 9091 0000 		lds r25,myPos+4+1
 217 00d6 8115      		cp r24,__zero_reg__
 218 00d8 9048      		sbci r25,-128
 219 00da 01F4      		brne .+2
 220 00dc 00C0      		rjmp .L6
 221               	.LBB446:
 222               	.LBB447:
 223               		.file 4 "../droplet_programs/mouseKeyboard/button.h"
   1:../droplet_programs/mouseKeyboard/button.h **** #pragma once
   2:../droplet_programs/mouseKeyboard/button.h **** #include "localization.h"
   3:../droplet_programs/mouseKeyboard/button.h **** 
   4:../droplet_programs/mouseKeyboard/button.h **** #define LARGEST_KEYBOARD_KEY 96
   5:../droplet_programs/mouseKeyboard/button.h **** 
   6:../droplet_programs/mouseKeyboard/button.h **** typedef enum keyboard_key{
   7:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_UNKNOWN		=  0,
   8:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_ESCAPE		= 27,
   9:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_TILDA		= 96,
  10:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_ONE			= 49,
  11:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_TWO			= 50,
  12:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_THREE		= 51,
  13:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_FOUR			= 52,
  14:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_FIVE			= 53,
  15:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_SIX			= 54,
  16:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_SEVEN		= 55,
  17:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_EIGHT		= 56,
  18:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_NINE			= 57,
  19:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_ZERO			= 48,
  20:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_MINUS		= 45,
  21:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_EQUALS		= 61,
  22:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_BACKSPACE	=  8,
  23:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_TAB			=  9,
  24:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_Q		    = 81,
  25:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_W		    = 87,
  26:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_E		    = 69,
  27:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_R		    = 82,
  28:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_T		    = 84,
  29:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_Y		    = 89,
  30:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_U		    = 85,
  31:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_I		    = 73,
  32:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_O		    = 79,
  33:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_P		    = 80,
  34:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_L_BRACKET	= 91,
  35:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_R_BRACKET	= 93,
  36:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_BACKSLASH	= 92,
  37:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_CAPSLOCK_ON	= 20,
  38:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_CAPSLOCK_OFF = 21,
  39:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_A		    = 65,
  40:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_S		    = 83,
  41:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_D		    = 68,
  42:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_F		    = 70,
  43:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_G		    = 71,
  44:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_H		    = 72,
  45:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_J		    = 74,
  46:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_K		    = 75,
  47:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_L		    = 76,
  48:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_COLON		= 58,
  49:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_QUOTE		= 34,
  50:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_ENTER		= 13,
  51:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_Z		    = 90,
  52:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_X		    = 88,
  53:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_C		    = 67,
  54:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_V		    = 86,
  55:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_B		    = 66,
  56:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_N		    = 78,
  57:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_M		    = 77,
  58:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_COMMA		= 44,
  59:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_PERIOD		= 46,
  60:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_FWDSLASH		= 47,
  61:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_SHIFT		= 16,
  62:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_CTRL			= 17,
  63:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_OS			= 18,
  64:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_ALT			= 19,
  65:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_SPACE		= 32,
  66:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_UP		    = 38,
  67:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_LEFT			= 37,
  68:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_DOWN			= 40,
  69:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_RIGHT		= 39,
  70:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_L_CLICK		= 60,
  71:../droplet_programs/mouseKeyboard/button.h **** 	BUTTON_R_CLICK		= 62
  72:../droplet_programs/mouseKeyboard/button.h **** }Button;
  73:../droplet_programs/mouseKeyboard/button.h **** 
  74:../droplet_programs/mouseKeyboard/button.h **** #define BUTTON_WIDTH 50
  75:../droplet_programs/mouseKeyboard/button.h **** #define BUTTON_HALFWIDTH (BUTTON_WIDTH/2)
  76:../droplet_programs/mouseKeyboard/button.h **** #define BUTTON_HEIGHT 60
  77:../droplet_programs/mouseKeyboard/button.h **** 
  78:../droplet_programs/mouseKeyboard/button.h **** #define MOUSE_CIRCLE_X 610
  79:../droplet_programs/mouseKeyboard/button.h **** #define MOUSE_CIRCLE_Y 130
  80:../droplet_programs/mouseKeyboard/button.h **** #define MOUSE_CIRCLE_R (BUTTON_HEIGHT)
  81:../droplet_programs/mouseKeyboard/button.h **** 
  82:../droplet_programs/mouseKeyboard/button.h **** inline Button getButton_UPPERROW(int16_t x){
  83:../droplet_programs/mouseKeyboard/button.h **** 	uint8_t index = x/BUTTON_WIDTH;
  84:../droplet_programs/mouseKeyboard/button.h **** 	switch(index){
  85:../droplet_programs/mouseKeyboard/button.h **** 		case  0: return BUTTON_Q;
  86:../droplet_programs/mouseKeyboard/button.h **** 		case  1: return BUTTON_W;
  87:../droplet_programs/mouseKeyboard/button.h **** 		case  2: return BUTTON_E;
  88:../droplet_programs/mouseKeyboard/button.h **** 		case  3: return BUTTON_R;
  89:../droplet_programs/mouseKeyboard/button.h **** 		case  4: return BUTTON_T;
  90:../droplet_programs/mouseKeyboard/button.h **** 		case  5: return BUTTON_Y;
  91:../droplet_programs/mouseKeyboard/button.h **** 		case  6: return BUTTON_U;
  92:../droplet_programs/mouseKeyboard/button.h **** 		case  7: return BUTTON_I;
  93:../droplet_programs/mouseKeyboard/button.h **** 		case  8: return BUTTON_O;
  94:../droplet_programs/mouseKeyboard/button.h **** 		case  9: return BUTTON_P;
  95:../droplet_programs/mouseKeyboard/button.h **** 		case 10: return BUTTON_BACKSPACE;
  96:../droplet_programs/mouseKeyboard/button.h **** 		default: return BUTTON_UNKNOWN;			
  97:../droplet_programs/mouseKeyboard/button.h **** 	}
  98:../droplet_programs/mouseKeyboard/button.h **** }
  99:../droplet_programs/mouseKeyboard/button.h **** 
 100:../droplet_programs/mouseKeyboard/button.h **** inline Button getButton_HOMEROW(int16_t x){
 101:../droplet_programs/mouseKeyboard/button.h **** 	uint8_t index = (x-BUTTON_HALFWIDTH)/BUTTON_WIDTH;
 102:../droplet_programs/mouseKeyboard/button.h **** 	switch(index){
 103:../droplet_programs/mouseKeyboard/button.h **** 		case  0: return BUTTON_A;
 104:../droplet_programs/mouseKeyboard/button.h **** 		case  1: return BUTTON_S;
 105:../droplet_programs/mouseKeyboard/button.h **** 		case  2: return BUTTON_D;
 106:../droplet_programs/mouseKeyboard/button.h **** 		case  3: return BUTTON_F;
 107:../droplet_programs/mouseKeyboard/button.h **** 		case  4: return BUTTON_G;
 108:../droplet_programs/mouseKeyboard/button.h **** 		case  5: return BUTTON_H;
 109:../droplet_programs/mouseKeyboard/button.h **** 		case  6: return BUTTON_J;
 110:../droplet_programs/mouseKeyboard/button.h **** 		case  7: return BUTTON_K;
 111:../droplet_programs/mouseKeyboard/button.h **** 		case  8: return BUTTON_L;
 112:../droplet_programs/mouseKeyboard/button.h **** 		case  9: return BUTTON_ENTER;
 113:../droplet_programs/mouseKeyboard/button.h **** 		default: return BUTTON_UNKNOWN;	
 114:../droplet_programs/mouseKeyboard/button.h **** 	}
 115:../droplet_programs/mouseKeyboard/button.h **** }
 116:../droplet_programs/mouseKeyboard/button.h **** 
 117:../droplet_programs/mouseKeyboard/button.h **** inline Button getButton_LOWERROW(int16_t x){
 118:../droplet_programs/mouseKeyboard/button.h **** 	uint8_t index = x/BUTTON_WIDTH;
 119:../droplet_programs/mouseKeyboard/button.h **** 	switch(index){
 120:../droplet_programs/mouseKeyboard/button.h **** 		case  0: return BUTTON_SHIFT;
 121:../droplet_programs/mouseKeyboard/button.h **** 		case  1: return BUTTON_Z;
 122:../droplet_programs/mouseKeyboard/button.h **** 		case  2: return BUTTON_X;
 123:../droplet_programs/mouseKeyboard/button.h **** 		case  3: return BUTTON_C;
 124:../droplet_programs/mouseKeyboard/button.h **** 		case  4: return BUTTON_V;
 125:../droplet_programs/mouseKeyboard/button.h **** 		case  5: return BUTTON_B;
 126:../droplet_programs/mouseKeyboard/button.h **** 		case  6: return BUTTON_N;
 127:../droplet_programs/mouseKeyboard/button.h **** 		case  7: return BUTTON_M;
 128:../droplet_programs/mouseKeyboard/button.h **** 		case  8: return BUTTON_COMMA;
 129:../droplet_programs/mouseKeyboard/button.h **** 		case  9: return BUTTON_PERIOD;
 130:../droplet_programs/mouseKeyboard/button.h **** 		default: return BUTTON_UNKNOWN;
 131:../droplet_programs/mouseKeyboard/button.h **** 	}
 132:../droplet_programs/mouseKeyboard/button.h **** }
 133:../droplet_programs/mouseKeyboard/button.h **** 
 134:../droplet_programs/mouseKeyboard/button.h **** inline Button getButton_SPACEROW(int16_t x){
 135:../droplet_programs/mouseKeyboard/button.h **** 	if( x>(3*BUTTON_WIDTH + BUTTON_HALFWIDTH) &&
 136:../droplet_programs/mouseKeyboard/button.h **** 		x<(7*BUTTON_WIDTH + BUTTON_HALFWIDTH))
 137:../droplet_programs/mouseKeyboard/button.h **** 	{
 138:../droplet_programs/mouseKeyboard/button.h **** 		return BUTTON_SPACE;			
 139:../droplet_programs/mouseKeyboard/button.h **** 	}else{
 140:../droplet_programs/mouseKeyboard/button.h **** 		return BUTTON_UNKNOWN;
 141:../droplet_programs/mouseKeyboard/button.h **** 	}
 142:../droplet_programs/mouseKeyboard/button.h **** }
 143:../droplet_programs/mouseKeyboard/button.h **** 
 144:../droplet_programs/mouseKeyboard/button.h **** inline Button checkMouseCircle(BotPos* pos){
 145:../droplet_programs/mouseKeyboard/button.h **** 	if(pos->y > (MOUSE_CIRCLE_Y-MOUSE_CIRCLE_R) && pos->y < (MOUSE_CIRCLE_Y+MOUSE_CIRCLE_R)){
 146:../droplet_programs/mouseKeyboard/button.h **** 		if(pos->x < MOUSE_CIRCLE_X){
 147:../droplet_programs/mouseKeyboard/button.h **** 			return BUTTON_L_CLICK;
 148:../droplet_programs/mouseKeyboard/button.h **** 		}else if(pos->x < MOUSE_CIRCLE_X+MOUSE_CIRCLE_R){
 149:../droplet_programs/mouseKeyboard/button.h **** 			return BUTTON_R_CLICK;
 150:../droplet_programs/mouseKeyboard/button.h **** 		}
 151:../droplet_programs/mouseKeyboard/button.h **** 	}
 152:../droplet_programs/mouseKeyboard/button.h **** 	return BUTTON_UNKNOWN;
 153:../droplet_programs/mouseKeyboard/button.h **** }
 154:../droplet_programs/mouseKeyboard/button.h **** 
 155:../droplet_programs/mouseKeyboard/button.h **** inline Button getKeyFromPosition(BotPos* pos){
 156:../droplet_programs/mouseKeyboard/button.h **** 	uint8_t rowIndex = ((pos->y-10)/BUTTON_HEIGHT);
 157:../droplet_programs/mouseKeyboard/button.h **** 	switch(rowIndex){
 158:../droplet_programs/mouseKeyboard/button.h **** 		case 0: return getButton_SPACEROW(pos->x);
 159:../droplet_programs/mouseKeyboard/button.h **** 		case 1: return getButton_LOWERROW(pos->x);
 160:../droplet_programs/mouseKeyboard/button.h **** 		case 2: return getButton_HOMEROW(pos->x);
 161:../droplet_programs/mouseKeyboard/button.h **** 		case 3: return getButton_UPPERROW(pos->x);
 162:../droplet_programs/mouseKeyboard/button.h **** 		default: return BUTTON_UNKNOWN;
 163:../droplet_programs/mouseKeyboard/button.h **** 	}
 164:../droplet_programs/mouseKeyboard/button.h **** }
 165:../droplet_programs/mouseKeyboard/button.h **** 
 166:../droplet_programs/mouseKeyboard/button.h **** inline Button getButtonFromPosition(BotPos* pos){
 167:../droplet_programs/mouseKeyboard/button.h **** 	if(POS_DEFINED(pos)){
 168:../droplet_programs/mouseKeyboard/button.h **** 		if(pos->x < 550){
 224               		.loc 4 168 0 is_stmt 1
 225 00de 2632      		cpi r18,38
 226 00e0 82E0      		ldi r24,2
 227 00e2 3807      		cpc r19,r24
 228 00e4 04F4      		brge .L7
 229               	.LBB448:
 230               	.LBB449:
 157:../droplet_programs/mouseKeyboard/button.h **** 		case 0: return getButton_SPACEROW(pos->x);
 231               		.loc 4 157 0
 232 00e6 CF01      		movw r24,r30
 233 00e8 0A97      		sbiw r24,10
 234 00ea 6CE3      		ldi r22,lo8(60)
 235 00ec 70E0      		ldi r23,0
 236 00ee 0E94 0000 		call __divmodhi4
 237 00f2 7727      		clr r23
 238 00f4 6130      		cpi r22,1
 239 00f6 7105      		cpc r23,__zero_reg__
 240 00f8 01F4      		brne .+2
 241 00fa 00C0      		rjmp .L9
 242 00fc 04F4      		brge .+2
 243 00fe 00C0      		rjmp .L33
 244 0100 6230      		cpi r22,2
 245 0102 7105      		cpc r23,__zero_reg__
 246 0104 01F4      		brne .+2
 247 0106 00C0      		rjmp .L12
 248 0108 6330      		cpi r22,3
 249 010a 7105      		cpc r23,__zero_reg__
 250 010c 01F4      		brne .L8
 251 010e C901      		movw r24,r18
 252 0110 62E3      		ldi r22,lo8(50)
 253 0112 70E0      		ldi r23,0
 254 0114 0E94 0000 		call __divmodhi4
 255 0118 7727      		clr r23
 256 011a 6B30      		cpi r22,11
 257 011c 7105      		cpc r23,__zero_reg__
 258 011e 04F4      		brge .L8
 259 0120 DB01      		movw r26,r22
 260 0122 A050      		subi r26,lo8(-(CSWTCH.90))
 261 0124 B040      		sbci r27,hi8(-(CSWTCH.90))
 262 0126 4C91      		ld r20,X
 263               	.L15:
 264               	.LBE449:
 265               	.LBE448:
 266               	.LBE447:
 267               	.LBE446:
 268               	.LBB463:
 269               	.LBB464:
 115:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		myRole = UNKNOWN;	
 270               		.loc 1 115 0
 271 0128 4423      		tst r20
 272 012a 01F0      		breq .L8
 117:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		myRole = KEYBOARD;
 273               		.loc 1 117 0
 274 012c 842F      		mov r24,r20
 275 012e 8D7F      		andi r24,lo8(-3)
 276 0130 8C33      		cpi r24,lo8(60)
 277 0132 01F4      		brne .+2
 278 0134 00C0      		rjmp .L34
 279 0136 842F      		mov r24,r20
 280 0138 90E0      		ldi r25,0
 281               	.L14:
 118:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}else{
 282               		.loc 1 118 0
 283 013a 51E0      		ldi r21,lo8(1)
 284 013c 5093 0000 		sts myRole,r21
 285 0140 00C0      		rjmp .L18
 286               	.L7:
 287               	.LBE464:
 288               	.LBE463:
 289               	.LBB467:
 290               	.LBB460:
 291               	.LBB453:
 292               	.LBB454:
 145:../droplet_programs/mouseKeyboard/button.h **** 		if(pos->x < MOUSE_CIRCLE_X){
 293               		.loc 4 145 0
 294 0142 CF01      		movw r24,r30
 295 0144 8754      		subi r24,71
 296 0146 9109      		sbc r25,__zero_reg__
 297 0148 8737      		cpi r24,119
 298 014a 9105      		cpc r25,__zero_reg__
 299 014c 00F0      		brlo .L35
 300               	.L8:
 301               	.LBE454:
 302               	.LBE453:
 303               	.LBE460:
 304               	.LBE467:
 305               	.LBB468:
 306               	.LBB465:
 116:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}else if( (button!=BUTTON_L_CLICK) && (button!=BUTTON_R_CLICK) ){
 307               		.loc 1 116 0
 308 014e 1092 0000 		sts myRole,__zero_reg__
 309 0152 50E0      		ldi r21,0
 310 0154 80E0      		ldi r24,0
 311 0156 90E0      		ldi r25,0
 312 0158 40E0      		ldi r20,0
 313               	.L18:
 122:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 314               		.loc 1 122 0
 315 015a 4093 0000 		sts myButton,r20
 316               	.LBE465:
 317               	.LBE468:
  34:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 318               		.loc 3 34 0
 319 015e 9F93      		push r25
 320               	.LCFI0:
 321               		.cfi_def_cfa_offset 4
 322 0160 8F93      		push r24
 323               	.LCFI1:
 324               		.cfi_def_cfa_offset 5
 325 0162 1F92      		push __zero_reg__
 326               	.LCFI2:
 327               		.cfi_def_cfa_offset 6
 328 0164 5F93      		push r21
 329               	.LCFI3:
 330               		.cfi_def_cfa_offset 7
 331 0166 FF93      		push r31
 332               	.LCFI4:
 333               		.cfi_def_cfa_offset 8
 334 0168 EF93      		push r30
 335               	.LCFI5:
 336               		.cfi_def_cfa_offset 9
 337 016a 3F93      		push r19
 338               	.LCFI6:
 339               		.cfi_def_cfa_offset 10
 340 016c 2F93      		push r18
 341               	.LCFI7:
 342               		.cfi_def_cfa_offset 11
 343 016e 80E0      		ldi r24,lo8(.LC0)
 344 0170 90E0      		ldi r25,hi8(.LC0)
 345 0172 9F93      		push r25
 346               	.LCFI8:
 347               		.cfi_def_cfa_offset 12
 348 0174 8F93      		push r24
 349               	.LCFI9:
 350               		.cfi_def_cfa_offset 13
 351 0176 0E94 0000 		call printf
 352 017a 8DB7      		in r24,__SP_L__
 353 017c 9EB7      		in r25,__SP_H__
 354 017e 0A96      		adiw r24,10
 355 0180 8DBF      		out __SP_L__,r24
 356 0182 9EBF      		out __SP_H__,r25
 357               	.LCFI10:
 358               		.cfi_def_cfa_offset 3
 359               	.L6:
  42:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	#endif	
 360               		.loc 3 42 0
 361 0184 0C94 0000 		jmp enableMicInterrupt
 362               	.L35:
 363               	.LBB469:
 364               	.LBB461:
 365               	.LBB457:
 366               	.LBB455:
 146:../droplet_programs/mouseKeyboard/button.h **** 			return BUTTON_L_CLICK;
 367               		.loc 4 146 0
 368 0188 2236      		cpi r18,98
 369 018a 92E0      		ldi r25,2
 370 018c 3907      		cpc r19,r25
 371 018e 04F0      		brlt .L21
 148:../droplet_programs/mouseKeyboard/button.h **** 			return BUTTON_R_CLICK;
 372               		.loc 4 148 0
 373 0190 2E39      		cpi r18,-98
 374 0192 42E0      		ldi r20,2
 375 0194 3407      		cpc r19,r20
 376 0196 04F4      		brge .L8
 377 0198 8EE3      		ldi r24,lo8(62)
 378 019a 90E0      		ldi r25,0
 149:../droplet_programs/mouseKeyboard/button.h **** 		}
 379               		.loc 4 149 0
 380 019c 4EE3      		ldi r20,lo8(62)
 381               	.L16:
 382               	.LBE455:
 383               	.LBE457:
 384               	.LBE461:
 385               	.LBE469:
 386               	.LBB470:
 387               	.LBB466:
 120:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}
 388               		.loc 1 120 0
 389 019e 52E0      		ldi r21,lo8(2)
 390 01a0 5093 0000 		sts myRole,r21
 391 01a4 00C0      		rjmp .L18
 392               	.L33:
 393               	.LBE466:
 394               	.LBE470:
 395               	.LBB471:
 396               	.LBB462:
 397               	.LBB458:
 398               	.LBB452:
 157:../droplet_programs/mouseKeyboard/button.h **** 		case 0: return getButton_SPACEROW(pos->x);
 399               		.loc 4 157 0
 400 01a6 672B      		or r22,r23
 401 01a8 01F4      		brne .L8
 402               	.LBB450:
 403               	.LBB451:
 135:../droplet_programs/mouseKeyboard/button.h **** 		x<(7*BUTTON_WIDTH + BUTTON_HALFWIDTH))
 404               		.loc 4 135 0
 405 01aa C901      		movw r24,r18
 406 01ac 805B      		subi r24,-80
 407 01ae 9109      		sbc r25,__zero_reg__
 408 01b0 873C      		cpi r24,-57
 409 01b2 9105      		cpc r25,__zero_reg__
 410 01b4 00F4      		brsh .L8
 411 01b6 80E2      		ldi r24,lo8(32)
 412 01b8 90E0      		ldi r25,0
 138:../droplet_programs/mouseKeyboard/button.h **** 	}else{
 413               		.loc 4 138 0
 414 01ba 40E2      		ldi r20,lo8(32)
 415 01bc 00C0      		rjmp .L14
 416               	.L34:
 417 01be 842F      		mov r24,r20
 418 01c0 90E0      		ldi r25,0
 419 01c2 00C0      		rjmp .L16
 420               	.L21:
 421               	.LBE451:
 422               	.LBE450:
 423               	.LBE452:
 424               	.LBE458:
 425               	.LBB459:
 426               	.LBB456:
 146:../droplet_programs/mouseKeyboard/button.h **** 			return BUTTON_L_CLICK;
 427               		.loc 4 146 0
 428 01c4 8CE3      		ldi r24,lo8(60)
 429 01c6 90E0      		ldi r25,0
 147:../droplet_programs/mouseKeyboard/button.h **** 		}else if(pos->x < MOUSE_CIRCLE_X+MOUSE_CIRCLE_R){
 430               		.loc 4 147 0
 431 01c8 4CE3      		ldi r20,lo8(60)
 432 01ca 00C0      		rjmp .L16
 433               	.L12:
 434 01cc C901      		movw r24,r18
 435 01ce 4997      		sbiw r24,25
 436 01d0 62E3      		ldi r22,lo8(50)
 437 01d2 70E0      		ldi r23,0
 438 01d4 0E94 0000 		call __divmodhi4
 439 01d8 7727      		clr r23
 440 01da 6A30      		cpi r22,10
 441 01dc 7105      		cpc r23,__zero_reg__
 442 01de 04F0      		brlt .+2
 443 01e0 00C0      		rjmp .L8
 444 01e2 DB01      		movw r26,r22
 445 01e4 A050      		subi r26,lo8(-(CSWTCH.92))
 446 01e6 B040      		sbci r27,hi8(-(CSWTCH.92))
 447 01e8 4C91      		ld r20,X
 448 01ea 00C0      		rjmp .L15
 449               	.L9:
 450 01ec C901      		movw r24,r18
 451 01ee 62E3      		ldi r22,lo8(50)
 452 01f0 70E0      		ldi r23,0
 453 01f2 0E94 0000 		call __divmodhi4
 454 01f6 7727      		clr r23
 455 01f8 6A30      		cpi r22,10
 456 01fa 7105      		cpc r23,__zero_reg__
 457 01fc 04F0      		brlt .+2
 458 01fe 00C0      		rjmp .L8
 459 0200 DB01      		movw r26,r22
 460 0202 A050      		subi r26,lo8(-(CSWTCH.94))
 461 0204 B040      		sbci r27,hi8(-(CSWTCH.94))
 462 0206 4C91      		ld r20,X
 463 0208 00C0      		rjmp .L15
 464               	.LBE456:
 465               	.LBE459:
 466               	.LBE462:
 467               	.LBE471:
 468               		.cfi_endproc
 469               	.LFE83:
 471               		.section	.text.handleMeas,"ax",@progbits
 472               	.global	handleMeas
 474               	handleMeas:
 475               	.LFB88:
 164:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	RNB_DEBUG_PRINT("\t(RNB) ID: %04X | R: %4u B: %4d H: %4d\r\n", last_good_rnb.id, last_good_rnb.ran
 476               		.loc 3 164 0
 477               		.cfi_startproc
 478               	.LVL9:
 479               	/* prologue: function */
 480               	/* frame size = 0 */
 481               	/* stack size = 0 */
 482               	.L__stack_usage = 0
 166:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		useRNBmeas(meas);
 483               		.loc 3 166 0
 484 0000 2091 0000 		lds r18,myRole
 485 0004 2230      		cpi r18,lo8(2)
 486 0006 01F0      		breq .L36
 167:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 487               		.loc 3 167 0
 488 0008 0C94 0000 		jmp useRNBmeas
 489               	.LVL10:
 490               	.L36:
 491 000c 0895      		ret
 492               		.cfi_endproc
 493               	.LFE88:
 495               	.global	__floatsisf
 496               	.global	__divsf3
 497               	.global	__mulsf3
 498               	.global	__gesf2
 499               	.global	__addsf3
 500               	.global	__subsf3
 501               	.global	__gtsf2
 502               	.global	__ltsf2
 503               	.global	__fixsfsi
 504               		.section	.text.mouseHandleBotMeasMsg,"ax",@progbits
 505               	.global	mouseHandleBotMeasMsg
 507               	mouseHandleBotMeasMsg:
 508               	.LFB91:
 213:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(!POS_DEFINED(&(msg->pos))){
 509               		.loc 3 213 0
 510               		.cfi_startproc
 511               	.LVL11:
 512 0000 AF92      		push r10
 513               	.LCFI11:
 514               		.cfi_def_cfa_offset 4
 515               		.cfi_offset 10, -3
 516 0002 BF92      		push r11
 517               	.LCFI12:
 518               		.cfi_def_cfa_offset 5
 519               		.cfi_offset 11, -4
 520 0004 CF92      		push r12
 521               	.LCFI13:
 522               		.cfi_def_cfa_offset 6
 523               		.cfi_offset 12, -5
 524 0006 DF92      		push r13
 525               	.LCFI14:
 526               		.cfi_def_cfa_offset 7
 527               		.cfi_offset 13, -6
 528 0008 EF92      		push r14
 529               	.LCFI15:
 530               		.cfi_def_cfa_offset 8
 531               		.cfi_offset 14, -7
 532 000a FF92      		push r15
 533               	.LCFI16:
 534               		.cfi_def_cfa_offset 9
 535               		.cfi_offset 15, -8
 536 000c 0F93      		push r16
 537               	.LCFI17:
 538               		.cfi_def_cfa_offset 10
 539               		.cfi_offset 16, -9
 540 000e 1F93      		push r17
 541               	.LCFI18:
 542               		.cfi_def_cfa_offset 11
 543               		.cfi_offset 17, -10
 544 0010 CF93      		push r28
 545               	.LCFI19:
 546               		.cfi_def_cfa_offset 12
 547               		.cfi_offset 28, -11
 548 0012 DF93      		push r29
 549               	.LCFI20:
 550               		.cfi_def_cfa_offset 13
 551               		.cfi_offset 29, -12
 552 0014 CDB7      		in r28,__SP_L__
 553 0016 DEB7      		in r29,__SP_H__
 554               	.LCFI21:
 555               		.cfi_def_cfa_register 28
 556 0018 C059      		subi r28,-112
 557 001a D109      		sbc r29,__zero_reg__
 558               	.LCFI22:
 559               		.cfi_def_cfa_offset 157
 560 001c CDBF      		out __SP_L__,r28
 561 001e DEBF      		out __SP_H__,r29
 562               	/* prologue: function */
 563               	/* frame size = 144 */
 564               	/* stack size = 154 */
 565               	.L__stack_usage = 154
 566 0020 FC01      		movw r30,r24
 214:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 567               		.loc 3 214 0
 568 0022 8081      		ld r24,Z
 569 0024 9181      		ldd r25,Z+1
 570               	.LVL12:
 571 0026 8115      		cp r24,__zero_reg__
 572 0028 9048      		sbci r25,-128
 573 002a 01F4      		brne .+2
 574 002c 00C0      		rjmp .L38
 214:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 575               		.loc 3 214 0 is_stmt 0 discriminator 1
 576 002e 8281      		ldd r24,Z+2
 577 0030 9381      		ldd r25,Z+3
 578 0032 8115      		cp r24,__zero_reg__
 579 0034 9048      		sbci r25,-128
 580 0036 01F4      		brne .+2
 581 0038 00C0      		rjmp .L38
 214:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 582               		.loc 3 214 0 discriminator 2
 583 003a 8481      		ldd r24,Z+4
 584 003c 9581      		ldd r25,Z+5
 585 003e 8115      		cp r24,__zero_reg__
 586 0040 9048      		sbci r25,-128
 587 0042 01F4      		brne .+2
 588 0044 00C0      		rjmp .L38
 589 0046 8F01      		movw r16,r30
 590               	.LVL13:
 591               	.LBB489:
 592               	.LBB490:
 218:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(!POS_DEFINED(&newPos)){
 593               		.loc 3 218 0 is_stmt 1
 594 0048 7F01      		movw r14,r30
 595 004a 86E0      		ldi r24,6
 596 004c E80E      		add r14,r24
 597 004e F11C      		adc r15,__zero_reg__
 598 0050 B701      		movw r22,r14
 599 0052 CE01      		movw r24,r28
 600 0054 875B      		subi r24,-73
 601 0056 9F4F      		sbci r25,-1
 602 0058 0E94 0000 		call decompressP
 603               	.LVL14:
 219:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		newPos = msg->pos;
 604               		.loc 3 219 0
 605 005c 6091 0000 		lds r22,newPos
 606 0060 7091 0000 		lds r23,newPos+1
 607 0064 6115      		cp r22,__zero_reg__
 608 0066 90E8      		ldi r25,-128
 609 0068 7907      		cpc r23,r25
 610 006a 01F4      		brne .+2
 611 006c 00C0      		rjmp .L40
 612 006e C090 0000 		lds r12,newPos+2
 613 0072 D090 0000 		lds r13,newPos+2+1
 614 0076 C114      		cp r12,__zero_reg__
 615 0078 E0E8      		ldi r30,-128
 616 007a DE06      		cpc r13,r30
 617 007c 01F4      		brne .+2
 618 007e 00C0      		rjmp .L40
 619 0080 A090 0000 		lds r10,newPos+4
 620 0084 B090 0000 		lds r11,newPos+4+1
 621 0088 A114      		cp r10,__zero_reg__
 622 008a F0E8      		ldi r31,-128
 623 008c BF06      		cpc r11,r31
 624 008e 01F4      		brne .+2
 625 0090 00C0      		rjmp .L40
 626               	.LVL15:
 627               	.LBB491:
 628               	.LBB492:
 186:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Vector xMeFromYou = {pos->x, pos->y, degToRad(pos->o)};
 629               		.loc 3 186 0
 630 0092 072E      		mov __tmp_reg__,r23
 631 0094 000C      		lsl r0
 632 0096 880B      		sbc r24,r24
 633 0098 990B      		sbc r25,r25
 634 009a 0E94 0000 		call __floatsisf
 635               	.LVL16:
 636 009e CB57      		subi r28,lo8(-133)
 637 00a0 DF4F      		sbci r29,hi8(-133)
 638 00a2 6883      		st Y,r22
 639 00a4 7983      		std Y+1,r23
 640 00a6 8A83      		std Y+2,r24
 641 00a8 9B83      		std Y+3,r25
 642 00aa C558      		subi r28,lo8(133)
 643 00ac D040      		sbci r29,hi8(133)
 644 00ae B601      		movw r22,r12
 645 00b0 DD0C      		lsl r13
 646 00b2 880B      		sbc r24,r24
 647 00b4 990B      		sbc r25,r25
 648 00b6 0E94 0000 		call __floatsisf
 649               	.LVL17:
 650 00ba C757      		subi r28,lo8(-137)
 651 00bc DF4F      		sbci r29,hi8(-137)
 652 00be 6883      		st Y,r22
 653 00c0 7983      		std Y+1,r23
 654 00c2 8A83      		std Y+2,r24
 655 00c4 9B83      		std Y+3,r25
 656 00c6 C958      		subi r28,lo8(137)
 657 00c8 D040      		sbci r29,hi8(137)
 658               	.LVL18:
 659               	.LBB493:
 660               	.LBB494:
 661               		.file 5 "../include/range_algs.h"
   1:../include/range_algs.h **** #pragma once
   2:../include/range_algs.h **** 
   3:../include/range_algs.h **** #include "droplet_base.h"
   4:../include/range_algs.h **** #include "scheduler.h"
   5:../include/range_algs.h **** #include "ir_sensor.h"
   6:../include/range_algs.h **** #include "rgb_led.h"
   7:../include/range_algs.h **** 
   8:../include/range_algs.h **** #define DROPLET_RADIUS 22U  //mm
   9:../include/range_algs.h **** #define DROPLET_RADIUS_SQ 484U //mm
  10:../include/range_algs.h **** #define DROPLET_DIAMETER 44 //mm
  11:../include/range_algs.h **** 
  12:../include/range_algs.h **** #define MAX_USER_FACING_MEASUREMENTS 6
  13:../include/range_algs.h **** 
  14:../include/range_algs.h **** //Synchronization Timing Constants:
  15:../include/range_algs.h **** #define POST_BROADCAST_DELAY			30U
  16:../include/range_algs.h **** #define TIME_FOR_SET_IR_POWERS			2U
  17:../include/range_algs.h **** #define TIME_FOR_IR_MEAS				12U
  18:../include/range_algs.h **** #define TIME_FOR_GET_IR_VALS			16U
  19:../include/range_algs.h **** #define DELAY_BETWEEN_RB_TRANSMISSIONS	10U
  20:../include/range_algs.h **** 
  21:../include/range_algs.h **** //Constants for rnb processing:
  22:../include/range_algs.h **** #define MIN_MATRIX_SUM_THRESH	115
  23:../include/range_algs.h **** #define ELEVEN_SQRT3		   19.0525588833f
  24:../include/range_algs.h **** #define SQRT3_OVER2				0.8660254038f
  25:../include/range_algs.h **** #define RNB_DUR					220
  26:../include/range_algs.h **** 
  27:../include/range_algs.h **** typedef struct list_el {
  28:../include/range_algs.h **** 	float Rx;
  29:../include/range_algs.h **** 	float Ry;
  30:../include/range_algs.h **** 	float rijMag;
  31:../include/range_algs.h **** 	uint8_t e;
  32:../include/range_algs.h **** 	uint8_t s;
  33:../include/range_algs.h **** 	struct list_el *next;
  34:../include/range_algs.h **** } rVectorNode;
  35:../include/range_algs.h **** 
  36:../include/range_algs.h **** typedef struct rnb_data {
  37:../include/range_algs.h **** 	uint16_t range;
  38:../include/range_algs.h **** 	int16_t bearing;
  39:../include/range_algs.h **** 	int16_t heading;
  40:../include/range_algs.h **** 	id_t id;
  41:../include/range_algs.h **** }Rnb;
  42:../include/range_algs.h **** 
  43:../include/range_algs.h **** typedef struct rnb_data_node{
  44:../include/range_algs.h **** 	Rnb					  meas;
  45:../include/range_algs.h **** 	struct rnb_data_node* next;
  46:../include/range_algs.h **** } MeasNode;
  47:../include/range_algs.h **** volatile MeasNode* incMeasHead;
  48:../include/range_algs.h **** 
  49:../include/range_algs.h **** uint16_t memoryConsumedByMeasBuffer;
  50:../include/range_algs.h **** 
  51:../include/range_algs.h **** uint8_t numWaitingMeas;
  52:../include/range_algs.h **** volatile id_t rnbCmdID;
  53:../include/range_algs.h **** volatile uint8_t processing_rnb_flag;
  54:../include/range_algs.h **** 
  55:../include/range_algs.h **** void rangeAlgsInit(void);
  56:../include/range_algs.h **** 
  57:../include/range_algs.h **** void broadcastRnbData(void); //takes about 142ms.
  58:../include/range_algs.h **** //void receive_rnb_data(void);
  59:../include/range_algs.h **** void useRnbData(void);
  60:../include/range_algs.h **** 
  61:../include/range_algs.h **** void irRangeMeas(uint32_t rnbCmdSentTime);
  62:../include/range_algs.h **** void irRangeBlast(uint32_t rnbCmdSentTime, uint8_t power);
  63:../include/range_algs.h **** 
  64:../include/range_algs.h **** inline int8_t sgn(float x){
  65:../include/range_algs.h **** 	return (0<x)-(x<0);
  66:../include/range_algs.h **** }
  67:../include/range_algs.h **** 
  68:../include/range_algs.h **** inline int16_t prettyAngleDeg(int16_t angle){
  69:../include/range_algs.h **** 	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
  70:../include/range_algs.h **** }
  71:../include/range_algs.h **** 
  72:../include/range_algs.h **** inline float prettyAngle(float angle){
  73:../include/range_algs.h **** 	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) +
  74:../include/range_algs.h **** }
  75:../include/range_algs.h **** 
  76:../include/range_algs.h **** inline float radToDeg(float rad){
  77:../include/range_algs.h **** 	return (prettyAngle(rad) / M_PI) * 180;
  78:../include/range_algs.h **** }
  79:../include/range_algs.h **** 
  80:../include/range_algs.h **** inline float degToRad(float deg){
  81:../include/range_algs.h **** 	return prettyAngle( (deg / 180) * M_PI );
 662               		.loc 5 81 0
 663 00ca B501      		movw r22,r10
 664 00cc BB0C      		lsl r11
 665 00ce 880B      		sbc r24,r24
 666 00d0 990B      		sbc r25,r25
 667 00d2 0E94 0000 		call __floatsisf
 668               	.LVL19:
 669 00d6 20E0      		ldi r18,0
 670 00d8 30E0      		ldi r19,0
 671 00da 44E3      		ldi r20,lo8(52)
 672 00dc 53E4      		ldi r21,lo8(67)
 673 00de 0E94 0000 		call __divsf3
 674               	.LVL20:
 675 00e2 2BED      		ldi r18,lo8(-37)
 676 00e4 3FE0      		ldi r19,lo8(15)
 677 00e6 49E4      		ldi r20,lo8(73)
 678 00e8 50E4      		ldi r21,lo8(64)
 679 00ea 0E94 0000 		call __mulsf3
 680               	.LVL21:
 681 00ee 6B01      		movw r12,r22
 682 00f0 7C01      		movw r14,r24
 683               	.LVL22:
 684               	.LBB495:
 685               	.LBB496:
  73:../include/range_algs.h **** }
 686               		.loc 5 73 0
 687 00f2 20E0      		ldi r18,0
 688 00f4 30E0      		ldi r19,0
 689 00f6 A901      		movw r20,r18
 690 00f8 0E94 0000 		call __gesf2
 691               	.LVL23:
 692 00fc 2BED      		ldi r18,lo8(-37)
 693 00fe 3FE0      		ldi r19,lo8(15)
 694 0100 49E4      		ldi r20,lo8(73)
 695 0102 50E4      		ldi r21,lo8(64)
 696 0104 87FD      		sbrc r24,7
 697 0106 00C0      		rjmp .L88
 698 0108 C701      		movw r24,r14
 699 010a B601      		movw r22,r12
 700 010c 0E94 0000 		call __addsf3
 701               	.LVL24:
 702 0110 2BED      		ldi r18,lo8(-37)
 703 0112 3FE0      		ldi r19,lo8(15)
 704 0114 49EC      		ldi r20,lo8(-55)
 705 0116 50E4      		ldi r21,lo8(64)
 706 0118 0E94 0000 		call fmod
 707               	.LVL25:
 708 011c 2BED      		ldi r18,lo8(-37)
 709 011e 3FE0      		ldi r19,lo8(15)
 710 0120 49E4      		ldi r20,lo8(73)
 711 0122 50E4      		ldi r21,lo8(64)
 712 0124 0E94 0000 		call __subsf3
 713               	.LVL26:
 714               	.L46:
 715               	.LBE496:
 716               	.LBE495:
 717               	.LBE494:
 718               	.LBE493:
 186:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Vector xMeFromYou = {pos->x, pos->y, degToRad(pos->o)};
 719               		.loc 3 186 0
 720 0128 C357      		subi r28,lo8(-141)
 721 012a DF4F      		sbci r29,hi8(-141)
 722 012c 6883      		st Y,r22
 723 012e 7983      		std Y+1,r23
 724 0130 8A83      		std Y+2,r24
 725 0132 9B83      		std Y+3,r25
 726 0134 CD58      		subi r28,lo8(141)
 727 0136 D040      		sbci r29,hi8(141)
 187:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Matrix myP;
 728               		.loc 3 187 0
 729 0138 F801      		movw r30,r16
 730 013a 6081      		ld r22,Z
 731 013c 7181      		ldd r23,Z+1
 732 013e 072E      		mov __tmp_reg__,r23
 733 0140 000C      		lsl r0
 734 0142 880B      		sbc r24,r24
 735 0144 990B      		sbc r25,r25
 736 0146 0E94 0000 		call __floatsisf
 737               	.LVL27:
 738 014a ED96      		adiw r28,121-60
 739 014c 6CAF      		std Y+60,r22
 740 014e 7DAF      		std Y+61,r23
 741 0150 8EAF      		std Y+62,r24
 742 0152 9FAF      		std Y+63,r25
 743 0154 ED97      		sbiw r28,121-60
 744 0156 F801      		movw r30,r16
 745 0158 6281      		ldd r22,Z+2
 746 015a 7381      		ldd r23,Z+3
 747 015c 072E      		mov __tmp_reg__,r23
 748 015e 000C      		lsl r0
 749 0160 880B      		sbc r24,r24
 750 0162 990B      		sbc r25,r25
 751 0164 0E94 0000 		call __floatsisf
 752               	.LVL28:
 753 0168 C358      		subi r28,lo8(-125)
 754 016a DF4F      		sbci r29,hi8(-125)
 755 016c 6883      		st Y,r22
 756 016e 7983      		std Y+1,r23
 757 0170 8A83      		std Y+2,r24
 758 0172 9B83      		std Y+3,r25
 759 0174 CD57      		subi r28,lo8(125)
 760 0176 D040      		sbci r29,hi8(125)
 761               	.LVL29:
 762               	.LBB500:
 763               	.LBB501:
 764               		.loc 5 81 0
 765 0178 F801      		movw r30,r16
 766 017a 6481      		ldd r22,Z+4
 767 017c 7581      		ldd r23,Z+5
 768 017e 072E      		mov __tmp_reg__,r23
 769 0180 000C      		lsl r0
 770 0182 880B      		sbc r24,r24
 771 0184 990B      		sbc r25,r25
 772 0186 0E94 0000 		call __floatsisf
 773               	.LVL30:
 774 018a 20E0      		ldi r18,0
 775 018c 30E0      		ldi r19,0
 776 018e 44E3      		ldi r20,lo8(52)
 777 0190 53E4      		ldi r21,lo8(67)
 778 0192 0E94 0000 		call __divsf3
 779               	.LVL31:
 780 0196 2BED      		ldi r18,lo8(-37)
 781 0198 3FE0      		ldi r19,lo8(15)
 782 019a 49E4      		ldi r20,lo8(73)
 783 019c 50E4      		ldi r21,lo8(64)
 784 019e 0E94 0000 		call __mulsf3
 785               	.LVL32:
 786 01a2 6B01      		movw r12,r22
 787 01a4 7C01      		movw r14,r24
 788               	.LVL33:
 789               	.LBB502:
 790               	.LBB503:
  73:../include/range_algs.h **** }
 791               		.loc 5 73 0
 792 01a6 20E0      		ldi r18,0
 793 01a8 30E0      		ldi r19,0
 794 01aa A901      		movw r20,r18
 795 01ac 0E94 0000 		call __gesf2
 796               	.LVL34:
 797 01b0 2BED      		ldi r18,lo8(-37)
 798 01b2 3FE0      		ldi r19,lo8(15)
 799 01b4 49E4      		ldi r20,lo8(73)
 800 01b6 50E4      		ldi r21,lo8(64)
 801 01b8 87FD      		sbrc r24,7
 802 01ba 00C0      		rjmp .L89
 803 01bc C701      		movw r24,r14
 804 01be B601      		movw r22,r12
 805 01c0 0E94 0000 		call __addsf3
 806               	.LVL35:
 807 01c4 2BED      		ldi r18,lo8(-37)
 808 01c6 3FE0      		ldi r19,lo8(15)
 809 01c8 49EC      		ldi r20,lo8(-55)
 810 01ca 50E4      		ldi r21,lo8(64)
 811 01cc 0E94 0000 		call fmod
 812               	.LVL36:
 813 01d0 2BED      		ldi r18,lo8(-37)
 814 01d2 3FE0      		ldi r19,lo8(15)
 815 01d4 49E4      		ldi r20,lo8(73)
 816 01d6 50E4      		ldi r21,lo8(64)
 817 01d8 0E94 0000 		call __subsf3
 818               	.LVL37:
 819               	.L49:
 820               	.LBE503:
 821               	.LBE502:
 822               	.LBE501:
 823               	.LBE500:
 187:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Matrix myP;
 824               		.loc 3 187 0
 825 01dc CF57      		subi r28,lo8(-129)
 826 01de DF4F      		sbci r29,hi8(-129)
 827 01e0 6883      		st Y,r22
 828 01e2 7983      		std Y+1,r23
 829 01e4 8A83      		std Y+2,r24
 830 01e6 9B83      		std Y+3,r25
 831 01e8 C158      		subi r28,lo8(129)
 832 01ea D040      		sbci r29,hi8(129)
 189:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Matrix myNewP;
 833               		.loc 3 189 0
 834 01ec 60E0      		ldi r22,lo8(newPosCovar)
 835 01ee 70E0      		ldi r23,hi8(newPosCovar)
 836 01f0 CE01      		movw r24,r28
 837 01f2 8596      		adiw r24,37
 838 01f4 0E94 0000 		call decompressP
 839               	.LVL38:
 193:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(!positiveDefiniteQ(&myNewP)){
 840               		.loc 3 193 0
 841 01f8 CE01      		movw r24,r28
 842 01fa 875B      		subi r24,-73
 843 01fc 9F4F      		sbci r25,-1
 844 01fe 7C01      		movw r14,r24
 845 0200 8E01      		movw r16,r28
 846               	.LVL39:
 847 0202 0758      		subi r16,-121
 848 0204 1F4F      		sbci r17,-1
 849 0206 9E01      		movw r18,r28
 850 0208 2B5D      		subi r18,-37
 851 020a 3F4F      		sbci r19,-1
 852 020c AE01      		movw r20,r28
 853 020e 4B57      		subi r20,123
 854 0210 5F4F      		sbci r21,-1
 855 0212 BE01      		movw r22,r28
 856 0214 6F5F      		subi r22,-1
 857 0216 7F4F      		sbci r23,-1
 858 0218 8496      		adiw r24,36
 859 021a 0E94 0000 		call covarIntersection
 860               	.LVL40:
 194:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 861               		.loc 3 194 0
 862 021e CE01      		movw r24,r28
 863 0220 0196      		adiw r24,1
 864 0222 0E94 0000 		call positiveDefiniteQ
 865               	.LVL41:
 866 0226 8111      		cpse r24,__zero_reg__
 867 0228 00C0      		rjmp .L93
 868               	.LVL42:
 869               	.L38:
 870               	/* epilogue start */
 871               	.LBE492:
 872               	.LBE491:
 873               	.LBE490:
 874               	.LBE489:
 227:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 875               		.loc 3 227 0
 876 022a C057      		subi r28,112
 877 022c DF4F      		sbci r29,-1
 878 022e CDBF      		out __SP_L__,r28
 879 0230 DEBF      		out __SP_H__,r29
 880 0232 DF91      		pop r29
 881 0234 CF91      		pop r28
 882 0236 1F91      		pop r17
 883 0238 0F91      		pop r16
 884 023a FF90      		pop r15
 885 023c EF90      		pop r14
 886 023e DF90      		pop r13
 887 0240 CF90      		pop r12
 888 0242 BF90      		pop r11
 889 0244 AF90      		pop r10
 890 0246 0895      		ret
 891               	.LVL43:
 892               	.L40:
 893               	.LBB521:
 894               	.LBB520:
 220:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		for(uint8_t i=0;i<6;i++){
 895               		.loc 3 220 0
 896 0248 86E0      		ldi r24,lo8(6)
 897 024a F801      		movw r30,r16
 898 024c A0E0      		ldi r26,lo8(newPos)
 899 024e B0E0      		ldi r27,hi8(newPos)
 900               		0:
 901 0250 0190      		ld r0,Z+
 902 0252 0D92      		st X+,r0
 903 0254 8A95      		dec r24
 904 0256 01F4      		brne 0b
 905               	.LVL44:
 906 0258 D701      		movw r26,r14
 907 025a E0E0      		ldi r30,lo8(newPosCovar)
 908 025c F0E0      		ldi r31,hi8(newPosCovar)
 909               	.LVL45:
 910               	.L42:
 911               	.LBB518:
 222:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 912               		.loc 3 222 0
 913 025e 8D91      		ld r24,X+
 914 0260 9D91      		ld r25,X+
 915 0262 8193      		st Z+,r24
 916 0264 9193      		st Z+,r25
 221:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			newPosCovar[i].u = msg->covar[i].u;
 917               		.loc 3 221 0
 918 0266 20E0      		ldi r18,hi8(newPosCovar+12)
 919 0268 E030      		cpi r30,lo8(newPosCovar+12)
 920 026a F207      		cpc r31,r18
 921 026c 01F4      		brne .L42
 922 026e 00C0      		rjmp .L38
 923               	.LVL46:
 924               	.L93:
 925               	.LBE518:
 926               	.LBB519:
 927               	.LBB517:
 197:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(updateDist>4.0){
 928               		.loc 3 197 0
 929 0270 9701      		movw r18,r14
 930 0272 A801      		movw r20,r16
 931 0274 BE01      		movw r22,r28
 932 0276 6B5D      		subi r22,-37
 933 0278 7F4F      		sbci r23,-1
 934 027a CE01      		movw r24,r28
 935 027c 8B57      		subi r24,123
 936 027e 9F4F      		sbci r25,-1
 937 0280 0E94 0000 		call updateDistance
 938               	.LVL47:
 939 0284 6B01      		movw r12,r22
 940 0286 7C01      		movw r14,r24
 941               	.LVL48:
 198:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 942               		.loc 3 198 0
 943 0288 20E0      		ldi r18,0
 944 028a 30E0      		ldi r19,0
 945 028c 40E8      		ldi r20,lo8(-128)
 946 028e 50E4      		ldi r21,lo8(64)
 947 0290 0E94 0000 		call __gtsf2
 948               	.LVL49:
 949 0294 1816      		cp __zero_reg__,r24
 950 0296 04F0      		brlt .L38
 200:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		covarUnion(&myNewPos, &myNewP, &xMe, &myP, &xMeFromYou, yourP);
 951               		.loc 3 200 0
 952 0298 20E0      		ldi r18,0
 953 029a 30E0      		ldi r19,0
 954 029c 40E8      		ldi r20,lo8(-128)
 955 029e 5FE3      		ldi r21,lo8(63)
 956 02a0 C701      		movw r24,r14
 957 02a2 B601      		movw r22,r12
 958 02a4 0E94 0000 		call __gtsf2
 959               	.LVL50:
 960 02a8 1816      		cp __zero_reg__,r24
 961 02aa 04F4      		brge .L54
 201:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(!positiveDefiniteQ(&myNewP)){
 962               		.loc 3 201 0
 963 02ac FE01      		movw r30,r28
 964 02ae E75B      		subi r30,-73
 965 02b0 FF4F      		sbci r31,-1
 966 02b2 7F01      		movw r14,r30
 967 02b4 8E01      		movw r16,r28
 968 02b6 0758      		subi r16,-121
 969 02b8 1F4F      		sbci r17,-1
 970 02ba 9E01      		movw r18,r28
 971 02bc 2B5D      		subi r18,-37
 972 02be 3F4F      		sbci r19,-1
 973 02c0 AE01      		movw r20,r28
 974 02c2 4B57      		subi r20,123
 975 02c4 5F4F      		sbci r21,-1
 976 02c6 BE01      		movw r22,r28
 977 02c8 6F5F      		subi r22,-1
 978 02ca 7F4F      		sbci r23,-1
 979 02cc CE01      		movw r24,r28
 980 02ce 8359      		subi r24,-109
 981 02d0 9F4F      		sbci r25,-1
 982 02d2 0E94 0000 		call covarUnion
 983               	.LVL51:
 202:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			return;
 984               		.loc 3 202 0
 985 02d6 CE01      		movw r24,r28
 986 02d8 0196      		adiw r24,1
 987 02da 0E94 0000 		call positiveDefiniteQ
 988               	.LVL52:
 989 02de 8823      		tst r24
 990 02e0 01F4      		brne .+2
 991 02e2 00C0      		rjmp .L38
 992               	.L54:
 207:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.y = myNewPos[1]>8191 ? 8191 : (myNewPos[1]<-8192 ? -8192 : myNewPos[1]);
 993               		.loc 3 207 0
 994 02e4 E196      		adiw r28,109-60
 995 02e6 CCAC      		ldd r12,Y+60
 996 02e8 DDAC      		ldd r13,Y+61
 997 02ea EEAC      		ldd r14,Y+62
 998 02ec FFAC      		ldd r15,Y+63
 999 02ee E197      		sbiw r28,109-60
 1000               	.LVL53:
 1001 02f0 20E0      		ldi r18,0
 1002 02f2 38EF      		ldi r19,lo8(-8)
 1003 02f4 4FEF      		ldi r20,lo8(-1)
 1004 02f6 55E4      		ldi r21,lo8(69)
 1005 02f8 C701      		movw r24,r14
 1006 02fa B601      		movw r22,r12
 1007 02fc 0E94 0000 		call __gtsf2
 1008               	.LVL54:
 1009 0300 1816      		cp __zero_reg__,r24
 1010 0302 04F0      		brlt .+2
 1011 0304 00C0      		rjmp .L94
 1012 0306 6FEF      		ldi r22,lo8(-1)
 1013 0308 7FE1      		ldi r23,lo8(31)
 1014               	.L52:
 1015 030a 6093 0000 		sts newPos,r22
 1016 030e 7093 0000 		sts newPos+1,r23
 208:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.o = (radToDeg(myNewPos[2]) + 0.5);
 1017               		.loc 3 208 0
 1018 0312 E596      		adiw r28,113-60
 1019 0314 CCAC      		ldd r12,Y+60
 1020 0316 DDAC      		ldd r13,Y+61
 1021 0318 EEAC      		ldd r14,Y+62
 1022 031a FFAC      		ldd r15,Y+63
 1023 031c E597      		sbiw r28,113-60
 1024 031e 20E0      		ldi r18,0
 1025 0320 38EF      		ldi r19,lo8(-8)
 1026 0322 4FEF      		ldi r20,lo8(-1)
 1027 0324 55E4      		ldi r21,lo8(69)
 1028 0326 C701      		movw r24,r14
 1029 0328 B601      		movw r22,r12
 1030 032a 0E94 0000 		call __gtsf2
 1031               	.LVL55:
 1032 032e 1816      		cp __zero_reg__,r24
 1033 0330 04F4      		brge .+2
 1034 0332 00C0      		rjmp .L61
 1035 0334 20E0      		ldi r18,0
 1036 0336 30E0      		ldi r19,0
 1037 0338 40E0      		ldi r20,0
 1038 033a 56EC      		ldi r21,lo8(-58)
 1039 033c C701      		movw r24,r14
 1040 033e B601      		movw r22,r12
 1041 0340 0E94 0000 		call __ltsf2
 1042               	.LVL56:
 1043 0344 87FD      		sbrc r24,7
 1044 0346 00C0      		rjmp .L62
 1045 0348 C701      		movw r24,r14
 1046 034a B601      		movw r22,r12
 1047 034c 0E94 0000 		call __fixsfsi
 1048               	.LVL57:
 1049               	.L55:
 1050 0350 6093 0000 		sts newPos+2,r22
 1051 0354 7093 0000 		sts newPos+2+1,r23
 209:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	compressP(&myNewP, &newPosCovar);
 1052               		.loc 3 209 0
 1053 0358 E996      		adiw r28,117-60
 1054 035a CCAC      		ldd r12,Y+60
 1055 035c DDAC      		ldd r13,Y+61
 1056 035e EEAC      		ldd r14,Y+62
 1057 0360 FFAC      		ldd r15,Y+63
 1058 0362 E997      		sbiw r28,117-60
 1059               	.LVL58:
 1060               	.LBB507:
 1061               	.LBB508:
 1062               	.LBB509:
 1063               	.LBB510:
  73:../include/range_algs.h **** }
 1064               		.loc 5 73 0
 1065 0364 20E0      		ldi r18,0
 1066 0366 30E0      		ldi r19,0
 1067 0368 A901      		movw r20,r18
 1068 036a C701      		movw r24,r14
 1069 036c B601      		movw r22,r12
 1070 036e 0E94 0000 		call __gesf2
 1071               	.LVL59:
 1072 0372 2BED      		ldi r18,lo8(-37)
 1073 0374 3FE0      		ldi r19,lo8(15)
 1074 0376 49E4      		ldi r20,lo8(73)
 1075 0378 50E4      		ldi r21,lo8(64)
 1076 037a 87FD      		sbrc r24,7
 1077 037c 00C0      		rjmp .L91
 1078 037e C701      		movw r24,r14
 1079 0380 B601      		movw r22,r12
 1080 0382 0E94 0000 		call __addsf3
 1081               	.LVL60:
 1082 0386 2BED      		ldi r18,lo8(-37)
 1083 0388 3FE0      		ldi r19,lo8(15)
 1084 038a 49EC      		ldi r20,lo8(-55)
 1085 038c 50E4      		ldi r21,lo8(64)
 1086 038e 0E94 0000 		call fmod
 1087               	.LVL61:
 1088 0392 2BED      		ldi r18,lo8(-37)
 1089 0394 3FE0      		ldi r19,lo8(15)
 1090 0396 49E4      		ldi r20,lo8(73)
 1091 0398 50E4      		ldi r21,lo8(64)
 1092 039a 0E94 0000 		call __subsf3
 1093               	.LVL62:
 1094               	.L58:
 1095               	.LBE510:
 1096               	.LBE509:
 1097               	.LBE508:
 1098               	.LBE507:
 209:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	compressP(&myNewP, &newPosCovar);
 1099               		.loc 3 209 0
 1100 039e 2BED      		ldi r18,lo8(-37)
 1101 03a0 3FE0      		ldi r19,lo8(15)
 1102 03a2 49E4      		ldi r20,lo8(73)
 1103 03a4 50E4      		ldi r21,lo8(64)
 1104 03a6 0E94 0000 		call __divsf3
 1105               	.LVL63:
 1106 03aa 20E0      		ldi r18,0
 1107 03ac 30E0      		ldi r19,0
 1108 03ae 44E3      		ldi r20,lo8(52)
 1109 03b0 53E4      		ldi r21,lo8(67)
 1110 03b2 0E94 0000 		call __mulsf3
 1111               	.LVL64:
 1112 03b6 20E0      		ldi r18,0
 1113 03b8 30E0      		ldi r19,0
 1114 03ba 40E0      		ldi r20,0
 1115 03bc 5FE3      		ldi r21,lo8(63)
 1116 03be 0E94 0000 		call __addsf3
 1117               	.LVL65:
 1118 03c2 0E94 0000 		call __fixsfsi
 1119               	.LVL66:
 1120 03c6 6093 0000 		sts newPos+4,r22
 1121 03ca 7093 0000 		sts newPos+4+1,r23
 210:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 1122               		.loc 3 210 0
 1123 03ce 60E0      		ldi r22,lo8(newPosCovar)
 1124 03d0 70E0      		ldi r23,hi8(newPosCovar)
 1125 03d2 CE01      		movw r24,r28
 1126 03d4 0196      		adiw r24,1
 1127 03d6 0E94 0000 		call compressP
 1128               	.LVL67:
 1129 03da 00C0      		rjmp .L38
 1130               	.LVL68:
 1131               	.L89:
 1132               	.LBB514:
 1133               	.LBB506:
 1134               	.LBB505:
 1135               	.LBB504:
  73:../include/range_algs.h **** }
 1136               		.loc 5 73 0
 1137 03dc C701      		movw r24,r14
 1138 03de B601      		movw r22,r12
 1139 03e0 0E94 0000 		call __subsf3
 1140               	.LVL69:
 1141 03e4 2BED      		ldi r18,lo8(-37)
 1142 03e6 3FE0      		ldi r19,lo8(15)
 1143 03e8 49EC      		ldi r20,lo8(-55)
 1144 03ea 50E4      		ldi r21,lo8(64)
 1145 03ec 0E94 0000 		call fmod
 1146               	.LVL70:
 1147 03f0 2BED      		ldi r18,lo8(-37)
 1148 03f2 3FE0      		ldi r19,lo8(15)
 1149 03f4 49E4      		ldi r20,lo8(73)
 1150 03f6 50E4      		ldi r21,lo8(64)
 1151 03f8 0E94 0000 		call __addsf3
 1152               	.LVL71:
 1153 03fc 00C0      		rjmp .L49
 1154               	.LVL72:
 1155               	.L88:
 1156               	.LBE504:
 1157               	.LBE505:
 1158               	.LBE506:
 1159               	.LBE514:
 1160               	.LBB515:
 1161               	.LBB499:
 1162               	.LBB498:
 1163               	.LBB497:
 1164 03fe C701      		movw r24,r14
 1165 0400 B601      		movw r22,r12
 1166 0402 0E94 0000 		call __subsf3
 1167               	.LVL73:
 1168 0406 2BED      		ldi r18,lo8(-37)
 1169 0408 3FE0      		ldi r19,lo8(15)
 1170 040a 49EC      		ldi r20,lo8(-55)
 1171 040c 50E4      		ldi r21,lo8(64)
 1172 040e 0E94 0000 		call fmod
 1173               	.LVL74:
 1174 0412 2BED      		ldi r18,lo8(-37)
 1175 0414 3FE0      		ldi r19,lo8(15)
 1176 0416 49E4      		ldi r20,lo8(73)
 1177 0418 50E4      		ldi r21,lo8(64)
 1178 041a 0E94 0000 		call __addsf3
 1179               	.LVL75:
 1180 041e 00C0      		rjmp .L46
 1181               	.LVL76:
 1182               	.L61:
 1183               	.LBE497:
 1184               	.LBE498:
 1185               	.LBE499:
 1186               	.LBE515:
 208:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.o = (radToDeg(myNewPos[2]) + 0.5);
 1187               		.loc 3 208 0
 1188 0420 6FEF      		ldi r22,lo8(-1)
 1189 0422 7FE1      		ldi r23,lo8(31)
 1190 0424 00C0      		rjmp .L55
 1191               	.L94:
 207:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.y = myNewPos[1]>8191 ? 8191 : (myNewPos[1]<-8192 ? -8192 : myNewPos[1]);
 1192               		.loc 3 207 0
 1193 0426 20E0      		ldi r18,0
 1194 0428 30E0      		ldi r19,0
 1195 042a 40E0      		ldi r20,0
 1196 042c 56EC      		ldi r21,lo8(-58)
 1197 042e C701      		movw r24,r14
 1198 0430 B601      		movw r22,r12
 1199 0432 0E94 0000 		call __ltsf2
 1200               	.LVL77:
 1201 0436 87FD      		sbrc r24,7
 1202 0438 00C0      		rjmp .L60
 1203 043a C701      		movw r24,r14
 1204 043c B601      		movw r22,r12
 1205 043e 0E94 0000 		call __fixsfsi
 1206               	.LVL78:
 1207 0442 00C0      		rjmp .L52
 1208               	.LVL79:
 1209               	.L91:
 1210               	.LBB516:
 1211               	.LBB513:
 1212               	.LBB512:
 1213               	.LBB511:
  73:../include/range_algs.h **** }
 1214               		.loc 5 73 0
 1215 0444 C701      		movw r24,r14
 1216 0446 B601      		movw r22,r12
 1217 0448 0E94 0000 		call __subsf3
 1218               	.LVL80:
 1219 044c 2BED      		ldi r18,lo8(-37)
 1220 044e 3FE0      		ldi r19,lo8(15)
 1221 0450 49EC      		ldi r20,lo8(-55)
 1222 0452 50E4      		ldi r21,lo8(64)
 1223 0454 0E94 0000 		call fmod
 1224               	.LVL81:
 1225 0458 2BED      		ldi r18,lo8(-37)
 1226 045a 3FE0      		ldi r19,lo8(15)
 1227 045c 49E4      		ldi r20,lo8(73)
 1228 045e 50E4      		ldi r21,lo8(64)
 1229 0460 0E94 0000 		call __addsf3
 1230               	.LVL82:
 1231 0464 00C0      		rjmp .L58
 1232               	.LVL83:
 1233               	.L62:
 1234               	.LBE511:
 1235               	.LBE512:
 1236               	.LBE513:
 1237               	.LBE516:
 208:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.o = (radToDeg(myNewPos[2]) + 0.5);
 1238               		.loc 3 208 0
 1239 0466 60E0      		ldi r22,0
 1240 0468 70EE      		ldi r23,lo8(-32)
 1241 046a 00C0      		rjmp .L55
 1242               	.L60:
 207:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	newPos.y = myNewPos[1]>8191 ? 8191 : (myNewPos[1]<-8192 ? -8192 : myNewPos[1]);
 1243               		.loc 3 207 0
 1244 046c 60E0      		ldi r22,0
 1245 046e 70EE      		ldi r23,lo8(-32)
 1246 0470 00C0      		rjmp .L52
 1247               	.LBE517:
 1248               	.LBE519:
 1249               	.LBE520:
 1250               	.LBE521:
 1251               		.cfi_endproc
 1252               	.LFE91:
 1254               		.section	.text.handleButtonPressMsg,"ax",@progbits
 1255               	.global	handleButtonPressMsg
 1257               	handleButtonPressMsg:
 1258               	.LFB92:
 230:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	ButtonPressEvent* evt = &(msg->evt);
 1259               		.loc 3 230 0
 1260               		.cfi_startproc
 1261               	.LVL84:
 1262 0000 4F92      		push r4
 1263               	.LCFI23:
 1264               		.cfi_def_cfa_offset 4
 1265               		.cfi_offset 4, -3
 1266 0002 5F92      		push r5
 1267               	.LCFI24:
 1268               		.cfi_def_cfa_offset 5
 1269               		.cfi_offset 5, -4
 1270 0004 6F92      		push r6
 1271               	.LCFI25:
 1272               		.cfi_def_cfa_offset 6
 1273               		.cfi_offset 6, -5
 1274 0006 7F92      		push r7
 1275               	.LCFI26:
 1276               		.cfi_def_cfa_offset 7
 1277               		.cfi_offset 7, -6
 1278 0008 8F92      		push r8
 1279               	.LCFI27:
 1280               		.cfi_def_cfa_offset 8
 1281               		.cfi_offset 8, -7
 1282 000a 9F92      		push r9
 1283               	.LCFI28:
 1284               		.cfi_def_cfa_offset 9
 1285               		.cfi_offset 9, -8
 1286 000c AF92      		push r10
 1287               	.LCFI29:
 1288               		.cfi_def_cfa_offset 10
 1289               		.cfi_offset 10, -9
 1290 000e BF92      		push r11
 1291               	.LCFI30:
 1292               		.cfi_def_cfa_offset 11
 1293               		.cfi_offset 11, -10
 1294 0010 CF92      		push r12
 1295               	.LCFI31:
 1296               		.cfi_def_cfa_offset 12
 1297               		.cfi_offset 12, -11
 1298 0012 DF92      		push r13
 1299               	.LCFI32:
 1300               		.cfi_def_cfa_offset 13
 1301               		.cfi_offset 13, -12
 1302 0014 EF92      		push r14
 1303               	.LCFI33:
 1304               		.cfi_def_cfa_offset 14
 1305               		.cfi_offset 14, -13
 1306 0016 FF92      		push r15
 1307               	.LCFI34:
 1308               		.cfi_def_cfa_offset 15
 1309               		.cfi_offset 15, -14
 1310 0018 CF93      		push r28
 1311               	.LCFI35:
 1312               		.cfi_def_cfa_offset 16
 1313               		.cfi_offset 28, -15
 1314 001a DF93      		push r29
 1315               	.LCFI36:
 1316               		.cfi_def_cfa_offset 17
 1317               		.cfi_offset 29, -16
 1318               	/* prologue: function */
 1319               	/* frame size = 0 */
 1320               	/* stack size = 14 */
 1321               	.L__stack_usage = 14
 1322 001c EC01      		movw r28,r24
 1323               	.LVL85:
 232:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(evt->button == BUTTON_L_CLICK){
 1324               		.loc 3 232 0
 1325 001e 0E94 0000 		call getTime
 1326               	.LVL86:
 1327 0022 2B01      		movw r4,r22
 1328 0024 3C01      		movw r6,r24
 1329 0026 6881      		ld r22,Y
 1330 0028 7981      		ldd r23,Y+1
 1331 002a 8A81      		ldd r24,Y+2
 1332 002c 9B81      		ldd r25,Y+3
 1333 002e 26E9      		ldi r18,lo8(-106)
 1334 0030 C22E      		mov r12,r18
 1335 0032 D12C      		mov r13,__zero_reg__
 1336 0034 E12C      		mov r14,__zero_reg__
 1337 0036 F12C      		mov r15,__zero_reg__
 1338 0038 A701      		movw r20,r14
 1339 003a 9601      		movw r18,r12
 1340 003c 0E94 0000 		call __udivmodsi4
 1341 0040 4B01      		movw r8,r22
 1342 0042 5C01      		movw r10,r24
 1343 0044 C301      		movw r24,r6
 1344 0046 B201      		movw r22,r4
 1345 0048 A701      		movw r20,r14
 1346 004a 9601      		movw r18,r12
 1347 004c 0E94 0000 		call __udivmodsi4
 1348 0050 A6E9      		ldi r26,lo8(-106)
 1349 0052 B0E0      		ldi r27,0
 1350 0054 0E94 0000 		call __muluhisi3
 1351 0058 DC01      		movw r26,r24
 1352 005a CB01      		movw r24,r22
 1353 005c 880D      		add r24,r8
 1354 005e 991D      		adc r25,r9
 1355 0060 AA1D      		adc r26,r10
 1356 0062 BB1D      		adc r27,r11
 1357 0064 8883      		st Y,r24
 1358 0066 9983      		std Y+1,r25
 1359 0068 AA83      		std Y+2,r26
 1360 006a BB83      		std Y+3,r27
 233:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		leftMouseID = evt->src;
 1361               		.loc 3 233 0
 1362 006c 8E81      		ldd r24,Y+6
 1363 006e 8C33      		cpi r24,lo8(60)
 1364 0070 01F0      		breq .L102
 1365               	.L96:
 236:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(evt->button==BUTTON_CAPSLOCK_ON){
 1366               		.loc 3 236 0
 1367 0072 CE01      		movw r24,r28
 1368 0074 0E94 0000 		call addEvent
 1369               	.LVL87:
 1370 0078 8823      		tst r24
 1371 007a 01F0      		breq .L95
 1372               	.LVL88:
 1373               	.LBB528:
 1374               	.LBB529:
 237:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			isShifted = 1;
 1375               		.loc 3 237 0
 1376 007c 8E81      		ldd r24,Y+6
 1377 007e 8431      		cpi r24,lo8(20)
 1378 0080 01F0      		breq .L103
 240:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			isShifted = 0;
 1379               		.loc 3 240 0
 1380 0082 8531      		cpi r24,lo8(21)
 1381 0084 01F0      		breq .L104
 1382               	.LVL89:
 1383               	.L95:
 1384               	/* epilogue start */
 1385               	.LBE529:
 1386               	.LBE528:
 245:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 1387               		.loc 3 245 0
 1388 0086 DF91      		pop r29
 1389 0088 CF91      		pop r28
 1390               	.LVL90:
 1391 008a FF90      		pop r15
 1392 008c EF90      		pop r14
 1393 008e DF90      		pop r13
 1394 0090 CF90      		pop r12
 1395 0092 BF90      		pop r11
 1396 0094 AF90      		pop r10
 1397 0096 9F90      		pop r9
 1398 0098 8F90      		pop r8
 1399 009a 7F90      		pop r7
 1400 009c 6F90      		pop r6
 1401 009e 5F90      		pop r5
 1402 00a0 4F90      		pop r4
 1403 00a2 0895      		ret
 1404               	.LVL91:
 1405               	.L102:
 234:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 1406               		.loc 3 234 0
 1407 00a4 8C81      		ldd r24,Y+4
 1408 00a6 9D81      		ldd r25,Y+5
 1409 00a8 8093 0000 		sts leftMouseID,r24
 1410 00ac 9093 0000 		sts leftMouseID+1,r25
 1411 00b0 00C0      		rjmp .L96
 1412               	.LVL92:
 1413               	.L104:
 1414               	.LBB536:
 1415               	.LBB534:
 241:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			setGreenLED(0);
 1416               		.loc 3 241 0
 1417 00b2 1092 0000 		sts isShifted,__zero_reg__
 1418               	.LVL93:
 1419               	.LBB530:
 1420               	.LBB531:
  17:../include/rgb_led.h **** 	
 1421               		.loc 2 17 0
 1422 00b6 1092 780A 		sts 2680,__zero_reg__
 1423 00ba 1092 790A 		sts 2680+1,__zero_reg__
 1424               	.LBE531:
 1425               	.LBE530:
 1426               	.LBE534:
 1427               	.LBE536:
 245:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 1428               		.loc 3 245 0
 1429 00be 00C0      		rjmp .L95
 1430               	.LVL94:
 1431               	.L103:
 1432               	.LBB537:
 1433               	.LBB535:
 238:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			setGreenLED(5);
 1434               		.loc 3 238 0
 1435 00c0 81E0      		ldi r24,lo8(1)
 1436 00c2 8093 0000 		sts isShifted,r24
 1437               	.LVL95:
 1438               	.LBB532:
 1439               	.LBB533:
  17:../include/rgb_led.h **** 	
 1440               		.loc 2 17 0
 1441 00c6 85E0      		ldi r24,lo8(5)
 1442 00c8 90E0      		ldi r25,0
 1443 00ca 8093 780A 		sts 2680,r24
 1444 00ce 9093 790A 		sts 2680+1,r25
 1445 00d2 00C0      		rjmp .L95
 1446               	.LBE533:
 1447               	.LBE532:
 1448               	.LBE535:
 1449               	.LBE537:
 1450               		.cfi_endproc
 1451               	.LFE92:
 1453               		.section	.rodata.str1.1
 1454               	.LC1:
 1455 0013 4D6F 7573 		.string	"MouseMove % 4hd % 4hd\r\n"
 1455      654D 6F76 
 1455      6520 2520 
 1455      3468 6420 
 1455      2520 3468 
 1456               		.section	.text.handleMouseMoveMsg,"ax",@progbits
 1457               	.global	handleMouseMoveMsg
 1459               	handleMouseMoveMsg:
 1460               	.LFB93:
 247:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	MouseMoveEvent evt;
 1461               		.loc 3 247 0
 1462               		.cfi_startproc
 1463               	.LVL96:
 1464 0000 4F92      		push r4
 1465               	.LCFI37:
 1466               		.cfi_def_cfa_offset 4
 1467               		.cfi_offset 4, -3
 1468 0002 5F92      		push r5
 1469               	.LCFI38:
 1470               		.cfi_def_cfa_offset 5
 1471               		.cfi_offset 5, -4
 1472 0004 6F92      		push r6
 1473               	.LCFI39:
 1474               		.cfi_def_cfa_offset 6
 1475               		.cfi_offset 6, -5
 1476 0006 7F92      		push r7
 1477               	.LCFI40:
 1478               		.cfi_def_cfa_offset 7
 1479               		.cfi_offset 7, -6
 1480 0008 8F92      		push r8
 1481               	.LCFI41:
 1482               		.cfi_def_cfa_offset 8
 1483               		.cfi_offset 8, -7
 1484 000a 9F92      		push r9
 1485               	.LCFI42:
 1486               		.cfi_def_cfa_offset 9
 1487               		.cfi_offset 9, -8
 1488 000c AF92      		push r10
 1489               	.LCFI43:
 1490               		.cfi_def_cfa_offset 10
 1491               		.cfi_offset 10, -9
 1492 000e BF92      		push r11
 1493               	.LCFI44:
 1494               		.cfi_def_cfa_offset 11
 1495               		.cfi_offset 11, -10
 1496 0010 CF92      		push r12
 1497               	.LCFI45:
 1498               		.cfi_def_cfa_offset 12
 1499               		.cfi_offset 12, -11
 1500 0012 DF92      		push r13
 1501               	.LCFI46:
 1502               		.cfi_def_cfa_offset 13
 1503               		.cfi_offset 13, -12
 1504 0014 EF92      		push r14
 1505               	.LCFI47:
 1506               		.cfi_def_cfa_offset 14
 1507               		.cfi_offset 14, -13
 1508 0016 FF92      		push r15
 1509               	.LCFI48:
 1510               		.cfi_def_cfa_offset 15
 1511               		.cfi_offset 15, -14
 1512 0018 0F93      		push r16
 1513               	.LCFI49:
 1514               		.cfi_def_cfa_offset 16
 1515               		.cfi_offset 16, -15
 1516 001a 1F93      		push r17
 1517               	.LCFI50:
 1518               		.cfi_def_cfa_offset 17
 1519               		.cfi_offset 17, -16
 1520 001c CF93      		push r28
 1521               	.LCFI51:
 1522               		.cfi_def_cfa_offset 18
 1523               		.cfi_offset 28, -17
 1524 001e DF93      		push r29
 1525               	.LCFI52:
 1526               		.cfi_def_cfa_offset 19
 1527               		.cfi_offset 29, -18
 1528 0020 CDB7      		in r28,__SP_L__
 1529 0022 DEB7      		in r29,__SP_H__
 1530               	.LCFI53:
 1531               		.cfi_def_cfa_register 28
 1532 0024 2797      		sbiw r28,7
 1533               	.LCFI54:
 1534               		.cfi_def_cfa_offset 26
 1535 0026 CDBF      		out __SP_L__,r28
 1536 0028 DEBF      		out __SP_H__,r29
 1537               	/* prologue: function */
 1538               	/* frame size = 7 */
 1539               	/* stack size = 23 */
 1540               	.L__stack_usage = 23
 1541 002a 8C01      		movw r16,r24
 249:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	evt.deltaX = msg->deltaX;
 1542               		.loc 3 249 0
 1543 002c 0E94 0000 		call getTime
 1544               	.LVL97:
 1545 0030 2B01      		movw r4,r22
 1546 0032 3C01      		movw r6,r24
 1547 0034 F801      		movw r30,r16
 1548 0036 6081      		ld r22,Z
 1549 0038 7181      		ldd r23,Z+1
 1550 003a 8281      		ldd r24,Z+2
 1551 003c 9381      		ldd r25,Z+3
 1552 003e 26E9      		ldi r18,lo8(-106)
 1553 0040 C22E      		mov r12,r18
 1554 0042 D12C      		mov r13,__zero_reg__
 1555 0044 E12C      		mov r14,__zero_reg__
 1556 0046 F12C      		mov r15,__zero_reg__
 1557 0048 A701      		movw r20,r14
 1558 004a 9601      		movw r18,r12
 1559 004c 0E94 0000 		call __udivmodsi4
 1560 0050 4B01      		movw r8,r22
 1561 0052 5C01      		movw r10,r24
 1562 0054 C301      		movw r24,r6
 1563 0056 B201      		movw r22,r4
 1564 0058 A701      		movw r20,r14
 1565 005a 9601      		movw r18,r12
 1566 005c 0E94 0000 		call __udivmodsi4
 1567 0060 A6E9      		ldi r26,lo8(-106)
 1568 0062 B0E0      		ldi r27,0
 1569 0064 0E94 0000 		call __muluhisi3
 1570 0068 DC01      		movw r26,r24
 1571 006a CB01      		movw r24,r22
 1572 006c 880D      		add r24,r8
 1573 006e 991D      		adc r25,r9
 1574 0070 AA1D      		adc r26,r10
 1575 0072 BB1D      		adc r27,r11
 1576 0074 8983      		std Y+1,r24
 1577 0076 9A83      		std Y+2,r25
 1578 0078 AB83      		std Y+3,r26
 1579 007a BC83      		std Y+4,r27
 250:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	evt.deltaY = msg->deltaY;
 1580               		.loc 3 250 0
 1581 007c F801      		movw r30,r16
 1582 007e 8481      		ldd r24,Z+4
 1583 0080 8D83      		std Y+5,r24
 251:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	evt.mouseEventMarker = MOUSE_EVENT_MARKER_FLAG;
 1584               		.loc 3 251 0
 1585 0082 8581      		ldd r24,Z+5
 1586 0084 8E83      		std Y+6,r24
 252:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(addEvent(&evt)){
 1587               		.loc 3 252 0
 1588 0086 8FEF      		ldi r24,lo8(-1)
 1589 0088 8F83      		std Y+7,r24
 253:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(isWired){
 1590               		.loc 3 253 0
 1591 008a CE01      		movw r24,r28
 1592 008c 0196      		adiw r24,1
 1593 008e 0E94 0000 		call addEvent
 1594               	.LVL98:
 1595 0092 8823      		tst r24
 1596 0094 01F4      		brne .+2
 1597 0096 00C0      		rjmp .L105
 254:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			wireMouseMove(evt.deltaX, evt.deltaY);
 1598               		.loc 3 254 0
 1599 0098 8091 0000 		lds r24,isWired
 1600 009c 8823      		tst r24
 1601 009e 01F4      		brne .+2
 1602 00a0 00C0      		rjmp .L105
 255:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else{
 1603               		.loc 3 255 0
 1604 00a2 0E81      		ldd r16,Y+6
 1605               	.LVL99:
 1606 00a4 1D81      		ldd r17,Y+5
 1607               	.LVL100:
 1608               	.LBB538:
 1609               	.LBB539:
 1610               	.LBB540:
 1611               	.LBB541:
 1612               	.LBB542:
 1613               	.LBB543:
  12:../include/rgb_led.h **** inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
 1614               		.loc 2 12 0
 1615 00a6 2091 7A0A 		lds r18,2682
 1616 00aa 3091 7B0A 		lds r19,2682+1
 1617               	.LVL101:
 1618               	.LBE543:
 1619               	.LBE542:
 136:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 137:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
 138:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** //colorSelect 0: red, 1: green, 2: blue
 139:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** inline uint8_t blinkLED(uint8_t whichColor, uint8_t val){
 140:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	uint8_t currentValue;
 141:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	switch(whichColor){
 142:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 0: currentValue = getRedLED(); break;
 143:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 1: currentValue = getGreenLED(); break;
 144:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 2: currentValue = getBlueLED(); break;
 145:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		default: return 0;
 146:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}
 147:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	if(currentValue == val){
 1620               		.loc 1 147 0
 1621 00ae 283C      		cpi r18,lo8(-56)
 1622 00b0 01F0      		breq .L107
 1623               	.LVL102:
 1624               	.LBB544:
 1625               	.LBB545:
  13:../include/rgb_led.h **** 
 1626               		.loc 2 13 0
 1627 00b2 88EC      		ldi r24,lo8(-56)
 1628 00b4 90E0      		ldi r25,0
 1629 00b6 8093 7A0A 		sts 2682,r24
 1630 00ba 9093 7B0A 		sts 2682+1,r25
 1631               	.LVL103:
 1632               	.LBE545:
 1633               	.LBE544:
 148:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 149:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}
 150:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	switch(whichColor){
 151:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 0: setRedLED(val);    scheduleTask(100, (arg_func_t)restoreRedLED, (void*)((uint16_t)current
 1634               		.loc 1 151 0
 1635 00be 3327      		clr r19
 1636               	.LVL104:
 1637 00c0 40E0      		ldi r20,lo8(gs(restoreRedLED))
 1638 00c2 50E0      		ldi r21,hi8(gs(restoreRedLED))
 1639 00c4 64E6      		ldi r22,lo8(100)
 1640 00c6 70E0      		ldi r23,0
 1641 00c8 80E0      		ldi r24,0
 1642 00ca 90E0      		ldi r25,0
 1643 00cc 0E94 0000 		call scheduleTask
 1644               	.LVL105:
 152:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 1: setGreenLED(val);  scheduleTask(100, (arg_func_t)restoreGreenLED, (void*)((uint16_t)curre
 153:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 2: setBlueLED(val);   scheduleTask(100, (arg_func_t)restoreBlueLED, (void*)((uint16_t)curren
 154:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		default: return 0;
 155:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}
 156:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	isBlinking = 1;
 1645               		.loc 1 156 0
 1646 00d0 81E0      		ldi r24,lo8(1)
 1647 00d2 8093 0000 		sts isBlinking,r24
 1648               	.L107:
 1649               	.LVL106:
 1650               	.LBE541:
 1651               	.LBE540:
 1652               	.LBB546:
 1653               	.LBB547:
 1654               	.LBB548:
 1655               	.LBB549:
  16:../include/rgb_led.h **** inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
 1656               		.loc 2 16 0
 1657 00d6 2091 780A 		lds r18,2680
 1658 00da 3091 790A 		lds r19,2680+1
 1659               	.LVL107:
 1660               	.LBE549:
 1661               	.LBE548:
 147:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 1662               		.loc 1 147 0
 1663 00de 283C      		cpi r18,lo8(-56)
 1664 00e0 01F0      		breq .L108
 1665               	.LVL108:
 1666               	.LBB550:
 1667               	.LBB551:
  17:../include/rgb_led.h **** 	
 1668               		.loc 2 17 0
 1669 00e2 88EC      		ldi r24,lo8(-56)
 1670 00e4 90E0      		ldi r25,0
 1671 00e6 8093 780A 		sts 2680,r24
 1672 00ea 9093 790A 		sts 2680+1,r25
 1673               	.LVL109:
 1674               	.LBE551:
 1675               	.LBE550:
 152:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 2: setBlueLED(val);   scheduleTask(100, (arg_func_t)restoreBlueLED, (void*)((uint16_t)curren
 1676               		.loc 1 152 0
 1677 00ee 3327      		clr r19
 1678               	.LVL110:
 1679 00f0 40E0      		ldi r20,lo8(gs(restoreGreenLED))
 1680 00f2 50E0      		ldi r21,hi8(gs(restoreGreenLED))
 1681 00f4 64E6      		ldi r22,lo8(100)
 1682 00f6 70E0      		ldi r23,0
 1683 00f8 80E0      		ldi r24,0
 1684 00fa 90E0      		ldi r25,0
 1685 00fc 0E94 0000 		call scheduleTask
 1686               	.LVL111:
 1687               		.loc 1 156 0
 1688 0100 81E0      		ldi r24,lo8(1)
 1689 0102 8093 0000 		sts isBlinking,r24
 1690               	.L108:
 1691               	.LVL112:
 1692               	.LBE547:
 1693               	.LBE546:
 157:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	return 1;
 158:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 159:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
 160:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** inline uint8_t rebroadcastButton(Button key){
 161:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	if(key == BUTTON_SHIFT){
 162:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 163:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}else{
 164:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 1;
 165:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}
 166:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 167:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
 168:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** inline void wireTxButtonPress(Button key){
 169:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	blinkLED(0,200);
 170:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	printf("ButtonPress ");
 171:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	printf(isprint(key) ? "   '%c'\r\n" : "'\\%03hu'\r\n", key);
 172:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 173:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
 174:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** inline void wireMouseMove(int8_t deltaX, int8_t deltaY){
 175:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	blinkLED(0,200);
 176:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	blinkLED(1,200);
 177:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	printf("MouseMove % 4hd % 4hd\r\n", deltaX, deltaY);
 1694               		.loc 1 177 0
 1695 0106 802F      		mov r24,r16
 1696 0108 002E      		mov __tmp_reg__,r16
 1697 010a 000C      		lsl r0
 1698 010c 990B      		sbc r25,r25
 1699 010e 9F93      		push r25
 1700 0110 0F93      		push r16
 1701 0112 812F      		mov r24,r17
 1702 0114 012E      		mov __tmp_reg__,r17
 1703 0116 000C      		lsl r0
 1704 0118 990B      		sbc r25,r25
 1705 011a 9F93      		push r25
 1706 011c 1F93      		push r17
 1707 011e 80E0      		ldi r24,lo8(.LC1)
 1708 0120 90E0      		ldi r25,hi8(.LC1)
 1709 0122 9F93      		push r25
 1710 0124 8F93      		push r24
 1711 0126 0E94 0000 		call printf
 1712               	.LVL113:
 1713 012a 0F90      		pop __tmp_reg__
 1714 012c 0F90      		pop __tmp_reg__
 1715 012e 0F90      		pop __tmp_reg__
 1716 0130 0F90      		pop __tmp_reg__
 1717 0132 0F90      		pop __tmp_reg__
 1718 0134 0F90      		pop __tmp_reg__
 1719               	.LVL114:
 1720               	.L105:
 1721               	/* epilogue start */
 1722               	.LBE539:
 1723               	.LBE538:
 260:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 1724               		.loc 3 260 0
 1725 0136 2796      		adiw r28,7
 1726 0138 CDBF      		out __SP_L__,r28
 1727 013a DEBF      		out __SP_H__,r29
 1728 013c DF91      		pop r29
 1729 013e CF91      		pop r28
 1730 0140 1F91      		pop r17
 1731 0142 0F91      		pop r16
 1732 0144 FF90      		pop r15
 1733 0146 EF90      		pop r14
 1734 0148 DF90      		pop r13
 1735 014a CF90      		pop r12
 1736 014c BF90      		pop r11
 1737 014e AF90      		pop r10
 1738 0150 9F90      		pop r9
 1739 0152 8F90      		pop r8
 1740 0154 7F90      		pop r7
 1741 0156 6F90      		pop r6
 1742 0158 5F90      		pop r5
 1743 015a 4F90      		pop r4
 1744 015c 0895      		ret
 1745               		.cfi_endproc
 1746               	.LFE93:
 1748               		.section	.text.handleMsg,"ax",@progbits
 1749               	.global	handleMsg
 1751               	handleMsg:
 1752               	.LFB89:
 171:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(IS_BOT_MEAS_MSG(msgStruct)){
 1753               		.loc 3 171 0
 1754               		.cfi_startproc
 1755               	.LVL115:
 1756               	/* prologue: function */
 1757               	/* frame size = 0 */
 1758               	/* stack size = 0 */
 1759               	.L__stack_usage = 0
 1760 0000 FC01      		movw r30,r24
 172:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(myRole != MOUSE){ //mouse will be moving too much to participate in localization.
 1761               		.loc 3 172 0
 1762 0002 A681      		ldd r26,Z+6
 1763 0004 B781      		ldd r27,Z+7
 1764 0006 5296      		adiw r26,18
 1765 0008 8C91      		ld r24,X
 1766 000a 5297      		sbiw r26,18
 1767               	.LVL116:
 1768 000c 9085      		ldd r25,Z+8
 1769 000e 8835      		cpi r24,lo8(88)
 1770 0010 01F0      		breq .L124
 1771               	.L117:
 178:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		handleButtonPressMsg((ButtonPressMsg*)(msgStruct->msg));
 1772               		.loc 3 178 0
 1773 0012 9830      		cpi r25,lo8(8)
 1774 0014 01F0      		breq .L125
 180:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		handleMouseMoveMsg((MouseMoveMsg*)(msgStruct->msg));
 1775               		.loc 3 180 0
 1776 0016 9730      		cpi r25,lo8(7)
 1777 0018 01F4      		brne .L115
 180:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		handleMouseMoveMsg((MouseMoveMsg*)(msgStruct->msg));
 1778               		.loc 3 180 0 is_stmt 0 discriminator 1
 1779 001a 1696      		adiw r26,6
 1780 001c 8C91      		ld r24,X
 1781 001e 1697      		sbiw r26,6
 1782 0020 8D34      		cpi r24,lo8(77)
 1783 0022 01F0      		breq .L126
 1784               	.L115:
 1785 0024 0895      		ret
 1786               	.L124:
 172:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(myRole != MOUSE){ //mouse will be moving too much to participate in localization.
 1787               		.loc 3 172 0 is_stmt 1 discriminator 1
 1788 0026 9331      		cpi r25,lo8(19)
 1789 0028 01F4      		brne .L117
 173:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			handleBotMeasMsg((BotMeasMsg*)(msgStruct->msg), msgStruct->senderID);
 1790               		.loc 3 173 0
 1791 002a 8091 0000 		lds r24,myRole
 1792 002e 8230      		cpi r24,lo8(2)
 1793 0030 01F4      		brne .L127
 175:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			mouseHandleBotMeasMsg((BotMeasMsg*)(msgStruct->msg));
 1794               		.loc 3 175 0 discriminator 1
 1795 0032 8091 0000 		lds r24,periodicMouseBroadcast
 1796 0036 8823      		tst r24
 1797 0038 01F0      		breq .L115
 176:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}//The right mouse button isn't going to worry about its position at all.
 1798               		.loc 3 176 0
 1799 003a CD01      		movw r24,r26
 1800 003c 0C94 0000 		jmp mouseHandleBotMeasMsg
 1801               	.LVL117:
 1802               	.L125:
 178:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		handleButtonPressMsg((ButtonPressMsg*)(msgStruct->msg));
 1803               		.loc 3 178 0 discriminator 1
 1804 0040 1796      		adiw r26,7
 1805 0042 8C91      		ld r24,X
 1806 0044 1797      		sbiw r26,7
 1807 0046 8B34      		cpi r24,lo8(75)
 1808 0048 01F4      		brne .L115
 179:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else if(IS_MOUSE_MOVE_MSG(msgStruct)){
 1809               		.loc 3 179 0
 1810 004a CD01      		movw r24,r26
 1811 004c 0C94 0000 		jmp handleButtonPressMsg
 1812               	.LVL118:
 1813               	.L126:
 181:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 1814               		.loc 3 181 0
 1815 0050 CD01      		movw r24,r26
 1816 0052 0C94 0000 		jmp handleMouseMoveMsg
 1817               	.LVL119:
 1818               	.L127:
 174:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else if(myRole == MOUSE && periodicMouseBroadcast){
 1819               		.loc 3 174 0
 1820 0056 6481      		ldd r22,Z+4
 1821 0058 7581      		ldd r23,Z+5
 1822 005a CD01      		movw r24,r26
 1823 005c 0C94 0000 		jmp handleBotMeasMsg
 1824               	.LVL120:
 1825               		.cfi_endproc
 1826               	.LFE89:
 1828               		.section	.rodata.str1.1
 1829               	.LC2:
 1830 002b 2725 6327 		.string	"'%c' (%hu)"
 1830      2028 2568 
 1830      7529 00
 1831               	.LC3:
 1832 0036 5C25 3268 		.string	"\\%2hu (%hu)"
 1832      7520 2825 
 1832      6875 2900 
 1833               	.LC4:
 1834 0042 2C20 2725 		.string	", '%c' (%hu)"
 1834      6327 2028 
 1834      2568 7529 
 1834      00
 1835               	.LC5:
 1836 004f 2C20 5C25 		.string	", \\%2hu (%hu)"
 1836      3268 7520 
 1836      2825 6875 
 1836      2900 
 1837               	.LC6:
 1838 005d 4D61 7820 		.string	"Max Keys:\r"
 1838      4B65 7973 
 1838      3A0D 00
 1839               	.LC7:
 1840 0068 0D00      		.string	"\r"
 1841               		.section	.text.checkPosition,"ax",@progbits
 1842               	.global	checkPosition
 1844               	checkPosition:
 1845               	.LFB95:
 271:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Matrix covar;
 1846               		.loc 3 271 0
 1847               		.cfi_startproc
 1848 0000 4F92      		push r4
 1849               	.LCFI55:
 1850               		.cfi_def_cfa_offset 4
 1851               		.cfi_offset 4, -3
 1852 0002 5F92      		push r5
 1853               	.LCFI56:
 1854               		.cfi_def_cfa_offset 5
 1855               		.cfi_offset 5, -4
 1856 0004 6F92      		push r6
 1857               	.LCFI57:
 1858               		.cfi_def_cfa_offset 6
 1859               		.cfi_offset 6, -5
 1860 0006 7F92      		push r7
 1861               	.LCFI58:
 1862               		.cfi_def_cfa_offset 7
 1863               		.cfi_offset 7, -6
 1864 0008 BF92      		push r11
 1865               	.LCFI59:
 1866               		.cfi_def_cfa_offset 8
 1867               		.cfi_offset 11, -7
 1868 000a CF92      		push r12
 1869               	.LCFI60:
 1870               		.cfi_def_cfa_offset 9
 1871               		.cfi_offset 12, -8
 1872 000c DF92      		push r13
 1873               	.LCFI61:
 1874               		.cfi_def_cfa_offset 10
 1875               		.cfi_offset 13, -9
 1876 000e EF92      		push r14
 1877               	.LCFI62:
 1878               		.cfi_def_cfa_offset 11
 1879               		.cfi_offset 14, -10
 1880 0010 FF92      		push r15
 1881               	.LCFI63:
 1882               		.cfi_def_cfa_offset 12
 1883               		.cfi_offset 15, -11
 1884 0012 0F93      		push r16
 1885               	.LCFI64:
 1886               		.cfi_def_cfa_offset 13
 1887               		.cfi_offset 16, -12
 1888 0014 1F93      		push r17
 1889               	.LCFI65:
 1890               		.cfi_def_cfa_offset 14
 1891               		.cfi_offset 17, -13
 1892 0016 CF93      		push r28
 1893               	.LCFI66:
 1894               		.cfi_def_cfa_offset 15
 1895               		.cfi_offset 28, -14
 1896 0018 DF93      		push r29
 1897               	.LCFI67:
 1898               		.cfi_def_cfa_offset 16
 1899               		.cfi_offset 29, -15
 1900 001a CDB7      		in r28,__SP_L__
 1901 001c DEB7      		in r29,__SP_H__
 1902               	.LCFI68:
 1903               		.cfi_def_cfa_register 28
 1904 001e CD5F      		subi r28,-3
 1905 0020 D109      		sbc r29,__zero_reg__
 1906               	.LCFI69:
 1907               		.cfi_def_cfa_offset 269
 1908 0022 CDBF      		out __SP_L__,r28
 1909 0024 DEBF      		out __SP_H__,r29
 1910               	/* prologue: function */
 1911               	/* frame size = 253 */
 1912               	/* stack size = 266 */
 1913               	.L__stack_usage = 266
 273:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Vector eigValues;
 1914               		.loc 3 273 0
 1915 0026 60E0      		ldi r22,lo8(myPosCovar)
 1916 0028 70E0      		ldi r23,hi8(myPosCovar)
 1917 002a CE01      		movw r24,r28
 1918 002c 8655      		subi r24,86
 1919 002e 9F4F      		sbci r25,-1
 1920 0030 0E94 0000 		call decompressP
 1921               	.LVL121:
 276:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	
 1922               		.loc 3 276 0
 1923 0034 AE01      		movw r20,r28
 1924 0036 4655      		subi r20,86
 1925 0038 5F4F      		sbci r21,-1
 1926 003a BE01      		movw r22,r28
 1927 003c 6A57      		subi r22,122
 1928 003e 7F4F      		sbci r23,-1
 1929 0040 CE01      		movw r24,r28
 1930 0042 8A51      		subi r24,26
 1931 0044 9F4F      		sbci r25,-1
 1932 0046 0E94 0000 		call eigensystem
 1933               	.LVL122:
 278:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	matrixInplaceMultiply(&diagSqrtEigValues, &eigVectors, &diagSqrtEigValues);
 1934               		.loc 3 278 0
 1935 004a CA51      		subi r28,lo8(-230)
 1936 004c DF4F      		sbci r29,hi8(-230)
 1937 004e 6881      		ld r22,Y
 1938 0050 7981      		ldd r23,Y+1
 1939 0052 8A81      		ldd r24,Y+2
 1940 0054 9B81      		ldd r25,Y+3
 1941 0056 C65E      		subi r28,lo8(230)
 1942 0058 D040      		sbci r29,hi8(230)
 1943 005a 0E94 0000 		call sqrt
 1944               	.LVL123:
 1945 005e A696      		adiw r28,98-60
 1946 0060 6CAF      		std Y+60,r22
 1947 0062 7DAF      		std Y+61,r23
 1948 0064 8EAF      		std Y+62,r24
 1949 0066 9FAF      		std Y+63,r25
 1950 0068 A697      		sbiw r28,98-60
 1951 006a AA96      		adiw r28,102-60
 1952 006c 1CAE      		std Y+60,__zero_reg__
 1953 006e 1DAE      		std Y+61,__zero_reg__
 1954 0070 1EAE      		std Y+62,__zero_reg__
 1955 0072 1FAE      		std Y+63,__zero_reg__
 1956 0074 AA97      		sbiw r28,102-60
 1957 0076 AE96      		adiw r28,106-60
 1958 0078 1CAE      		std Y+60,__zero_reg__
 1959 007a 1DAE      		std Y+61,__zero_reg__
 1960 007c 1EAE      		std Y+62,__zero_reg__
 1961 007e 1FAE      		std Y+63,__zero_reg__
 1962 0080 AE97      		sbiw r28,106-60
 1963 0082 E296      		adiw r28,110-60
 1964 0084 1CAE      		std Y+60,__zero_reg__
 1965 0086 1DAE      		std Y+61,__zero_reg__
 1966 0088 1EAE      		std Y+62,__zero_reg__
 1967 008a 1FAE      		std Y+63,__zero_reg__
 1968 008c E297      		sbiw r28,110-60
 1969 008e C651      		subi r28,lo8(-234)
 1970 0090 DF4F      		sbci r29,hi8(-234)
 1971 0092 6881      		ld r22,Y
 1972 0094 7981      		ldd r23,Y+1
 1973 0096 8A81      		ldd r24,Y+2
 1974 0098 9B81      		ldd r25,Y+3
 1975 009a CA5E      		subi r28,lo8(234)
 1976 009c D040      		sbci r29,hi8(234)
 1977 009e 0E94 0000 		call sqrt
 1978               	.LVL124:
 1979 00a2 E696      		adiw r28,114-60
 1980 00a4 6CAF      		std Y+60,r22
 1981 00a6 7DAF      		std Y+61,r23
 1982 00a8 8EAF      		std Y+62,r24
 1983 00aa 9FAF      		std Y+63,r25
 1984 00ac E697      		sbiw r28,114-60
 1985 00ae EA96      		adiw r28,118-60
 1986 00b0 1CAE      		std Y+60,__zero_reg__
 1987 00b2 1DAE      		std Y+61,__zero_reg__
 1988 00b4 1EAE      		std Y+62,__zero_reg__
 1989 00b6 1FAE      		std Y+63,__zero_reg__
 1990 00b8 EA97      		sbiw r28,118-60
 1991 00ba EE96      		adiw r28,122-60
 1992 00bc 1CAE      		std Y+60,__zero_reg__
 1993 00be 1DAE      		std Y+61,__zero_reg__
 1994 00c0 1EAE      		std Y+62,__zero_reg__
 1995 00c2 1FAE      		std Y+63,__zero_reg__
 1996 00c4 EE97      		sbiw r28,122-60
 1997 00c6 C258      		subi r28,lo8(-126)
 1998 00c8 DF4F      		sbci r29,hi8(-126)
 1999 00ca 1882      		st Y,__zero_reg__
 2000 00cc 1982      		std Y+1,__zero_reg__
 2001 00ce 1A82      		std Y+2,__zero_reg__
 2002 00d0 1B82      		std Y+3,__zero_reg__
 2003 00d2 CE57      		subi r28,lo8(126)
 2004 00d4 D040      		sbci r29,hi8(126)
 2005 00d6 C251      		subi r28,lo8(-238)
 2006 00d8 DF4F      		sbci r29,hi8(-238)
 2007 00da 6881      		ld r22,Y
 2008 00dc 7981      		ldd r23,Y+1
 2009 00de 8A81      		ldd r24,Y+2
 2010 00e0 9B81      		ldd r25,Y+3
 2011 00e2 CE5E      		subi r28,lo8(238)
 2012 00e4 D040      		sbci r29,hi8(238)
 2013 00e6 0E94 0000 		call sqrt
 2014               	.LVL125:
 2015 00ea CE57      		subi r28,lo8(-130)
 2016 00ec DF4F      		sbci r29,hi8(-130)
 2017 00ee 6883      		st Y,r22
 2018 00f0 7983      		std Y+1,r23
 2019 00f2 8A83      		std Y+2,r24
 2020 00f4 9B83      		std Y+3,r25
 2021 00f6 C258      		subi r28,lo8(130)
 2022 00f8 D040      		sbci r29,hi8(130)
 279:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	Vector randNormSample;
 2023               		.loc 3 279 0
 2024 00fa AE01      		movw r20,r28
 2025 00fc 4E59      		subi r20,-98
 2026 00fe 5F4F      		sbci r21,-1
 2027 0100 BE01      		movw r22,r28
 2028 0102 6A57      		subi r22,122
 2029 0104 7F4F      		sbci r23,-1
 2030 0106 CA01      		movw r24,r20
 2031 0108 0E94 0000 		call matrixInplaceMultiply
 2032               	.LVL126:
 284:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	for(uint8_t i=0;i<NUM_CHECK_SAMPLES;i++){
 2033               		.loc 3 284 0
 2034 010c 8E01      		movw r16,r28
 2035 010e 0F5F      		subi r16,-1
 2036 0110 1F4F      		sbci r17,-1
 2037 0112 81E6      		ldi r24,lo8(97)
 2038 0114 D801      		movw r26,r16
 2039               		0:
 2040 0116 1D92      		st X+,__zero_reg__
 2041 0118 8A95      		dec r24
 2042 011a 01F4      		brne 0b
 2043               	.LVL127:
 2044 011c 84E6      		ldi r24,lo8(100)
 2045 011e B82E      		mov r11,r24
 2046 0120 92E3      		ldi r25,lo8(50)
 2047 0122 E92E      		mov r14,r25
 2048 0124 F12C      		mov r15,__zero_reg__
 2049 0126 00C0      		rjmp .L136
 2050               	.LVL128:
 2051               	.L175:
 2052               	.LBB575:
 291:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		resultKeys[getButtonFromPosition(&resultPos)]++;
 2053               		.loc 3 291 0
 2054 0128 6091 0000 		lds r22,myPos+2
 2055 012c 7091 0000 		lds r23,myPos+2+1
 2056 0130 072E      		mov __tmp_reg__,r23
 2057 0132 000C      		lsl r0
 2058 0134 880B      		sbc r24,r24
 2059 0136 990B      		sbc r25,r25
 2060 0138 0E94 0000 		call __floatsisf
 2061               	.LVL129:
 2062 013c CE52      		subi r28,lo8(-210)
 2063 013e DF4F      		sbci r29,hi8(-210)
 2064 0140 2881      		ld r18,Y
 2065 0142 3981      		ldd r19,Y+1
 2066 0144 4A81      		ldd r20,Y+2
 2067 0146 5B81      		ldd r21,Y+3
 2068 0148 C25D      		subi r28,lo8(210)
 2069 014a D040      		sbci r29,hi8(210)
 2070 014c 0E94 0000 		call __addsf3
 2071               	.LVL130:
 2072 0150 0E94 0000 		call __fixsfsi
 2073               	.LVL131:
 2074               	.LBB576:
 2075               	.LBB577:
 167:../droplet_programs/mouseKeyboard/button.h **** 		if(pos->x < 550){
 2076               		.loc 4 167 0
 2077 0154 6115      		cp r22,__zero_reg__
 2078 0156 E0E8      		ldi r30,-128
 2079 0158 7E07      		cpc r23,r30
 2080 015a 01F4      		brne .+2
 2081 015c 00C0      		rjmp .L163
 2082               		.loc 4 168 0
 2083 015e F6E2      		ldi r31,38
 2084 0160 4F16      		cp r4,r31
 2085 0162 F2E0      		ldi r31,2
 2086 0164 5F06      		cpc r5,r31
 2087 0166 04F0      		brlt .+2
 2088 0168 00C0      		rjmp .L130
 2089               	.LVL132:
 2090 016a CB01      		movw r24,r22
 2091 016c 0A97      		sbiw r24,10
 2092 016e 6CE3      		ldi r22,lo8(60)
 2093 0170 70E0      		ldi r23,0
 2094               	.LVL133:
 2095 0172 0E94 0000 		call __divmodhi4
 2096 0176 FB01      		movw r30,r22
 2097 0178 FF27      		clr r31
 2098               	.LBB578:
 2099               	.LBB579:
 157:../droplet_programs/mouseKeyboard/button.h **** 		case 0: return getButton_SPACEROW(pos->x);
 2100               		.loc 4 157 0
 2101 017a E130      		cpi r30,1
 2102 017c F105      		cpc r31,__zero_reg__
 2103 017e 01F4      		brne .+2
 2104 0180 00C0      		rjmp .L131
 2105 0182 04F4      		brge .+2
 2106 0184 00C0      		rjmp .L173
 2107 0186 E230      		cpi r30,2
 2108 0188 F105      		cpc r31,__zero_reg__
 2109 018a 01F4      		brne .+2
 2110 018c 00C0      		rjmp .L134
 2111 018e 3397      		sbiw r30,3
 2112 0190 01F0      		breq .+2
 2113 0192 00C0      		rjmp .L163
 2114               	.LVL134:
 2115 0194 C201      		movw r24,r4
 2116 0196 B701      		movw r22,r14
 2117 0198 0E94 0000 		call __divmodhi4
 2118 019c 7727      		clr r23
 2119 019e 6B30      		cpi r22,11
 2120 01a0 7105      		cpc r23,__zero_reg__
 2121 01a2 04F0      		brlt .+2
 2122 01a4 00C0      		rjmp .L163
 2123 01a6 FB01      		movw r30,r22
 2124 01a8 E050      		subi r30,lo8(-(CSWTCH.90))
 2125 01aa F040      		sbci r31,hi8(-(CSWTCH.90))
 2126 01ac E081      		ld r30,Z
 2127 01ae F0E0      		ldi r31,0
 2128               	.LVL135:
 2129               	.L129:
 2130               	.LBE579:
 2131               	.LBE578:
 2132               	.LBE577:
 2133               	.LBE576:
 292:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 2134               		.loc 3 292 0
 2135 01b0 E00F      		add r30,r16
 2136 01b2 F11F      		adc r31,r17
 2137 01b4 8081      		ld r24,Z
 2138 01b6 8F5F      		subi r24,lo8(-(1))
 2139 01b8 8083      		st Z,r24
 2140               	.LVL136:
 2141 01ba BA94      		dec r11
 2142               	.LVL137:
 285:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		randNormSample[0] = randNorm(0,1);
 2143               		.loc 3 285 0
 2144 01bc BB20      		tst r11
 2145 01be 01F4      		brne .+2
 2146 01c0 00C0      		rjmp .L174
 2147               	.LVL138:
 2148               	.L136:
 286:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		randNormSample[1] = randNorm(0,1);
 2149               		.loc 3 286 0 discriminator 3
 2150 01c2 20E0      		ldi r18,0
 2151 01c4 30E0      		ldi r19,0
 2152 01c6 40E8      		ldi r20,lo8(-128)
 2153 01c8 5FE3      		ldi r21,lo8(63)
 2154 01ca 60E0      		ldi r22,0
 2155 01cc 70E0      		ldi r23,0
 2156 01ce CB01      		movw r24,r22
 2157 01d0 0E94 0000 		call randNorm
 2158               	.LVL139:
 2159 01d4 C652      		subi r28,lo8(-218)
 2160 01d6 DF4F      		sbci r29,hi8(-218)
 2161 01d8 6883      		st Y,r22
 2162 01da 7983      		std Y+1,r23
 2163 01dc 8A83      		std Y+2,r24
 2164 01de 9B83      		std Y+3,r25
 2165 01e0 CA5D      		subi r28,lo8(218)
 2166 01e2 D040      		sbci r29,hi8(218)
 287:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		randNormSample[2] = randNorm(0,1);
 2167               		.loc 3 287 0 discriminator 3
 2168 01e4 20E0      		ldi r18,0
 2169 01e6 30E0      		ldi r19,0
 2170 01e8 40E8      		ldi r20,lo8(-128)
 2171 01ea 5FE3      		ldi r21,lo8(63)
 2172 01ec 60E0      		ldi r22,0
 2173 01ee 70E0      		ldi r23,0
 2174 01f0 CB01      		movw r24,r22
 2175 01f2 0E94 0000 		call randNorm
 2176               	.LVL140:
 2177 01f6 C252      		subi r28,lo8(-222)
 2178 01f8 DF4F      		sbci r29,hi8(-222)
 2179 01fa 6883      		st Y,r22
 2180 01fc 7983      		std Y+1,r23
 2181 01fe 8A83      		std Y+2,r24
 2182 0200 9B83      		std Y+3,r25
 2183 0202 CE5D      		subi r28,lo8(222)
 2184 0204 D040      		sbci r29,hi8(222)
 288:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		matrixTimesVector(&result, &diagSqrtEigValues, &randNormSample);
 2185               		.loc 3 288 0 discriminator 3
 2186 0206 20E0      		ldi r18,0
 2187 0208 30E0      		ldi r19,0
 2188 020a 40E8      		ldi r20,lo8(-128)
 2189 020c 5FE3      		ldi r21,lo8(63)
 2190 020e 60E0      		ldi r22,0
 2191 0210 70E0      		ldi r23,0
 2192 0212 CB01      		movw r24,r22
 2193 0214 0E94 0000 		call randNorm
 2194               	.LVL141:
 2195 0218 CE51      		subi r28,lo8(-226)
 2196 021a DF4F      		sbci r29,hi8(-226)
 2197 021c 6883      		st Y,r22
 2198 021e 7983      		std Y+1,r23
 2199 0220 8A83      		std Y+2,r24
 2200 0222 9B83      		std Y+3,r25
 2201 0224 C25E      		subi r28,lo8(226)
 2202 0226 D040      		sbci r29,hi8(226)
 289:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		resultPos.x = myPos.x + result[0];
 2203               		.loc 3 289 0 discriminator 3
 2204 0228 AE01      		movw r20,r28
 2205 022a 4652      		subi r20,38
 2206 022c 5F4F      		sbci r21,-1
 2207 022e BE01      		movw r22,r28
 2208 0230 6E59      		subi r22,-98
 2209 0232 7F4F      		sbci r23,-1
 2210 0234 CE01      		movw r24,r28
 2211 0236 8253      		subi r24,50
 2212 0238 9F4F      		sbci r25,-1
 2213 023a 0E94 0000 		call matrixTimesVector
 2214               	.LVL142:
 290:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		resultPos.y = myPos.y + result[1];
 2215               		.loc 3 290 0 discriminator 3
 2216 023e 6091 0000 		lds r22,myPos
 2217 0242 7091 0000 		lds r23,myPos+1
 2218 0246 072E      		mov __tmp_reg__,r23
 2219 0248 000C      		lsl r0
 2220 024a 880B      		sbc r24,r24
 2221 024c 990B      		sbc r25,r25
 2222 024e 0E94 0000 		call __floatsisf
 2223               	.LVL143:
 2224 0252 C253      		subi r28,lo8(-206)
 2225 0254 DF4F      		sbci r29,hi8(-206)
 2226 0256 2881      		ld r18,Y
 2227 0258 3981      		ldd r19,Y+1
 2228 025a 4A81      		ldd r20,Y+2
 2229 025c 5B81      		ldd r21,Y+3
 2230 025e CE5C      		subi r28,lo8(206)
 2231 0260 D040      		sbci r29,hi8(206)
 2232 0262 0E94 0000 		call __addsf3
 2233               	.LVL144:
 2234 0266 0E94 0000 		call __fixsfsi
 2235               	.LVL145:
 2236 026a 2B01      		movw r4,r22
 2237 026c 3C01      		movw r6,r24
 2238               	.LVL146:
 2239               	.LBB595:
 2240               	.LBB592:
 167:../droplet_programs/mouseKeyboard/button.h **** 		if(pos->x < 550){
 2241               		.loc 4 167 0 discriminator 3
 2242 026e 6115      		cp r22,__zero_reg__
 2243 0270 7048      		sbci r23,-128
 2244 0272 01F0      		breq .+2
 2245 0274 00C0      		rjmp .L175
 2246               	.L163:
 2247               	.LBB583:
 2248               	.LBB584:
 148:../droplet_programs/mouseKeyboard/button.h **** 			return BUTTON_R_CLICK;
 2249               		.loc 4 148 0
 2250 0276 E0E0      		ldi r30,0
 2251 0278 F0E0      		ldi r31,0
 2252               	.LVL147:
 2253               	.LBE584:
 2254               	.LBE583:
 2255               	.LBE592:
 2256               	.LBE595:
 292:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 2257               		.loc 3 292 0
 2258 027a E00F      		add r30,r16
 2259 027c F11F      		adc r31,r17
 2260 027e 8081      		ld r24,Z
 2261 0280 8F5F      		subi r24,lo8(-(1))
 2262 0282 8083      		st Z,r24
 2263               	.LVL148:
 2264 0284 BA94      		dec r11
 2265               	.LVL149:
 285:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		randNormSample[0] = randNorm(0,1);
 2266               		.loc 3 285 0
 2267 0286 B110      		cpse r11,__zero_reg__
 2268 0288 00C0      		rjmp .L136
 2269               	.LVL150:
 2270               	.L174:
 2271               	.LBE575:
 294:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	uint8_t maxButtonCounts[NUM_MAXIMUMS_TRACKED] = {0};	
 2272               		.loc 3 294 0
 2273 028a 6E01      		movw r12,r28
 2274 028c B8EF      		ldi r27,-8
 2275 028e CB0E      		add r12,r27
 2276 0290 D11C      		adc r13,__zero_reg__
 2277 0292 86E0      		ldi r24,lo8(6)
 2278 0294 F601      		movw r30,r12
 2279 0296 282F      		mov r18,r24
 2280               		0:
 2281 0298 1192      		st Z+,__zero_reg__
 2282 029a 2A95      		dec r18
 2283 029c 01F4      		brne 0b
 295:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	for(uint8_t i=0;i<=LARGEST_KEYBOARD_KEY;i++){
 2284               		.loc 3 295 0
 2285 029e 7E01      		movw r14,r28
 2286 02a0 92EF      		ldi r25,-14
 2287 02a2 E90E      		add r14,r25
 2288 02a4 F11C      		adc r15,__zero_reg__
 2289 02a6 D701      		movw r26,r14
 2290               		0:
 2291 02a8 1D92      		st X+,__zero_reg__
 2292 02aa 8A95      		dec r24
 2293 02ac 01F4      		brne 0b
 2294               	.LVL151:
 2295 02ae 3801      		movw r6,r16
 2296               	.LBB598:
 296:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		for(uint8_t j=0;j<NUM_MAXIMUMS_TRACKED;j++){
 2297               		.loc 3 296 0
 2298 02b0 30E0      		ldi r19,0
 2299               	.LVL152:
 2300               	.L137:
 2301 02b2 F301      		movw r30,r6
 2302 02b4 2191      		ld r18,Z+
 2303 02b6 3F01      		movw r6,r30
 2304 02b8 8701      		movw r16,r14
 2305 02ba 0F5F      		subi r16,-1
 2306 02bc 1F4F      		sbci r17,-1
 2307               	.LBE598:
 2308               	.LBB601:
 2309               	.LBB596:
 2310               	.LBB593:
 2311               	.LBB588:
 2312               	.LBB585:
 145:../droplet_programs/mouseKeyboard/button.h **** 		if(pos->x < MOUSE_CIRCLE_X){
 2313               		.loc 4 145 0
 2314 02be F801      		movw r30,r16
 2315 02c0 9B2D      		mov r25,r11
 2316 02c2 80E0      		ldi r24,0
 2317               	.LVL153:
 2318               	.LBE585:
 2319               	.LBE588:
 2320               	.LBE593:
 2321               	.LBE596:
 2322               	.LBE601:
 2323               	.LBB602:
 2324               	.LBB599:
 298:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				for(uint8_t k=(NUM_MAXIMUMS_TRACKED-1);k>j;k--){
 2325               		.loc 3 298 0
 2326 02c4 9217      		cp r25,r18
 2327 02c6 00F0      		brlo .L176
 2328               	.L138:
 297:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(resultKeys[i]>maxButtonCounts[j]){
 2329               		.loc 3 297 0 discriminator 2
 2330 02c8 8F5F      		subi r24,lo8(-(1))
 2331               	.LVL154:
 2332 02ca 8630      		cpi r24,lo8(6)
 2333 02cc 01F0      		breq .L140
 2334 02ce 9191      		ld r25,Z+
 298:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				for(uint8_t k=(NUM_MAXIMUMS_TRACKED-1);k>j;k--){
 2335               		.loc 3 298 0
 2336 02d0 9217      		cp r25,r18
 2337 02d2 00F4      		brsh .L138
 2338               	.L176:
 2339               	.LVL155:
 2340               	.LBB600:
 299:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					maxButtons[k] = maxButtons[k-1];
 2341               		.loc 3 299 0 discriminator 1
 2342 02d4 8530      		cpi r24,lo8(5)
 2343 02d6 01F0      		breq .L142
 2344 02d8 A601      		movw r20,r12
 2345 02da 4B5F      		subi r20,-5
 2346 02dc 5F4F      		sbci r21,-1
 2347 02de F701      		movw r30,r14
 2348 02e0 3596      		adiw r30,5
 299:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					maxButtons[k] = maxButtons[k-1];
 2349               		.loc 3 299 0 is_stmt 0 discriminator 3
 2350 02e2 95E0      		ldi r25,lo8(5)
 2351               	.LVL156:
 2352               	.L141:
 300:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					maxButtonCounts[k] = maxButtonCounts[k-1];
 2353               		.loc 3 300 0 is_stmt 1 discriminator 3
 2354 02e4 DA01      		movw r26,r20
 2355 02e6 6E91      		ld r22,-X
 2356 02e8 AD01      		movw r20,r26
 2357 02ea 1196      		adiw r26,1
 2358 02ec 6C93      		st X,r22
 301:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				}
 2359               		.loc 3 301 0 discriminator 3
 2360 02ee 6291      		ld r22,-Z
 2361 02f0 6183      		std Z+1,r22
 299:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					maxButtons[k] = maxButtons[k-1];
 2362               		.loc 3 299 0 discriminator 3
 2363 02f2 9150      		subi r25,lo8(-(-1))
 2364               	.LVL157:
 2365 02f4 9813      		cpse r25,r24
 2366 02f6 00C0      		rjmp .L141
 2367               	.LVL158:
 2368               	.L142:
 2369               	.LBE600:
 298:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				for(uint8_t k=(NUM_MAXIMUMS_TRACKED-1);k>j;k--){
 2370               		.loc 3 298 0
 2371 02f8 90E0      		ldi r25,0
 303:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				maxButtonCounts[j] = resultKeys[i];
 2372               		.loc 3 303 0
 2373 02fa F601      		movw r30,r12
 2374 02fc E80F      		add r30,r24
 2375 02fe F91F      		adc r31,r25
 2376 0300 3083      		st Z,r19
 304:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				break;
 2377               		.loc 3 304 0
 2378 0302 F701      		movw r30,r14
 2379 0304 E80F      		add r30,r24
 2380 0306 F91F      		adc r31,r25
 2381 0308 2083      		st Z,r18
 2382 030a F701      		movw r30,r14
 2383 030c B080      		ld r11,Z
 2384               	.L140:
 2385               	.LBE599:
 296:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		for(uint8_t j=0;j<NUM_MAXIMUMS_TRACKED;j++){
 2386               		.loc 3 296 0 discriminator 2
 2387 030e 3F5F      		subi r19,lo8(-(1))
 2388               	.LVL159:
 2389 0310 3136      		cpi r19,lo8(97)
 2390 0312 01F4      		brne .L137
 2391               	.LBE602:
 309:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	printf(isprint(maxButtons[0]) ? "'%c' (%hu)" : "\\%2hu (%hu)", maxButtons[0], maxButtonCounts[0]);
 2392               		.loc 3 309 0
 2393 0314 80E0      		ldi r24,lo8(.LC6)
 2394 0316 90E0      		ldi r25,hi8(.LC6)
 2395               	.LVL160:
 2396 0318 0E94 0000 		call puts
 2397               	.LVL161:
 310:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	for(uint8_t i=1;i<NUM_MAXIMUMS_TRACKED;i++){
 2398               		.loc 3 310 0
 2399 031c 6B2C      		mov r6,r11
 2400 031e 712C      		mov r7,__zero_reg__
 2401 0320 D601      		movw r26,r12
 2402 0322 5C90      		ld r5,X
 2403 0324 852D      		mov r24,r5
 2404 0326 90E0      		ldi r25,0
 2405 0328 0E94 0000 		call isprint
 2406               	.LVL162:
 2407 032c 892B      		or r24,r25
 2408 032e 01F4      		brne .+2
 2409 0330 00C0      		rjmp .L164
 2410 0332 80E0      		ldi r24,lo8(.LC2)
 2411 0334 90E0      		ldi r25,hi8(.LC2)
 2412               	.L146:
 310:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	for(uint8_t i=1;i<NUM_MAXIMUMS_TRACKED;i++){
 2413               		.loc 3 310 0 is_stmt 0 discriminator 4
 2414 0336 7F92      		push r7
 2415 0338 6F92      		push r6
 2416 033a 1F92      		push __zero_reg__
 2417 033c 5F92      		push r5
 2418 033e 9F93      		push r25
 2419 0340 8F93      		push r24
 2420 0342 0E94 0000 		call printf
 2421               	.LVL163:
 2422 0346 BFEF      		ldi r27,-1
 2423 0348 CB1A      		sub r12,r27
 2424 034a DB0A      		sbc r13,r27
 2425 034c 3701      		movw r6,r14
 2426 034e E6E0      		ldi r30,6
 2427 0350 6E0E      		add r6,r30
 2428 0352 711C      		adc r7,__zero_reg__
 2429 0354 0F90      		pop __tmp_reg__
 2430 0356 0F90      		pop __tmp_reg__
 2431 0358 0F90      		pop __tmp_reg__
 2432 035a 0F90      		pop __tmp_reg__
 2433 035c 0F90      		pop __tmp_reg__
 2434 035e 0F90      		pop __tmp_reg__
 2435               	.LVL164:
 2436               	.L148:
 2437               	.LBB603:
 312:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 2438               		.loc 3 312 0 is_stmt 1
 2439 0360 D801      		movw r26,r16
 2440 0362 ED90      		ld r14,X+
 2441 0364 8D01      		movw r16,r26
 2442 0366 F601      		movw r30,r12
 2443 0368 F190      		ld r15,Z+
 2444 036a 6F01      		movw r12,r30
 2445 036c 8F2D      		mov r24,r15
 2446 036e 90E0      		ldi r25,0
 2447 0370 0E94 0000 		call isprint
 2448               	.LVL165:
 2449 0374 892B      		or r24,r25
 2450 0376 01F4      		brne .+2
 2451 0378 00C0      		rjmp .L165
 2452 037a 80E0      		ldi r24,lo8(.LC4)
 2453 037c 90E0      		ldi r25,hi8(.LC4)
 2454               	.L147:
 312:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 2455               		.loc 3 312 0 is_stmt 0 discriminator 4
 2456 037e 1F92      		push __zero_reg__
 2457 0380 EF92      		push r14
 2458 0382 1F92      		push __zero_reg__
 2459 0384 FF92      		push r15
 2460 0386 9F93      		push r25
 2461 0388 8F93      		push r24
 2462 038a 0E94 0000 		call printf
 2463               	.LVL166:
 311:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		printf(isprint(maxButtons[i]) ? ", '%c' (%hu)" : ", \\%2hu (%hu)", maxButtons[i], maxButtonCounts
 2464               		.loc 3 311 0 is_stmt 1 discriminator 4
 2465 038e 0F90      		pop __tmp_reg__
 2466 0390 0F90      		pop __tmp_reg__
 2467 0392 0F90      		pop __tmp_reg__
 2468 0394 0F90      		pop __tmp_reg__
 2469 0396 0F90      		pop __tmp_reg__
 2470 0398 0F90      		pop __tmp_reg__
 2471 039a 6016      		cp r6,r16
 2472 039c 7106      		cpc r7,r17
 2473 039e 01F4      		brne .L148
 2474               	.LBE603:
 314:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(maxButtonCounts[0]>targetMaxCount() && maxButtons[0]!=BUTTON_UNKNOWN){
 2475               		.loc 3 314 0
 2476 03a0 80E0      		ldi r24,lo8(.LC7)
 2477 03a2 90E0      		ldi r25,hi8(.LC7)
 2478 03a4 0E94 0000 		call puts
 2479               	.LVL167:
 2480               	.LBB604:
 2481               	.LBB605:
 265:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(getTime()<600000) return (uint8_t)(0.5*NUM_CHECK_SAMPLES); //Less high for 2-10 minutes
 2482               		.loc 3 265 0
 2483 03a8 0E94 0000 		call getTime
 2484               	.LVL168:
 2485 03ac 603C      		cpi r22,-64
 2486 03ae 744D      		sbci r23,-44
 2487 03b0 8140      		sbci r24,1
 2488 03b2 9105      		cpc r25,__zero_reg__
 2489 03b4 00F0      		brlo .+2
 2490 03b6 00C0      		rjmp .L177
 2491               	.L128:
 2492               	/* epilogue start */
 2493               	.LBE605:
 2494               	.LBE604:
 318:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 2495               		.loc 3 318 0
 2496 03b8 C350      		subi r28,3
 2497 03ba DF4F      		sbci r29,-1
 2498 03bc CDBF      		out __SP_L__,r28
 2499 03be DEBF      		out __SP_H__,r29
 2500 03c0 DF91      		pop r29
 2501 03c2 CF91      		pop r28
 2502 03c4 1F91      		pop r17
 2503 03c6 0F91      		pop r16
 2504 03c8 FF90      		pop r15
 2505 03ca EF90      		pop r14
 2506 03cc DF90      		pop r13
 2507 03ce CF90      		pop r12
 2508 03d0 BF90      		pop r11
 2509 03d2 7F90      		pop r7
 2510 03d4 6F90      		pop r6
 2511 03d6 5F90      		pop r5
 2512 03d8 4F90      		pop r4
 2513 03da 0895      		ret
 2514               	.LVL169:
 2515               	.L130:
 2516               	.LBB608:
 2517               	.LBB597:
 2518               	.LBB594:
 2519               	.LBB589:
 2520               	.LBB586:
 145:../droplet_programs/mouseKeyboard/button.h **** 		if(pos->x < MOUSE_CIRCLE_X){
 2521               		.loc 4 145 0
 2522 03dc 6754      		subi r22,71
 2523 03de 7109      		sbc r23,__zero_reg__
 2524 03e0 6737      		cpi r22,119
 2525 03e2 7105      		cpc r23,__zero_reg__
 2526 03e4 00F0      		brlo .+2
 2527 03e6 00C0      		rjmp .L163
 146:../droplet_programs/mouseKeyboard/button.h **** 			return BUTTON_L_CLICK;
 2528               		.loc 4 146 0
 2529 03e8 92E6      		ldi r25,98
 2530 03ea 4916      		cp r4,r25
 2531 03ec 92E0      		ldi r25,2
 2532 03ee 5906      		cpc r5,r25
 2533 03f0 04F0      		brlt .L162
 148:../droplet_programs/mouseKeyboard/button.h **** 			return BUTTON_R_CLICK;
 2534               		.loc 4 148 0
 2535 03f2 AEE9      		ldi r26,-98
 2536 03f4 4A16      		cp r4,r26
 2537 03f6 A2E0      		ldi r26,2
 2538 03f8 5A06      		cpc r5,r26
 2539 03fa 04F0      		brlt .+2
 2540 03fc 00C0      		rjmp .L163
 2541 03fe EEE3      		ldi r30,lo8(62)
 2542 0400 F0E0      		ldi r31,0
 2543 0402 00C0      		rjmp .L129
 2544               	.LVL170:
 2545               	.L173:
 2546               	.LBE586:
 2547               	.LBE589:
 2548               	.LBB590:
 2549               	.LBB582:
 157:../droplet_programs/mouseKeyboard/button.h **** 		case 0: return getButton_SPACEROW(pos->x);
 2550               		.loc 4 157 0
 2551 0404 3097      		sbiw r30,0
 2552 0406 01F0      		breq .+2
 2553 0408 00C0      		rjmp .L163
 2554               	.LVL171:
 2555               	.LBB580:
 2556               	.LBB581:
 135:../droplet_programs/mouseKeyboard/button.h **** 		x<(7*BUTTON_WIDTH + BUTTON_HALFWIDTH))
 2557               		.loc 4 135 0
 2558 040a 20EB      		ldi r18,-80
 2559 040c 421A      		sub r4,r18
 2560 040e 5108      		sbc r5,__zero_reg__
 2561               	.LVL172:
 2562 0410 87EC      		ldi r24,-57
 2563 0412 4816      		cp r4,r24
 2564 0414 5104      		cpc r5,__zero_reg__
 2565 0416 00F0      		brlo .+2
 2566 0418 00C0      		rjmp .L129
 2567 041a E0E2      		ldi r30,lo8(32)
 2568 041c F0E0      		ldi r31,0
 2569 041e 00C0      		rjmp .L129
 2570               	.LVL173:
 2571               	.L162:
 2572               	.LBE581:
 2573               	.LBE580:
 2574               	.LBE582:
 2575               	.LBE590:
 2576               	.LBB591:
 2577               	.LBB587:
 146:../droplet_programs/mouseKeyboard/button.h **** 			return BUTTON_L_CLICK;
 2578               		.loc 4 146 0
 2579 0420 ECE3      		ldi r30,lo8(60)
 2580 0422 F0E0      		ldi r31,0
 2581 0424 00C0      		rjmp .L129
 2582               	.LVL174:
 2583               	.L134:
 2584 0426 C201      		movw r24,r4
 2585 0428 4997      		sbiw r24,25
 2586 042a B701      		movw r22,r14
 2587 042c 0E94 0000 		call __divmodhi4
 2588 0430 7727      		clr r23
 2589 0432 6A30      		cpi r22,10
 2590 0434 7105      		cpc r23,__zero_reg__
 2591 0436 04F0      		brlt .+2
 2592 0438 00C0      		rjmp .L163
 2593 043a FB01      		movw r30,r22
 2594 043c E050      		subi r30,lo8(-(CSWTCH.92))
 2595 043e F040      		sbci r31,hi8(-(CSWTCH.92))
 2596 0440 E081      		ld r30,Z
 2597 0442 F0E0      		ldi r31,0
 2598 0444 00C0      		rjmp .L129
 2599               	.LVL175:
 2600               	.L131:
 2601 0446 C201      		movw r24,r4
 2602 0448 B701      		movw r22,r14
 2603 044a 0E94 0000 		call __divmodhi4
 2604 044e 7727      		clr r23
 2605 0450 6A30      		cpi r22,10
 2606 0452 7105      		cpc r23,__zero_reg__
 2607 0454 04F0      		brlt .+2
 2608 0456 00C0      		rjmp .L163
 2609 0458 FB01      		movw r30,r22
 2610 045a E050      		subi r30,lo8(-(CSWTCH.94))
 2611 045c F040      		sbci r31,hi8(-(CSWTCH.94))
 2612 045e E081      		ld r30,Z
 2613 0460 F0E0      		ldi r31,0
 2614 0462 00C0      		rjmp .L129
 2615               	.LVL176:
 2616               	.L165:
 2617               	.LBE587:
 2618               	.LBE591:
 2619               	.LBE594:
 2620               	.LBE597:
 2621               	.LBE608:
 2622               	.LBB609:
 312:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 2623               		.loc 3 312 0
 2624 0464 80E0      		ldi r24,lo8(.LC5)
 2625 0466 90E0      		ldi r25,hi8(.LC5)
 2626 0468 00C0      		rjmp .L147
 2627               	.L164:
 2628               	.LBE609:
 310:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	for(uint8_t i=1;i<NUM_MAXIMUMS_TRACKED;i++){
 2629               		.loc 3 310 0
 2630 046a 80E0      		ldi r24,lo8(.LC3)
 2631 046c 90E0      		ldi r25,hi8(.LC3)
 2632 046e 00C0      		rjmp .L146
 2633               	.L177:
 2634               	.LBB610:
 2635               	.LBB606:
 266:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	return (uint8_t)(0.33*NUM_CHECK_SAMPLES);
 2636               		.loc 3 266 0
 2637 0470 0E94 0000 		call getTime
 2638               	.LVL177:
 2639 0474 603C      		cpi r22,-64
 2640 0476 7742      		sbci r23,39
 2641 0478 8940      		sbci r24,9
 2642 047a 9105      		cpc r25,__zero_reg__
 2643 047c 00F0      		brlo .L178
 267:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 2644               		.loc 3 267 0
 2645 047e 81E2      		ldi r24,lo8(33)
 2646               	.L151:
 2647               	.LBE606:
 2648               	.LBE610:
 315:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		setRoleAndButton(maxButtons[0]);
 2649               		.loc 3 315 0
 2650 0480 8B15      		cp r24,r11
 2651 0482 00F0      		brlo .+2
 2652 0484 00C0      		rjmp .L128
 315:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		setRoleAndButton(maxButtons[0]);
 2653               		.loc 3 315 0 is_stmt 0 discriminator 1
 2654 0486 5520      		tst r5
 2655 0488 01F4      		brne .+2
 2656 048a 00C0      		rjmp .L128
 2657               	.LVL178:
 2658               	.LBB611:
 2659               	.LBB612:
 117:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		myRole = KEYBOARD;
 2660               		.loc 1 117 0 is_stmt 1
 2661 048c 852D      		mov r24,r5
 2662 048e 8D7F      		andi r24,lo8(-3)
 2663 0490 8C33      		cpi r24,lo8(60)
 2664 0492 01F0      		breq .L153
 118:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}else{
 2665               		.loc 1 118 0
 2666 0494 81E0      		ldi r24,lo8(1)
 2667 0496 8093 0000 		sts myRole,r24
 2668               	.L154:
 122:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 2669               		.loc 1 122 0
 2670 049a 5092 0000 		sts myButton,r5
 2671               	.LBE612:
 2672               	.LBE611:
 318:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 2673               		.loc 3 318 0
 2674 049e 00C0      		rjmp .L128
 2675               	.LVL179:
 2676               	.L178:
 2677               	.LBB614:
 2678               	.LBB607:
 266:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	return (uint8_t)(0.33*NUM_CHECK_SAMPLES);
 2679               		.loc 3 266 0
 2680 04a0 82E3      		ldi r24,lo8(50)
 2681 04a2 00C0      		rjmp .L151
 2682               	.LVL180:
 2683               	.L153:
 2684               	.LBE607:
 2685               	.LBE614:
 2686               	.LBB615:
 2687               	.LBB613:
 120:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}
 2688               		.loc 1 120 0
 2689 04a4 82E0      		ldi r24,lo8(2)
 2690 04a6 8093 0000 		sts myRole,r24
 2691 04aa 00C0      		rjmp .L154
 2692               	.LBE613:
 2693               	.LBE615:
 2694               		.cfi_endproc
 2695               	.LFE95:
 2697               		.section	.rodata.str1.1
 2698               	.LC8:
 2699 006a 5072 6520 		.string	"Pre Broadcast\r"
 2699      4272 6F61 
 2699      6463 6173 
 2699      740D 00
 2700               	.LC9:
 2701 0079 506F 7374 		.string	"Post Broadcast\r"
 2701      2042 726F 
 2701      6164 6361 
 2701      7374 0D00 
 2702               		.section	.text.rnbBroadcastDebugWrapper,"ax",@progbits
 2703               	.global	rnbBroadcastDebugWrapper
 2705               	rnbBroadcastDebugWrapper:
 2706               	.LFB96:
 320:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	printf("Pre Broadcast\r\n");
 2707               		.loc 3 320 0
 2708               		.cfi_startproc
 2709               	/* prologue: function */
 2710               	/* frame size = 0 */
 2711               	/* stack size = 0 */
 2712               	.L__stack_usage = 0
 321:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	broadcastRnbData();
 2713               		.loc 3 321 0
 2714 0000 80E0      		ldi r24,lo8(.LC8)
 2715 0002 90E0      		ldi r25,hi8(.LC8)
 2716 0004 0E94 0000 		call puts
 2717               	.LVL181:
 322:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	printf("Post Broadcast\r\n");
 2718               		.loc 3 322 0
 2719 0008 0E94 0000 		call broadcastRnbData
 2720               	.LVL182:
 323:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 2721               		.loc 3 323 0
 2722 000c 80E0      		ldi r24,lo8(.LC9)
 2723 000e 90E0      		ldi r25,hi8(.LC9)
 2724 0010 0C94 0000 		jmp puts
 2725               	.LVL183:
 2726               		.cfi_endproc
 2727               	.LFE96:
 2729               		.section	.rodata.str1.1
 2730               	.LC10:
 2731 0089 2020 2027 		.string	"   '%c'\r\n"
 2731      2563 270D 
 2731      0A00 
 2732               	.LC11:
 2733 0093 275C 2530 		.string	"'\\%03hu'\r\n"
 2733      3368 7527 
 2733      0D0A 00
 2734               	.LC12:
 2735 009e 5052 4553 		.string	"PRESSED: "
 2735      5345 443A 
 2735      2000 
 2736               		.section	.text.userMicInterrupt,"ax",@progbits
 2737               	.global	userMicInterrupt
 2739               	userMicInterrupt:
 2740               	.LFB97:
 326:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(myRole==UNKNOWN || getTime()<1500 || ( (getTime()-lastKeypress) < MIN_MULTIPRESS_DELAY ) ){
 2741               		.loc 3 326 0
 2742               		.cfi_startproc
 2743 0000 0F93      		push r16
 2744               	.LCFI70:
 2745               		.cfi_def_cfa_offset 4
 2746               		.cfi_offset 16, -3
 2747 0002 1F93      		push r17
 2748               	.LCFI71:
 2749               		.cfi_def_cfa_offset 5
 2750               		.cfi_offset 17, -4
 2751 0004 CF93      		push r28
 2752               	.LCFI72:
 2753               		.cfi_def_cfa_offset 6
 2754               		.cfi_offset 28, -5
 2755 0006 DF93      		push r29
 2756               	.LCFI73:
 2757               		.cfi_def_cfa_offset 7
 2758               		.cfi_offset 29, -6
 2759 0008 CDB7      		in r28,__SP_L__
 2760 000a DEB7      		in r29,__SP_H__
 2761               	.LCFI74:
 2762               		.cfi_def_cfa_register 28
 2763 000c 2797      		sbiw r28,7
 2764               	.LCFI75:
 2765               		.cfi_def_cfa_offset 14
 2766 000e CDBF      		out __SP_L__,r28
 2767 0010 DEBF      		out __SP_H__,r29
 2768               	/* prologue: function */
 2769               	/* frame size = 7 */
 2770               	/* stack size = 11 */
 2771               	.L__stack_usage = 11
 327:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 2772               		.loc 3 327 0
 2773 0012 8091 0000 		lds r24,myRole
 2774 0016 8111      		cpse r24,__zero_reg__
 2775 0018 00C0      		rjmp .L199
 2776               	.L180:
 2777               	/* epilogue start */
 339:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 2778               		.loc 3 339 0
 2779 001a 2796      		adiw r28,7
 2780 001c CDBF      		out __SP_L__,r28
 2781 001e DEBF      		out __SP_H__,r29
 2782 0020 DF91      		pop r29
 2783 0022 CF91      		pop r28
 2784 0024 1F91      		pop r17
 2785 0026 0F91      		pop r16
 2786 0028 0895      		ret
 2787               	.L199:
 327:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 2788               		.loc 3 327 0 discriminator 1
 2789 002a 0E94 0000 		call getTime
 2790               	.LVL184:
 2791 002e 6C3D      		cpi r22,-36
 2792 0030 7540      		sbci r23,5
 2793 0032 8105      		cpc r24,__zero_reg__
 2794 0034 9105      		cpc r25,__zero_reg__
 2795 0036 00F0      		brlo .L180
 327:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return;
 2796               		.loc 3 327 0 is_stmt 0 discriminator 2
 2797 0038 0E94 0000 		call getTime
 2798               	.LVL185:
 2799 003c 0091 0000 		lds r16,lastKeypress
 2800 0040 1091 0000 		lds r17,lastKeypress+1
 2801 0044 2091 0000 		lds r18,lastKeypress+2
 2802 0048 3091 0000 		lds r19,lastKeypress+3
 2803 004c DC01      		movw r26,r24
 2804 004e CB01      		movw r24,r22
 2805 0050 801B      		sub r24,r16
 2806 0052 910B      		sbc r25,r17
 2807 0054 A20B      		sbc r26,r18
 2808 0056 B30B      		sbc r27,r19
 2809 0058 8639      		cpi r24,-106
 2810 005a 9105      		cpc r25,__zero_reg__
 2811 005c A105      		cpc r26,__zero_reg__
 2812 005e B105      		cpc r27,__zero_reg__
 2813 0060 00F0      		brlo .L180
 330:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	ButtonPressEvent evt;
 2814               		.loc 3 330 0 is_stmt 1
 2815 0062 0E94 0000 		call getTime
 2816               	.LVL186:
 2817 0066 6093 0000 		sts lastKeypress,r22
 2818 006a 7093 0000 		sts lastKeypress+1,r23
 2819 006e 8093 0000 		sts lastKeypress+2,r24
 2820 0072 9093 0000 		sts lastKeypress+3,r25
 2821               	.LBB616:
 2822               	.LBB617:
 178:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 179:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
 180:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** inline void buildButtonPressEvent(ButtonPressEvent* evt){
 181:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	printf("PRESSED: ");
 2823               		.loc 1 181 0
 2824 0076 80E0      		ldi r24,lo8(.LC12)
 2825 0078 90E0      		ldi r25,hi8(.LC12)
 2826 007a 9F93      		push r25
 2827 007c 8F93      		push r24
 2828 007e 0E94 0000 		call printf
 2829               	.LVL187:
 182:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	printf(isprint(myButton) ? "   '%c'\r\n" : "'\\%03hu'\r\n", myButton);
 2830               		.loc 1 182 0
 2831 0082 1091 0000 		lds r17,myButton
 2832 0086 812F      		mov r24,r17
 2833 0088 90E0      		ldi r25,0
 2834 008a 0E94 0000 		call isprint
 2835               	.LVL188:
 2836 008e 0F90      		pop __tmp_reg__
 2837 0090 0F90      		pop __tmp_reg__
 2838 0092 892B      		or r24,r25
 2839 0094 01F4      		brne .+2
 2840 0096 00C0      		rjmp .L189
 2841 0098 80E0      		ldi r24,lo8(.LC10)
 2842 009a 90E0      		ldi r25,hi8(.LC10)
 2843               	.L182:
 2844 009c 1F92      		push __zero_reg__
 2845 009e 1F93      		push r17
 2846 00a0 9F93      		push r25
 2847 00a2 8F93      		push r24
 2848 00a4 0E94 0000 		call printf
 2849               	.LVL189:
 183:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	evt->time = getTime();
 2850               		.loc 1 183 0
 2851 00a8 0E94 0000 		call getTime
 2852               	.LVL190:
 2853 00ac 6983      		std Y+1,r22
 2854 00ae 7A83      		std Y+2,r23
 2855 00b0 8B83      		std Y+3,r24
 2856 00b2 9C83      		std Y+4,r25
 184:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	evt->button = ( !isShifted && isupper(myButton) ) ? (myButton+32) : myButton; //convert to lowerca
 2857               		.loc 1 184 0
 2858 00b4 0F90      		pop __tmp_reg__
 2859 00b6 0F90      		pop __tmp_reg__
 2860 00b8 0F90      		pop __tmp_reg__
 2861 00ba 0F90      		pop __tmp_reg__
 2862 00bc 8091 0000 		lds r24,isShifted
 2863 00c0 1091 0000 		lds r17,myButton
 2864 00c4 8111      		cpse r24,__zero_reg__
 2865 00c6 00C0      		rjmp .L184
 2866 00c8 812F      		mov r24,r17
 2867 00ca 90E0      		ldi r25,0
 2868 00cc 0E94 0000 		call isupper
 2869               	.LVL191:
 2870 00d0 892B      		or r24,r25
 2871 00d2 01F0      		breq .L184
 2872 00d4 812F      		mov r24,r17
 2873 00d6 105E      		subi r17,lo8(-(32))
 2874               	.L185:
 2875 00d8 1F83      		std Y+7,r17
 185:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	evt->src = getDropletID();
 2876               		.loc 1 185 0
 2877 00da 2091 0000 		lds r18,droplet_ID
 2878 00de 3091 0000 		lds r19,droplet_ID+1
 2879 00e2 2D83      		std Y+5,r18
 2880 00e4 3E83      		std Y+6,r19
 2881               	.LBE617:
 2882               	.LBE616:
 333:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		periodicMouseBroadcast = 1;
 2883               		.loc 3 333 0
 2884 00e6 8C33      		cpi r24,lo8(60)
 2885 00e8 01F0      		breq .L200
 2886               	.L186:
 336:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		blinkLED(2, 100);	
 2887               		.loc 3 336 0
 2888 00ea CE01      		movw r24,r28
 2889 00ec 0196      		adiw r24,1
 2890 00ee 0E94 0000 		call addEvent
 2891               	.LVL192:
 2892 00f2 8823      		tst r24
 2893 00f4 01F4      		brne .+2
 2894 00f6 00C0      		rjmp .L180
 2895               	.LVL193:
 2896               	.LBB619:
 2897               	.LBB620:
 2898               	.LBB621:
 2899               	.LBB622:
  20:../include/rgb_led.h **** inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
 2900               		.loc 2 20 0
 2901 00f8 2091 7809 		lds r18,2424
 2902 00fc 3091 7909 		lds r19,2424+1
 2903               	.LVL194:
 2904               	.LBE622:
 2905               	.LBE621:
 147:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 2906               		.loc 1 147 0
 2907 0100 2436      		cpi r18,lo8(100)
 2908 0102 01F4      		brne .+2
 2909 0104 00C0      		rjmp .L180
 2910               	.LVL195:
 2911               	.LBB623:
 2912               	.LBB624:
 2913               		.loc 2 21 0
 2914 0106 84E6      		ldi r24,lo8(100)
 2915 0108 90E0      		ldi r25,0
 2916 010a 8093 7809 		sts 2424,r24
 2917 010e 9093 7909 		sts 2424+1,r25
 2918               	.LVL196:
 2919               	.LBE624:
 2920               	.LBE623:
 153:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		default: return 0;
 2921               		.loc 1 153 0
 2922 0112 3327      		clr r19
 2923               	.LVL197:
 2924 0114 40E0      		ldi r20,lo8(gs(restoreBlueLED))
 2925 0116 50E0      		ldi r21,hi8(gs(restoreBlueLED))
 2926 0118 64E6      		ldi r22,lo8(100)
 2927 011a 70E0      		ldi r23,0
 2928 011c 80E0      		ldi r24,0
 2929 011e 90E0      		ldi r25,0
 2930 0120 0E94 0000 		call scheduleTask
 2931               	.LVL198:
 156:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	return 1;
 2932               		.loc 1 156 0
 2933 0124 81E0      		ldi r24,lo8(1)
 2934 0126 8093 0000 		sts isBlinking,r24
 2935 012a 00C0      		rjmp .L180
 2936               	.LVL199:
 2937               	.L184:
 2938               	.LBE620:
 2939               	.LBE619:
 2940               	.LBB625:
 2941               	.LBB618:
 184:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	evt->src = getDropletID();
 2942               		.loc 1 184 0
 2943 012c 812F      		mov r24,r17
 2944 012e 00C0      		rjmp .L185
 2945               	.L189:
 182:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	evt->time = getTime();
 2946               		.loc 1 182 0
 2947 0130 80E0      		ldi r24,lo8(.LC11)
 2948 0132 90E0      		ldi r25,hi8(.LC11)
 2949 0134 00C0      		rjmp .L182
 2950               	.L200:
 2951               	.LBE618:
 2952               	.LBE625:
 334:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}
 2953               		.loc 3 334 0
 2954 0136 81E0      		ldi r24,lo8(1)
 2955 0138 8093 0000 		sts periodicMouseBroadcast,r24
 2956 013c 00C0      		rjmp .L186
 2957               		.cfi_endproc
 2958               	.LFE97:
 2960               		.section	.rodata.str1.1
 2961               	.LC13:
 2962 00a8 5741 4B45 		.string	"WAKE"
 2962      00
 2963               	.LC14:
 2964 00ad 7072 6573 		.string	"press"
 2964      7300 
 2965               	.LC15:
 2966 00b3 5052 4553 		.string	"PRESSED:    '%c'\r\n"
 2966      5345 443A 
 2966      2020 2020 
 2966      2725 6327 
 2966      0D0A 00
 2967               	.LC16:
 2968 00c6 7365 745F 		.string	"set_role"
 2968      726F 6C65 
 2968      00
 2969               		.section	.text.userHandleCommand,"ax",@progbits
 2970               	.global	userHandleCommand
 2972               	userHandleCommand:
 2973               	.LFB98:
 345:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(strcmp(commandWord,"WAKE")==0){
 2974               		.loc 3 345 0
 2975               		.cfi_startproc
 2976               	.LVL200:
 2977 0000 EF92      		push r14
 2978               	.LCFI76:
 2979               		.cfi_def_cfa_offset 4
 2980               		.cfi_offset 14, -3
 2981 0002 FF92      		push r15
 2982               	.LCFI77:
 2983               		.cfi_def_cfa_offset 5
 2984               		.cfi_offset 15, -4
 2985 0004 0F93      		push r16
 2986               	.LCFI78:
 2987               		.cfi_def_cfa_offset 6
 2988               		.cfi_offset 16, -5
 2989 0006 1F93      		push r17
 2990               	.LCFI79:
 2991               		.cfi_def_cfa_offset 7
 2992               		.cfi_offset 17, -6
 2993 0008 CF93      		push r28
 2994               	.LCFI80:
 2995               		.cfi_def_cfa_offset 8
 2996               		.cfi_offset 28, -7
 2997 000a DF93      		push r29
 2998               	.LCFI81:
 2999               		.cfi_def_cfa_offset 9
 3000               		.cfi_offset 29, -8
 3001 000c CDB7      		in r28,__SP_L__
 3002 000e DEB7      		in r29,__SP_H__
 3003               	.LCFI82:
 3004               		.cfi_def_cfa_register 28
 3005 0010 2797      		sbiw r28,7
 3006               	.LCFI83:
 3007               		.cfi_def_cfa_offset 16
 3008 0012 CDBF      		out __SP_L__,r28
 3009 0014 DEBF      		out __SP_H__,r29
 3010               	/* prologue: function */
 3011               	/* frame size = 7 */
 3012               	/* stack size = 13 */
 3013               	.L__stack_usage = 13
 3014 0016 8C01      		movw r16,r24
 3015 0018 7B01      		movw r14,r22
 346:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(wireSleepTask!=NULL){
 3016               		.loc 3 346 0
 3017 001a 60E0      		ldi r22,lo8(.LC13)
 3018 001c 70E0      		ldi r23,hi8(.LC13)
 3019               	.LVL201:
 3020 001e 0E94 0000 		call strcmp
 3021               	.LVL202:
 3022 0022 892B      		or r24,r25
 3023 0024 01F4      		brne .L202
 347:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			removeTask(wireSleepTask);
 3024               		.loc 3 347 0
 3025 0026 8091 0000 		lds r24,wireSleepTask
 3026 002a 9091 0000 		lds r25,wireSleepTask+1
 3027 002e 0097      		sbiw r24,0
 3028 0030 01F0      		breq .L203
 348:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 3029               		.loc 3 348 0
 3030 0032 0E94 0000 		call removeTask
 3031               	.LVL203:
 3032               	.L203:
 350:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		isWired = 1;
 3033               		.loc 3 350 0
 3034 0036 20E0      		ldi r18,0
 3035 0038 30E0      		ldi r19,0
 3036 003a 40E0      		ldi r20,lo8(gs(wireSleep))
 3037 003c 50E0      		ldi r21,hi8(gs(wireSleep))
 3038 003e 60E1      		ldi r22,lo8(16)
 3039 0040 77E2      		ldi r23,lo8(39)
 3040 0042 80E0      		ldi r24,0
 3041 0044 90E0      		ldi r25,0
 3042 0046 0E94 0000 		call scheduleTask
 3043               	.LVL204:
 3044 004a 8093 0000 		sts wireSleepTask,r24
 3045 004e 9093 0000 		sts wireSleepTask+1,r25
 351:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		return 1;
 3046               		.loc 3 351 0
 3047 0052 81E0      		ldi r24,lo8(1)
 3048 0054 8093 0000 		sts isWired,r24
 3049               	.LVL205:
 3050               	.L226:
 3051               	/* epilogue start */
 379:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 3052               		.loc 3 379 0
 3053 0058 2796      		adiw r28,7
 3054 005a CDBF      		out __SP_L__,r28
 3055 005c DEBF      		out __SP_H__,r29
 3056 005e DF91      		pop r29
 3057 0060 CF91      		pop r28
 3058 0062 1F91      		pop r17
 3059 0064 0F91      		pop r16
 3060               	.LVL206:
 3061 0066 FF90      		pop r15
 3062 0068 EF90      		pop r14
 3063 006a 0895      		ret
 3064               	.LVL207:
 3065               	.L202:
 353:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		char charPressed = commandArgs[0];
 3066               		.loc 3 353 0
 3067 006c 60E0      		ldi r22,lo8(.LC14)
 3068 006e 70E0      		ldi r23,hi8(.LC14)
 3069 0070 C801      		movw r24,r16
 3070 0072 0E94 0000 		call strcmp
 3071               	.LVL208:
 3072 0076 892B      		or r24,r25
 3073 0078 01F4      		brne .L205
 3074               	.LBB626:
 354:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(charPressed == '\0'){
 3075               		.loc 3 354 0
 3076 007a F701      		movw r30,r14
 3077 007c 1081      		ld r17,Z
 3078               	.LVL209:
 355:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			return 0;
 3079               		.loc 3 355 0
 3080 007e 1123      		tst r17
 3081 0080 01F4      		brne .+2
 3082 0082 00C0      		rjmp .L216
 357:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			ButtonPressEvent evt;
 3083               		.loc 3 357 0
 3084 0084 E12E      		mov r14,r17
 3085 0086 012E      		mov __tmp_reg__,r17
 3086 0088 000C      		lsl r0
 3087 008a FF08      		sbc r15,r15
 3088               	.LVL210:
 3089 008c C701      		movw r24,r14
 3090 008e 0E94 0000 		call isprint
 3091               	.LVL211:
 3092 0092 892B      		or r24,r25
 3093 0094 01F4      		brne .+2
 3094 0096 00C0      		rjmp .L215
 3095               	.LBB627:
 359:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.button = tolower(charPressed);
 3096               		.loc 3 359 0
 3097 0098 C701      		movw r24,r14
 3098 009a 0E94 0000 		call isupper
 3099               	.LVL212:
 3100 009e 892B      		or r24,r25
 3101 00a0 01F4      		brne .+2
 3102 00a2 00C0      		rjmp .L206
 359:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.button = tolower(charPressed);
 3103               		.loc 3 359 0 is_stmt 0 discriminator 1
 3104 00a4 8091 0000 		lds r24,isShifted
 3105 00a8 8111      		cpse r24,__zero_reg__
 3106 00aa 00C0      		rjmp .L207
 360:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}else if(islower(charPressed) && isShifted){
 3107               		.loc 3 360 0 is_stmt 1
 3108 00ac C701      		movw r24,r14
 3109 00ae 0E94 0000 		call tolower
 3110               	.LVL213:
 3111 00b2 8F83      		std Y+7,r24
 3112               	.L208:
 366:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			evt.src = getDropletID();			
 3113               		.loc 3 366 0
 3114 00b4 0E94 0000 		call getTime
 3115               	.LVL214:
 3116 00b8 6983      		std Y+1,r22
 3117 00ba 7A83      		std Y+2,r23
 3118 00bc 8B83      		std Y+3,r24
 3119 00be 9C83      		std Y+4,r25
 367:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			printf("PRESSED:    '%c'\r\n", evt.button);
 3120               		.loc 3 367 0
 3121 00c0 8091 0000 		lds r24,droplet_ID
 3122 00c4 9091 0000 		lds r25,droplet_ID+1
 3123 00c8 8D83      		std Y+5,r24
 3124 00ca 9E83      		std Y+6,r25
 368:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			addEvent(&evt);
 3125               		.loc 3 368 0
 3126 00cc 8F81      		ldd r24,Y+7
 3127 00ce 1F92      		push __zero_reg__
 3128 00d0 8F93      		push r24
 3129 00d2 80E0      		ldi r24,lo8(.LC15)
 3130 00d4 90E0      		ldi r25,hi8(.LC15)
 3131 00d6 9F93      		push r25
 3132 00d8 8F93      		push r24
 3133 00da 0E94 0000 		call printf
 3134               	.LVL215:
 369:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}
 3135               		.loc 3 369 0
 3136 00de CE01      		movw r24,r28
 3137 00e0 0196      		adiw r24,1
 3138 00e2 0E94 0000 		call addEvent
 3139               	.LVL216:
 3140 00e6 0F90      		pop __tmp_reg__
 3141 00e8 0F90      		pop __tmp_reg__
 3142 00ea 0F90      		pop __tmp_reg__
 3143 00ec 0F90      		pop __tmp_reg__
 3144               	.LBE627:
 371:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else if(strcmp(commandWord,"set_role")==0){
 3145               		.loc 3 371 0
 3146 00ee 81E0      		ldi r24,lo8(1)
 3147 00f0 00C0      		rjmp .L226
 3148               	.LVL217:
 3149               	.L205:
 3150               	.LBE626:
 372:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		Button button = atoi(commandArgs);
 3151               		.loc 3 372 0
 3152 00f2 60E0      		ldi r22,lo8(.LC16)
 3153 00f4 70E0      		ldi r23,hi8(.LC16)
 3154 00f6 C801      		movw r24,r16
 3155 00f8 0E94 0000 		call strcmp
 3156               	.LVL218:
 3157 00fc 892B      		or r24,r25
 3158 00fe 01F4      		brne .L216
 3159               	.LBB629:
 373:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		setRoleAndButton(button);		
 3160               		.loc 3 373 0
 3161 0100 C701      		movw r24,r14
 3162 0102 0E94 0000 		call atoi
 3163               	.LVL219:
 3164               	.LBB630:
 3165               	.LBB631:
 115:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		myRole = UNKNOWN;	
 3166               		.loc 1 115 0
 3167 0106 8111      		cpse r24,__zero_reg__
 3168 0108 00C0      		rjmp .L210
 116:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}else if( (button!=BUTTON_L_CLICK) && (button!=BUTTON_R_CLICK) ){
 3169               		.loc 1 116 0
 3170 010a 1092 0000 		sts myRole,__zero_reg__
 3171               	.L211:
 122:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 3172               		.loc 1 122 0
 3173 010e 8093 0000 		sts myButton,r24
 3174               	.LVL220:
 3175               	.LBE631:
 3176               	.LBE630:
 375:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else{
 3177               		.loc 3 375 0
 3178 0112 81E0      		ldi r24,lo8(1)
 3179               	.LVL221:
 3180 0114 00C0      		rjmp .L226
 3181               	.LVL222:
 3182               	.L216:
 3183               	.LBE629:
 3184               	.LBB636:
 356:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else if(isprint(charPressed)){
 3185               		.loc 3 356 0
 3186 0116 80E0      		ldi r24,0
 3187 0118 00C0      		rjmp .L226
 3188               	.LVL223:
 3189               	.L210:
 3190               	.LBE636:
 3191               	.LBB637:
 3192               	.LBB634:
 3193               	.LBB632:
 117:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		myRole = KEYBOARD;
 3194               		.loc 1 117 0
 3195 011a 982F      		mov r25,r24
 3196 011c 9D7F      		andi r25,lo8(-3)
 3197 011e 9C33      		cpi r25,lo8(60)
 3198 0120 01F0      		breq .L212
 118:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}else{
 3199               		.loc 1 118 0
 3200 0122 91E0      		ldi r25,lo8(1)
 3201 0124 9093 0000 		sts myRole,r25
 3202 0128 00C0      		rjmp .L211
 3203               	.LVL224:
 3204               	.L215:
 3205               	.LBE632:
 3206               	.LBE634:
 3207               	.LBE637:
 3208               	.LBB638:
 371:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	}else if(strcmp(commandWord,"set_role")==0){
 3209               		.loc 3 371 0
 3210 012a 81E0      		ldi r24,lo8(1)
 3211 012c 00C0      		rjmp .L226
 3212               	.L206:
 3213               	.LBB628:
 361:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.button = toupper(charPressed);
 3214               		.loc 3 361 0
 3215 012e C701      		movw r24,r14
 3216 0130 0E94 0000 		call islower
 3217               	.LVL225:
 3218 0134 892B      		or r24,r25
 3219 0136 01F0      		breq .L209
 361:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.button = toupper(charPressed);
 3220               		.loc 3 361 0 is_stmt 0 discriminator 1
 3221 0138 8091 0000 		lds r24,isShifted
 3222 013c 8111      		cpse r24,__zero_reg__
 3223 013e 00C0      		rjmp .L213
 3224               	.L209:
 364:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}
 3225               		.loc 3 364 0 is_stmt 1
 3226 0140 1F83      		std Y+7,r17
 3227 0142 00C0      		rjmp .L208
 3228               	.L207:
 361:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.button = toupper(charPressed);
 3229               		.loc 3 361 0
 3230 0144 C701      		movw r24,r14
 3231 0146 0E94 0000 		call islower
 3232               	.LVL226:
 3233 014a 892B      		or r24,r25
 3234 014c 01F0      		breq .L209
 3235               	.L213:
 362:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			}else{
 3236               		.loc 3 362 0
 3237 014e C701      		movw r24,r14
 3238 0150 0E94 0000 		call toupper
 3239               	.LVL227:
 3240 0154 8F83      		std Y+7,r24
 3241 0156 00C0      		rjmp .L208
 3242               	.LVL228:
 3243               	.L212:
 3244               	.LBE628:
 3245               	.LBE638:
 3246               	.LBB639:
 3247               	.LBB635:
 3248               	.LBB633:
 120:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}
 3249               		.loc 1 120 0
 3250 0158 92E0      		ldi r25,lo8(2)
 3251 015a 9093 0000 		sts myRole,r25
 3252 015e 00C0      		rjmp .L211
 3253               	.LBE633:
 3254               	.LBE635:
 3255               	.LBE639:
 3256               		.cfi_endproc
 3257               	.LFE98:
 3259               		.section	.text.getExponentialBackoff,"ax",@progbits
 3260               	.global	getExponentialBackoff
 3262               	getExponentialBackoff:
 3263               	.LFB104:
 447:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 448:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 449:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** uint32_t getExponentialBackoff(uint8_t c){
 3264               		.loc 3 449 0
 3265               		.cfi_startproc
 3266               	.LVL229:
 3267 0000 CF93      		push r28
 3268               	.LCFI84:
 3269               		.cfi_def_cfa_offset 4
 3270               		.cfi_offset 28, -3
 3271 0002 DF93      		push r29
 3272               	.LCFI85:
 3273               		.cfi_def_cfa_offset 5
 3274               		.cfi_offset 29, -4
 3275 0004 CDB7      		in r28,__SP_L__
 3276 0006 DEB7      		in r29,__SP_H__
 3277               	.LCFI86:
 3278               		.cfi_def_cfa_register 28
 3279 0008 2897      		sbiw r28,8
 3280               	.LCFI87:
 3281               		.cfi_def_cfa_offset 13
 3282 000a CDBF      		out __SP_L__,r28
 3283 000c DEBF      		out __SP_H__,r29
 3284               	/* prologue: function */
 3285               	/* frame size = 8 */
 3286               	/* stack size = 10 */
 3287               	.L__stack_usage = 10
 450:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	volatile uint32_t k;
 451:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	volatile uint32_t N;
 452:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 453:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	N= (((uint32_t)1)<<c);
 3288               		.loc 3 453 0
 3289 000e 41E0      		ldi r20,lo8(1)
 3290 0010 50E0      		ldi r21,0
 3291 0012 60E0      		ldi r22,0
 3292 0014 70E0      		ldi r23,0
 3293 0016 00C0      		rjmp 2f
 3294               		1:
 3295 0018 440F      		lsl r20
 3296 001a 551F      		rol r21
 3297 001c 661F      		rol r22
 3298 001e 771F      		rol r23
 3299               		2:
 3300 0020 8A95      		dec r24
 3301 0022 02F4      		brpl 1b
 3302 0024 4983      		std Y+1,r20
 3303 0026 5A83      		std Y+2,r21
 3304 0028 6B83      		std Y+3,r22
 3305 002a 7C83      		std Y+4,r23
 454:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 
 455:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	k = randQuad()%N;
 3306               		.loc 3 455 0
 3307 002c 0E94 0000 		call randQuad
 3308               	.LVL230:
 3309 0030 2981      		ldd r18,Y+1
 3310 0032 3A81      		ldd r19,Y+2
 3311 0034 4B81      		ldd r20,Y+3
 3312 0036 5C81      		ldd r21,Y+4
 3313 0038 0E94 0000 		call __udivmodsi4
 3314 003c 6D83      		std Y+5,r22
 3315 003e 7E83      		std Y+6,r23
 3316 0040 8F83      		std Y+7,r24
 3317 0042 9887      		std Y+8,r25
 456:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	return ((k*IR_MSG_TIMEOUT));
 3318               		.loc 3 456 0
 3319 0044 8D81      		ldd r24,Y+5
 3320 0046 9E81      		ldd r25,Y+6
 3321 0048 AF81      		ldd r26,Y+7
 3322 004a B885      		ldd r27,Y+8
 3323 004c AC01      		movw r20,r24
 3324 004e BD01      		movw r22,r26
 3325 0050 440F      		lsl r20
 3326 0052 551F      		rol r21
 3327 0054 661F      		rol r22
 3328 0056 771F      		rol r23
 3329 0058 840F      		add r24,r20
 3330 005a 951F      		adc r25,r21
 3331 005c A61F      		adc r26,r22
 3332 005e B71F      		adc r27,r23
 3333 0060 BC01      		movw r22,r24
 3334 0062 CD01      		movw r24,r26
 3335 0064 660F      		lsl r22
 3336 0066 771F      		rol r23
 3337 0068 881F      		rol r24
 3338 006a 991F      		rol r25
 3339               	/* epilogue start */
 457:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }...
 3340               		.loc 3 457 0
 3341 006c 2896      		adiw r28,8
 3342 006e CDBF      		out __SP_L__,r28
 3343 0070 DEBF      		out __SP_H__,r29
 3344 0072 DF91      		pop r29
 3345 0074 CF91      		pop r28
 3346 0076 0895      		ret
 3347               		.cfi_endproc
 3348               	.LFE104:
 3350               		.section	.text.sendMouseMoveMsg,"ax",@progbits
 3351               	.global	sendMouseMoveMsg
 3353               	sendMouseMoveMsg:
 3354               	.LFB100:
 397:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void sendMouseMoveMsg(MouseMoveMsgNode* msgNode){
 3355               		.loc 3 397 0
 3356               		.cfi_startproc
 3357               	.LVL231:
 3358 0000 0F93      		push r16
 3359               	.LCFI88:
 3360               		.cfi_def_cfa_offset 4
 3361               		.cfi_offset 16, -3
 3362 0002 1F93      		push r17
 3363               	.LCFI89:
 3364               		.cfi_def_cfa_offset 5
 3365               		.cfi_offset 17, -4
 3366 0004 CF93      		push r28
 3367               	.LCFI90:
 3368               		.cfi_def_cfa_offset 6
 3369               		.cfi_offset 28, -5
 3370 0006 DF93      		push r29
 3371               	.LCFI91:
 3372               		.cfi_def_cfa_offset 7
 3373               		.cfi_offset 29, -6
 3374               	/* prologue: function */
 3375               	/* frame size = 0 */
 3376               	/* stack size = 4 */
 3377               	.L__stack_usage = 4
 3378 0008 EC01      		movw r28,r24
 398:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(irIsBusy(ALL_DIRS)){
 3379               		.loc 3 398 0
 3380 000a 8FE3      		ldi r24,lo8(63)
 3381               	.LVL232:
 3382 000c 0E94 0000 		call irIsBusy
 3383               	.LVL233:
 3384 0010 8823      		tst r24
 3385 0012 01F0      		breq .L229
 3386               	.LBB670:
 399:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3387               		.loc 3 399 0
 3388 0014 0FB7      		in r16,__SREG__
 3389               	.LVL234:
 3390               	.LBB671:
 3391               	.LBB672:
 3392               		.file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
   1:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    All rights reserved.
   3:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
   4:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
   7:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Redistributions of source code must retain the above copyright
   8:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  10:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      the documentation and/or other materials provided with the
  13:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      distribution.
  14:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  15:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      contributors may be used to endorse or promote products derived
  17:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****      from this software without specific prior written permission.
  18:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  19:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** */
  31:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  32:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* $Id$ */
  33:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  34:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  37:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #include <avr/io.h>
  38:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #include <avr/interrupt.h>
  39:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  40:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** #if !defined(__DOXYGEN__)
  41:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* Internal helper functions. */
  42:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  44:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     sei();
  45:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
  46:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  47:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  48:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     cli();
 3393               		.loc 6 50 0
 3394               	/* #APP */
 3395               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3396 0016 F894      		cli
 3397               	 ;  0 "" 2
 3398               	.LVL235:
 3399               	/* #NOAPP */
 3400               	.LBE672:
 3401               	.LBE671:
 400:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if( msgNode->numTries > 6 ){
 3402               		.loc 3 400 0
 3403 0018 8F81      		ldd r24,Y+7
 3404 001a 8730      		cpi r24,lo8(7)
 3405 001c 00F4      		brsh .L233
 403:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				scheduleTask(getExponentialBackoff(msgNode->numTries), (arg_func_t)sendButtonPressMsg, (void*)m
 3406               		.loc 3 403 0
 3407 001e 0E94 0000 		call getExponentialBackoff
 3408               	.LVL236:
 3409 0022 9E01      		movw r18,r28
 3410 0024 40E0      		ldi r20,lo8(gs(sendButtonPressMsg))
 3411 0026 50E0      		ldi r21,hi8(gs(sendButtonPressMsg))
 3412 0028 0E94 0000 		call scheduleTask
 3413               	.LVL237:
 3414               	.L231:
 405:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			msgNode->numTries++;
 3415               		.loc 3 405 0 discriminator 2
 3416 002c 8F81      		ldd r24,Y+7
 3417 002e 8F5F      		subi r24,lo8(-(1))
 3418 0030 8F83      		std Y+7,r24
 3419               	.LVL238:
 3420               	.LBB673:
 3421               	.LBB674:
  51:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
  52:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  53:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  54:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  56:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     sei();
  57:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     (void)__s;
  59:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  60:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  61:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  63:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     cli();
  64:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     (void)__s;
  66:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  67:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  68:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     SREG = *__s;
 3422               		.loc 6 70 0 discriminator 2
 3423 0032 0FBF      		out __SREG__,r16
  71:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3424               		.loc 6 71 0 discriminator 2
 3425               	.LVL239:
 3426               	/* epilogue start */
 3427               	.LBE674:
 3428               	.LBE673:
 3429               	.LBE670:
 411:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 3430               		.loc 3 411 0 discriminator 2
 3431 0034 DF91      		pop r29
 3432 0036 CF91      		pop r28
 3433               	.LVL240:
 3434 0038 1F91      		pop r17
 3435 003a 0F91      		pop r16
 3436 003c 0895      		ret
 3437               	.LVL241:
 3438               	.L233:
 3439               	.LBB681:
 3440               	.LBB675:
 3441               	.LBB676:
 3442               		.file 7 "../include/droplet_base.h"
   1:../include/droplet_base.h **** #pragma once
   2:../include/droplet_base.h **** 
   3:../include/droplet_base.h **** #define AUDIO_DROPLET
   4:../include/droplet_base.h **** #define SYNCHRONIZED
   5:../include/droplet_base.h **** #define FIX_UNPOWERED_STATE
   6:../include/droplet_base.h **** 
   7:../include/droplet_base.h **** #include <avr/io.h>
   8:../include/droplet_base.h **** #include <avr/interrupt.h>
   9:../include/droplet_base.h **** #include <util/atomic.h>
  10:../include/droplet_base.h **** #include <util/delay.h>
  11:../include/droplet_base.h **** #include <util/crc16.h>
  12:../include/droplet_base.h **** #include <stdfix.h>
  13:../include/droplet_base.h **** #include <stdlib.h>
  14:../include/droplet_base.h **** #include <stdio.h>
  15:../include/droplet_base.h **** #include <math.h>
  16:../include/droplet_base.h **** #include <avr/pgmspace.h>
  17:../include/droplet_base.h **** #include <string.h>
  18:../include/droplet_base.h **** #include <ctype.h>
  19:../include/droplet_base.h **** 
  20:../include/droplet_base.h **** typedef uint16_t id_t;
  21:../include/droplet_base.h **** 
  22:../include/droplet_base.h **** //Any #defines needed by other Droplet files
  23:../include/droplet_base.h **** #define DIR0		((uint8_t)0x01)
  24:../include/droplet_base.h **** #define DIR1		((uint8_t)0x02)
  25:../include/droplet_base.h **** #define DIR2		((uint8_t)0x04)
  26:../include/droplet_base.h **** #define DIR3		((uint8_t)0x08)
  27:../include/droplet_base.h **** #define DIR4		((uint8_t)0x10)
  28:../include/droplet_base.h **** #define DIR5		((uint8_t)0x20)
  29:../include/droplet_base.h **** #define ALL_DIRS	((uint8_t)0x3F)
  30:../include/droplet_base.h **** 
  31:../include/droplet_base.h **** #define DIR_NE		DIR0
  32:../include/droplet_base.h **** #define DIR_E		DIR1
  33:../include/droplet_base.h **** #define DIR_SE		DIR2
  34:../include/droplet_base.h **** #define DIR_SW		DIR3
  35:../include/droplet_base.h **** #define DIR_W		DIR4
  36:../include/droplet_base.h **** #define DIR_NW		DIR5
  37:../include/droplet_base.h **** 
  38:../include/droplet_base.h **** id_t droplet_ID;
  39:../include/droplet_base.h **** volatile uint16_t rtc_epoch;
  40:../include/droplet_base.h **** 
  41:../include/droplet_base.h **** // Returns the number of ms elapsed since the last reset. (Defined in droplet_base_asm.s)
  42:../include/droplet_base.h **** uint32_t getTime(void);
  43:../include/droplet_base.h **** 
  44:../include/droplet_base.h **** // Returns this Droplet's unique 16-bit identifier. 0 will never be an identifier.
  45:../include/droplet_base.h **** inline id_t getDropletID(void){ 
  46:../include/droplet_base.h **** 	return droplet_ID;
  47:../include/droplet_base.h **** }
  48:../include/droplet_base.h **** 
  49:../include/droplet_base.h **** inline void* myMalloc(size_t size){
  50:../include/droplet_base.h **** 	void* tmp = NULL;
  51:../include/droplet_base.h **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
  52:../include/droplet_base.h **** 		tmp = malloc(size);
  53:../include/droplet_base.h **** 	}
  54:../include/droplet_base.h **** 	return tmp;
  55:../include/droplet_base.h **** }
  56:../include/droplet_base.h **** 
  57:../include/droplet_base.h **** inline void myFree(void* ptr){
  58:../include/droplet_base.h **** 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3443               		.loc 7 58 0
 3444 003e 1FB7      		in r17,__SREG__
 3445               	.LVL242:
 3446               	.LBB677:
 3447               	.LBB678:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3448               		.loc 6 50 0
 3449               	/* #APP */
 3450               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3451 0040 F894      		cli
 3452               	 ;  0 "" 2
 3453               	.LVL243:
 3454               	/* #NOAPP */
 3455               	.LBE678:
 3456               	.LBE677:
  59:../include/droplet_base.h **** 		free(ptr);
 3457               		.loc 7 59 0
 3458 0042 CE01      		movw r24,r28
 3459 0044 0E94 0000 		call free
 3460               	.LVL244:
 3461               	.LBB679:
 3462               	.LBB680:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3463               		.loc 6 70 0
 3464 0048 1FBF      		out __SREG__,r17
 3465               		.loc 6 71 0
 3466               	.LVL245:
 3467 004a 00C0      		rjmp .L231
 3468               	.LVL246:
 3469               	.L229:
 3470               	.LBE680:
 3471               	.LBE679:
 3472               	.LBE676:
 3473               	.LBE675:
 3474               	.LBE681:
 3475               	.LBB682:
 3476               	.LBB683:
 408:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		irSend(ALL_DIRS, (char*)(&(msgNode->msg)), sizeof(MouseMoveMsg));
 3477               		.loc 3 408 0
 3478 004c 47E0      		ldi r20,lo8(7)
 3479 004e BE01      		movw r22,r28
 3480 0050 8FE3      		ldi r24,lo8(63)
 3481 0052 0E94 0000 		call irSend
 3482               	.LVL247:
 3483               	.LBB684:
 3484               	.LBB685:
  58:../include/droplet_base.h **** 		free(ptr);
 3485               		.loc 7 58 0
 3486 0056 1FB7      		in r17,__SREG__
 3487               	.LVL248:
 3488               	.LBB686:
 3489               	.LBB687:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3490               		.loc 6 50 0
 3491               	/* #APP */
 3492               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3493 0058 F894      		cli
 3494               	 ;  0 "" 2
 3495               	.LVL249:
 3496               	/* #NOAPP */
 3497               	.LBE687:
 3498               	.LBE686:
 3499               		.loc 7 59 0
 3500 005a CE01      		movw r24,r28
 3501 005c 0E94 0000 		call free
 3502               	.LVL250:
 3503               	.LBB688:
 3504               	.LBB689:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3505               		.loc 6 70 0
 3506 0060 1FBF      		out __SREG__,r17
 3507               		.loc 6 71 0
 3508               	.LVL251:
 3509               	/* epilogue start */
 3510               	.LBE689:
 3511               	.LBE688:
 3512               	.LBE685:
 3513               	.LBE684:
 3514               	.LBE683:
 3515               	.LBE682:
 411:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 3516               		.loc 3 411 0
 3517 0062 DF91      		pop r29
 3518 0064 CF91      		pop r28
 3519               	.LVL252:
 3520 0066 1F91      		pop r17
 3521 0068 0F91      		pop r16
 3522 006a 0895      		ret
 3523               		.cfi_endproc
 3524               	.LFE100:
 3526               		.section	.text.prepMouseMoveMsg,"ax",@progbits
 3527               	.global	prepMouseMoveMsg
 3529               	prepMouseMoveMsg:
 3530               	.LFB99:
 381:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void prepMouseMoveMsg(MouseMoveEvent* evt){
 3531               		.loc 3 381 0
 3532               		.cfi_startproc
 3533               	.LVL253:
 3534 0000 CF92      		push r12
 3535               	.LCFI92:
 3536               		.cfi_def_cfa_offset 4
 3537               		.cfi_offset 12, -3
 3538 0002 DF92      		push r13
 3539               	.LCFI93:
 3540               		.cfi_def_cfa_offset 5
 3541               		.cfi_offset 13, -4
 3542 0004 EF92      		push r14
 3543               	.LCFI94:
 3544               		.cfi_def_cfa_offset 6
 3545               		.cfi_offset 14, -5
 3546 0006 FF92      		push r15
 3547               	.LCFI95:
 3548               		.cfi_def_cfa_offset 7
 3549               		.cfi_offset 15, -6
 3550 0008 1F93      		push r17
 3551               	.LCFI96:
 3552               		.cfi_def_cfa_offset 8
 3553               		.cfi_offset 17, -7
 3554 000a CF93      		push r28
 3555               	.LCFI97:
 3556               		.cfi_def_cfa_offset 9
 3557               		.cfi_offset 28, -8
 3558 000c DF93      		push r29
 3559               	.LCFI98:
 3560               		.cfi_def_cfa_offset 10
 3561               		.cfi_offset 29, -9
 3562               	/* prologue: function */
 3563               	/* frame size = 0 */
 3564               	/* stack size = 7 */
 3565               	.L__stack_usage = 7
 3566 000e FC01      		movw r30,r24
 382:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(isWired){
 3567               		.loc 3 382 0
 3568 0010 8091 0000 		lds r24,isWired
 3569               	.LVL254:
 3570 0014 8823      		tst r24
 3571 0016 01F4      		brne .+2
 3572 0018 00C0      		rjmp .L235
 383:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		wireMouseMove(evt->deltaX, evt->deltaY);
 3573               		.loc 3 383 0
 3574 001a D581      		ldd r29,Z+5
 3575 001c C481      		ldd r28,Z+4
 3576               	.LVL255:
 3577               	.LBB728:
 3578               	.LBB729:
 3579               	.LBB730:
 3580               	.LBB731:
 3581               	.LBB732:
 3582               	.LBB733:
  12:../include/rgb_led.h **** inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
 3583               		.loc 2 12 0
 3584 001e 2091 7A0A 		lds r18,2682
 3585 0022 3091 7B0A 		lds r19,2682+1
 3586               	.LVL256:
 3587               	.LBE733:
 3588               	.LBE732:
 147:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 3589               		.loc 1 147 0
 3590 0026 283C      		cpi r18,lo8(-56)
 3591 0028 01F0      		breq .L236
 3592               	.LVL257:
 3593               	.LBB734:
 3594               	.LBB735:
  13:../include/rgb_led.h **** 
 3595               		.loc 2 13 0
 3596 002a 88EC      		ldi r24,lo8(-56)
 3597 002c 90E0      		ldi r25,0
 3598 002e 8093 7A0A 		sts 2682,r24
 3599 0032 9093 7B0A 		sts 2682+1,r25
 3600               	.LVL258:
 3601               	.LBE735:
 3602               	.LBE734:
 151:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 1: setGreenLED(val);  scheduleTask(100, (arg_func_t)restoreGreenLED, (void*)((uint16_t)curre
 3603               		.loc 1 151 0
 3604 0036 3327      		clr r19
 3605               	.LVL259:
 3606 0038 40E0      		ldi r20,lo8(gs(restoreRedLED))
 3607 003a 50E0      		ldi r21,hi8(gs(restoreRedLED))
 3608 003c 64E6      		ldi r22,lo8(100)
 3609 003e 70E0      		ldi r23,0
 3610 0040 80E0      		ldi r24,0
 3611 0042 90E0      		ldi r25,0
 3612 0044 0E94 0000 		call scheduleTask
 3613               	.LVL260:
 156:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	return 1;
 3614               		.loc 1 156 0
 3615 0048 81E0      		ldi r24,lo8(1)
 3616 004a 8093 0000 		sts isBlinking,r24
 3617               	.L236:
 3618               	.LVL261:
 3619               	.LBE731:
 3620               	.LBE730:
 3621               	.LBB736:
 3622               	.LBB737:
 3623               	.LBB738:
 3624               	.LBB739:
  16:../include/rgb_led.h **** inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
 3625               		.loc 2 16 0
 3626 004e 2091 780A 		lds r18,2680
 3627 0052 3091 790A 		lds r19,2680+1
 3628               	.LVL262:
 3629               	.LBE739:
 3630               	.LBE738:
 147:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 3631               		.loc 1 147 0
 3632 0056 283C      		cpi r18,lo8(-56)
 3633 0058 01F0      		breq .L237
 3634               	.LVL263:
 3635               	.LBB740:
 3636               	.LBB741:
  17:../include/rgb_led.h **** 	
 3637               		.loc 2 17 0
 3638 005a 88EC      		ldi r24,lo8(-56)
 3639 005c 90E0      		ldi r25,0
 3640 005e 8093 780A 		sts 2680,r24
 3641 0062 9093 790A 		sts 2680+1,r25
 3642               	.LVL264:
 3643               	.LBE741:
 3644               	.LBE740:
 152:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 2: setBlueLED(val);   scheduleTask(100, (arg_func_t)restoreBlueLED, (void*)((uint16_t)curren
 3645               		.loc 1 152 0
 3646 0066 3327      		clr r19
 3647               	.LVL265:
 3648 0068 40E0      		ldi r20,lo8(gs(restoreGreenLED))
 3649 006a 50E0      		ldi r21,hi8(gs(restoreGreenLED))
 3650 006c 64E6      		ldi r22,lo8(100)
 3651 006e 70E0      		ldi r23,0
 3652 0070 80E0      		ldi r24,0
 3653 0072 90E0      		ldi r25,0
 3654 0074 0E94 0000 		call scheduleTask
 3655               	.LVL266:
 156:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	return 1;
 3656               		.loc 1 156 0
 3657 0078 81E0      		ldi r24,lo8(1)
 3658 007a 8093 0000 		sts isBlinking,r24
 3659               	.L237:
 3660               	.LVL267:
 3661               	.LBE737:
 3662               	.LBE736:
 177:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 3663               		.loc 1 177 0
 3664 007e 8D2F      		mov r24,r29
 3665 0080 0D2E      		mov __tmp_reg__,r29
 3666 0082 000C      		lsl r0
 3667 0084 990B      		sbc r25,r25
 3668 0086 9F93      		push r25
 3669               	.LCFI99:
 3670               		.cfi_def_cfa_offset 11
 3671 0088 DF93      		push r29
 3672               	.LCFI100:
 3673               		.cfi_def_cfa_offset 12
 3674 008a 8C2F      		mov r24,r28
 3675 008c 0C2E      		mov __tmp_reg__,r28
 3676 008e 000C      		lsl r0
 3677 0090 990B      		sbc r25,r25
 3678 0092 9F93      		push r25
 3679               	.LCFI101:
 3680               		.cfi_def_cfa_offset 13
 3681 0094 CF93      		push r28
 3682               	.LCFI102:
 3683               		.cfi_def_cfa_offset 14
 3684 0096 80E0      		ldi r24,lo8(.LC1)
 3685 0098 90E0      		ldi r25,hi8(.LC1)
 3686 009a 9F93      		push r25
 3687               	.LCFI103:
 3688               		.cfi_def_cfa_offset 15
 3689 009c 8F93      		push r24
 3690               	.LCFI104:
 3691               		.cfi_def_cfa_offset 16
 3692 009e 0E94 0000 		call printf
 3693               	.LVL268:
 3694 00a2 0F90      		pop __tmp_reg__
 3695 00a4 0F90      		pop __tmp_reg__
 3696 00a6 0F90      		pop __tmp_reg__
 3697 00a8 0F90      		pop __tmp_reg__
 3698 00aa 0F90      		pop __tmp_reg__
 3699 00ac 0F90      		pop __tmp_reg__
 3700               	.LCFI105:
 3701               		.cfi_def_cfa_offset 10
 3702               	/* epilogue start */
 3703               	.LBE729:
 3704               	.LBE728:
 395:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 3705               		.loc 3 395 0
 3706 00ae DF91      		pop r29
 3707               	.LVL269:
 3708 00b0 CF91      		pop r28
 3709               	.LVL270:
 3710 00b2 1F91      		pop r17
 3711 00b4 FF90      		pop r15
 3712 00b6 EF90      		pop r14
 3713 00b8 DF90      		pop r13
 3714 00ba CF90      		pop r12
 3715 00bc 0895      		ret
 3716               	.LVL271:
 3717               	.L235:
 3718               	.LBB742:
 3719               	.LBB743:
 386:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		msg.time   = evt->time;
 3720               		.loc 3 386 0
 3721 00be C080      		ld r12,Z
 3722 00c0 D180      		ldd r13,Z+1
 3723 00c2 E280      		ldd r14,Z+2
 3724 00c4 F380      		ldd r15,Z+3
 3725               	.LVL272:
 387:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		msg.deltaX = evt->deltaX;
 3726               		.loc 3 387 0
 3727 00c6 D481      		ldd r29,Z+4
 3728               	.LVL273:
 388:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		msg.deltaY = evt->deltaY;
 3729               		.loc 3 388 0
 3730 00c8 C581      		ldd r28,Z+5
 3731               	.LVL274:
 3732               	.LBB744:
 3733               	.LBB745:
 3734               	.LBB746:
  51:../include/droplet_base.h **** 		tmp = malloc(size);
 3735               		.loc 7 51 0
 3736 00ca 1FB7      		in r17,__SREG__
 3737               	.LVL275:
 3738               	.LBB747:
 3739               	.LBB748:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3740               		.loc 6 50 0
 3741               	/* #APP */
 3742               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3743 00cc F894      		cli
 3744               	 ;  0 "" 2
 3745               	.LVL276:
 3746               	/* #NOAPP */
 3747               	.LBE748:
 3748               	.LBE747:
  52:../include/droplet_base.h **** 	}
 3749               		.loc 7 52 0
 3750 00ce 88E0      		ldi r24,lo8(8)
 3751 00d0 90E0      		ldi r25,0
 3752 00d2 0E94 0000 		call malloc
 3753               	.LVL277:
 3754 00d6 FC01      		movw r30,r24
 3755               	.LVL278:
 3756               	.LBB749:
 3757               	.LBB750:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3758               		.loc 6 70 0
 3759 00d8 1FBF      		out __SREG__,r17
 3760               		.loc 6 71 0
 3761               	.LVL279:
 3762               	.LBE750:
 3763               	.LBE749:
 3764               	.LBE746:
 3765               	.LBE745:
 3766               	.LBE744:
 391:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		msgNode->numTries = 0;
 3767               		.loc 3 391 0
 3768 00da 1782      		std Z+7,__zero_reg__
 392:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		msgNode->msg = msg;
 3769               		.loc 3 392 0
 3770 00dc C082      		st Z,r12
 3771 00de D182      		std Z+1,r13
 3772 00e0 E282      		std Z+2,r14
 3773 00e2 F382      		std Z+3,r15
 3774 00e4 D483      		std Z+4,r29
 3775 00e6 C583      		std Z+5,r28
 3776 00e8 8DE4      		ldi r24,lo8(77)
 3777 00ea 8683      		std Z+6,r24
 393:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		sendMouseMoveMsg(msgNode);
 3778               		.loc 3 393 0
 3779 00ec CF01      		movw r24,r30
 3780               	/* epilogue start */
 3781               	.LBE743:
 3782               	.LBE742:
 395:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 3783               		.loc 3 395 0
 3784 00ee DF91      		pop r29
 3785               	.LVL280:
 3786 00f0 CF91      		pop r28
 3787               	.LVL281:
 3788 00f2 1F91      		pop r17
 3789 00f4 FF90      		pop r15
 3790 00f6 EF90      		pop r14
 3791 00f8 DF90      		pop r13
 3792 00fa CF90      		pop r12
 3793               	.LVL282:
 3794               	.LBB752:
 3795               	.LBB751:
 393:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		sendMouseMoveMsg(msgNode);
 3796               		.loc 3 393 0
 3797 00fc 0C94 0000 		jmp sendMouseMoveMsg
 3798               	.LVL283:
 3799               	.LBE751:
 3800               	.LBE752:
 3801               		.cfi_endproc
 3802               	.LFE99:
 3804               		.section	.text.sendButtonPressMsg,"ax",@progbits
 3805               	.global	sendButtonPressMsg
 3807               	sendButtonPressMsg:
 3808               	.LFB102:
 423:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void sendButtonPressMsg(ButtonPressMsgNode* msgNode){
 3809               		.loc 3 423 0
 3810               		.cfi_startproc
 3811               	.LVL284:
 3812 0000 0F93      		push r16
 3813               	.LCFI106:
 3814               		.cfi_def_cfa_offset 4
 3815               		.cfi_offset 16, -3
 3816 0002 1F93      		push r17
 3817               	.LCFI107:
 3818               		.cfi_def_cfa_offset 5
 3819               		.cfi_offset 17, -4
 3820 0004 CF93      		push r28
 3821               	.LCFI108:
 3822               		.cfi_def_cfa_offset 6
 3823               		.cfi_offset 28, -5
 3824 0006 DF93      		push r29
 3825               	.LCFI109:
 3826               		.cfi_def_cfa_offset 7
 3827               		.cfi_offset 29, -6
 3828               	/* prologue: function */
 3829               	/* frame size = 0 */
 3830               	/* stack size = 4 */
 3831               	.L__stack_usage = 4
 3832 0008 EC01      		movw r28,r24
 424:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(irIsBusy(ALL_DIRS)){
 3833               		.loc 3 424 0
 3834 000a 8FE3      		ldi r24,lo8(63)
 3835               	.LVL285:
 3836 000c 0E94 0000 		call irIsBusy
 3837               	.LVL286:
 3838 0010 8823      		tst r24
 3839 0012 01F0      		breq .L241
 3840               	.LBB783:
 425:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3841               		.loc 3 425 0
 3842 0014 0FB7      		in r16,__SREG__
 3843               	.LVL287:
 3844               	.LBB784:
 3845               	.LBB785:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3846               		.loc 6 50 0
 3847               	/* #APP */
 3848               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3849 0016 F894      		cli
 3850               	 ;  0 "" 2
 3851               	.LVL288:
 3852               	/* #NOAPP */
 3853               	.LBE785:
 3854               	.LBE784:
 426:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(msgNode->numTries>6){
 3855               		.loc 3 426 0
 3856 0018 8885      		ldd r24,Y+8
 3857 001a 8730      		cpi r24,lo8(7)
 3858 001c 00F4      		brsh .L245
 429:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				scheduleTask(getExponentialBackoff(msgNode->numTries), (arg_func_t)sendButtonPressMsg, (void*)m
 3859               		.loc 3 429 0
 3860 001e 0E94 0000 		call getExponentialBackoff
 3861               	.LVL289:
 3862 0022 9E01      		movw r18,r28
 3863 0024 40E0      		ldi r20,lo8(gs(sendButtonPressMsg))
 3864 0026 50E0      		ldi r21,hi8(gs(sendButtonPressMsg))
 3865 0028 0E94 0000 		call scheduleTask
 3866               	.LVL290:
 3867               	.L243:
 431:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			msgNode->numTries++;
 3868               		.loc 3 431 0 discriminator 2
 3869 002c 8885      		ldd r24,Y+8
 3870 002e 8F5F      		subi r24,lo8(-(1))
 3871 0030 8887      		std Y+8,r24
 3872               	.LVL291:
 3873               	.LBB786:
 3874               	.LBB787:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3875               		.loc 6 70 0 discriminator 2
 3876 0032 0FBF      		out __SREG__,r16
 3877               		.loc 6 71 0 discriminator 2
 3878               	.LVL292:
 3879               	/* epilogue start */
 3880               	.LBE787:
 3881               	.LBE786:
 3882               	.LBE783:
 443:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 3883               		.loc 3 443 0 discriminator 2
 3884 0034 DF91      		pop r29
 3885 0036 CF91      		pop r28
 3886               	.LVL293:
 3887 0038 1F91      		pop r17
 3888 003a 0F91      		pop r16
 3889 003c 0895      		ret
 3890               	.LVL294:
 3891               	.L245:
 3892               	.LBB794:
 3893               	.LBB788:
 3894               	.LBB789:
  58:../include/droplet_base.h **** 		free(ptr);
 3895               		.loc 7 58 0
 3896 003e 1FB7      		in r17,__SREG__
 3897               	.LVL295:
 3898               	.LBB790:
 3899               	.LBB791:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3900               		.loc 6 50 0
 3901               	/* #APP */
 3902               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3903 0040 F894      		cli
 3904               	 ;  0 "" 2
 3905               	.LVL296:
 3906               	/* #NOAPP */
 3907               	.LBE791:
 3908               	.LBE790:
 3909               		.loc 7 59 0
 3910 0042 CE01      		movw r24,r28
 3911 0044 0E94 0000 		call free
 3912               	.LVL297:
 3913               	.LBB792:
 3914               	.LBB793:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3915               		.loc 6 70 0
 3916 0048 1FBF      		out __SREG__,r17
 3917               		.loc 6 71 0
 3918               	.LVL298:
 3919 004a 00C0      		rjmp .L243
 3920               	.LVL299:
 3921               	.L241:
 3922               	.LBE793:
 3923               	.LBE792:
 3924               	.LBE789:
 3925               	.LBE788:
 3926               	.LBE794:
 3927               	.LBB795:
 3928               	.LBB796:
 434:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		irSend(ALL_DIRS, (char*)(&(msgNode->msg)), sizeof(ButtonPressMsg));
 3929               		.loc 3 434 0
 3930 004c 48E0      		ldi r20,lo8(8)
 3931 004e BE01      		movw r22,r28
 3932 0050 8FE3      		ldi r24,lo8(63)
 3933 0052 0E94 0000 		call irSend
 3934               	.LVL300:
 3935               	.LBB797:
 3936               	.LBB798:
  58:../include/droplet_base.h **** 		free(ptr);
 3937               		.loc 7 58 0
 3938 0056 1FB7      		in r17,__SREG__
 3939               	.LVL301:
 3940               	.LBB799:
 3941               	.LBB800:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 3942               		.loc 6 50 0
 3943               	/* #APP */
 3944               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 3945 0058 F894      		cli
 3946               	 ;  0 "" 2
 3947               	.LVL302:
 3948               	/* #NOAPP */
 3949               	.LBE800:
 3950               	.LBE799:
 3951               		.loc 7 59 0
 3952 005a CE01      		movw r24,r28
 3953 005c 0E94 0000 		call free
 3954               	.LVL303:
 3955               	.LBB801:
 3956               	.LBB802:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 3957               		.loc 6 70 0
 3958 0060 1FBF      		out __SREG__,r17
 3959               		.loc 6 71 0
 3960               	.LVL304:
 3961               	/* epilogue start */
 3962               	.LBE802:
 3963               	.LBE801:
 3964               	.LBE798:
 3965               	.LBE797:
 3966               	.LBE796:
 3967               	.LBE795:
 443:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 3968               		.loc 3 443 0
 3969 0062 DF91      		pop r29
 3970 0064 CF91      		pop r28
 3971               	.LVL305:
 3972 0066 1F91      		pop r17
 3973 0068 0F91      		pop r16
 3974 006a 0895      		ret
 3975               		.cfi_endproc
 3976               	.LFE102:
 3978               		.section	.text.prepButtonPressMsg,"ax",@progbits
 3979               	.global	prepButtonPressMsg
 3981               	prepButtonPressMsg:
 3982               	.LFB101:
 413:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void prepButtonPressMsg(ButtonPressEvent* evt){
 3983               		.loc 3 413 0
 3984               		.cfi_startproc
 3985               	.LVL306:
 3986 0000 1F93      		push r17
 3987               	.LCFI110:
 3988               		.cfi_def_cfa_offset 4
 3989               		.cfi_offset 17, -3
 3990 0002 CF93      		push r28
 3991               	.LCFI111:
 3992               		.cfi_def_cfa_offset 5
 3993               		.cfi_offset 28, -4
 3994 0004 DF93      		push r29
 3995               	.LCFI112:
 3996               		.cfi_def_cfa_offset 6
 3997               		.cfi_offset 29, -5
 3998 0006 CDB7      		in r28,__SP_L__
 3999 0008 DEB7      		in r29,__SP_H__
 4000               	.LCFI113:
 4001               		.cfi_def_cfa_register 28
 4002 000a 2897      		sbiw r28,8
 4003               	.LCFI114:
 4004               		.cfi_def_cfa_offset 14
 4005 000c CDBF      		out __SP_L__,r28
 4006 000e DEBF      		out __SP_H__,r29
 4007               	/* prologue: function */
 4008               	/* frame size = 8 */
 4009               	/* stack size = 11 */
 4010               	.L__stack_usage = 11
 4011 0010 FC01      		movw r30,r24
 415:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	msg.evt = *evt;
 4012               		.loc 3 415 0
 4013 0012 97E0      		ldi r25,lo8(7)
 4014 0014 DE01      		movw r26,r28
 4015 0016 1196      		adiw r26,1
 4016               		0:
 4017 0018 0190      		ld r0,Z+
 4018 001a 0D92      		st X+,r0
 4019 001c 9A95      		dec r25
 4020 001e 01F4      		brne 0b
 4021               	.LVL307:
 4022               	.LBB803:
 4023               	.LBB804:
 4024               	.LBB805:
  51:../include/droplet_base.h **** 		tmp = malloc(size);
 4025               		.loc 7 51 0
 4026 0020 1FB7      		in r17,__SREG__
 4027               	.LVL308:
 4028               	.LBB806:
 4029               	.LBB807:
  50:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 4030               		.loc 6 50 0
 4031               	/* #APP */
 4032               	 ;  50 "c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\
 4033 0022 F894      		cli
 4034               	 ;  0 "" 2
 4035               	.LVL309:
 4036               	/* #NOAPP */
 4037               	.LBE807:
 4038               	.LBE806:
  52:../include/droplet_base.h **** 	}
 4039               		.loc 7 52 0
 4040 0024 89E0      		ldi r24,lo8(9)
 4041 0026 90E0      		ldi r25,0
 4042               	.LVL310:
 4043 0028 0E94 0000 		call malloc
 4044               	.LVL311:
 4045               	.LBB808:
 4046               	.LBB809:
  70:c:\program files (x86)\atmel\studio\7.0\toolchain\avr8\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 4047               		.loc 6 70 0
 4048 002c 1FBF      		out __SREG__,r17
 4049               		.loc 6 71 0
 4050               	.LVL312:
 4051               	.LBE809:
 4052               	.LBE808:
 4053               	.LBE805:
 4054               	.LBE804:
 4055               	.LBE803:
 418:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	msgNode->numTries = 0;
 4056               		.loc 3 418 0
 4057 002e FC01      		movw r30,r24
 4058 0030 1086      		std Z+8,__zero_reg__
 419:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	msgNode->msg = msg;
 4059               		.loc 3 419 0
 4060 0032 2BE4      		ldi r18,lo8(75)
 4061 0034 2887      		std Y+8,r18
 4062 0036 28E0      		ldi r18,lo8(8)
 4063 0038 FE01      		movw r30,r28
 4064 003a 3196      		adiw r30,1
 4065 003c DC01      		movw r26,r24
 4066               		0:
 4067 003e 0190      		ld r0,Z+
 4068 0040 0D92      		st X+,r0
 4069 0042 2A95      		dec r18
 4070 0044 01F4      		brne 0b
 4071               	/* epilogue start */
 421:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 4072               		.loc 3 421 0
 4073 0046 2896      		adiw r28,8
 4074 0048 CDBF      		out __SP_L__,r28
 4075 004a DEBF      		out __SP_H__,r29
 4076 004c DF91      		pop r29
 4077 004e CF91      		pop r28
 4078 0050 1F91      		pop r17
 420:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	sendButtonPressMsg(msgNode);
 4079               		.loc 3 420 0
 4080 0052 0C94 0000 		jmp sendButtonPressMsg
 4081               	.LVL313:
 4082               		.cfi_endproc
 4083               	.LFE101:
 4085               		.section	.rodata.str1.1
 4086               	.LC17:
 4087 00cf 256C 750D 		.string	"%lu\r\n"
 4087      0A00 
 4088               	.LC18:
 4089 00d5 094D 7920 		.string	"\tMy Pos: {%d, %d, %d}\r\n"
 4089      506F 733A 
 4089      207B 2564 
 4089      2C20 2564 
 4089      2C20 2564 
 4090               	.LC19:
 4091 00ed 2825 2035 		.string	"(% 5d, % 5d) -> (% 5d, % 5d)\r\n"
 4091      642C 2025 
 4091      2035 6429 
 4091      202D 3E20 
 4091      2825 2035 
 4092               	.LC20:
 4093 010c 4275 7474 		.string	"ButtonPress "
 4093      6F6E 5072 
 4093      6573 7320 
 4093      00
 4094               	.LC21:
 4095 0119 4B65 7962 		.string	"KeyboardShift "
 4095      6F61 7264 
 4095      5368 6966 
 4095      7420 00
 4096               	.LC22:
 4097 0128 4F66 660D 		.string	"Off\r"
 4097      00
 4098               	.LC23:
 4099 012d 4F6E 0D00 		.string	"On\r"
 4100               		.section	.text.loop,"ax",@progbits
 4101               	.global	loop
 4103               	loop:
 4104               	.LFB87:
 155:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** void loop(){
 4105               		.loc 3 155 0
 4106               		.cfi_startproc
 4107 0000 CF92      		push r12
 4108               	.LCFI115:
 4109               		.cfi_def_cfa_offset 4
 4110               		.cfi_offset 12, -3
 4111 0002 DF92      		push r13
 4112               	.LCFI116:
 4113               		.cfi_def_cfa_offset 5
 4114               		.cfi_offset 13, -4
 4115 0004 EF92      		push r14
 4116               	.LCFI117:
 4117               		.cfi_def_cfa_offset 6
 4118               		.cfi_offset 14, -5
 4119 0006 FF92      		push r15
 4120               	.LCFI118:
 4121               		.cfi_def_cfa_offset 7
 4122               		.cfi_offset 15, -6
 4123 0008 0F93      		push r16
 4124               	.LCFI119:
 4125               		.cfi_def_cfa_offset 8
 4126               		.cfi_offset 16, -7
 4127 000a 1F93      		push r17
 4128               	.LCFI120:
 4129               		.cfi_def_cfa_offset 9
 4130               		.cfi_offset 17, -8
 4131 000c CF93      		push r28
 4132               	.LCFI121:
 4133               		.cfi_def_cfa_offset 10
 4134               		.cfi_offset 28, -9
 4135 000e DF93      		push r29
 4136               	.LCFI122:
 4137               		.cfi_def_cfa_offset 11
 4138               		.cfi_offset 29, -10
 4139 0010 CDB7      		in r28,__SP_L__
 4140 0012 DEB7      		in r29,__SP_H__
 4141               	.LCFI123:
 4142               		.cfi_def_cfa_register 28
 4143 0014 2997      		sbiw r28,9
 4144               	.LCFI124:
 4145               		.cfi_def_cfa_offset 20
 4146 0016 CDBF      		out __SP_L__,r28
 4147 0018 DEBF      		out __SP_H__,r29
 4148               	/* prologue: function */
 4149               	/* frame size = 9 */
 4150               	/* stack size = 17 */
 4151               	.L__stack_usage = 17
 156:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	switch(myRole){
 4152               		.loc 3 156 0
 4153 001a 8091 0000 		lds r24,myRole
 4154 001e 8130      		cpi r24,lo8(1)
 4155 0020 01F4      		brne .+2
 4156 0022 00C0      		rjmp .L249
 4157 0024 00F4      		brsh .+2
 4158 0026 00C0      		rjmp .L250
 4159 0028 8230      		cpi r24,lo8(2)
 4160 002a 01F0      		breq .+2
 4161 002c 00C0      		rjmp .L248
 4162               	.LBB866:
 4163               	.LBB867:
  76:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	uint32_t frameTime = getTime()-frameStart;
 4164               		.loc 3 76 0
 4165 002e 0E94 0000 		call getTime
 4166               	.LVL314:
 4167 0032 0091 0000 		lds r16,frameStart
 4168 0036 1091 0000 		lds r17,frameStart+1
 4169 003a 2091 0000 		lds r18,frameStart+2
 4170 003e 3091 0000 		lds r19,frameStart+3
 4171 0042 601B      		sub r22,r16
 4172 0044 710B      		sbc r23,r17
 4173 0046 820B      		sbc r24,r18
 4174 0048 930B      		sbc r25,r19
 4175               	.LVL315:
  77:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(frameTime>MK_FRAME_LENGTH){
 4176               		.loc 3 77 0
 4177 004a 693B      		cpi r22,-71
 4178 004c 4BE0      		ldi r20,11
 4179 004e 7407      		cpc r23,r20
 4180 0050 8105      		cpc r24,__zero_reg__
 4181 0052 9105      		cpc r25,__zero_reg__
 4182 0054 00F0      		brlo .+2
 4183 0056 00C0      		rjmp .L315
 4184               	.L260:
  81:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(loopID!=(frameTime/MK_SLOT_LENGTH)){
 4185               		.loc 3 81 0
 4186 0058 2CE2      		ldi r18,lo8(44)
 4187 005a 31E0      		ldi r19,lo8(1)
 4188 005c 40E0      		ldi r20,0
 4189 005e 50E0      		ldi r21,0
 4190 0060 0E94 0000 		call __udivmodsi4
 4191               	.LVL316:
 4192 0064 8091 0000 		lds r24,loopID
 4193 0068 9091 0000 		lds r25,loopID+1
 4194 006c A0E0      		ldi r26,0
 4195 006e B0E0      		ldi r27,0
 4196 0070 8217      		cp r24,r18
 4197 0072 9307      		cpc r25,r19
 4198 0074 A407      		cpc r26,r20
 4199 0076 B507      		cpc r27,r21
 4200 0078 01F4      		brne .+2
 4201 007a 00C0      		rjmp .L248
  82:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		loopID = frameTime/MK_SLOT_LENGTH;
 4202               		.loc 3 82 0
 4203 007c C901      		movw r24,r18
 4204 007e 2093 0000 		sts loopID,r18
 4205 0082 3093 0000 		sts loopID+1,r19
  83:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(loopID==0 && periodicMouseBroadcast){
 4206               		.loc 3 83 0
 4207 0086 892B      		or r24,r25
 4208 0088 01F4      		brne .+2
 4209 008a 00C0      		rjmp .L316
  86:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else if(loopID==MK_SLOTS_PER_FRAME-2){
 4210               		.loc 3 86 0
 4211 008c 2830      		cpi r18,8
 4212 008e 3105      		cpc r19,__zero_reg__
 4213 0090 01F0      		breq .+2
 4214 0092 00C0      		rjmp .L262
  87:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(POS_DEFINED(&newPos)){
 4215               		.loc 3 87 0
 4216 0094 8091 0000 		lds r24,newPos
 4217 0098 9091 0000 		lds r25,newPos+1
 4218 009c 8115      		cp r24,__zero_reg__
 4219 009e 60E8      		ldi r22,-128
 4220 00a0 9607      		cpc r25,r22
 4221 00a2 01F4      		brne .+2
 4222 00a4 00C0      		rjmp .L264
 4223 00a6 2091 0000 		lds r18,newPos+2
 4224 00aa 3091 0000 		lds r19,newPos+2+1
 4225 00ae 2115      		cp r18,__zero_reg__
 4226 00b0 40E8      		ldi r20,-128
 4227 00b2 3407      		cpc r19,r20
 4228 00b4 01F4      		brne .+2
 4229 00b6 00C0      		rjmp .L264
 4230 00b8 4091 0000 		lds r20,newPos+4
 4231 00bc 5091 0000 		lds r21,newPos+4+1
 4232 00c0 4115      		cp r20,__zero_reg__
 4233 00c2 5048      		sbci r21,-128
 4234 00c4 01F4      		brne .+2
 4235 00c6 00C0      		rjmp .L264
 4236               	.LBB868:
  89:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.deltaX = newPos.x - myPos.x;
 4237               		.loc 3 89 0
 4238 00c8 9091 0000 		lds r25,myPos
 4239 00cc 891B      		sub r24,r25
 4240 00ce 8D83      		std Y+5,r24
  90:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.deltaY = newPos.y - myPos.y;
 4241               		.loc 3 90 0
 4242 00d0 8091 0000 		lds r24,myPos+2
 4243 00d4 281B      		sub r18,r24
 4244 00d6 2E83      		std Y+6,r18
  91:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.mouseEventMarker = MOUSE_EVENT_MARKER_FLAG;
 4245               		.loc 3 91 0
 4246 00d8 8FEF      		ldi r24,lo8(-1)
 4247 00da 8F83      		std Y+7,r24
  92:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				evt.time = getTime();
 4248               		.loc 3 92 0
 4249 00dc 0E94 0000 		call getTime
 4250               	.LVL317:
 4251 00e0 6983      		std Y+1,r22
 4252 00e2 7A83      		std Y+2,r23
 4253 00e4 8B83      		std Y+3,r24
 4254 00e6 9C83      		std Y+4,r25
  93:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				printf("(% 5d, % 5d) -> (% 5d, % 5d)\r\n", myPos.x, myPos.y, newPos.x, newPos.y);								
 4255               		.loc 3 93 0
 4256 00e8 8091 0000 		lds r24,newPos+3
 4257 00ec 8F93      		push r24
 4258 00ee 8091 0000 		lds r24,newPos+2
 4259 00f2 8F93      		push r24
 4260 00f4 8091 0000 		lds r24,newPos+1
 4261 00f8 8F93      		push r24
 4262 00fa 8091 0000 		lds r24,newPos
 4263 00fe 8F93      		push r24
 4264 0100 8091 0000 		lds r24,myPos+3
 4265 0104 8F93      		push r24
 4266 0106 8091 0000 		lds r24,myPos+2
 4267 010a 8F93      		push r24
 4268 010c 8091 0000 		lds r24,myPos+1
 4269 0110 8F93      		push r24
 4270 0112 8091 0000 		lds r24,myPos
 4271 0116 8F93      		push r24
 4272 0118 80E0      		ldi r24,lo8(.LC19)
 4273 011a 90E0      		ldi r25,hi8(.LC19)
 4274 011c 9F93      		push r25
 4275 011e 8F93      		push r24
 4276 0120 0E94 0000 		call printf
 4277               	.LVL318:
  94:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				prepMouseMoveMsg(&evt);
 4278               		.loc 3 94 0
 4279 0124 CE01      		movw r24,r28
 4280 0126 0196      		adiw r24,1
 4281 0128 0E94 0000 		call prepMouseMoveMsg
 4282               	.LVL319:
  95:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				myPos = newPos;
 4283               		.loc 3 95 0
 4284 012c 86E0      		ldi r24,lo8(6)
 4285 012e E0E0      		ldi r30,lo8(newPos)
 4286 0130 F0E0      		ldi r31,hi8(newPos)
 4287 0132 A0E0      		ldi r26,lo8(myPos)
 4288 0134 B0E0      		ldi r27,hi8(myPos)
 4289               		0:
 4290 0136 0190      		ld r0,Z+
 4291 0138 0D92      		st X+,r0
 4292 013a 8A95      		dec r24
 4293 013c 01F4      		brne 0b
  96:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				newPos.x = UNDF;
 4294               		.loc 3 96 0
 4295 013e 80E0      		ldi r24,0
 4296 0140 90E8      		ldi r25,lo8(-128)
 4297 0142 8093 0000 		sts newPos,r24
 4298 0146 9093 0000 		sts newPos+1,r25
  97:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				newPos.y = UNDF;
 4299               		.loc 3 97 0
 4300 014a 8093 0000 		sts newPos+2,r24
 4301 014e 9093 0000 		sts newPos+2+1,r25
  98:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				newPos.o = UNDF;
 4302               		.loc 3 98 0
 4303 0152 8093 0000 		sts newPos+4,r24
 4304 0156 9093 0000 		sts newPos+4+1,r25
 4305 015a CDBF      		out __SP_L__,r28
 4306 015c DEBF      		out __SP_H__,r29
 4307 015e 00C0      		rjmp .L264
 4308               	.L250:
 4309               	.LBE868:
 4310               	.LBE867:
 4311               	.LBE866:
 4312               	.LBB890:
 4313               	.LBB891:
  48:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	uint32_t frameTime = getTime()-frameStart;
 4314               		.loc 3 48 0
 4315 0160 0E94 0000 		call getTime
 4316               	.LVL320:
 4317 0164 0091 0000 		lds r16,frameStart
 4318 0168 1091 0000 		lds r17,frameStart+1
 4319 016c 2091 0000 		lds r18,frameStart+2
 4320 0170 3091 0000 		lds r19,frameStart+3
 4321 0174 601B      		sub r22,r16
 4322 0176 710B      		sbc r23,r17
 4323 0178 820B      		sbc r24,r18
 4324 017a 930B      		sbc r25,r19
 4325               	.LVL321:
  49:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(frameTime>FRAME_LENGTH_MS){
 4326               		.loc 3 49 0
 4327 017c 6F3E      		cpi r22,-17
 4328 017e 4AE3      		ldi r20,58
 4329 0180 7407      		cpc r23,r20
 4330 0182 8105      		cpc r24,__zero_reg__
 4331 0184 9105      		cpc r25,__zero_reg__
 4332 0186 00F0      		brlo .L252
  50:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameTime = frameTime - FRAME_LENGTH_MS;
 4333               		.loc 3 50 0
 4334 0188 6E5E      		subi r22,-18
 4335 018a 7A43      		sbci r23,58
 4336 018c 8109      		sbc r24,__zero_reg__
 4337 018e 9109      		sbc r25,__zero_reg__
 4338               	.LVL322:
  51:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameStart += FRAME_LENGTH_MS;
 4339               		.loc 3 51 0
 4340 0190 0251      		subi r16,18
 4341 0192 154C      		sbci r17,-59
 4342 0194 2F4F      		sbci r18,-1
 4343 0196 3F4F      		sbci r19,-1
 4344 0198 0093 0000 		sts frameStart,r16
 4345 019c 1093 0000 		sts frameStart+1,r17
 4346 01a0 2093 0000 		sts frameStart+2,r18
 4347 01a4 3093 0000 		sts frameStart+3,r19
 4348               	.L252:
  53:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(loopID!=(frameTime/SLOT_LENGTH_MS)){ //This is a new slot.
 4349               		.loc 3 53 0
 4350 01a8 2DE8      		ldi r18,lo8(-115)
 4351 01aa 31E0      		ldi r19,lo8(1)
 4352 01ac 40E0      		ldi r20,0
 4353 01ae 50E0      		ldi r21,0
 4354 01b0 0E94 0000 		call __udivmodsi4
 4355               	.LVL323:
 4356 01b4 8091 0000 		lds r24,loopID
 4357 01b8 9091 0000 		lds r25,loopID+1
 4358 01bc A0E0      		ldi r26,0
 4359 01be B0E0      		ldi r27,0
 4360 01c0 8217      		cp r24,r18
 4361 01c2 9307      		cpc r25,r19
 4362 01c4 A407      		cpc r26,r20
 4363 01c6 B507      		cpc r27,r21
 4364 01c8 01F0      		breq .L248
  54:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		loopID = frameTime/SLOT_LENGTH_MS;
 4365               		.loc 3 54 0
 4366 01ca C901      		movw r24,r18
 4367 01cc 2093 0000 		sts loopID,r18
 4368 01d0 3093 0000 		sts loopID+1,r19
  55:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(loopID==mySlot){ //This is my slot.
 4369               		.loc 3 55 0
 4370 01d4 2091 0000 		lds r18,mySlot
 4371 01d8 3091 0000 		lds r19,mySlot+1
 4372 01dc 8217      		cp r24,r18
 4373 01de 9307      		cpc r25,r19
 4374 01e0 01F4      		brne .+2
 4375 01e2 00C0      		rjmp .L317
  58:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		}else if(loopID==SLOTS_PER_FRAME-1){
 4376               		.loc 3 58 0
 4377 01e4 8597      		sbiw r24,37
 4378 01e6 01F4      		brne .+2
 4379 01e8 00C0      		rjmp .L318
 4380               	.L256:
  67:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(!isBlinking){
 4381               		.loc 3 67 0
 4382 01ea 8091 0000 		lds r24,isBlinking
 4383 01ee 8111      		cpse r24,__zero_reg__
 4384 01f0 00C0      		rjmp .L248
 4385               	.LBB892:
  68:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			uint8_t newR = 0, newG = 0, newB = 0;
 4386               		.loc 3 68 0
 4387 01f2 1986      		std Y+9,__zero_reg__
 4388 01f4 1886      		std Y+8,__zero_reg__
 4389 01f6 1982      		std Y+1,__zero_reg__
  69:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			getPosColor(&newR, &newG, &newB);
 4390               		.loc 3 69 0
 4391 01f8 AE01      		movw r20,r28
 4392 01fa 4F5F      		subi r20,-1
 4393 01fc 5F4F      		sbci r21,-1
 4394 01fe BE01      		movw r22,r28
 4395 0200 685F      		subi r22,-8
 4396 0202 7F4F      		sbci r23,-1
 4397 0204 CE01      		movw r24,r28
 4398 0206 0996      		adiw r24,9
 4399 0208 0E94 0000 		call getPosColor
 4400               	.LVL324:
  70:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			setRGB(newR, newG, newB);
 4401               		.loc 3 70 0
 4402 020c 4981      		ldd r20,Y+1
 4403 020e 6885      		ldd r22,Y+8
 4404 0210 8985      		ldd r24,Y+9
 4405 0212 0E94 0000 		call setRGB
 4406               	.LVL325:
 4407               	.L248:
 4408               	.LBE892:
 4409               	.LBE891:
 4410               	.LBE890:
 161:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	delayMS(LOOP_DELAY_MS);
 4411               		.loc 3 161 0
 4412 0216 8BE0      		ldi r24,lo8(11)
 4413 0218 90E0      		ldi r25,0
 4414 021a 0E94 0000 		call delayMS
 4415               	.LVL326:
 4416               	/* epilogue start */
 162:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** }
 4417               		.loc 3 162 0
 4418 021e 2996      		adiw r28,9
 4419 0220 CDBF      		out __SP_L__,r28
 4420 0222 DEBF      		out __SP_H__,r29
 4421 0224 DF91      		pop r29
 4422 0226 CF91      		pop r28
 4423 0228 1F91      		pop r17
 4424 022a 0F91      		pop r16
 4425 022c FF90      		pop r15
 4426 022e EF90      		pop r14
 4427 0230 DF90      		pop r13
 4428 0232 CF90      		pop r12
 4429 0234 0895      		ret
 4430               	.L249:
 4431               	.LBB901:
 4432               	.LBB902:
 121:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	uint32_t frameTime = getTime()-frameStart;
 4433               		.loc 3 121 0
 4434 0236 0E94 0000 		call getTime
 4435               	.LVL327:
 4436 023a 0091 0000 		lds r16,frameStart
 4437 023e 1091 0000 		lds r17,frameStart+1
 4438 0242 2091 0000 		lds r18,frameStart+2
 4439 0246 3091 0000 		lds r19,frameStart+3
 4440 024a 601B      		sub r22,r16
 4441 024c 710B      		sbc r23,r17
 4442 024e 820B      		sbc r24,r18
 4443 0250 930B      		sbc r25,r19
 4444               	.LVL328:
 122:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(frameTime>MK_FRAME_LENGTH){
 4445               		.loc 3 122 0
 4446 0252 693B      		cpi r22,-71
 4447 0254 4BE0      		ldi r20,11
 4448 0256 7407      		cpc r23,r20
 4449 0258 8105      		cpc r24,__zero_reg__
 4450 025a 9105      		cpc r25,__zero_reg__
 4451 025c 00F0      		brlo .L269
 123:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameTime = frameTime-MK_FRAME_LENGTH;
 4452               		.loc 3 123 0
 4453 025e 685B      		subi r22,-72
 4454 0260 7B40      		sbci r23,11
 4455 0262 8109      		sbc r24,__zero_reg__
 4456 0264 9109      		sbc r25,__zero_reg__
 4457               	.LVL329:
 124:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameStart += MK_FRAME_LENGTH;
 4458               		.loc 3 124 0
 4459 0266 0854      		subi r16,72
 4460 0268 144F      		sbci r17,-12
 4461 026a 2F4F      		sbci r18,-1
 4462 026c 3F4F      		sbci r19,-1
 4463 026e 0093 0000 		sts frameStart,r16
 4464 0272 1093 0000 		sts frameStart+1,r17
 4465 0276 2093 0000 		sts frameStart+2,r18
 4466 027a 3093 0000 		sts frameStart+3,r19
 4467               	.L269:
 126:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 	if(loopID!=(frameTime/MK_SLOT_LENGTH)){
 4468               		.loc 3 126 0
 4469 027e 2CE2      		ldi r18,lo8(44)
 4470 0280 31E0      		ldi r19,lo8(1)
 4471 0282 40E0      		ldi r20,0
 4472 0284 50E0      		ldi r21,0
 4473 0286 0E94 0000 		call __udivmodsi4
 4474               	.LVL330:
 4475 028a 8091 0000 		lds r24,loopID
 4476 028e 9091 0000 		lds r25,loopID+1
 4477 0292 A0E0      		ldi r26,0
 4478 0294 B0E0      		ldi r27,0
 4479 0296 8217      		cp r24,r18
 4480 0298 9307      		cpc r25,r19
 4481 029a A407      		cpc r26,r20
 4482 029c B507      		cpc r27,r21
 4483 029e 01F4      		brne .+2
 4484 02a0 00C0      		rjmp .L248
 4485               	.LBB903:
 127:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		loopID = frameTime/MK_SLOT_LENGTH;
 4486               		.loc 3 127 0
 4487 02a2 2093 0000 		sts loopID,r18
 4488 02a6 3093 0000 		sts loopID+1,r19
 129:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		checkForEvent(frameStart+MK_SLOT_LENGTH*(loopID-1), frameStart+MK_SLOT_LENGTH*loopID, &thisEvt);
 4489               		.loc 3 129 0
 4490 02aa 8CE2      		ldi r24,lo8(44)
 4491 02ac 91E0      		ldi r25,lo8(1)
 4492 02ae 829F      		mul r24,r18
 4493 02b0 F001      		movw r30,r0
 4494 02b2 839F      		mul r24,r19
 4495 02b4 F00D      		add r31,r0
 4496 02b6 929F      		mul r25,r18
 4497 02b8 F00D      		add r31,r0
 4498 02ba 1124      		clr r1
 4499 02bc 8091 0000 		lds r24,frameStart
 4500 02c0 9091 0000 		lds r25,frameStart+1
 4501 02c4 A091 0000 		lds r26,frameStart+2
 4502 02c8 B091 0000 		lds r27,frameStart+3
 4503 02cc 9C01      		movw r18,r24
 4504 02ce AD01      		movw r20,r26
 4505 02d0 2E0F      		add r18,r30
 4506 02d2 3F1F      		adc r19,r31
 4507 02d4 411D      		adc r20,__zero_reg__
 4508 02d6 511D      		adc r21,__zero_reg__
 4509 02d8 EC52      		subi r30,44
 4510 02da F140      		sbci r31,1
 4511 02dc BC01      		movw r22,r24
 4512 02de CD01      		movw r24,r26
 4513 02e0 6E0F      		add r22,r30
 4514 02e2 7F1F      		adc r23,r31
 4515 02e4 811D      		adc r24,__zero_reg__
 4516 02e6 911D      		adc r25,__zero_reg__
 4517 02e8 8E01      		movw r16,r28
 4518 02ea 0F5F      		subi r16,-1
 4519 02ec 1F4F      		sbci r17,-1
 4520 02ee 0E94 0000 		call checkForEvent
 4521               	.LVL331:
 130:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(thisEvt.button!=BUTTON_UNKNOWN && thisEvt.button!=MOUSE_EVENT_MARKER_FLAG){
 4522               		.loc 3 130 0
 4523 02f2 1F81      		ldd r17,Y+7
 4524 02f4 8FEF      		ldi r24,lo8(-1)
 4525 02f6 810F      		add r24,r17
 4526 02f8 8E3F      		cpi r24,lo8(-2)
 4527 02fa 00F0      		brlo .+2
 4528 02fc 00C0      		rjmp .L270
 131:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(thisEvt.src == getDropletID()){
 4529               		.loc 3 131 0
 4530 02fe 2D81      		ldd r18,Y+5
 4531 0300 3E81      		ldd r19,Y+6
 4532 0302 8091 0000 		lds r24,droplet_ID
 4533 0306 9091 0000 		lds r25,droplet_ID+1
 4534 030a 2817      		cp r18,r24
 4535 030c 3907      		cpc r19,r25
 4536 030e 01F4      		brne .+2
 4537 0310 00C0      		rjmp .L319
 142:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				if(isWired){
 4538               		.loc 3 142 0
 4539 0312 8091 0000 		lds r24,isWired
 4540 0316 8823      		tst r24
 4541 0318 01F4      		brne .+2
 4542 031a 00C0      		rjmp .L278
 4543               	.LVL332:
 4544               	.LBB904:
 4545               	.LBB905:
 4546               	.LBB906:
 4547               	.LBB907:
 4548               	.LBB908:
 4549               	.LBB909:
  12:../include/rgb_led.h **** inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
 4550               		.loc 2 12 0
 4551 031c 2091 7A0A 		lds r18,2682
 4552 0320 3091 7B0A 		lds r19,2682+1
 4553               	.LVL333:
 4554               	.LBE909:
 4555               	.LBE908:
 147:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 4556               		.loc 1 147 0
 4557 0324 283C      		cpi r18,lo8(-56)
 4558 0326 01F0      		breq .L279
 4559               	.LVL334:
 4560               	.L314:
 4561               	.LBB910:
 4562               	.LBB911:
  13:../include/rgb_led.h **** 
 4563               		.loc 2 13 0
 4564 0328 88EC      		ldi r24,lo8(-56)
 4565 032a 90E0      		ldi r25,0
 4566 032c 8093 7A0A 		sts 2682,r24
 4567 0330 9093 7B0A 		sts 2682+1,r25
 4568               	.LVL335:
 4569               	.LBE911:
 4570               	.LBE910:
 151:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 1: setGreenLED(val);  scheduleTask(100, (arg_func_t)restoreGreenLED, (void*)((uint16_t)curre
 4571               		.loc 1 151 0
 4572 0334 3327      		clr r19
 4573 0336 40E0      		ldi r20,lo8(gs(restoreRedLED))
 4574 0338 50E0      		ldi r21,hi8(gs(restoreRedLED))
 4575 033a 64E6      		ldi r22,lo8(100)
 4576 033c 70E0      		ldi r23,0
 4577 033e 80E0      		ldi r24,0
 4578 0340 90E0      		ldi r25,0
 4579 0342 0E94 0000 		call scheduleTask
 4580               	.LVL336:
 156:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	return 1;
 4581               		.loc 1 156 0
 4582 0346 81E0      		ldi r24,lo8(1)
 4583 0348 8093 0000 		sts isBlinking,r24
 4584               	.L279:
 4585               	.LBE907:
 4586               	.LBE906:
 170:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	printf(isprint(key) ? "   '%c'\r\n" : "'\\%03hu'\r\n", key);
 4587               		.loc 1 170 0
 4588 034c 80E0      		ldi r24,lo8(.LC20)
 4589 034e 90E0      		ldi r25,hi8(.LC20)
 4590 0350 9F93      		push r25
 4591 0352 8F93      		push r24
 4592 0354 0E94 0000 		call printf
 4593               	.LVL337:
 171:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 4594               		.loc 1 171 0
 4595 0358 812F      		mov r24,r17
 4596 035a 90E0      		ldi r25,0
 4597 035c 0E94 0000 		call isprint
 4598               	.LVL338:
 4599 0360 0F90      		pop __tmp_reg__
 4600 0362 0F90      		pop __tmp_reg__
 4601 0364 892B      		or r24,r25
 4602 0366 01F0      		breq .+2
 4603 0368 00C0      		rjmp .L284
 4604 036a 80E0      		ldi r24,lo8(.LC11)
 4605 036c 90E0      		ldi r25,hi8(.LC11)
 4606               	.L280:
 4607 036e 1F92      		push __zero_reg__
 4608 0370 1F93      		push r17
 4609 0372 9F93      		push r25
 4610 0374 8F93      		push r24
 4611 0376 0E94 0000 		call printf
 4612               	.LVL339:
 4613 037a 0F90      		pop __tmp_reg__
 4614 037c 0F90      		pop __tmp_reg__
 4615 037e 0F90      		pop __tmp_reg__
 4616 0380 0F90      		pop __tmp_reg__
 4617               	.L270:
 4618               	.LBE905:
 4619               	.LBE904:
 149:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(!isBlinking){
 4620               		.loc 3 149 0
 4621 0382 8091 0000 		lds r24,isBlinking
 4622 0386 8111      		cpse r24,__zero_reg__
 4623 0388 00C0      		rjmp .L248
 150:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			setRGB(0,0, 15);
 4624               		.loc 3 150 0
 4625 038a 4FE0      		ldi r20,lo8(15)
 4626 038c 60E0      		ldi r22,0
 4627 038e 0E94 0000 		call setRGB
 4628               	.LVL340:
 4629 0392 00C0      		rjmp .L248
 4630               	.LVL341:
 4631               	.L315:
 4632               	.LBE903:
 4633               	.LBE902:
 4634               	.LBE901:
 4635               	.LBB932:
 4636               	.LBB887:
  78:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameTime = frameTime-MK_FRAME_LENGTH;
 4637               		.loc 3 78 0
 4638 0394 685B      		subi r22,-72
 4639 0396 7B40      		sbci r23,11
 4640 0398 8109      		sbc r24,__zero_reg__
 4641 039a 9109      		sbc r25,__zero_reg__
 4642               	.LVL342:
  79:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		frameStart += MK_FRAME_LENGTH;
 4643               		.loc 3 79 0
 4644 039c 0854      		subi r16,72
 4645 039e 144F      		sbci r17,-12
 4646 03a0 2F4F      		sbci r18,-1
 4647 03a2 3F4F      		sbci r19,-1
 4648 03a4 0093 0000 		sts frameStart,r16
 4649 03a8 1093 0000 		sts frameStart+1,r17
 4650 03ac 2093 0000 		sts frameStart+2,r18
 4651 03b0 3093 0000 		sts frameStart+3,r19
 4652 03b4 00C0      		rjmp .L260
 4653               	.LVL343:
 4654               	.L316:
  83:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(loopID==0 && periodicMouseBroadcast){
 4655               		.loc 3 83 0
 4656 03b6 8091 0000 		lds r24,periodicMouseBroadcast
 4657 03ba 8823      		tst r24
 4658 03bc 01F4      		brne .+2
 4659 03be 00C0      		rjmp .L262
 4660               	.LVL344:
 4661               	.LBB869:
 4662               	.LBB870:
 4663               	.LBB871:
 4664               	.LBB872:
  16:../include/rgb_led.h **** inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
 4665               		.loc 2 16 0
 4666 03c0 2091 780A 		lds r18,2680
 4667 03c4 3091 790A 		lds r19,2680+1
 4668               	.LVL345:
 4669               	.LBE872:
 4670               	.LBE871:
 147:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 4671               		.loc 1 147 0
 4672 03c8 2E31      		cpi r18,lo8(30)
 4673 03ca 01F0      		breq .L263
 4674               	.LVL346:
 4675               	.LBB873:
 4676               	.LBB874:
  17:../include/rgb_led.h **** 	
 4677               		.loc 2 17 0
 4678 03cc 8EE1      		ldi r24,lo8(30)
 4679 03ce 90E0      		ldi r25,0
 4680 03d0 8093 780A 		sts 2680,r24
 4681 03d4 9093 790A 		sts 2680+1,r25
 4682               	.LVL347:
 4683               	.LBE874:
 4684               	.LBE873:
 152:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 2: setBlueLED(val);   scheduleTask(100, (arg_func_t)restoreBlueLED, (void*)((uint16_t)curren
 4685               		.loc 1 152 0
 4686 03d8 3327      		clr r19
 4687               	.LVL348:
 4688 03da 40E0      		ldi r20,lo8(gs(restoreGreenLED))
 4689 03dc 50E0      		ldi r21,hi8(gs(restoreGreenLED))
 4690 03de 64E6      		ldi r22,lo8(100)
 4691 03e0 70E0      		ldi r23,0
 4692 03e2 80E0      		ldi r24,0
 4693 03e4 90E0      		ldi r25,0
 4694 03e6 0E94 0000 		call scheduleTask
 4695               	.LVL349:
 156:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	return 1;
 4696               		.loc 1 156 0
 4697 03ea 81E0      		ldi r24,lo8(1)
 4698 03ec 8093 0000 		sts isBlinking,r24
 4699               	.L263:
 4700               	.LVL350:
 4701               	.LBE870:
 4702               	.LBE869:
  85:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			broadcastRnbData();
 4703               		.loc 3 85 0
 4704 03f0 0E94 0000 		call broadcastRnbData
 4705               	.LVL351:
 4706               	.L264:
 114:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 		if(!isBlinking){
 4707               		.loc 3 114 0
 4708 03f4 8091 0000 		lds r24,isBlinking
 4709 03f8 8111      		cpse r24,__zero_reg__
 4710 03fa 00C0      		rjmp .L248
 115:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			setRGB(5,0, 15);
 4711               		.loc 3 115 0
 4712 03fc 4FE0      		ldi r20,lo8(15)
 4713 03fe 60E0      		ldi r22,0
 4714 0400 85E0      		ldi r24,lo8(5)
 4715 0402 0E94 0000 		call setRGB
 4716               	.LVL352:
 4717 0406 00C0      		rjmp .L248
 4718               	.L317:
 4719               	.LVL353:
 4720               	.LBE887:
 4721               	.LBE932:
 4722               	.LBB933:
 4723               	.LBB899:
 4724               	.LBB893:
 4725               	.LBB894:
 4726               	.LBB895:
 4727               	.LBB896:
  16:../include/rgb_led.h **** inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
 4728               		.loc 2 16 0
 4729 0408 2091 780A 		lds r18,2680
 4730 040c 3091 790A 		lds r19,2680+1
 4731               	.LVL354:
 4732               	.LBE896:
 4733               	.LBE895:
 147:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 4734               		.loc 1 147 0
 4735 0410 2E31      		cpi r18,lo8(30)
 4736 0412 01F0      		breq .L255
 4737               	.LVL355:
 4738               	.LBB897:
 4739               	.LBB898:
  17:../include/rgb_led.h **** 	
 4740               		.loc 2 17 0
 4741 0414 8EE1      		ldi r24,lo8(30)
 4742 0416 90E0      		ldi r25,0
 4743 0418 8093 780A 		sts 2680,r24
 4744 041c 9093 790A 		sts 2680+1,r25
 4745               	.LVL356:
 4746               	.LBE898:
 4747               	.LBE897:
 152:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 2: setBlueLED(val);   scheduleTask(100, (arg_func_t)restoreBlueLED, (void*)((uint16_t)curren
 4748               		.loc 1 152 0
 4749 0420 3327      		clr r19
 4750               	.LVL357:
 4751 0422 40E0      		ldi r20,lo8(gs(restoreGreenLED))
 4752 0424 50E0      		ldi r21,hi8(gs(restoreGreenLED))
 4753 0426 64E6      		ldi r22,lo8(100)
 4754 0428 70E0      		ldi r23,0
 4755 042a 80E0      		ldi r24,0
 4756 042c 90E0      		ldi r25,0
 4757 042e 0E94 0000 		call scheduleTask
 4758               	.LVL358:
 156:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	return 1;
 4759               		.loc 1 156 0
 4760 0432 81E0      		ldi r24,lo8(1)
 4761 0434 8093 0000 		sts isBlinking,r24
 4762               	.L255:
 4763               	.LVL359:
 4764               	.LBE894:
 4765               	.LBE893:
  57:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			broadcastRnbData();
 4766               		.loc 3 57 0
 4767 0438 0E94 0000 		call broadcastRnbData
 4768               	.LVL360:
 4769 043c 00C0      		rjmp .L256
 4770               	.L262:
 4771               	.LBE899:
 4772               	.LBE933:
 4773               	.LBB934:
 4774               	.LBB888:
 4775               	.LBB875:
 102:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			checkForEvent(frameStart+MK_SLOT_LENGTH*prevLoopID, frameStart+MK_SLOT_LENGTH*loopID, &thisEvt);
 4776               		.loc 3 102 0
 4777 043e C090 0000 		lds r12,frameStart
 4778 0442 D090 0000 		lds r13,frameStart+1
 4779 0446 E090 0000 		lds r14,frameStart+2
 4780 044a F090 0000 		lds r15,frameStart+3
 4781 044e ECE2      		ldi r30,lo8(44)
 4782 0450 F1E0      		ldi r31,lo8(1)
 4783 0452 E29F      		mul r30,r18
 4784 0454 D001      		movw r26,r0
 4785 0456 E39F      		mul r30,r19
 4786 0458 B00D      		add r27,r0
 4787 045a F29F      		mul r31,r18
 4788 045c B00D      		add r27,r0
 4789 045e 1124      		clr r1
 4790 0460 A701      		movw r20,r14
 4791 0462 9601      		movw r18,r12
 4792 0464 2A0F      		add r18,r26
 4793 0466 3B1F      		adc r19,r27
 4794 0468 411D      		adc r20,__zero_reg__
 4795 046a 511D      		adc r21,__zero_reg__
 4796 046c 0091 0000 		lds r16,prevLoopID
 4797 0470 1091 0000 		lds r17,prevLoopID+1
 4798 0474 0E9F      		mul r16,r30
 4799 0476 D001      		movw r26,r0
 4800 0478 0F9F      		mul r16,r31
 4801 047a B00D      		add r27,r0
 4802 047c 1E9F      		mul r17,r30
 4803 047e B00D      		add r27,r0
 4804 0480 1124      		clr r1
 4805 0482 C701      		movw r24,r14
 4806 0484 B601      		movw r22,r12
 4807 0486 6A0F      		add r22,r26
 4808 0488 7B1F      		adc r23,r27
 4809 048a 811D      		adc r24,__zero_reg__
 4810 048c 911D      		adc r25,__zero_reg__
 4811 048e 8E01      		movw r16,r28
 4812 0490 0F5F      		subi r16,-1
 4813 0492 1F4F      		sbci r17,-1
 4814 0494 0E94 0000 		call checkForEvent
 4815               	.LVL361:
 103:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(thisEvt.button!=BUTTON_UNKNOWN && thisEvt.button!=MOUSE_EVENT_MARKER_FLAG){
 4816               		.loc 3 103 0
 4817 0498 1F81      		ldd r17,Y+7
 4818 049a 8FEF      		ldi r24,lo8(-1)
 4819 049c 810F      		add r24,r17
 4820 049e 8E3F      		cpi r24,lo8(-2)
 4821 04a0 00F0      		brlo .+2
 4822 04a2 00C0      		rjmp .L265
 104:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				if(thisEvt.src == getDropletID()){
 4823               		.loc 3 104 0
 4824 04a4 2D81      		ldd r18,Y+5
 4825 04a6 3E81      		ldd r19,Y+6
 4826 04a8 8091 0000 		lds r24,droplet_ID
 4827 04ac 9091 0000 		lds r25,droplet_ID+1
 4828 04b0 2817      		cp r18,r24
 4829 04b2 3907      		cpc r19,r25
 4830 04b4 01F4      		brne .L265
 105:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					if(isWired){
 4831               		.loc 3 105 0
 4832 04b6 8091 0000 		lds r24,isWired
 4833 04ba 8823      		tst r24
 4834 04bc 01F4      		brne .+2
 4835 04be 00C0      		rjmp .L266
 4836               	.LVL362:
 4837               	.LBB876:
 4838               	.LBB877:
 4839               	.LBB878:
 4840               	.LBB879:
 4841               	.LBB880:
 4842               	.LBB881:
  12:../include/rgb_led.h **** inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
 4843               		.loc 2 12 0
 4844 04c0 2091 7A0A 		lds r18,2682
 4845 04c4 3091 7B0A 		lds r19,2682+1
 4846               	.LVL363:
 4847               	.LBE881:
 4848               	.LBE880:
 147:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 4849               		.loc 1 147 0
 4850 04c8 283C      		cpi r18,lo8(-56)
 4851 04ca 01F0      		breq .L267
 4852               	.LVL364:
 4853               	.LBB882:
 4854               	.LBB883:
  13:../include/rgb_led.h **** 
 4855               		.loc 2 13 0
 4856 04cc 88EC      		ldi r24,lo8(-56)
 4857 04ce 90E0      		ldi r25,0
 4858 04d0 8093 7A0A 		sts 2682,r24
 4859 04d4 9093 7B0A 		sts 2682+1,r25
 4860               	.LVL365:
 4861               	.LBE883:
 4862               	.LBE882:
 151:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		case 1: setGreenLED(val);  scheduleTask(100, (arg_func_t)restoreGreenLED, (void*)((uint16_t)curre
 4863               		.loc 1 151 0
 4864 04d8 3327      		clr r19
 4865               	.LVL366:
 4866 04da 40E0      		ldi r20,lo8(gs(restoreRedLED))
 4867 04dc 50E0      		ldi r21,hi8(gs(restoreRedLED))
 4868 04de 64E6      		ldi r22,lo8(100)
 4869 04e0 70E0      		ldi r23,0
 4870 04e2 80E0      		ldi r24,0
 4871 04e4 90E0      		ldi r25,0
 4872 04e6 0E94 0000 		call scheduleTask
 4873               	.LVL367:
 156:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	return 1;
 4874               		.loc 1 156 0
 4875 04ea 81E0      		ldi r24,lo8(1)
 4876 04ec 8093 0000 		sts isBlinking,r24
 4877               	.L267:
 4878               	.LVL368:
 4879               	.LBE879:
 4880               	.LBE878:
 170:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	printf(isprint(key) ? "   '%c'\r\n" : "'\\%03hu'\r\n", key);
 4881               		.loc 1 170 0
 4882 04f0 80E0      		ldi r24,lo8(.LC20)
 4883 04f2 90E0      		ldi r25,hi8(.LC20)
 4884 04f4 9F93      		push r25
 4885 04f6 8F93      		push r24
 4886 04f8 0E94 0000 		call printf
 4887               	.LVL369:
 171:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 4888               		.loc 1 171 0
 4889 04fc 812F      		mov r24,r17
 4890 04fe 90E0      		ldi r25,0
 4891 0500 0E94 0000 		call isprint
 4892               	.LVL370:
 4893 0504 0F90      		pop __tmp_reg__
 4894 0506 0F90      		pop __tmp_reg__
 4895 0508 892B      		or r24,r25
 4896 050a 01F0      		breq .+2
 4897 050c 00C0      		rjmp .L282
 4898 050e 80E0      		ldi r24,lo8(.LC11)
 4899 0510 90E0      		ldi r25,hi8(.LC11)
 4900               	.L268:
 4901 0512 1F92      		push __zero_reg__
 4902 0514 1F93      		push r17
 4903 0516 9F93      		push r25
 4904 0518 8F93      		push r24
 4905 051a 0E94 0000 		call printf
 4906               	.LVL371:
 4907 051e 0F90      		pop __tmp_reg__
 4908 0520 0F90      		pop __tmp_reg__
 4909 0522 0F90      		pop __tmp_reg__
 4910 0524 0F90      		pop __tmp_reg__
 4911               	.LVL372:
 4912               	.L265:
 4913               	.LBE877:
 4914               	.LBE876:
 112:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			prevLoopID = loopID;
 4915               		.loc 3 112 0
 4916 0526 8091 0000 		lds r24,loopID
 4917 052a 9091 0000 		lds r25,loopID+1
 4918 052e 8093 0000 		sts prevLoopID,r24
 4919 0532 9093 0000 		sts prevLoopID+1,r25
 4920 0536 00C0      		rjmp .L264
 4921               	.L278:
 4922               	.LBE875:
 4923               	.LBE888:
 4924               	.LBE934:
 4925               	.LBB935:
 4926               	.LBB930:
 4927               	.LBB928:
 144:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				}else if(thisEvt.button==BUTTON_SHIFT){
 4928               		.loc 3 144 0
 4929 0538 1031      		cpi r17,lo8(16)
 4930 053a 01F0      		breq .+2
 4931 053c 00C0      		rjmp .L270
 4932               	.L275:
 139:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					prepButtonPressMsg(&thisEvt);
 4933               		.loc 3 139 0
 4934 053e CE01      		movw r24,r28
 4935 0540 0196      		adiw r24,1
 4936 0542 0E94 0000 		call prepButtonPressMsg
 4937               	.LVL373:
 4938 0546 00C0      		rjmp .L270
 4939               	.L319:
 132:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				if(myButton == BUTTON_SHIFT){
 4940               		.loc 3 132 0
 4941 0548 8091 0000 		lds r24,myButton
 4942 054c 8031      		cpi r24,lo8(16)
 4943 054e 01F4      		brne .+2
 4944 0550 00C0      		rjmp .L320
 4945               	.L272:
 136:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				if(isWired){
 4946               		.loc 3 136 0
 4947 0552 8091 0000 		lds r24,isWired
 4948 0556 8823      		tst r24
 4949 0558 01F0      		breq .L275
 137:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					wireTxButtonPress(thisEvt.button);
 4950               		.loc 3 137 0
 4951 055a 1F81      		ldd r17,Y+7
 4952               	.LVL374:
 4953               	.LBB913:
 4954               	.LBB914:
 4955               	.LBB915:
 4956               	.LBB916:
 4957               	.LBB917:
 4958               	.LBB918:
  12:../include/rgb_led.h **** inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
 4959               		.loc 2 12 0
 4960 055c 2091 7A0A 		lds r18,2682
 4961 0560 3091 7B0A 		lds r19,2682+1
 4962               	.LVL375:
 4963               	.LBE918:
 4964               	.LBE917:
 147:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 4965               		.loc 1 147 0
 4966 0564 283C      		cpi r18,lo8(-56)
 4967 0566 01F0      		breq .+2
 4968 0568 00C0      		rjmp .L314
 4969 056a 00C0      		rjmp .L279
 4970               	.LVL376:
 4971               	.L284:
 4972               	.LBE916:
 4973               	.LBE915:
 4974               	.LBE914:
 4975               	.LBE913:
 4976               	.LBB919:
 4977               	.LBB912:
 171:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 4978               		.loc 1 171 0
 4979 056c 80E0      		ldi r24,lo8(.LC10)
 4980 056e 90E0      		ldi r25,hi8(.LC10)
 4981 0570 00C0      		rjmp .L280
 4982               	.L318:
 4983               	.LBE912:
 4984               	.LBE919:
 4985               	.LBE928:
 4986               	.LBE930:
 4987               	.LBE935:
 4988               	.LBB936:
 4989               	.LBB900:
  59:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			printf("%lu\r\n", getTime());
 4990               		.loc 3 59 0
 4991 0572 0E94 0000 		call getTime
 4992               	.LVL377:
 4993 0576 9F93      		push r25
 4994 0578 8F93      		push r24
 4995 057a 7F93      		push r23
 4996 057c 6F93      		push r22
 4997 057e 80E0      		ldi r24,lo8(.LC17)
 4998 0580 90E0      		ldi r25,hi8(.LC17)
 4999 0582 9F93      		push r25
 5000 0584 8F93      		push r24
 5001 0586 0E94 0000 		call printf
 5002               	.LVL378:
  60:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 			if(POS_DEFINED(&myPos)){
 5003               		.loc 3 60 0
 5004 058a 8091 0000 		lds r24,myPos
 5005 058e 9091 0000 		lds r25,myPos+1
 5006 0592 0F90      		pop __tmp_reg__
 5007 0594 0F90      		pop __tmp_reg__
 5008 0596 0F90      		pop __tmp_reg__
 5009 0598 0F90      		pop __tmp_reg__
 5010 059a 0F90      		pop __tmp_reg__
 5011 059c 0F90      		pop __tmp_reg__
 5012 059e 8115      		cp r24,__zero_reg__
 5013 05a0 60E8      		ldi r22,-128
 5014 05a2 9607      		cpc r25,r22
 5015 05a4 01F4      		brne .+2
 5016 05a6 00C0      		rjmp .L256
 5017 05a8 2091 0000 		lds r18,myPos+2
 5018 05ac 3091 0000 		lds r19,myPos+2+1
 5019 05b0 2115      		cp r18,__zero_reg__
 5020 05b2 40E8      		ldi r20,-128
 5021 05b4 3407      		cpc r19,r20
 5022 05b6 01F4      		brne .+2
 5023 05b8 00C0      		rjmp .L256
 5024 05ba 4091 0000 		lds r20,myPos+4
 5025 05be 5091 0000 		lds r21,myPos+4+1
 5026 05c2 4115      		cp r20,__zero_reg__
 5027 05c4 60E8      		ldi r22,-128
 5028 05c6 5607      		cpc r21,r22
 5029 05c8 01F4      		brne .+2
 5030 05ca 00C0      		rjmp .L256
  61:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				printf("\tMy Pos: {%d, %d, %d}\r\n", myPos.x, myPos.y, myPos.o);
 5031               		.loc 3 61 0
 5032 05cc 5F93      		push r21
 5033 05ce 4F93      		push r20
 5034 05d0 3F93      		push r19
 5035 05d2 2F93      		push r18
 5036 05d4 9F93      		push r25
 5037 05d6 8F93      		push r24
 5038 05d8 80E0      		ldi r24,lo8(.LC18)
 5039 05da 90E0      		ldi r25,hi8(.LC18)
 5040 05dc 9F93      		push r25
 5041 05de 8F93      		push r24
 5042 05e0 0E94 0000 		call printf
 5043               	.LVL379:
  62:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				printPosCovar(&myPosCovar);
 5044               		.loc 3 62 0
 5045 05e4 80E0      		ldi r24,lo8(myPosCovar)
 5046 05e6 90E0      		ldi r25,hi8(myPosCovar)
 5047 05e8 0E94 0000 		call printPosCovar
 5048               	.LVL380:
  63:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				printf("\r\n");
 5049               		.loc 3 63 0
 5050 05ec 80E0      		ldi r24,lo8(.LC7)
 5051 05ee 90E0      		ldi r25,hi8(.LC7)
 5052 05f0 0E94 0000 		call puts
 5053               	.LVL381:
  64:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 				checkPosition();
 5054               		.loc 3 64 0
 5055 05f4 0E94 0000 		call checkPosition
 5056               	.LVL382:
 5057 05f8 CDBF      		out __SP_L__,r28
 5058 05fa DEBF      		out __SP_H__,r29
 5059 05fc 00C0      		rjmp .L256
 5060               	.LVL383:
 5061               	.L282:
 5062               	.LBE900:
 5063               	.LBE936:
 5064               	.LBB937:
 5065               	.LBB889:
 5066               	.LBB886:
 5067               	.LBB885:
 5068               	.LBB884:
 171:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 5069               		.loc 1 171 0
 5070 05fe 80E0      		ldi r24,lo8(.LC10)
 5071 0600 90E0      		ldi r25,hi8(.LC10)
 5072 0602 00C0      		rjmp .L268
 5073               	.LVL384:
 5074               	.L266:
 5075               	.LBE884:
 5076               	.LBE885:
 108:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 						prepButtonPressMsg(&thisEvt);
 5077               		.loc 3 108 0
 5078 0604 CE01      		movw r24,r28
 5079 0606 0196      		adiw r24,1
 5080 0608 0E94 0000 		call prepButtonPressMsg
 5081               	.LVL385:
 5082 060c 00C0      		rjmp .L265
 5083               	.L320:
 5084               	.LBE886:
 5085               	.LBE889:
 5086               	.LBE937:
 5087               	.LBB938:
 5088               	.LBB931:
 5089               	.LBB929:
 5090               	.LBB920:
 5091               	.LBB921:
 186:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** }
 187:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 
 188:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** inline uint8_t handleShiftPressed(void){
 189:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	printf("KeyboardShift ");
 5092               		.loc 1 189 0
 5093 060e 80E0      		ldi r24,lo8(.LC21)
 5094 0610 90E0      		ldi r25,hi8(.LC21)
 5095 0612 9F93      		push r25
 5096 0614 8F93      		push r24
 5097 0616 0E94 0000 		call printf
 5098               	.LVL386:
 190:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	if(isShifted){
 5099               		.loc 1 190 0
 5100 061a 0F90      		pop __tmp_reg__
 5101 061c 0F90      		pop __tmp_reg__
 5102 061e 8091 0000 		lds r24,isShifted
 5103 0622 8823      		tst r24
 5104 0624 01F0      		breq .L273
 191:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		printf("Off\r\n");
 5105               		.loc 1 191 0
 5106 0626 80E0      		ldi r24,lo8(.LC22)
 5107 0628 90E0      		ldi r25,hi8(.LC22)
 5108 062a 0E94 0000 		call puts
 5109               	.LVL387:
 5110               	.LBB922:
 5111               	.LBB923:
  17:../include/rgb_led.h **** 	
 5112               		.loc 2 17 0
 5113 062e 1092 780A 		sts 2680,__zero_reg__
 5114 0632 1092 790A 		sts 2680+1,__zero_reg__
 5115               	.LVL388:
 5116               	.LBE923:
 5117               	.LBE922:
 5118               	.LBE921:
 5119               	.LBE920:
 133:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					isShifted = handleShiftPressed();
 5120               		.loc 3 133 0
 5121 0636 1092 0000 		sts isShifted,__zero_reg__
 134:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					thisEvt.button = isShifted ? BUTTON_CAPSLOCK_ON : BUTTON_CAPSLOCK_OFF;
 5122               		.loc 3 134 0
 5123 063a 85E1      		ldi r24,lo8(21)
 5124 063c 8F83      		std Y+7,r24
 5125 063e 00C0      		rjmp .L272
 5126               	.L273:
 5127               	.LBB927:
 5128               	.LBB926:
 192:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		setGreenLED(0);
 193:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		return 0;
 194:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 	}else{
 195:../droplet_programs/mouseKeyboard/mouseKeyboard.h **** 		printf("On\r\n");
 5129               		.loc 1 195 0
 5130 0640 80E0      		ldi r24,lo8(.LC23)
 5131 0642 90E0      		ldi r25,hi8(.LC23)
 5132 0644 0E94 0000 		call puts
 5133               	.LVL389:
 5134               	.LBB924:
 5135               	.LBB925:
  17:../include/rgb_led.h **** 	
 5136               		.loc 2 17 0
 5137 0648 85E0      		ldi r24,lo8(5)
 5138 064a 90E0      		ldi r25,0
 5139 064c 8093 780A 		sts 2680,r24
 5140 0650 9093 790A 		sts 2680+1,r25
 5141               	.LVL390:
 5142               	.LBE925:
 5143               	.LBE924:
 5144               	.LBE926:
 5145               	.LBE927:
 133:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					isShifted = handleShiftPressed();
 5146               		.loc 3 133 0
 5147 0654 81E0      		ldi r24,lo8(1)
 5148 0656 8093 0000 		sts isShifted,r24
 134:../droplet_programs/mouseKeyboard/mouseKeyboard.c **** 					thisEvt.button = isShifted ? BUTTON_CAPSLOCK_ON : BUTTON_CAPSLOCK_OFF;
 5149               		.loc 3 134 0
 5150 065a 84E1      		ldi r24,lo8(20)
 5151 065c 8F83      		std Y+7,r24
 5152 065e 00C0      		rjmp .L272
 5153               	.LBE929:
 5154               	.LBE931:
 5155               	.LBE938:
 5156               		.cfi_endproc
 5157               	.LFE87:
 5159               		.section	.rodata.CSWTCH.94,"a",@progbits
 5162               	CSWTCH.94:
 5163 0000 10        		.byte	16
 5164 0001 5A        		.byte	90
 5165 0002 58        		.byte	88
 5166 0003 43        		.byte	67
 5167 0004 56        		.byte	86
 5168 0005 42        		.byte	66
 5169 0006 4E        		.byte	78
 5170 0007 4D        		.byte	77
 5171 0008 2C        		.byte	44
 5172 0009 2E        		.byte	46
 5173               		.section	.rodata.CSWTCH.92,"a",@progbits
 5176               	CSWTCH.92:
 5177 0000 41        		.byte	65
 5178 0001 53        		.byte	83
 5179 0002 44        		.byte	68
 5180 0003 46        		.byte	70
 5181 0004 47        		.byte	71
 5182 0005 48        		.byte	72
 5183 0006 4A        		.byte	74
 5184 0007 4B        		.byte	75
 5185 0008 4C        		.byte	76
 5186 0009 0D        		.byte	13
 5187               		.section	.rodata.CSWTCH.90,"a",@progbits
 5190               	CSWTCH.90:
 5191 0000 51        		.byte	81
 5192 0001 57        		.byte	87
 5193 0002 45        		.byte	69
 5194 0003 52        		.byte	82
 5195 0004 54        		.byte	84
 5196 0005 59        		.byte	89
 5197 0006 55        		.byte	85
 5198 0007 49        		.byte	73
 5199 0008 4F        		.byte	79
 5200 0009 50        		.byte	80
 5201 000a 08        		.byte	8
 5202               		.comm	isBlinking,1,1
 5203               		.comm	periodicMouseBroadcast,1,1
 5204               		.comm	wireSleepTask,2,1
 5205               		.comm	newPosCovar,12,1
 5206               		.comm	newPos,6,1
 5207               		.comm	myButton,1,1
 5208               		.comm	myRole,1,1
 5209               		.comm	leftMouseID,2,1
 5210               		.comm	isShifted,1,1
 5211               		.comm	isWired,1,1
 5212               		.comm	prevLoopID,2,1
 5213               		.comm	loopID,2,1
 5214               		.comm	mySlot,2,1
 5215               		.comm	lastKeypress,4,1
 5216               		.comm	frameStart,4,1
 5217               		.comm	eventLog,140,1
 5218               		.comm	seedFlag,1,1
 5219               		.comm	myPosCovar,12,1
 5220               		.comm	myPos,6,1
 5221               		.comm	unpoweredFixActive,1,1
 5222               		.comm	failedLegChecks,1,1
 5223               		.comm	mmPerKilostep,16,1
 5224               		.comm	motorAdjusts,48,1
 5225               		.comm	processing_rnb_flag,1,1
 5226               		.comm	rnbCmdID,2,1
 5227               		.comm	numWaitingMeas,1,1
 5228               		.comm	memoryConsumedByMeasBuffer,2,1
 5229               		.comm	incMeasHead,2,1
 5230               		.comm	cmdArrivalDir,1,1
 5231               		.comm	cmdSenderId,2,1
 5232               		.comm	cmdArrivalTime,4,1
 5233               		.comm	numWaitingMsgs,1,1
 5234               		.comm	hpIrBlock_bm,1,1
 5235               		.comm	memoryConsumedByMsgBuffer,2,1
 5236               		.comm	incMsgHead,2,1
 5237               		.comm	ir_rxtx,336,1
 5238               		.comm	obsStart,2,1
 5239               		.comm	curr_ir_power,2,1
 5240               		.comm	twi,2,1
 5241               		.comm	twiMaster,25,1
 5242               		.section	.bss.task_storage_arr,"aw",@nobits
 5245               	task_storage_arr:
 5246 0000 0000 0000 		.zero	140
 5246      0000 0000 
 5246      0000 0000 
 5246      0000 0000 
 5246      0000 0000 
 5247               		.comm	task_executing,1,1
 5248               		.comm	num_tasks,1,1
 5249               		.comm	task_list,2,1
 5250               		.comm	rtc_epoch,2,1
 5251               		.comm	droplet_ID,2,1
 5252               		.text
 5253               	.Letext0:
 5254               		.file 8 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 5255               		.file 9 "C:/Program Files (x86)/Atmel/Studio/7.0/packs/atmel/XMEGAA_DFP/1.1.68/include/avr/iox128a
 5256               		.file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\g
 5257               		.file 11 "../include/scheduler.h"
 5258               		.file 12 "../include/i2c.h"
 5259               		.file 13 "../include/firefly_sync.h"
 5260               		.file 14 "../include/ir_comm.h"
 5261               		.file 15 "../include/matrix_utils.h"
 5262               		.file 16 "../include/localization.h"
 5263               		.file 17 "../include/droplet_init.h"
 5264               		.file 18 "../droplet_programs/mouseKeyboard/button_press_queue.h"
 5265               		.file 19 "../include/ir_led.h"
 5266               		.file 20 "../include/motor.h"
 5267               		.file 21 "../include/power.h"
 5268               		.file 22 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 5269               		.file 23 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 5270               		.file 24 "../include/random.h"
 5271               		.file 25 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 5272               		.file 26 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 5273               		.file 27 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\i
 5274               		.file 28 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 mouseKeyboard.c
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:2      *ABS*:0000003e __SP_H__
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:3      *ABS*:0000003d __SP_L__
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:4      *ABS*:0000003f __SREG__
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:6      *ABS*:00000034 __CCP__
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:7      *ABS*:00000000 __tmp_reg__
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:8      *ABS*:00000001 __zero_reg__
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:15     .text.restoreRedLED:00000000 restoreRedLED
                            *COM*:00000001 isBlinking
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:45     .text.restoreGreenLED:00000000 restoreGreenLED
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:73     .text.restoreBlueLED:00000000 restoreBlueLED
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:101    .text.wireSleep:00000000 wireSleep
                            *COM*:00000001 isWired
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:122    .text.init:00000000 init
                            *COM*:00000001 myRole
                            *COM*:00000001 myButton
                            *COM*:00000002 loopID
                            *COM*:00000001 isShifted
                            *COM*:00000004 lastKeypress
                            *COM*:00000002 wireSleepTask
                            *COM*:00000006 newPos
                            *COM*:00000001 periodicMouseBroadcast
                            *COM*:00000002 leftMouseID
                            *COM*:00000004 frameStart
                            *COM*:00000002 droplet_ID
                            *COM*:00000002 mySlot
                            *COM*:00000006 myPos
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:5190   .rodata.CSWTCH.90:00000000 CSWTCH.90
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:5176   .rodata.CSWTCH.92:00000000 CSWTCH.92
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:5162   .rodata.CSWTCH.94:00000000 CSWTCH.94
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:474    .text.handleMeas:00000000 handleMeas
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:507    .text.mouseHandleBotMeasMsg:00000000 mouseHandleBotMeasMsg
                            *COM*:0000000c newPosCovar
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:1257   .text.handleButtonPressMsg:00000000 handleButtonPressMsg
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:1459   .text.handleMouseMoveMsg:00000000 handleMouseMoveMsg
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:1751   .text.handleMsg:00000000 handleMsg
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:1844   .text.checkPosition:00000000 checkPosition
                            *COM*:0000000c myPosCovar
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:2705   .text.rnbBroadcastDebugWrapper:00000000 rnbBroadcastDebugWrapper
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:2739   .text.userMicInterrupt:00000000 userMicInterrupt
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:2972   .text.userHandleCommand:00000000 userHandleCommand
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:3262   .text.getExponentialBackoff:00000000 getExponentialBackoff
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:3353   .text.sendMouseMoveMsg:00000000 sendMouseMoveMsg
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:3807   .text.sendButtonPressMsg:00000000 sendButtonPressMsg
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:3529   .text.prepMouseMoveMsg:00000000 prepMouseMoveMsg
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:3981   .text.prepButtonPressMsg:00000000 prepButtonPressMsg
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:4103   .text.loop:00000000 loop
                            *COM*:00000002 prevLoopID
                            *COM*:0000008c eventLog
                            *COM*:00000001 seedFlag
                            *COM*:00000001 unpoweredFixActive
                            *COM*:00000001 failedLegChecks
                            *COM*:00000010 mmPerKilostep
                            *COM*:00000030 motorAdjusts
                            *COM*:00000001 processing_rnb_flag
                            *COM*:00000002 rnbCmdID
                            *COM*:00000001 numWaitingMeas
                            *COM*:00000002 memoryConsumedByMeasBuffer
                            *COM*:00000002 incMeasHead
                            *COM*:00000001 cmdArrivalDir
                            *COM*:00000002 cmdSenderId
                            *COM*:00000004 cmdArrivalTime
                            *COM*:00000001 numWaitingMsgs
                            *COM*:00000001 hpIrBlock_bm
                            *COM*:00000002 memoryConsumedByMsgBuffer
                            *COM*:00000002 incMsgHead
                            *COM*:00000150 ir_rxtx
                            *COM*:00000002 obsStart
                            *COM*:00000002 curr_ir_power
                            *COM*:00000002 twi
                            *COM*:00000019 twiMaster
C:\Users\John\AppData\Local\Temp\cc0meBBE.s:5245   .bss.task_storage_arr:00000000 task_storage_arr
                            *COM*:00000001 task_executing
                            *COM*:00000001 num_tasks
                            *COM*:00000002 task_list
                            *COM*:00000002 rtc_epoch

UNDEFINED SYMBOLS
queueInit
getTime
__umulhisi3
__divmodhi4
printf
enableMicInterrupt
useRNBmeas
__floatsisf
__divsf3
__mulsf3
__gesf2
__addsf3
__subsf3
__gtsf2
__ltsf2
__fixsfsi
decompressP
fmod
covarIntersection
positiveDefiniteQ
updateDistance
covarUnion
compressP
__udivmodsi4
__muluhisi3
addEvent
scheduleTask
handleBotMeasMsg
eigensystem
sqrt
matrixInplaceMultiply
randNorm
matrixTimesVector
puts
isprint
broadcastRnbData
isupper
strcmp
removeTask
tolower
atoi
islower
toupper
randQuad
irIsBusy
free
irSend
malloc
getPosColor
setRGB
delayMS
checkForEvent
printPosCovar
__do_copy_data
__do_clear_bss
