
My_Droplets.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000044  00020000  00020000  0000a572  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .USERCODE     0000002a  0000c000  0000c000  0000a548  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000a216  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         0000025e  00802000  0000a216  0000a2ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000003d4  0080225e  0080225e  0000a5b6  2**0
                  ALLOC
  5 .comment      0000005c  00000000  00000000  0000a5b6  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a614  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000710  00000000  00000000  0000a658  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001bb10  00000000  00000000  0000ad68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000732b  00000000  00000000  00026878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00007729  00000000  00000000  0002dba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000027e4  00000000  00000000  000352cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00007546  00000000  00000000  00037ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000e555  00000000  00000000  0003eff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001238  00000000  00000000  0004d550  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20000:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20002:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   20004:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   20006:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   2000a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   2000e:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   20010:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   20014:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   20016:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   2001a:	9b bf       	out	0x3b, r25	; 59

	ret
   2001c:	08 95       	ret

0002001e <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   2001e:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   20022:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   20024:	fc cf       	rjmp	.-8      	; 0x2001e <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20026:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20028:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   2002a:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   2002c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   20030:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   20032:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   20036:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   20038:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   2003a:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   2003c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   20040:	9b bf       	out	0x3b, r25	; 59

	ret
   20042:	08 95       	ret

Disassembly of section .USERCODE:

0000c000 <init>:
 */




void init(){
    c000:	cf 93       	push	r28
    c002:	df 93       	push	r29
    c004:	c0 e0       	ldi	r28, 0x00	; 0
    c006:	d0 e0       	ldi	r29, 0x00	; 0
	//volatile int dummyArray[512];
	//memset(dummyArray, 0x55, 512);
	
	for (int i= 0;i<20;i++)
	{
		setHSV(i*20,200,100);
    c008:	44 e6       	ldi	r20, 0x64	; 100
    c00a:	68 ec       	ldi	r22, 0xC8	; 200
    c00c:	ce 01       	movw	r24, r28
    c00e:	0e 94 9e 30 	call	0x613c	; 0x613c <setHSV>
		delayMS(2000);
    c012:	80 ed       	ldi	r24, 0xD0	; 208
    c014:	97 e0       	ldi	r25, 0x07	; 7
    c016:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    c01a:	64 96       	adiw	r28, 0x14	; 20
		
	//delayMS(5000);
	//volatile int dummyArray[512];
	//memset(dummyArray, 0x55, 512);
	
	for (int i= 0;i<20;i++)
    c01c:	c0 39       	cpi	r28, 0x90	; 144
    c01e:	81 e0       	ldi	r24, 0x01	; 1
    c020:	d8 07       	cpc	r29, r24
    c022:	91 f7       	brne	.-28     	; 0xc008 <init+0x8>
		delayMS(2000);
	}
	//dummyArray[i] = i;
	//setRGB(255,0,0);
	
}
    c024:	df 91       	pop	r29
    c026:	cf 91       	pop	r28
    c028:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__ctors_end>
       4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
       8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
       c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      10:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      14:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      18:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      1c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      20:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      24:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      28:	0c 94 ae 37 	jmp	0x6f5c	; 0x6f5c <__vector_10>
      2c:	0c 94 ba 35 	jmp	0x6b74	; 0x6b74 <__vector_11>
      30:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      34:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      38:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      3c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      40:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      44:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      48:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      4c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      50:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      54:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      58:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      5c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      60:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      64:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__vector_25>
      68:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__vector_26>
      6c:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__vector_27>
      70:	0c 94 85 18 	jmp	0x310a	; 0x310a <__vector_28>
      74:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__vector_29>
      78:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__vector_30>
      7c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      80:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      84:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      88:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      8c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      90:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      94:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      98:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      9c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      a0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      a4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      a8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      ac:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      b0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      b4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      b8:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__vector_46>
      bc:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__vector_47>
      c0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      c4:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_49>
      c8:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__vector_50>
      cc:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      d0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      d4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      d8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      dc:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      e0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      e4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      e8:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__vector_58>
      ec:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__vector_59>
      f0:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__vector_60>
      f4:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__vector_61>
      f8:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__vector_62>
      fc:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__vector_63>
     100:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     104:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     108:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     10c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     110:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     114:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     118:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     11c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     120:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     124:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     128:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     12c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     130:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     134:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     138:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     13c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     140:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     144:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     148:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     14c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     150:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     154:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     158:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     15c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     160:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__vector_88>
     164:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <__vector_89>
     168:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__vector_90>
     16c:	0c 94 ea 22 	jmp	0x45d4	; 0x45d4 <__vector_91>
     170:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     174:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     178:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     17c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     180:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     184:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     188:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     18c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     190:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     194:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     198:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     19c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1a0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1a4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1a8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1ac:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1b0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1b4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1b8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1bc:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1c0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1c4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1c8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1cc:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1d0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1d4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1d8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1dc:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__vector_119>
     1e0:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__vector_120>
     1e4:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__vector_121>
     1e8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1ec:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1f0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1f4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1f8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1fc:	2e 10       	cpse	r2, r14
     1fe:	3b 10       	cpse	r3, r11
     200:	48 10       	cpse	r4, r8
     202:	55 10       	cpse	r5, r5
     204:	62 10       	cpse	r6, r2
     206:	08 10       	cpse	r0, r8
     208:	15 10       	cpse	r1, r5
     20a:	7d 15       	cp	r23, r13
     20c:	8a 15       	cp	r24, r10
     20e:	00 15       	cp	r16, r0
     210:	0d 15       	cp	r16, r13
     212:	1b 15       	cp	r17, r11
     214:	4f 15       	cp	r20, r15
     216:	f3 14       	cp	r15, r3
     218:	08 4a       	sbci	r16, 0xA8	; 168
     21a:	d7 3b       	cpi	r29, 0xB7	; 183
     21c:	3b ce       	rjmp	.-906    	; 0xfffffe94 <__eeprom_end+0xff7efe94>
     21e:	01 6e       	ori	r16, 0xE1	; 225
     220:	84 bc       	out	0x24, r8	; 36
     222:	bf fd       	.word	0xfdbf	; ????
     224:	c1 2f       	mov	r28, r17
     226:	3d 6c       	ori	r19, 0xCD	; 205
     228:	74 31       	cpi	r23, 0x14	; 20
     22a:	9a bd       	out	0x2a, r25	; 42
     22c:	56 83       	std	Z+6, r21	; 0x06
     22e:	3d da       	rcall	.-2950   	; 0xfffff6aa <__eeprom_end+0xff7ef6aa>
     230:	3d 00       	.word	0x003d	; ????
     232:	c7 7f       	andi	r28, 0xF7	; 247
     234:	11 be       	out	0x31, r1	; 49
     236:	d9 e4       	ldi	r29, 0x49	; 73
     238:	bb 4c       	sbci	r27, 0xCB	; 203
     23a:	3e 91       	ld	r19, -X
     23c:	6b aa       	std	Y+51, r6	; 0x33
     23e:	aa be       	out	0x3a, r10	; 58
     240:	00 00       	nop
     242:	00 80       	ld	r0, Z
     244:	3f 07       	cpc	r19, r31
     246:	63 42       	sbci	r22, 0x23	; 35
     248:	36 b7       	in	r19, 0x36	; 54
     24a:	9b d8       	rcall	.-3786   	; 0xfffff382 <__eeprom_end+0xff7ef382>
     24c:	a7 1a       	sub	r10, r23
     24e:	39 68       	ori	r19, 0x89	; 137
     250:	56 18       	sub	r5, r6
     252:	ae ba       	out	0x1e, r10	; 30
     254:	ab 55       	subi	r26, 0x5B	; 91
     256:	8c 1d       	adc	r24, r12
     258:	3c b7       	in	r19, 0x3c	; 60
     25a:	cc 57       	subi	r28, 0x7C	; 124
     25c:	63 bd       	out	0x23, r22	; 35
     25e:	6d ed       	ldi	r22, 0xDD	; 221
     260:	fd 75       	andi	r31, 0x5D	; 93
     262:	3e f6       	brtc	.-114    	; 0x1f2 <__SREG__+0x1b3>
     264:	17 72       	andi	r17, 0x27	; 39
     266:	31 bf       	out	0x31, r19	; 49
     268:	00 00       	nop
     26a:	00 80       	ld	r0, Z
     26c:	3f 05       	cpc	r19, r15
     26e:	a8 4c       	sbci	r26, 0xC8	; 200
     270:	cd b2       	in	r12, 0x1d	; 29
     272:	d4 4e       	sbci	r29, 0xE4	; 228
     274:	b9 38       	cpi	r27, 0x89	; 137
     276:	36 a9       	ldd	r19, Z+54	; 0x36
     278:	02 0c       	add	r0, r2
     27a:	50 b9       	out	0x00, r21	; 0
     27c:	91 86       	std	Z+9, r9	; 0x09
     27e:	88 08       	sbc	r8, r8
     280:	3c a6       	std	Y+44, r3	; 0x2c
     282:	aa aa       	std	Y+50, r10	; 0x32
     284:	2a be       	out	0x3a, r2	; 58
     286:	00 00       	nop
     288:	00 80       	ld	r0, Z
     28a:	3f 08       	sbc	r3, r15
     28c:	00 00       	nop
     28e:	00 be       	out	0x30, r0	; 48
     290:	92 24       	eor	r9, r2
     292:	49 12       	cpse	r4, r25
     294:	3e ab       	std	Y+54, r19	; 0x36
     296:	aa aa       	std	Y+50, r10	; 0x32
     298:	2a be       	out	0x3a, r2	; 58
     29a:	cd cc       	rjmp	.-1638   	; 0xfffffc36 <__eeprom_end+0xff7efc36>
     29c:	cc 4c       	sbci	r28, 0xCC	; 204
     29e:	3e 00       	.word	0x003e	; ????
     2a0:	00 00       	nop
     2a2:	80 be       	out	0x30, r8	; 48
     2a4:	ab aa       	std	Y+51, r10	; 0x33
     2a6:	aa aa       	std	Y+50, r10	; 0x32
     2a8:	3e 00       	.word	0x003e	; ????
     2aa:	00 00       	nop
     2ac:	00 bf       	out	0x30, r16	; 48
     2ae:	00 00       	nop
     2b0:	00 80       	ld	r0, Z
     2b2:	3f 00       	.word	0x003f	; ????
     2b4:	00 00       	nop
     2b6:	00 00       	nop
     2b8:	08 41       	sbci	r16, 0x18	; 24
     2ba:	78 d3       	rcall	.+1776   	; 0x9ac <__c.4892+0x2c>
     2bc:	bb 43       	sbci	r27, 0x3B	; 59
     2be:	87 d1       	rcall	.+782    	; 0x5ce <__c.5226+0x68>
     2c0:	13 3d       	cpi	r17, 0xD3	; 211
     2c2:	19 0e       	add	r1, r25
     2c4:	3c c3       	rjmp	.+1656   	; 0x93e <__c.4912+0x36>
     2c6:	bd 42       	sbci	r27, 0x2D	; 45
     2c8:	82 ad       	ldd	r24, Z+58	; 0x3a
     2ca:	2b 3e       	cpi	r18, 0xEB	; 235
     2cc:	68 ec       	ldi	r22, 0xC8	; 200
     2ce:	82 76       	andi	r24, 0x62	; 98
     2d0:	be d9       	rcall	.-3204   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     2d2:	8f e1       	ldi	r24, 0x1F	; 31
     2d4:	a9 3e       	cpi	r26, 0xE9	; 233
     2d6:	4c 80       	ldd	r4, Y+4	; 0x04
     2d8:	ef ff       	.word	0xffef	; ????
     2da:	be 01       	movw	r22, r28
     2dc:	c4 ff       	sbrs	r28, 4
     2de:	7f 3f       	cpi	r23, 0xFF	; 255
     2e0:	00 00       	nop
     2e2:	00 00       	nop
     2e4:	00 00       	nop

000002e6 <__trampolines_start>:
     2e6:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <handleCmdWrapper>
     2ea:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <useRnbData>
     2ee:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <irTransmit+0x17e>
     2f2:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <setAllirPowers>
     2f6:	0c 94 15 10 	jmp	0x202a	; 0x202a <irTransmit+0xfe>
     2fa:	0c 94 bd 22 	jmp	0x457a	; 0x457a <pc_comm_putchar>
     2fe:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <irReceive+0x220>
     302:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <irReceive+0x206>
     306:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <irReceive+0x31a>
     30a:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <processObsQueue>
     30e:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <irReceive+0x334>
     312:	0c 94 4d 09 	jmp	0x129a	; 0x129a <send_hex>
     316:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <irTransmit+0x198>
     31a:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <irReceive+0x256>
     31e:	0c 94 08 10 	jmp	0x2010	; 0x2010 <irTransmit+0xe4>
     322:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <initIrBaselines>
     326:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <stopMove>
     32a:	0c 94 5c 38 	jmp	0x70b8	; 0x70b8 <sendID>
     32e:	0c 94 2e 10 	jmp	0x205c	; 0x205c <irTransmit+0x130>
     332:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <irReceive+0x23a>
     336:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <irTransmit+0x14a>
     33a:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <irReceive+0x2be>
     33e:	0c 94 56 2e 	jmp	0x5cac	; 0x5cac <broadcastRnbData>
     342:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <sendPing>
     346:	0c 94 48 10 	jmp	0x2090	; 0x2090 <irTransmit+0x164>
     34a:	0c 94 ea 1c 	jmp	0x39d4	; 0x39d4 <updateIrBaselines>

0000034e <__trampolines_end>:
     34e:	6e 61       	ori	r22, 0x1E	; 30
     350:	6e 00       	.word	0x006e	; ????

00000352 <__c.2332>:
     352:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     362:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     372:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     382:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     392:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     3a2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     3b2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     3c2:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     3d2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     3e2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     3f2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     402:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     412:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     422:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     432:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     442:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000450 <__c.5348>:
     450:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 6c     ERROR: Message l
     460:	65 6e 67 74 68 20 30 20 66 6f 72 20 6d 73 67 5f     ength 0 for msg_
     470:	6e 6f 64 65 2e 0d 0a 00                             node....

00000478 <__c.5342>:
     478:	45 72 72 6f 72 3a 20 4d 65 73 73 61 67 65 73 20     Error: Messages 
     488:	6f 76 65 72 66 6c 6f 77 2e 20 54 6f 6f 20 6d 61     overflow. Too ma
     498:	6e 79 20 6d 65 73 73 61 67 65 73 20 72 65 63 65     ny messages rece
     4a8:	69 76 65 64 2e 20 54 72 79 20 73 70 65 65 64 69     ived. Try speedi
     4b8:	6e 67 20 75 70 20 79 6f 75 72 20 6c 6f 6f 70 20     ng up your loop 
     4c8:	69 66 20 79 6f 75 20 73 65 65 20 74 68 69 73 20     if you see this 
     4d8:	61 20 6c 6f 74 2e 0d 0a 00                          a lot....

000004e1 <__c.5335>:
     4e1:	45 72 72 6f 72 21 20 57 65 20 67 6f 74 20 61 68     Error! We got ah
     4f1:	65 61 64 20 6f 66 20 74 68 65 20 74 61 73 6b 20     ead of the task 
     501:	6c 69 73 74 20 61 6e 64 20 6e 6f 77 20 6e 6f 74     list and now not
     511:	68 69 6e 67 20 77 69 6c 6c 20 65 78 65 63 75 74     hing will execut
     521:	65 2e 0d 0a 00                                      e....

00000526 <__c.4802>:
     526:	09 54 57 49 20 77 61 73 6e 27 74 20 72 65 61 64     .TWI wasn't read
     536:	79 2e 0d 0a 00                                      y....

0000053b <__c.4769>:
     53b:	57 61 69 74 69 6e 67 20 66 6f 72 20 54 57 49 20     Waiting for TWI 
     54b:	7c 20 25 73 0d 0a 00                                | %s...

00000552 <__c.4767>:
     552:	09 54 57 49 20 74 69 6d 65 6f 75 74 20 7c 20 25     .TWI timeout | %
     562:	73 0d 0a 00                                         s...

00000566 <__c.5226>:
     566:	45 52 52 4f 52 21 20 42 75 66 66 65 72 65 64 20     ERROR! Buffered 
     576:	69 6e 63 6f 6d 69 6e 67 20 6d 65 73 73 61 67 65     incoming message
     586:	73 20 63 6f 6e 73 75 6d 69 6e 67 20 74 6f 6f 20     s consuming too 
     596:	6d 75 63 68 20 6d 65 6d 6f 72 79 2e 20 41 6c 6c     much memory. All
     5a6:	6f 77 20 68 61 6e 64 6c 65 5f 6d 73 67 20 74 6f     ow handle_msg to
     5b6:	20 62 65 20 63 61 6c 6c 65 64 20 6d 6f 72 65 20      be called more 
     5c6:	66 72 65 71 75 65 6e 74 6c 79 2e 0d 0a 00           frequently....

000005d4 <__c.5224>:
     5d4:	45 52 52 4f 52 21 20 53 68 6f 75 6c 64 20 4e 4f     ERROR! Should NO
     5e4:	54 20 62 65 20 61 64 64 69 6e 67 20 61 20 6d 65     T be adding a me
     5f4:	73 73 61 67 65 20 77 69 74 68 20 6c 65 6e 67 74     ssage with lengt
     604:	68 20 67 72 65 61 74 65 72 20 74 68 61 6e 20 62     h greater than b
     614:	75 66 66 65 72 20 73 69 7a 65 20 74 6f 20 71 75     uffer size to qu
     624:	65 75 65 2e 0d 0a 00                                eue....

0000062b <__c.5222>:
     62b:	45 52 52 4f 52 21 20 53 68 6f 75 6c 64 20 4e 4f     ERROR! Should NO
     63b:	54 20 62 65 20 61 64 64 69 6e 67 20 30 2d 6c 65     T be adding 0-le
     64b:	6e 67 74 68 20 6d 65 73 73 61 67 65 20 74 6f 20     ngth message to 
     65b:	71 75 65 75 65 2e 0d 0a 00                          queue....

00000664 <__c.5145>:
     664:	41 62 6f 72 74 69 6e 67 20 49 52 20 73 65 6e 64     Aborting IR send
     674:	20 5b 25 30 32 68 78 5d 20 77 68 69 6c 65 20 74      [%02hx] while t
     684:	72 79 69 6e 67 3a 20 00                             rying: .

0000068c <__c.5118>:
     68c:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 65     ERROR: Message e
     69c:	78 63 65 65 64 73 20 49 52 5f 42 55 46 46 45 52     xceeds IR_BUFFER
     6ac:	5f 53 49 5a 45 2e 0d 0a 00                          _SIZE....

000006b5 <__c.4740>:
     6b5:	09 44 6f 6e 65 20 77 61 69 74 69 6e 67 20 66 6f     .Done waiting fo
     6c5:	72 20 54 57 49 2e 20 49 52 20 70 6f 77 65 72 73     r TWI. IR powers
     6d5:	20 73 65 74 20 73 75 63 63 65 73 73 66 75 6c 6c      set successfull
     6e5:	79 2e 0d 0a 00                                      y....

000006ea <__c.5112>:
     6ea:	49 52 20 48 61 72 64 77 61 72 65 20 62 75 73 79     IR Hardware busy
     6fa:	2e 20 43 61 6e 27 74 20 63 68 65 63 6b 20 63 6f     . Can't check co
     70a:	6c 6c 69 73 69 6f 6e 73 2e 0d 0a 00                 llisions....

00000716 <__c.4920>:
     716:	09 25 68 75 09 25 75 0d 0a 00                       .%hu.%u...

00000720 <__c.4917>:
     720:	44 69 73 74 20 28 6d 6d 29 20 70 65 72 20 6b 69     Dist (mm) per ki
     730:	6c 6f 73 74 65 70 0d 0a 00                          lostep...

00000739 <__c.4904>:
     739:	09 64 69 72 3a 20 25 68 75 09 00                    .dir: %hu..

00000744 <__c.4901>:
     744:	4d 6f 74 6f 72 20 56 61 6c 75 65 73 0d 0a 00        Motor Values...

00000753 <__c.4856>:
     753:	49 6e 20 6f 72 64 65 72 20 74 6f 20 67 6f 20 69     In order to go i
     763:	6e 20 64 69 72 65 63 74 69 6f 6e 20 25 68 75 20     n direction %hu 
     773:	66 6f 72 20 25 75 20 6d 6d 2c 20 74 61 6b 69 6e     for %u mm, takin
     783:	67 20 25 75 20 73 74 65 70 73 2e 0d 0a 00           g %u steps....

00000791 <__c.4852>:
     791:	45 72 72 6f 72 3a 20 44 6f 6e 27 74 20 68 61 76     Error: Don't hav
     7a1:	65 20 63 61 6c 69 62 72 61 74 65 64 20 76 61 6c     e calibrated val
     7b1:	75 65 73 20 66 6f 72 20 74 68 69 73 20 64 69 72     ues for this dir
     7c1:	65 63 74 69 6f 6e 2e 0d 0a 00                       ection....

000007cb <__c.4845>:
     7cb:	45 72 72 6f 72 21 20 46 61 69 6c 65 64 20 74 6f     Error! Failed to
     7db:	20 73 63 68 65 64 75 6c 65 20 73 74 6f 70 5f 6d      schedule stop_m
     7eb:	6f 76 65 20 74 61 73 6b 2e 00                       ove task..

000007f5 <__c.4838>:
     7f5:	45 52 52 4f 52 3a 20 63 75 72 72 65 6e 74 5f 6f     ERROR: current_o
     805:	66 66 73 65 74 3a 20 25 75 20 61 6e 64 20 74 6f     ffset: %u and to
     815:	74 61 6c 5f 74 69 6d 65 3a 20 25 75 20 6e 6f 74     tal_time: %u not
     825:	20 65 71 75 61 6c 21 0d 0a 00                        equal!...

0000082f <__c.5065>:
     82f:	0d 0a 45 52 52 4f 52 3a 20 53 65 72 69 61 6c 20     ..ERROR: Serial 
     83f:	69 6e 70 75 74 20 62 75 66 66 65 72 20 63 61 70     input buffer cap
     84f:	61 63 69 74 79 20 6f 66 20 25 75 20 63 68 61 72     acity of %u char
     85f:	61 63 74 65 72 73 20 65 78 63 65 65 64 65 64 2e     acters exceeded.
     86f:	0d 0a 00                                            ...

00000872 <__c.5223>:
     872:	21 21 21 09 47 6f 74 20 31 35 20 63 6f 6e 73 65     !!!.Got 15 conse
     882:	63 75 74 69 76 65 20 6e 6f 74 68 69 6e 67 73 20     cutive nothings 
     892:	66 72 6f 6d 20 73 65 6e 73 6f 72 20 25 68 75 2e     from sensor %hu.
     8a2:	09 21 21 21 0d 0a 00                                .!!!...

000008a9 <__c.5119>:
     8a9:	52 4e 42 20 42 72 6f 61 64 63 61 73 74 20 66 61     RNB Broadcast fa
     8b9:	69 6c 65 64 20 5b 20 25 30 32 68 58 20 5d 0d 0a     iled [ %02hX ]..
     8c9:	00                                                  .

000008ca <__c.4917>:
     8ca:	45 52 52 4f 52 3a 20 50 6f 73 74 2d 72 65 74 75     ERROR: Post-retu
     8da:	72 6e 2c 20 74 61 73 6b 20 73 74 6f 72 61 67 65     rn, task storage
     8ea:	20 63 6f 6e 73 69 73 74 65 6e 63 79 20 63 68 65      consistency che
     8fa:	63 6b 20 66 61 69 6c 75 72 65 2e 0d 0a 00           ck failure....

00000908 <__c.4912>:
     908:	50 6f 73 74 2d 63 61 6c 6c 2c 20 74 61 73 6b 20     Post-call, task 
     918:	25 58 20 68 61 73 20 6e 65 78 74 5f 70 74 72 20     %X has next_ptr 
     928:	70 6f 69 6e 74 69 6e 67 20 6f 75 74 73 69 64 65     pointing outside
     938:	20 6f 66 20 61 72 72 61 79 2e 0d 0a 00               of array....

00000945 <__c.4897>:
     945:	45 52 52 4f 52 3a 20 50 72 65 2d 63 61 6c 6c 2c     ERROR: Pre-call,
     955:	20 74 61 73 6b 20 73 74 6f 72 61 67 65 20 63 6f      task storage co
     965:	6e 73 69 73 74 65 6e 63 79 20 63 68 65 63 6b 20     nsistency check 
     975:	66 61 69 6c 75 72 65 2e 0d 0a 00                    failure....

00000980 <__c.4892>:
     980:	50 72 65 2d 63 61 6c 6c 2c 20 74 61 73 6b 20 68     Pre-call, task h
     990:	61 73 20 6e 65 78 74 5f 70 74 72 20 70 6f 69 6e     as next_ptr poin
     9a0:	74 69 6e 67 20 6f 75 74 73 69 64 65 20 6f 66 20     ting outside of 
     9b0:	61 72 72 61 79 2e 0d 0a 00                          array....

000009b9 <__c.4876>:
     9b9:	09 54 61 73 6b 20 25 70 20 28 25 70 29 20 73 63     .Task %p (%p) sc
     9c9:	68 65 64 75 6c 65 64 20 61 74 20 25 6c 75 20 77     heduled at %lu w
     9d9:	69 74 68 20 70 65 72 69 6f 64 20 25 6c 75 2c 20     ith period %lu, 
     9e9:	25 6c 75 20 63 75 72 72 65 6e 74 0d 0a 00           %lu current...

000009f7 <__c.4874>:
     9f7:	54 61 73 6b 20 51 75 65 75 65 20 28 25 68 75 20     Task Queue (%hu 
     a07:	74 61 73 6b 73 2c 20 25 68 75 20 65 78 65 63 75     tasks, %hu execu
     a17:	74 69 6e 67 29 3a 0d 0a 00                          ting):...

00000a20 <__c.4848>:
     a20:	4e 65 77 20 54 61 73 6b 20 25 70 20 28 25 70 29     New Task %p (%p)
     a30:	20 73 63 68 65 64 75 6c 65 64 20 61 74 20 25 6c      scheduled at %l
     a40:	75 20 77 69 74 68 20 70 65 72 69 6f 64 20 25 6c     u with period %l
     a50:	75 2c 20 25 6c 75 20 63 75 72 72 65 6e 74 0d 0a     u, %lu current..
     a60:	00                                                  .

00000a61 <__c.4846>:
     a61:	45 52 52 4f 52 21 20 54 61 73 6b 20 6c 69 73 74     ERROR! Task list
     a71:	20 68 61 73 20 73 65 6c 66 2d 72 65 66 65 72 65      has self-refere
     a81:	6e 63 65 2e 0d 0a 00                                nce....

00000a88 <__c.4832>:
     a88:	45 52 52 4f 52 3a 20 54 61 73 6b 20 73 63 68 65     ERROR: Task sche
     a98:	64 75 6c 65 64 20 66 6f 72 20 61 20 74 69 6d 65     duled for a time
     aa8:	20 69 6e 20 74 68 65 20 70 61 73 74 2e 0d 0a 00      in the past....

00000ab8 <__c.4830>:
     ab8:	45 52 52 4f 52 3a 20 73 63 68 65 64 75 6c 65 72     ERROR: scheduler
     ac8:	5f 6d 61 6c 6c 6f 63 20 72 65 74 75 72 6e 65 64     _malloc returned
     ad8:	20 61 20 6e 65 77 5f 74 61 73 6b 20 70 6f 69 6e      a new_task poin
     ae8:	74 65 72 20 6f 75 74 73 69 64 65 20 6f 66 20 74     ter outside of t
     af8:	68 65 20 74 61 73 6b 20 73 74 6f 72 61 67 65 20     he task storage 
     b08:	61 72 72 61 79 2e 0d 0a 00                          array....

00000b11 <__c.4828>:
     b11:	45 52 52 4f 52 3a 20 4e 6f 20 65 6d 70 74 79 20     ERROR: No empty 
     b21:	73 70 6f 74 20 66 6f 75 6e 64 20 69 6e 20 73 63     spot found in sc
     b31:	68 65 64 75 6c 65 72 5f 6d 61 6c 6c 6f 63 2c 20     heduler_malloc, 
     b41:	62 75 74 20 6e 75 6d 5f 74 61 73 6b 73 20 77 61     but num_tasks wa
     b51:	73 6e 27 74 20 67 72 65 61 74 65 72 20 74 68 61     sn't greater tha
     b61:	6e 20 6f 72 20 65 71 75 61 6c 20 6d 61 78 5f 74     n or equal max_t
     b71:	61 73 6b 73 2e 0d 0a 00                             asks....

00000b79 <__c.4791>:
     b79:	09 41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 72     .Attempting to r
     b89:	65 73 74 6f 72 65 20 74 61 73 6b 5f 6c 69 73 74     estore task_list
     b99:	2e 0d 0a 09 49 66 20 79 6f 75 20 6f 6e 6c 79 20     ....If you only 
     ba9:	73 65 65 20 74 68 69 73 20 6d 65 73 73 61 67 65     see this message
     bb9:	20 72 61 72 65 6c 79 2c 20 64 6f 6e 27 74 20 77      rarely, don't w
     bc9:	6f 72 72 79 20 74 6f 6f 20 6d 75 63 68 2e 0d 0a     orry too much...
     bd9:	00                                                  .

00000bda <__c.4766>:
     bda:	45 52 52 4f 52 3a 20 49 6e 20 73 63 68 65 64 75     ERROR: In schedu
     bea:	6c 65 72 5f 66 72 65 65 2c 20 74 67 74 20 28 25     ler_free, tgt (%
     bfa:	58 29 20 77 61 73 20 6f 75 74 73 69 64 65 20 76     X) was outside v
     c0a:	61 6c 69 64 20 54 61 73 6b 2a 20 72 61 6e 67 65     alid Task* range
     c1a:	2e 0d 0a 00                                         ....

00000c1e <__c.5550>:
     c1e:	4d 65 73 73 61 67 65 20 6c 65 6e 67 74 68 20 77     Message length w
     c2e:	61 73 20 25 7a 20 63 68 61 72 73 2c 20 77 68 69     as %z chars, whi
     c3e:	63 68 20 65 78 63 65 65 64 73 20 74 68 65 20 6d     ch exceeds the m
     c4e:	61 78 69 6d 75 6d 20 6f 66 20 25 75 00              aximum of %u.

00000c5b <__c.5545>:
     c5b:	42 72 6f 61 64 63 61 73 74 69 6e 67 20 63 6f 6d     Broadcasting com
     c6b:	6d 61 6e 64 20 74 6f 20 25 30 34 58 3a 20 22 25     mand to %04X: "%
     c7b:	73 22 2c 20 6f 66 20 6c 65 6e 67 74 68 20 25 69     s", of length %i
     c8b:	2e 0d 0a 00                                         ....

00000c8f <__c.5536>:
     c8f:	42 72 6f 61 64 63 61 73 74 69 6e 67 20 63 6f 6d     Broadcasting com
     c9f:	6d 61 6e 64 3a 20 22 25 73 22 2c 20 6f 66 20 6c     mand: "%s", of l
     caf:	65 6e 67 74 68 20 25 69 2e 0d 0a 00                 ength %i....

00000cbb <__c.5531>:
     cbb:	4d 79 20 49 44 20 69 73 3a 20 25 30 34 58 0d 0a     My ID is: %04X..
     ccb:	00                                                  .

00000ccc <__c.5499>:
     ccc:	47 6f 74 20 61 64 6a 75 73 74 5f 6d 6f 74 6f 72     Got adjust_motor
     cdc:	73 20 63 6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63     s command. direc
     cec:	74 69 6f 6e 3a 20 25 68 75 2c 20 4e 65 77 20 53     tion: %hu, New S
     cfc:	65 74 74 69 6e 67 73 3a 20 28 25 64 2c 20 25 64     ettings: (%d, %d
     d0c:	2c 20 25 64 29 0d 0a 00                             , %d)...

00000d14 <__c.5497>:
     d14:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d24:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     d34:	6c 2e 0d 0a 00                                      l....

00000d39 <__c.5495>:
     d39:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d49:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     d59:	61 6c 2e 0d 0a 00                                   al....

00000d5f <__c.5493>:
     d5f:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d6f:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     d7f:	6c 2e 0d 0a 00                                      l....

00000d84 <__c.5491>:
     d84:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     d94:	6f 74 3a 20 25 68 75 2e 0d 0a 00                    ot: %hu....

00000d9f <__c.5488>:
     d9f:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     daf:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     dbf:	6e 2e 0d 0a 00                                      n....

00000dc4 <__c.5478>:
     dc4:	47 6f 74 20 73 65 74 5f 6d 6f 74 6f 72 73 20 63     Got set_motors c
     dd4:	6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63 74 69 6f     ommand. directio
     de4:	6e 3a 20 25 68 75 2c 20 76 61 6c 73 3a 20 28 25     n: %hu, vals: (%
     df4:	64 2c 20 25 64 2c 20 25 64 29 0d 0a 00              d, %d, %d)...

00000e01 <__c.5476>:
     e01:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e11:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     e21:	6c 2e 0d 0a 00                                      l....

00000e26 <__c.5474>:
     e26:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e36:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     e46:	61 6c 2e 0d 0a 00                                   al....

00000e4c <__c.5472>:
     e4c:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e5c:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     e6c:	6c 2e 0d 0a 00                                      l....

00000e71 <__c.5470>:
     e71:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     e81:	6f 74 3a 20 25 68 75 2e 0d 0a 00                    ot: %hu....

00000e8c <__c.5467>:
     e8c:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e9c:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     eac:	6e 2e 0d 0a 00                                      n....

00000eb1 <__c.5448>:
     eb1:	72 3a 20 25 68 75 2c 20 67 3a 20 25 68 75 2c 20     r: %hu, g: %hu, 
     ec1:	62 3a 20 25 68 75 0d 0a 00                          b: %hu...

00000eca <__c.5433>:
     eca:	77 61 6c 6b 20 64 69 72 65 63 74 69 6f 6e 20 25     walk direction %
     eda:	68 75 2c 20 6e 75 6d 5f 73 74 65 70 73 20 25 75     hu, num_steps %u
     eea:	0d 0a 00                                            ...

00000eed <__c.5413>:
     eed:	70 72 69 6e 74 5f 6d 6f 74 6f 72 5f 73 65 74 74     print_motor_sett
     efd:	69 6e 67 73 00                                      ings.

00000f02 <__c.5411>:
     f02:	77 72 69 74 65 5f 6d 6f 74 6f 72 5f 73 65 74 74     write_motor_sett
     f12:	69 6e 67 73 00                                      ings.

00000f17 <__c.5409>:
     f17:	72 65 73 65 74 00                                   reset.

00000f1d <__c.5407>:
     f1d:	74 61 73 6b 73 00                                   tasks.

00000f23 <__c.5405>:
     f23:	74 67 74 00                                         tgt.

00000f27 <__c.5403>:
     f27:	6d 73 67 5f 74 73 74 00                             msg_tst.

00000f2f <__c.5401>:
     f2f:	6d 73 67 00                                         msg.

00000f33 <__c.5399>:
     f33:	74 67 74 5f 63 6d 64 00                             tgt_cmd.

00000f3b <__c.5397>:
     f3b:	63 6d 64 00                                         cmd.

00000f3f <__c.5395>:
     f3f:	62 72 6f 61 64 63 61 73 74 5f 69 64 00              broadcast_id.

00000f4c <__c.5393>:
     f4c:	67 65 74 5f 69 64 00                                get_id.

00000f53 <__c.5391>:
     f53:	73 65 74 5f 6c 65 64 00                             set_led.

00000f5b <__c.5389>:
     f5b:	72 6e 62 5f 62 00                                   rnb_b.

00000f61 <__c.5387>:
     f61:	73 65 74 5f 64 69 73 74 5f 70 65 72 5f 73 74 65     set_dist_per_ste
     f71:	70 00                                               p.

00000f73 <__c.5385>:
     f73:	61 64 6a 5f 6d 6f 74 6f 72 73 00                    adj_motors.

00000f7e <__c.5383>:
     f7e:	73 65 74 5f 6d 6f 74 6f 72 73 00                    set_motors.

00000f89 <__c.5381>:
     f89:	73 74 6f 70 5f 77 61 6c 6b 00                       stop_walk.

00000f93 <__c.5379>:
     f93:	63 6f 6c 6c 00                                      coll.

00000f98 <__c.5377>:
     f98:	73 65 74 5f 69 72 00                                set_ir.

00000f9f <__c.5375>:
     f9f:	67 65 74 5f 72 67 62 00                             get_rgb.

00000fa7 <__c.5373>:
     fa7:	77 61 6c 6b 00                                      walk.

00000fac <__c.5371>:
     fac:	6d 6f 76 65 5f 73 74 65 70 73 00                    move_steps.

00000fb7 <CMD_NOT_RECOGNIZED_STR>:
     fb7:	09 43 6f 6d 6d 61 6e 64 20 28 20 25 73 20 29 20     .Command ( %s ) 
     fc7:	6e 6f 74 20 72 65 63 6f 67 6e 69 7a 65 64 2e 0d     not recognized..
     fd7:	0a 00                                               ..

00000fd9 <__c.2529>:
     fd9:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     fe9:	47 00                                               G.

00000feb <pstr_an>:
     feb:	61 6e 00                                            an.

00000fee <pstr_nfinity>:
     fee:	6e 66 69 6e 69 74 79 00                             nfinity.

00000ff6 <pwr_m10>:
     ff6:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1006:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000100e <pwr_p10>:
    100e:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    101e:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00001026 <__ctors_end>:
    1026:	11 24       	eor	r1, r1
    1028:	1f be       	out	0x3f, r1	; 63
    102a:	cf ef       	ldi	r28, 0xFF	; 255
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	df e3       	ldi	r29, 0x3F	; 63
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	00 e0       	ldi	r16, 0x00	; 0
    1034:	0c bf       	out	0x3c, r16	; 60

00001036 <__do_copy_data>:
    1036:	12 e2       	ldi	r17, 0x22	; 34
    1038:	a0 e0       	ldi	r26, 0x00	; 0
    103a:	b0 e2       	ldi	r27, 0x20	; 32
    103c:	e6 e1       	ldi	r30, 0x16	; 22
    103e:	f2 ea       	ldi	r31, 0xA2	; 162
    1040:	00 e0       	ldi	r16, 0x00	; 0
    1042:	0b bf       	out	0x3b, r16	; 59
    1044:	02 c0       	rjmp	.+4      	; 0x104a <__do_copy_data+0x14>
    1046:	07 90       	elpm	r0, Z+
    1048:	0d 92       	st	X+, r0
    104a:	ae 35       	cpi	r26, 0x5E	; 94
    104c:	b1 07       	cpc	r27, r17
    104e:	d9 f7       	brne	.-10     	; 0x1046 <__do_copy_data+0x10>

00001050 <__do_clear_bss>:
    1050:	26 e2       	ldi	r18, 0x26	; 38
    1052:	ae e5       	ldi	r26, 0x5E	; 94
    1054:	b2 e2       	ldi	r27, 0x22	; 34
    1056:	01 c0       	rjmp	.+2      	; 0x105a <.do_clear_bss_start>

00001058 <.do_clear_bss_loop>:
    1058:	1d 92       	st	X+, r1

0000105a <.do_clear_bss_start>:
    105a:	a2 33       	cpi	r26, 0x32	; 50
    105c:	b2 07       	cpc	r27, r18
    105e:	e1 f7       	brne	.-8      	; 0x1058 <.do_clear_bss_loop>
    1060:	0e 94 bb 09 	call	0x1376	; 0x1376 <main>
    1064:	0c 94 09 51 	jmp	0xa212	; 0xa212 <_exit>

00001068 <__bad_interrupt>:
    1068:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000106c <getTime>:

.extern rtc_epoch
; Gets the time as an atomic operation
.global getTime
getTime:
	in		r0,_SFR_IO_ADDR(SREG)		; Save the state of the status register
    106c:	0f b6       	in	r0, 0x3f	; 63
	cli									; Disable interrupts
    106e:	f8 94       	cli
	lds		r22, RTC_CNT				; Load low byte into return value
    1070:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
	lds		r23, RTC_CNT+1
    1074:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	lds		r24, rtc_epoch				; epoch 16-bit high word
    1078:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <rtc_epoch>
	lds		r25, rtc_epoch+1
    107c:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <rtc_epoch+0x1>
	out		_SFR_IO_ADDR(SREG), r0		; Restore status register (including re-enabling interrupts if necessary)
    1080:	0f be       	out	0x3f, r0	; 63
	ret
    1082:	08 95       	ret

00001084 <loop>:


/*
 * the code in this function will be called repeatedly, as fast as it can execute.
 */
void loop(){
    1084:	08 95       	ret

00001086 <handleMsg>:

/*
 * after each pass through loop(), the robot checks for all mes sages it has 
 * received, and calls this function once for each message.
 */
void handleMsg(irMsg* msgStruct){
    1086:	08 95       	ret

00001088 <delayMS>:
#include "droplet_base.h"

void delayMS(uint16_t ms){
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	7c 01       	movw	r14, r24
	uint32_t cur_time, end_time;
	cli(); cur_time = getTime(); sei();
    1092:	f8 94       	cli
    1094:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1098:	78 94       	sei
	end_time = cur_time + ms;
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	2e 0d       	add	r18, r14
    10a0:	3f 1d       	adc	r19, r15
    10a2:	41 1d       	adc	r20, r1
    10a4:	51 1d       	adc	r21, r1
    10a6:	69 01       	movw	r12, r18
    10a8:	7a 01       	movw	r14, r20
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <delayMS+0x2e>
		cli();
		if (getTime() >= end_time){
			sei();
			return;
		}
		sei();
    10ac:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ae:	3a e6       	ldi	r19, 0x6A	; 106
    10b0:	3a 95       	dec	r19
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <delayMS+0x28>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <delayMS+0x2e>
void delayMS(uint16_t ms){
	uint32_t cur_time, end_time;
	cli(); cur_time = getTime(); sei();
	end_time = cur_time + ms;
	while (1){
		cli();
    10b6:	f8 94       	cli
		if (getTime() >= end_time){
    10b8:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    10bc:	6c 15       	cp	r22, r12
    10be:	7d 05       	cpc	r23, r13
    10c0:	8e 05       	cpc	r24, r14
    10c2:	9f 05       	cpc	r25, r15
    10c4:	98 f3       	brcs	.-26     	; 0x10ac <delayMS+0x24>
			sei();
    10c6:	78 94       	sei
			return;
		}
		sei();
		delay_us(10);
	}
}
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	08 95       	ret

000010d2 <handle_reprogramming>:
	uint8_t len = strlen(initial_msg);
	irSend(ALL_DIRS,initial_msg,len);
	NONATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		waitForTransmission(ALL_DIRS);
	}
}
    10d2:	2f 92       	push	r2
    10d4:	3f 92       	push	r3
    10d6:	4f 92       	push	r4
    10d8:	5f 92       	push	r5
    10da:	6f 92       	push	r6
    10dc:	7f 92       	push	r7
    10de:	8f 92       	push	r8
    10e0:	9f 92       	push	r9
    10e2:	af 92       	push	r10
    10e4:	bf 92       	push	r11
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	28 97       	sbiw	r28, 0x08	; 8
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	3c 01       	movw	r6, r24
    1102:	8d b6       	in	r8, 0x3d	; 61
    1104:	9e b6       	in	r9, 0x3e	; 62
    1106:	80 91 36 24 	lds	r24, 0x2436	; 0x802436 <number_of_hex>
    110a:	81 50       	subi	r24, 0x01	; 1
    110c:	80 93 36 24 	sts	0x2436, r24	; 0x802436 <number_of_hex>
    1110:	d3 01       	movw	r26, r6
    1112:	16 96       	adiw	r26, 0x06	; 6
    1114:	ed 91       	ld	r30, X+
    1116:	fc 91       	ld	r31, X
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	80 81       	ld	r24, Z
    111c:	8e 83       	std	Y+6, r24	; 0x06
    111e:	81 81       	ldd	r24, Z+1	; 0x01
    1120:	8f 83       	std	Y+7, r24	; 0x07
    1122:	18 86       	std	Y+8, r1	; 0x08
    1124:	40 e1       	ldi	r20, 0x10	; 16
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	ce 01       	movw	r24, r28
    112e:	06 96       	adiw	r24, 0x06	; 6
    1130:	0e 94 d2 4c 	call	0x99a4	; 0x99a4 <strtoul>
    1134:	c6 2e       	mov	r12, r22
    1136:	f3 01       	movw	r30, r6
    1138:	a6 81       	ldd	r26, Z+6	; 0x06
    113a:	b7 81       	ldd	r27, Z+7	; 0x07
    113c:	12 96       	adiw	r26, 0x02	; 2
    113e:	fe 01       	movw	r30, r28
    1140:	31 96       	adiw	r30, 0x01	; 1
    1142:	9e 01       	movw	r18, r28
    1144:	2b 5f       	subi	r18, 0xFB	; 251
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	8d 91       	ld	r24, X+
    114a:	81 93       	st	Z+, r24
    114c:	2e 17       	cp	r18, r30
    114e:	3f 07       	cpc	r19, r31
    1150:	d9 f7       	brne	.-10     	; 0x1148 <handle_reprogramming+0x76>
    1152:	1d 82       	std	Y+5, r1	; 0x05
    1154:	40 e1       	ldi	r20, 0x10	; 16
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	ce 01       	movw	r24, r28
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	0e 94 d2 4c 	call	0x99a4	; 0x99a4 <strtoul>
    1164:	d1 2c       	mov	r13, r1
    1166:	2d b7       	in	r18, 0x3d	; 61
    1168:	3e b7       	in	r19, 0x3e	; 62
    116a:	2c 19       	sub	r18, r12
    116c:	3d 09       	sbc	r19, r13
    116e:	2d bf       	out	0x3d, r18	; 61
    1170:	3e bf       	out	0x3e, r19	; 62
    1172:	ad b7       	in	r26, 0x3d	; 61
    1174:	be b7       	in	r27, 0x3e	; 62
    1176:	11 96       	adiw	r26, 0x01	; 1
    1178:	7d 01       	movw	r14, r26
    117a:	1b 01       	movw	r2, r22
    117c:	2c 01       	movw	r4, r24
    117e:	44 24       	eor	r4, r4
    1180:	55 24       	eor	r5, r5
    1182:	96 01       	movw	r18, r12
    1184:	ad 01       	movw	r20, r26
    1186:	c2 01       	movw	r24, r4
    1188:	b1 01       	movw	r22, r2
    118a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <nvm_flash_read_buffer>
    118e:	56 01       	movw	r10, r12
    1190:	b3 e0       	ldi	r27, 0x03	; 3
    1192:	ab 0e       	add	r10, r27
    1194:	b1 1c       	adc	r11, r1
    1196:	aa 0c       	add	r10, r10
    1198:	bb 1c       	adc	r11, r11
    119a:	e6 e0       	ldi	r30, 0x06	; 6
    119c:	ae 16       	cp	r10, r30
    119e:	b1 04       	cpc	r11, r1
    11a0:	41 f1       	breq	.+80     	; 0x11f2 <handle_reprogramming+0x120>
    11a2:	10 91 60 22 	lds	r17, 0x2260	; 0x802260 <flashBufferPos>
    11a6:	06 e0       	ldi	r16, 0x06	; 6
    11a8:	86 e0       	ldi	r24, 0x06	; 6
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	d3 01       	movw	r26, r6
    11ae:	16 96       	adiw	r26, 0x06	; 6
    11b0:	ed 91       	ld	r30, X+
    11b2:	fc 91       	ld	r31, X
    11b4:	17 97       	sbiw	r26, 0x07	; 7
    11b6:	e8 0f       	add	r30, r24
    11b8:	f9 1f       	adc	r31, r25
    11ba:	80 81       	ld	r24, Z
    11bc:	8e 83       	std	Y+6, r24	; 0x06
    11be:	81 81       	ldd	r24, Z+1	; 0x01
    11c0:	8f 83       	std	Y+7, r24	; 0x07
    11c2:	18 86       	std	Y+8, r1	; 0x08
    11c4:	40 e1       	ldi	r20, 0x10	; 16
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	ce 01       	movw	r24, r28
    11ce:	06 96       	adiw	r24, 0x06	; 6
    11d0:	0e 94 d2 4c 	call	0x99a4	; 0x99a4 <strtoul>
    11d4:	f7 01       	movw	r30, r14
    11d6:	e1 0f       	add	r30, r17
    11d8:	f1 1d       	adc	r31, r1
    11da:	60 83       	st	Z, r22
    11dc:	10 91 60 22 	lds	r17, 0x2260	; 0x802260 <flashBufferPos>
    11e0:	1f 5f       	subi	r17, 0xFF	; 255
    11e2:	10 93 60 22 	sts	0x2260, r17	; 0x802260 <flashBufferPos>
    11e6:	0e 5f       	subi	r16, 0xFE	; 254
    11e8:	80 2f       	mov	r24, r16
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	8a 15       	cp	r24, r10
    11ee:	9b 05       	cpc	r25, r11
    11f0:	ec f2       	brlt	.-70     	; 0x11ac <handle_reprogramming+0xda>
    11f2:	01 e0       	ldi	r16, 0x01	; 1
    11f4:	96 01       	movw	r18, r12
    11f6:	a7 01       	movw	r20, r14
    11f8:	c2 01       	movw	r24, r4
    11fa:	b1 01       	movw	r22, r2
    11fc:	0e 94 ee 21 	call	0x43dc	; 0x43dc <nvm_flash_erase_and_write_buffer>
    1200:	24 e0       	ldi	r18, 0x04	; 4
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	a7 01       	movw	r20, r14
    1206:	c2 01       	movw	r24, r4
    1208:	b1 01       	movw	r22, r2
    120a:	0e 94 d7 21 	call	0x43ae	; 0x43ae <nvm_flash_read_buffer>
    120e:	c1 14       	cp	r12, r1
    1210:	d1 04       	cpc	r13, r1
    1212:	a1 f0       	breq	.+40     	; 0x123c <handle_reprogramming+0x16a>
    1214:	ce 0c       	add	r12, r14
    1216:	df 1c       	adc	r13, r15
    1218:	07 e7       	ldi	r16, 0x77	; 119
    121a:	10 e2       	ldi	r17, 0x20	; 32
    121c:	f7 01       	movw	r30, r14
    121e:	81 91       	ld	r24, Z+
    1220:	7f 01       	movw	r14, r30
    1222:	1f 92       	push	r1
    1224:	8f 93       	push	r24
    1226:	1f 93       	push	r17
    1228:	0f 93       	push	r16
    122a:	0e 94 f4 4f 	call	0x9fe8	; 0x9fe8 <printf>
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	ce 14       	cp	r12, r14
    1238:	df 04       	cpc	r13, r15
    123a:	81 f7       	brne	.-32     	; 0x121c <handle_reprogramming+0x14a>
    123c:	85 e7       	ldi	r24, 0x75	; 117
    123e:	90 e2       	ldi	r25, 0x20	; 32
    1240:	0e 94 36 50 	call	0xa06c	; 0xa06c <puts>
    1244:	80 91 36 24 	lds	r24, 0x2436	; 0x802436 <number_of_hex>
    1248:	81 11       	cpse	r24, r1
    124a:	0f c0       	rjmp	.+30     	; 0x126a <handle_reprogramming+0x198>
    124c:	10 92 fc 23 	sts	0x23FC, r1	; 0x8023fc <reprogramming>
    1250:	88 ed       	ldi	r24, 0xD8	; 216
    1252:	84 bf       	out	0x34, r24	; 52
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    125a:	8e e7       	ldi	r24, 0x7E	; 126
    125c:	90 e2       	ldi	r25, 0x20	; 32
    125e:	9f 93       	push	r25
    1260:	8f 93       	push	r24
    1262:	0e 94 f4 4f 	call	0x9fe8	; 0x9fe8 <printf>
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	8d be       	out	0x3d, r8	; 61
    126c:	9e be       	out	0x3e, r9	; 62
    126e:	28 96       	adiw	r28, 0x08	; 8
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	bf 90       	pop	r11
    1286:	af 90       	pop	r10
    1288:	9f 90       	pop	r9
    128a:	8f 90       	pop	r8
    128c:	7f 90       	pop	r7
    128e:	6f 90       	pop	r6
    1290:	5f 90       	pop	r5
    1292:	4f 90       	pop	r4
    1294:	3f 90       	pop	r3
    1296:	2f 90       	pop	r2
    1298:	08 95       	ret

0000129a <send_hex>:
    129a:	cf 93       	push	r28
    129c:	e7 e3       	ldi	r30, 0x37	; 55
    129e:	f4 e2       	ldi	r31, 0x24	; 36
    12a0:	01 90       	ld	r0, Z+
    12a2:	00 20       	and	r0, r0
    12a4:	e9 f7       	brne	.-6      	; 0x12a0 <send_hex+0x6>
    12a6:	31 97       	sbiw	r30, 0x01	; 1
    12a8:	af 01       	movw	r20, r30
    12aa:	47 53       	subi	r20, 0x37	; 55
    12ac:	54 42       	sbci	r21, 0x24	; 36
    12ae:	67 e3       	ldi	r22, 0x37	; 55
    12b0:	74 e2       	ldi	r23, 0x24	; 36
    12b2:	8f e3       	ldi	r24, 0x3F	; 63
    12b4:	0e 94 8f 13 	call	0x271e	; 0x271e <irSend>
    12b8:	cf b7       	in	r28, 0x3f	; 63
    12ba:	78 94       	sei
    12bc:	8f e3       	ldi	r24, 0x3F	; 63
    12be:	0e 94 2f 12 	call	0x245e	; 0x245e <waitForTransmission>
    12c2:	cf bf       	out	0x3f, r28	; 63
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <startupLightSequence>:
	PMIC.CTRL |= PMIC_RREN_bm;
	sei();
}

void startupLightSequence(){
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	84 e6       	ldi	r24, 0x64	; 100
    12ce:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    12d2:	84 e6       	ldi	r24, 0x64	; 100
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	64 e6       	ldi	r22, 0x64	; 100
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    12e4:	84 e6       	ldi	r24, 0x64	; 100
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    12ec:	44 e6       	ldi	r20, 0x64	; 100
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    12f6:	84 e6       	ldi	r24, 0x64	; 100
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    12fe:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <ledOff>
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	84 e6       	ldi	r24, 0x64	; 100
    1308:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    130c:	84 e6       	ldi	r24, 0x64	; 100
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	64 e6       	ldi	r22, 0x64	; 100
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    131e:	84 e6       	ldi	r24, 0x64	; 100
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1326:	44 e6       	ldi	r20, 0x64	; 100
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    1330:	84 e6       	ldi	r24, 0x64	; 100
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1338:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <ledOff>
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	84 e6       	ldi	r24, 0x64	; 100
    1342:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    1346:	84 e6       	ldi	r24, 0x64	; 100
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	64 e6       	ldi	r22, 0x64	; 100
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    1358:	84 e6       	ldi	r24, 0x64	; 100
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1360:	44 e6       	ldi	r20, 0x64	; 100
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    136a:	84 e6       	ldi	r24, 0x64	; 100
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1372:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <ledOff>

00001376 <main>:
	startupLightSequence();
	
	irCommInit();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
}

int main(void){
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	c0 54       	subi	r28, 0x40	; 64
    1380:	d1 09       	sbc	r29, r1
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	de bf       	out	0x3e, r29	; 62
/**
 * \brief Initializes all the subsystems for this Droplet. This function MUST be called
 * by the user before using any other functions in the API.
 */ 
static void initAllSystems(void){
	cli();
    1386:	f8 94       	cli
	}
}

inline void Config32MHzClock(void){
	// Set system clock to 32 MHz
	CCP = CCP_IOREG_gc;
    1388:	88 ed       	ldi	r24, 0xD8	; 216
    138a:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    1392:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    1396:	81 ff       	sbrs	r24, 1
    1398:	fc cf       	rjmp	.-8      	; 0x1392 <main+0x1c>
	CCP = CCP_IOREG_gc;
    139a:	88 ed       	ldi	r24, 0xD8	; 216
    139c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	//OSC.RC32KCAL = PRODSIGNATURES_RCOSC32K;
	// Set up real-time clock
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    13a4:	85 e0       	ldi	r24, 0x05	; 5
    13a6:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	while (RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    13aa:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    13ae:	80 fd       	sbrc	r24, 0
    13b0:	fc cf       	rjmp	.-8      	; 0x13aa <main+0x34>
	
	RTC.PER = 0xFFFF;		//(2^16)-1 milliseconds is 65.535 seconds
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	9f ef       	ldi	r25, 0xFF	; 255
    13b6:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    13ba:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>

	// reset RTC to 0, important for after a reboot:
	while(RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    13c4:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    13c8:	80 fd       	sbrc	r24, 0
    13ca:	fc cf       	rjmp	.-8      	; 0x13c4 <main+0x4e>
	RTC.CNT = 0;
    13cc:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    13d0:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	uint16_t crc = 0;
	
	// calculate local id
	// simply crc of user sig row
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};
    13da:	80 e4       	ldi	r24, 0x40	; 64
    13dc:	e0 e2       	ldi	r30, 0x20	; 32
    13de:	f0 e2       	ldi	r31, 0x20	; 32
    13e0:	de 01       	movw	r26, r28
    13e2:	11 96       	adiw	r26, 0x01	; 1
    13e4:	01 90       	ld	r0, Z+
    13e6:	0d 92       	st	X+, r0
    13e8:	8a 95       	dec	r24
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <main+0x6e>
    13ec:	de 01       	movw	r26, r28
    13ee:	11 96       	adiw	r26, 0x01	; 1
    13f0:	9e 01       	movw	r18, r28
    13f2:	2f 5b       	subi	r18, 0xBF	; 191
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
}
static void calculateIdNumber(void){
	INIT_DEBUG_PRINT("get id number\r\n");

	uint32_t pgm_bytes = 0;
	uint16_t crc = 0;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++){
		pgm_bytes = pgm_read_word_far(addrs[i]);
    13fa:	4d 91       	ld	r20, X+
    13fc:	5d 91       	ld	r21, X+
    13fe:	6d 91       	ld	r22, X+
    1400:	7d 91       	ld	r23, X+
    1402:	6b bf       	out	0x3b, r22	; 59
    1404:	fa 01       	movw	r30, r20
    1406:	47 91       	elpm	r20, Z+
    1408:	56 91       	elpm	r21, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    140a:	84 27       	eor	r24, r20
    140c:	48 2f       	mov	r20, r24
    140e:	42 95       	swap	r20
    1410:	48 27       	eor	r20, r24
    1412:	04 2e       	mov	r0, r20
    1414:	46 95       	lsr	r20
    1416:	46 95       	lsr	r20
    1418:	40 25       	eor	r20, r0
    141a:	04 2e       	mov	r0, r20
    141c:	46 95       	lsr	r20
    141e:	40 25       	eor	r20, r0
    1420:	47 70       	andi	r20, 0x07	; 7
    1422:	08 2e       	mov	r0, r24
    1424:	89 2f       	mov	r24, r25
    1426:	46 95       	lsr	r20
    1428:	07 94       	ror	r0
    142a:	47 95       	ror	r20
    142c:	90 2d       	mov	r25, r0
    142e:	84 27       	eor	r24, r20
    1430:	06 94       	lsr	r0
    1432:	47 95       	ror	r20
    1434:	90 25       	eor	r25, r0
    1436:	84 27       	eor	r24, r20
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++){
    1438:	2a 17       	cp	r18, r26
    143a:	3b 07       	cpc	r19, r27
    143c:	f1 f6       	brne	.-68     	; 0x13fa <main+0x84>
		pgm_bytes = pgm_read_word_far(addrs[i]);
		crc = _crc16_update(crc, (uint16_t)(pgm_bytes&0xFF));
	}

	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    143e:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	droplet_ID = crc;
    1442:	80 93 ec 23 	sts	0x23EC, r24	; 0x8023ec <droplet_ID>
    1446:	90 93 ed 23 	sts	0x23ED, r25	; 0x8023ed <droplet_ID+0x1>
	cli();
	Config32MHzClock();
	
	calculateIdNumber();
	
	schedulerInit();			INIT_DEBUG_PRINT("SCHEDULER INIT\r\n");
    144a:	0e 94 94 32 	call	0x6528	; 0x6528 <schedulerInit>
	pcCommInit();				INIT_DEBUG_PRINT("PC COM INIT\r\n");
    144e:	0e 94 c6 22 	call	0x458c	; 0x458c <pcCommInit>
	rgbLEDinit();				INIT_DEBUG_PRINT("LED INIT\r\n");
    1452:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <rgbLEDinit>
	powerInit();				INIT_DEBUG_PRINT("POWER INIT\r\n");
    1456:	0e 94 b6 23 	call	0x476c	; 0x476c <powerInit>
	i2cInit();					INIT_DEBUG_PRINT("I2C INIT\r\n");
    145a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <i2cInit>

	droplet_ID = crc;
}

static void enableInterrupts(void){
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// enable low level interrupts
    145e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1462:	81 60       	ori	r24, 0x01	; 1
    1464:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// enable medium level interrupts	(e.g. TXCIF)
    1468:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    146c:	82 60       	ori	r24, 0x02	; 2
    146e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// enable high level interrupts		(e.g. RTC_OVF)
    1472:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1476:	84 60       	ori	r24, 0x04	; 4
    1478:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_RREN_bm;
    147c:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1480:	80 68       	ori	r24, 0x80	; 128
    1482:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    1486:	78 94       	sei
	powerInit();				INIT_DEBUG_PRINT("POWER INIT\r\n");
	i2cInit();					INIT_DEBUG_PRINT("I2C INIT\r\n");
	
	enableInterrupts();	
	
	rangeAlgsInit();			INIT_DEBUG_PRINT("RANGE ALGORITHMS INIT\r\n");
    1488:	0e 94 96 24 	call	0x492c	; 0x492c <rangeAlgsInit>
	rgbSensorInit();			INIT_DEBUG_PRINT("RGB SENSE INIT\r\n");
    148c:	0e 94 cb 31 	call	0x6396	; 0x6396 <rgbSensorInit>
	irLedInit();				INIT_DEBUG_PRINT("IR LED INIT\r\n");
    1490:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <irLedInit>
	irSensorInit();			INIT_DEBUG_PRINT("IR SENSE INIT\r\n");
    1494:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <irSensorInit>
	#ifdef AUDIO_DROPLET
		speakerInit();			INIT_DEBUG_PRINT("SPEAKER INIT\r\n");
		micInit();				INIT_DEBUG_PRINT("MIC INIT\r\n"); //Must occur after ir_sensor_init.
	#endif
	
	motorInit();				INIT_DEBUG_PRINT("MOTOR INIT\r\n");
    1498:	0e 94 ce 20 	call	0x419c	; 0x419c <motorInit>
	randomInit();				INIT_DEBUG_PRINT("RAND INIT\r\n"); //This uses adc readings for a random seed, and so requires that the adcs have been initialized.
    149c:	0e 94 d7 23 	call	0x47ae	; 0x47ae <randomInit>
	localizationInit();		INIT_DEBUG_PRINT("LOCALIZATION INIT\r\n"); 
    14a0:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <localizationInit>
	
	#ifdef SYNCHRONIZED
		fireflySyncInit();
    14a4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fireflySyncInit>
	#endif

	reprogramming = 0;
    14a8:	10 92 fc 23 	sts	0x23FC, r1	; 0x8023fc <reprogramming>
	
	setAllirPowers(256);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	0e 94 8f 1b 	call	0x371e	; 0x371e <setAllirPowers>

	startupLightSequence();
    14b4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <startupLightSequence>
	
	irCommInit();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
    14b8:	0e 94 a5 10 	call	0x214a	; 0x214a <irCommInit>
}

int main(void){
	initAllSystems();
	init();
    14bc:	0e 94 00 60 	call	0xc000	; 0xc000 <init>
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    14c0:	88 e7       	ldi	r24, 0x78	; 120
    14c2:	28 2e       	mov	r2, r24
    14c4:	84 e0       	ldi	r24, 0x04	; 4
    14c6:	38 2e       	mov	r3, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    14c8:	90 e5       	ldi	r25, 0x50	; 80
    14ca:	89 2e       	mov	r8, r25
    14cc:	94 e0       	ldi	r25, 0x04	; 4
    14ce:	99 2e       	mov	r9, r25
	init();
	while(1){
		loop();
		checkMessages();
		if(taskListCheck()){
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    14d0:	21 ee       	ldi	r18, 0xE1	; 225
    14d2:	42 2e       	mov	r4, r18
    14d4:	24 e0       	ldi	r18, 0x04	; 4
    14d6:	52 2e       	mov	r5, r18

int main(void){
	initAllSystems();
	init();
	while(1){
		loop();
    14d8:	0e 94 42 08 	call	0x1084	; 0x1084 <loop>
 * For each message, it populates an ir_msg struct and calls handle_msg with it.
 */
static void checkMessages(void){
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
    14dc:	80 91 e0 25 	lds	r24, 0x25E0	; 0x8025e0 <userFacingMessagesOvf>
    14e0:	81 11       	cpse	r24, r1
    14e2:	a2 c0       	rjmp	.+324    	; 0x1628 <main+0x2b2>
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
    14e4:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14e6:	f8 94       	cli
		uint16_t crc;
		while(incomingMsgHead != NULL){
    14e8:	00 91 12 26 	lds	r16, 0x2612	; 0x802612 <incomingMsgHead>
    14ec:	10 91 13 26 	lds	r17, 0x2613	; 0x802613 <incomingMsgHead+0x1>
    14f0:	01 15       	cp	r16, r1
    14f2:	11 05       	cpc	r17, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <main+0x182>
    14f6:	87 c0       	rjmp	.+270    	; 0x1606 <main+0x290>
    14f8:	ad b6       	in	r10, 0x3d	; 61
    14fa:	be b6       	in	r11, 0x3e	; 62
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
    14fc:	d8 01       	movw	r26, r16
    14fe:	1c 96       	adiw	r26, 0x0c	; 12
    1500:	4c 91       	ld	r20, X
    1502:	44 23       	and	r20, r20
    1504:	09 f4       	brne	.+2      	; 0x1508 <main+0x192>
    1506:	c2 c0       	rjmp	.+388    	; 0x168c <main+0x316>
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
			}
			char msgData[node->length];
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	8d b7       	in	r24, 0x3d	; 61
    150c:	9e b7       	in	r25, 0x3e	; 62
    150e:	84 1b       	sub	r24, r20
    1510:	95 0b       	sbc	r25, r21
    1512:	8d bf       	out	0x3d, r24	; 61
    1514:	9e bf       	out	0x3e, r25	; 62
    1516:	ad b7       	in	r26, 0x3d	; 61
    1518:	be b7       	in	r27, 0x3e	; 62
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	7d 01       	movw	r14, r26
			memcpy(msgData, node->msg, node->length);
    151e:	f8 01       	movw	r30, r16
    1520:	60 85       	ldd	r22, Z+8	; 0x08
    1522:	71 85       	ldd	r23, Z+9	; 0x09
    1524:	cd 01       	movw	r24, r26
    1526:	0e 94 09 4f 	call	0x9e12	; 0x9e12 <memcpy>
			msgStruct.msg			= msgData;
    152a:	ef 82       	std	Y+7, r14	; 0x07
    152c:	f8 86       	std	Y+8, r15	; 0x08
			msgStruct.arrivalTime	= node->arrivalTime;
    152e:	f8 01       	movw	r30, r16
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	a2 81       	ldd	r26, Z+2	; 0x02
    1536:	b3 81       	ldd	r27, Z+3	; 0x03
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	ab 83       	std	Y+3, r26	; 0x03
    153e:	bc 83       	std	Y+4, r27	; 0x04
			msgStruct.senderID		= node->senderID;
    1540:	84 81       	ldd	r24, Z+4	; 0x04
    1542:	95 81       	ldd	r25, Z+5	; 0x05
    1544:	8d 83       	std	Y+5, r24	; 0x05
    1546:	9e 83       	std	Y+6, r25	; 0x06
			msgStruct.length		= node->length;
    1548:	84 85       	ldd	r24, Z+12	; 0x0c
    154a:	89 87       	std	Y+9, r24	; 0x09
			crc						= node->crc;
    154c:	c6 80       	ldd	r12, Z+6	; 0x06
    154e:	d7 80       	ldd	r13, Z+7	; 0x07
			//While we let user code handle the message we want interrupts to be back on. At this point everything relevant has been copied out of the buffer.
			NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){
    1550:	ff b6       	in	r15, 0x3f	; 63

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    1552:	78 94       	sei
				if(reprogramming)
    1554:	80 91 fc 23 	lds	r24, 0x23FC	; 0x8023fc <reprogramming>
    1558:	88 23       	and	r24, r24
    155a:	09 f4       	brne	.+2      	; 0x155e <main+0x1e8>
    155c:	71 c0       	rjmp	.+226    	; 0x1640 <main+0x2ca>
				{
					setRGB(0,0,250);
    155e:	4a ef       	ldi	r20, 0xFA	; 250
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
					//handle_serial_comm(&msgStruct);
					handle_reprogramming(&msgStruct);
    1568:	ce 01       	movw	r24, r28
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <handle_reprogramming>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1570:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    1572:	78 01       	movw	r14, r16
				else handleMsg(&msgStruct);
			}
			
			MsgNode* tmp = node;
			MsgNode* deleteMe;
			while(tmp->next !=NULL){
    1574:	d7 01       	movw	r26, r14
    1576:	1a 96       	adiw	r26, 0x0a	; 10
    1578:	ed 91       	ld	r30, X+
    157a:	fc 91       	ld	r31, X
    157c:	1b 97       	sbiw	r26, 0x0b	; 11
    157e:	30 97       	sbiw	r30, 0x00	; 0
    1580:	d1 f0       	breq	.+52     	; 0x15b6 <main+0x240>
				uint8_t crcMatches = (tmp->next->crc == crc);
				uint8_t closeTimes = (abs((int32_t)(tmp->next->arrivalTime) - (int32_t)(msgStruct.arrivalTime))) < 30;
    1582:	80 81       	ld	r24, Z
    1584:	91 81       	ldd	r25, Z+1	; 0x01
    1586:	29 81       	ldd	r18, Y+1	; 0x01
    1588:	3a 81       	ldd	r19, Y+2	; 0x02
    158a:	82 1b       	sub	r24, r18
    158c:	93 0b       	sbc	r25, r19
    158e:	83 3e       	cpi	r24, 0xE3	; 227
    1590:	2f ef       	ldi	r18, 0xFF	; 255
    1592:	92 07       	cpc	r25, r18
    1594:	44 f0       	brlt	.+16     	; 0x15a6 <main+0x230>
    1596:	4e 97       	sbiw	r24, 0x1e	; 30
    1598:	34 f4       	brge	.+12     	; 0x15a6 <main+0x230>
				if(crcMatches && closeTimes){
    159a:	86 81       	ldd	r24, Z+6	; 0x06
    159c:	97 81       	ldd	r25, Z+7	; 0x07
    159e:	c8 16       	cp	r12, r24
    15a0:	d9 06       	cpc	r13, r25
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <main+0x230>
    15a4:	52 c0       	rjmp	.+164    	; 0x164a <main+0x2d4>
    15a6:	7f 01       	movw	r14, r30
				else handleMsg(&msgStruct);
			}
			
			MsgNode* tmp = node;
			MsgNode* deleteMe;
			while(tmp->next !=NULL){
    15a8:	d7 01       	movw	r26, r14
    15aa:	1a 96       	adiw	r26, 0x0a	; 10
    15ac:	ed 91       	ld	r30, X+
    15ae:	fc 91       	ld	r31, X
    15b0:	1b 97       	sbiw	r26, 0x0b	; 11
    15b2:	30 97       	sbiw	r30, 0x00	; 0
    15b4:	31 f7       	brne	.-52     	; 0x1582 <main+0x20c>
				}else{
					tmp = tmp->next;
				}

			}
			incomingMsgHead = (volatile MsgNode*)(node->next);
    15b6:	f8 01       	movw	r30, r16
    15b8:	82 85       	ldd	r24, Z+10	; 0x0a
    15ba:	93 85       	ldd	r25, Z+11	; 0x0b
    15bc:	80 93 12 26 	sts	0x2612, r24	; 0x802612 <incomingMsgHead>
    15c0:	90 93 13 26 	sts	0x2613, r25	; 0x802613 <incomingMsgHead+0x1>
			numWaitingMsgs--;
    15c4:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <numWaitingMsgs>
    15c8:	81 50       	subi	r24, 0x01	; 1
    15ca:	80 93 79 24 	sts	0x2479, r24	; 0x802479 <numWaitingMsgs>
			memoryConsumedByBuffer -= (sizeof(MsgNode) + msgStruct.length);
    15ce:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <memoryConsumedByBuffer>
    15d2:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <memoryConsumedByBuffer+0x1>
    15d6:	0d 97       	sbiw	r24, 0x0d	; 13
    15d8:	29 85       	ldd	r18, Y+9	; 0x09
    15da:	82 1b       	sub	r24, r18
    15dc:	91 09       	sbc	r25, r1
    15de:	80 93 23 24 	sts	0x2423, r24	; 0x802423 <memoryConsumedByBuffer>
    15e2:	90 93 24 24 	sts	0x2424, r25	; 0x802424 <memoryConsumedByBuffer+0x1>
	}
	return tmp;
}

inline void myFree(void* ptr){
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    15e6:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15e8:	f8 94       	cli
		free(ptr);
    15ea:	c8 01       	movw	r24, r16
    15ec:	0e 94 49 4c 	call	0x9892	; 0x9892 <free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15f0:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    15f2:	ad be       	out	0x3d, r10	; 61
    15f4:	be be       	out	0x3e, r11	; 62
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
    15f6:	00 91 12 26 	lds	r16, 0x2612	; 0x802612 <incomingMsgHead>
    15fa:	10 91 13 26 	lds	r17, 0x2613	; 0x802613 <incomingMsgHead+0x1>
    15fe:	01 15       	cp	r16, r1
    1600:	11 05       	cpc	r17, r1
    1602:	09 f0       	breq	.+2      	; 0x1606 <main+0x290>
    1604:	79 cf       	rjmp	.-270    	; 0x14f8 <main+0x182>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1606:	7f be       	out	0x3f, r7	; 63
void removeTask(volatile Task_t*); // Removes a task from the queue
void printTaskQueue(void);

//Returns '1' if the next task to run is scheduled for more than 255ms in the past. If this occurs, call task_list_cleanup.
inline uint8_t taskListCheck(void){ 
	if(task_executing)	return 0;
    1608:	80 91 11 26 	lds	r24, 0x2611	; 0x802611 <task_executing>
    160c:	88 23       	and	r24, r24
    160e:	09 f4       	brne	.+2      	; 0x1612 <main+0x29c>
    1610:	46 c0       	rjmp	.+140    	; 0x169e <main+0x328>
		if(taskListCheck()){
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
			printTaskQueue();
			taskListCleanup();
		}
		delayMS(1);	
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>

int main(void){
	initAllSystems();
	init();
	while(1){
		loop();
    161a:	0e 94 42 08 	call	0x1084	; 0x1084 <loop>
 * For each message, it populates an ir_msg struct and calls handle_msg with it.
 */
static void checkMessages(void){
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
    161e:	80 91 e0 25 	lds	r24, 0x25E0	; 0x8025e0 <userFacingMessagesOvf>
    1622:	88 23       	and	r24, r24
    1624:	09 f4       	brne	.+2      	; 0x1628 <main+0x2b2>
    1626:	5e cf       	rjmp	.-324    	; 0x14e4 <main+0x16e>
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
    1628:	26 e0       	ldi	r18, 0x06	; 6
    162a:	20 93 79 24 	sts	0x2479, r18	; 0x802479 <numWaitingMsgs>
		userFacingMessagesOvf=0;
    162e:	10 92 e0 25 	sts	0x25E0, r1	; 0x8025e0 <userFacingMessagesOvf>
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    1632:	3f 92       	push	r3
    1634:	2f 92       	push	r2
    1636:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	52 cf       	rjmp	.-348    	; 0x14e4 <main+0x16e>
				{
					setRGB(0,0,250);
					//handle_serial_comm(&msgStruct);
					handle_reprogramming(&msgStruct);
				} 
				else handleMsg(&msgStruct);
    1640:	ce 01       	movw	r24, r28
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	0e 94 43 08 	call	0x1086	; 0x1086 <handleMsg>
    1648:	93 cf       	rjmp	.-218    	; 0x1570 <main+0x1fa>
			while(tmp->next !=NULL){
				uint8_t crcMatches = (tmp->next->crc == crc);
				uint8_t closeTimes = (abs((int32_t)(tmp->next->arrivalTime) - (int32_t)(msgStruct.arrivalTime))) < 30;
				if(crcMatches && closeTimes){
					deleteMe = tmp->next;
					tmp->next = tmp->next->next;
    164a:	82 85       	ldd	r24, Z+10	; 0x0a
    164c:	93 85       	ldd	r25, Z+11	; 0x0b
    164e:	d7 01       	movw	r26, r14
    1650:	1a 96       	adiw	r26, 0x0a	; 10
    1652:	8d 93       	st	X+, r24
    1654:	9c 93       	st	X, r25
    1656:	1b 97       	sbiw	r26, 0x0b	; 11
					memoryConsumedByBuffer -= (sizeof(MsgNode) + msgStruct.length);
    1658:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <memoryConsumedByBuffer>
    165c:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <memoryConsumedByBuffer+0x1>
    1660:	0d 97       	sbiw	r24, 0x0d	; 13
    1662:	29 85       	ldd	r18, Y+9	; 0x09
    1664:	82 1b       	sub	r24, r18
    1666:	91 09       	sbc	r25, r1
    1668:	80 93 23 24 	sts	0x2423, r24	; 0x802423 <memoryConsumedByBuffer>
    166c:	90 93 24 24 	sts	0x2424, r25	; 0x802424 <memoryConsumedByBuffer+0x1>
					numWaitingMsgs--;
    1670:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <numWaitingMsgs>
    1674:	81 50       	subi	r24, 0x01	; 1
    1676:	80 93 79 24 	sts	0x2479, r24	; 0x802479 <numWaitingMsgs>
	}
	return tmp;
}

inline void myFree(void* ptr){
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    167a:	6f b6       	in	r6, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    167c:	f8 94       	cli
		free(ptr);
    167e:	cf 01       	movw	r24, r30
    1680:	0e 94 49 4c 	call	0x9892	; 0x9892 <free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1684:	6f be       	out	0x3f, r6	; 63
    __asm__ volatile ("" ::: "memory");
    1686:	f7 01       	movw	r30, r14
    1688:	7f 01       	movw	r14, r30
    168a:	8e cf       	rjmp	.-228    	; 0x15a8 <main+0x232>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    168c:	9f 92       	push	r9
    168e:	8f 92       	push	r8
    1690:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    1694:	f8 01       	movw	r30, r16
    1696:	44 85       	ldd	r20, Z+12	; 0x0c
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	35 cf       	rjmp	.-406    	; 0x1508 <main+0x192>
	else				return (((int32_t)(getTime()-(task_list->scheduled_time)))>3000); 
    169e:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    16a2:	e0 91 16 26 	lds	r30, 0x2616	; 0x802616 <task_list>
    16a6:	f0 91 17 26 	lds	r31, 0x2617	; 0x802617 <task_list+0x1>
    16aa:	00 81       	ld	r16, Z
    16ac:	11 81       	ldd	r17, Z+1	; 0x01
    16ae:	22 81       	ldd	r18, Z+2	; 0x02
    16b0:	33 81       	ldd	r19, Z+3	; 0x03
	initAllSystems();
	init();
	while(1){
		loop();
		checkMessages();
		if(taskListCheck()){
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	80 1b       	sub	r24, r16
    16b8:	91 0b       	sbc	r25, r17
    16ba:	a2 0b       	sbc	r26, r18
    16bc:	b3 0b       	sbc	r27, r19
    16be:	89 3b       	cpi	r24, 0xB9	; 185
    16c0:	9b 40       	sbci	r25, 0x0B	; 11
    16c2:	a1 05       	cpc	r26, r1
    16c4:	b1 05       	cpc	r27, r1
    16c6:	0c f4       	brge	.+2      	; 0x16ca <main+0x354>
    16c8:	a4 cf       	rjmp	.-184    	; 0x1612 <main+0x29c>
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    16ca:	5f 92       	push	r5
    16cc:	4f 92       	push	r4
    16ce:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
			printTaskQueue();
    16d2:	0e 94 96 33 	call	0x672c	; 0x672c <printTaskQueue>
			taskListCleanup();
    16d6:	0e 94 d6 32 	call	0x65ac	; 0x65ac <taskListCleanup>
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	99 cf       	rjmp	.-206    	; 0x1612 <main+0x29c>

000016e0 <EEPROM_read_byte>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    16e0:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    16e4:	27 fd       	sbrc	r18, 7
    16e6:	fc cf       	rjmp	.-8      	; 0x16e0 <EEPROM_read_byte>

uint8_t EEPROM_read_byte(uint16_t addr)
{
        wait_for_nvm();
        
        NVM.ADDR0 = addr & 0xFF;
    16e8:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    16ec:	9f 71       	andi	r25, 0x1F	; 31
    16ee:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
        NVM.ADDR2 = 0;
    16f2:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    16f6:	86 e0       	ldi	r24, 0x06	; 6
    16f8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    16fc:	eb ec       	ldi	r30, 0xCB	; 203
    16fe:	f1 e0       	ldi	r31, 0x01	; 1
    1700:	21 e0       	ldi	r18, 0x01	; 1
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	88 ed       	ldi	r24, 0xD8	; 216
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	84 bf       	out	0x34, r24	; 52
    170a:	20 83       	st	Z, r18
        NVM.ADDR2 = 0;
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();
        
        return NVM.DATA0;
    170c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
}
    1710:	08 95       	ret

00001712 <EEPROM_write_byte>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    1712:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    1716:	27 fd       	sbrc	r18, 7
    1718:	fc cf       	rjmp	.-8      	; 0x1712 <EEPROM_write_byte>

void flush_buffer(void)
{
        wait_for_nvm();
        
        if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    171a:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    171e:	21 ff       	sbrs	r18, 1
    1720:	0b c0       	rjmp	.+22     	; 0x1738 <EEPROM_write_byte+0x26>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    1722:	26 e3       	ldi	r18, 0x36	; 54
    1724:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    1728:	eb ec       	ldi	r30, 0xCB	; 203
    172a:	f1 e0       	ldi	r31, 0x01	; 1
    172c:	41 e0       	ldi	r20, 0x01	; 1
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	28 ed       	ldi	r18, 0xD8	; 216
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	24 bf       	out	0x34, r18	; 52
    1736:	40 83       	st	Z, r20


void EEPROM_write_byte(uint16_t addr, uint8_t byte)
{
        flush_buffer();
        NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1738:	23 e3       	ldi	r18, 0x33	; 51
    173a:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
        
        NVM.ADDR0 = addr & 0xFF;
    173e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    1742:	9f 71       	andi	r25, 0x1F	; 31
    1744:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
        NVM.ADDR2 = 0;
    1748:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
        
        NVM.DATA0 = byte;
    174c:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    1750:	85 e3       	ldi	r24, 0x35	; 53
    1752:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    1756:	eb ec       	ldi	r30, 0xCB	; 203
    1758:	f1 e0       	ldi	r31, 0x01	; 1
    175a:	21 e0       	ldi	r18, 0x01	; 1
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	88 ed       	ldi	r24, 0xD8	; 216
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	84 bf       	out	0x34, r24	; 52
    1764:	20 83       	st	Z, r18
    1766:	08 95       	ret

00001768 <processObsQueue>:
}

void disableSyncBlink(){
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc;
	TCE0.CCA = 0;
	TCE0.CCB = 0;
    1768:	bf 92       	push	r11
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	e0 91 ff 23 	lds	r30, 0x23FF	; 0x8023ff <obsStart>
    177e:	f0 91 00 24 	lds	r31, 0x2400	; 0x802400 <obsStart+0x1>
    1782:	c2 81       	ldd	r28, Z+2	; 0x02
    1784:	d3 81       	ldd	r29, Z+3	; 0x03
    1786:	ec 17       	cp	r30, r28
    1788:	fd 07       	cpc	r31, r29
    178a:	09 f4       	brne	.+2      	; 0x178e <processObsQueue+0x26>
    178c:	6f c0       	rjmp	.+222    	; 0x186c <processObsQueue+0x104>
    178e:	c1 2c       	mov	r12, r1
    1790:	d1 2c       	mov	r13, r1
    1792:	76 01       	movw	r14, r12
    1794:	68 81       	ld	r22, Y
    1796:	79 81       	ldd	r23, Y+1	; 0x01
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 0e 48 	call	0x901c	; 0x901c <__floatunsisf>
    17a0:	a7 01       	movw	r20, r14
    17a2:	96 01       	movw	r18, r12
    17a4:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e7       	ldi	r20, 0x70	; 112
    17ae:	52 e4       	ldi	r21, 0x42	; 66
    17b0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    17b4:	9b 01       	movw	r18, r22
    17b6:	ac 01       	movw	r20, r24
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    17c0:	6b 01       	movw	r12, r22
    17c2:	7c 01       	movw	r14, r24
    17c4:	0a 81       	ldd	r16, Y+2	; 0x02
    17c6:	1b 81       	ldd	r17, Y+3	; 0x03
    17c8:	bf b6       	in	r11, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	ce 01       	movw	r24, r28
    17ce:	0e 94 49 4c 	call	0x9892	; 0x9892 <free>
    17d2:	bf be       	out	0x3f, r11	; 63
    17d4:	e8 01       	movw	r28, r16
    17d6:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <obsStart>
    17da:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <obsStart+0x1>
    17de:	80 17       	cp	r24, r16
    17e0:	91 07       	cpc	r25, r17
    17e2:	c1 f6       	brne	.-80     	; 0x1794 <processObsQueue+0x2c>
    17e4:	c7 01       	movw	r24, r14
    17e6:	b6 01       	movw	r22, r12
    17e8:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    17ec:	f8 01       	movw	r30, r16
    17ee:	02 83       	std	Z+2, r16	; 0x02
    17f0:	13 83       	std	Z+3, r17	; 0x03
    17f2:	04 83       	std	Z+4, r16	; 0x04
    17f4:	15 83       	std	Z+5, r17	; 0x05
    17f6:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    17fa:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    17fe:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
    1802:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
    1806:	c8 17       	cp	r28, r24
    1808:	d9 07       	cpc	r29, r25
    180a:	a0 f0       	brcs	.+40     	; 0x1834 <processObsQueue+0xcc>
    180c:	c6 0f       	add	r28, r22
    180e:	d7 1f       	adc	r29, r23
    1810:	c1 34       	cpi	r28, 0x41	; 65
    1812:	fd e9       	ldi	r31, 0x9D	; 157
    1814:	df 07       	cpc	r29, r31
    1816:	18 f5       	brcc	.+70     	; 0x185e <processObsQueue+0xf6>
    1818:	c0 93 20 0a 	sts	0x0A20, r28	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    181c:	d0 93 21 0a 	sts	0x0A21, r29	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	bf 90       	pop	r11
    1832:	08 95       	ret
    1834:	c6 0f       	add	r28, r22
    1836:	d7 1f       	adc	r29, r23
    1838:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
    183c:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
    1840:	8c 17       	cp	r24, r28
    1842:	9d 07       	cpc	r25, r29
    1844:	28 f7       	brcc	.-54     	; 0x1810 <processObsQueue+0xa8>
    1846:	40 91 63 22 	lds	r20, 0x2263	; 0x802263 <ffsync_blink_prev_b>
    184a:	60 91 64 22 	lds	r22, 0x2264	; 0x802264 <ffsync_blink_prev_g>
    184e:	80 91 65 22 	lds	r24, 0x2265	; 0x802265 <ffsync_blink_prev_r>
    1852:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    1856:	c1 34       	cpi	r28, 0x41	; 65
    1858:	fd e9       	ldi	r31, 0x9D	; 157
    185a:	df 07       	cpc	r29, r31
    185c:	e8 f2       	brcs	.-70     	; 0x1818 <processObsQueue+0xb0>
    185e:	80 e4       	ldi	r24, 0x40	; 64
    1860:	9d e9       	ldi	r25, 0x9D	; 157
    1862:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    1866:	90 93 21 0a 	sts	0x0A21, r25	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    186a:	da cf       	rjmp	.-76     	; 0x1820 <processObsQueue+0xb8>
    186c:	8f 01       	movw	r16, r30
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	bc cf       	rjmp	.-136    	; 0x17ec <processObsQueue+0x84>

00001874 <sendPing>:
    1874:	9c 01       	movw	r18, r24
    1876:	40 e4       	ldi	r20, 0x40	; 64
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	8f e3       	ldi	r24, 0x3F	; 63
    187e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <hpIrTargetedCmd>
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	44 eb       	ldi	r20, 0xB4	; 180
    1888:	5b e0       	ldi	r21, 0x0B	; 11
    188a:	68 ec       	ldi	r22, 0xC8	; 200
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <scheduleTask>
    1896:	08 95       	ret

00001898 <__vector_49>:
}


ISR(TCE0_CCA_vect){
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	0b b6       	in	r0, 0x3b	; 59
    18a4:	0f 92       	push	r0
    18a6:	2f 93       	push	r18
    18a8:	3f 93       	push	r19
    18aa:	4f 93       	push	r20
    18ac:	5f 93       	push	r21
    18ae:	6f 93       	push	r22
    18b0:	7f 93       	push	r23
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    18be:	e0 e4       	ldi	r30, 0x40	; 64
    18c0:	fa e0       	ldi	r31, 0x0A	; 10
    18c2:	82 ad       	ldd	r24, Z+58	; 0x3a
    18c4:	93 ad       	ldd	r25, Z+59	; 0x3b
	ffsync_blink_prev_r = getRedLED();
    18c6:	80 93 65 22 	sts	0x2265, r24	; 0x802265 <ffsync_blink_prev_r>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    18ca:	80 ad       	ldd	r24, Z+56	; 0x38
    18cc:	91 ad       	ldd	r25, Z+57	; 0x39
	ffsync_blink_prev_g = getGreenLED();
    18ce:	80 93 64 22 	sts	0x2264, r24	; 0x802264 <ffsync_blink_prev_g>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    18d2:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    18d6:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	ffsync_blink_prev_b = getBlueLED();
    18da:	80 93 63 22 	sts	0x2263, r24	; 0x802263 <ffsync_blink_prev_b>
	setRGB(ffsync_blink_r,ffsync_blink_g,ffsync_blink_b);
    18de:	40 91 66 22 	lds	r20, 0x2266	; 0x802266 <ffsync_blink_b>
    18e2:	60 91 67 22 	lds	r22, 0x2267	; 0x802267 <ffsync_blink_g>
    18e6:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <ffsync_blink_r>
    18ea:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
}
    18ee:	ff 91       	pop	r31
    18f0:	ef 91       	pop	r30
    18f2:	bf 91       	pop	r27
    18f4:	af 91       	pop	r26
    18f6:	9f 91       	pop	r25
    18f8:	8f 91       	pop	r24
    18fa:	7f 91       	pop	r23
    18fc:	6f 91       	pop	r22
    18fe:	5f 91       	pop	r21
    1900:	4f 91       	pop	r20
    1902:	3f 91       	pop	r19
    1904:	2f 91       	pop	r18
    1906:	0f 90       	pop	r0
    1908:	0b be       	out	0x3b, r0	; 59
    190a:	0f 90       	pop	r0
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	0f 90       	pop	r0
    1910:	1f 90       	pop	r1
    1912:	18 95       	reti

00001914 <__vector_50>:

ISR(TCE0_CCB_vect){
    1914:	1f 92       	push	r1
    1916:	0f 92       	push	r0
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	0f 92       	push	r0
    191c:	11 24       	eor	r1, r1
    191e:	0b b6       	in	r0, 0x3b	; 59
    1920:	0f 92       	push	r0
    1922:	2f 93       	push	r18
    1924:	3f 93       	push	r19
    1926:	4f 93       	push	r20
    1928:	5f 93       	push	r21
    192a:	6f 93       	push	r22
    192c:	7f 93       	push	r23
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	af 93       	push	r26
    1934:	bf 93       	push	r27
    1936:	ef 93       	push	r30
    1938:	ff 93       	push	r31
	setRGB(ffsync_blink_prev_r, ffsync_blink_prev_g, ffsync_blink_prev_b);	
    193a:	40 91 63 22 	lds	r20, 0x2263	; 0x802263 <ffsync_blink_prev_b>
    193e:	60 91 64 22 	lds	r22, 0x2264	; 0x802264 <ffsync_blink_prev_g>
    1942:	80 91 65 22 	lds	r24, 0x2265	; 0x802265 <ffsync_blink_prev_r>
    1946:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
}
    194a:	ff 91       	pop	r31
    194c:	ef 91       	pop	r30
    194e:	bf 91       	pop	r27
    1950:	af 91       	pop	r26
    1952:	9f 91       	pop	r25
    1954:	8f 91       	pop	r24
    1956:	7f 91       	pop	r23
    1958:	6f 91       	pop	r22
    195a:	5f 91       	pop	r21
    195c:	4f 91       	pop	r20
    195e:	3f 91       	pop	r19
    1960:	2f 91       	pop	r18
    1962:	0f 90       	pop	r0
    1964:	0b be       	out	0x3b, r0	; 59
    1966:	0f 90       	pop	r0
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	0f 90       	pop	r0
    196c:	1f 90       	pop	r1
    196e:	18 95       	reti

00001970 <fireflySyncInit>:

void fireflySyncInit()
{
    1970:	cf 93       	push	r28
	ffsync_blink_r = 255;
    1972:	8f ef       	ldi	r24, 0xFF	; 255
    1974:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <ffsync_blink_r>
	ffsync_blink_g = 255;
    1978:	80 93 67 22 	sts	0x2267, r24	; 0x802267 <ffsync_blink_g>
	ffsync_blink_b = 255;
    197c:	80 93 66 22 	sts	0x2266, r24	; 0x802266 <ffsync_blink_b>
	ffsync_blink_dur = 200;
    1980:	88 ec       	ldi	r24, 0xC8	; 200
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	80 93 61 22 	sts	0x2261, r24	; 0x802261 <ffsync_blink_dur>
    1988:	90 93 62 22 	sts	0x2262, r25	; 0x802262 <ffsync_blink_dur+0x1>
	
	ffsync_blink_phase_offset_ms = 0;

	EVSYS.CH0MUX = EVSYS_CHMUX_PRESCALER_4096_gc;
    198c:	8c e8       	ldi	r24, 0x8C	; 140
    198e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	TCE0.CTRLA = TC_CLKSEL_EVCH0_gc;
    1992:	e0 e0       	ldi	r30, 0x00	; 0
    1994:	fa e0       	ldi	r31, 0x0A	; 10
    1996:	88 e0       	ldi	r24, 0x08	; 8
    1998:	80 83       	st	Z, r24
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;
    199a:	11 82       	std	Z+1, r1	; 0x01

	TCE0.PER =  FFSYNC_FULL_PERIOD;
    199c:	81 e4       	ldi	r24, 0x41	; 65
    199e:	9d e9       	ldi	r25, 0x9D	; 157
    19a0:	86 a3       	std	Z+38, r24	; 0x26
    19a2:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	86 83       	std	Z+6, r24	; 0x06
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc;	
    19a8:	17 82       	std	Z+7, r1	; 0x07
	TCE0.CNT = 0;
    19aa:	10 a2       	std	Z+32, r1	; 0x20
    19ac:	11 a2       	std	Z+33, r1	; 0x21
		TCE0.CCA = 0;
    19ae:	10 a6       	std	Z+40, r1	; 0x28
    19b0:	11 a6       	std	Z+41, r1	; 0x29
		TCE0.CCB = 0;
    19b2:	12 a6       	std	Z+42, r1	; 0x2a
    19b4:	13 a6       	std	Z+43, r1	; 0x2b
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    19b6:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    19b8:	f8 94       	cli
		tmp = malloc(size);
    19ba:	86 e0       	ldi	r24, 0x06	; 6
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 94 b1 4b 	call	0x9762	; 0x9762 <malloc>
    19c2:	fc 01       	movw	r30, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    19c4:	cf bf       	out	0x3f, r28	; 63
	
	obsStart = (ObsQueue*)myMalloc(sizeof(ObsQueue));
    19c6:	80 93 ff 23 	sts	0x23FF, r24	; 0x8023ff <obsStart>
    19ca:	90 93 00 24 	sts	0x2400, r25	; 0x802400 <obsStart+0x1>
	obsStart->obs = 0;
    19ce:	10 82       	st	Z, r1
    19d0:	11 82       	std	Z+1, r1	; 0x01
	obsStart->next = obsStart;
    19d2:	82 83       	std	Z+2, r24	; 0x02
    19d4:	93 83       	std	Z+3, r25	; 0x03
	obsStart->prev = obsStart;
    19d6:	84 83       	std	Z+4, r24	; 0x04
    19d8:	95 83       	std	Z+5, r25	; 0x05
}
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <__vector_47>:

ISR(TCE0_OVF_vect){
    19de:	1f 92       	push	r1
    19e0:	0f 92       	push	r0
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	0f 92       	push	r0
    19e6:	11 24       	eor	r1, r1
    19e8:	0b b6       	in	r0, 0x3b	; 59
    19ea:	0f 92       	push	r0
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	1f 93       	push	r17
    19fa:	2f 93       	push	r18
    19fc:	3f 93       	push	r19
    19fe:	4f 93       	push	r20
    1a00:	5f 93       	push	r21
    1a02:	6f 93       	push	r22
    1a04:	7f 93       	push	r23
    1a06:	8f 93       	push	r24
    1a08:	9f 93       	push	r25
    1a0a:	af 93       	push	r26
    1a0c:	bf 93       	push	r27
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	ef 93       	push	r30
    1a14:	ff 93       	push	r31
	uint32_t randomWait = (randShort()%32)*20; //between 0 and 640ms
    1a16:	0e 94 42 24 	call	0x4884	; 0x4884 <randShort>
    1a1a:	ec 01       	movw	r28, r24
}

static void updateRTC(void){
	int16_t change;
	uint16_t remainder;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1a1c:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a1e:	f8 94       	cli
	{
		uint32_t currTime = getTime();
    1a20:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1a24:	6b 01       	movw	r12, r22
    1a26:	7c 01       	movw	r14, r24
		uint16_t theCount = currTime&0xFFFF;		
		remainder = (int16_t)(currTime%FFSYNC_FULL_PERIOD_MS);
    1a28:	21 e2       	ldi	r18, 0x21	; 33
    1a2a:	34 e1       	ldi	r19, 0x14	; 20
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	0e 94 6d 4b 	call	0x96da	; 0x96da <__udivmodsi4>
		//printf("%u.\r\n", remainder);
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
    1a34:	61 31       	cpi	r22, 0x11	; 17
    1a36:	2a e0       	ldi	r18, 0x0A	; 10
    1a38:	72 07       	cpc	r23, r18
    1a3a:	08 f4       	brcc	.+2      	; 0x1a3e <__vector_47+0x60>
    1a3c:	69 c0       	rjmp	.+210    	; 0x1b10 <__vector_47+0x132>
			change = FFSYNC_FULL_PERIOD_MS-((int16_t)remainder);
    1a3e:	21 e2       	ldi	r18, 0x21	; 33
    1a40:	34 e1       	ldi	r19, 0x14	; 20
    1a42:	26 1b       	sub	r18, r22
    1a44:	37 0b       	sbc	r19, r23
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
    1a46:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    1a4a:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    1a4e:	82 1b       	sub	r24, r18
    1a50:	93 0b       	sbc	r25, r19
    1a52:	8c 15       	cp	r24, r12
    1a54:	9d 05       	cpc	r25, r13
    1a56:	48 f4       	brcc	.+18     	; 0x1a6a <__vector_47+0x8c>
    1a58:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <rtc_epoch>
    1a5c:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <rtc_epoch+0x1>
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	80 93 ee 23 	sts	0x23EE, r24	; 0x8023ee <rtc_epoch>
    1a66:	90 93 ef 23 	sts	0x23EF, r25	; 0x8023ef <rtc_epoch+0x1>
		}else{
			change = -(int16_t)remainder;
			if(theCount<remainder) rtc_epoch--;
		}
		while(RTC.STATUS & RTC_SYNCBUSY_bm);
    1a6a:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    1a6e:	80 fd       	sbrc	r24, 0
    1a70:	fc cf       	rjmp	.-8      	; 0x1a6a <__vector_47+0x8c>
		RTC.CNT =  (theCount+change);
    1a72:	c2 0e       	add	r12, r18
    1a74:	d3 1e       	adc	r13, r19
    1a76:	c0 92 08 04 	sts	0x0408, r12	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    1a7a:	d0 92 09 04 	sts	0x0409, r13	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
		RTC.COMP = (RTC.COMP+change);
    1a7e:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    1a82:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
    1a86:	82 0f       	add	r24, r18
    1a88:	93 1f       	adc	r25, r19
    1a8a:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    1a8e:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a92:	1f bf       	out	0x3f, r17	; 63
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    1a94:	c9 01       	movw	r24, r18
    1a96:	37 fd       	sbrc	r19, 7
    1a98:	4d c0       	rjmp	.+154    	; 0x1b34 <__vector_47+0x156>
    1a9a:	81 39       	cpi	r24, 0x91	; 145
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	4c f4       	brge	.+18     	; 0x1ab2 <__vector_47+0xd4>
		if(change>0) OSC.RC32KCAL++;
    1aa0:	12 16       	cp	r1, r18
    1aa2:	13 06       	cpc	r1, r19
    1aa4:	0c f0       	brlt	.+2      	; 0x1aa8 <__vector_47+0xca>
    1aa6:	4b c0       	rjmp	.+150    	; 0x1b3e <__vector_47+0x160>
    1aa8:	80 91 54 00 	lds	r24, 0x0054	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    1aac:	8f 5f       	subi	r24, 0xFF	; 255
    1aae:	80 93 54 00 	sts	0x0054, r24	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>

ISR(TCE0_OVF_vect){
	uint32_t randomWait = (randShort()%32)*20; //between 0 and 640ms
	//sendPing( (void*)((uint16_t)(get_time()&0xFFFF)));
	updateRTC();
	scheduleTask(randomWait, (arg_func_t)sendPing, (void*)((uint16_t)(getTime()&0xFFFF)));
    1ab2:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1ab6:	9b 01       	movw	r18, r22
    1ab8:	ac 01       	movw	r20, r24
    1aba:	cf 71       	andi	r28, 0x1F	; 31
    1abc:	dd 27       	eor	r29, r29
    1abe:	64 e1       	ldi	r22, 0x14	; 20
    1ac0:	6c 9f       	mul	r22, r28
    1ac2:	c0 01       	movw	r24, r0
    1ac4:	6d 9f       	mul	r22, r29
    1ac6:	90 0d       	add	r25, r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	bc 01       	movw	r22, r24
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	4a e3       	ldi	r20, 0x3A	; 58
    1ad2:	5c e0       	ldi	r21, 0x0C	; 12
    1ad4:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <scheduleTask>
	//printf("ovf @ %lu\r\n",get_time());
}
    1ad8:	ff 91       	pop	r31
    1ada:	ef 91       	pop	r30
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	bf 91       	pop	r27
    1ae2:	af 91       	pop	r26
    1ae4:	9f 91       	pop	r25
    1ae6:	8f 91       	pop	r24
    1ae8:	7f 91       	pop	r23
    1aea:	6f 91       	pop	r22
    1aec:	5f 91       	pop	r21
    1aee:	4f 91       	pop	r20
    1af0:	3f 91       	pop	r19
    1af2:	2f 91       	pop	r18
    1af4:	1f 91       	pop	r17
    1af6:	ff 90       	pop	r15
    1af8:	ef 90       	pop	r14
    1afa:	df 90       	pop	r13
    1afc:	cf 90       	pop	r12
    1afe:	bf 90       	pop	r11
    1b00:	af 90       	pop	r10
    1b02:	0f 90       	pop	r0
    1b04:	0b be       	out	0x3b, r0	; 59
    1b06:	0f 90       	pop	r0
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	0f 90       	pop	r0
    1b0c:	1f 90       	pop	r1
    1b0e:	18 95       	reti
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
			change = FFSYNC_FULL_PERIOD_MS-((int16_t)remainder);
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
		}else{
			change = -(int16_t)remainder;
    1b10:	22 27       	eor	r18, r18
    1b12:	33 27       	eor	r19, r19
    1b14:	26 1b       	sub	r18, r22
    1b16:	37 0b       	sbc	r19, r23
			if(theCount<remainder) rtc_epoch--;
    1b18:	c6 16       	cp	r12, r22
    1b1a:	d7 06       	cpc	r13, r23
    1b1c:	08 f0       	brcs	.+2      	; 0x1b20 <__vector_47+0x142>
    1b1e:	a5 cf       	rjmp	.-182    	; 0x1a6a <__vector_47+0x8c>
    1b20:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <rtc_epoch>
    1b24:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <rtc_epoch+0x1>
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	80 93 ee 23 	sts	0x23EE, r24	; 0x8023ee <rtc_epoch>
    1b2e:	90 93 ef 23 	sts	0x23EF, r25	; 0x8023ef <rtc_epoch+0x1>
    1b32:	9b cf       	rjmp	.-202    	; 0x1a6a <__vector_47+0x8c>
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    1b34:	88 27       	eor	r24, r24
    1b36:	99 27       	eor	r25, r25
    1b38:	82 1b       	sub	r24, r18
    1b3a:	93 0b       	sbc	r25, r19
    1b3c:	ae cf       	rjmp	.-164    	; 0x1a9a <__vector_47+0xbc>
		if(change>0) OSC.RC32KCAL++;
		else if(abs(change)<FFSYNC_MAX_DEVIATION) OSC.RC32KCAL--;
    1b3e:	4d 97       	sbiw	r24, 0x1d	; 29
    1b40:	0c f0       	brlt	.+2      	; 0x1b44 <__vector_47+0x166>
    1b42:	b7 cf       	rjmp	.-146    	; 0x1ab2 <__vector_47+0xd4>
    1b44:	80 91 54 00 	lds	r24, 0x0054	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    1b48:	81 50       	subi	r24, 0x01	; 1
    1b4a:	80 93 54 00 	sts	0x0054, r24	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    1b4e:	b1 cf       	rjmp	.-158    	; 0x1ab2 <__vector_47+0xd4>

00001b50 <waitForTWIReady>:
	uint8_t printed = 0;
	while(!result){
		if((printed = waitForTWIReady(startTime, callerDescr))){
			result = TWI_MasterWriteRead(addr, writeData, bytesToWrite, bytesToRead);
		}else{
			return 0;
    1b50:	bf 92       	push	r11
    1b52:	cf 92       	push	r12
    1b54:	df 92       	push	r13
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	6b 01       	movw	r12, r22
    1b64:	7c 01       	movw	r14, r24
    1b66:	04 2f       	mov	r16, r20
    1b68:	b5 2e       	mov	r11, r21
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
    1b6c:	cb e3       	ldi	r28, 0x3B	; 59
    1b6e:	d5 e0       	ldi	r29, 0x05	; 5
    1b70:	1a c0       	rjmp	.+52     	; 0x1ba6 <waitForTWIReady+0x56>
    1b72:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8c 19       	sub	r24, r12
    1b7c:	9d 09       	sbc	r25, r13
    1b7e:	ae 09       	sbc	r26, r14
    1b80:	bf 09       	sbc	r27, r15
    1b82:	89 3e       	cpi	r24, 0xE9	; 233
    1b84:	93 40       	sbci	r25, 0x03	; 3
    1b86:	a1 05       	cpc	r26, r1
    1b88:	b1 05       	cpc	r27, r1
    1b8a:	00 f5       	brcc	.+64     	; 0x1bcc <waitForTWIReady+0x7c>
    1b8c:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	8c 19       	sub	r24, r12
    1b96:	9d 09       	sbc	r25, r13
    1b98:	ae 09       	sbc	r26, r14
    1b9a:	bf 09       	sbc	r27, r15
    1b9c:	85 36       	cpi	r24, 0x65	; 101
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	a1 05       	cpc	r26, r1
    1ba2:	b1 05       	cpc	r27, r1
    1ba4:	08 f5       	brcc	.+66     	; 0x1be8 <waitForTWIReady+0x98>
    1ba6:	e0 91 1e 26 	lds	r30, 0x261E	; 0x80261e <twi>
    1baa:	f0 91 1f 26 	lds	r31, 0x261F	; 0x80261f <twi+0x1>
    1bae:	87 89       	ldd	r24, Z+23	; 0x17
    1bb0:	81 11       	cpse	r24, r1
    1bb2:	df cf       	rjmp	.-66     	; 0x1b72 <waitForTWIReady+0x22>
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	81 0f       	add	r24, r17
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	ff 90       	pop	r15
    1bc2:	ef 90       	pop	r14
    1bc4:	df 90       	pop	r13
    1bc6:	cf 90       	pop	r12
    1bc8:	bf 90       	pop	r11
    1bca:	08 95       	ret
    1bcc:	bf 92       	push	r11
    1bce:	0f 93       	push	r16
    1bd0:	82 e5       	ldi	r24, 0x52	; 82
    1bd2:	95 e0       	ldi	r25, 0x05	; 5
    1bd4:	9f 93       	push	r25
    1bd6:	8f 93       	push	r24
    1bd8:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	e8 cf       	rjmp	.-48     	; 0x1bb8 <waitForTWIReady+0x68>
    1be8:	11 23       	and	r17, r17
    1bea:	31 f0       	breq	.+12     	; 0x1bf8 <waitForTWIReady+0xa8>
    1bec:	8a e0       	ldi	r24, 0x0A	; 10
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1bf4:	11 e0       	ldi	r17, 0x01	; 1
    1bf6:	d7 cf       	rjmp	.-82     	; 0x1ba6 <waitForTWIReady+0x56>
    1bf8:	bf 92       	push	r11
    1bfa:	0f 93       	push	r16
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	ef cf       	rjmp	.-34     	; 0x1bec <waitForTWIReady+0x9c>

00001c0e <TWI_MasterWriteRead.part.0>:
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	e0 91 1e 26 	lds	r30, 0x261E	; 0x80261e <twi>
    1c16:	f0 91 1f 26 	lds	r31, 0x261F	; 0x80261f <twi+0x1>
    1c1a:	97 89       	ldd	r25, Z+23	; 0x17
    1c1c:	91 11       	cpse	r25, r1
    1c1e:	30 c0       	rjmp	.+96     	; 0x1c80 <TWI_MasterWriteRead.part.0+0x72>
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	97 8b       	std	Z+23, r25	; 0x17
    1c24:	10 8e       	std	Z+24, r1	; 0x18
    1c26:	88 0f       	add	r24, r24
    1c28:	82 83       	std	Z+2, r24	; 0x02
    1c2a:	44 23       	and	r20, r20
    1c2c:	59 f0       	breq	.+22     	; 0x1c44 <TWI_MasterWriteRead.part.0+0x36>
    1c2e:	db 01       	movw	r26, r22
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	3d 91       	ld	r19, X+
    1c36:	ef 01       	movw	r28, r30
    1c38:	c8 0f       	add	r28, r24
    1c3a:	d9 1f       	adc	r29, r25
    1c3c:	3b 83       	std	Y+3, r19	; 0x03
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	84 17       	cp	r24, r20
    1c42:	c0 f3       	brcs	.-16     	; 0x1c34 <TWI_MasterWriteRead.part.0+0x26>
    1c44:	43 8b       	std	Z+19, r20	; 0x13
    1c46:	24 8b       	std	Z+20, r18	; 0x14
    1c48:	15 8a       	std	Z+21, r1	; 0x15
    1c4a:	16 8a       	std	Z+22, r1	; 0x16
    1c4c:	83 89       	ldd	r24, Z+19	; 0x13
    1c4e:	81 11       	cpse	r24, r1
    1c50:	0d c0       	rjmp	.+26     	; 0x1c6c <TWI_MasterWriteRead.part.0+0x5e>
    1c52:	84 89       	ldd	r24, Z+20	; 0x14
    1c54:	88 23       	and	r24, r24
    1c56:	01 f1       	breq	.+64     	; 0x1c98 <TWI_MasterWriteRead.part.0+0x8a>
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	81 60       	ori	r24, 0x01	; 1
    1c5c:	01 90       	ld	r0, Z+
    1c5e:	f0 81       	ld	r31, Z
    1c60:	e0 2d       	mov	r30, r0
    1c62:	86 83       	std	Z+6, r24	; 0x06
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	08 95       	ret
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	8e 7f       	andi	r24, 0xFE	; 254
    1c70:	01 90       	ld	r0, Z+
    1c72:	f0 81       	ld	r31, Z
    1c74:	e0 2d       	mov	r30, r0
    1c76:	86 83       	std	Z+6, r24	; 0x06
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret
    1c80:	86 e2       	ldi	r24, 0x26	; 38
    1c82:	95 e0       	ldi	r25, 0x05	; 5
    1c84:	9f 93       	push	r25
    1c86:	8f 93       	push	r24
    1c88:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	08 95       	ret
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <i2cInit>:
    1ca0:	e0 e2       	ldi	r30, 0x20	; 32
    1ca2:	f6 e0       	ldi	r31, 0x06	; 6
    1ca4:	80 e2       	ldi	r24, 0x20	; 32
    1ca6:	82 83       	std	Z+2, r24	; 0x02
    1ca8:	85 8b       	std	Z+21, r24	; 0x15
    1caa:	83 e0       	ldi	r24, 0x03	; 3
    1cac:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    1cb0:	a1 e0       	ldi	r26, 0x01	; 1
    1cb2:	b4 e2       	ldi	r27, 0x24	; 36
    1cb4:	a0 93 1e 26 	sts	0x261E, r26	; 0x80261e <twi>
    1cb8:	b0 93 1f 26 	sts	0x261F, r27	; 0x80261f <twi+0x1>
    1cbc:	e0 ea       	ldi	r30, 0xA0	; 160
    1cbe:	f4 e0       	ldi	r31, 0x04	; 4
    1cc0:	ed 93       	st	X+, r30
    1cc2:	fc 93       	st	X, r31
    1cc4:	88 ef       	ldi	r24, 0xF8	; 248
    1cc6:	81 83       	std	Z+1, r24	; 0x01
    1cc8:	8b e9       	ldi	r24, 0x9B	; 155
    1cca:	85 83       	std	Z+5, r24	; 0x05
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	84 83       	std	Z+4, r24	; 0x04
    1cd0:	08 95       	ret

00001cd2 <twiWriteWrapper>:
    1cd2:	9f 92       	push	r9
    1cd4:	af 92       	push	r10
    1cd6:	bf 92       	push	r11
    1cd8:	cf 92       	push	r12
    1cda:	df 92       	push	r13
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	98 2e       	mov	r9, r24
    1cea:	5b 01       	movw	r10, r22
    1cec:	d4 2f       	mov	r29, r20
    1cee:	89 01       	movw	r16, r18
    1cf0:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1cf4:	6b 01       	movw	r12, r22
    1cf6:	7c 01       	movw	r14, r24
    1cf8:	a8 01       	movw	r20, r16
    1cfa:	c7 01       	movw	r24, r14
    1cfc:	b6 01       	movw	r22, r12
    1cfe:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <waitForTWIReady>
    1d02:	c8 2f       	mov	r28, r24
    1d04:	88 23       	and	r24, r24
    1d06:	c1 f0       	breq	.+48     	; 0x1d38 <twiWriteWrapper+0x66>
    1d08:	d9 30       	cpi	r29, 0x09	; 9
    1d0a:	b0 f7       	brcc	.-20     	; 0x1cf8 <twiWriteWrapper+0x26>
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	4d 2f       	mov	r20, r29
    1d10:	b5 01       	movw	r22, r10
    1d12:	89 2d       	mov	r24, r9
    1d14:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <TWI_MasterWriteRead.part.0>
    1d18:	88 23       	and	r24, r24
    1d1a:	71 f3       	breq	.-36     	; 0x1cf8 <twiWriteWrapper+0x26>
    1d1c:	8c 0f       	add	r24, r28
    1d1e:	81 50       	subi	r24, 0x01	; 1
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	df 90       	pop	r13
    1d2e:	cf 90       	pop	r12
    1d30:	bf 90       	pop	r11
    1d32:	af 90       	pop	r10
    1d34:	9f 90       	pop	r9
    1d36:	08 95       	ret
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	f2 cf       	rjmp	.-28     	; 0x1d20 <twiWriteWrapper+0x4e>

00001d3c <__vector_46>:
	twi->result = result;
	twi->status = TWIM_STATUS_READY;
}

ISR(TWIE_TWIM_vect)
{
    1d3c:	1f 92       	push	r1
    1d3e:	0f 92       	push	r0
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	0f 92       	push	r0
    1d44:	11 24       	eor	r1, r1
    1d46:	0b b6       	in	r0, 0x3b	; 59
    1d48:	0f 92       	push	r0
    1d4a:	2f 93       	push	r18
    1d4c:	8f 93       	push	r24
    1d4e:	9f 93       	push	r25
    1d50:	af 93       	push	r26
    1d52:	bf 93       	push	r27
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	ef 93       	push	r30
    1d5a:	ff 93       	push	r31
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
static void TWI_MasterInterruptHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1d5c:	e0 91 1e 26 	lds	r30, 0x261E	; 0x80261e <twi>
    1d60:	f0 91 1f 26 	lds	r31, 0x261F	; 0x80261f <twi+0x1>
    1d64:	a0 81       	ld	r26, Z
    1d66:	b1 81       	ldd	r27, Z+1	; 0x01
    1d68:	14 96       	adiw	r26, 0x04	; 4
    1d6a:	8c 91       	ld	r24, X
    1d6c:	14 97       	sbiw	r26, 0x04	; 4
	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    1d6e:	98 2f       	mov	r25, r24
    1d70:	9c 70       	andi	r25, 0x0C	; 12
    1d72:	41 f4       	brne	.+16     	; 0x1d84 <__vector_46+0x48>

		TWI_MasterArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    1d74:	86 fd       	sbrc	r24, 6
    1d76:	24 c0       	rjmp	.+72     	; 0x1dc0 <__vector_46+0x84>
		TWI_MasterWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    1d78:	87 fd       	sbrc	r24, 7
    1d7a:	3d c0       	rjmp	.+122    	; 0x1df6 <__vector_46+0xba>
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1d7c:	86 e0       	ldi	r24, 0x06	; 6
    1d7e:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1d80:	17 8a       	std	Z+23, r1	; 0x17
}

ISR(TWIE_TWIM_vect)
{
	TWI_MasterInterruptHandler();
    1d82:	0b c0       	rjmp	.+22     	; 0x1d9a <__vector_46+0x5e>
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
static void TWI_MasterArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1d84:	14 96       	adiw	r26, 0x04	; 4
    1d86:	8c 91       	ld	r24, X
    1d88:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    1d8a:	82 fd       	sbrc	r24, 2
    1d8c:	16 c0       	rjmp	.+44     	; 0x1dba <__vector_46+0x7e>
		twi->result = TWIM_RESULT_BUS_ERROR;
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    1d8e:	93 e0       	ldi	r25, 0x03	; 3
    1d90:	90 8f       	std	Z+24, r25	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    1d92:	88 60       	ori	r24, 0x08	; 8
    1d94:	14 96       	adiw	r26, 0x04	; 4
    1d96:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    1d98:	17 8a       	std	Z+23, r1	; 0x17
}

ISR(TWIE_TWIM_vect)
{
	TWI_MasterInterruptHandler();
    1d9a:	ff 91       	pop	r31
    1d9c:	ef 91       	pop	r30
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	bf 91       	pop	r27
    1da4:	af 91       	pop	r26
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	2f 91       	pop	r18
    1dac:	0f 90       	pop	r0
    1dae:	0b be       	out	0x3b, r0	; 59
    1db0:	0f 90       	pop	r0
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	0f 90       	pop	r0
    1db6:	1f 90       	pop	r1
    1db8:	18 95       	reti
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
		twi->result = TWIM_RESULT_BUS_ERROR;
    1dba:	94 e0       	ldi	r25, 0x04	; 4
    1dbc:	90 8f       	std	Z+24, r25	; 0x18
    1dbe:	e9 cf       	rjmp	.-46     	; 0x1d92 <__vector_46+0x56>
 *  \param twi The TWI_Master_t struct instance.
 */
static void TWI_MasterWriteHandler()
{
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    1dc0:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
    1dc2:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    1dc4:	14 96       	adiw	r26, 0x04	; 4
    1dc6:	8c 91       	ld	r24, X
    1dc8:	14 97       	sbiw	r26, 0x04	; 4
    1dca:	84 fd       	sbrc	r24, 4
    1dcc:	0d c0       	rjmp	.+26     	; 0x1de8 <__vector_46+0xac>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		twi->result = TWIM_RESULT_NACK_RECEIVED;
		twi->status = TWIM_STATUS_READY;
	}
	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    1dce:	85 89       	ldd	r24, Z+21	; 0x15
    1dd0:	89 17       	cp	r24, r25
    1dd2:	50 f1       	brcs	.+84     	; 0x1e28 <__vector_46+0xec>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    1dd4:	86 89       	ldd	r24, Z+22	; 0x16
    1dd6:	82 17       	cp	r24, r18
    1dd8:	d8 f1       	brcs	.+118    	; 0x1e50 <__vector_46+0x114>
		twi->interface->MASTER.ADDR = readAddress;
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	13 96       	adiw	r26, 0x03	; 3
    1dde:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1de4:	17 8a       	std	Z+23, r1	; 0x17
    1de6:	d9 cf       	rjmp	.-78     	; 0x1d9a <__vector_46+0x5e>
	uint8_t bytesToWrite  = twi->bytesToWrite;
	uint8_t bytesToRead   = twi->bytesToRead;

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1de8:	83 e0       	ldi	r24, 0x03	; 3
    1dea:	13 96       	adiw	r26, 0x03	; 3
    1dec:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    1dee:	85 e0       	ldi	r24, 0x05	; 5
    1df0:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
    1df2:	17 8a       	std	Z+23, r1	; 0x17
    1df4:	d2 cf       	rjmp	.-92     	; 0x1d9a <__vector_46+0x5e>
 *  \param twi The TWI_Master_t struct instance.
 */
static void TWI_MasterReadHandler()
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    1df6:	86 89       	ldd	r24, Z+22	; 0x16
    1df8:	88 30       	cpi	r24, 0x08	; 8
    1dfa:	08 f5       	brcc	.+66     	; 0x1e3e <__vector_46+0x102>
		uint8_t data = twi->interface->MASTER.DATA;
    1dfc:	17 96       	adiw	r26, 0x07	; 7
    1dfe:	8c 91       	ld	r24, X
    1e00:	17 97       	sbiw	r26, 0x07	; 7
		twi->readData[twi->bytesRead] = data;
    1e02:	96 89       	ldd	r25, Z+22	; 0x16
    1e04:	ef 01       	movw	r28, r30
    1e06:	c9 0f       	add	r28, r25
    1e08:	d1 1d       	adc	r29, r1
    1e0a:	8b 87       	std	Y+11, r24	; 0x0b
		twi->bytesRead++;
    1e0c:	86 89       	ldd	r24, Z+22	; 0x16
    1e0e:	8f 5f       	subi	r24, 0xFF	; 255
    1e10:	86 8b       	std	Z+22, r24	; 0x16
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    1e12:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    1e14:	86 89       	ldd	r24, Z+22	; 0x16
    1e16:	89 17       	cp	r24, r25
    1e18:	00 f1       	brcs	.+64     	; 0x1e5a <__vector_46+0x11e>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    1e1a:	87 e0       	ldi	r24, 0x07	; 7
    1e1c:	13 96       	adiw	r26, 0x03	; 3
    1e1e:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1e24:	17 8a       	std	Z+23, r1	; 0x17
    1e26:	b9 cf       	rjmp	.-142    	; 0x1d9a <__vector_46+0x5e>
		twi->result = TWIM_RESULT_NACK_RECEIVED;
		twi->status = TWIM_STATUS_READY;
	}
	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
		uint8_t data = twi->writeData[twi->bytesWritten];
    1e28:	85 89       	ldd	r24, Z+21	; 0x15
    1e2a:	ef 01       	movw	r28, r30
    1e2c:	c8 0f       	add	r28, r24
    1e2e:	d1 1d       	adc	r29, r1
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    1e32:	17 96       	adiw	r26, 0x07	; 7
    1e34:	8c 93       	st	X, r24
		++twi->bytesWritten;
    1e36:	85 89       	ldd	r24, Z+21	; 0x15
    1e38:	8f 5f       	subi	r24, 0xFF	; 255
    1e3a:	85 8b       	std	Z+21, r24	; 0x15
    1e3c:	ae cf       	rjmp	.-164    	; 0x1d9a <__vector_46+0x5e>
		twi->bytesRead++;
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1e3e:	83 e0       	ldi	r24, 0x03	; 3
    1e40:	13 96       	adiw	r26, 0x03	; 3
    1e42:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1e48:	17 8a       	std	Z+23, r1	; 0x17
    1e4a:	a0 81       	ld	r26, Z
    1e4c:	b1 81       	ldd	r27, Z+1	; 0x01
    1e4e:	e1 cf       	rjmp	.-62     	; 0x1e12 <__vector_46+0xd6>

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
		uint8_t readAddress = twi->address | 0x01;
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    1e54:	16 96       	adiw	r26, 0x06	; 6
    1e56:	8c 93       	st	X, r24
    1e58:	a0 cf       	rjmp	.-192    	; 0x1d9a <__vector_46+0x5e>
	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	13 96       	adiw	r26, 0x03	; 3
    1e5e:	8c 93       	st	X, r24
    1e60:	9c cf       	rjmp	.-200    	; 0x1d9a <__vector_46+0x5e>

00001e62 <irTransmitComplete>:
    send_msg(dirs, data, dataLength, 1);
	return 1;
}

uint8_t hpIrCmd(uint8_t dirs, char *data, uint8_t dataLength){
	return all_hp_ir_cmds(dirs, data, dataLength, 0);
    1e62:	4f b7       	in	r20, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	e0 e0       	ldi	r30, 0x00	; 0
    1e68:	fb e0       	ldi	r31, 0x0B	; 11
    1e6a:	31 81       	ldd	r19, Z+1	; 0x01
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	dc 01       	movw	r26, r24
    1e70:	a6 57       	subi	r26, 0x76	; 118
    1e72:	bf 4d       	sbci	r27, 0xDF	; 223
    1e74:	2c 91       	ld	r18, X
    1e76:	20 95       	com	r18
    1e78:	23 23       	and	r18, r19
    1e7a:	21 83       	std	Z+1, r18	; 0x01
    1e7c:	28 e3       	ldi	r18, 0x38	; 56
    1e7e:	28 9f       	mul	r18, r24
    1e80:	f0 01       	movw	r30, r0
    1e82:	29 9f       	mul	r18, r25
    1e84:	f0 0d       	add	r31, r0
    1e86:	11 24       	eor	r1, r1
    1e88:	e4 58       	subi	r30, 0x84	; 132
    1e8a:	fb 4d       	sbci	r31, 0xDB	; 219
    1e8c:	17 aa       	std	Z+55, r1	; 0x37
    1e8e:	16 aa       	std	Z+54, r1	; 0x36
    1e90:	12 86       	std	Z+10, r1	; 0x0a
    1e92:	13 86       	std	Z+11, r1	; 0x0b
    1e94:	10 86       	std	Z+8, r1	; 0x08
    1e96:	11 86       	std	Z+9, r1	; 0x09
    1e98:	16 82       	std	Z+6, r1	; 0x06
    1e9a:	17 82       	std	Z+7, r1	; 0x07
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	ea 5f       	subi	r30, 0xFA	; 250
    1ea4:	ff 4d       	sbci	r31, 0xDF	; 223
    1ea6:	01 90       	ld	r0, Z+
    1ea8:	f0 81       	ld	r31, Z
    1eaa:	e0 2d       	mov	r30, r0
    1eac:	81 81       	ldd	r24, Z+1	; 0x01
    1eae:	80 64       	ori	r24, 0x40	; 64
    1eb0:	81 83       	std	Z+1, r24	; 0x01
    1eb2:	84 81       	ldd	r24, Z+4	; 0x04
    1eb4:	80 61       	ori	r24, 0x10	; 16
    1eb6:	84 83       	std	Z+4, r24	; 0x04
    1eb8:	4f bf       	out	0x3f, r20	; 63
    1eba:	08 95       	ret

00001ebc <handleCmdWrapper>:
    1ebc:	ef 92       	push	r14
    1ebe:	ff 92       	push	r15
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	0d b7       	in	r16, 0x3d	; 61
    1ece:	1e b7       	in	r17, 0x3e	; 62
    1ed0:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <cmdLength>
    1ed4:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <cmdLength+0x1>
    1ed8:	01 96       	adiw	r24, 0x01	; 1
    1eda:	2d b7       	in	r18, 0x3d	; 61
    1edc:	3e b7       	in	r19, 0x3e	; 62
    1ede:	28 1b       	sub	r18, r24
    1ee0:	39 0b       	sbc	r19, r25
    1ee2:	2d bf       	out	0x3d, r18	; 61
    1ee4:	3e bf       	out	0x3e, r19	; 62
    1ee6:	8d b7       	in	r24, 0x3d	; 61
    1ee8:	9e b7       	in	r25, 0x3e	; 62
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	7c 01       	movw	r14, r24
    1eee:	40 91 aa 22 	lds	r20, 0x22AA	; 0x8022aa <cmdLength>
    1ef2:	50 91 ab 22 	lds	r21, 0x22AB	; 0x8022ab <cmdLength+0x1>
    1ef6:	4f 5f       	subi	r20, 0xFF	; 255
    1ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    1efa:	6a e6       	ldi	r22, 0x6A	; 106
    1efc:	72 e2       	ldi	r23, 0x22	; 34
    1efe:	0e 94 09 4f 	call	0x9e12	; 0x9e12 <memcpy>
    1f02:	60 91 aa 22 	lds	r22, 0x22AA	; 0x8022aa <cmdLength>
    1f06:	70 91 ab 22 	lds	r23, 0x22AB	; 0x8022ab <cmdLength+0x1>
    1f0a:	c7 01       	movw	r24, r14
    1f0c:	0e 94 89 38 	call	0x7112	; 0x7112 <handleSerialCommand>
    1f10:	8f b7       	in	r24, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	10 92 ad 22 	sts	0x22AD, r1	; 0x8022ad <processingCmdFlag>
    1f18:	8f bf       	out	0x3f, r24	; 63
    1f1a:	0d bf       	out	0x3d, r16	; 61
    1f1c:	1e bf       	out	0x3e, r17	; 62
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	08 95       	ret

00001f2c <irTransmit>:
    1f2c:	8f 92       	push	r8
    1f2e:	9f 92       	push	r9
    1f30:	af 92       	push	r10
    1f32:	bf 92       	push	r11
    1f34:	cf 92       	push	r12
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	c8 2f       	mov	r28, r24
    1f46:	d0 e0       	ldi	r29, 0x00	; 0
    1f48:	98 e3       	ldi	r25, 0x38	; 56
    1f4a:	89 9f       	mul	r24, r25
    1f4c:	d0 01       	movw	r26, r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	a4 58       	subi	r26, 0x84	; 132
    1f52:	bb 4d       	sbci	r27, 0xDB	; 219
    1f54:	1a 96       	adiw	r26, 0x0a	; 10
    1f56:	ed 91       	ld	r30, X+
    1f58:	fc 91       	ld	r31, X
    1f5a:	1b 97       	sbiw	r26, 0x0b	; 11
    1f5c:	e7 30       	cpi	r30, 0x07	; 7
    1f5e:	f1 05       	cpc	r31, r1
    1f60:	08 f4       	brcc	.+2      	; 0x1f64 <irTransmit+0x38>
    1f62:	50 c0       	rjmp	.+160    	; 0x2004 <irTransmit+0xd8>
    1f64:	1a 96       	adiw	r26, 0x0a	; 10
    1f66:	8d 91       	ld	r24, X+
    1f68:	9c 91       	ld	r25, X
    1f6a:	1b 97       	sbiw	r26, 0x0b	; 11
    1f6c:	07 97       	sbiw	r24, 0x07	; 7
    1f6e:	a8 0f       	add	r26, r24
    1f70:	b9 1f       	adc	r27, r25
    1f72:	1e 96       	adiw	r26, 0x0e	; 14
    1f74:	8c 91       	ld	r24, X
    1f76:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <next_byte>
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	ea 5f       	subi	r30, 0xFA	; 250
    1f82:	ff 4d       	sbci	r31, 0xDF	; 223
    1f84:	a0 81       	ld	r26, Z
    1f86:	b1 81       	ldd	r27, Z+1	; 0x01
    1f88:	80 91 69 22 	lds	r24, 0x2269	; 0x802269 <next_byte>
    1f8c:	8c 93       	st	X, r24
    1f8e:	88 e3       	ldi	r24, 0x38	; 56
    1f90:	8c 9f       	mul	r24, r28
    1f92:	f0 01       	movw	r30, r0
    1f94:	8d 9f       	mul	r24, r29
    1f96:	f0 0d       	add	r31, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	e4 58       	subi	r30, 0x84	; 132
    1f9c:	fb 4d       	sbci	r31, 0xDB	; 219
    1f9e:	82 85       	ldd	r24, Z+10	; 0x0a
    1fa0:	93 85       	ldd	r25, Z+11	; 0x0b
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	82 87       	std	Z+10, r24	; 0x0a
    1fa6:	93 87       	std	Z+11, r25	; 0x0b
    1fa8:	22 85       	ldd	r18, Z+10	; 0x0a
    1faa:	33 85       	ldd	r19, Z+11	; 0x0b
    1fac:	86 a9       	ldd	r24, Z+54	; 0x36
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	07 96       	adiw	r24, 0x07	; 7
    1fb2:	28 17       	cp	r18, r24
    1fb4:	39 07       	cpc	r19, r25
    1fb6:	c8 f0       	brcs	.+50     	; 0x1fea <irTransmit+0xbe>
    1fb8:	14 82       	std	Z+4, r1	; 0x04
    1fba:	15 82       	std	Z+5, r1	; 0x05
    1fbc:	16 82       	std	Z+6, r1	; 0x06
    1fbe:	17 82       	std	Z+7, r1	; 0x07
    1fc0:	10 86       	std	Z+8, r1	; 0x08
    1fc2:	11 86       	std	Z+9, r1	; 0x09
    1fc4:	12 86       	std	Z+10, r1	; 0x0a
    1fc6:	13 86       	std	Z+11, r1	; 0x0b
    1fc8:	14 86       	std	Z+12, r1	; 0x0c
    1fca:	15 86       	std	Z+13, r1	; 0x0d
    1fcc:	16 aa       	std	Z+54, r1	; 0x36
    1fce:	17 aa       	std	Z+55, r1	; 0x37
    1fd0:	14 96       	adiw	r26, 0x04	; 4
    1fd2:	8c 91       	ld	r24, X
    1fd4:	14 97       	sbiw	r26, 0x04	; 4
    1fd6:	80 61       	ori	r24, 0x10	; 16
    1fd8:	14 96       	adiw	r26, 0x04	; 4
    1fda:	8c 93       	st	X, r24
    1fdc:	14 97       	sbiw	r26, 0x04	; 4
    1fde:	13 96       	adiw	r26, 0x03	; 3
    1fe0:	8c 91       	ld	r24, X
    1fe2:	13 97       	sbiw	r26, 0x03	; 3
    1fe4:	8c 7f       	andi	r24, 0xFC	; 252
    1fe6:	13 96       	adiw	r26, 0x03	; 3
    1fe8:	8c 93       	st	X, r24
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	bf 90       	pop	r11
    1ffc:	af 90       	pop	r10
    1ffe:	9f 90       	pop	r9
    2000:	8f 90       	pop	r8
    2002:	08 95       	ret
    2004:	88 27       	eor	r24, r24
    2006:	e2 50       	subi	r30, 0x02	; 2
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	8f 4f       	sbci	r24, 0xFF	; 255
    200c:	0c 94 8f 4b 	jmp	0x971e	; 0x971e <__tablejump2__>
    2010:	88 e3       	ldi	r24, 0x38	; 56
    2012:	8c 9f       	mul	r24, r28
    2014:	f0 01       	movw	r30, r0
    2016:	8d 9f       	mul	r24, r29
    2018:	f0 0d       	add	r31, r0
    201a:	11 24       	eor	r1, r1
    201c:	e4 58       	subi	r30, 0x84	; 132
    201e:	fb 4d       	sbci	r31, 0xDB	; 219
    2020:	80 85       	ldd	r24, Z+8	; 0x08
    2022:	91 85       	ldd	r25, Z+9	; 0x09
    2024:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <next_byte>
    2028:	a8 cf       	rjmp	.-176    	; 0x1f7a <irTransmit+0x4e>
    202a:	88 e3       	ldi	r24, 0x38	; 56
    202c:	8c 9f       	mul	r24, r28
    202e:	80 01       	movw	r16, r0
    2030:	8d 9f       	mul	r24, r29
    2032:	10 0d       	add	r17, r0
    2034:	11 24       	eor	r1, r1
    2036:	04 58       	subi	r16, 0x84	; 132
    2038:	1b 4d       	sbci	r17, 0xDB	; 219
    203a:	f8 01       	movw	r30, r16
    203c:	87 a9       	ldd	r24, Z+55	; 0x37
    203e:	86 fd       	sbrc	r24, 6
    2040:	5c c0       	rjmp	.+184    	; 0x20fa <irTransmit+0x1ce>
    2042:	88 e3       	ldi	r24, 0x38	; 56
    2044:	8c 9f       	mul	r24, r28
    2046:	f0 01       	movw	r30, r0
    2048:	8d 9f       	mul	r24, r29
    204a:	f0 0d       	add	r31, r0
    204c:	11 24       	eor	r1, r1
    204e:	e4 58       	subi	r30, 0x84	; 132
    2050:	fb 4d       	sbci	r31, 0xDB	; 219
    2052:	80 85       	ldd	r24, Z+8	; 0x08
    2054:	91 85       	ldd	r25, Z+9	; 0x09
    2056:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <next_byte>
    205a:	8f cf       	rjmp	.-226    	; 0x1f7a <irTransmit+0x4e>
    205c:	88 e3       	ldi	r24, 0x38	; 56
    205e:	8c 9f       	mul	r24, r28
    2060:	f0 01       	movw	r30, r0
    2062:	8d 9f       	mul	r24, r29
    2064:	f0 0d       	add	r31, r0
    2066:	11 24       	eor	r1, r1
    2068:	e4 58       	subi	r30, 0x84	; 132
    206a:	fb 4d       	sbci	r31, 0xDB	; 219
    206c:	86 81       	ldd	r24, Z+6	; 0x06
    206e:	97 81       	ldd	r25, Z+7	; 0x07
    2070:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <next_byte>
    2074:	82 cf       	rjmp	.-252    	; 0x1f7a <irTransmit+0x4e>
    2076:	88 e3       	ldi	r24, 0x38	; 56
    2078:	8c 9f       	mul	r24, r28
    207a:	f0 01       	movw	r30, r0
    207c:	8d 9f       	mul	r24, r29
    207e:	f0 0d       	add	r31, r0
    2080:	11 24       	eor	r1, r1
    2082:	e4 58       	subi	r30, 0x84	; 132
    2084:	fb 4d       	sbci	r31, 0xDB	; 219
    2086:	86 81       	ldd	r24, Z+6	; 0x06
    2088:	97 81       	ldd	r25, Z+7	; 0x07
    208a:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <next_byte>
    208e:	75 cf       	rjmp	.-278    	; 0x1f7a <irTransmit+0x4e>
    2090:	88 e3       	ldi	r24, 0x38	; 56
    2092:	8c 9f       	mul	r24, r28
    2094:	f0 01       	movw	r30, r0
    2096:	8d 9f       	mul	r24, r29
    2098:	f0 0d       	add	r31, r0
    209a:	11 24       	eor	r1, r1
    209c:	e4 58       	subi	r30, 0x84	; 132
    209e:	fb 4d       	sbci	r31, 0xDB	; 219
    20a0:	84 81       	ldd	r24, Z+4	; 0x04
    20a2:	95 81       	ldd	r25, Z+5	; 0x05
    20a4:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <next_byte>
    20a8:	68 cf       	rjmp	.-304    	; 0x1f7a <irTransmit+0x4e>
    20aa:	88 e3       	ldi	r24, 0x38	; 56
    20ac:	8c 9f       	mul	r24, r28
    20ae:	f0 01       	movw	r30, r0
    20b0:	8d 9f       	mul	r24, r29
    20b2:	f0 0d       	add	r31, r0
    20b4:	11 24       	eor	r1, r1
    20b6:	e4 58       	subi	r30, 0x84	; 132
    20b8:	fb 4d       	sbci	r31, 0xDB	; 219
    20ba:	84 81       	ldd	r24, Z+4	; 0x04
    20bc:	95 81       	ldd	r25, Z+5	; 0x05
    20be:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <next_byte>
    20c2:	5b cf       	rjmp	.-330    	; 0x1f7a <irTransmit+0x4e>
    20c4:	88 e3       	ldi	r24, 0x38	; 56
    20c6:	8c 9f       	mul	r24, r28
    20c8:	f0 01       	movw	r30, r0
    20ca:	8d 9f       	mul	r24, r29
    20cc:	f0 0d       	add	r31, r0
    20ce:	11 24       	eor	r1, r1
    20d0:	e4 58       	subi	r30, 0x84	; 132
    20d2:	fb 4d       	sbci	r31, 0xDB	; 219
    20d4:	86 a9       	ldd	r24, Z+54	; 0x36
    20d6:	8f 73       	andi	r24, 0x3F	; 63
    20d8:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <next_byte>
    20dc:	87 a9       	ldd	r24, Z+55	; 0x37
    20de:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <next_byte>
    20e2:	80 78       	andi	r24, 0x80	; 128
    20e4:	89 2b       	or	r24, r25
    20e6:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <next_byte>
    20ea:	87 a9       	ldd	r24, Z+55	; 0x37
    20ec:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <next_byte>
    20f0:	80 74       	andi	r24, 0x40	; 64
    20f2:	89 2b       	or	r24, r25
    20f4:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <next_byte>
    20f8:	40 cf       	rjmp	.-384    	; 0x1f7a <irTransmit+0x4e>
    20fa:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    20fe:	f8 01       	movw	r30, r16
    2100:	c0 84       	ldd	r12, Z+8	; 0x08
    2102:	d1 84       	ldd	r13, Z+9	; 0x09
    2104:	4b 01       	movw	r8, r22
    2106:	5c 01       	movw	r10, r24
    2108:	aa 24       	eor	r10, r10
    210a:	bb 24       	eor	r11, r11
    210c:	e1 2c       	mov	r14, r1
    210e:	f1 2c       	mov	r15, r1
    2110:	8c 14       	cp	r8, r12
    2112:	9d 04       	cpc	r9, r13
    2114:	ae 04       	cpc	r10, r14
    2116:	bf 04       	cpc	r11, r15
    2118:	a8 f0       	brcs	.+42     	; 0x2144 <irTransmit+0x218>
    211a:	20 85       	ldd	r18, Z+8	; 0x08
    211c:	31 85       	ldd	r19, Z+9	; 0x09
    211e:	62 1b       	sub	r22, r18
    2120:	73 0b       	sbc	r23, r19
    2122:	61 33       	cpi	r22, 0x31	; 49
    2124:	f5 e7       	ldi	r31, 0x75	; 117
    2126:	7f 07       	cpc	r23, r31
    2128:	10 f0       	brcs	.+4      	; 0x212e <irTransmit+0x202>
    212a:	60 ef       	ldi	r22, 0xF0	; 240
    212c:	7f ef       	ldi	r23, 0xFF	; 255
    212e:	88 e3       	ldi	r24, 0x38	; 56
    2130:	8c 9f       	mul	r24, r28
    2132:	f0 01       	movw	r30, r0
    2134:	8d 9f       	mul	r24, r29
    2136:	f0 0d       	add	r31, r0
    2138:	11 24       	eor	r1, r1
    213a:	e4 58       	subi	r30, 0x84	; 132
    213c:	fb 4d       	sbci	r31, 0xDB	; 219
    213e:	60 87       	std	Z+8, r22	; 0x08
    2140:	71 87       	std	Z+9, r23	; 0x09
    2142:	7f cf       	rjmp	.-258    	; 0x2042 <irTransmit+0x116>
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	f2 cf       	rjmp	.-28     	; 0x212e <irTransmit+0x202>

0000214a <irCommInit>:
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	94 e4       	ldi	r25, 0x44	; 68
    2150:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    2154:	84 e0       	ldi	r24, 0x04	; 4
    2156:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    215a:	90 93 82 06 	sts	0x0682, r25	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
    215e:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    2162:	8f b7       	in	r24, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	9f e3       	ldi	r25, 0x3F	; 63
    2168:	90 93 fd 23 	sts	0x23FD, r25	; 0x8023fd <hpIrBlock_bm>
    216c:	8f bf       	out	0x3f, r24	; 63
    216e:	c6 e0       	ldi	r28, 0x06	; 6
    2170:	d0 e2       	ldi	r29, 0x20	; 32
    2172:	62 e1       	ldi	r22, 0x12	; 18
    2174:	70 e2       	ldi	r23, 0x20	; 32
    2176:	de 01       	movw	r26, r28
    2178:	48 e2       	ldi	r20, 0x28	; 40
    217a:	33 e0       	ldi	r19, 0x03	; 3
    217c:	20 e7       	ldi	r18, 0x70	; 112
    217e:	92 e0       	ldi	r25, 0x02	; 2
    2180:	ed 91       	ld	r30, X+
    2182:	fd 91       	ld	r31, X+
    2184:	43 83       	std	Z+3, r20	; 0x03
    2186:	35 83       	std	Z+5, r19	; 0x05
    2188:	26 83       	std	Z+6, r18	; 0x06
    218a:	97 83       	std	Z+7, r25	; 0x07
    218c:	84 81       	ldd	r24, Z+4	; 0x04
    218e:	80 61       	ori	r24, 0x10	; 16
    2190:	84 83       	std	Z+4, r24	; 0x04
    2192:	84 81       	ldd	r24, Z+4	; 0x04
    2194:	88 60       	ori	r24, 0x08	; 8
    2196:	84 83       	std	Z+4, r24	; 0x04
    2198:	6a 17       	cp	r22, r26
    219a:	7b 07       	cpc	r23, r27
    219c:	89 f7       	brne	.-30     	; 0x2180 <irCommInit+0x36>
    219e:	10 92 20 26 	sts	0x2620, r1	; 0x802620 <cmdArrivalTime>
    21a2:	10 92 21 26 	sts	0x2621, r1	; 0x802621 <cmdArrivalTime+0x1>
    21a6:	10 92 22 26 	sts	0x2622, r1	; 0x802622 <cmdArrivalTime+0x2>
    21aa:	10 92 23 26 	sts	0x2623, r1	; 0x802623 <cmdArrivalTime+0x3>
    21ae:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <numWaitingMsgs>
    21b2:	10 92 e0 25 	sts	0x25E0, r1	; 0x8025e0 <userFacingMessagesOvf>
    21b6:	10 92 ad 22 	sts	0x22AD, r1	; 0x8022ad <processingCmdFlag>
    21ba:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <processingFFsyncFlag>
    21be:	10 92 12 26 	sts	0x2612, r1	; 0x802612 <incomingMsgHead>
    21c2:	10 92 13 26 	sts	0x2613, r1	; 0x802613 <incomingMsgHead+0x1>
    21c6:	10 92 23 24 	sts	0x2423, r1	; 0x802423 <memoryConsumedByBuffer>
    21ca:	10 92 24 24 	sts	0x2424, r1	; 0x802424 <memoryConsumedByBuffer+0x1>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	38 e3       	ldi	r19, 0x38	; 56
    21d4:	38 9f       	mul	r19, r24
    21d6:	f0 01       	movw	r30, r0
    21d8:	39 9f       	mul	r19, r25
    21da:	f0 0d       	add	r31, r0
    21dc:	11 24       	eor	r1, r1
    21de:	e4 58       	subi	r30, 0x84	; 132
    21e0:	fb 4d       	sbci	r31, 0xDB	; 219
    21e2:	14 82       	std	Z+4, r1	; 0x04
    21e4:	15 82       	std	Z+5, r1	; 0x05
    21e6:	16 82       	std	Z+6, r1	; 0x06
    21e8:	17 82       	std	Z+7, r1	; 0x07
    21ea:	10 86       	std	Z+8, r1	; 0x08
    21ec:	11 86       	std	Z+9, r1	; 0x09
    21ee:	12 86       	std	Z+10, r1	; 0x0a
    21f0:	13 86       	std	Z+11, r1	; 0x0b
    21f2:	14 86       	std	Z+12, r1	; 0x0c
    21f4:	15 86       	std	Z+13, r1	; 0x0d
    21f6:	16 aa       	std	Z+54, r1	; 0x36
    21f8:	17 aa       	std	Z+55, r1	; 0x37
    21fa:	e9 91       	ld	r30, Y+
    21fc:	f9 91       	ld	r31, Y+
    21fe:	24 81       	ldd	r18, Z+4	; 0x04
    2200:	20 61       	ori	r18, 0x10	; 16
    2202:	24 83       	std	Z+4, r18	; 0x04
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	86 30       	cpi	r24, 0x06	; 6
    2208:	91 05       	cpc	r25, r1
    220a:	21 f7       	brne	.-56     	; 0x21d4 <irCommInit+0x8a>
    220c:	8f b7       	in	r24, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	10 92 fd 23 	sts	0x23FD, r1	; 0x8023fd <hpIrBlock_bm>
    2214:	8f bf       	out	0x3f, r24	; 63
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	08 95       	ret

0000221c <send_msg>:
    221c:	2f 92       	push	r2
    221e:	3f 92       	push	r3
    2220:	4f 92       	push	r4
    2222:	5f 92       	push	r5
    2224:	6f 92       	push	r6
    2226:	7f 92       	push	r7
    2228:	8f 92       	push	r8
    222a:	9f 92       	push	r9
    222c:	af 92       	push	r10
    222e:	bf 92       	push	r11
    2230:	cf 92       	push	r12
    2232:	df 92       	push	r13
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	e8 2e       	mov	r14, r24
    2242:	4b 01       	movw	r8, r22
    2244:	34 2e       	mov	r3, r20
    2246:	22 2e       	mov	r2, r18
    2248:	88 e2       	ldi	r24, 0x28	; 40
    224a:	84 17       	cp	r24, r20
    224c:	08 f4       	brcc	.+2      	; 0x2250 <send_msg+0x34>
    224e:	bf c0       	rjmp	.+382    	; 0x23ce <send_msg+0x1b2>
    2250:	60 90 ec 23 	lds	r6, 0x23EC	; 0x8023ec <droplet_ID>
    2254:	70 90 ed 23 	lds	r7, 0x23ED	; 0x8023ed <droplet_ID+0x1>
    2258:	f1 2c       	mov	r15, r1
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	97 01       	movw	r18, r14
    2260:	08 2e       	mov	r0, r24
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <send_msg+0x4c>
    2264:	35 95       	asr	r19
    2266:	27 95       	ror	r18
    2268:	0a 94       	dec	r0
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <send_msg+0x48>
    226c:	20 fd       	sbrc	r18, 0
    226e:	b8 c0       	rjmp	.+368    	; 0x23e0 <send_msg+0x1c4>
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	86 30       	cpi	r24, 0x06	; 6
    2274:	91 05       	cpc	r25, r1
    2276:	99 f7       	brne	.-26     	; 0x225e <send_msg+0x42>
    2278:	e3 01       	movw	r28, r6
    227a:	33 20       	and	r3, r3
    227c:	19 f1       	breq	.+70     	; 0x22c4 <send_msg+0xa8>
    227e:	f4 01       	movw	r30, r8
    2280:	2f ef       	ldi	r18, 0xFF	; 255
    2282:	23 0d       	add	r18, r3
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	2f 5f       	subi	r18, 0xFF	; 255
    2288:	3f 4f       	sbci	r19, 0xFF	; 255
    228a:	28 0d       	add	r18, r8
    228c:	39 1d       	adc	r19, r9
    228e:	81 91       	ld	r24, Z+
    2290:	c8 27       	eor	r28, r24
    2292:	8c 2f       	mov	r24, r28
    2294:	82 95       	swap	r24
    2296:	8c 27       	eor	r24, r28
    2298:	08 2e       	mov	r0, r24
    229a:	86 95       	lsr	r24
    229c:	86 95       	lsr	r24
    229e:	80 25       	eor	r24, r0
    22a0:	08 2e       	mov	r0, r24
    22a2:	86 95       	lsr	r24
    22a4:	80 25       	eor	r24, r0
    22a6:	87 70       	andi	r24, 0x07	; 7
    22a8:	0c 2e       	mov	r0, r28
    22aa:	cd 2f       	mov	r28, r29
    22ac:	86 95       	lsr	r24
    22ae:	07 94       	ror	r0
    22b0:	87 95       	ror	r24
    22b2:	d0 2d       	mov	r29, r0
    22b4:	c8 27       	eor	r28, r24
    22b6:	06 94       	lsr	r0
    22b8:	87 95       	ror	r24
    22ba:	d0 25       	eor	r29, r0
    22bc:	c8 27       	eor	r28, r24
    22be:	e2 17       	cp	r30, r18
    22c0:	f3 07       	cpc	r31, r19
    22c2:	29 f7       	brne	.-54     	; 0x228e <send_msg+0x72>
    22c4:	8a e8       	ldi	r24, 0x8A	; 138
    22c6:	a8 2e       	mov	r10, r24
    22c8:	84 e2       	ldi	r24, 0x24	; 36
    22ca:	b8 2e       	mov	r11, r24
    22cc:	9a e8       	ldi	r25, 0x8A	; 138
    22ce:	c9 2e       	mov	r12, r25
    22d0:	90 e2       	ldi	r25, 0x20	; 32
    22d2:	d9 2e       	mov	r13, r25
    22d4:	00 e0       	ldi	r16, 0x00	; 0
    22d6:	10 e0       	ldi	r17, 0x00	; 0
    22d8:	43 2c       	mov	r4, r3
    22da:	51 2c       	mov	r5, r1
    22dc:	0b c0       	rjmp	.+22     	; 0x22f4 <send_msg+0xd8>
    22de:	0f 5f       	subi	r16, 0xFF	; 255
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	f8 e3       	ldi	r31, 0x38	; 56
    22e4:	af 0e       	add	r10, r31
    22e6:	b1 1c       	adc	r11, r1
    22e8:	8f ef       	ldi	r24, 0xFF	; 255
    22ea:	c8 1a       	sub	r12, r24
    22ec:	d8 0a       	sbc	r13, r24
    22ee:	06 30       	cpi	r16, 0x06	; 6
    22f0:	11 05       	cpc	r17, r1
    22f2:	41 f1       	breq	.+80     	; 0x2344 <send_msg+0x128>
    22f4:	c7 01       	movw	r24, r14
    22f6:	00 2e       	mov	r0, r16
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <send_msg+0xe2>
    22fa:	95 95       	asr	r25
    22fc:	87 95       	ror	r24
    22fe:	0a 94       	dec	r0
    2300:	e2 f7       	brpl	.-8      	; 0x22fa <send_msg+0xde>
    2302:	80 ff       	sbrs	r24, 0
    2304:	ec cf       	rjmp	.-40     	; 0x22de <send_msg+0xc2>
    2306:	88 e3       	ldi	r24, 0x38	; 56
    2308:	80 9f       	mul	r24, r16
    230a:	f0 01       	movw	r30, r0
    230c:	81 9f       	mul	r24, r17
    230e:	f0 0d       	add	r31, r0
    2310:	11 24       	eor	r1, r1
    2312:	e4 58       	subi	r30, 0x84	; 132
    2314:	fb 4d       	sbci	r31, 0xDB	; 219
    2316:	87 a9       	ldd	r24, Z+55	; 0x37
    2318:	80 62       	ori	r24, 0x20	; 32
    231a:	87 ab       	std	Z+55, r24	; 0x37
    231c:	36 aa       	std	Z+54, r3	; 0x36
    231e:	c4 83       	std	Z+4, r28	; 0x04
    2320:	d5 83       	std	Z+5, r29	; 0x05
    2322:	12 86       	std	Z+10, r1	; 0x0a
    2324:	13 86       	std	Z+11, r1	; 0x0b
    2326:	66 82       	std	Z+6, r6	; 0x06
    2328:	77 82       	std	Z+7, r7	; 0x07
    232a:	a2 01       	movw	r20, r4
    232c:	b4 01       	movw	r22, r8
    232e:	c5 01       	movw	r24, r10
    2330:	0e 94 09 4f 	call	0x9e12	; 0x9e12 <memcpy>
    2334:	90 91 01 0b 	lds	r25, 0x0B01	; 0x800b01 <__TEXT_REGION_LENGTH__+0x700b01>
    2338:	f6 01       	movw	r30, r12
    233a:	80 81       	ld	r24, Z
    233c:	89 2b       	or	r24, r25
    233e:	80 93 01 0b 	sts	0x0B01, r24	; 0x800b01 <__TEXT_REGION_LENGTH__+0x700b01>
    2342:	cd cf       	rjmp	.-102    	; 0x22de <send_msg+0xc2>
    2344:	e6 e0       	ldi	r30, 0x06	; 6
    2346:	f0 e2       	ldi	r31, 0x20	; 32
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	48 e3       	ldi	r20, 0x38	; 56
    234e:	08 c0       	rjmp	.+16     	; 0x2360 <send_msg+0x144>
    2350:	23 60       	ori	r18, 0x03	; 3
    2352:	13 96       	adiw	r26, 0x03	; 3
    2354:	2c 93       	st	X, r18
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	32 96       	adiw	r30, 0x02	; 2
    235a:	86 30       	cpi	r24, 0x06	; 6
    235c:	91 05       	cpc	r25, r1
    235e:	21 f1       	breq	.+72     	; 0x23a8 <send_msg+0x18c>
    2360:	97 01       	movw	r18, r14
    2362:	08 2e       	mov	r0, r24
    2364:	02 c0       	rjmp	.+4      	; 0x236a <send_msg+0x14e>
    2366:	35 95       	asr	r19
    2368:	27 95       	ror	r18
    236a:	0a 94       	dec	r0
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <send_msg+0x14a>
    236e:	20 ff       	sbrs	r18, 0
    2370:	f2 cf       	rjmp	.-28     	; 0x2356 <send_msg+0x13a>
    2372:	48 9f       	mul	r20, r24
    2374:	d0 01       	movw	r26, r0
    2376:	49 9f       	mul	r20, r25
    2378:	b0 0d       	add	r27, r0
    237a:	11 24       	eor	r1, r1
    237c:	a4 58       	subi	r26, 0x84	; 132
    237e:	bb 4d       	sbci	r27, 0xDB	; 219
    2380:	1d 92       	st	X+, r1
    2382:	1d 92       	st	X+, r1
    2384:	1d 92       	st	X+, r1
    2386:	1c 92       	st	X, r1
    2388:	13 97       	sbiw	r26, 0x03	; 3
    238a:	a0 81       	ld	r26, Z
    238c:	b1 81       	ldd	r27, Z+1	; 0x01
    238e:	13 96       	adiw	r26, 0x03	; 3
    2390:	2c 91       	ld	r18, X
    2392:	13 97       	sbiw	r26, 0x03	; 3
    2394:	21 10       	cpse	r2, r1
    2396:	dc cf       	rjmp	.-72     	; 0x2350 <send_msg+0x134>
    2398:	22 60       	ori	r18, 0x02	; 2
    239a:	13 96       	adiw	r26, 0x03	; 3
    239c:	2c 93       	st	X, r18
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	32 96       	adiw	r30, 0x02	; 2
    23a2:	86 30       	cpi	r24, 0x06	; 6
    23a4:	91 05       	cpc	r25, r1
    23a6:	e1 f6       	brne	.-72     	; 0x2360 <send_msg+0x144>
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	1f 91       	pop	r17
    23ae:	0f 91       	pop	r16
    23b0:	ff 90       	pop	r15
    23b2:	ef 90       	pop	r14
    23b4:	df 90       	pop	r13
    23b6:	cf 90       	pop	r12
    23b8:	bf 90       	pop	r11
    23ba:	af 90       	pop	r10
    23bc:	9f 90       	pop	r9
    23be:	8f 90       	pop	r8
    23c0:	7f 90       	pop	r7
    23c2:	6f 90       	pop	r6
    23c4:	5f 90       	pop	r5
    23c6:	4f 90       	pop	r4
    23c8:	3f 90       	pop	r3
    23ca:	2f 90       	pop	r2
    23cc:	08 95       	ret
    23ce:	8c e8       	ldi	r24, 0x8C	; 140
    23d0:	96 e0       	ldi	r25, 0x06	; 6
    23d2:	9f 93       	push	r25
    23d4:	8f 93       	push	r24
    23d6:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	38 cf       	rjmp	.-400    	; 0x2250 <send_msg+0x34>
    23e0:	28 e3       	ldi	r18, 0x38	; 56
    23e2:	28 9f       	mul	r18, r24
    23e4:	f0 01       	movw	r30, r0
    23e6:	29 9f       	mul	r18, r25
    23e8:	f0 0d       	add	r31, r0
    23ea:	11 24       	eor	r1, r1
    23ec:	e4 58       	subi	r30, 0x84	; 132
    23ee:	fb 4d       	sbci	r31, 0xDB	; 219
    23f0:	87 a9       	ldd	r24, Z+55	; 0x37
    23f2:	80 7c       	andi	r24, 0xC0	; 192
    23f4:	e3 01       	movw	r28, r6
    23f6:	c8 27       	eor	r28, r24
    23f8:	8c 2f       	mov	r24, r28
    23fa:	82 95       	swap	r24
    23fc:	8c 27       	eor	r24, r28
    23fe:	08 2e       	mov	r0, r24
    2400:	86 95       	lsr	r24
    2402:	86 95       	lsr	r24
    2404:	80 25       	eor	r24, r0
    2406:	08 2e       	mov	r0, r24
    2408:	86 95       	lsr	r24
    240a:	80 25       	eor	r24, r0
    240c:	87 70       	andi	r24, 0x07	; 7
    240e:	0c 2e       	mov	r0, r28
    2410:	cd 2f       	mov	r28, r29
    2412:	86 95       	lsr	r24
    2414:	07 94       	ror	r0
    2416:	87 95       	ror	r24
    2418:	d0 2d       	mov	r29, r0
    241a:	c8 27       	eor	r28, r24
    241c:	06 94       	lsr	r0
    241e:	87 95       	ror	r24
    2420:	d0 25       	eor	r29, r0
    2422:	c8 27       	eor	r28, r24
    2424:	87 a9       	ldd	r24, Z+55	; 0x37
    2426:	86 fd       	sbrc	r24, 6
    2428:	28 cf       	rjmp	.-432    	; 0x227a <send_msg+0x5e>
    242a:	80 85       	ldd	r24, Z+8	; 0x08
    242c:	91 85       	ldd	r25, Z+9	; 0x09
    242e:	c8 27       	eor	r28, r24
    2430:	8c 2f       	mov	r24, r28
    2432:	82 95       	swap	r24
    2434:	8c 27       	eor	r24, r28
    2436:	08 2e       	mov	r0, r24
    2438:	86 95       	lsr	r24
    243a:	86 95       	lsr	r24
    243c:	80 25       	eor	r24, r0
    243e:	08 2e       	mov	r0, r24
    2440:	86 95       	lsr	r24
    2442:	80 25       	eor	r24, r0
    2444:	87 70       	andi	r24, 0x07	; 7
    2446:	0c 2e       	mov	r0, r28
    2448:	cd 2f       	mov	r28, r29
    244a:	86 95       	lsr	r24
    244c:	07 94       	ror	r0
    244e:	87 95       	ror	r24
    2450:	d0 2d       	mov	r29, r0
    2452:	c8 27       	eor	r28, r24
    2454:	06 94       	lsr	r0
    2456:	87 95       	ror	r24
    2458:	d0 25       	eor	r29, r0
    245a:	c8 27       	eor	r28, r24
    245c:	0e cf       	rjmp	.-484    	; 0x227a <send_msg+0x5e>

0000245e <waitForTransmission>:
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	78 e3       	ldi	r23, 0x38	; 56
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	ac 01       	movw	r20, r24
    246a:	02 2e       	mov	r0, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <waitForTransmission+0x14>
    246e:	55 95       	asr	r21
    2470:	47 95       	ror	r20
    2472:	0a 94       	dec	r0
    2474:	e2 f7       	brpl	.-8      	; 0x246e <waitForTransmission+0x10>
    2476:	40 ff       	sbrs	r20, 0
    2478:	0a c0       	rjmp	.+20     	; 0x248e <waitForTransmission+0x30>
    247a:	72 9f       	mul	r23, r18
    247c:	f0 01       	movw	r30, r0
    247e:	73 9f       	mul	r23, r19
    2480:	f0 0d       	add	r31, r0
    2482:	11 24       	eor	r1, r1
    2484:	e4 58       	subi	r30, 0x84	; 132
    2486:	fb 4d       	sbci	r31, 0xDB	; 219
    2488:	47 a9       	ldd	r20, Z+55	; 0x37
    248a:	45 fd       	sbrc	r20, 5
    248c:	61 e0       	ldi	r22, 0x01	; 1
    248e:	2f 5f       	subi	r18, 0xFF	; 255
    2490:	3f 4f       	sbci	r19, 0xFF	; 255
    2492:	26 30       	cpi	r18, 0x06	; 6
    2494:	31 05       	cpc	r19, r1
    2496:	41 f7       	brne	.-48     	; 0x2468 <waitForTransmission+0xa>
    2498:	ef e1       	ldi	r30, 0x1F	; 31
    249a:	f3 e0       	ldi	r31, 0x03	; 3
    249c:	31 97       	sbiw	r30, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <waitForTransmission+0x3e>
    24a0:	00 c0       	rjmp	.+0      	; 0x24a2 <waitForTransmission+0x44>
    24a2:	00 00       	nop
    24a4:	61 11       	cpse	r22, r1
    24a6:	dd cf       	rjmp	.-70     	; 0x2462 <waitForTransmission+0x4>
    24a8:	08 95       	ret

000024aa <irIsBusy>:
    24aa:	4f 92       	push	r4
    24ac:	5f 92       	push	r5
    24ae:	6f 92       	push	r6
    24b0:	7f 92       	push	r7
    24b2:	8f 92       	push	r8
    24b4:	9f 92       	push	r9
    24b6:	af 92       	push	r10
    24b8:	bf 92       	push	r11
    24ba:	ff 92       	push	r15
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	c8 2f       	mov	r28, r24
    24c6:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    24ca:	20 91 fd 23 	lds	r18, 0x23FD	; 0x8023fd <hpIrBlock_bm>
    24ce:	2c 23       	and	r18, r28
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <irIsBusy+0x2a>
    24d2:	59 c0       	rjmp	.+178    	; 0x2586 <irIsBusy+0xdc>
    24d4:	d0 e0       	ldi	r29, 0x00	; 0
    24d6:	ac 2f       	mov	r26, r28
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	10 e0       	ldi	r17, 0x00	; 0
    24e0:	00 e0       	ldi	r16, 0x00	; 0
    24e2:	c0 e0       	ldi	r28, 0x00	; 0
    24e4:	48 e3       	ldi	r20, 0x38	; 56
    24e6:	f4 2e       	mov	r15, r20
    24e8:	ad 01       	movw	r20, r26
    24ea:	02 2e       	mov	r0, r18
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <irIsBusy+0x48>
    24ee:	55 95       	asr	r21
    24f0:	47 95       	ror	r20
    24f2:	0a 94       	dec	r0
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <irIsBusy+0x44>
    24f6:	40 ff       	sbrs	r20, 0
    24f8:	2f c0       	rjmp	.+94     	; 0x2558 <irIsBusy+0xae>
    24fa:	f2 9e       	mul	r15, r18
    24fc:	f0 01       	movw	r30, r0
    24fe:	f3 9e       	mul	r15, r19
    2500:	f0 0d       	add	r31, r0
    2502:	11 24       	eor	r1, r1
    2504:	e4 58       	subi	r30, 0x84	; 132
    2506:	fb 4d       	sbci	r31, 0xDB	; 219
    2508:	47 a9       	ldd	r20, Z+55	; 0x37
    250a:	46 ff       	sbrs	r20, 6
    250c:	03 c0       	rjmp	.+6      	; 0x2514 <irIsBusy+0x6a>
    250e:	47 a9       	ldd	r20, Z+55	; 0x37
    2510:	47 fd       	sbrc	r20, 7
    2512:	3b c0       	rjmp	.+118    	; 0x258a <irIsBusy+0xe0>
    2514:	f2 9e       	mul	r15, r18
    2516:	f0 01       	movw	r30, r0
    2518:	f3 9e       	mul	r15, r19
    251a:	f0 0d       	add	r31, r0
    251c:	11 24       	eor	r1, r1
    251e:	e4 58       	subi	r30, 0x84	; 132
    2520:	fb 4d       	sbci	r31, 0xDB	; 219
    2522:	47 a9       	ldd	r20, Z+55	; 0x37
    2524:	45 fd       	sbrc	r20, 5
    2526:	c2 e0       	ldi	r28, 0x02	; 2
    2528:	f2 9e       	mul	r15, r18
    252a:	f0 01       	movw	r30, r0
    252c:	f3 9e       	mul	r15, r19
    252e:	f0 0d       	add	r31, r0
    2530:	11 24       	eor	r1, r1
    2532:	e4 58       	subi	r30, 0x84	; 132
    2534:	fb 4d       	sbci	r31, 0xDB	; 219
    2536:	80 80       	ld	r8, Z
    2538:	91 80       	ldd	r9, Z+1	; 0x01
    253a:	a2 80       	ldd	r10, Z+2	; 0x02
    253c:	b3 80       	ldd	r11, Z+3	; 0x03
    253e:	2b 01       	movw	r4, r22
    2540:	3c 01       	movw	r6, r24
    2542:	48 18       	sub	r4, r8
    2544:	59 08       	sbc	r5, r9
    2546:	6a 08       	sbc	r6, r10
    2548:	7b 08       	sbc	r7, r11
    254a:	40 e1       	ldi	r20, 0x10	; 16
    254c:	44 16       	cp	r4, r20
    254e:	51 04       	cpc	r5, r1
    2550:	61 04       	cpc	r6, r1
    2552:	71 04       	cpc	r7, r1
    2554:	08 f4       	brcc	.+2      	; 0x2558 <irIsBusy+0xae>
    2556:	01 e0       	ldi	r16, 0x01	; 1
    2558:	2f 5f       	subi	r18, 0xFF	; 255
    255a:	3f 4f       	sbci	r19, 0xFF	; 255
    255c:	26 30       	cpi	r18, 0x06	; 6
    255e:	31 05       	cpc	r19, r1
    2560:	19 f6       	brne	.-122    	; 0x24e8 <irIsBusy+0x3e>
    2562:	80 2f       	mov	r24, r16
    2564:	81 2b       	or	r24, r17
    2566:	8d 2b       	or	r24, r29
    2568:	8c 2b       	or	r24, r28
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	ff 90       	pop	r15
    2574:	bf 90       	pop	r11
    2576:	af 90       	pop	r10
    2578:	9f 90       	pop	r9
    257a:	8f 90       	pop	r8
    257c:	7f 90       	pop	r7
    257e:	6f 90       	pop	r6
    2580:	5f 90       	pop	r5
    2582:	4f 90       	pop	r4
    2584:	08 95       	ret
    2586:	d8 e0       	ldi	r29, 0x08	; 8
    2588:	a6 cf       	rjmp	.-180    	; 0x24d6 <irIsBusy+0x2c>
    258a:	14 e0       	ldi	r17, 0x04	; 4
    258c:	c3 cf       	rjmp	.-122    	; 0x2514 <irIsBusy+0x6a>

0000258e <all_ir_sends>:
    258e:	df 92       	push	r13
    2590:	ef 92       	push	r14
    2592:	ff 92       	push	r15
    2594:	0f 93       	push	r16
    2596:	1f 93       	push	r17
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
    259c:	d8 2e       	mov	r13, r24
    259e:	eb 01       	movw	r28, r22
    25a0:	14 2f       	mov	r17, r20
    25a2:	79 01       	movw	r14, r18
    25a4:	0e 94 55 12 	call	0x24aa	; 0x24aa <irIsBusy>
    25a8:	82 30       	cpi	r24, 0x02	; 2
    25aa:	08 f4       	brcc	.+2      	; 0x25ae <all_ir_sends+0x20>
    25ac:	5e c0       	rjmp	.+188    	; 0x266a <all_ir_sends+0xdc>
    25ae:	1f 92       	push	r1
    25b0:	8f 93       	push	r24
    25b2:	84 e6       	ldi	r24, 0x64	; 100
    25b4:	96 e0       	ldi	r25, 0x06	; 6
    25b6:	9f 93       	push	r25
    25b8:	8f 93       	push	r24
    25ba:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	11 23       	and	r17, r17
    25c8:	09 f4       	brne	.+2      	; 0x25cc <all_ir_sends+0x3e>
    25ca:	42 c0       	rjmp	.+132    	; 0x2650 <all_ir_sends+0xc2>
    25cc:	88 81       	ld	r24, Y
    25ce:	80 52       	subi	r24, 0x20	; 32
    25d0:	8f 35       	cpi	r24, 0x5F	; 95
    25d2:	08 f0       	brcs	.+2      	; 0x25d6 <all_ir_sends+0x48>
    25d4:	8d c0       	rjmp	.+282    	; 0x26f0 <all_ir_sends+0x162>
    25d6:	fe 01       	movw	r30, r28
    25d8:	31 96       	adiw	r30, 0x01	; 1
    25da:	11 50       	subi	r17, 0x01	; 1
    25dc:	21 2f       	mov	r18, r17
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	2f 5f       	subi	r18, 0xFF	; 255
    25e2:	3f 4f       	sbci	r19, 0xFF	; 255
    25e4:	2c 0f       	add	r18, r28
    25e6:	3d 1f       	adc	r19, r29
    25e8:	05 c0       	rjmp	.+10     	; 0x25f4 <all_ir_sends+0x66>
    25ea:	81 91       	ld	r24, Z+
    25ec:	80 52       	subi	r24, 0x20	; 32
    25ee:	8f 35       	cpi	r24, 0x5F	; 95
    25f0:	08 f0       	brcs	.+2      	; 0x25f4 <all_ir_sends+0x66>
    25f2:	7c c0       	rjmp	.+248    	; 0x26ec <all_ir_sends+0x15e>
    25f4:	e2 17       	cp	r30, r18
    25f6:	f3 07       	cpc	r31, r19
    25f8:	c1 f7       	brne	.-16     	; 0x25ea <all_ir_sends+0x5c>
    25fa:	dd 24       	eor	r13, r13
    25fc:	d3 94       	inc	r13
    25fe:	01 2f       	mov	r16, r17
    2600:	10 e0       	ldi	r17, 0x00	; 0
    2602:	0f 5f       	subi	r16, 0xFF	; 255
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	0c 0f       	add	r16, r28
    2608:	1d 1f       	adc	r17, r29
    260a:	83 e8       	ldi	r24, 0x83	; 131
    260c:	e8 2e       	mov	r14, r24
    260e:	80 e2       	ldi	r24, 0x20	; 32
    2610:	f8 2e       	mov	r15, r24
    2612:	12 c0       	rjmp	.+36     	; 0x2638 <all_ir_sends+0xaa>
    2614:	28 2f       	mov	r18, r24
    2616:	08 2e       	mov	r0, r24
    2618:	00 0c       	add	r0, r0
    261a:	33 0b       	sbc	r19, r19
    261c:	3f 93       	push	r19
    261e:	8f 93       	push	r24
    2620:	ff 92       	push	r15
    2622:	ef 92       	push	r14
    2624:	0e 94 f4 4f 	call	0x9fe8	; 0x9fe8 <printf>
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	21 96       	adiw	r28, 0x01	; 1
    2632:	c0 17       	cp	r28, r16
    2634:	d1 07       	cpc	r29, r17
    2636:	61 f0       	breq	.+24     	; 0x2650 <all_ir_sends+0xc2>
    2638:	88 81       	ld	r24, Y
    263a:	dd 20       	and	r13, r13
    263c:	59 f3       	breq	.-42     	; 0x2614 <all_ir_sends+0x86>
    263e:	08 2e       	mov	r0, r24
    2640:	00 0c       	add	r0, r0
    2642:	99 0b       	sbc	r25, r25
    2644:	0e 94 30 50 	call	0xa060	; 0xa060 <putchar>
    2648:	21 96       	adiw	r28, 0x01	; 1
    264a:	c0 17       	cp	r28, r16
    264c:	d1 07       	cpc	r29, r17
    264e:	a1 f7       	brne	.-24     	; 0x2638 <all_ir_sends+0xaa>
    2650:	85 e7       	ldi	r24, 0x75	; 117
    2652:	90 e2       	ldi	r25, 0x20	; 32
    2654:	0e 94 36 50 	call	0xa06c	; 0xa06c <puts>
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	ff 90       	pop	r15
    2664:	ef 90       	pop	r14
    2666:	df 90       	pop	r13
    2668:	08 95       	ret
    266a:	4d 2d       	mov	r20, r13
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	a6 e0       	ldi	r26, 0x06	; 6
    2670:	b0 e2       	ldi	r27, 0x20	; 32
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	68 e3       	ldi	r22, 0x38	; 56
    2678:	71 e0       	ldi	r23, 0x01	; 1
    267a:	9a 01       	movw	r18, r20
    267c:	08 2e       	mov	r0, r24
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <all_ir_sends+0xf6>
    2680:	35 95       	asr	r19
    2682:	27 95       	ror	r18
    2684:	0a 94       	dec	r0
    2686:	e2 f7       	brpl	.-8      	; 0x2680 <all_ir_sends+0xf2>
    2688:	20 ff       	sbrs	r18, 0
    268a:	1c c0       	rjmp	.+56     	; 0x26c4 <all_ir_sends+0x136>
    268c:	ed 91       	ld	r30, X+
    268e:	fc 91       	ld	r31, X
    2690:	11 97       	sbiw	r26, 0x01	; 1
    2692:	24 81       	ldd	r18, Z+4	; 0x04
    2694:	2f 7e       	andi	r18, 0xEF	; 239
    2696:	24 83       	std	Z+4, r18	; 0x04
    2698:	68 9f       	mul	r22, r24
    269a:	f0 01       	movw	r30, r0
    269c:	69 9f       	mul	r22, r25
    269e:	f0 0d       	add	r31, r0
    26a0:	11 24       	eor	r1, r1
    26a2:	e4 58       	subi	r30, 0x84	; 132
    26a4:	fb 4d       	sbci	r31, 0xDB	; 219
    26a6:	77 ab       	std	Z+55, r23	; 0x37
    26a8:	00 23       	and	r16, r16
    26aa:	19 f0       	breq	.+6      	; 0x26b2 <all_ir_sends+0x124>
    26ac:	27 a9       	ldd	r18, Z+55	; 0x37
    26ae:	20 68       	ori	r18, 0x80	; 128
    26b0:	27 ab       	std	Z+55, r18	; 0x37
    26b2:	68 9f       	mul	r22, r24
    26b4:	f0 01       	movw	r30, r0
    26b6:	69 9f       	mul	r22, r25
    26b8:	f0 0d       	add	r31, r0
    26ba:	11 24       	eor	r1, r1
    26bc:	e4 58       	subi	r30, 0x84	; 132
    26be:	fb 4d       	sbci	r31, 0xDB	; 219
    26c0:	e0 86       	std	Z+8, r14	; 0x08
    26c2:	f1 86       	std	Z+9, r15	; 0x09
    26c4:	01 96       	adiw	r24, 0x01	; 1
    26c6:	12 96       	adiw	r26, 0x02	; 2
    26c8:	86 30       	cpi	r24, 0x06	; 6
    26ca:	91 05       	cpc	r25, r1
    26cc:	b1 f6       	brne	.-84     	; 0x267a <all_ir_sends+0xec>
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	41 2f       	mov	r20, r17
    26d2:	be 01       	movw	r22, r28
    26d4:	8d 2d       	mov	r24, r13
    26d6:	0e 94 0e 11 	call	0x221c	; 0x221c <send_msg>
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	ff 90       	pop	r15
    26e6:	ef 90       	pop	r14
    26e8:	df 90       	pop	r13
    26ea:	08 95       	ret
    26ec:	d1 2c       	mov	r13, r1
    26ee:	87 cf       	rjmp	.-242    	; 0x25fe <all_ir_sends+0x70>
    26f0:	d1 2c       	mov	r13, r1
    26f2:	11 50       	subi	r17, 0x01	; 1
    26f4:	84 cf       	rjmp	.-248    	; 0x25fe <all_ir_sends+0x70>

000026f6 <irTargetedCmd>:
    26f6:	0f 93       	push	r16
    26f8:	01 e0       	ldi	r16, 0x01	; 1
    26fa:	0e 94 c7 12 	call	0x258e	; 0x258e <all_ir_sends>
    26fe:	0f 91       	pop	r16
    2700:	08 95       	ret

00002702 <irCmd>:
    2702:	0f 93       	push	r16
    2704:	01 e0       	ldi	r16, 0x01	; 1
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	0e 94 c7 12 	call	0x258e	; 0x258e <all_ir_sends>
    270e:	0f 91       	pop	r16
    2710:	08 95       	ret

00002712 <irTargetedSend>:
    2712:	0f 93       	push	r16
    2714:	00 e0       	ldi	r16, 0x00	; 0
    2716:	0e 94 c7 12 	call	0x258e	; 0x258e <all_ir_sends>
    271a:	0f 91       	pop	r16
    271c:	08 95       	ret

0000271e <irSend>:
    271e:	0f 93       	push	r16
    2720:	00 e0       	ldi	r16, 0x00	; 0
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	0e 94 c7 12 	call	0x258e	; 0x258e <all_ir_sends>
    272a:	0f 91       	pop	r16
    272c:	08 95       	ret

0000272e <all_hp_ir_cmds>:
    272e:	af 92       	push	r10
    2730:	bf 92       	push	r11
    2732:	df 92       	push	r13
    2734:	ef 92       	push	r14
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	e8 2e       	mov	r14, r24
    273e:	5b 01       	movw	r10, r22
    2740:	14 2f       	mov	r17, r20
    2742:	e9 01       	movw	r28, r18
    2744:	df b6       	in	r13, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	0e 94 55 12 	call	0x24aa	; 0x24aa <irIsBusy>
    274c:	84 30       	cpi	r24, 0x04	; 4
    274e:	e0 f5       	brcc	.+120    	; 0x27c8 <all_hp_ir_cmds+0x9a>
    2750:	10 34       	cpi	r17, 0x40	; 64
    2752:	08 f0       	brcs	.+2      	; 0x2756 <all_hp_ir_cmds+0x28>
    2754:	10 54       	subi	r17, 0x40	; 64
    2756:	4e 2d       	mov	r20, r14
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	a6 e0       	ldi	r26, 0x06	; 6
    275c:	b0 e2       	ldi	r27, 0x20	; 32
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	78 e3       	ldi	r23, 0x38	; 56
    2764:	61 e8       	ldi	r22, 0x81	; 129
    2766:	9a 01       	movw	r18, r20
    2768:	08 2e       	mov	r0, r24
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <all_hp_ir_cmds+0x42>
    276c:	35 95       	asr	r19
    276e:	27 95       	ror	r18
    2770:	0a 94       	dec	r0
    2772:	e2 f7       	brpl	.-8      	; 0x276c <all_hp_ir_cmds+0x3e>
    2774:	20 ff       	sbrs	r18, 0
    2776:	13 c0       	rjmp	.+38     	; 0x279e <all_hp_ir_cmds+0x70>
    2778:	ed 91       	ld	r30, X+
    277a:	fc 91       	ld	r31, X
    277c:	11 97       	sbiw	r26, 0x01	; 1
    277e:	24 81       	ldd	r18, Z+4	; 0x04
    2780:	2f 7e       	andi	r18, 0xEF	; 239
    2782:	24 83       	std	Z+4, r18	; 0x04
    2784:	78 9f       	mul	r23, r24
    2786:	f0 01       	movw	r30, r0
    2788:	79 9f       	mul	r23, r25
    278a:	f0 0d       	add	r31, r0
    278c:	11 24       	eor	r1, r1
    278e:	e4 58       	subi	r30, 0x84	; 132
    2790:	fb 4d       	sbci	r31, 0xDB	; 219
    2792:	67 ab       	std	Z+55, r22	; 0x37
    2794:	27 a9       	ldd	r18, Z+55	; 0x37
    2796:	20 64       	ori	r18, 0x40	; 64
    2798:	27 ab       	std	Z+55, r18	; 0x37
    279a:	c0 87       	std	Z+8, r28	; 0x08
    279c:	d1 87       	std	Z+9, r29	; 0x09
    279e:	01 96       	adiw	r24, 0x01	; 1
    27a0:	12 96       	adiw	r26, 0x02	; 2
    27a2:	86 30       	cpi	r24, 0x06	; 6
    27a4:	91 05       	cpc	r25, r1
    27a6:	f9 f6       	brne	.-66     	; 0x2766 <all_hp_ir_cmds+0x38>
    27a8:	df be       	out	0x3f, r13	; 63
    27aa:	21 e0       	ldi	r18, 0x01	; 1
    27ac:	41 2f       	mov	r20, r17
    27ae:	b5 01       	movw	r22, r10
    27b0:	8e 2d       	mov	r24, r14
    27b2:	0e 94 0e 11 	call	0x221c	; 0x221c <send_msg>
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	ef 90       	pop	r14
    27c0:	df 90       	pop	r13
    27c2:	bf 90       	pop	r11
    27c4:	af 90       	pop	r10
    27c6:	08 95       	ret
    27c8:	df be       	out	0x3f, r13	; 63
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	1f 91       	pop	r17
    27d2:	ef 90       	pop	r14
    27d4:	df 90       	pop	r13
    27d6:	bf 90       	pop	r11
    27d8:	af 90       	pop	r10
    27da:	08 95       	ret

000027dc <hpIrTargetedCmd>:
}

uint8_t hpIrTargetedCmd(uint8_t dirs, char *data, uint8_t dataLength, id_t target){
	return all_hp_ir_cmds(dirs, data, dataLength, target);
    27dc:	0c 94 97 13 	jmp	0x272e	; 0x272e <all_hp_ir_cmds>

000027e0 <irReceive>:
	clearIrBuffer(dir);
}


// To be called from interrupt handler only. Do not call.
static void irReceive(uint8_t dir){
    27e0:	6f 92       	push	r6
    27e2:	7f 92       	push	r7
    27e4:	8f 92       	push	r8
    27e6:	9f 92       	push	r9
    27e8:	af 92       	push	r10
    27ea:	bf 92       	push	r11
    27ec:	cf 92       	push	r12
    27ee:	df 92       	push	r13
    27f0:	ef 92       	push	r14
    27f2:	ff 92       	push	r15
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	d8 2e       	mov	r13, r24
	uint8_t in_byte = channel[dir]->DATA;				// Some data just came in
    27fe:	c8 2f       	mov	r28, r24
    2800:	d0 e0       	ldi	r29, 0x00	; 0
    2802:	8e 01       	movw	r16, r28
    2804:	00 0f       	add	r16, r16
    2806:	11 1f       	adc	r17, r17
    2808:	98 01       	movw	r18, r16
    280a:	2a 5f       	subi	r18, 0xFA	; 250
    280c:	3f 4d       	sbci	r19, 0xDF	; 223
    280e:	79 01       	movw	r14, r18
    2810:	d9 01       	movw	r26, r18
    2812:	ed 91       	ld	r30, X+
    2814:	fc 91       	ld	r31, X
    2816:	c0 80       	ld	r12, Z
	#ifdef AUDIO_DROPLET
		//ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_HI_gc;
	#endif	
	
	uint32_t now = getTime();
    2818:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
    281c:	28 e3       	ldi	r18, 0x38	; 56
    281e:	2c 9f       	mul	r18, r28
    2820:	f0 01       	movw	r30, r0
    2822:	2d 9f       	mul	r18, r29
    2824:	f0 0d       	add	r31, r0
    2826:	11 24       	eor	r1, r1
    2828:	e4 58       	subi	r30, 0x84	; 132
    282a:	fb 4d       	sbci	r31, 0xDB	; 219
    282c:	80 80       	ld	r8, Z
    282e:	91 80       	ldd	r9, Z+1	; 0x01
    2830:	a2 80       	ldd	r10, Z+2	; 0x02
    2832:	b3 80       	ldd	r11, Z+3	; 0x03
    2834:	9b 01       	movw	r18, r22
    2836:	ac 01       	movw	r20, r24
    2838:	28 19       	sub	r18, r8
    283a:	39 09       	sbc	r19, r9
    283c:	4a 09       	sbc	r20, r10
    283e:	5b 09       	sbc	r21, r11
    2840:	49 01       	movw	r8, r18
    2842:	5a 01       	movw	r10, r20
    2844:	31 e1       	ldi	r19, 0x11	; 17
    2846:	83 16       	cp	r8, r19
    2848:	91 04       	cpc	r9, r1
    284a:	a1 04       	cpc	r10, r1
    284c:	b1 04       	cpc	r11, r1
    284e:	90 f0       	brcs	.+36     	; 0x2874 <irReceive+0x94>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2850:	14 82       	std	Z+4, r1	; 0x04
    2852:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2854:	16 82       	std	Z+6, r1	; 0x06
    2856:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2858:	10 86       	std	Z+8, r1	; 0x08
    285a:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    285c:	12 86       	std	Z+10, r1	; 0x0a
    285e:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2860:	14 86       	std	Z+12, r1	; 0x0c
    2862:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2864:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2866:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2868:	d7 01       	movw	r26, r14
    286a:	ed 91       	ld	r30, X+
    286c:	fc 91       	ld	r31, X
    286e:	24 81       	ldd	r18, Z+4	; 0x04
    2870:	20 61       	ori	r18, 0x10	; 16
    2872:	24 83       	std	Z+4, r18	; 0x04
		//ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_HI_gc;
	#endif	
	
	uint32_t now = getTime();
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
	ir_rxtx[dir].last_byte = now;
    2874:	28 e3       	ldi	r18, 0x38	; 56
    2876:	2c 9f       	mul	r18, r28
    2878:	d0 01       	movw	r26, r0
    287a:	2d 9f       	mul	r18, r29
    287c:	b0 0d       	add	r27, r0
    287e:	11 24       	eor	r1, r1
    2880:	a4 58       	subi	r26, 0x84	; 132
    2882:	bb 4d       	sbci	r27, 0xDB	; 219
    2884:	6d 93       	st	X+, r22
    2886:	7d 93       	st	X+, r23
    2888:	8d 93       	st	X+, r24
    288a:	9c 93       	st	X, r25
    288c:	13 97       	sbiw	r26, 0x03	; 3
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
    288e:	1a 96       	adiw	r26, 0x0a	; 10
    2890:	ed 91       	ld	r30, X+
    2892:	fc 91       	ld	r31, X
    2894:	1b 97       	sbiw	r26, 0x0b	; 11
    2896:	e7 30       	cpi	r30, 0x07	; 7
    2898:	f1 05       	cpc	r31, r1
    289a:	08 f4       	brcc	.+2      	; 0x289e <irReceive+0xbe>
    289c:	4b c0       	rjmp	.+150    	; 0x2934 <irReceive+0x154>
										if(!(ir_rxtx[dir].status & IR_STATUS_TIMED_bm)){
											ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].calc_crc, ir_rxtx[dir].target_ID);
										}
										break;								
		default:
			ir_rxtx[dir].buf[ir_rxtx[dir].curr_pos-HEADER_LEN] = in_byte;
    289e:	1a 96       	adiw	r26, 0x0a	; 10
    28a0:	ed 91       	ld	r30, X+
    28a2:	fc 91       	ld	r31, X
    28a4:	1b 97       	sbiw	r26, 0x0b	; 11
    28a6:	37 97       	sbiw	r30, 0x07	; 7
    28a8:	ea 0f       	add	r30, r26
    28aa:	fb 1f       	adc	r31, r27
    28ac:	c6 86       	std	Z+14, r12	; 0x0e
			ir_rxtx[dir].calc_crc = _crc16_update(ir_rxtx[dir].calc_crc, in_byte);
    28ae:	1c 96       	adiw	r26, 0x0c	; 12
    28b0:	8d 91       	ld	r24, X+
    28b2:	9c 91       	ld	r25, X
    28b4:	1d 97       	sbiw	r26, 0x0d	; 13
    28b6:	8c 25       	eor	r24, r12
    28b8:	28 2f       	mov	r18, r24
    28ba:	22 95       	swap	r18
    28bc:	28 27       	eor	r18, r24
    28be:	02 2e       	mov	r0, r18
    28c0:	26 95       	lsr	r18
    28c2:	26 95       	lsr	r18
    28c4:	20 25       	eor	r18, r0
    28c6:	02 2e       	mov	r0, r18
    28c8:	26 95       	lsr	r18
    28ca:	20 25       	eor	r18, r0
    28cc:	27 70       	andi	r18, 0x07	; 7
    28ce:	08 2e       	mov	r0, r24
    28d0:	89 2f       	mov	r24, r25
    28d2:	26 95       	lsr	r18
    28d4:	07 94       	ror	r0
    28d6:	27 95       	ror	r18
    28d8:	90 2d       	mov	r25, r0
    28da:	82 27       	eor	r24, r18
    28dc:	06 94       	lsr	r0
    28de:	27 95       	ror	r18
    28e0:	90 25       	eor	r25, r0
    28e2:	82 27       	eor	r24, r18
    28e4:	1c 96       	adiw	r26, 0x0c	; 12
    28e6:	8d 93       	st	X+, r24
    28e8:	9c 93       	st	X, r25
    28ea:	1d 97       	sbiw	r26, 0x0d	; 13
	}
	ir_rxtx[dir].curr_pos++;
    28ec:	88 e3       	ldi	r24, 0x38	; 56
    28ee:	8c 9f       	mul	r24, r28
    28f0:	f0 01       	movw	r30, r0
    28f2:	8d 9f       	mul	r24, r29
    28f4:	f0 0d       	add	r31, r0
    28f6:	11 24       	eor	r1, r1
    28f8:	e4 58       	subi	r30, 0x84	; 132
    28fa:	fb 4d       	sbci	r31, 0xDB	; 219
    28fc:	82 85       	ldd	r24, Z+10	; 0x0a
    28fe:	93 85       	ldd	r25, Z+11	; 0x0b
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	82 87       	std	Z+10, r24	; 0x0a
    2904:	93 87       	std	Z+11, r25	; 0x0b
	
	if(ir_rxtx[dir].curr_pos>=(ir_rxtx[dir].data_length+HEADER_LEN)){
    2906:	22 85       	ldd	r18, Z+10	; 0x0a
    2908:	33 85       	ldd	r19, Z+11	; 0x0b
    290a:	86 a9       	ldd	r24, Z+54	; 0x36
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	07 96       	adiw	r24, 0x07	; 7
    2910:	28 17       	cp	r18, r24
    2912:	39 07       	cpc	r19, r25
    2914:	a8 f4       	brcc	.+42     	; 0x2940 <irReceive+0x160>
		handleCompletedMsg(dir);
	}
}
    2916:	df 91       	pop	r29
    2918:	cf 91       	pop	r28
    291a:	1f 91       	pop	r17
    291c:	0f 91       	pop	r16
    291e:	ff 90       	pop	r15
    2920:	ef 90       	pop	r14
    2922:	df 90       	pop	r13
    2924:	cf 90       	pop	r12
    2926:	bf 90       	pop	r11
    2928:	af 90       	pop	r10
    292a:	9f 90       	pop	r9
    292c:	8f 90       	pop	r8
    292e:	7f 90       	pop	r7
    2930:	6f 90       	pop	r6
    2932:	08 95       	ret
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
	ir_rxtx[dir].last_byte = now;
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
    2934:	88 27       	eor	r24, r24
    2936:	eb 5f       	subi	r30, 0xFB	; 251
    2938:	fe 4f       	sbci	r31, 0xFE	; 254
    293a:	8f 4f       	sbci	r24, 0xFF	; 255
    293c:	0c 94 8f 4b 	jmp	0x971e	; 0x971e <__tablejump2__>
		}
	}
}

static void handleCompletedMsg(uint8_t dir){
	ir_rxtx[dir].status |= ir_rxtx[dir].target_ID ? IR_STATUS_TARGETED_bm : 0;
    2940:	80 85       	ldd	r24, Z+8	; 0x08
    2942:	91 85       	ldd	r25, Z+9	; 0x09
    2944:	89 2b       	or	r24, r25
    2946:	09 f0       	breq	.+2      	; 0x294a <irReceive+0x16a>
    2948:	4c c0       	rjmp	.+152    	; 0x29e2 <irReceive+0x202>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	98 e3       	ldi	r25, 0x38	; 56
    294e:	9c 9f       	mul	r25, r28
    2950:	f0 01       	movw	r30, r0
    2952:	9d 9f       	mul	r25, r29
    2954:	f0 0d       	add	r31, r0
    2956:	11 24       	eor	r1, r1
    2958:	e4 58       	subi	r30, 0x84	; 132
    295a:	fb 4d       	sbci	r31, 0xDB	; 219
    295c:	97 a9       	ldd	r25, Z+55	; 0x37
    295e:	89 2b       	or	r24, r25
    2960:	87 ab       	std	Z+55, r24	; 0x37
	//pre checks.
	const uint8_t crcMismatch = ir_rxtx[dir].calc_crc!=ir_rxtx[dir].data_crc;
    2962:	24 85       	ldd	r18, Z+12	; 0x0c
    2964:	35 85       	ldd	r19, Z+13	; 0x0d
    2966:	84 81       	ldd	r24, Z+4	; 0x04
    2968:	95 81       	ldd	r25, Z+5	; 0x05
	const uint8_t nullCrc	  = ir_rxtx[dir].calc_crc==0;
    296a:	64 85       	ldd	r22, Z+12	; 0x0c
    296c:	75 85       	ldd	r23, Z+13	; 0x0d
	const uint8_t selfSender  = ir_rxtx[dir].senderID == getDropletID();
    296e:	a6 80       	ldd	r10, Z+6	; 0x06
    2970:	b7 80       	ldd	r11, Z+7	; 0x07
// Returns the number of ms elapsed since the last reset. (Defined in droplet_base_asm.s)
uint32_t getTime(void);

// Returns this Droplet's unique 16-bit identifier. 0 will never be an identifier.
inline id_t getDropletID(void){ 
	return droplet_ID;
    2972:	40 91 ec 23 	lds	r20, 0x23EC	; 0x8023ec <droplet_ID>
    2976:	50 91 ed 23 	lds	r21, 0x23ED	; 0x8023ed <droplet_ID+0x1>
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
    297a:	f7 a8       	ldd	r15, Z+55	; 0x37
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
    297c:	bf 2d       	mov	r27, r15
    297e:	b0 74       	andi	r27, 0x40	; 64
    2980:	cb 2e       	mov	r12, r27
    2982:	f6 fc       	sbrc	r15, 6
    2984:	d5 c0       	rjmp	.+426    	; 0x2b30 <irReceive+0x350>
    2986:	e0 84       	ldd	r14, Z+8	; 0x08
    2988:	f1 84       	ldd	r15, Z+9	; 0x09
    298a:	ef 28       	or	r14, r15
    298c:	09 f4       	brne	.+2      	; 0x2990 <irReceive+0x1b0>
    298e:	d0 c0       	rjmp	.+416    	; 0x2b30 <irReceive+0x350>
    2990:	e0 84       	ldd	r14, Z+8	; 0x08
    2992:	f1 84       	ldd	r15, Z+9	; 0x09
    2994:	e1 e0       	ldi	r30, 0x01	; 1
    2996:	4e 15       	cp	r20, r14
    2998:	5f 05       	cpc	r21, r15
    299a:	09 f4       	brne	.+2      	; 0x299e <irReceive+0x1be>
    299c:	c9 c0       	rjmp	.+402    	; 0x2b30 <irReceive+0x350>
	
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
    299e:	28 17       	cp	r18, r24
    29a0:	39 07       	cpc	r19, r25
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <irReceive+0x1c6>
    29a4:	ca c0       	rjmp	.+404    	; 0x2b3a <irReceive+0x35a>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    29a6:	88 e3       	ldi	r24, 0x38	; 56
    29a8:	8c 9f       	mul	r24, r28
    29aa:	f0 01       	movw	r30, r0
    29ac:	8d 9f       	mul	r24, r29
    29ae:	f0 0d       	add	r31, r0
    29b0:	11 24       	eor	r1, r1
    29b2:	e4 58       	subi	r30, 0x84	; 132
    29b4:	fb 4d       	sbci	r31, 0xDB	; 219
    29b6:	14 82       	std	Z+4, r1	; 0x04
    29b8:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    29ba:	16 82       	std	Z+6, r1	; 0x06
    29bc:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    29be:	10 86       	std	Z+8, r1	; 0x08
    29c0:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    29c2:	12 86       	std	Z+10, r1	; 0x0a
    29c4:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    29c6:	14 86       	std	Z+12, r1	; 0x0c
    29c8:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    29ca:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    29cc:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    29ce:	f8 01       	movw	r30, r16
    29d0:	ea 5f       	subi	r30, 0xFA	; 250
    29d2:	ff 4d       	sbci	r31, 0xDF	; 223
    29d4:	01 90       	ld	r0, Z+
    29d6:	f0 81       	ld	r31, Z
    29d8:	e0 2d       	mov	r30, r0
    29da:	84 81       	ldd	r24, Z+4	; 0x04
    29dc:	80 61       	ori	r24, 0x10	; 16
    29de:	84 83       	std	Z+4, r24	; 0x04
	ir_rxtx[dir].curr_pos++;
	
	if(ir_rxtx[dir].curr_pos>=(ir_rxtx[dir].data_length+HEADER_LEN)){
		handleCompletedMsg(dir);
	}
}
    29e0:	9a cf       	rjmp	.-204    	; 0x2916 <irReceive+0x136>
		}
	}
}

static void handleCompletedMsg(uint8_t dir){
	ir_rxtx[dir].status |= ir_rxtx[dir].target_ID ? IR_STATUS_TARGETED_bm : 0;
    29e2:	80 e1       	ldi	r24, 0x10	; 16
    29e4:	b3 cf       	rjmp	.-154    	; 0x294c <irReceive+0x16c>
										ir_rxtx[dir].status		   |= (in_byte&DATA_LEN_STATUS_BITS_bm);
										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].senderID, ir_rxtx[dir].status & IR_STATUS_CRC_BITS_bm);
										ir_rxtx[dir].data_length	= in_byte&DATA_LEN_VAL_bm;
										if(ir_rxtx[dir].data_length>IR_BUFFER_SIZE) ir_rxtx[dir].data_length=1; //basically, this will cause the message to get aborted.
																								break;
		case HEADER_POS_TARGET_ID_LOW:  ir_rxtx[dir].target_ID		= (uint16_t)in_byte;		break;
    29e6:	8c 2d       	mov	r24, r12
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	28 e3       	ldi	r18, 0x38	; 56
    29ec:	2c 9f       	mul	r18, r28
    29ee:	f0 01       	movw	r30, r0
    29f0:	2d 9f       	mul	r18, r29
    29f2:	f0 0d       	add	r31, r0
    29f4:	11 24       	eor	r1, r1
    29f6:	e4 58       	subi	r30, 0x84	; 132
    29f8:	fb 4d       	sbci	r31, 0xDB	; 219
    29fa:	80 87       	std	Z+8, r24	; 0x08
    29fc:	91 87       	std	Z+9, r25	; 0x09
    29fe:	76 cf       	rjmp	.-276    	; 0x28ec <irReceive+0x10c>
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
		case HEADER_POS_SENDER_ID_LOW:	ir_rxtx[dir].senderID		= (uint16_t)in_byte;		break;
		case HEADER_POS_SENDER_ID_HIGH:	ir_rxtx[dir].senderID	   |= (((uint16_t)in_byte)<<8);	break;
		case HEADER_POS_CRC_LOW:		ir_rxtx[dir].data_crc		= (uint16_t)in_byte;		break;
    2a00:	8c 2d       	mov	r24, r12
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	28 e3       	ldi	r18, 0x38	; 56
    2a06:	2c 9f       	mul	r18, r28
    2a08:	f0 01       	movw	r30, r0
    2a0a:	2d 9f       	mul	r18, r29
    2a0c:	f0 0d       	add	r31, r0
    2a0e:	11 24       	eor	r1, r1
    2a10:	e4 58       	subi	r30, 0x84	; 132
    2a12:	fb 4d       	sbci	r31, 0xDB	; 219
    2a14:	84 83       	std	Z+4, r24	; 0x04
    2a16:	95 83       	std	Z+5, r25	; 0x05
    2a18:	69 cf       	rjmp	.-302    	; 0x28ec <irReceive+0x10c>
		case HEADER_POS_CRC_HIGH:		ir_rxtx[dir].data_crc	   |= (((uint16_t)in_byte)<<8); break;																								
    2a1a:	88 e3       	ldi	r24, 0x38	; 56
    2a1c:	8c 9f       	mul	r24, r28
    2a1e:	f0 01       	movw	r30, r0
    2a20:	8d 9f       	mul	r24, r29
    2a22:	f0 0d       	add	r31, r0
    2a24:	11 24       	eor	r1, r1
    2a26:	e4 58       	subi	r30, 0x84	; 132
    2a28:	fb 4d       	sbci	r31, 0xDB	; 219
    2a2a:	84 81       	ldd	r24, Z+4	; 0x04
    2a2c:	95 81       	ldd	r25, Z+5	; 0x05
    2a2e:	9c 29       	or	r25, r12
    2a30:	84 83       	std	Z+4, r24	; 0x04
    2a32:	95 83       	std	Z+5, r25	; 0x05
    2a34:	5b cf       	rjmp	.-330    	; 0x28ec <irReceive+0x10c>
		case HEADER_POS_MSG_LENGTH:
										ir_rxtx[dir].status		   |= (in_byte&DATA_LEN_STATUS_BITS_bm);
    2a36:	88 e3       	ldi	r24, 0x38	; 56
    2a38:	8c 9f       	mul	r24, r28
    2a3a:	f0 01       	movw	r30, r0
    2a3c:	8d 9f       	mul	r24, r29
    2a3e:	f0 0d       	add	r31, r0
    2a40:	11 24       	eor	r1, r1
    2a42:	e4 58       	subi	r30, 0x84	; 132
    2a44:	fb 4d       	sbci	r31, 0xDB	; 219
    2a46:	87 a9       	ldd	r24, Z+55	; 0x37
    2a48:	9c 2d       	mov	r25, r12
    2a4a:	90 7c       	andi	r25, 0xC0	; 192
    2a4c:	89 2b       	or	r24, r25
    2a4e:	87 ab       	std	Z+55, r24	; 0x37
										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].senderID, ir_rxtx[dir].status & IR_STATUS_CRC_BITS_bm);
    2a50:	27 a9       	ldd	r18, Z+55	; 0x37
    2a52:	86 81       	ldd	r24, Z+6	; 0x06
    2a54:	97 81       	ldd	r25, Z+7	; 0x07
    2a56:	20 7c       	andi	r18, 0xC0	; 192
    2a58:	82 27       	eor	r24, r18
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	22 95       	swap	r18
    2a5e:	28 27       	eor	r18, r24
    2a60:	02 2e       	mov	r0, r18
    2a62:	26 95       	lsr	r18
    2a64:	26 95       	lsr	r18
    2a66:	20 25       	eor	r18, r0
    2a68:	02 2e       	mov	r0, r18
    2a6a:	26 95       	lsr	r18
    2a6c:	20 25       	eor	r18, r0
    2a6e:	27 70       	andi	r18, 0x07	; 7
    2a70:	08 2e       	mov	r0, r24
    2a72:	89 2f       	mov	r24, r25
    2a74:	26 95       	lsr	r18
    2a76:	07 94       	ror	r0
    2a78:	27 95       	ror	r18
    2a7a:	90 2d       	mov	r25, r0
    2a7c:	82 27       	eor	r24, r18
    2a7e:	06 94       	lsr	r0
    2a80:	27 95       	ror	r18
    2a82:	90 25       	eor	r25, r0
    2a84:	82 27       	eor	r24, r18
    2a86:	84 87       	std	Z+12, r24	; 0x0c
    2a88:	95 87       	std	Z+13, r25	; 0x0d
										ir_rxtx[dir].data_length	= in_byte&DATA_LEN_VAL_bm;
    2a8a:	8c 2d       	mov	r24, r12
    2a8c:	8f 73       	andi	r24, 0x3F	; 63
    2a8e:	86 ab       	std	Z+54, r24	; 0x36
										if(ir_rxtx[dir].data_length>IR_BUFFER_SIZE) ir_rxtx[dir].data_length=1; //basically, this will cause the message to get aborted.
    2a90:	86 a9       	ldd	r24, Z+54	; 0x36
    2a92:	89 32       	cpi	r24, 0x29	; 41
    2a94:	08 f4       	brcc	.+2      	; 0x2a98 <irReceive+0x2b8>
    2a96:	2a cf       	rjmp	.-428    	; 0x28ec <irReceive+0x10c>
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	86 ab       	std	Z+54, r24	; 0x36
    2a9c:	27 cf       	rjmp	.-434    	; 0x28ec <irReceive+0x10c>
																								break;
		case HEADER_POS_TARGET_ID_LOW:  ir_rxtx[dir].target_ID		= (uint16_t)in_byte;		break;
		case HEADER_POS_TARGET_ID_HIGH:
										ir_rxtx[dir].target_ID	   |= (((uint16_t)in_byte)<<8);
    2a9e:	88 e3       	ldi	r24, 0x38	; 56
    2aa0:	8c 9f       	mul	r24, r28
    2aa2:	f0 01       	movw	r30, r0
    2aa4:	8d 9f       	mul	r24, r29
    2aa6:	f0 0d       	add	r31, r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	e4 58       	subi	r30, 0x84	; 132
    2aac:	fb 4d       	sbci	r31, 0xDB	; 219
    2aae:	80 85       	ldd	r24, Z+8	; 0x08
    2ab0:	91 85       	ldd	r25, Z+9	; 0x09
    2ab2:	9c 29       	or	r25, r12
    2ab4:	80 87       	std	Z+8, r24	; 0x08
    2ab6:	91 87       	std	Z+9, r25	; 0x09
										if(!(ir_rxtx[dir].status & IR_STATUS_TIMED_bm)){
    2ab8:	87 a9       	ldd	r24, Z+55	; 0x37
    2aba:	86 fd       	sbrc	r24, 6
    2abc:	17 cf       	rjmp	.-466    	; 0x28ec <irReceive+0x10c>
											ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].calc_crc, ir_rxtx[dir].target_ID);
    2abe:	20 85       	ldd	r18, Z+8	; 0x08
    2ac0:	31 85       	ldd	r19, Z+9	; 0x09
    2ac2:	84 85       	ldd	r24, Z+12	; 0x0c
    2ac4:	95 85       	ldd	r25, Z+13	; 0x0d
    2ac6:	82 27       	eor	r24, r18
    2ac8:	28 2f       	mov	r18, r24
    2aca:	22 95       	swap	r18
    2acc:	28 27       	eor	r18, r24
    2ace:	02 2e       	mov	r0, r18
    2ad0:	26 95       	lsr	r18
    2ad2:	26 95       	lsr	r18
    2ad4:	20 25       	eor	r18, r0
    2ad6:	02 2e       	mov	r0, r18
    2ad8:	26 95       	lsr	r18
    2ada:	20 25       	eor	r18, r0
    2adc:	27 70       	andi	r18, 0x07	; 7
    2ade:	08 2e       	mov	r0, r24
    2ae0:	89 2f       	mov	r24, r25
    2ae2:	26 95       	lsr	r18
    2ae4:	07 94       	ror	r0
    2ae6:	27 95       	ror	r18
    2ae8:	90 2d       	mov	r25, r0
    2aea:	82 27       	eor	r24, r18
    2aec:	06 94       	lsr	r0
    2aee:	27 95       	ror	r18
    2af0:	90 25       	eor	r25, r0
    2af2:	82 27       	eor	r24, r18
    2af4:	84 87       	std	Z+12, r24	; 0x0c
    2af6:	95 87       	std	Z+13, r25	; 0x0d
    2af8:	f9 ce       	rjmp	.-526    	; 0x28ec <irReceive+0x10c>
	ir_rxtx[dir].last_byte = now;
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
		case HEADER_POS_SENDER_ID_LOW:	ir_rxtx[dir].senderID		= (uint16_t)in_byte;		break;
    2afa:	8c 2d       	mov	r24, r12
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	28 e3       	ldi	r18, 0x38	; 56
    2b00:	2c 9f       	mul	r18, r28
    2b02:	f0 01       	movw	r30, r0
    2b04:	2d 9f       	mul	r18, r29
    2b06:	f0 0d       	add	r31, r0
    2b08:	11 24       	eor	r1, r1
    2b0a:	e4 58       	subi	r30, 0x84	; 132
    2b0c:	fb 4d       	sbci	r31, 0xDB	; 219
    2b0e:	86 83       	std	Z+6, r24	; 0x06
    2b10:	97 83       	std	Z+7, r25	; 0x07
    2b12:	ec ce       	rjmp	.-552    	; 0x28ec <irReceive+0x10c>
		case HEADER_POS_SENDER_ID_HIGH:	ir_rxtx[dir].senderID	   |= (((uint16_t)in_byte)<<8);	break;
    2b14:	88 e3       	ldi	r24, 0x38	; 56
    2b16:	8c 9f       	mul	r24, r28
    2b18:	f0 01       	movw	r30, r0
    2b1a:	8d 9f       	mul	r24, r29
    2b1c:	f0 0d       	add	r31, r0
    2b1e:	11 24       	eor	r1, r1
    2b20:	e4 58       	subi	r30, 0x84	; 132
    2b22:	fb 4d       	sbci	r31, 0xDB	; 219
    2b24:	86 81       	ldd	r24, Z+6	; 0x06
    2b26:	97 81       	ldd	r25, Z+7	; 0x07
    2b28:	9c 29       	or	r25, r12
    2b2a:	86 83       	std	Z+6, r24	; 0x06
    2b2c:	97 83       	std	Z+7, r25	; 0x07
    2b2e:	de ce       	rjmp	.-580    	; 0x28ec <irReceive+0x10c>
	//pre checks.
	const uint8_t crcMismatch = ir_rxtx[dir].calc_crc!=ir_rxtx[dir].data_crc;
	const uint8_t nullCrc	  = ir_rxtx[dir].calc_crc==0;
	const uint8_t selfSender  = ir_rxtx[dir].senderID == getDropletID();
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
    2b30:	e0 e0       	ldi	r30, 0x00	; 0
	
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
    2b32:	28 17       	cp	r18, r24
    2b34:	39 07       	cpc	r19, r25
    2b36:	09 f0       	breq	.+2      	; 0x2b3a <irReceive+0x35a>
    2b38:	36 cf       	rjmp	.-404    	; 0x29a6 <irReceive+0x1c6>
    2b3a:	67 2b       	or	r22, r23
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <irReceive+0x360>
    2b3e:	33 cf       	rjmp	.-410    	; 0x29a6 <irReceive+0x1c6>
    2b40:	a4 16       	cp	r10, r20
    2b42:	b5 06       	cpc	r11, r21
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <irReceive+0x368>
    2b46:	2f cf       	rjmp	.-418    	; 0x29a6 <irReceive+0x1c6>
    2b48:	e1 11       	cpse	r30, r1
    2b4a:	2d cf       	rjmp	.-422    	; 0x29a6 <irReceive+0x1c6>
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
    2b4c:	88 e3       	ldi	r24, 0x38	; 56
    2b4e:	8c 9f       	mul	r24, r28
    2b50:	b0 01       	movw	r22, r0
    2b52:	8d 9f       	mul	r24, r29
    2b54:	70 0d       	add	r23, r0
    2b56:	11 24       	eor	r1, r1
    2b58:	fb 01       	movw	r30, r22
    2b5a:	e4 58       	subi	r30, 0x84	; 132
    2b5c:	fb 4d       	sbci	r31, 0xDB	; 219
    2b5e:	7f 01       	movw	r14, r30
    2b60:	87 a9       	ldd	r24, Z+55	; 0x37
    2b62:	87 fd       	sbrc	r24, 7
    2b64:	a1 c0       	rjmp	.+322    	; 0x2ca8 <irReceive+0x4c8>
		   delay_us(100);
	   } while (busy);
}

static void addMsgToMsgQueue(uint8_t dir){
	if(ir_rxtx[dir].data_length == 0){
    2b66:	86 a9       	ldd	r24, Z+54	; 0x36
    2b68:	88 23       	and	r24, r24
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <irReceive+0x38e>
    2b6c:	35 c2       	rjmp	.+1130   	; 0x2fd8 <irReceive+0x7f8>
		printf_P(PSTR("ERROR! Should NOT be adding 0-length message to queue.\r\n"));
	}else if(ir_rxtx[dir].data_length > IR_BUFFER_SIZE){
    2b6e:	86 a9       	ldd	r24, Z+54	; 0x36
    2b70:	89 32       	cpi	r24, 0x29	; 41
    2b72:	08 f0       	brcs	.+2      	; 0x2b76 <irReceive+0x396>
    2b74:	3a c2       	rjmp	.+1140   	; 0x2fea <irReceive+0x80a>
		printf_P(PSTR("ERROR! Should NOT be adding a message with length greater than buffer size to queue.\r\n"));
	}else if(memoryConsumedByBuffer > 500){
    2b76:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <memoryConsumedByBuffer>
    2b7a:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <memoryConsumedByBuffer+0x1>
    2b7e:	85 3f       	cpi	r24, 0xF5	; 245
    2b80:	91 40       	sbci	r25, 0x01	; 1
    2b82:	08 f0       	brcs	.+2      	; 0x2b86 <irReceive+0x3a6>
    2b84:	3b c2       	rjmp	.+1142   	; 0x2ffc <irReceive+0x81c>
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
	}else{
		volatile MsgNode* node = incomingMsgHead;
    2b86:	c0 90 12 26 	lds	r12, 0x2612	; 0x802612 <incomingMsgHead>
    2b8a:	d0 90 13 26 	lds	r13, 0x2613	; 0x802613 <incomingMsgHead+0x1>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2b8e:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b90:	f8 94       	cli
			if(incomingMsgHead==NULL){
    2b92:	80 91 12 26 	lds	r24, 0x2612	; 0x802612 <incomingMsgHead>
    2b96:	90 91 13 26 	lds	r25, 0x2613	; 0x802613 <incomingMsgHead+0x1>
    2b9a:	89 2b       	or	r24, r25
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <irReceive+0x3c0>
    2b9e:	75 c0       	rjmp	.+234    	; 0x2c8a <irReceive+0x4aa>
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
				node = (MsgNode*)incomingMsgHead;
			}else{
				while(node->next != NULL){
    2ba0:	d6 01       	movw	r26, r12
    2ba2:	1a 96       	adiw	r26, 0x0a	; 10
    2ba4:	8d 91       	ld	r24, X+
    2ba6:	9c 91       	ld	r25, X
    2ba8:	1b 97       	sbiw	r26, 0x0b	; 11
    2baa:	89 2b       	or	r24, r25
    2bac:	51 f0       	breq	.+20     	; 0x2bc2 <irReceive+0x3e2>
					node = node->next;
    2bae:	d6 01       	movw	r26, r12
    2bb0:	1a 96       	adiw	r26, 0x0a	; 10
    2bb2:	cd 90       	ld	r12, X+
    2bb4:	dc 90       	ld	r13, X
    2bb6:	1b 97       	sbiw	r26, 0x0b	; 11
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			if(incomingMsgHead==NULL){
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
				node = (MsgNode*)incomingMsgHead;
			}else{
				while(node->next != NULL){
    2bb8:	f6 01       	movw	r30, r12
    2bba:	82 85       	ldd	r24, Z+10	; 0x0a
    2bbc:	93 85       	ldd	r25, Z+11	; 0x0b
    2bbe:	89 2b       	or	r24, r25
    2bc0:	b1 f7       	brne	.-20     	; 0x2bae <irReceive+0x3ce>
					node = node->next;
				}
				node->next = (MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2bc2:	88 e3       	ldi	r24, 0x38	; 56
    2bc4:	8c 9f       	mul	r24, r28
    2bc6:	f0 01       	movw	r30, r0
    2bc8:	8d 9f       	mul	r24, r29
    2bca:	f0 0d       	add	r31, r0
    2bcc:	11 24       	eor	r1, r1
    2bce:	e4 58       	subi	r30, 0x84	; 132
    2bd0:	fb 4d       	sbci	r31, 0xDB	; 219
    2bd2:	86 a9       	ldd	r24, Z+54	; 0x36
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2bd4:	ff b6       	in	r15, 0x3f	; 63
    2bd6:	f8 94       	cli
		tmp = malloc(size);
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0d 96       	adiw	r24, 0x0d	; 13
    2bdc:	0e 94 b1 4b 	call	0x9762	; 0x9762 <malloc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2be0:	ff be       	out	0x3f, r15	; 63
    2be2:	d6 01       	movw	r26, r12
    2be4:	1a 96       	adiw	r26, 0x0a	; 10
    2be6:	8d 93       	st	X+, r24
    2be8:	9c 93       	st	X, r25
    2bea:	1b 97       	sbiw	r26, 0x0b	; 11
				node = node->next;
    2bec:	1a 96       	adiw	r26, 0x0a	; 10
    2bee:	ed 90       	ld	r14, X+
    2bf0:	fc 90       	ld	r15, X
    2bf2:	1b 97       	sbiw	r26, 0x0b	; 11
			}
			char* dataAddr = ((char*)node + sizeof(MsgNode));
    2bf4:	47 01       	movw	r8, r14
    2bf6:	bd e0       	ldi	r27, 0x0D	; 13
    2bf8:	8b 0e       	add	r8, r27
    2bfa:	91 1c       	adc	r9, r1
			memcpy(dataAddr, (const void*)ir_rxtx[dir].buf, ir_rxtx[dir].data_length);
    2bfc:	88 e3       	ldi	r24, 0x38	; 56
    2bfe:	8c 9f       	mul	r24, r28
    2c00:	b0 01       	movw	r22, r0
    2c02:	8d 9f       	mul	r24, r29
    2c04:	70 0d       	add	r23, r0
    2c06:	11 24       	eor	r1, r1
    2c08:	fb 01       	movw	r30, r22
    2c0a:	e4 58       	subi	r30, 0x84	; 132
    2c0c:	fb 4d       	sbci	r31, 0xDB	; 219
    2c0e:	6f 01       	movw	r12, r30
    2c10:	46 a9       	ldd	r20, Z+54	; 0x36
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	66 57       	subi	r22, 0x76	; 118
    2c16:	7b 4d       	sbci	r23, 0xDB	; 219
    2c18:	c4 01       	movw	r24, r8
    2c1a:	0e 94 09 4f 	call	0x9e12	; 0x9e12 <memcpy>
			node->msg			= dataAddr;
    2c1e:	d7 01       	movw	r26, r14
    2c20:	18 96       	adiw	r26, 0x08	; 8
    2c22:	8d 92       	st	X+, r8
    2c24:	9c 92       	st	X, r9
    2c26:	19 97       	sbiw	r26, 0x09	; 9
			node->arrivalTime	= ir_rxtx[dir].last_byte;
    2c28:	f6 01       	movw	r30, r12
    2c2a:	80 81       	ld	r24, Z
    2c2c:	91 81       	ldd	r25, Z+1	; 0x01
    2c2e:	a2 81       	ldd	r26, Z+2	; 0x02
    2c30:	b3 81       	ldd	r27, Z+3	; 0x03
    2c32:	f7 01       	movw	r30, r14
    2c34:	80 83       	st	Z, r24
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	a2 83       	std	Z+2, r26	; 0x02
    2c3a:	b3 83       	std	Z+3, r27	; 0x03
			node->length		= ir_rxtx[dir].data_length;
    2c3c:	d6 01       	movw	r26, r12
    2c3e:	d6 96       	adiw	r26, 0x36	; 54
    2c40:	8c 91       	ld	r24, X
    2c42:	d6 97       	sbiw	r26, 0x36	; 54
    2c44:	84 87       	std	Z+12, r24	; 0x0c
			node->senderID		= ir_rxtx[dir].senderID;
    2c46:	16 96       	adiw	r26, 0x06	; 6
    2c48:	8d 91       	ld	r24, X+
    2c4a:	9c 91       	ld	r25, X
    2c4c:	17 97       	sbiw	r26, 0x07	; 7
    2c4e:	84 83       	std	Z+4, r24	; 0x04
    2c50:	95 83       	std	Z+5, r25	; 0x05
			node->crc			= ir_rxtx[dir].calc_crc;
    2c52:	1c 96       	adiw	r26, 0x0c	; 12
    2c54:	8d 91       	ld	r24, X+
    2c56:	9c 91       	ld	r25, X
    2c58:	1d 97       	sbiw	r26, 0x0d	; 13
    2c5a:	86 83       	std	Z+6, r24	; 0x06
    2c5c:	97 83       	std	Z+7, r25	; 0x07
			node->next			= NULL;
    2c5e:	12 86       	std	Z+10, r1	; 0x0a
    2c60:	13 86       	std	Z+11, r1	; 0x0b
			memoryConsumedByBuffer += (sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2c62:	d6 96       	adiw	r26, 0x36	; 54
    2c64:	2c 91       	ld	r18, X
    2c66:	80 91 23 24 	lds	r24, 0x2423	; 0x802423 <memoryConsumedByBuffer>
    2c6a:	90 91 24 24 	lds	r25, 0x2424	; 0x802424 <memoryConsumedByBuffer+0x1>
    2c6e:	0d 96       	adiw	r24, 0x0d	; 13
    2c70:	82 0f       	add	r24, r18
    2c72:	91 1d       	adc	r25, r1
    2c74:	80 93 23 24 	sts	0x2423, r24	; 0x802423 <memoryConsumedByBuffer>
    2c78:	90 93 24 24 	sts	0x2424, r25	; 0x802424 <memoryConsumedByBuffer+0x1>
			numWaitingMsgs++;
    2c7c:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <numWaitingMsgs>
    2c80:	8f 5f       	subi	r24, 0xFF	; 255
    2c82:	80 93 79 24 	sts	0x2479, r24	; 0x802479 <numWaitingMsgs>
    2c86:	bf be       	out	0x3f, r11	; 63
    __asm__ volatile ("" ::: "memory");
    2c88:	8e ce       	rjmp	.-740    	; 0x29a6 <irReceive+0x1c6>
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
	}else{
		volatile MsgNode* node = incomingMsgHead;
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			if(incomingMsgHead==NULL){
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2c8a:	f7 01       	movw	r30, r14
    2c8c:	86 a9       	ldd	r24, Z+54	; 0x36
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2c8e:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c90:	f8 94       	cli
		tmp = malloc(size);
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	0d 96       	adiw	r24, 0x0d	; 13
    2c96:	0e 94 b1 4b 	call	0x9762	; 0x9762 <malloc>
    2c9a:	7c 01       	movw	r14, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c9c:	df be       	out	0x3f, r13	; 63
    2c9e:	80 93 12 26 	sts	0x2612, r24	; 0x802612 <incomingMsgHead>
    2ca2:	90 93 13 26 	sts	0x2613, r25	; 0x802613 <incomingMsgHead+0x1>
    2ca6:	a6 cf       	rjmp	.-180    	; 0x2bf4 <irReceive+0x414>
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
	
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
			if(notTimed){
    2ca8:	cc 20       	and	r12, r12
    2caa:	09 f4       	brne	.+2      	; 0x2cae <irReceive+0x4ce>
    2cac:	0e c1       	rjmp	.+540    	; 0x2eca <irReceive+0x6ea>
				receivedIrCmd(dir);
			}else{
				switch(ir_rxtx[dir].data_length){
    2cae:	86 a9       	ldd	r24, Z+54	; 0x36
    2cb0:	88 23       	and	r24, r24
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <irReceive+0x4d6>
    2cb4:	6a c0       	rjmp	.+212    	; 0x2d8a <irReceive+0x5aa>
    2cb6:	81 30       	cpi	r24, 0x01	; 1
    2cb8:	09 f0       	breq	.+2      	; 0x2cbc <irReceive+0x4dc>
    2cba:	75 ce       	rjmp	.-790    	; 0x29a6 <irReceive+0x1c6>
					case 0: receivedIrSyncCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
					case 1: receivedRnbCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
    2cbc:	c6 80       	ldd	r12, Z+6	; 0x06
    2cbe:	d7 80       	ldd	r13, Z+7	; 0x07
    2cc0:	80 80       	ld	r8, Z
    2cc2:	91 80       	ldd	r9, Z+1	; 0x01
    2cc4:	a2 80       	ldd	r10, Z+2	; 0x02
    2cc6:	b3 80       	ldd	r11, Z+3	; 0x03
    2cc8:	e0 84       	ldd	r14, Z+8	; 0x08
    2cca:	f1 84       	ldd	r15, Z+9	; 0x09
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
	uint32_t rnbCmdSentTime = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2ccc:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cce:	f8 94       	cli
		if(!processing_rnb_flag && (irIsBusy(ALL_DIRS)<8)){
    2cd0:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <processing_rnb_flag>
    2cd4:	81 11       	cpse	r24, r1
    2cd6:	f4 c0       	rjmp	.+488    	; 0x2ec0 <irReceive+0x6e0>
    2cd8:	8f e3       	ldi	r24, 0x3F	; 63
    2cda:	0e 94 55 12 	call	0x24aa	; 0x24aa <irIsBusy>
    2cde:	88 30       	cpi	r24, 0x08	; 8
    2ce0:	08 f0       	brcs	.+2      	; 0x2ce4 <irReceive+0x504>
    2ce2:	ee c0       	rjmp	.+476    	; 0x2ec0 <irReceive+0x6e0>
			if(delay!=0xFFFF){
    2ce4:	ff ef       	ldi	r31, 0xFF	; 255
    2ce6:	ef 16       	cp	r14, r31
    2ce8:	ff 06       	cpc	r15, r31
    2cea:	09 f4       	brne	.+2      	; 0x2cee <irReceive+0x50e>
    2cec:	e9 c0       	rjmp	.+466    	; 0x2ec0 <irReceive+0x6e0>
				rnbCmdID = senderID;
    2cee:	c0 92 14 26 	sts	0x2614, r12	; 0x802614 <rnbCmdID>
    2cf2:	d0 92 15 26 	sts	0x2615, r13	; 0x802615 <rnbCmdID+0x1>
				//printf("%04X: %hu\r\n", rnbCmdID, delay+5);			
				if(delay<5) delay = 20-delay;
    2cf6:	25 e0       	ldi	r18, 0x05	; 5
    2cf8:	e2 16       	cp	r14, r18
    2cfa:	f1 04       	cpc	r15, r1
    2cfc:	30 f4       	brcc	.+12     	; 0x2d0a <irReceive+0x52a>
    2cfe:	84 e1       	ldi	r24, 0x14	; 20
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	ac 01       	movw	r20, r24
    2d04:	4e 19       	sub	r20, r14
    2d06:	5f 09       	sbc	r21, r15
    2d08:	7a 01       	movw	r14, r20
				rnbCmdSentTime = last_byte-(delay+5);
    2d0a:	55 e0       	ldi	r21, 0x05	; 5
    2d0c:	e5 0e       	add	r14, r21
    2d0e:	f1 1c       	adc	r15, r1
    2d10:	8e 18       	sub	r8, r14
    2d12:	9f 08       	sbc	r9, r15
    2d14:	a1 08       	sbc	r10, r1
    2d16:	b1 08       	sbc	r11, r1
				processThisRNB = 1;
				processing_rnb_flag = 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	80 93 78 24 	sts	0x2478, r24	; 0x802478 <processing_rnb_flag>
				hpIrBlock_bm = 0x3F;
    2d1e:	8f e3       	ldi	r24, 0x3F	; 63
    2d20:	80 93 fd 23 	sts	0x23FD, r24	; 0x8023fd <hpIrBlock_bm>
			if(delay!=0xFFFF){
				rnbCmdID = senderID;
				//printf("%04X: %hu\r\n", rnbCmdID, delay+5);			
				if(delay<5) delay = 20-delay;
				rnbCmdSentTime = last_byte-(delay+5);
				processThisRNB = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d26:	7f be       	out	0x3f, r7	; 63
				processing_rnb_flag = 1;
				hpIrBlock_bm = 0x3F;
			}
		}
	}
	if(processThisRNB){
    2d28:	88 23       	and	r24, r24
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <irReceive+0x54e>
    2d2c:	3c ce       	rjmp	.-904    	; 0x29a6 <irReceive+0x1c6>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2d2e:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d30:	f8 94       	cli
    2d32:	a6 e0       	ldi	r26, 0x06	; 6
    2d34:	b0 e2       	ldi	r27, 0x20	; 32
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
    2d3a:	48 e3       	ldi	r20, 0x38	; 56
    2d3c:	07 c0       	rjmp	.+14     	; 0x2d4c <irReceive+0x56c>
    2d3e:	2f 5f       	subi	r18, 0xFF	; 255
    2d40:	3f 4f       	sbci	r19, 0xFF	; 255
    2d42:	12 96       	adiw	r26, 0x02	; 2
			}
		}
	}
	if(processThisRNB){
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t dir=0;dir<6;dir++){
    2d44:	26 30       	cpi	r18, 0x06	; 6
    2d46:	31 05       	cpc	r19, r1
    2d48:	09 f4       	brne	.+2      	; 0x2d4c <irReceive+0x56c>
    2d4a:	31 c1       	rjmp	.+610    	; 0x2fae <irReceive+0x7ce>
				if(ir_rxtx[dir].senderID==senderID){
    2d4c:	42 9f       	mul	r20, r18
    2d4e:	f0 01       	movw	r30, r0
    2d50:	43 9f       	mul	r20, r19
    2d52:	f0 0d       	add	r31, r0
    2d54:	11 24       	eor	r1, r1
    2d56:	e4 58       	subi	r30, 0x84	; 132
    2d58:	fb 4d       	sbci	r31, 0xDB	; 219
    2d5a:	86 81       	ldd	r24, Z+6	; 0x06
    2d5c:	97 81       	ldd	r25, Z+7	; 0x07
    2d5e:	c8 16       	cp	r12, r24
    2d60:	d9 06       	cpc	r13, r25
    2d62:	69 f7       	brne	.-38     	; 0x2d3e <irReceive+0x55e>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2d64:	14 82       	std	Z+4, r1	; 0x04
    2d66:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2d68:	16 82       	std	Z+6, r1	; 0x06
    2d6a:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2d6c:	10 86       	std	Z+8, r1	; 0x08
    2d6e:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2d70:	12 86       	std	Z+10, r1	; 0x0a
    2d72:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2d74:	14 86       	std	Z+12, r1	; 0x0c
    2d76:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2d78:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2d7a:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2d7c:	ed 91       	ld	r30, X+
    2d7e:	fc 91       	ld	r31, X
    2d80:	11 97       	sbiw	r26, 0x01	; 1
    2d82:	84 81       	ldd	r24, Z+4	; 0x04
    2d84:	80 61       	ori	r24, 0x10	; 16
    2d86:	84 83       	std	Z+4, r24	; 0x04
    2d88:	da cf       	rjmp	.-76     	; 0x2d3e <irReceive+0x55e>
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
			if(notTimed){
				receivedIrCmd(dir);
			}else{
				switch(ir_rxtx[dir].data_length){
					case 0: receivedIrSyncCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
    2d8a:	c6 80       	ldd	r12, Z+6	; 0x06
    2d8c:	d7 80       	ldd	r13, Z+7	; 0x07
    2d8e:	80 80       	ld	r8, Z
    2d90:	91 80       	ldd	r9, Z+1	; 0x01
    2d92:	a2 80       	ldd	r10, Z+2	; 0x02
    2d94:	b3 80       	ldd	r11, Z+3	; 0x03
    2d96:	e0 84       	ldd	r14, Z+8	; 0x08
    2d98:	f1 84       	ldd	r15, Z+9	; 0x09
}

static void receivedIrSyncCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisFFSync = 0;
	uint16_t count;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2d9a:	9f b7       	in	r25, 0x3f	; 63
    2d9c:	f8 94       	cli
		if(!processingFFsyncFlag){
    2d9e:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <processingFFsyncFlag>
    2da2:	81 11       	cpse	r24, r1
    2da4:	fc c0       	rjmp	.+504    	; 0x2f9e <irReceive+0x7be>
			count = TCE0.CNT;
    2da6:	60 90 20 0a 	lds	r6, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    2daa:	70 90 21 0a 	lds	r7, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
			if(delay!=0xFFFF){
    2dae:	ff ef       	ldi	r31, 0xFF	; 255
    2db0:	ef 16       	cp	r14, r31
    2db2:	ff 06       	cpc	r15, r31
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <irReceive+0x5d8>
    2db6:	f3 c0       	rjmp	.+486    	; 0x2f9e <irReceive+0x7be>
				processThisFFSync = 1;
				processingFFsyncFlag = 1;
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	80 93 ac 22 	sts	0x22AC, r24	; 0x8022ac <processingFFsyncFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dbe:	9f bf       	out	0x3f, r25	; 63
			}
		}
	}
	if(processThisFFSync){
    2dc0:	88 23       	and	r24, r24
    2dc2:	09 f4       	brne	.+2      	; 0x2dc6 <irReceive+0x5e6>
    2dc4:	f0 cd       	rjmp	.-1056   	; 0x29a6 <irReceive+0x1c6>
		//printf("senderID: %04X\tdelay: %hu\r\n", ir_rxtx[dir].sender_ID, delay);
		delay = delay+5+(getTime()-last_byte); //The time is measured right before sending and is the last two bytes of the message. Our baud rate means that it takes 5ms to send two bytes.
    2dc6:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    2dca:	97 01       	movw	r18, r14
    2dcc:	2b 5f       	subi	r18, 0xFB	; 251
    2dce:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd0:	28 19       	sub	r18, r8
    2dd2:	39 09       	sbc	r19, r9
    2dd4:	62 0f       	add	r22, r18
    2dd6:	73 1f       	adc	r23, r19

ObsQueue* obsStart;

inline void updateFireflyCounter(volatile uint16_t count, volatile uint16_t delay){
	//printf("%u\r\n", delay);
	uint16_t theDelay = delay*FFSYNC_MS_CONVERSION_FACTOR;
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	0e 94 0e 48 	call	0x901c	; 0x901c <__floatunsisf>
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	4a ef       	ldi	r20, 0xFA	; 250
    2de6:	50 e4       	ldi	r21, 0x40	; 64
    2de8:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    2dec:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
	uint16_t obs;
	ObsQueue* node;
	if(count<=theDelay){
    2df0:	66 15       	cp	r22, r6
    2df2:	77 05       	cpc	r23, r7
    2df4:	08 f4       	brcc	.+2      	; 0x2df8 <irReceive+0x618>
    2df6:	0b c1       	rjmp	.+534    	; 0x300e <irReceive+0x82e>
		obs = count + (FFSYNC_FULL_PERIOD-theDelay);
    2df8:	2f eb       	ldi	r18, 0xBF	; 191
    2dfa:	62 1a       	sub	r6, r18
    2dfc:	22 e6       	ldi	r18, 0x62	; 98
    2dfe:	72 0a       	sbc	r7, r18
    2e00:	66 1a       	sub	r6, r22
    2e02:	77 0a       	sbc	r7, r23
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2e04:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e06:	f8 94       	cli
		tmp = malloc(size);
    2e08:	86 e0       	ldi	r24, 0x06	; 6
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	0e 94 b1 4b 	call	0x9762	; 0x9762 <malloc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e10:	ff be       	out	0x3f, r15	; 63
	}else{
		obs = count - theDelay;
	}
	node = (ObsQueue*)myMalloc(sizeof(ObsQueue));
	if(node==NULL){
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	41 f1       	breq	.+80     	; 0x2e66 <irReceive+0x686>
		return;
	}
	ObsQueue* curr = obsStart->prev;
    2e16:	e0 91 ff 23 	lds	r30, 0x23FF	; 0x8023ff <obsStart>
    2e1a:	f0 91 00 24 	lds	r31, 0x2400	; 0x802400 <obsStart+0x1>
    2e1e:	04 80       	ldd	r0, Z+4	; 0x04
    2e20:	f5 81       	ldd	r31, Z+5	; 0x05
    2e22:	e0 2d       	mov	r30, r0
	while(obs < curr->obs){
    2e24:	20 81       	ld	r18, Z
    2e26:	31 81       	ldd	r19, Z+1	; 0x01
    2e28:	62 16       	cp	r6, r18
    2e2a:	73 06       	cpc	r7, r19
    2e2c:	40 f4       	brcc	.+16     	; 0x2e3e <irReceive+0x65e>
		curr = curr->prev;
    2e2e:	04 80       	ldd	r0, Z+4	; 0x04
    2e30:	f5 81       	ldd	r31, Z+5	; 0x05
    2e32:	e0 2d       	mov	r30, r0
	node = (ObsQueue*)myMalloc(sizeof(ObsQueue));
	if(node==NULL){
		return;
	}
	ObsQueue* curr = obsStart->prev;
	while(obs < curr->obs){
    2e34:	20 81       	ld	r18, Z
    2e36:	31 81       	ldd	r19, Z+1	; 0x01
    2e38:	62 16       	cp	r6, r18
    2e3a:	73 06       	cpc	r7, r19
    2e3c:	c0 f3       	brcs	.-16     	; 0x2e2e <irReceive+0x64e>
		curr = curr->prev;
	}
	(curr->next)->prev = node;
    2e3e:	22 81       	ldd	r18, Z+2	; 0x02
    2e40:	33 81       	ldd	r19, Z+3	; 0x03
    2e42:	d9 01       	movw	r26, r18
    2e44:	14 96       	adiw	r26, 0x04	; 4
    2e46:	8d 93       	st	X+, r24
    2e48:	9c 93       	st	X, r25
    2e4a:	15 97       	sbiw	r26, 0x05	; 5
	node->next = curr->next;
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	12 96       	adiw	r26, 0x02	; 2
    2e50:	2d 93       	st	X+, r18
    2e52:	3c 93       	st	X, r19
    2e54:	13 97       	sbiw	r26, 0x03	; 3
	node->prev = curr;
    2e56:	14 96       	adiw	r26, 0x04	; 4
    2e58:	ed 93       	st	X+, r30
    2e5a:	fc 93       	st	X, r31
    2e5c:	15 97       	sbiw	r26, 0x05	; 5
	curr->next = node;
    2e5e:	82 83       	std	Z+2, r24	; 0x02
    2e60:	93 83       	std	Z+3, r25	; 0x03
			
	node->obs = obs;
    2e62:	6d 92       	st	X+, r6
    2e64:	7c 92       	st	X, r7
		updateFireflyCounter(count, delay);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2e66:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e68:	f8 94       	cli
    2e6a:	a6 e0       	ldi	r26, 0x06	; 6
    2e6c:	b0 e2       	ldi	r27, 0x20	; 32
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
    2e72:	48 e3       	ldi	r20, 0x38	; 56
    2e74:	06 c0       	rjmp	.+12     	; 0x2e82 <irReceive+0x6a2>
    2e76:	01 96       	adiw	r24, 0x01	; 1
    2e78:	12 96       	adiw	r26, 0x02	; 2
	if(processThisFFSync){
		//printf("senderID: %04X\tdelay: %hu\r\n", ir_rxtx[dir].sender_ID, delay);
		delay = delay+5+(getTime()-last_byte); //The time is measured right before sending and is the last two bytes of the message. Our baud rate means that it takes 5ms to send two bytes.
		updateFireflyCounter(count, delay);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t dir=0;dir<6;dir++){
    2e7a:	86 30       	cpi	r24, 0x06	; 6
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <irReceive+0x6a2>
    2e80:	92 c0       	rjmp	.+292    	; 0x2fa6 <irReceive+0x7c6>
				if(ir_rxtx[dir].senderID==senderID){
    2e82:	48 9f       	mul	r20, r24
    2e84:	f0 01       	movw	r30, r0
    2e86:	49 9f       	mul	r20, r25
    2e88:	f0 0d       	add	r31, r0
    2e8a:	11 24       	eor	r1, r1
    2e8c:	e4 58       	subi	r30, 0x84	; 132
    2e8e:	fb 4d       	sbci	r31, 0xDB	; 219
    2e90:	26 81       	ldd	r18, Z+6	; 0x06
    2e92:	37 81       	ldd	r19, Z+7	; 0x07
    2e94:	c2 16       	cp	r12, r18
    2e96:	d3 06       	cpc	r13, r19
    2e98:	71 f7       	brne	.-36     	; 0x2e76 <irReceive+0x696>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2e9a:	14 82       	std	Z+4, r1	; 0x04
    2e9c:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2e9e:	16 82       	std	Z+6, r1	; 0x06
    2ea0:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2ea2:	10 86       	std	Z+8, r1	; 0x08
    2ea4:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2ea6:	12 86       	std	Z+10, r1	; 0x0a
    2ea8:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2eaa:	14 86       	std	Z+12, r1	; 0x0c
    2eac:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2eae:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2eb0:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2eb2:	ed 91       	ld	r30, X+
    2eb4:	fc 91       	ld	r31, X
    2eb6:	11 97       	sbiw	r26, 0x01	; 1
    2eb8:	24 81       	ldd	r18, Z+4	; 0x04
    2eba:	20 61       	ori	r18, 0x10	; 16
    2ebc:	24 83       	std	Z+4, r18	; 0x04
    2ebe:	db cf       	rjmp	.-74     	; 0x2e76 <irReceive+0x696>
	//printf("F\r\n");
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
	uint32_t rnbCmdSentTime = 0;
    2ec0:	81 2c       	mov	r8, r1
    2ec2:	91 2c       	mov	r9, r1
    2ec4:	54 01       	movw	r10, r8
	}
	//printf("F\r\n");
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	2e cf       	rjmp	.-420    	; 0x2d26 <irReceive+0x546>
	}
}

static void receivedIrCmd(uint8_t dir){
	uint8_t processThisCommand = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2eca:	cf b6       	in	r12, 0x3f	; 63
    2ecc:	f8 94       	cli
		if(!processingCmdFlag){
    2ece:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <processingCmdFlag>
    2ed2:	81 11       	cpse	r24, r1
    2ed4:	66 c0       	rjmp	.+204    	; 0x2fa2 <irReceive+0x7c2>
			processThisCommand = 1;
			memcpy((void*)cmdBuffer, (char*)ir_rxtx[dir].buf, ir_rxtx[dir].data_length);
    2ed6:	46 a9       	ldd	r20, Z+54	; 0x36
    2ed8:	50 e0       	ldi	r21, 0x00	; 0
    2eda:	66 57       	subi	r22, 0x76	; 118
    2edc:	7b 4d       	sbci	r23, 0xDB	; 219
    2ede:	8a e6       	ldi	r24, 0x6A	; 106
    2ee0:	92 e2       	ldi	r25, 0x22	; 34
    2ee2:	0e 94 09 4f 	call	0x9e12	; 0x9e12 <memcpy>
			cmdBuffer[ir_rxtx[dir].data_length]='\0';
    2ee6:	d7 01       	movw	r26, r14
    2ee8:	d6 96       	adiw	r26, 0x36	; 54
    2eea:	ec 91       	ld	r30, X
    2eec:	d6 97       	sbiw	r26, 0x36	; 54
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	e6 59       	subi	r30, 0x96	; 150
    2ef2:	fd 4d       	sbci	r31, 0xDD	; 221
    2ef4:	10 82       	st	Z, r1
			cmdLength = ir_rxtx[dir].data_length;
    2ef6:	d6 96       	adiw	r26, 0x36	; 54
    2ef8:	8c 91       	ld	r24, X
    2efa:	d6 97       	sbiw	r26, 0x36	; 54
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	80 93 aa 22 	sts	0x22AA, r24	; 0x8022aa <cmdLength>
    2f02:	90 93 ab 22 	sts	0x22AB, r25	; 0x8022ab <cmdLength+0x1>
			cmdArrivalTime = ir_rxtx[dir].last_byte;	//This is a 'global' value, referenced by other *.c files.
    2f06:	8d 91       	ld	r24, X+
    2f08:	9d 91       	ld	r25, X+
    2f0a:	0d 90       	ld	r0, X+
    2f0c:	bc 91       	ld	r27, X
    2f0e:	a0 2d       	mov	r26, r0
    2f10:	80 93 20 26 	sts	0x2620, r24	; 0x802620 <cmdArrivalTime>
    2f14:	90 93 21 26 	sts	0x2621, r25	; 0x802621 <cmdArrivalTime+0x1>
    2f18:	a0 93 22 26 	sts	0x2622, r26	; 0x802622 <cmdArrivalTime+0x2>
    2f1c:	b0 93 23 26 	sts	0x2623, r27	; 0x802623 <cmdArrivalTime+0x3>
			cmdSenderId = ir_rxtx[dir].senderID;		//This is a 'global' value, referenced by other *.c files.
    2f20:	f7 01       	movw	r30, r14
    2f22:	86 81       	ldd	r24, Z+6	; 0x06
    2f24:	97 81       	ldd	r25, Z+7	; 0x07
    2f26:	80 93 7a 24 	sts	0x247A, r24	; 0x80247a <cmdSenderId>
    2f2a:	90 93 7b 24 	sts	0x247B, r25	; 0x80247b <cmdSenderId+0x1>
			cmdArrivalDir = dir;
    2f2e:	d0 92 1a 24 	sts	0x241A, r13	; 0x80241a <cmdArrivalDir>
			processingCmdFlag = 1;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	80 93 ad 22 	sts	0x22AD, r24	; 0x8022ad <processingCmdFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f38:	cf be       	out	0x3f, r12	; 63
		}
	}
	if(processThisCommand){
    2f3a:	88 23       	and	r24, r24
    2f3c:	09 f4       	brne	.+2      	; 0x2f40 <irReceive+0x760>
    2f3e:	33 cd       	rjmp	.-1434   	; 0x29a6 <irReceive+0x1c6>
		scheduleTask(5, handleCmdWrapper, NULL);
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	4e e5       	ldi	r20, 0x5E	; 94
    2f46:	5f e0       	ldi	r21, 0x0F	; 15
    2f48:	65 e0       	ldi	r22, 0x05	; 5
    2f4a:	70 e0       	ldi	r23, 0x00	; 0
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <scheduleTask>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2f54:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f56:	f8 94       	cli
    2f58:	a6 e0       	ldi	r26, 0x06	; 6
    2f5a:	b0 e2       	ldi	r27, 0x20	; 32
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2f60:	38 e3       	ldi	r19, 0x38	; 56
    2f62:	38 9f       	mul	r19, r24
    2f64:	f0 01       	movw	r30, r0
    2f66:	39 9f       	mul	r19, r25
    2f68:	f0 0d       	add	r31, r0
    2f6a:	11 24       	eor	r1, r1
    2f6c:	e4 58       	subi	r30, 0x84	; 132
    2f6e:	fb 4d       	sbci	r31, 0xDB	; 219
    2f70:	14 82       	std	Z+4, r1	; 0x04
    2f72:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2f74:	16 82       	std	Z+6, r1	; 0x06
    2f76:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2f78:	10 86       	std	Z+8, r1	; 0x08
    2f7a:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2f7c:	12 86       	std	Z+10, r1	; 0x0a
    2f7e:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2f80:	14 86       	std	Z+12, r1	; 0x0c
    2f82:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2f84:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2f86:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2f88:	ed 91       	ld	r30, X+
    2f8a:	fd 91       	ld	r31, X+
    2f8c:	24 81       	ldd	r18, Z+4	; 0x04
    2f8e:	20 61       	ori	r18, 0x10	; 16
    2f90:	24 83       	std	Z+4, r18	; 0x04
    2f92:	01 96       	adiw	r24, 0x01	; 1
		}
	}
	if(processThisCommand){
		scheduleTask(5, handleCmdWrapper, NULL);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t other_dir=0;other_dir<6;other_dir++){
    2f94:	86 30       	cpi	r24, 0x06	; 6
    2f96:	91 05       	cpc	r25, r1
    2f98:	21 f7       	brne	.-56     	; 0x2f62 <irReceive+0x782>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f9a:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    2f9c:	04 cd       	rjmp	.-1528   	; 0x29a6 <irReceive+0x1c6>
		}
	}
}

static void receivedIrSyncCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisFFSync = 0;
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	0e cf       	rjmp	.-484    	; 0x2dbe <irReceive+0x5de>
		handleCompletedMsg(dir);
	}
}

static void receivedIrCmd(uint8_t dir){
	uint8_t processThisCommand = 0;
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	c9 cf       	rjmp	.-110    	; 0x2f38 <irReceive+0x758>
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
					clearIrBuffer(dir);
				}
			}
			processingFFsyncFlag = 0;
    2fa6:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <processingFFsyncFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2faa:	5f bf       	out	0x3f, r21	; 63
    __asm__ volatile ("" ::: "memory");
    2fac:	fc cc       	rjmp	.-1544   	; 0x29a6 <irReceive+0x1c6>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2fae:	5f bf       	out	0x3f, r21	; 63
				if(ir_rxtx[dir].senderID==senderID){
					clearIrBuffer(dir);
				}
			}
		}
		irRangeMeas(rnbCmdSentTime);	
    2fb0:	c5 01       	movw	r24, r10
    2fb2:	b4 01       	movw	r22, r8
    2fb4:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <irRangeMeas>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2fb8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2fba:	f8 94       	cli
			hpIrBlock_bm = 0;
    2fbc:	10 92 fd 23 	sts	0x23FD, r1	; 0x8023fd <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2fc0:	8f bf       	out	0x3f, r24	; 63
		}
		scheduleTask(10, useRnbData, NULL);
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	4d ed       	ldi	r20, 0xDD	; 221
    2fc8:	5a e2       	ldi	r21, 0x2A	; 42
    2fca:	6a e0       	ldi	r22, 0x0A	; 10
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <scheduleTask>
    2fd6:	e7 cc       	rjmp	.-1586   	; 0x29a6 <irReceive+0x1c6>
	   } while (busy);
}

static void addMsgToMsgQueue(uint8_t dir){
	if(ir_rxtx[dir].data_length == 0){
		printf_P(PSTR("ERROR! Should NOT be adding 0-length message to queue.\r\n"));
    2fd8:	8b e2       	ldi	r24, 0x2B	; 43
    2fda:	96 e0       	ldi	r25, 0x06	; 6
    2fdc:	9f 93       	push	r25
    2fde:	8f 93       	push	r24
    2fe0:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	de cc       	rjmp	.-1604   	; 0x29a6 <irReceive+0x1c6>
	}else if(ir_rxtx[dir].data_length > IR_BUFFER_SIZE){
		printf_P(PSTR("ERROR! Should NOT be adding a message with length greater than buffer size to queue.\r\n"));
    2fea:	84 ed       	ldi	r24, 0xD4	; 212
    2fec:	95 e0       	ldi	r25, 0x05	; 5
    2fee:	9f 93       	push	r25
    2ff0:	8f 93       	push	r24
    2ff2:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    2ff6:	0f 90       	pop	r0
    2ff8:	0f 90       	pop	r0
    2ffa:	d5 cc       	rjmp	.-1622   	; 0x29a6 <irReceive+0x1c6>
	}else if(memoryConsumedByBuffer > 500){
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
    2ffc:	86 e6       	ldi	r24, 0x66	; 102
    2ffe:	95 e0       	ldi	r25, 0x05	; 5
    3000:	9f 93       	push	r25
    3002:	8f 93       	push	r24
    3004:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	cc cc       	rjmp	.-1640   	; 0x29a6 <irReceive+0x1c6>
	uint16_t obs;
	ObsQueue* node;
	if(count<=theDelay){
		obs = count + (FFSYNC_FULL_PERIOD-theDelay);
	}else{
		obs = count - theDelay;
    300e:	66 1a       	sub	r6, r22
    3010:	77 0a       	sbc	r7, r23
    3012:	f8 ce       	rjmp	.-528    	; 0x2e04 <irReceive+0x624>

00003014 <__vector_25>:
	}
	return receiving | transmitting | timed_cmd | hp_block;
}

// ISRs for IR channel 0
ISR( USARTC0_RXC_vect ) { irReceive(0); }
    3014:	1f 92       	push	r1
    3016:	0f 92       	push	r0
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	0f 92       	push	r0
    301c:	11 24       	eor	r1, r1
    301e:	0b b6       	in	r0, 0x3b	; 59
    3020:	0f 92       	push	r0
    3022:	2f 93       	push	r18
    3024:	3f 93       	push	r19
    3026:	4f 93       	push	r20
    3028:	5f 93       	push	r21
    302a:	6f 93       	push	r22
    302c:	7f 93       	push	r23
    302e:	8f 93       	push	r24
    3030:	9f 93       	push	r25
    3032:	af 93       	push	r26
    3034:	bf 93       	push	r27
    3036:	ef 93       	push	r30
    3038:	ff 93       	push	r31
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <irReceive>
    3040:	ff 91       	pop	r31
    3042:	ef 91       	pop	r30
    3044:	bf 91       	pop	r27
    3046:	af 91       	pop	r26
    3048:	9f 91       	pop	r25
    304a:	8f 91       	pop	r24
    304c:	7f 91       	pop	r23
    304e:	6f 91       	pop	r22
    3050:	5f 91       	pop	r21
    3052:	4f 91       	pop	r20
    3054:	3f 91       	pop	r19
    3056:	2f 91       	pop	r18
    3058:	0f 90       	pop	r0
    305a:	0b be       	out	0x3b, r0	; 59
    305c:	0f 90       	pop	r0
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	0f 90       	pop	r0
    3062:	1f 90       	pop	r1
    3064:	18 95       	reti

00003066 <__vector_27>:
ISR( USARTC0_TXC_vect ) { irTransmitComplete(0); }
    3066:	1f 92       	push	r1
    3068:	0f 92       	push	r0
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	0f 92       	push	r0
    306e:	11 24       	eor	r1, r1
    3070:	0b b6       	in	r0, 0x3b	; 59
    3072:	0f 92       	push	r0
    3074:	2f 93       	push	r18
    3076:	3f 93       	push	r19
    3078:	4f 93       	push	r20
    307a:	5f 93       	push	r21
    307c:	6f 93       	push	r22
    307e:	7f 93       	push	r23
    3080:	8f 93       	push	r24
    3082:	9f 93       	push	r25
    3084:	af 93       	push	r26
    3086:	bf 93       	push	r27
    3088:	ef 93       	push	r30
    308a:	ff 93       	push	r31
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <irTransmitComplete>
    3092:	ff 91       	pop	r31
    3094:	ef 91       	pop	r30
    3096:	bf 91       	pop	r27
    3098:	af 91       	pop	r26
    309a:	9f 91       	pop	r25
    309c:	8f 91       	pop	r24
    309e:	7f 91       	pop	r23
    30a0:	6f 91       	pop	r22
    30a2:	5f 91       	pop	r21
    30a4:	4f 91       	pop	r20
    30a6:	3f 91       	pop	r19
    30a8:	2f 91       	pop	r18
    30aa:	0f 90       	pop	r0
    30ac:	0b be       	out	0x3b, r0	; 59
    30ae:	0f 90       	pop	r0
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	0f 90       	pop	r0
    30b4:	1f 90       	pop	r1
    30b6:	18 95       	reti

000030b8 <__vector_26>:
ISR( USARTC0_DRE_vect ) { irTransmit(0); }
    30b8:	1f 92       	push	r1
    30ba:	0f 92       	push	r0
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	0f 92       	push	r0
    30c0:	11 24       	eor	r1, r1
    30c2:	0b b6       	in	r0, 0x3b	; 59
    30c4:	0f 92       	push	r0
    30c6:	2f 93       	push	r18
    30c8:	3f 93       	push	r19
    30ca:	4f 93       	push	r20
    30cc:	5f 93       	push	r21
    30ce:	6f 93       	push	r22
    30d0:	7f 93       	push	r23
    30d2:	8f 93       	push	r24
    30d4:	9f 93       	push	r25
    30d6:	af 93       	push	r26
    30d8:	bf 93       	push	r27
    30da:	ef 93       	push	r30
    30dc:	ff 93       	push	r31
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <irTransmit>
    30e4:	ff 91       	pop	r31
    30e6:	ef 91       	pop	r30
    30e8:	bf 91       	pop	r27
    30ea:	af 91       	pop	r26
    30ec:	9f 91       	pop	r25
    30ee:	8f 91       	pop	r24
    30f0:	7f 91       	pop	r23
    30f2:	6f 91       	pop	r22
    30f4:	5f 91       	pop	r21
    30f6:	4f 91       	pop	r20
    30f8:	3f 91       	pop	r19
    30fa:	2f 91       	pop	r18
    30fc:	0f 90       	pop	r0
    30fe:	0b be       	out	0x3b, r0	; 59
    3100:	0f 90       	pop	r0
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	0f 90       	pop	r0
    3106:	1f 90       	pop	r1
    3108:	18 95       	reti

0000310a <__vector_28>:

// ISRs for IR channel 1
ISR( USARTC1_RXC_vect ) { irReceive(1); }
    310a:	1f 92       	push	r1
    310c:	0f 92       	push	r0
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	0f 92       	push	r0
    3112:	11 24       	eor	r1, r1
    3114:	0b b6       	in	r0, 0x3b	; 59
    3116:	0f 92       	push	r0
    3118:	2f 93       	push	r18
    311a:	3f 93       	push	r19
    311c:	4f 93       	push	r20
    311e:	5f 93       	push	r21
    3120:	6f 93       	push	r22
    3122:	7f 93       	push	r23
    3124:	8f 93       	push	r24
    3126:	9f 93       	push	r25
    3128:	af 93       	push	r26
    312a:	bf 93       	push	r27
    312c:	ef 93       	push	r30
    312e:	ff 93       	push	r31
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <irReceive>
    3136:	ff 91       	pop	r31
    3138:	ef 91       	pop	r30
    313a:	bf 91       	pop	r27
    313c:	af 91       	pop	r26
    313e:	9f 91       	pop	r25
    3140:	8f 91       	pop	r24
    3142:	7f 91       	pop	r23
    3144:	6f 91       	pop	r22
    3146:	5f 91       	pop	r21
    3148:	4f 91       	pop	r20
    314a:	3f 91       	pop	r19
    314c:	2f 91       	pop	r18
    314e:	0f 90       	pop	r0
    3150:	0b be       	out	0x3b, r0	; 59
    3152:	0f 90       	pop	r0
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	0f 90       	pop	r0
    3158:	1f 90       	pop	r1
    315a:	18 95       	reti

0000315c <__vector_30>:
ISR( USARTC1_TXC_vect ) { irTransmitComplete(1); }
    315c:	1f 92       	push	r1
    315e:	0f 92       	push	r0
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	0f 92       	push	r0
    3164:	11 24       	eor	r1, r1
    3166:	0b b6       	in	r0, 0x3b	; 59
    3168:	0f 92       	push	r0
    316a:	2f 93       	push	r18
    316c:	3f 93       	push	r19
    316e:	4f 93       	push	r20
    3170:	5f 93       	push	r21
    3172:	6f 93       	push	r22
    3174:	7f 93       	push	r23
    3176:	8f 93       	push	r24
    3178:	9f 93       	push	r25
    317a:	af 93       	push	r26
    317c:	bf 93       	push	r27
    317e:	ef 93       	push	r30
    3180:	ff 93       	push	r31
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <irTransmitComplete>
    3188:	ff 91       	pop	r31
    318a:	ef 91       	pop	r30
    318c:	bf 91       	pop	r27
    318e:	af 91       	pop	r26
    3190:	9f 91       	pop	r25
    3192:	8f 91       	pop	r24
    3194:	7f 91       	pop	r23
    3196:	6f 91       	pop	r22
    3198:	5f 91       	pop	r21
    319a:	4f 91       	pop	r20
    319c:	3f 91       	pop	r19
    319e:	2f 91       	pop	r18
    31a0:	0f 90       	pop	r0
    31a2:	0b be       	out	0x3b, r0	; 59
    31a4:	0f 90       	pop	r0
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	0f 90       	pop	r0
    31aa:	1f 90       	pop	r1
    31ac:	18 95       	reti

000031ae <__vector_29>:
ISR( USARTC1_DRE_vect ) { irTransmit(1); }
    31ae:	1f 92       	push	r1
    31b0:	0f 92       	push	r0
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	0f 92       	push	r0
    31b6:	11 24       	eor	r1, r1
    31b8:	0b b6       	in	r0, 0x3b	; 59
    31ba:	0f 92       	push	r0
    31bc:	2f 93       	push	r18
    31be:	3f 93       	push	r19
    31c0:	4f 93       	push	r20
    31c2:	5f 93       	push	r21
    31c4:	6f 93       	push	r22
    31c6:	7f 93       	push	r23
    31c8:	8f 93       	push	r24
    31ca:	9f 93       	push	r25
    31cc:	af 93       	push	r26
    31ce:	bf 93       	push	r27
    31d0:	ef 93       	push	r30
    31d2:	ff 93       	push	r31
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <irTransmit>
    31da:	ff 91       	pop	r31
    31dc:	ef 91       	pop	r30
    31de:	bf 91       	pop	r27
    31e0:	af 91       	pop	r26
    31e2:	9f 91       	pop	r25
    31e4:	8f 91       	pop	r24
    31e6:	7f 91       	pop	r23
    31e8:	6f 91       	pop	r22
    31ea:	5f 91       	pop	r21
    31ec:	4f 91       	pop	r20
    31ee:	3f 91       	pop	r19
    31f0:	2f 91       	pop	r18
    31f2:	0f 90       	pop	r0
    31f4:	0b be       	out	0x3b, r0	; 59
    31f6:	0f 90       	pop	r0
    31f8:	0f be       	out	0x3f, r0	; 63
    31fa:	0f 90       	pop	r0
    31fc:	1f 90       	pop	r1
    31fe:	18 95       	reti

00003200 <__vector_88>:

// ISRs for IR channel 2
ISR( USARTD0_RXC_vect ) { irReceive(2); }
    3200:	1f 92       	push	r1
    3202:	0f 92       	push	r0
    3204:	0f b6       	in	r0, 0x3f	; 63
    3206:	0f 92       	push	r0
    3208:	11 24       	eor	r1, r1
    320a:	0b b6       	in	r0, 0x3b	; 59
    320c:	0f 92       	push	r0
    320e:	2f 93       	push	r18
    3210:	3f 93       	push	r19
    3212:	4f 93       	push	r20
    3214:	5f 93       	push	r21
    3216:	6f 93       	push	r22
    3218:	7f 93       	push	r23
    321a:	8f 93       	push	r24
    321c:	9f 93       	push	r25
    321e:	af 93       	push	r26
    3220:	bf 93       	push	r27
    3222:	ef 93       	push	r30
    3224:	ff 93       	push	r31
    3226:	82 e0       	ldi	r24, 0x02	; 2
    3228:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <irReceive>
    322c:	ff 91       	pop	r31
    322e:	ef 91       	pop	r30
    3230:	bf 91       	pop	r27
    3232:	af 91       	pop	r26
    3234:	9f 91       	pop	r25
    3236:	8f 91       	pop	r24
    3238:	7f 91       	pop	r23
    323a:	6f 91       	pop	r22
    323c:	5f 91       	pop	r21
    323e:	4f 91       	pop	r20
    3240:	3f 91       	pop	r19
    3242:	2f 91       	pop	r18
    3244:	0f 90       	pop	r0
    3246:	0b be       	out	0x3b, r0	; 59
    3248:	0f 90       	pop	r0
    324a:	0f be       	out	0x3f, r0	; 63
    324c:	0f 90       	pop	r0
    324e:	1f 90       	pop	r1
    3250:	18 95       	reti

00003252 <__vector_90>:
ISR( USARTD0_TXC_vect ) { irTransmitComplete(2); }
    3252:	1f 92       	push	r1
    3254:	0f 92       	push	r0
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	0f 92       	push	r0
    325a:	11 24       	eor	r1, r1
    325c:	0b b6       	in	r0, 0x3b	; 59
    325e:	0f 92       	push	r0
    3260:	2f 93       	push	r18
    3262:	3f 93       	push	r19
    3264:	4f 93       	push	r20
    3266:	5f 93       	push	r21
    3268:	6f 93       	push	r22
    326a:	7f 93       	push	r23
    326c:	8f 93       	push	r24
    326e:	9f 93       	push	r25
    3270:	af 93       	push	r26
    3272:	bf 93       	push	r27
    3274:	ef 93       	push	r30
    3276:	ff 93       	push	r31
    3278:	82 e0       	ldi	r24, 0x02	; 2
    327a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <irTransmitComplete>
    327e:	ff 91       	pop	r31
    3280:	ef 91       	pop	r30
    3282:	bf 91       	pop	r27
    3284:	af 91       	pop	r26
    3286:	9f 91       	pop	r25
    3288:	8f 91       	pop	r24
    328a:	7f 91       	pop	r23
    328c:	6f 91       	pop	r22
    328e:	5f 91       	pop	r21
    3290:	4f 91       	pop	r20
    3292:	3f 91       	pop	r19
    3294:	2f 91       	pop	r18
    3296:	0f 90       	pop	r0
    3298:	0b be       	out	0x3b, r0	; 59
    329a:	0f 90       	pop	r0
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	0f 90       	pop	r0
    32a0:	1f 90       	pop	r1
    32a2:	18 95       	reti

000032a4 <__vector_89>:
ISR( USARTD0_DRE_vect ) { irTransmit(2); }
    32a4:	1f 92       	push	r1
    32a6:	0f 92       	push	r0
    32a8:	0f b6       	in	r0, 0x3f	; 63
    32aa:	0f 92       	push	r0
    32ac:	11 24       	eor	r1, r1
    32ae:	0b b6       	in	r0, 0x3b	; 59
    32b0:	0f 92       	push	r0
    32b2:	2f 93       	push	r18
    32b4:	3f 93       	push	r19
    32b6:	4f 93       	push	r20
    32b8:	5f 93       	push	r21
    32ba:	6f 93       	push	r22
    32bc:	7f 93       	push	r23
    32be:	8f 93       	push	r24
    32c0:	9f 93       	push	r25
    32c2:	af 93       	push	r26
    32c4:	bf 93       	push	r27
    32c6:	ef 93       	push	r30
    32c8:	ff 93       	push	r31
    32ca:	82 e0       	ldi	r24, 0x02	; 2
    32cc:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <irTransmit>
    32d0:	ff 91       	pop	r31
    32d2:	ef 91       	pop	r30
    32d4:	bf 91       	pop	r27
    32d6:	af 91       	pop	r26
    32d8:	9f 91       	pop	r25
    32da:	8f 91       	pop	r24
    32dc:	7f 91       	pop	r23
    32de:	6f 91       	pop	r22
    32e0:	5f 91       	pop	r21
    32e2:	4f 91       	pop	r20
    32e4:	3f 91       	pop	r19
    32e6:	2f 91       	pop	r18
    32e8:	0f 90       	pop	r0
    32ea:	0b be       	out	0x3b, r0	; 59
    32ec:	0f 90       	pop	r0
    32ee:	0f be       	out	0x3f, r0	; 63
    32f0:	0f 90       	pop	r0
    32f2:	1f 90       	pop	r1
    32f4:	18 95       	reti

000032f6 <__vector_58>:

// ISRs for IR channel 3
ISR( USARTE0_RXC_vect ) { irReceive(3); }
    32f6:	1f 92       	push	r1
    32f8:	0f 92       	push	r0
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	0f 92       	push	r0
    32fe:	11 24       	eor	r1, r1
    3300:	0b b6       	in	r0, 0x3b	; 59
    3302:	0f 92       	push	r0
    3304:	2f 93       	push	r18
    3306:	3f 93       	push	r19
    3308:	4f 93       	push	r20
    330a:	5f 93       	push	r21
    330c:	6f 93       	push	r22
    330e:	7f 93       	push	r23
    3310:	8f 93       	push	r24
    3312:	9f 93       	push	r25
    3314:	af 93       	push	r26
    3316:	bf 93       	push	r27
    3318:	ef 93       	push	r30
    331a:	ff 93       	push	r31
    331c:	83 e0       	ldi	r24, 0x03	; 3
    331e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <irReceive>
    3322:	ff 91       	pop	r31
    3324:	ef 91       	pop	r30
    3326:	bf 91       	pop	r27
    3328:	af 91       	pop	r26
    332a:	9f 91       	pop	r25
    332c:	8f 91       	pop	r24
    332e:	7f 91       	pop	r23
    3330:	6f 91       	pop	r22
    3332:	5f 91       	pop	r21
    3334:	4f 91       	pop	r20
    3336:	3f 91       	pop	r19
    3338:	2f 91       	pop	r18
    333a:	0f 90       	pop	r0
    333c:	0b be       	out	0x3b, r0	; 59
    333e:	0f 90       	pop	r0
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	0f 90       	pop	r0
    3344:	1f 90       	pop	r1
    3346:	18 95       	reti

00003348 <__vector_60>:
ISR( USARTE0_TXC_vect ) { irTransmitComplete(3); }
    3348:	1f 92       	push	r1
    334a:	0f 92       	push	r0
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	0f 92       	push	r0
    3350:	11 24       	eor	r1, r1
    3352:	0b b6       	in	r0, 0x3b	; 59
    3354:	0f 92       	push	r0
    3356:	2f 93       	push	r18
    3358:	3f 93       	push	r19
    335a:	4f 93       	push	r20
    335c:	5f 93       	push	r21
    335e:	6f 93       	push	r22
    3360:	7f 93       	push	r23
    3362:	8f 93       	push	r24
    3364:	9f 93       	push	r25
    3366:	af 93       	push	r26
    3368:	bf 93       	push	r27
    336a:	ef 93       	push	r30
    336c:	ff 93       	push	r31
    336e:	83 e0       	ldi	r24, 0x03	; 3
    3370:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <irTransmitComplete>
    3374:	ff 91       	pop	r31
    3376:	ef 91       	pop	r30
    3378:	bf 91       	pop	r27
    337a:	af 91       	pop	r26
    337c:	9f 91       	pop	r25
    337e:	8f 91       	pop	r24
    3380:	7f 91       	pop	r23
    3382:	6f 91       	pop	r22
    3384:	5f 91       	pop	r21
    3386:	4f 91       	pop	r20
    3388:	3f 91       	pop	r19
    338a:	2f 91       	pop	r18
    338c:	0f 90       	pop	r0
    338e:	0b be       	out	0x3b, r0	; 59
    3390:	0f 90       	pop	r0
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	0f 90       	pop	r0
    3396:	1f 90       	pop	r1
    3398:	18 95       	reti

0000339a <__vector_59>:
ISR( USARTE0_DRE_vect ) { irTransmit(3); }
    339a:	1f 92       	push	r1
    339c:	0f 92       	push	r0
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	0f 92       	push	r0
    33a2:	11 24       	eor	r1, r1
    33a4:	0b b6       	in	r0, 0x3b	; 59
    33a6:	0f 92       	push	r0
    33a8:	2f 93       	push	r18
    33aa:	3f 93       	push	r19
    33ac:	4f 93       	push	r20
    33ae:	5f 93       	push	r21
    33b0:	6f 93       	push	r22
    33b2:	7f 93       	push	r23
    33b4:	8f 93       	push	r24
    33b6:	9f 93       	push	r25
    33b8:	af 93       	push	r26
    33ba:	bf 93       	push	r27
    33bc:	ef 93       	push	r30
    33be:	ff 93       	push	r31
    33c0:	83 e0       	ldi	r24, 0x03	; 3
    33c2:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <irTransmit>
    33c6:	ff 91       	pop	r31
    33c8:	ef 91       	pop	r30
    33ca:	bf 91       	pop	r27
    33cc:	af 91       	pop	r26
    33ce:	9f 91       	pop	r25
    33d0:	8f 91       	pop	r24
    33d2:	7f 91       	pop	r23
    33d4:	6f 91       	pop	r22
    33d6:	5f 91       	pop	r21
    33d8:	4f 91       	pop	r20
    33da:	3f 91       	pop	r19
    33dc:	2f 91       	pop	r18
    33de:	0f 90       	pop	r0
    33e0:	0b be       	out	0x3b, r0	; 59
    33e2:	0f 90       	pop	r0
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	0f 90       	pop	r0
    33e8:	1f 90       	pop	r1
    33ea:	18 95       	reti

000033ec <__vector_61>:

// ISRs for IR channel 4
ISR( USARTE1_RXC_vect ) { irReceive(4); }
    33ec:	1f 92       	push	r1
    33ee:	0f 92       	push	r0
    33f0:	0f b6       	in	r0, 0x3f	; 63
    33f2:	0f 92       	push	r0
    33f4:	11 24       	eor	r1, r1
    33f6:	0b b6       	in	r0, 0x3b	; 59
    33f8:	0f 92       	push	r0
    33fa:	2f 93       	push	r18
    33fc:	3f 93       	push	r19
    33fe:	4f 93       	push	r20
    3400:	5f 93       	push	r21
    3402:	6f 93       	push	r22
    3404:	7f 93       	push	r23
    3406:	8f 93       	push	r24
    3408:	9f 93       	push	r25
    340a:	af 93       	push	r26
    340c:	bf 93       	push	r27
    340e:	ef 93       	push	r30
    3410:	ff 93       	push	r31
    3412:	84 e0       	ldi	r24, 0x04	; 4
    3414:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <irReceive>
    3418:	ff 91       	pop	r31
    341a:	ef 91       	pop	r30
    341c:	bf 91       	pop	r27
    341e:	af 91       	pop	r26
    3420:	9f 91       	pop	r25
    3422:	8f 91       	pop	r24
    3424:	7f 91       	pop	r23
    3426:	6f 91       	pop	r22
    3428:	5f 91       	pop	r21
    342a:	4f 91       	pop	r20
    342c:	3f 91       	pop	r19
    342e:	2f 91       	pop	r18
    3430:	0f 90       	pop	r0
    3432:	0b be       	out	0x3b, r0	; 59
    3434:	0f 90       	pop	r0
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	0f 90       	pop	r0
    343a:	1f 90       	pop	r1
    343c:	18 95       	reti

0000343e <__vector_63>:
ISR( USARTE1_TXC_vect ) { irTransmitComplete(4); }
    343e:	1f 92       	push	r1
    3440:	0f 92       	push	r0
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	0f 92       	push	r0
    3446:	11 24       	eor	r1, r1
    3448:	0b b6       	in	r0, 0x3b	; 59
    344a:	0f 92       	push	r0
    344c:	2f 93       	push	r18
    344e:	3f 93       	push	r19
    3450:	4f 93       	push	r20
    3452:	5f 93       	push	r21
    3454:	6f 93       	push	r22
    3456:	7f 93       	push	r23
    3458:	8f 93       	push	r24
    345a:	9f 93       	push	r25
    345c:	af 93       	push	r26
    345e:	bf 93       	push	r27
    3460:	ef 93       	push	r30
    3462:	ff 93       	push	r31
    3464:	84 e0       	ldi	r24, 0x04	; 4
    3466:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <irTransmitComplete>
    346a:	ff 91       	pop	r31
    346c:	ef 91       	pop	r30
    346e:	bf 91       	pop	r27
    3470:	af 91       	pop	r26
    3472:	9f 91       	pop	r25
    3474:	8f 91       	pop	r24
    3476:	7f 91       	pop	r23
    3478:	6f 91       	pop	r22
    347a:	5f 91       	pop	r21
    347c:	4f 91       	pop	r20
    347e:	3f 91       	pop	r19
    3480:	2f 91       	pop	r18
    3482:	0f 90       	pop	r0
    3484:	0b be       	out	0x3b, r0	; 59
    3486:	0f 90       	pop	r0
    3488:	0f be       	out	0x3f, r0	; 63
    348a:	0f 90       	pop	r0
    348c:	1f 90       	pop	r1
    348e:	18 95       	reti

00003490 <__vector_62>:
ISR( USARTE1_DRE_vect ) { irTransmit(4); }
    3490:	1f 92       	push	r1
    3492:	0f 92       	push	r0
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	0f 92       	push	r0
    3498:	11 24       	eor	r1, r1
    349a:	0b b6       	in	r0, 0x3b	; 59
    349c:	0f 92       	push	r0
    349e:	2f 93       	push	r18
    34a0:	3f 93       	push	r19
    34a2:	4f 93       	push	r20
    34a4:	5f 93       	push	r21
    34a6:	6f 93       	push	r22
    34a8:	7f 93       	push	r23
    34aa:	8f 93       	push	r24
    34ac:	9f 93       	push	r25
    34ae:	af 93       	push	r26
    34b0:	bf 93       	push	r27
    34b2:	ef 93       	push	r30
    34b4:	ff 93       	push	r31
    34b6:	84 e0       	ldi	r24, 0x04	; 4
    34b8:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <irTransmit>
    34bc:	ff 91       	pop	r31
    34be:	ef 91       	pop	r30
    34c0:	bf 91       	pop	r27
    34c2:	af 91       	pop	r26
    34c4:	9f 91       	pop	r25
    34c6:	8f 91       	pop	r24
    34c8:	7f 91       	pop	r23
    34ca:	6f 91       	pop	r22
    34cc:	5f 91       	pop	r21
    34ce:	4f 91       	pop	r20
    34d0:	3f 91       	pop	r19
    34d2:	2f 91       	pop	r18
    34d4:	0f 90       	pop	r0
    34d6:	0b be       	out	0x3b, r0	; 59
    34d8:	0f 90       	pop	r0
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	0f 90       	pop	r0
    34de:	1f 90       	pop	r1
    34e0:	18 95       	reti

000034e2 <__vector_119>:

// ISRs for IR channel 5
ISR( USARTF0_RXC_vect ) { irReceive(5); }
    34e2:	1f 92       	push	r1
    34e4:	0f 92       	push	r0
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	0f 92       	push	r0
    34ea:	11 24       	eor	r1, r1
    34ec:	0b b6       	in	r0, 0x3b	; 59
    34ee:	0f 92       	push	r0
    34f0:	2f 93       	push	r18
    34f2:	3f 93       	push	r19
    34f4:	4f 93       	push	r20
    34f6:	5f 93       	push	r21
    34f8:	6f 93       	push	r22
    34fa:	7f 93       	push	r23
    34fc:	8f 93       	push	r24
    34fe:	9f 93       	push	r25
    3500:	af 93       	push	r26
    3502:	bf 93       	push	r27
    3504:	ef 93       	push	r30
    3506:	ff 93       	push	r31
    3508:	85 e0       	ldi	r24, 0x05	; 5
    350a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <irReceive>
    350e:	ff 91       	pop	r31
    3510:	ef 91       	pop	r30
    3512:	bf 91       	pop	r27
    3514:	af 91       	pop	r26
    3516:	9f 91       	pop	r25
    3518:	8f 91       	pop	r24
    351a:	7f 91       	pop	r23
    351c:	6f 91       	pop	r22
    351e:	5f 91       	pop	r21
    3520:	4f 91       	pop	r20
    3522:	3f 91       	pop	r19
    3524:	2f 91       	pop	r18
    3526:	0f 90       	pop	r0
    3528:	0b be       	out	0x3b, r0	; 59
    352a:	0f 90       	pop	r0
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	0f 90       	pop	r0
    3530:	1f 90       	pop	r1
    3532:	18 95       	reti

00003534 <__vector_121>:
ISR( USARTF0_TXC_vect ) { irTransmitComplete(5); }
    3534:	1f 92       	push	r1
    3536:	0f 92       	push	r0
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	0f 92       	push	r0
    353c:	11 24       	eor	r1, r1
    353e:	0b b6       	in	r0, 0x3b	; 59
    3540:	0f 92       	push	r0
    3542:	2f 93       	push	r18
    3544:	3f 93       	push	r19
    3546:	4f 93       	push	r20
    3548:	5f 93       	push	r21
    354a:	6f 93       	push	r22
    354c:	7f 93       	push	r23
    354e:	8f 93       	push	r24
    3550:	9f 93       	push	r25
    3552:	af 93       	push	r26
    3554:	bf 93       	push	r27
    3556:	ef 93       	push	r30
    3558:	ff 93       	push	r31
    355a:	85 e0       	ldi	r24, 0x05	; 5
    355c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <irTransmitComplete>
    3560:	ff 91       	pop	r31
    3562:	ef 91       	pop	r30
    3564:	bf 91       	pop	r27
    3566:	af 91       	pop	r26
    3568:	9f 91       	pop	r25
    356a:	8f 91       	pop	r24
    356c:	7f 91       	pop	r23
    356e:	6f 91       	pop	r22
    3570:	5f 91       	pop	r21
    3572:	4f 91       	pop	r20
    3574:	3f 91       	pop	r19
    3576:	2f 91       	pop	r18
    3578:	0f 90       	pop	r0
    357a:	0b be       	out	0x3b, r0	; 59
    357c:	0f 90       	pop	r0
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	0f 90       	pop	r0
    3582:	1f 90       	pop	r1
    3584:	18 95       	reti

00003586 <__vector_120>:
ISR( USARTF0_DRE_vect ) { irTransmit(5); }
    3586:	1f 92       	push	r1
    3588:	0f 92       	push	r0
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	0f 92       	push	r0
    358e:	11 24       	eor	r1, r1
    3590:	0b b6       	in	r0, 0x3b	; 59
    3592:	0f 92       	push	r0
    3594:	2f 93       	push	r18
    3596:	3f 93       	push	r19
    3598:	4f 93       	push	r20
    359a:	5f 93       	push	r21
    359c:	6f 93       	push	r22
    359e:	7f 93       	push	r23
    35a0:	8f 93       	push	r24
    35a2:	9f 93       	push	r25
    35a4:	af 93       	push	r26
    35a6:	bf 93       	push	r27
    35a8:	ef 93       	push	r30
    35aa:	ff 93       	push	r31
    35ac:	85 e0       	ldi	r24, 0x05	; 5
    35ae:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <irTransmit>
    35b2:	ff 91       	pop	r31
    35b4:	ef 91       	pop	r30
    35b6:	bf 91       	pop	r27
    35b8:	af 91       	pop	r26
    35ba:	9f 91       	pop	r25
    35bc:	8f 91       	pop	r24
    35be:	7f 91       	pop	r23
    35c0:	6f 91       	pop	r22
    35c2:	5f 91       	pop	r21
    35c4:	4f 91       	pop	r20
    35c6:	3f 91       	pop	r19
    35c8:	2f 91       	pop	r18
    35ca:	0f 90       	pop	r0
    35cc:	0b be       	out	0x3b, r0	; 59
    35ce:	0f 90       	pop	r0
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	0f 90       	pop	r0
    35d4:	1f 90       	pop	r1
    35d6:	18 95       	reti

000035d8 <irLedInit>:
static uint8_t tx_pins[6] = {PIN3_bm, PIN7_bm, PIN3_bm, PIN3_bm, PIN7_bm, PIN3_bm};
static PORT_t* uart_ch[6] = {&PORTC, &PORTC, &PORTD, &PORTE, &PORTE, &PORTF};
static uint8_t saved_usart_ctrlb_vals[6] = {0,0,0,0,0,0};

void irLedInit()
{
    35d8:	cf 93       	push	r28
    35da:	df 93       	push	r29
	/* Initialize carrier waves */
	PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;
    35dc:	a0 ea       	ldi	r26, 0xA0	; 160
    35de:	b6 e0       	ldi	r27, 0x06	; 6
    35e0:	93 ef       	ldi	r25, 0xF3	; 243
    35e2:	11 96       	adiw	r26, 0x01	; 1
    35e4:	9c 93       	st	X, r25
    35e6:	11 97       	sbiw	r26, 0x01	; 1
	
	TCF2.CTRLE = TC2_BYTEM_SPLITMODE_gc;		// "split mode" puts this timer counter into "Type 2 mode"
    35e8:	e0 e0       	ldi	r30, 0x00	; 0
    35ea:	fb e0       	ldi	r31, 0x0B	; 11
    35ec:	82 e0       	ldi	r24, 0x02	; 2
    35ee:	84 83       	std	Z+4, r24	; 0x04
	TCF2.CTRLA |= TC2_CLKSEL_DIV4_gc;		// see CTRLA description in TC2 mode
    35f0:	80 81       	ld	r24, Z
    35f2:	83 60       	ori	r24, 0x03	; 3
    35f4:	80 83       	st	Z, r24
	
	TCF2.HPER = 211; TCF2.LPER = 211; // 32MHz / (4 * 211) = 38kHz
    35f6:	83 ed       	ldi	r24, 0xD3	; 211
    35f8:	87 a3       	std	Z+39, r24	; 0x27
    35fa:	86 a3       	std	Z+38, r24	; 0x26
	TCF2.HCMPA = 105; TCF2.HCMPB = 105; TCF2.HCMPC = 105; // 50% Duty Cycle
    35fc:	89 e6       	ldi	r24, 0x69	; 105
    35fe:	81 a7       	std	Z+41, r24	; 0x29
    3600:	83 a7       	std	Z+43, r24	; 0x2b
    3602:	85 a7       	std	Z+45, r24	; 0x2d
	TCF2.HCMPD = 105; TCF2.LCMPA = 105; TCF2.LCMPB = 105; // 50% Duty Cycle
    3604:	87 a7       	std	Z+47, r24	; 0x2f
    3606:	80 a7       	std	Z+40, r24	; 0x28
    3608:	82 a7       	std	Z+42, r24	; 0x2a
	TCF2.CTRLB = ALL_EMITTERS_CARWAV_bm;	// Set TC outputs on carrier wave pins (see CTRLA description in TC2 mode)
    360a:	91 83       	std	Z+1, r25	; 0x01

	// TX pins as outputs:
	PORTC.DIRSET = PIN3_bm | PIN7_bm;		// DIR 0,1
    360c:	c0 e4       	ldi	r28, 0x40	; 64
    360e:	d6 e0       	ldi	r29, 0x06	; 6
    3610:	98 e8       	ldi	r25, 0x88	; 136
    3612:	99 83       	std	Y+1, r25	; 0x01
	PORTD.DIRSET = PIN3_bm;					// DIR 2
    3614:	20 e6       	ldi	r18, 0x60	; 96
    3616:	36 e0       	ldi	r19, 0x06	; 6
    3618:	88 e0       	ldi	r24, 0x08	; 8
    361a:	f9 01       	movw	r30, r18
    361c:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN3_bm | PIN7_bm;		// DIR 3,4
    361e:	40 e8       	ldi	r20, 0x80	; 128
    3620:	56 e0       	ldi	r21, 0x06	; 6
    3622:	fa 01       	movw	r30, r20
    3624:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = PIN3_bm;					// DIR 5
    3626:	11 96       	adiw	r26, 0x01	; 1
    3628:	8c 93       	st	X, r24
    362a:	11 97       	sbiw	r26, 0x01	; 1
	
	PORTC.OUTCLR = (PIN3_bm | PIN7_bm);
    362c:	9e 83       	std	Y+6, r25	; 0x06
	PORTD.OUTCLR = PIN3_bm;
    362e:	f9 01       	movw	r30, r18
    3630:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = (PIN3_bm | PIN7_bm);
    3632:	fa 01       	movw	r30, r20
    3634:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = PIN3_bm;
    3636:	16 96       	adiw	r26, 0x06	; 6
    3638:	8c 93       	st	X, r24
    363a:	16 97       	sbiw	r26, 0x06	; 6
		
	// Invert the output pins:
	PORTC.PIN3CTRL = PORT_INVEN_bm;
    363c:	80 e4       	ldi	r24, 0x40	; 64
    363e:	8b 8b       	std	Y+19, r24	; 0x13
	PORTC.PIN7CTRL = PORT_INVEN_bm;
    3640:	8f 8b       	std	Y+23, r24	; 0x17
	PORTD.PIN3CTRL = PORT_INVEN_bm;
    3642:	f9 01       	movw	r30, r18
    3644:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN3CTRL = PORT_INVEN_bm;
    3646:	fa 01       	movw	r30, r20
    3648:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN7CTRL = PORT_INVEN_bm;
    364a:	87 8b       	std	Z+23, r24	; 0x17
	PORTF.PIN3CTRL = PORT_INVEN_bm;
    364c:	53 96       	adiw	r26, 0x13	; 19
    364e:	8c 93       	st	X, r24
	
}
    3650:	df 91       	pop	r29
    3652:	cf 91       	pop	r28
    3654:	08 95       	ret

00003656 <irLedOn>:

void irLedOn(uint8_t direction)
{
    3656:	cf 93       	push	r28
    3658:	df 93       	push	r29
	//Turning on the light.
	saved_usart_ctrlb_vals[direction]	  = channel[direction]->CTRLB;	// record the current state of the USART
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	9c 01       	movw	r18, r24
    365e:	22 0f       	add	r18, r18
    3660:	33 1f       	adc	r19, r19
    3662:	f9 01       	movw	r30, r18
    3664:	ea 5f       	subi	r30, 0xFA	; 250
    3666:	ff 4d       	sbci	r31, 0xDF	; 223
    3668:	a0 81       	ld	r26, Z
    366a:	b1 81       	ldd	r27, Z+1	; 0x01
    366c:	14 96       	adiw	r26, 0x04	; 4
    366e:	4c 91       	ld	r20, X
    3670:	14 97       	sbiw	r26, 0x04	; 4
    3672:	fc 01       	movw	r30, r24
    3674:	e2 55       	subi	r30, 0x52	; 82
    3676:	fd 4d       	sbci	r31, 0xDD	; 221
    3678:	40 83       	st	Z, r20
	TCF2.CTRLB			 &= ~carrier_wave_pins[direction];	// disable carrier wave output
    367a:	e0 e0       	ldi	r30, 0x00	; 0
    367c:	fb e0       	ldi	r31, 0x0B	; 11
    367e:	41 81       	ldd	r20, Z+1	; 0x01
    3680:	ec 01       	movw	r28, r24
    3682:	c7 55       	subi	r28, 0x57	; 87
    3684:	df 4d       	sbci	r29, 0xDF	; 223
    3686:	58 81       	ld	r21, Y
    3688:	65 2f       	mov	r22, r21
    368a:	60 95       	com	r22
    368c:	46 23       	and	r20, r22
    368e:	41 83       	std	Z+1, r20	; 0x01
	PORTF.DIRSET		  =  carrier_wave_pins[direction];	// enable user output on this pin
    3690:	e0 ea       	ldi	r30, 0xA0	; 160
    3692:	f6 e0       	ldi	r31, 0x06	; 6
    3694:	51 83       	std	Z+1, r21	; 0x01
	PORTF.OUT			 |=  carrier_wave_pins[direction];	// high signal on this pin
    3696:	44 81       	ldd	r20, Z+4	; 0x04
    3698:	45 2b       	or	r20, r21
    369a:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB  	  =  0;					// disable USART
    369c:	14 96       	adiw	r26, 0x04	; 4
    369e:	1c 92       	st	X, r1
	uart_ch[direction]->DIRSET =  tx_pins[direction];			// enable user output on this pin
    36a0:	f9 01       	movw	r30, r18
    36a2:	e9 56       	subi	r30, 0x69	; 105
    36a4:	ff 4d       	sbci	r31, 0xDF	; 223
    36a6:	01 90       	ld	r0, Z+
    36a8:	f0 81       	ld	r31, Z
    36aa:	e0 2d       	mov	r30, r0
    36ac:	dc 01       	movw	r26, r24
    36ae:	ad 55       	subi	r26, 0x5D	; 93
    36b0:	bf 4d       	sbci	r27, 0xDF	; 223
    36b2:	8c 91       	ld	r24, X
    36b4:	81 83       	std	Z+1, r24	; 0x01
	uart_ch[direction]->OUT	 &= ~tx_pins[direction];			// low signal on TX pin (remember: these pins were inverted during init)
    36b6:	94 81       	ldd	r25, Z+4	; 0x04
    36b8:	80 95       	com	r24
    36ba:	89 23       	and	r24, r25
    36bc:	84 83       	std	Z+4, r24	; 0x04

}
    36be:	df 91       	pop	r29
    36c0:	cf 91       	pop	r28
    36c2:	08 95       	ret

000036c4 <irLedOff>:

void irLedOff(uint8_t direction)
{
	//Turning off the light.
	uart_ch[direction]->OUT  |=  tx_pins[direction];			// high signal on TX pin (turns IR blast OFF)
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	9c 01       	movw	r18, r24
    36c8:	22 0f       	add	r18, r18
    36ca:	33 1f       	adc	r19, r19
    36cc:	f9 01       	movw	r30, r18
    36ce:	e9 56       	subi	r30, 0x69	; 105
    36d0:	ff 4d       	sbci	r31, 0xDF	; 223
    36d2:	01 90       	ld	r0, Z+
    36d4:	f0 81       	ld	r31, Z
    36d6:	e0 2d       	mov	r30, r0
    36d8:	54 81       	ldd	r21, Z+4	; 0x04
    36da:	dc 01       	movw	r26, r24
    36dc:	ad 55       	subi	r26, 0x5D	; 93
    36de:	bf 4d       	sbci	r27, 0xDF	; 223
    36e0:	4c 91       	ld	r20, X
    36e2:	45 2b       	or	r20, r21
    36e4:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB	 =  saved_usart_ctrlb_vals[direction];	// re-enable USART (restore settings as it was before)
    36e6:	f9 01       	movw	r30, r18
    36e8:	ea 5f       	subi	r30, 0xFA	; 250
    36ea:	ff 4d       	sbci	r31, 0xDF	; 223
    36ec:	01 90       	ld	r0, Z+
    36ee:	f0 81       	ld	r31, Z
    36f0:	e0 2d       	mov	r30, r0
    36f2:	dc 01       	movw	r26, r24
    36f4:	a2 55       	subi	r26, 0x52	; 82
    36f6:	bd 4d       	sbci	r27, 0xDD	; 221
    36f8:	2c 91       	ld	r18, X
    36fa:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT			&= ~carrier_wave_pins[direction];	// low signal on the carrier wave pin, just in casies.
    36fc:	e0 ea       	ldi	r30, 0xA0	; 160
    36fe:	f6 e0       	ldi	r31, 0x06	; 6
    3700:	24 81       	ldd	r18, Z+4	; 0x04
    3702:	dc 01       	movw	r26, r24
    3704:	a7 55       	subi	r26, 0x57	; 87
    3706:	bf 4d       	sbci	r27, 0xDF	; 223
    3708:	3c 91       	ld	r19, X
    370a:	93 2f       	mov	r25, r19
    370c:	90 95       	com	r25
    370e:	92 23       	and	r25, r18
    3710:	94 83       	std	Z+4, r25	; 0x04
	TCF2.CTRLB			|=  carrier_wave_pins[direction];	// re-enable carrier wave output
    3712:	e0 e0       	ldi	r30, 0x00	; 0
    3714:	fb e0       	ldi	r31, 0x0B	; 11
    3716:	81 81       	ldd	r24, Z+1	; 0x01
    3718:	83 2b       	or	r24, r19
    371a:	81 83       	std	Z+1, r24	; 0x01
    371c:	08 95       	ret

0000371e <setAllirPowers>:
}

void setAllirPowers(volatile uint16_t power){
    371e:	1f 93       	push	r17
    3720:	cf 93       	push	r28
    3722:	df 93       	push	r29
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    3728:	2f 97       	sbiw	r28, 0x0f	; 15
    372a:	cd bf       	out	0x3d, r28	; 61
    372c:	de bf       	out	0x3e, r29	; 62
    372e:	8e 87       	std	Y+14, r24	; 0x0e
    3730:	9f 87       	std	Y+15, r25	; 0x0f
	if(power>256) return;
    3732:	8e 85       	ldd	r24, Y+14	; 0x0e
    3734:	9f 85       	ldd	r25, Y+15	; 0x0f
    3736:	81 30       	cpi	r24, 0x01	; 1
    3738:	91 40       	sbci	r25, 0x01	; 1
    373a:	68 f5       	brcc	.+90     	; 0x3796 <setAllirPowers+0x78>
	if(curr_ir_power==power) return;
    373c:	8e 85       	ldd	r24, Y+14	; 0x0e
    373e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3740:	20 91 24 26 	lds	r18, 0x2624	; 0x802624 <curr_ir_power>
    3744:	30 91 25 26 	lds	r19, 0x2625	; 0x802625 <curr_ir_power+0x1>
    3748:	28 17       	cp	r18, r24
    374a:	39 07       	cpc	r19, r25
    374c:	21 f1       	breq	.+72     	; 0x3796 <setAllirPowers+0x78>
	uint8_t power_high = (power>>8);
    374e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3750:	3f 85       	ldd	r19, Y+15	; 0x0f
	uint8_t power_low = (power&0xFF);
    3752:	8e 85       	ldd	r24, Y+14	; 0x0e
    3754:	9f 85       	ldd	r25, Y+15	; 0x0f
	uint8_t write_buffer[6] = {power_high,power_low,0x10|power_high,power_low,0x60|power_high, power_low};
    3756:	38 87       	std	Y+8, r19	; 0x08
    3758:	89 87       	std	Y+9, r24	; 0x09
    375a:	93 2f       	mov	r25, r19
    375c:	90 61       	ori	r25, 0x10	; 16
    375e:	9a 87       	std	Y+10, r25	; 0x0a
    3760:	8b 87       	std	Y+11, r24	; 0x0b
    3762:	93 2f       	mov	r25, r19
    3764:	90 66       	ori	r25, 0x60	; 96
    3766:	9c 87       	std	Y+12, r25	; 0x0c
    3768:	8d 87       	std	Y+13, r24	; 0x0d
	
	uint8_t aResult = 0;
	uint8_t bResult = 0;
	char callerDescr[7] = "Set IR\0";
    376a:	87 e0       	ldi	r24, 0x07	; 7
    376c:	e0 e9       	ldi	r30, 0x90	; 144
    376e:	f0 e2       	ldi	r31, 0x20	; 32
    3770:	de 01       	movw	r26, r28
    3772:	11 96       	adiw	r26, 0x01	; 1
    3774:	01 90       	ld	r0, Z+
    3776:	0d 92       	st	X+, r0
    3778:	8a 95       	dec	r24
    377a:	e1 f7       	brne	.-8      	; 0x3774 <setAllirPowers+0x56>
	aResult = twiWriteWrapper(IR_POWER_ADDR_A, write_buffer, 6, callerDescr);
    377c:	9e 01       	movw	r18, r28
    377e:	2f 5f       	subi	r18, 0xFF	; 255
    3780:	3f 4f       	sbci	r19, 0xFF	; 255
    3782:	46 e0       	ldi	r20, 0x06	; 6
    3784:	be 01       	movw	r22, r28
    3786:	68 5f       	subi	r22, 0xF8	; 248
    3788:	7f 4f       	sbci	r23, 0xFF	; 255
    378a:	8c e2       	ldi	r24, 0x2C	; 44
    378c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <twiWriteWrapper>
    3790:	18 2f       	mov	r17, r24
	if(!aResult){
    3792:	81 11       	cpse	r24, r1
    3794:	07 c0       	rjmp	.+14     	; 0x37a4 <setAllirPowers+0x86>
	
	if((aResult+bResult)>2){
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
	}
	curr_ir_power = power;
}
    3796:	2f 96       	adiw	r28, 0x0f	; 15
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	de bf       	out	0x3e, r29	; 62
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	1f 91       	pop	r17
    37a2:	08 95       	ret
	char callerDescr[7] = "Set IR\0";
	aResult = twiWriteWrapper(IR_POWER_ADDR_A, write_buffer, 6, callerDescr);
	if(!aResult){
		return;
	}
	bResult = twiWriteWrapper(IR_POWER_ADDR_B, write_buffer, 6, callerDescr);
    37a4:	9e 01       	movw	r18, r28
    37a6:	2f 5f       	subi	r18, 0xFF	; 255
    37a8:	3f 4f       	sbci	r19, 0xFF	; 255
    37aa:	46 e0       	ldi	r20, 0x06	; 6
    37ac:	be 01       	movw	r22, r28
    37ae:	68 5f       	subi	r22, 0xF8	; 248
    37b0:	7f 4f       	sbci	r23, 0xFF	; 255
    37b2:	8e e2       	ldi	r24, 0x2E	; 46
    37b4:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <twiWriteWrapper>
	if(!bResult){
    37b8:	88 23       	and	r24, r24
    37ba:	69 f3       	breq	.-38     	; 0x3796 <setAllirPowers+0x78>
		return;
	}
	
	if((aResult+bResult)>2){
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	81 0f       	add	r24, r17
    37c0:	91 1d       	adc	r25, r1
    37c2:	02 97       	sbiw	r24, 0x02	; 2
    37c4:	41 f0       	breq	.+16     	; 0x37d6 <setAllirPowers+0xb8>
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
    37c6:	85 eb       	ldi	r24, 0xB5	; 181
    37c8:	96 e0       	ldi	r25, 0x06	; 6
    37ca:	9f 93       	push	r25
    37cc:	8f 93       	push	r24
    37ce:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
	}
	curr_ir_power = power;
    37d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    37d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    37da:	80 93 24 26 	sts	0x2624, r24	; 0x802624 <curr_ir_power>
    37de:	90 93 25 26 	sts	0x2625, r25	; 0x802625 <curr_ir_power+0x1>
    37e2:	d9 cf       	rjmp	.-78     	; 0x3796 <setAllirPowers+0x78>

000037e4 <irSensorInit>:
		
		//ADCA.EVCTRL = ADC_EVSEL_1234_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
		//ADCB.EVCTRL = ADC_EVSEL_567_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
	#else
		/* SET INPUT PINS AS INPUTS */
		IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    37e4:	e0 e2       	ldi	r30, 0x20	; 32
    37e6:	f6 e0       	ldi	r31, 0x06	; 6
    37e8:	8c ef       	ldi	r24, 0xFC	; 252
    37ea:	82 83       	std	Z+2, r24	; 0x02
		
		PORTB.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    37ec:	87 e0       	ldi	r24, 0x07	; 7
    37ee:	85 8b       	std	Z+21, r24	; 0x15
		PORTB.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    37f0:	86 8b       	std	Z+22, r24	; 0x16
		PORTB.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    37f2:	87 8b       	std	Z+23, r24	; 0x17
		PORTB.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    37f4:	84 8b       	std	Z+20, r24	; 0x14
		PORTB.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    37f6:	82 8b       	std	Z+18, r24	; 0x12
		PORTB.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    37f8:	83 8b       	std	Z+19, r24	; 0x13

		ADCB.REFCTRL = ADC_REFSEL_AREFA_gc;
    37fa:	e0 e4       	ldi	r30, 0x40	; 64
    37fc:	f2 e0       	ldi	r31, 0x02	; 2
    37fe:	90 e2       	ldi	r25, 0x20	; 32
    3800:	92 83       	std	Z+2, r25	; 0x02
		ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; //12bit resolution, and sets it to signed mode.
    3802:	90 e1       	ldi	r25, 0x10	; 16
    3804:	91 83       	std	Z+1, r25	; 0x01
		ADCB.PRESCALER = ADC_PRESCALER_DIV512_gc;
    3806:	84 83       	std	Z+4, r24	; 0x04
		ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN2_bm;	// differential input. requires signed mode (see sec. 28.6 in manual)
    3808:	83 e1       	ldi	r24, 0x13	; 19
    380a:	80 a3       	std	Z+32, r24	; 0x20
		ADCB.CH0.MUXCTRL = ADC_CH_MUXNEG_INTGND_MODE4_gc;	// use VREF_IN for the negative input (0.54 V)
    380c:	84 e0       	ldi	r24, 0x04	; 4
    380e:	81 a3       	std	Z+33, r24	; 0x21
		ADCB.CALL = PRODSIGNATURES_ADCBCAL0;
    3810:	84 b5       	in	r24, 0x24	; 36
    3812:	84 87       	std	Z+12, r24	; 0x0c
		ADCB.CALH = PRODSIGNATURES_ADCBCAL1;
    3814:	85 b5       	in	r24, 0x25	; 37
    3816:	85 87       	std	Z+13, r24	; 0x0d
		ADCB.CTRLA = ADC_ENABLE_bm;
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	80 83       	st	Z, r24
	#endif
	
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir]=0;
    381c:	e4 eb       	ldi	r30, 0xB4	; 180
    381e:	f2 e2       	ldi	r31, 0x22	; 34
    3820:	10 82       	st	Z, r1
    3822:	11 82       	std	Z+1, r1	; 0x01
    3824:	12 82       	std	Z+2, r1	; 0x02
    3826:	13 82       	std	Z+3, r1	; 0x03
    3828:	14 82       	std	Z+4, r1	; 0x04
    382a:	15 82       	std	Z+5, r1	; 0x05
    382c:	16 82       	std	Z+6, r1	; 0x06
    382e:	17 82       	std	Z+7, r1	; 0x07
    3830:	10 86       	std	Z+8, r1	; 0x08
    3832:	11 86       	std	Z+9, r1	; 0x09
    3834:	12 86       	std	Z+10, r1	; 0x0a
    3836:	13 86       	std	Z+11, r1	; 0x0b
	}
	scheduleTask(1000,initIrBaselines,NULL);
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	45 ee       	ldi	r20, 0xE5	; 229
    383e:	5c e1       	ldi	r21, 0x1C	; 28
    3840:	68 ee       	ldi	r22, 0xE8	; 232
    3842:	73 e0       	ldi	r23, 0x03	; 3
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <scheduleTask>
	schedulePeriodicTask(5407, updateIrBaselines, NULL);
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	4a ee       	ldi	r20, 0xEA	; 234
    3852:	5c e1       	ldi	r21, 0x1C	; 28
    3854:	6f e1       	ldi	r22, 0x1F	; 31
    3856:	75 e1       	ldi	r23, 0x15	; 21
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	0e 94 83 35 	call	0x6b06	; 0x6b06 <schedulePeriodicTask>
    3860:	08 95       	ret

00003862 <getIrSensors>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		hpIrBlock_bm = 0;
	}
}

void getIrSensors(int16_t* output_arr, uint8_t meas_per_ch){			
    3862:	2f 92       	push	r2
    3864:	3f 92       	push	r3
    3866:	4f 92       	push	r4
    3868:	5f 92       	push	r5
    386a:	6f 92       	push	r6
    386c:	7f 92       	push	r7
    386e:	8f 92       	push	r8
    3870:	9f 92       	push	r9
    3872:	af 92       	push	r10
    3874:	bf 92       	push	r11
    3876:	cf 92       	push	r12
    3878:	df 92       	push	r13
    387a:	ef 92       	push	r14
    387c:	ff 92       	push	r15
    387e:	0f 93       	push	r16
    3880:	1f 93       	push	r17
    3882:	cf 93       	push	r28
    3884:	df 93       	push	r29
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
    388a:	36 2e       	mov	r3, r22
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    388c:	4d b6       	in	r4, 0x3d	; 61
    388e:	5e b6       	in	r5, 0x3e	; 62
		hpIrBlock_bm = 0;
	}
}

void getIrSensors(int16_t* output_arr, uint8_t meas_per_ch){			
	int16_t meas[6][meas_per_ch];	
    3890:	06 2f       	mov	r16, r22
    3892:	10 e0       	ldi	r17, 0x00	; 0
    3894:	00 0f       	add	r16, r16
    3896:	11 1f       	adc	r17, r17
    3898:	2d b7       	in	r18, 0x3d	; 61
    389a:	3e b7       	in	r19, 0x3e	; 62
    389c:	4c e0       	ldi	r20, 0x0C	; 12
    389e:	64 9f       	mul	r22, r20
    38a0:	20 19       	sub	r18, r0
    38a2:	31 09       	sbc	r19, r1
    38a4:	11 24       	eor	r1, r1
    38a6:	2d bf       	out	0x3d, r18	; 61
    38a8:	3e bf       	out	0x3e, r19	; 62
    38aa:	ed b7       	in	r30, 0x3d	; 61
    38ac:	fe b7       	in	r31, 0x3e	; 62
    38ae:	31 96       	adiw	r30, 0x01	; 1
    38b0:	4f 01       	movw	r8, r30
    38b2:	a0 eb       	ldi	r26, 0xB0	; 176
    38b4:	b0 e2       	ldi	r27, 0x20	; 32
    38b6:	af 01       	movw	r20, r30
    38b8:	68 e2       	ldi	r22, 0x28	; 40
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
					meas[dir][meas_count] = ADCB.CH0RES;
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    38ba:	ee 24       	eor	r14, r14
    38bc:	e3 94       	inc	r14
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    38be:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
    38c2:	37 70       	andi	r19, 0x07	; 7
    38c4:	30 93 61 02 	sts	0x0261, r19	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
    38c8:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
    38cc:	26 2b       	or	r18, r22
    38ce:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    38d2:	33 20       	and	r3, r3
    38d4:	c9 f0       	breq	.+50     	; 0x3908 <getIrSensors+0xa6>
    38d6:	fa 01       	movw	r30, r20
    38d8:	30 e0       	ldi	r19, 0x00	; 0
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    38da:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    38dc:	f8 94       	cli
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
    38de:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>
    38e2:	20 68       	ori	r18, 0x80	; 128
    38e4:	20 93 60 02 	sts	0x0260, r18	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
    38e8:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    38ec:	22 23       	and	r18, r18
    38ee:	e1 f3       	breq	.-8      	; 0x38e8 <getIrSensors+0x86>
					meas[dir][meas_count] = ADCB.CH0RES;
    38f0:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <__TEXT_REGION_LENGTH__+0x700250>
    38f4:	70 91 51 02 	lds	r23, 0x0251	; 0x800251 <__TEXT_REGION_LENGTH__+0x700251>
    38f8:	61 93       	st	Z+, r22
    38fa:	71 93       	st	Z+, r23
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    38fc:	e0 92 63 02 	sts	0x0263, r14	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3900:	ff be       	out	0x3f, r15	; 63
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    3902:	3f 5f       	subi	r19, 0xFF	; 255
    3904:	33 12       	cpse	r3, r19
    3906:	e9 cf       	rjmp	.-46     	; 0x38da <getIrSensors+0x78>
    3908:	40 0f       	add	r20, r16
    390a:	51 1f       	adc	r21, r17
					ir_sense_channels[dir]->INTFLAGS=1;
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
    390c:	f0 e2       	ldi	r31, 0x20	; 32
    390e:	a5 3b       	cpi	r26, 0xB5	; 181
    3910:	bf 07       	cpc	r27, r31
    3912:	11 f0       	breq	.+4      	; 0x3918 <getIrSensors+0xb6>
    3914:	6d 91       	ld	r22, X+
    3916:	d3 cf       	rjmp	.-90     	; 0x38be <getIrSensors+0x5c>
    3918:	54 01       	movw	r10, r8
    391a:	24 e0       	ldi	r18, 0x04	; 4
    391c:	a2 0e       	add	r10, r18
    391e:	b1 1c       	adc	r11, r1
    3920:	24 eb       	ldi	r18, 0xB4	; 180
    3922:	62 2e       	mov	r6, r18
    3924:	22 e2       	ldi	r18, 0x22	; 34
    3926:	72 2e       	mov	r7, r18
    3928:	7c 01       	movw	r14, r24
    392a:	c1 2c       	mov	r12, r1
    392c:	d1 2c       	mov	r13, r1
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++){
		if(meas_per_ch>2){
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
    392e:	3e ef       	ldi	r19, 0xFE	; 254
    3930:	23 2e       	mov	r2, r19
    3932:	23 0c       	add	r2, r3
    3934:	21 c0       	rjmp	.+66     	; 0x3978 <getIrSensors+0x116>
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
    3936:	f2 e0       	ldi	r31, 0x02	; 2
    3938:	3f 16       	cp	r3, r31
    393a:	09 f4       	brne	.+2      	; 0x393e <getIrSensors+0xdc>
    393c:	42 c0       	rjmp	.+132    	; 0x39c2 <getIrSensors+0x160>
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
		else
			output_arr[dir] = meas[dir][0];
    393e:	0c 9d       	mul	r16, r12
    3940:	f0 01       	movw	r30, r0
    3942:	0d 9d       	mul	r16, r13
    3944:	f0 0d       	add	r31, r0
    3946:	1c 9d       	mul	r17, r12
    3948:	f0 0d       	add	r31, r0
    394a:	11 24       	eor	r1, r1
    394c:	e8 0d       	add	r30, r8
    394e:	f9 1d       	adc	r31, r9
    3950:	80 81       	ld	r24, Z
    3952:	91 81       	ldd	r25, Z+1	; 0x01
    3954:	f7 01       	movw	r30, r14
    3956:	80 83       	st	Z, r24
    3958:	91 83       	std	Z+1, r25	; 0x01
    395a:	ff ef       	ldi	r31, 0xFF	; 255
    395c:	cf 1a       	sub	r12, r31
    395e:	df 0a       	sbc	r13, r31
    3960:	a0 0e       	add	r10, r16
    3962:	b1 1e       	adc	r11, r17
    3964:	22 e0       	ldi	r18, 0x02	; 2
    3966:	62 0e       	add	r6, r18
    3968:	71 1c       	adc	r7, r1
    396a:	32 e0       	ldi	r19, 0x02	; 2
    396c:	e3 0e       	add	r14, r19
    396e:	f1 1c       	adc	r15, r1
			}			
		}
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++){
    3970:	46 e0       	ldi	r20, 0x06	; 6
    3972:	c4 16       	cp	r12, r20
    3974:	d1 04       	cpc	r13, r1
    3976:	81 f0       	breq	.+32     	; 0x3998 <getIrSensors+0x136>
		if(meas_per_ch>2){
    3978:	32 e0       	ldi	r19, 0x02	; 2
    397a:	33 15       	cp	r19, r3
    397c:	e0 f6       	brcc	.-72     	; 0x3936 <getIrSensors+0xd4>
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
    397e:	62 2d       	mov	r22, r2
    3980:	c5 01       	movw	r24, r10
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    3982:	0e 94 cc 30 	call	0x6198	; 0x6198 <measFindMedian>
    3986:	f3 01       	movw	r30, r6
    3988:	20 81       	ld	r18, Z
    398a:	31 81       	ldd	r19, Z+1	; 0x01
    398c:	82 1b       	sub	r24, r18
    398e:	93 0b       	sbc	r25, r19
    3990:	f7 01       	movw	r30, r14
    3992:	80 83       	st	Z, r24
    3994:	91 83       	std	Z+1, r25	; 0x01
    3996:	e1 cf       	rjmp	.-62     	; 0x395a <getIrSensors+0xf8>
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    3998:	4d be       	out	0x3d, r4	; 61
    399a:	5e be       	out	0x3e, r5	; 62
    399c:	df 91       	pop	r29
    399e:	cf 91       	pop	r28
    39a0:	1f 91       	pop	r17
    39a2:	0f 91       	pop	r16
    39a4:	ff 90       	pop	r15
    39a6:	ef 90       	pop	r14
    39a8:	df 90       	pop	r13
    39aa:	cf 90       	pop	r12
    39ac:	bf 90       	pop	r11
    39ae:	af 90       	pop	r10
    39b0:	9f 90       	pop	r9
    39b2:	8f 90       	pop	r8
    39b4:	7f 90       	pop	r7
    39b6:	6f 90       	pop	r6
    39b8:	5f 90       	pop	r5
    39ba:	4f 90       	pop	r4
    39bc:	3f 90       	pop	r3
    39be:	2f 90       	pop	r2
    39c0:	08 95       	ret
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    39c2:	61 e0       	ldi	r22, 0x01	; 1
    39c4:	c5 01       	movw	r24, r10
    39c6:	02 97       	sbiw	r24, 0x02	; 2
    39c8:	dc cf       	rjmp	.-72     	; 0x3982 <getIrSensors+0x120>

000039ca <initIrBaselines>:
	scheduleTask(1000,initIrBaselines,NULL);
	schedulePeriodicTask(5407, updateIrBaselines, NULL);
}

void initIrBaselines(){
	getIrSensors(ir_sense_baseline, 13);
    39ca:	6d e0       	ldi	r22, 0x0D	; 13
    39cc:	84 eb       	ldi	r24, 0xB4	; 180
    39ce:	92 e2       	ldi	r25, 0x22	; 34
    39d0:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <getIrSensors>

000039d4 <updateIrBaselines>:
}

void updateIrBaselines(){
    39d4:	ef 92       	push	r14
    39d6:	ff 92       	push	r15
    39d8:	0f 93       	push	r16
    39da:	1f 93       	push	r17
    39dc:	cf 93       	push	r28
    39de:	df 93       	push	r29
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62
    39e4:	2c 97       	sbiw	r28, 0x0c	; 12
    39e6:	cd bf       	out	0x3d, r28	; 61
    39e8:	de bf       	out	0x3e, r29	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    39ea:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    39ec:	f8 94       	cli
		if(irIsBusy(ALL_DIRS)){
    39ee:	8f e3       	ldi	r24, 0x3F	; 63
    39f0:	0e 94 55 12 	call	0x24aa	; 0x24aa <irIsBusy>
    39f4:	81 11       	cpse	r24, r1
    39f6:	35 c0       	rjmp	.+106    	; 0x3a62 <updateIrBaselines+0x8e>
			return;
		}
		hpIrBlock_bm=0x3F;
    39f8:	8f e3       	ldi	r24, 0x3F	; 63
    39fa:	80 93 fd 23 	sts	0x23FD, r24	; 0x8023fd <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    39fe:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    3a00:	8e 01       	movw	r16, r28
    3a02:	0f 5f       	subi	r16, 0xFF	; 255
    3a04:	1f 4f       	sbci	r17, 0xFF	; 255
    3a06:	34 eb       	ldi	r19, 0xB4	; 180
    3a08:	e3 2e       	mov	r14, r19
    3a0a:	32 e2       	ldi	r19, 0x22	; 34
    3a0c:	f3 2e       	mov	r15, r19
    3a0e:	f7 01       	movw	r30, r14
    3a10:	d8 01       	movw	r26, r16
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
    3a12:	80 81       	ld	r24, Z
    3a14:	91 81       	ldd	r25, Z+1	; 0x01
    3a16:	8d 93       	st	X+, r24
    3a18:	9d 93       	st	X+, r25
		ir_sense_baseline[dir] = 0;
    3a1a:	11 92       	st	Z+, r1
    3a1c:	11 92       	st	Z+, r1
			return;
		}
		hpIrBlock_bm=0x3F;
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
    3a1e:	82 e2       	ldi	r24, 0x22	; 34
    3a20:	e0 3c       	cpi	r30, 0xC0	; 192
    3a22:	f8 07       	cpc	r31, r24
    3a24:	b1 f7       	brne	.-20     	; 0x3a12 <updateIrBaselines+0x3e>
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	getIrSensors(ir_sense_baseline, 13);
    3a26:	6d e0       	ldi	r22, 0x0D	; 13
    3a28:	84 eb       	ldi	r24, 0xB4	; 180
    3a2a:	92 e2       	ldi	r25, 0x22	; 34
    3a2c:	0e 94 31 1c 	call	0x3862	; 0x3862 <getIrSensors>
    3a30:	0b c0       	rjmp	.+22     	; 0x3a48 <updateIrBaselines+0x74>
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    3a32:	95 95       	asr	r25
    3a34:	87 95       	ror	r24
    3a36:	f7 01       	movw	r30, r14
    3a38:	81 93       	st	Z+, r24
    3a3a:	91 93       	st	Z+, r25
    3a3c:	7f 01       	movw	r14, r30
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	getIrSensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
    3a3e:	f0 ec       	ldi	r31, 0xC0	; 192
    3a40:	ef 16       	cp	r14, r31
    3a42:	f2 e2       	ldi	r31, 0x22	; 34
    3a44:	ff 06       	cpc	r15, r31
    3a46:	c1 f0       	breq	.+48     	; 0x3a78 <updateIrBaselines+0xa4>
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    3a48:	f8 01       	movw	r30, r16
    3a4a:	21 91       	ld	r18, Z+
    3a4c:	31 91       	ld	r19, Z+
    3a4e:	8f 01       	movw	r16, r30
    3a50:	f7 01       	movw	r30, r14
    3a52:	80 81       	ld	r24, Z
    3a54:	91 81       	ldd	r25, Z+1	; 0x01
    3a56:	82 0f       	add	r24, r18
    3a58:	93 1f       	adc	r25, r19
    3a5a:	97 ff       	sbrs	r25, 7
    3a5c:	ea cf       	rjmp	.-44     	; 0x3a32 <updateIrBaselines+0x5e>
    3a5e:	01 96       	adiw	r24, 0x01	; 1
    3a60:	e8 cf       	rjmp	.-48     	; 0x3a32 <updateIrBaselines+0x5e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3a62:	1f bf       	out	0x3f, r17	; 63
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		hpIrBlock_bm = 0;
	}
}
    3a64:	2c 96       	adiw	r28, 0x0c	; 12
    3a66:	cd bf       	out	0x3d, r28	; 61
    3a68:	de bf       	out	0x3e, r29	; 62
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	ef 90       	pop	r14
    3a76:	08 95       	ret
	}
	getIrSensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3a78:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3a7a:	f8 94       	cli
		hpIrBlock_bm = 0;
    3a7c:	10 92 fd 23 	sts	0x23FD, r1	; 0x8023fd <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3a80:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    3a82:	f0 cf       	rjmp	.-32     	; 0x3a64 <updateIrBaselines+0x90>

00003a84 <checkCollisionValues>:
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
	}
	return dirs;
}

void checkCollisionValues(int16_t meas[6]){
    3a84:	bf 92       	push	r11
    3a86:	cf 92       	push	r12
    3a88:	df 92       	push	r13
    3a8a:	ef 92       	push	r14
    3a8c:	ff 92       	push	r15
    3a8e:	0f 93       	push	r16
    3a90:	1f 93       	push	r17
    3a92:	cf 93       	push	r28
    3a94:	df 93       	push	r29
    3a96:	cd b7       	in	r28, 0x3d	; 61
    3a98:	de b7       	in	r29, 0x3e	; 62
    3a9a:	68 97       	sbiw	r28, 0x18	; 24
    3a9c:	cd bf       	out	0x3d, r28	; 61
    3a9e:	de bf       	out	0x3e, r29	; 62
    3aa0:	b8 2e       	mov	r11, r24
    3aa2:	09 2f       	mov	r16, r25
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	//uint8_t dirs=0;
	if(irIsBusy(ALL_DIRS)){
    3aa4:	8f e3       	ldi	r24, 0x3F	; 63
    3aa6:	0e 94 55 12 	call	0x24aa	; 0x24aa <irIsBusy>
    3aaa:	81 11       	cpse	r24, r1
    3aac:	66 c0       	rjmp	.+204    	; 0x3b7a <checkCollisionValues+0xf6>
		printf_P(PSTR("IR Hardware busy. Can't check collisions.\r\n"));
		return;
	}
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	80 93 b3 24 	sts	0x24B3, r24	; 0x8024b3 <ir_rxtx+0x37>
    3ab4:	80 93 eb 24 	sts	0x24EB, r24	; 0x8024eb <ir_rxtx+0x6f>
    3ab8:	80 93 23 25 	sts	0x2523, r24	; 0x802523 <ir_rxtx+0xa7>
    3abc:	80 93 5b 25 	sts	0x255B, r24	; 0x80255b <ir_rxtx+0xdf>
    3ac0:	80 93 93 25 	sts	0x2593, r24	; 0x802593 <ir_rxtx+0x117>
    3ac4:	80 93 cb 25 	sts	0x25CB, r24	; 0x8025cb <ir_rxtx+0x14f>

void irLedInit(void);
void setAllirPowers(uint16_t power);
void irLedOn(uint8_t direction);
void irLedOff(uint8_t direction);
inline uint16_t getAllirPowers(void){ return curr_ir_power; }
    3ac8:	c0 90 24 26 	lds	r12, 0x2624	; 0x802624 <curr_ir_power>
    3acc:	d0 90 25 26 	lds	r13, 0x2625	; 0x802625 <curr_ir_power+0x1>
	uint16_t curr_power = getAllirPowers();
	setAllirPowers(256);
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	91 e0       	ldi	r25, 0x01	; 1
    3ad4:	0e 94 8f 1b 	call	0x371e	; 0x371e <setAllirPowers>
	getIrSensors(baseline_meas, 5);
    3ad8:	7e 01       	movw	r14, r28
    3ada:	8d e0       	ldi	r24, 0x0D	; 13
    3adc:	e8 0e       	add	r14, r24
    3ade:	f1 1c       	adc	r15, r1
    3ae0:	65 e0       	ldi	r22, 0x05	; 5
    3ae2:	c7 01       	movw	r24, r14
    3ae4:	0e 94 31 1c 	call	0x3862	; 0x3862 <getIrSensors>
	//printf("Coll    base: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", baseline_meas[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOn(i);
    3ae8:	10 e0       	ldi	r17, 0x00	; 0
    3aea:	81 2f       	mov	r24, r17
    3aec:	0e 94 2b 1b 	call	0x3656	; 0x3656 <irLedOn>
    3af0:	1f 5f       	subi	r17, 0xFF	; 255
    3af2:	16 30       	cpi	r17, 0x06	; 6
    3af4:	d1 f7       	brne	.-12     	; 0x3aea <checkCollisionValues+0x66>
    3af6:	af ec       	ldi	r26, 0xCF	; 207
    3af8:	b7 e0       	ldi	r27, 0x07	; 7
    3afa:	11 97       	sbiw	r26, 0x01	; 1
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <checkCollisionValues+0x76>
    3afe:	00 c0       	rjmp	.+0      	; 0x3b00 <checkCollisionValues+0x7c>
    3b00:	00 00       	nop
	delay_us(250);	
	getIrSensors(measured_vals, 5);
    3b02:	65 e0       	ldi	r22, 0x05	; 5
    3b04:	ce 01       	movw	r24, r28
    3b06:	01 96       	adiw	r24, 0x01	; 1
    3b08:	0e 94 31 1c 	call	0x3862	; 0x3862 <getIrSensors>
	//printf("Coll results: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", measured_vals[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOff(i);
    3b0c:	10 e0       	ldi	r17, 0x00	; 0
    3b0e:	81 2f       	mov	r24, r17
    3b10:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <irLedOff>
    3b14:	1f 5f       	subi	r17, 0xFF	; 255
    3b16:	16 30       	cpi	r17, 0x06	; 6
    3b18:	d1 f7       	brne	.-12     	; 0x3b0e <checkCollisionValues+0x8a>
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	31 96       	adiw	r30, 0x01	; 1
    3b1e:	97 01       	movw	r18, r14
    3b20:	6b 2d       	mov	r22, r11
    3b22:	70 2f       	mov	r23, r16
	for(uint8_t i=0;i<6;i++){
		meas[i] = (measured_vals[i]-baseline_meas[i]);
    3b24:	81 91       	ld	r24, Z+
    3b26:	91 91       	ld	r25, Z+
    3b28:	d9 01       	movw	r26, r18
    3b2a:	4d 91       	ld	r20, X+
    3b2c:	5d 91       	ld	r21, X+
    3b2e:	9d 01       	movw	r18, r26
    3b30:	84 1b       	sub	r24, r20
    3b32:	95 0b       	sbc	r25, r21
    3b34:	db 01       	movw	r26, r22
    3b36:	8d 93       	st	X+, r24
    3b38:	9d 93       	st	X+, r25
    3b3a:	bd 01       	movw	r22, r26
	getIrSensors(measured_vals, 5);
	//printf("Coll results: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", measured_vals[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOff(i);
	for(uint8_t i=0;i<6;i++){
    3b3c:	ee 15       	cp	r30, r14
    3b3e:	ff 05       	cpc	r31, r15
    3b40:	89 f7       	brne	.-30     	; 0x3b24 <checkCollisionValues+0xa0>
		meas[i] = (measured_vals[i]-baseline_meas[i]);
	}
	setAllirPowers(curr_power);
    3b42:	c6 01       	movw	r24, r12
    3b44:	0e 94 8f 1b 	call	0x371e	; 0x371e <setAllirPowers>
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = 0;		
    3b48:	10 92 b3 24 	sts	0x24B3, r1	; 0x8024b3 <ir_rxtx+0x37>
    3b4c:	10 92 eb 24 	sts	0x24EB, r1	; 0x8024eb <ir_rxtx+0x6f>
    3b50:	10 92 23 25 	sts	0x2523, r1	; 0x802523 <ir_rxtx+0xa7>
    3b54:	10 92 5b 25 	sts	0x255B, r1	; 0x80255b <ir_rxtx+0xdf>
    3b58:	10 92 93 25 	sts	0x2593, r1	; 0x802593 <ir_rxtx+0x117>
    3b5c:	10 92 cb 25 	sts	0x25CB, r1	; 0x8025cb <ir_rxtx+0x14f>
    3b60:	68 96       	adiw	r28, 0x18	; 24
    3b62:	cd bf       	out	0x3d, r28	; 61
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	df 91       	pop	r29
    3b68:	cf 91       	pop	r28
    3b6a:	1f 91       	pop	r17
    3b6c:	0f 91       	pop	r16
    3b6e:	ff 90       	pop	r15
    3b70:	ef 90       	pop	r14
    3b72:	df 90       	pop	r13
    3b74:	cf 90       	pop	r12
    3b76:	bf 90       	pop	r11
    3b78:	08 95       	ret
void checkCollisionValues(int16_t meas[6]){
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	//uint8_t dirs=0;
	if(irIsBusy(ALL_DIRS)){
		printf_P(PSTR("IR Hardware busy. Can't check collisions.\r\n"));
    3b7a:	8a ee       	ldi	r24, 0xEA	; 234
    3b7c:	96 e0       	ldi	r25, 0x06	; 6
    3b7e:	9f 93       	push	r25
    3b80:	8f 93       	push	r24
    3b82:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
		return;
    3b86:	0f 90       	pop	r0
    3b88:	0f 90       	pop	r0
    3b8a:	ea cf       	rjmp	.-44     	; 0x3b60 <checkCollisionValues+0xdc>

00003b8c <checkCollisions>:
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}

uint8_t checkCollisions(){
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29
    3b90:	cd b7       	in	r28, 0x3d	; 61
    3b92:	de b7       	in	r29, 0x3e	; 62
    3b94:	2c 97       	sbiw	r28, 0x0c	; 12
    3b96:	cd bf       	out	0x3d, r28	; 61
    3b98:	de bf       	out	0x3e, r29	; 62
	int16_t meas[6];
	uint8_t dirs = 0;
	checkCollisionValues(meas);
    3b9a:	ce 01       	movw	r24, r28
    3b9c:	01 96       	adiw	r24, 0x01	; 1
    3b9e:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <checkCollisionValues>
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	31 96       	adiw	r30, 0x01	; 1
    3ba6:	a4 eb       	ldi	r26, 0xB4	; 180
    3ba8:	b2 e2       	ldi	r27, 0x22	; 34
    3baa:	40 e0       	ldi	r20, 0x00	; 0
    3bac:	50 e0       	ldi	r21, 0x00	; 0
	//printf("\r\n");	
}

uint8_t checkCollisions(){
	int16_t meas[6];
	uint8_t dirs = 0;
    3bae:	80 e0       	ldi	r24, 0x00	; 0
	checkCollisionValues(meas);
	for(uint8_t i=0;i<6;i++){
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
    3bb0:	61 91       	ld	r22, Z+
    3bb2:	71 91       	ld	r23, Z+
    3bb4:	2d 91       	ld	r18, X+
    3bb6:	3d 91       	ld	r19, X+
    3bb8:	62 0f       	add	r22, r18
    3bba:	73 1f       	adc	r23, r19
    3bbc:	21 e0       	ldi	r18, 0x01	; 1
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	6f 3f       	cpi	r22, 0xFF	; 255
    3bc2:	77 40       	sbci	r23, 0x07	; 7
    3bc4:	14 f4       	brge	.+4      	; 0x3bca <checkCollisions+0x3e>
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	04 2e       	mov	r0, r20
    3bcc:	01 c0       	rjmp	.+2      	; 0x3bd0 <checkCollisions+0x44>
    3bce:	22 0f       	add	r18, r18
    3bd0:	0a 94       	dec	r0
    3bd2:	ea f7       	brpl	.-6      	; 0x3bce <checkCollisions+0x42>
    3bd4:	82 2b       	or	r24, r18
    3bd6:	4f 5f       	subi	r20, 0xFF	; 255
    3bd8:	5f 4f       	sbci	r21, 0xFF	; 255

uint8_t checkCollisions(){
	int16_t meas[6];
	uint8_t dirs = 0;
	checkCollisionValues(meas);
	for(uint8_t i=0;i<6;i++){
    3bda:	46 30       	cpi	r20, 0x06	; 6
    3bdc:	51 05       	cpc	r21, r1
    3bde:	41 f7       	brne	.-48     	; 0x3bb0 <checkCollisions+0x24>
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
	}
	return dirs;
}
    3be0:	2c 96       	adiw	r28, 0x0c	; 12
    3be2:	cd bf       	out	0x3d, r28	; 61
    3be4:	de bf       	out	0x3e, r29	; 62
    3be6:	df 91       	pop	r29
    3be8:	cf 91       	pop	r28
    3bea:	08 95       	ret

00003bec <localizationInit>:
//static const Matrix xyMeasCovarClose  = {{100, 2, 0.5}, {2, 100, 0.75}, {0.5, 0.75, 0.05}};
//static const Matrix xyMeasCovarMed = {{500, 100, -4}, {100, 500, -0.5}, {-4, -0.5, 0.2}};
//static const Matrix xyMeasCovarFar = {{8000, -1000, -0.25}, {-1000, 8000, -10}, {-0.25, -10, 1}};

void localizationInit(){
	myPos.x = UNDF;
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	90 e8       	ldi	r25, 0x80	; 128
    3bf0:	80 93 18 26 	sts	0x2618, r24	; 0x802618 <myPos>
    3bf4:	90 93 19 26 	sts	0x2619, r25	; 0x802619 <myPos+0x1>
	myPos.y = UNDF;
    3bf8:	80 93 1a 26 	sts	0x261A, r24	; 0x80261a <myPos+0x2>
    3bfc:	90 93 1b 26 	sts	0x261B, r25	; 0x80261b <myPos+0x3>
	myPos.o = UNDF;
    3c00:	80 93 1c 26 	sts	0x261C, r24	; 0x80261c <myPos+0x4>
    3c04:	90 93 1d 26 	sts	0x261D, r25	; 0x80261d <myPos+0x5>
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
    3c08:	10 92 f0 23 	sts	0x23F0, r1	; 0x8023f0 <myPosCovar>
    3c0c:	10 92 f1 23 	sts	0x23F1, r1	; 0x8023f1 <myPosCovar+0x1>
    3c10:	10 92 f2 23 	sts	0x23F2, r1	; 0x8023f2 <myPosCovar+0x2>
    3c14:	10 92 f3 23 	sts	0x23F3, r1	; 0x8023f3 <myPosCovar+0x3>
    3c18:	10 92 f4 23 	sts	0x23F4, r1	; 0x8023f4 <myPosCovar+0x4>
    3c1c:	10 92 f5 23 	sts	0x23F5, r1	; 0x8023f5 <myPosCovar+0x5>
    3c20:	10 92 f6 23 	sts	0x23F6, r1	; 0x8023f6 <myPosCovar+0x6>
    3c24:	10 92 f7 23 	sts	0x23F7, r1	; 0x8023f7 <myPosCovar+0x7>
    3c28:	10 92 f8 23 	sts	0x23F8, r1	; 0x8023f8 <myPosCovar+0x8>
    3c2c:	10 92 f9 23 	sts	0x23F9, r1	; 0x8023f9 <myPosCovar+0x9>
    3c30:	10 92 fa 23 	sts	0x23FA, r1	; 0x8023fa <myPosCovar+0xa>
    3c34:	10 92 fb 23 	sts	0x23FB, r1	; 0x8023fb <myPosCovar+0xb>
	}
	seedFlag = 0;
    3c38:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <seedFlag>
    3c3c:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <droplet_ID>
    3c40:	90 91 ed 23 	lds	r25, 0x23ED	; 0x8023ed <droplet_ID+0x1>
	for(uint8_t i=0;i<NUM_SEEDS;i++){
		if(getDropletID()==SEED_IDS[i]){
    3c44:	86 36       	cpi	r24, 0x66	; 102
    3c46:	2c e6       	ldi	r18, 0x6C	; 108
    3c48:	92 07       	cpc	r25, r18
    3c4a:	e1 f1       	breq	.+120    	; 0x3cc4 <localizationInit+0xd8>
    3c4c:	81 3d       	cpi	r24, 0xD1	; 209
    3c4e:	2c ec       	ldi	r18, 0xCC	; 204
    3c50:	92 07       	cpc	r25, r18
    3c52:	d1 f1       	breq	.+116    	; 0x3cc8 <localizationInit+0xdc>
    3c54:	81 36       	cpi	r24, 0x61	; 97
    3c56:	23 e1       	ldi	r18, 0x13	; 19
    3c58:	92 07       	cpc	r25, r18
    3c5a:	c1 f1       	breq	.+112    	; 0x3ccc <localizationInit+0xe0>
    3c5c:	01 96       	adiw	r24, 0x01	; 1
    3c5e:	09 f0       	breq	.+2      	; 0x3c62 <localizationInit+0x76>
    3c60:	08 95       	ret
	myPos.o = UNDF;
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
	}
	seedFlag = 0;
	for(uint8_t i=0;i<NUM_SEEDS;i++){
    3c62:	83 e0       	ldi	r24, 0x03	; 3
		if(getDropletID()==SEED_IDS[i]){
    3c64:	90 e0       	ldi	r25, 0x00	; 0
			seedFlag = 1;
    3c66:	21 e0       	ldi	r18, 0x01	; 1
    3c68:	20 93 77 24 	sts	0x2477, r18	; 0x802477 <seedFlag>
			myPos.x = SEED_POS[i].x;
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	ee 0f       	add	r30, r30
    3c70:	ff 1f       	adc	r31, r31
    3c72:	e8 0f       	add	r30, r24
    3c74:	f9 1f       	adc	r31, r25
    3c76:	ee 0f       	add	r30, r30
    3c78:	ff 1f       	adc	r31, r31
    3c7a:	eb 54       	subi	r30, 0x4B	; 75
    3c7c:	ff 4d       	sbci	r31, 0xDF	; 223
    3c7e:	80 81       	ld	r24, Z
    3c80:	91 81       	ldd	r25, Z+1	; 0x01
    3c82:	80 93 18 26 	sts	0x2618, r24	; 0x802618 <myPos>
    3c86:	90 93 19 26 	sts	0x2619, r25	; 0x802619 <myPos+0x1>
			myPos.y = SEED_POS[i].y;
    3c8a:	82 81       	ldd	r24, Z+2	; 0x02
    3c8c:	93 81       	ldd	r25, Z+3	; 0x03
    3c8e:	80 93 1a 26 	sts	0x261A, r24	; 0x80261a <myPos+0x2>
    3c92:	90 93 1b 26 	sts	0x261B, r25	; 0x80261b <myPos+0x3>
			myPos.o = SEED_POS[i].o;
    3c96:	84 81       	ldd	r24, Z+4	; 0x04
    3c98:	95 81       	ldd	r25, Z+5	; 0x05
    3c9a:	80 93 1c 26 	sts	0x261C, r24	; 0x80261c <myPos+0x4>
    3c9e:	90 93 1d 26 	sts	0x261D, r25	; 0x80261d <myPos+0x5>
			myPosCovar[0].u = 1; //the actual value used will be this*8
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	80 93 f0 23 	sts	0x23F0, r24	; 0x8023f0 <myPosCovar>
    3caa:	90 93 f1 23 	sts	0x23F1, r25	; 0x8023f1 <myPosCovar+0x1>
			myPosCovar[3].u = 1; //the actual value used will be this*8
    3cae:	80 93 f6 23 	sts	0x23F6, r24	; 0x8023f6 <myPosCovar+0x6>
    3cb2:	90 93 f7 23 	sts	0x23F7, r25	; 0x8023f7 <myPosCovar+0x7>
			myPosCovar[5].u = 16; //the actual value used will be this/256
    3cb6:	80 e1       	ldi	r24, 0x10	; 16
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	80 93 fa 23 	sts	0x23FA, r24	; 0x8023fa <myPosCovar+0xa>
    3cbe:	90 93 fb 23 	sts	0x23FB, r25	; 0x8023fb <myPosCovar+0xb>
    3cc2:	08 95       	ret
	myPos.o = UNDF;
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
	}
	seedFlag = 0;
	for(uint8_t i=0;i<NUM_SEEDS;i++){
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	ce cf       	rjmp	.-100    	; 0x3c64 <localizationInit+0x78>
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	cc cf       	rjmp	.-104    	; 0x3c64 <localizationInit+0x78>
    3ccc:	82 e0       	ldi	r24, 0x02	; 2
    3cce:	ca cf       	rjmp	.-108    	; 0x3c64 <localizationInit+0x78>

00003cd0 <stopMove>:
		printf("\r\n");
	}
	printf("\r\n");
}
void broadcastMotorAdjusts()
{
    3cd0:	e0 e0       	ldi	r30, 0x00	; 0
    3cd2:	f8 e0       	ldi	r31, 0x08	; 8
    3cd4:	81 81       	ldd	r24, Z+1	; 0x01
    3cd6:	8f 7c       	andi	r24, 0xCF	; 207
    3cd8:	81 83       	std	Z+1, r24	; 0x01
    3cda:	10 82       	st	Z, r1
    3cdc:	e0 e4       	ldi	r30, 0x40	; 64
    3cde:	f8 e0       	ldi	r31, 0x08	; 8
    3ce0:	81 81       	ldd	r24, Z+1	; 0x01
    3ce2:	8f 7c       	andi	r24, 0xCF	; 207
    3ce4:	81 83       	std	Z+1, r24	; 0x01
    3ce6:	10 82       	st	Z, r1
    3ce8:	e0 e0       	ldi	r30, 0x00	; 0
    3cea:	f9 e0       	ldi	r31, 0x09	; 9
    3cec:	81 81       	ldd	r24, Z+1	; 0x01
    3cee:	8f 7c       	andi	r24, 0xCF	; 207
    3cf0:	81 83       	std	Z+1, r24	; 0x01
    3cf2:	10 82       	st	Z, r1
    3cf4:	83 e3       	ldi	r24, 0x33	; 51
    3cf6:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    3cfa:	83 e0       	ldi	r24, 0x03	; 3
    3cfc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    3d00:	10 92 c6 22 	sts	0x22C6, r1	; 0x8022c6 <motor_status>
    3d04:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <current_motor_task>
    3d08:	90 91 c5 22 	lds	r25, 0x22C5	; 0x8022c5 <current_motor_task+0x1>
    3d0c:	0e 94 4b 33 	call	0x6696	; 0x6696 <removeTask>
    3d10:	10 92 c4 22 	sts	0x22C4, r1	; 0x8022c4 <current_motor_task>
    3d14:	10 92 c5 22 	sts	0x22C5, r1	; 0x8022c5 <current_motor_task+0x1>
    3d18:	08 95       	ret

00003d1a <moveSteps>:
    3d1a:	8f 92       	push	r8
    3d1c:	9f 92       	push	r9
    3d1e:	af 92       	push	r10
    3d20:	bf 92       	push	r11
    3d22:	cf 92       	push	r12
    3d24:	df 92       	push	r13
    3d26:	ef 92       	push	r14
    3d28:	ff 92       	push	r15
    3d2a:	0f 93       	push	r16
    3d2c:	1f 93       	push	r17
    3d2e:	cf 93       	push	r28
    3d30:	df 93       	push	r29
    3d32:	cd b7       	in	r28, 0x3d	; 61
    3d34:	de b7       	in	r29, 0x3e	; 62
    3d36:	29 97       	sbiw	r28, 0x09	; 9
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	de bf       	out	0x3e, r29	; 62
    3d3c:	6b 01       	movw	r12, r22
    3d3e:	90 91 c6 22 	lds	r25, 0x22C6	; 0x8022c6 <motor_status>
    3d42:	97 fd       	sbrc	r25, 7
    3d44:	1b c1       	rjmp	.+566    	; 0x3f7c <moveSteps+0x262>
    3d46:	98 2f       	mov	r25, r24
    3d48:	97 70       	andi	r25, 0x07	; 7
    3d4a:	90 68       	ori	r25, 0x80	; 128
    3d4c:	90 93 c6 22 	sts	0x22C6, r25	; 0x8022c6 <motor_status>
    3d50:	60 91 c2 22 	lds	r22, 0x22C2	; 0x8022c2 <motor_on_time>
    3d54:	70 91 c3 22 	lds	r23, 0x22C3	; 0x8022c3 <motor_on_time+0x1>
    3d58:	66 0f       	add	r22, r22
    3d5a:	77 1f       	adc	r23, r23
    3d5c:	62 95       	swap	r22
    3d5e:	72 95       	swap	r23
    3d60:	70 7f       	andi	r23, 0xF0	; 240
    3d62:	76 27       	eor	r23, r22
    3d64:	60 7f       	andi	r22, 0xF0	; 240
    3d66:	76 27       	eor	r23, r22
    3d68:	a0 90 c0 22 	lds	r10, 0x22C0	; 0x8022c0 <motor_off_time>
    3d6c:	b0 90 c1 22 	lds	r11, 0x22C1	; 0x8022c1 <motor_off_time+0x1>
    3d70:	aa 0c       	add	r10, r10
    3d72:	bb 1c       	adc	r11, r11
    3d74:	a2 94       	swap	r10
    3d76:	b2 94       	swap	r11
    3d78:	40 ef       	ldi	r20, 0xF0	; 240
    3d7a:	b4 22       	and	r11, r20
    3d7c:	ba 24       	eor	r11, r10
    3d7e:	a4 22       	and	r10, r20
    3d80:	ba 24       	eor	r11, r10
    3d82:	96 e0       	ldi	r25, 0x06	; 6
    3d84:	89 9f       	mul	r24, r25
    3d86:	f0 01       	movw	r30, r0
    3d88:	11 24       	eor	r1, r1
    3d8a:	df 01       	movw	r26, r30
    3d8c:	af 51       	subi	r26, 0x1F	; 31
    3d8e:	ba 4d       	sbci	r27, 0xDA	; 218
    3d90:	4d 01       	movw	r8, r26
    3d92:	de 01       	movw	r26, r28
    3d94:	11 96       	adiw	r26, 0x01	; 1
    3d96:	7e 01       	movw	r14, r28
    3d98:	e7 e0       	ldi	r30, 0x07	; 7
    3d9a:	ee 0e       	add	r14, r30
    3d9c:	f1 1c       	adc	r15, r1
    3d9e:	c7 01       	movw	r24, r14
    3da0:	00 e0       	ldi	r16, 0x00	; 0
    3da2:	10 e0       	ldi	r17, 0x00	; 0
    3da4:	f4 01       	movw	r30, r8
    3da6:	21 91       	ld	r18, Z+
    3da8:	31 91       	ld	r19, Z+
    3daa:	4f 01       	movw	r8, r30
    3dac:	21 15       	cp	r18, r1
    3dae:	31 05       	cpc	r19, r1
    3db0:	09 f0       	breq	.+2      	; 0x3db4 <moveSteps+0x9a>
    3db2:	66 c0       	rjmp	.+204    	; 0x3e80 <moveSteps+0x166>
    3db4:	1d 92       	st	X+, r1
    3db6:	1c 92       	st	X, r1
    3db8:	11 97       	sbiw	r26, 0x01	; 1
    3dba:	fc 01       	movw	r30, r24
    3dbc:	10 82       	st	Z, r1
    3dbe:	12 96       	adiw	r26, 0x02	; 2
    3dc0:	01 96       	adiw	r24, 0x01	; 1
    3dc2:	ae 15       	cp	r26, r14
    3dc4:	bf 05       	cpc	r27, r15
    3dc6:	71 f7       	brne	.-36     	; 0x3da4 <moveSteps+0x8a>
    3dc8:	00 93 26 09 	sts	0x0926, r16	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    3dcc:	10 93 27 09 	sts	0x0927, r17	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    3dd0:	00 93 66 08 	sts	0x0866, r16	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    3dd4:	10 93 67 08 	sts	0x0867, r17	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    3dd8:	00 93 26 08 	sts	0x0826, r16	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    3ddc:	10 93 27 08 	sts	0x0827, r17	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    3de0:	e9 81       	ldd	r30, Y+1	; 0x01
    3de2:	fa 81       	ldd	r31, Y+2	; 0x02
    3de4:	e0 93 2a 08 	sts	0x082A, r30	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
    3de8:	f0 93 2b 08 	sts	0x082B, r31	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
    3dec:	e0 93 28 08 	sts	0x0828, r30	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3df0:	f0 93 29 08 	sts	0x0829, r31	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    3df4:	8b 81       	ldd	r24, Y+3	; 0x03
    3df6:	9c 81       	ldd	r25, Y+4	; 0x04
    3df8:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <__TEXT_REGION_LENGTH__+0x70086a>
    3dfc:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <__TEXT_REGION_LENGTH__+0x70086b>
    3e00:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    3e04:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    3e08:	8d 81       	ldd	r24, Y+5	; 0x05
    3e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0c:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3e10:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    3e14:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    3e18:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    3e1c:	80 90 c0 22 	lds	r8, 0x22C0	; 0x8022c0 <motor_off_time>
    3e20:	90 90 c1 22 	lds	r9, 0x22C1	; 0x8022c1 <motor_off_time+0x1>
    3e24:	88 0c       	add	r8, r8
    3e26:	99 1c       	adc	r9, r9
    3e28:	82 94       	swap	r8
    3e2a:	92 94       	swap	r9
    3e2c:	50 ef       	ldi	r21, 0xF0	; 240
    3e2e:	95 22       	and	r9, r21
    3e30:	98 24       	eor	r9, r8
    3e32:	85 22       	and	r8, r21
    3e34:	98 24       	eor	r9, r8
    3e36:	5e 01       	movw	r10, r28
    3e38:	83 e0       	ldi	r24, 0x03	; 3
    3e3a:	a8 0e       	add	r10, r24
    3e3c:	b1 1c       	adc	r11, r1
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 e0       	ldi	r20, 0x00	; 0
    3e44:	30 97       	sbiw	r30, 0x00	; 0
    3e46:	a1 f0       	breq	.+40     	; 0x3e70 <moveSteps+0x156>
    3e48:	c8 01       	movw	r24, r16
    3e4a:	82 1b       	sub	r24, r18
    3e4c:	93 0b       	sbc	r25, r19
    3e4e:	b8 01       	movw	r22, r16
    3e50:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodhi4>
    3e54:	41 30       	cpi	r20, 0x01	; 1
    3e56:	09 f4       	brne	.+2      	; 0x3e5a <moveSteps+0x140>
    3e58:	a9 c0       	rjmp	.+338    	; 0x3fac <moveSteps+0x292>
    3e5a:	42 30       	cpi	r20, 0x02	; 2
    3e5c:	09 f4       	brne	.+2      	; 0x3e60 <moveSteps+0x146>
    3e5e:	92 c0       	rjmp	.+292    	; 0x3f84 <moveSteps+0x26a>
    3e60:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    3e64:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    3e68:	2e 0f       	add	r18, r30
    3e6a:	3f 1f       	adc	r19, r31
    3e6c:	28 0d       	add	r18, r8
    3e6e:	39 1d       	adc	r19, r9
    3e70:	4f 5f       	subi	r20, 0xFF	; 255
    3e72:	43 30       	cpi	r20, 0x03	; 3
    3e74:	c9 f0       	breq	.+50     	; 0x3ea8 <moveSteps+0x18e>
    3e76:	d5 01       	movw	r26, r10
    3e78:	ed 91       	ld	r30, X+
    3e7a:	fd 91       	ld	r31, X+
    3e7c:	5d 01       	movw	r10, r26
    3e7e:	e2 cf       	rjmp	.-60     	; 0x3e44 <moveSteps+0x12a>
    3e80:	a9 01       	movw	r20, r18
    3e82:	37 fd       	sbrc	r19, 7
    3e84:	8e c0       	rjmp	.+284    	; 0x3fa2 <moveSteps+0x288>
    3e86:	46 0f       	add	r20, r22
    3e88:	57 1f       	adc	r21, r23
    3e8a:	4d 93       	st	X+, r20
    3e8c:	5c 93       	st	X, r21
    3e8e:	11 97       	sbiw	r26, 0x01	; 1
    3e90:	23 2f       	mov	r18, r19
    3e92:	22 0f       	add	r18, r18
    3e94:	22 0b       	sbc	r18, r18
    3e96:	22 0f       	add	r18, r18
    3e98:	2f 5f       	subi	r18, 0xFF	; 255
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	20 83       	st	Z, r18
    3e9e:	0a 0d       	add	r16, r10
    3ea0:	1b 1d       	adc	r17, r11
    3ea2:	04 0f       	add	r16, r20
    3ea4:	15 1f       	adc	r17, r21
    3ea6:	8b cf       	rjmp	.-234    	; 0x3dbe <moveSteps+0xa4>
    3ea8:	02 17       	cp	r16, r18
    3eaa:	13 07       	cpc	r17, r19
    3eac:	81 f0       	breq	.+32     	; 0x3ece <moveSteps+0x1b4>
    3eae:	1f 93       	push	r17
    3eb0:	0f 93       	push	r16
    3eb2:	3f 93       	push	r19
    3eb4:	2f 93       	push	r18
    3eb6:	85 ef       	ldi	r24, 0xF5	; 245
    3eb8:	97 e0       	ldi	r25, 0x07	; 7
    3eba:	9f 93       	push	r25
    3ebc:	8f 93       	push	r24
    3ebe:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	0f 90       	pop	r0
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	47 e0       	ldi	r20, 0x07	; 7
    3ed4:	38 2f       	mov	r19, r24
    3ed6:	f7 01       	movw	r30, r14
    3ed8:	21 91       	ld	r18, Z+
    3eda:	7f 01       	movw	r14, r30
    3edc:	01 96       	adiw	r24, 0x01	; 1
    3ede:	27 fd       	sbrc	r18, 7
    3ee0:	13 c0       	rjmp	.+38     	; 0x3f08 <moveSteps+0x1ee>
    3ee2:	22 23       	and	r18, r18
    3ee4:	01 f1       	breq	.+64     	; 0x3f26 <moveSteps+0x20c>
    3ee6:	31 30       	cpi	r19, 0x01	; 1
    3ee8:	09 f4       	brne	.+2      	; 0x3eec <moveSteps+0x1d2>
    3eea:	65 c0       	rjmp	.+202    	; 0x3fb6 <moveSteps+0x29c>
    3eec:	32 30       	cpi	r19, 0x02	; 2
    3eee:	09 f0       	breq	.+2      	; 0x3ef2 <moveSteps+0x1d8>
    3ef0:	4e c0       	rjmp	.+156    	; 0x3f8e <moveSteps+0x274>
    3ef2:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    3ef6:	80 62       	ori	r24, 0x20	; 32
    3ef8:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    3efc:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <__TEXT_REGION_LENGTH__+0x700902>
    3f00:	87 e0       	ldi	r24, 0x07	; 7
    3f02:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
    3f06:	11 c0       	rjmp	.+34     	; 0x3f2a <moveSteps+0x210>
    3f08:	31 30       	cpi	r19, 0x01	; 1
    3f0a:	09 f4       	brne	.+2      	; 0x3f0e <moveSteps+0x1f4>
    3f0c:	72 c0       	rjmp	.+228    	; 0x3ff2 <moveSteps+0x2d8>
    3f0e:	32 30       	cpi	r19, 0x02	; 2
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <moveSteps+0x1fa>
    3f12:	5b c0       	rjmp	.+182    	; 0x3fca <moveSteps+0x2b0>
    3f14:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    3f18:	20 61       	ori	r18, 0x10	; 16
    3f1a:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    3f1e:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    3f22:	40 93 00 08 	sts	0x0800, r20	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    3f26:	83 30       	cpi	r24, 0x03	; 3
    3f28:	a9 f6       	brne	.-86     	; 0x3ed4 <moveSteps+0x1ba>
    3f2a:	98 01       	movw	r18, r16
    3f2c:	d6 01       	movw	r26, r12
    3f2e:	0e 94 97 4b 	call	0x972e	; 0x972e <__umulhisi3>
    3f32:	25 e0       	ldi	r18, 0x05	; 5
    3f34:	96 95       	lsr	r25
    3f36:	87 95       	ror	r24
    3f38:	77 95       	ror	r23
    3f3a:	67 95       	ror	r22
    3f3c:	2a 95       	dec	r18
    3f3e:	d1 f7       	brne	.-12     	; 0x3f34 <moveSteps+0x21a>
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	48 e6       	ldi	r20, 0x68	; 104
    3f46:	5e e1       	ldi	r21, 0x1E	; 30
    3f48:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <scheduleTask>
    3f4c:	80 93 c4 22 	sts	0x22C4, r24	; 0x8022c4 <current_motor_task>
    3f50:	90 93 c5 22 	sts	0x22C5, r25	; 0x8022c5 <current_motor_task+0x1>
    3f54:	89 2b       	or	r24, r25
    3f56:	09 f4       	brne	.+2      	; 0x3f5a <moveSteps+0x240>
    3f58:	43 c0       	rjmp	.+134    	; 0x3fe0 <moveSteps+0x2c6>
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	29 96       	adiw	r28, 0x09	; 9
    3f5e:	cd bf       	out	0x3d, r28	; 61
    3f60:	de bf       	out	0x3e, r29	; 62
    3f62:	df 91       	pop	r29
    3f64:	cf 91       	pop	r28
    3f66:	1f 91       	pop	r17
    3f68:	0f 91       	pop	r16
    3f6a:	ff 90       	pop	r15
    3f6c:	ef 90       	pop	r14
    3f6e:	df 90       	pop	r13
    3f70:	cf 90       	pop	r12
    3f72:	bf 90       	pop	r11
    3f74:	af 90       	pop	r10
    3f76:	9f 90       	pop	r9
    3f78:	8f 90       	pop	r8
    3f7a:	08 95       	ret
    3f7c:	80 91 c6 22 	lds	r24, 0x22C6	; 0x8022c6 <motor_status>
    3f80:	80 e0       	ldi	r24, 0x00	; 0
    3f82:	ec cf       	rjmp	.-40     	; 0x3f5c <moveSteps+0x242>
    3f84:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <__TEXT_REGION_LENGTH__+0x700920>
    3f88:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <__TEXT_REGION_LENGTH__+0x700921>
    3f8c:	6d cf       	rjmp	.-294    	; 0x3e68 <moveSteps+0x14e>
    3f8e:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    3f92:	20 62       	ori	r18, 0x20	; 32
    3f94:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    3f98:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    3f9c:	40 93 00 08 	sts	0x0800, r20	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    3fa0:	c2 cf       	rjmp	.-124    	; 0x3f26 <moveSteps+0x20c>
    3fa2:	44 27       	eor	r20, r20
    3fa4:	55 27       	eor	r21, r21
    3fa6:	42 1b       	sub	r20, r18
    3fa8:	53 0b       	sbc	r21, r19
    3faa:	6d cf       	rjmp	.-294    	; 0x3e86 <moveSteps+0x16c>
    3fac:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    3fb0:	90 93 61 08 	sts	0x0861, r25	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    3fb4:	59 cf       	rjmp	.-334    	; 0x3e68 <moveSteps+0x14e>
    3fb6:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    3fba:	20 62       	ori	r18, 0x20	; 32
    3fbc:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    3fc0:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    3fc4:	40 93 40 08 	sts	0x0840, r20	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    3fc8:	85 cf       	rjmp	.-246    	; 0x3ed4 <moveSteps+0x1ba>
    3fca:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    3fce:	80 61       	ori	r24, 0x10	; 16
    3fd0:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    3fd4:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <__TEXT_REGION_LENGTH__+0x700902>
    3fd8:	87 e0       	ldi	r24, 0x07	; 7
    3fda:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
    3fde:	a5 cf       	rjmp	.-182    	; 0x3f2a <moveSteps+0x210>
    3fe0:	8b ec       	ldi	r24, 0xCB	; 203
    3fe2:	97 e0       	ldi	r25, 0x07	; 7
    3fe4:	9f 93       	push	r25
    3fe6:	8f 93       	push	r24
    3fe8:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    3fec:	0f 90       	pop	r0
    3fee:	0f 90       	pop	r0
    3ff0:	b4 cf       	rjmp	.-152    	; 0x3f5a <moveSteps+0x240>
    3ff2:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    3ff6:	20 61       	ori	r18, 0x10	; 16
    3ff8:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    3ffc:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    4000:	40 93 40 08 	sts	0x0840, r20	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    4004:	67 cf       	rjmp	.-306    	; 0x3ed4 <moveSteps+0x1ba>

00004006 <walk>:
    4006:	cf 92       	push	r12
    4008:	df 92       	push	r13
    400a:	ef 92       	push	r14
    400c:	ff 92       	push	r15
    400e:	0f 93       	push	r16
    4010:	1f 93       	push	r17
    4012:	cf 93       	push	r28
    4014:	df 93       	push	r29
    4016:	18 2f       	mov	r17, r24
    4018:	eb 01       	movw	r28, r22
    401a:	e8 2f       	mov	r30, r24
    401c:	f0 e0       	ldi	r31, 0x00	; 0
    401e:	ee 0f       	add	r30, r30
    4020:	ff 1f       	adc	r31, r31
    4022:	ea 5d       	subi	r30, 0xDA	; 218
    4024:	fb 4d       	sbci	r31, 0xDB	; 219
    4026:	60 81       	ld	r22, Z
    4028:	71 81       	ldd	r23, Z+1	; 0x01
    402a:	67 3e       	cpi	r22, 0xE7	; 231
    402c:	83 e0       	ldi	r24, 0x03	; 3
    402e:	78 07       	cpc	r23, r24
    4030:	2c f4       	brge	.+10     	; 0x403c <walk+0x36>
    4032:	68 31       	cpi	r22, 0x18	; 24
    4034:	9c ef       	ldi	r25, 0xFC	; 252
    4036:	79 07       	cpc	r23, r25
    4038:	0c f0       	brlt	.+2      	; 0x403c <walk+0x36>
    403a:	43 c0       	rjmp	.+134    	; 0x40c2 <walk+0xbc>
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	0e 94 0e 48 	call	0x901c	; 0x901c <__floatunsisf>
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	4a e7       	ldi	r20, 0x7A	; 122
    404a:	54 e4       	ldi	r21, 0x44	; 68
    404c:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    4050:	6b 01       	movw	r12, r22
    4052:	7c 01       	movw	r14, r24
    4054:	be 01       	movw	r22, r28
    4056:	80 e0       	ldi	r24, 0x00	; 0
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	0e 94 0e 48 	call	0x901c	; 0x901c <__floatunsisf>
    405e:	a7 01       	movw	r20, r14
    4060:	96 01       	movw	r18, r12
    4062:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    4066:	6b 01       	movw	r12, r22
    4068:	7c 01       	movw	r14, r24
    406a:	8a e0       	ldi	r24, 0x0A	; 10
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    4072:	c7 01       	movw	r24, r14
    4074:	b6 01       	movw	r22, r12
    4076:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    407a:	f6 2e       	mov	r15, r22
    407c:	07 2f       	mov	r16, r23
    407e:	7f 93       	push	r23
    4080:	6f 93       	push	r22
    4082:	df 93       	push	r29
    4084:	cf 93       	push	r28
    4086:	1f 92       	push	r1
    4088:	1f 93       	push	r17
    408a:	83 e5       	ldi	r24, 0x53	; 83
    408c:	97 e0       	ldi	r25, 0x07	; 7
    408e:	9f 93       	push	r25
    4090:	8f 93       	push	r24
    4092:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    4096:	8a e0       	ldi	r24, 0x0A	; 10
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    409e:	8d b7       	in	r24, 0x3d	; 61
    40a0:	9e b7       	in	r25, 0x3e	; 62
    40a2:	08 96       	adiw	r24, 0x08	; 8
    40a4:	8d bf       	out	0x3d, r24	; 61
    40a6:	9e bf       	out	0x3e, r25	; 62
    40a8:	6f 2d       	mov	r22, r15
    40aa:	70 2f       	mov	r23, r16
    40ac:	81 2f       	mov	r24, r17
    40ae:	df 91       	pop	r29
    40b0:	cf 91       	pop	r28
    40b2:	1f 91       	pop	r17
    40b4:	0f 91       	pop	r16
    40b6:	ff 90       	pop	r15
    40b8:	ef 90       	pop	r14
    40ba:	df 90       	pop	r13
    40bc:	cf 90       	pop	r12
    40be:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <moveSteps>
    40c2:	81 e9       	ldi	r24, 0x91	; 145
    40c4:	97 e0       	ldi	r25, 0x07	; 7
    40c6:	9f 93       	push	r25
    40c8:	8f 93       	push	r24
    40ca:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    40ce:	0f 90       	pop	r0
    40d0:	0f 90       	pop	r0
    40d2:	16 30       	cpi	r17, 0x06	; 6
    40d4:	48 f4       	brcc	.+18     	; 0x40e8 <walk+0xe2>
    40d6:	8a e9       	ldi	r24, 0x9A	; 154
    40d8:	c8 2e       	mov	r12, r24
    40da:	89 e9       	ldi	r24, 0x99	; 153
    40dc:	d8 2e       	mov	r13, r24
    40de:	89 e1       	ldi	r24, 0x19	; 25
    40e0:	e8 2e       	mov	r14, r24
    40e2:	8f e3       	ldi	r24, 0x3F	; 63
    40e4:	f8 2e       	mov	r15, r24
    40e6:	b6 cf       	rjmp	.-148    	; 0x4054 <walk+0x4e>
    40e8:	c1 2c       	mov	r12, r1
    40ea:	d1 2c       	mov	r13, r1
    40ec:	e1 2c       	mov	r14, r1
    40ee:	90 e4       	ldi	r25, 0x40	; 64
    40f0:	f9 2e       	mov	r15, r25
    40f2:	b0 cf       	rjmp	.-160    	; 0x4054 <walk+0x4e>

000040f4 <setMMperKilostep>:
    40f4:	e8 2f       	mov	r30, r24
    40f6:	f0 e0       	ldi	r31, 0x00	; 0
    40f8:	ee 0f       	add	r30, r30
    40fa:	ff 1f       	adc	r31, r31
    40fc:	ea 5d       	subi	r30, 0xDA	; 218
    40fe:	fb 4d       	sbci	r31, 0xDB	; 219
    4100:	60 83       	st	Z, r22
    4102:	71 83       	std	Z+1, r23	; 0x01
    4104:	08 95       	ret

00004106 <readMotorSettings>:
    4106:	df 92       	push	r13
    4108:	ef 92       	push	r14
    410a:	ff 92       	push	r15
    410c:	0f 93       	push	r16
    410e:	1f 93       	push	r17
    4110:	cf 93       	push	r28
    4112:	df 93       	push	r29
    4114:	50 e1       	ldi	r21, 0x10	; 16
    4116:	e5 2e       	mov	r14, r21
    4118:	f1 2c       	mov	r15, r1
    411a:	87 01       	movw	r16, r14
    411c:	0f 52       	subi	r16, 0x2F	; 47
    411e:	1a 4d       	sbci	r17, 0xDA	; 218
    4120:	e7 01       	movw	r28, r14
    4122:	26 96       	adiw	r28, 0x06	; 6
    4124:	c7 01       	movw	r24, r14
    4126:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <EEPROM_read_byte>
    412a:	d8 2e       	mov	r13, r24
    412c:	c7 01       	movw	r24, r14
    412e:	01 96       	adiw	r24, 0x01	; 1
    4130:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <EEPROM_read_byte>
    4134:	2d 2d       	mov	r18, r13
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	32 2f       	mov	r19, r18
    413a:	22 27       	eor	r18, r18
    413c:	28 2b       	or	r18, r24
    413e:	f8 01       	movw	r30, r16
    4140:	21 93       	st	Z+, r18
    4142:	31 93       	st	Z+, r19
    4144:	8f 01       	movw	r16, r30
    4146:	f2 e0       	ldi	r31, 0x02	; 2
    4148:	ef 0e       	add	r14, r31
    414a:	f1 1c       	adc	r15, r1
    414c:	ec 16       	cp	r14, r28
    414e:	fd 06       	cpc	r15, r29
    4150:	49 f7       	brne	.-46     	; 0x4124 <readMotorSettings+0x1e>
    4152:	7e 01       	movw	r14, r28
    4154:	c0 34       	cpi	r28, 0x40	; 64
    4156:	d1 05       	cpc	r29, r1
    4158:	01 f7       	brne	.-64     	; 0x411a <readMotorSettings+0x14>
    415a:	26 e2       	ldi	r18, 0x26	; 38
    415c:	e2 2e       	mov	r14, r18
    415e:	24 e2       	ldi	r18, 0x24	; 36
    4160:	f2 2e       	mov	r15, r18
    4162:	ce 01       	movw	r24, r28
    4164:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <EEPROM_read_byte>
    4168:	18 2f       	mov	r17, r24
    416a:	ce 01       	movw	r24, r28
    416c:	01 96       	adiw	r24, 0x01	; 1
    416e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <EEPROM_read_byte>
    4172:	21 2f       	mov	r18, r17
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	32 2f       	mov	r19, r18
    4178:	22 27       	eor	r18, r18
    417a:	28 2b       	or	r18, r24
    417c:	f7 01       	movw	r30, r14
    417e:	21 93       	st	Z+, r18
    4180:	31 93       	st	Z+, r19
    4182:	7f 01       	movw	r14, r30
    4184:	22 96       	adiw	r28, 0x02	; 2
    4186:	c0 35       	cpi	r28, 0x50	; 80
    4188:	d1 05       	cpc	r29, r1
    418a:	59 f7       	brne	.-42     	; 0x4162 <readMotorSettings+0x5c>
    418c:	df 91       	pop	r29
    418e:	cf 91       	pop	r28
    4190:	1f 91       	pop	r17
    4192:	0f 91       	pop	r16
    4194:	ff 90       	pop	r15
    4196:	ef 90       	pop	r14
    4198:	df 90       	pop	r13
    419a:	08 95       	ret

0000419c <motorInit>:
    419c:	cf 93       	push	r28
    419e:	df 93       	push	r29
    41a0:	e0 e4       	ldi	r30, 0x40	; 64
    41a2:	f6 e0       	ldi	r31, 0x06	; 6
    41a4:	83 e3       	ldi	r24, 0x33	; 51
    41a6:	81 83       	std	Z+1, r24	; 0x01
    41a8:	a0 e6       	ldi	r26, 0x60	; 96
    41aa:	b6 e0       	ldi	r27, 0x06	; 6
    41ac:	83 e0       	ldi	r24, 0x03	; 3
    41ae:	11 96       	adiw	r26, 0x01	; 1
    41b0:	8c 93       	st	X, r24
    41b2:	11 97       	sbiw	r26, 0x01	; 1
    41b4:	c0 e0       	ldi	r28, 0x00	; 0
    41b6:	d8 e0       	ldi	r29, 0x08	; 8
    41b8:	18 82       	st	Y, r1
    41ba:	89 83       	std	Y+1, r24	; 0x01
    41bc:	c0 e4       	ldi	r28, 0x40	; 64
    41be:	d8 e0       	ldi	r29, 0x08	; 8
    41c0:	18 82       	st	Y, r1
    41c2:	89 83       	std	Y+1, r24	; 0x01
    41c4:	c0 e0       	ldi	r28, 0x00	; 0
    41c6:	d9 e0       	ldi	r29, 0x09	; 9
    41c8:	18 82       	st	Y, r1
    41ca:	89 83       	std	Y+1, r24	; 0x01
    41cc:	90 e4       	ldi	r25, 0x40	; 64
    41ce:	90 8b       	std	Z+16, r25	; 0x10
    41d0:	91 8b       	std	Z+17, r25	; 0x11
    41d2:	94 8b       	std	Z+20, r25	; 0x14
    41d4:	95 8b       	std	Z+21, r25	; 0x15
    41d6:	50 96       	adiw	r26, 0x10	; 16
    41d8:	9c 93       	st	X, r25
    41da:	50 97       	sbiw	r26, 0x10	; 16
    41dc:	51 96       	adiw	r26, 0x11	; 17
    41de:	9c 93       	st	X, r25
    41e0:	51 97       	sbiw	r26, 0x11	; 17
    41e2:	86 83       	std	Z+6, r24	; 0x06
    41e4:	90 e3       	ldi	r25, 0x30	; 48
    41e6:	96 83       	std	Z+6, r25	; 0x06
    41e8:	16 96       	adiw	r26, 0x06	; 6
    41ea:	8c 93       	st	X, r24
    41ec:	10 92 c6 22 	sts	0x22C6, r1	; 0x8022c6 <motor_status>
    41f0:	84 e1       	ldi	r24, 0x14	; 20
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	80 93 c2 22 	sts	0x22C2, r24	; 0x8022c2 <motor_on_time>
    41f8:	90 93 c3 22 	sts	0x22C3, r25	; 0x8022c3 <motor_on_time+0x1>
    41fc:	88 e2       	ldi	r24, 0x28	; 40
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	80 93 c0 22 	sts	0x22C0, r24	; 0x8022c0 <motor_off_time>
    4204:	90 93 c1 22 	sts	0x22C1, r25	; 0x8022c1 <motor_off_time+0x1>
    4208:	df 91       	pop	r29
    420a:	cf 91       	pop	r28
    420c:	0c 94 83 20 	jmp	0x4106	; 0x4106 <readMotorSettings>

00004210 <writeMotorSettings>:
    4210:	df 92       	push	r13
    4212:	ef 92       	push	r14
    4214:	ff 92       	push	r15
    4216:	0f 93       	push	r16
    4218:	1f 93       	push	r17
    421a:	cf 93       	push	r28
    421c:	df 93       	push	r29
    421e:	c0 e1       	ldi	r28, 0x10	; 16
    4220:	d0 e0       	ldi	r29, 0x00	; 0
    4222:	8e 01       	movw	r16, r28
    4224:	0f 52       	subi	r16, 0x2F	; 47
    4226:	1a 4d       	sbci	r17, 0xDA	; 218
    4228:	7e 01       	movw	r14, r28
    422a:	86 e0       	ldi	r24, 0x06	; 6
    422c:	e8 0e       	add	r14, r24
    422e:	f1 1c       	adc	r15, r1
    4230:	f8 01       	movw	r30, r16
    4232:	d0 80       	ld	r13, Z
    4234:	61 81       	ldd	r22, Z+1	; 0x01
    4236:	0e 5f       	subi	r16, 0xFE	; 254
    4238:	1f 4f       	sbci	r17, 0xFF	; 255
    423a:	ce 01       	movw	r24, r28
    423c:	0e 94 89 0b 	call	0x1712	; 0x1712 <EEPROM_write_byte>
    4240:	6d 2d       	mov	r22, r13
    4242:	ce 01       	movw	r24, r28
    4244:	01 96       	adiw	r24, 0x01	; 1
    4246:	0e 94 89 0b 	call	0x1712	; 0x1712 <EEPROM_write_byte>
    424a:	22 96       	adiw	r28, 0x02	; 2
    424c:	ce 15       	cp	r28, r14
    424e:	df 05       	cpc	r29, r15
    4250:	79 f7       	brne	.-34     	; 0x4230 <writeMotorSettings+0x20>
    4252:	e7 01       	movw	r28, r14
    4254:	f0 e4       	ldi	r31, 0x40	; 64
    4256:	ef 16       	cp	r14, r31
    4258:	f1 04       	cpc	r15, r1
    425a:	19 f7       	brne	.-58     	; 0x4222 <writeMotorSettings+0x12>
    425c:	c6 e2       	ldi	r28, 0x26	; 38
    425e:	d4 e2       	ldi	r29, 0x24	; 36
    4260:	18 81       	ld	r17, Y
    4262:	69 81       	ldd	r22, Y+1	; 0x01
    4264:	22 96       	adiw	r28, 0x02	; 2
    4266:	c7 01       	movw	r24, r14
    4268:	0e 94 89 0b 	call	0x1712	; 0x1712 <EEPROM_write_byte>
    426c:	61 2f       	mov	r22, r17
    426e:	c7 01       	movw	r24, r14
    4270:	01 96       	adiw	r24, 0x01	; 1
    4272:	0e 94 89 0b 	call	0x1712	; 0x1712 <EEPROM_write_byte>
    4276:	e2 e0       	ldi	r30, 0x02	; 2
    4278:	ee 0e       	add	r14, r30
    427a:	f1 1c       	adc	r15, r1
    427c:	f0 e5       	ldi	r31, 0x50	; 80
    427e:	ef 16       	cp	r14, r31
    4280:	f1 04       	cpc	r15, r1
    4282:	71 f7       	brne	.-36     	; 0x4260 <writeMotorSettings+0x50>
    4284:	df 91       	pop	r29
    4286:	cf 91       	pop	r28
    4288:	1f 91       	pop	r17
    428a:	0f 91       	pop	r16
    428c:	ff 90       	pop	r15
    428e:	ef 90       	pop	r14
    4290:	df 90       	pop	r13
    4292:	08 95       	ret

00004294 <printMotorValues>:
    4294:	8f 92       	push	r8
    4296:	9f 92       	push	r9
    4298:	af 92       	push	r10
    429a:	bf 92       	push	r11
    429c:	cf 92       	push	r12
    429e:	df 92       	push	r13
    42a0:	ef 92       	push	r14
    42a2:	ff 92       	push	r15
    42a4:	1f 93       	push	r17
    42a6:	cf 93       	push	r28
    42a8:	df 93       	push	r29
    42aa:	84 e4       	ldi	r24, 0x44	; 68
    42ac:	97 e0       	ldi	r25, 0x07	; 7
    42ae:	9f 93       	push	r25
    42b0:	8f 93       	push	r24
    42b2:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    42b6:	81 ee       	ldi	r24, 0xE1	; 225
    42b8:	a8 2e       	mov	r10, r24
    42ba:	85 e2       	ldi	r24, 0x25	; 37
    42bc:	b8 2e       	mov	r11, r24
    42be:	0f 90       	pop	r0
    42c0:	0f 90       	pop	r0
    42c2:	c1 2c       	mov	r12, r1
    42c4:	d1 2c       	mov	r13, r1
    42c6:	99 e3       	ldi	r25, 0x39	; 57
    42c8:	89 2e       	mov	r8, r25
    42ca:	97 e0       	ldi	r25, 0x07	; 7
    42cc:	99 2e       	mov	r9, r25
    42ce:	2d ec       	ldi	r18, 0xCD	; 205
    42d0:	e2 2e       	mov	r14, r18
    42d2:	20 e2       	ldi	r18, 0x20	; 32
    42d4:	f2 2e       	mov	r15, r18
    42d6:	df 92       	push	r13
    42d8:	cf 92       	push	r12
    42da:	9f 92       	push	r9
    42dc:	8f 92       	push	r8
    42de:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    42e2:	0f 90       	pop	r0
    42e4:	0f 90       	pop	r0
    42e6:	0f 90       	pop	r0
    42e8:	0f 90       	pop	r0
    42ea:	e5 01       	movw	r28, r10
    42ec:	13 e0       	ldi	r17, 0x03	; 3
    42ee:	88 81       	ld	r24, Y
    42f0:	99 81       	ldd	r25, Y+1	; 0x01
    42f2:	22 96       	adiw	r28, 0x02	; 2
    42f4:	9f 93       	push	r25
    42f6:	8f 93       	push	r24
    42f8:	ff 92       	push	r15
    42fa:	ef 92       	push	r14
    42fc:	0e 94 f4 4f 	call	0x9fe8	; 0x9fe8 <printf>
    4300:	11 50       	subi	r17, 0x01	; 1
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	0f 90       	pop	r0
    430a:	89 f7       	brne	.-30     	; 0x42ee <printMotorValues+0x5a>
    430c:	85 e7       	ldi	r24, 0x75	; 117
    430e:	90 e2       	ldi	r25, 0x20	; 32
    4310:	0e 94 36 50 	call	0xa06c	; 0xa06c <puts>
    4314:	8f ef       	ldi	r24, 0xFF	; 255
    4316:	c8 1a       	sub	r12, r24
    4318:	d8 0a       	sbc	r13, r24
    431a:	86 e0       	ldi	r24, 0x06	; 6
    431c:	a8 0e       	add	r10, r24
    431e:	b1 1c       	adc	r11, r1
    4320:	88 e0       	ldi	r24, 0x08	; 8
    4322:	c8 16       	cp	r12, r24
    4324:	d1 04       	cpc	r13, r1
    4326:	b9 f6       	brne	.-82     	; 0x42d6 <printMotorValues+0x42>
    4328:	85 e7       	ldi	r24, 0x75	; 117
    432a:	90 e2       	ldi	r25, 0x20	; 32
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	1f 91       	pop	r17
    4332:	ff 90       	pop	r15
    4334:	ef 90       	pop	r14
    4336:	df 90       	pop	r13
    4338:	cf 90       	pop	r12
    433a:	bf 90       	pop	r11
    433c:	af 90       	pop	r10
    433e:	9f 90       	pop	r9
    4340:	8f 90       	pop	r8
    4342:	0c 94 36 50 	jmp	0xa06c	; 0xa06c <puts>

00004346 <printDistPerStep>:
	// TODO: Deprecated?
}

void printDistPerStep()
{
    4346:	ef 92       	push	r14
    4348:	ff 92       	push	r15
    434a:	0f 93       	push	r16
    434c:	1f 93       	push	r17
    434e:	cf 93       	push	r28
    4350:	df 93       	push	r29
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
    4352:	80 e2       	ldi	r24, 0x20	; 32
    4354:	97 e0       	ldi	r25, 0x07	; 7
    4356:	9f 93       	push	r25
    4358:	8f 93       	push	r24
    435a:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    435e:	06 e2       	ldi	r16, 0x26	; 38
    4360:	14 e2       	ldi	r17, 0x24	; 36
    4362:	0f 90       	pop	r0
    4364:	0f 90       	pop	r0
    4366:	c0 e0       	ldi	r28, 0x00	; 0
    4368:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t direction = 0 ; direction<8; direction++)
	{
		printf_P(PSTR("\t%hu\t%u\r\n"), direction, mmPerKilostep[direction]);	
    436a:	86 e1       	ldi	r24, 0x16	; 22
    436c:	e8 2e       	mov	r14, r24
    436e:	87 e0       	ldi	r24, 0x07	; 7
    4370:	f8 2e       	mov	r15, r24
    4372:	f8 01       	movw	r30, r16
    4374:	80 81       	ld	r24, Z
    4376:	91 81       	ldd	r25, Z+1	; 0x01
    4378:	0e 5f       	subi	r16, 0xFE	; 254
    437a:	1f 4f       	sbci	r17, 0xFF	; 255
    437c:	9f 93       	push	r25
    437e:	8f 93       	push	r24
    4380:	df 93       	push	r29
    4382:	cf 93       	push	r28
    4384:	ff 92       	push	r15
    4386:	ef 92       	push	r14
    4388:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    438c:	21 96       	adiw	r28, 0x01	; 1
}

void printDistPerStep()
{
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
	for(uint8_t direction = 0 ; direction<8; direction++)
    438e:	0f 90       	pop	r0
    4390:	0f 90       	pop	r0
    4392:	0f 90       	pop	r0
    4394:	0f 90       	pop	r0
    4396:	0f 90       	pop	r0
    4398:	0f 90       	pop	r0
    439a:	c8 30       	cpi	r28, 0x08	; 8
    439c:	d1 05       	cpc	r29, r1
    439e:	49 f7       	brne	.-46     	; 0x4372 <printDistPerStep+0x2c>
	{
		printf_P(PSTR("\t%hu\t%u\r\n"), direction, mmPerKilostep[direction]);	
	}
}
    43a0:	df 91       	pop	r29
    43a2:	cf 91       	pop	r28
    43a4:	1f 91       	pop	r17
    43a6:	0f 91       	pop	r16
    43a8:	ff 90       	pop	r15
    43aa:	ef 90       	pop	r14
    43ac:	08 95       	ret

000043ae <nvm_flash_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    43ae:	da 01       	movw	r26, r20
    43b0:	a9 01       	movw	r20, r18
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    43b2:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    43b6:	37 fd       	sbrc	r19, 7
    43b8:	fc cf       	rjmp	.-8      	; 0x43b2 <nvm_flash_read_buffer+0x4>
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    43ba:	41 15       	cp	r20, r1
    43bc:	51 05       	cpc	r21, r1
    43be:	69 f0       	breq	.+26     	; 0x43da <nvm_flash_read_buffer+0x2c>
    43c0:	4a 0f       	add	r20, r26
    43c2:	5b 1f       	adc	r21, r27
 *
 * \param addr Byte address to load
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr){
	return pgm_read_byte_far(addr);
    43c4:	8b bf       	out	0x3b, r24	; 59
    43c6:	fb 01       	movw	r30, r22
    43c8:	37 91       	elpm	r19, Z+
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
    43ca:	3d 93       	st	X+, r19
		buf=(uint8_t*)buf+1;
		opt_address++;
    43cc:	6f 5f       	subi	r22, 0xFF	; 255
    43ce:	7f 4f       	sbci	r23, 0xFF	; 255
    43d0:	8f 4f       	sbci	r24, 0xFF	; 255
    43d2:	9f 4f       	sbci	r25, 0xFF	; 255
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    43d4:	a4 17       	cp	r26, r20
    43d6:	b5 07       	cpc	r27, r21
    43d8:	a9 f7       	brne	.-22     	; 0x43c4 <nvm_flash_read_buffer+0x16>
    43da:	08 95       	ret

000043dc <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    43dc:	4f 92       	push	r4
    43de:	5f 92       	push	r5
    43e0:	6f 92       	push	r6
    43e2:	7f 92       	push	r7
    43e4:	8f 92       	push	r8
    43e6:	9f 92       	push	r9
    43e8:	af 92       	push	r10
    43ea:	bf 92       	push	r11
    43ec:	cf 92       	push	r12
    43ee:	df 92       	push	r13
    43f0:	ef 92       	push	r14
    43f2:	ff 92       	push	r15
    43f4:	0f 93       	push	r16
    43f6:	1f 93       	push	r17
    43f8:	cf 93       	push	r28
    43fa:	df 93       	push	r29
    43fc:	00 d0       	rcall	.+0      	; 0x43fe <nvm_flash_erase_and_write_buffer+0x22>
    43fe:	00 d0       	rcall	.+0      	; 0x4400 <nvm_flash_erase_and_write_buffer+0x24>
    4400:	cd b7       	in	r28, 0x3d	; 61
    4402:	de b7       	in	r29, 0x3e	; 62
    4404:	2b 01       	movw	r4, r22
    4406:	3c 01       	movw	r6, r24
    4408:	6a 01       	movw	r12, r20
    440a:	79 01       	movw	r14, r18
    440c:	90 2e       	mov	r9, r16
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    440e:	dc 01       	movw	r26, r24
    4410:	cb 01       	movw	r24, r22
    4412:	88 27       	eor	r24, r24
    4414:	9e 7f       	andi	r25, 0xFE	; 254
    4416:	89 83       	std	Y+1, r24	; 0x01
    4418:	9a 83       	std	Y+2, r25	; 0x02
    441a:	ab 83       	std	Y+3, r26	; 0x03
    441c:	bc 83       	std	Y+4, r27	; 0x04

	// For each page
	while ( len ) {
    441e:	23 2b       	or	r18, r19
    4420:	09 f4       	brne	.+2      	; 0x4424 <nvm_flash_erase_and_write_buffer+0x48>
    4422:	87 c0       	rjmp	.+270    	; 0x4532 <nvm_flash_erase_and_write_buffer+0x156>
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    4424:	aa 24       	eor	r10, r10
    4426:	aa 94       	dec	r10
    4428:	ba 2c       	mov	r11, r10
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    442a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    442e:	87 fd       	sbrc	r24, 7
    4430:	fc cf       	rjmp	.-8      	; 0x442a <nvm_flash_erase_and_write_buffer+0x4e>
    4432:	00 e0       	ldi	r16, 0x00	; 0
    4434:	11 e0       	ldi	r17, 0x01	; 1
    4436:	81 2c       	mov	r8, r1
    4438:	41 c0       	rjmp	.+130    	; 0x44bc <nvm_flash_erase_and_write_buffer+0xe0>

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    443a:	89 81       	ldd	r24, Y+1	; 0x01
    443c:	9a 81       	ldd	r25, Y+2	; 0x02
    443e:	ab 81       	ldd	r26, Y+3	; 0x03
    4440:	bc 81       	ldd	r27, Y+4	; 0x04
 *
 * \param addr Byte address to load (last bit is ignored)
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr){
	return pgm_read_word_far(addr);
    4442:	ab bf       	out	0x3b, r26	; 59
    4444:	fc 01       	movw	r30, r24
    4446:	87 91       	elpm	r24, Z+
    4448:	96 91       	elpm	r25, Z
    444a:	8d 83       	std	Y+5, r24	; 0x05
    444c:	9e 83       	std	Y+6, r25	; 0x06
				if (w_value!=0xFFFF) {
    444e:	8d 81       	ldd	r24, Y+5	; 0x05
    4450:	9e 81       	ldd	r25, Y+6	; 0x06
    4452:	01 96       	adiw	r24, 0x01	; 1
    4454:	11 f0       	breq	.+4      	; 0x445a <nvm_flash_erase_and_write_buffer+0x7e>
					b_flag_erase = true; // The page is not empty
    4456:	88 24       	eor	r8, r8
    4458:	83 94       	inc	r8
			}else{
				w_value = 0xFFFF;
			}

			// Update flash buffer
			if (len) {
    445a:	e1 14       	cp	r14, r1
    445c:	f1 04       	cpc	r15, r1
    445e:	c1 f0       	breq	.+48     	; 0x4490 <nvm_flash_erase_and_write_buffer+0xb4>
				if (opt_address == page_address) {
    4460:	89 81       	ldd	r24, Y+1	; 0x01
    4462:	9a 81       	ldd	r25, Y+2	; 0x02
    4464:	ab 81       	ldd	r26, Y+3	; 0x03
    4466:	bc 81       	ldd	r27, Y+4	; 0x04
    4468:	84 15       	cp	r24, r4
    446a:	95 05       	cpc	r25, r5
    446c:	a6 05       	cpc	r26, r6
    446e:	b7 05       	cpc	r27, r7
    4470:	c9 f1       	breq	.+114    	; 0x44e4 <nvm_flash_erase_and_write_buffer+0x108>
					LSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
				if (opt_address == (page_address+1)) {
    4472:	89 81       	ldd	r24, Y+1	; 0x01
    4474:	9a 81       	ldd	r25, Y+2	; 0x02
    4476:	ab 81       	ldd	r26, Y+3	; 0x03
    4478:	bc 81       	ldd	r27, Y+4	; 0x04
    447a:	ac 01       	movw	r20, r24
    447c:	bd 01       	movw	r22, r26
    447e:	4f 5f       	subi	r20, 0xFF	; 255
    4480:	5f 4f       	sbci	r21, 0xFF	; 255
    4482:	6f 4f       	sbci	r22, 0xFF	; 255
    4484:	7f 4f       	sbci	r23, 0xFF	; 255
    4486:	44 15       	cp	r20, r4
    4488:	55 05       	cpc	r21, r5
    448a:	66 05       	cpc	r22, r6
    448c:	77 05       	cpc	r23, r7
    448e:	d9 f0       	breq	.+54     	; 0x44c6 <nvm_flash_erase_and_write_buffer+0xea>
					MSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    4490:	4d 81       	ldd	r20, Y+5	; 0x05
    4492:	5e 81       	ldd	r21, Y+6	; 0x06
    4494:	69 81       	ldd	r22, Y+1	; 0x01
    4496:	7a 81       	ldd	r23, Y+2	; 0x02
    4498:	8b 81       	ldd	r24, Y+3	; 0x03
    449a:	9c 81       	ldd	r25, Y+4	; 0x04
    449c:	0f 94 0f 00 	call	0x2001e	; 0x2001e <nvm_flash_load_word_to_buffer>
			page_address+=2;
    44a0:	89 81       	ldd	r24, Y+1	; 0x01
    44a2:	9a 81       	ldd	r25, Y+2	; 0x02
    44a4:	ab 81       	ldd	r26, Y+3	; 0x03
    44a6:	bc 81       	ldd	r27, Y+4	; 0x04
    44a8:	02 96       	adiw	r24, 0x02	; 2
    44aa:	a1 1d       	adc	r26, r1
    44ac:	b1 1d       	adc	r27, r1
    44ae:	89 83       	std	Y+1, r24	; 0x01
    44b0:	9a 83       	std	Y+2, r25	; 0x02
    44b2:	ab 83       	std	Y+3, r26	; 0x03
    44b4:	bc 83       	std	Y+4, r27	; 0x04
    44b6:	01 50       	subi	r16, 0x01	; 1
    44b8:	11 09       	sbc	r17, r1
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    44ba:	29 f1       	breq	.+74     	; 0x4506 <nvm_flash_erase_and_write_buffer+0x12a>
			if (b_blank_check) {
    44bc:	91 10       	cpse	r9, r1
    44be:	bd cf       	rjmp	.-134    	; 0x443a <nvm_flash_erase_and_write_buffer+0x5e>
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    44c0:	ad 82       	std	Y+5, r10	; 0x05
    44c2:	be 82       	std	Y+6, r11	; 0x06
    44c4:	ca cf       	rjmp	.-108    	; 0x445a <nvm_flash_erase_and_write_buffer+0x7e>
			}
			if (len) {
				if (opt_address == (page_address+1)) {
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    44c6:	f1 e0       	ldi	r31, 0x01	; 1
    44c8:	ef 1a       	sub	r14, r31
    44ca:	f1 08       	sbc	r15, r1
					opt_address++;
    44cc:	2c 01       	movw	r4, r24
    44ce:	3d 01       	movw	r6, r26
    44d0:	22 e0       	ldi	r18, 0x02	; 2
    44d2:	42 0e       	add	r4, r18
    44d4:	51 1c       	adc	r5, r1
    44d6:	61 1c       	adc	r6, r1
    44d8:	71 1c       	adc	r7, r1
					MSB(w_value)=*(uint8_t*)buf;
    44da:	f6 01       	movw	r30, r12
    44dc:	81 91       	ld	r24, Z+
    44de:	6f 01       	movw	r12, r30
    44e0:	8e 83       	std	Y+6, r24	; 0x06
    44e2:	d6 cf       	rjmp	.-84     	; 0x4490 <nvm_flash_erase_and_write_buffer+0xb4>
			// Update flash buffer
			if (len) {
				if (opt_address == page_address) {
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    44e4:	81 e0       	ldi	r24, 0x01	; 1
    44e6:	e8 1a       	sub	r14, r24
    44e8:	f1 08       	sbc	r15, r1
					opt_address++;
    44ea:	ef ef       	ldi	r30, 0xFF	; 255
    44ec:	4e 1a       	sub	r4, r30
    44ee:	5e 0a       	sbc	r5, r30
    44f0:	6e 0a       	sbc	r6, r30
    44f2:	7e 0a       	sbc	r7, r30
					LSB(w_value)=*(uint8_t*)buf;
    44f4:	f6 01       	movw	r30, r12
    44f6:	81 91       	ld	r24, Z+
    44f8:	6f 01       	movw	r12, r30
    44fa:	8d 83       	std	Y+5, r24	; 0x05
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    44fc:	e1 14       	cp	r14, r1
    44fe:	f1 04       	cpc	r15, r1
    4500:	09 f0       	breq	.+2      	; 0x4504 <nvm_flash_erase_and_write_buffer+0x128>
    4502:	b7 cf       	rjmp	.-146    	; 0x4472 <nvm_flash_erase_and_write_buffer+0x96>
    4504:	c5 cf       	rjmp	.-118    	; 0x4490 <nvm_flash_erase_and_write_buffer+0xb4>
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
    4506:	09 81       	ldd	r16, Y+1	; 0x01
    4508:	1a 81       	ldd	r17, Y+2	; 0x02
    450a:	2b 81       	ldd	r18, Y+3	; 0x03
    450c:	3c 81       	ldd	r19, Y+4	; 0x04
    450e:	c9 01       	movw	r24, r18
    4510:	b8 01       	movw	r22, r16
    4512:	72 50       	subi	r23, 0x02	; 2
    4514:	81 09       	sbc	r24, r1
    4516:	91 09       	sbc	r25, r1
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    4518:	88 20       	and	r8, r8
    451a:	19 f1       	breq	.+70     	; 0x4562 <nvm_flash_erase_and_write_buffer+0x186>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    451c:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    4520:	27 fd       	sbrc	r18, 7
    4522:	fc cf       	rjmp	.-8      	; 0x451c <nvm_flash_erase_and_write_buffer+0x140>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    4524:	45 e2       	ldi	r20, 0x25	; 37
    4526:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    452a:	e1 14       	cp	r14, r1
    452c:	f1 04       	cpc	r15, r1
    452e:	09 f0       	breq	.+2      	; 0x4532 <nvm_flash_erase_and_write_buffer+0x156>
    4530:	7c cf       	rjmp	.-264    	; 0x442a <nvm_flash_erase_and_write_buffer+0x4e>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
	printf("End of NVM eraseWrite.\r\n");
    4532:	81 ed       	ldi	r24, 0xD1	; 209
    4534:	90 e2       	ldi	r25, 0x20	; 32
    4536:	0e 94 36 50 	call	0xa06c	; 0xa06c <puts>
    453a:	26 96       	adiw	r28, 0x06	; 6
    453c:	cd bf       	out	0x3d, r28	; 61
    453e:	de bf       	out	0x3e, r29	; 62
    4540:	df 91       	pop	r29
    4542:	cf 91       	pop	r28
    4544:	1f 91       	pop	r17
    4546:	0f 91       	pop	r16
    4548:	ff 90       	pop	r15
    454a:	ef 90       	pop	r14
    454c:	df 90       	pop	r13
    454e:	cf 90       	pop	r12
    4550:	bf 90       	pop	r11
    4552:	af 90       	pop	r10
    4554:	9f 90       	pop	r9
    4556:	8f 90       	pop	r8
    4558:	7f 90       	pop	r7
    455a:	6f 90       	pop	r6
    455c:	5f 90       	pop	r5
    455e:	4f 90       	pop	r4
    4560:	08 95       	ret
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    4562:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    4566:	27 fd       	sbrc	r18, 7
    4568:	fc cf       	rjmp	.-8      	; 0x4562 <nvm_flash_erase_and_write_buffer+0x186>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    456a:	44 e2       	ldi	r20, 0x24	; 36
    456c:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    4570:	e1 14       	cp	r14, r1
    4572:	f1 04       	cpc	r15, r1
    4574:	09 f0       	breq	.+2      	; 0x4578 <nvm_flash_erase_and_write_buffer+0x19c>
    4576:	59 cf       	rjmp	.-334    	; 0x442a <nvm_flash_erase_and_write_buffer+0x4e>
    4578:	dc cf       	rjmp	.-72     	; 0x4532 <nvm_flash_erase_and_write_buffer+0x156>

0000457a <pc_comm_putchar>:
				
	serial_in_index = temp_index;
}

static int pc_comm_putchar(char c, FILE *stream __attribute__ ((unused))){
	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
    457a:	90 91 b1 09 	lds	r25, 0x09B1	; 0x8009b1 <__TEXT_REGION_LENGTH__+0x7009b1>
    457e:	95 ff       	sbrs	r25, 5
    4580:	fc cf       	rjmp	.-8      	; 0x457a <pc_comm_putchar>
	PC_USART.DATA = c;
    4582:	80 93 b0 09 	sts	0x09B0, r24	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	return 1;
}
    4586:	81 e0       	ldi	r24, 0x01	; 1
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	08 95       	ret

0000458c <pcCommInit>:
static int pc_comm_putchar(char c, FILE *stream);
static void handle_up_arrow(void);
static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);

void pcCommInit(){
	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
    458c:	e0 e6       	ldi	r30, 0x60	; 96
    458e:	f6 e0       	ldi	r31, 0x06	; 6
    4590:	80 e8       	ldi	r24, 0x80	; 128
    4592:	81 83       	std	Z+1, r24	; 0x01
	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
    4594:	80 e4       	ldi	r24, 0x40	; 64
    4596:	82 83       	std	Z+2, r24	; 0x02

	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
    4598:	e0 eb       	ldi	r30, 0xB0	; 176
    459a:	f9 e0       	ldi	r31, 0x09	; 9
    459c:	83 e0       	ldi	r24, 0x03	; 3
    459e:	85 83       	std	Z+5, r24	; 0x05

	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
    45a0:	87 e1       	ldi	r24, 0x17	; 23
    45a2:	86 83       	std	Z+6, r24	; 0x06
	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
    45a4:	84 ea       	ldi	r24, 0xA4	; 164
    45a6:	87 83       	std	Z+7, r24	; 0x07

	PC_USART.CTRLB |= USART_RXEN_bm;
    45a8:	84 81       	ldd	r24, Z+4	; 0x04
    45aa:	80 61       	ori	r24, 0x10	; 16
    45ac:	84 83       	std	Z+4, r24	; 0x04
	PC_USART.CTRLB |= USART_TXEN_bm;
    45ae:	84 81       	ldd	r24, Z+4	; 0x04
    45b0:	88 60       	ori	r24, 0x08	; 8
    45b2:	84 83       	std	Z+4, r24	; 0x04

	stdout = &mystdout;
    45b4:	82 e1       	ldi	r24, 0x12	; 18
    45b6:	90 e2       	ldi	r25, 0x20	; 32
    45b8:	80 93 2c 26 	sts	0x262C, r24	; 0x80262c <__iob+0x2>
    45bc:	90 93 2d 26 	sts	0x262D, r25	; 0x80262d <__iob+0x3>
	serial_in_index = 0;
    45c0:	10 92 c7 22 	sts	0x22C7, r1	; 0x8022c7 <serial_in_index>
    45c4:	10 92 c8 22 	sts	0x22C8, r1	; 0x8022c8 <serial_in_index+0x1>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
    45c8:	80 e2       	ldi	r24, 0x20	; 32
    45ca:	83 83       	std	Z+3, r24	; 0x03
	printf("\n");
    45cc:	8a e0       	ldi	r24, 0x0A	; 10
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	0c 94 30 50 	jmp	0xa060	; 0xa060 <putchar>

000045d4 <__vector_91>:
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    45d4:	1f 92       	push	r1
    45d6:	0f 92       	push	r0
    45d8:	0f b6       	in	r0, 0x3f	; 63
    45da:	0f 92       	push	r0
    45dc:	11 24       	eor	r1, r1
    45de:	0b b6       	in	r0, 0x3b	; 59
    45e0:	0f 92       	push	r0
    45e2:	2f 93       	push	r18
    45e4:	3f 93       	push	r19
    45e6:	4f 93       	push	r20
    45e8:	5f 93       	push	r21
    45ea:	6f 93       	push	r22
    45ec:	7f 93       	push	r23
    45ee:	8f 93       	push	r24
    45f0:	9f 93       	push	r25
    45f2:	af 93       	push	r26
    45f4:	bf 93       	push	r27
    45f6:	cf 93       	push	r28
    45f8:	ef 93       	push	r30
    45fa:	ff 93       	push	r31

static void handle_serial_input(void){
	char data = PC_USART.DATA;
    45fc:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	if(escaped_arrow==1){
    4600:	90 91 c9 22 	lds	r25, 0x22C9	; 0x8022c9 <escaped_arrow>
    4604:	91 30       	cpi	r25, 0x01	; 1
    4606:	09 f4       	brne	.+2      	; 0x460a <__vector_91+0x36>
    4608:	47 c0       	rjmp	.+142    	; 0x4698 <__vector_91+0xc4>
		if(data == 65){
			handle_up_arrow();
		}
		escaped_arrow=0;
	}else if(escaped){
    460a:	90 91 ca 22 	lds	r25, 0x22CA	; 0x8022ca <escaped>
    460e:	91 11       	cpse	r25, r1
    4610:	28 c0       	rjmp	.+80     	; 0x4662 <__vector_91+0x8e>
		if(data == 91){
			escaped_arrow=1;	
		}
		escaped=0;
	}else if(data == '\r' || data == '\n'){ //We got the newline character.
    4612:	8d 30       	cpi	r24, 0x0D	; 13
    4614:	09 f4       	brne	.+2      	; 0x4618 <__vector_91+0x44>
    4616:	59 c0       	rjmp	.+178    	; 0x46ca <__vector_91+0xf6>
    4618:	8a 30       	cpi	r24, 0x0A	; 10
    461a:	09 f4       	brne	.+2      	; 0x461e <__vector_91+0x4a>
    461c:	56 c0       	rjmp	.+172    	; 0x46ca <__vector_91+0xf6>
		printf("\r\n");
		serial_in_buffer[serial_in_index]='\0';
		handleSerialCommand(serial_in_buffer,serial_in_index);
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
    461e:	88 30       	cpi	r24, 0x08	; 8
    4620:	09 f4       	brne	.+2      	; 0x4624 <__vector_91+0x50>
    4622:	3f c0       	rjmp	.+126    	; 0x46a2 <__vector_91+0xce>
		if(serial_in_index > 0) serial_in_index--;
		printf("\b \b");
	}else if(data == 27){ //escape pressed.
    4624:	8b 31       	cpi	r24, 0x1B	; 27
    4626:	09 f4       	brne	.+2      	; 0x462a <__vector_91+0x56>
    4628:	88 c0       	rjmp	.+272    	; 0x473a <__vector_91+0x166>
		escaped = 1;
	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
    462a:	20 91 c7 22 	lds	r18, 0x22C7	; 0x8022c7 <serial_in_index>
    462e:	30 91 c8 22 	lds	r19, 0x22C8	; 0x8022c8 <serial_in_index+0x1>
    4632:	20 34       	cpi	r18, 0x40	; 64
    4634:	31 05       	cpc	r19, r1
    4636:	09 f4       	brne	.+2      	; 0x463a <__vector_91+0x66>
    4638:	84 c0       	rjmp	.+264    	; 0x4742 <__vector_91+0x16e>
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFER_SIZE);
		serial_in_index = 0;
	}else{ //Everything is fine. Add the character to the buffer.
		serial_in_buffer[serial_in_index] = data;
    463a:	f9 01       	movw	r30, r18
    463c:	e5 53       	subi	r30, 0x35	; 53
    463e:	fd 4d       	sbci	r31, 0xDD	; 221
    4640:	80 83       	st	Z, r24
		//printf("Got char '%c'\r\n",data);
		serial_in_index++;
    4642:	2f 5f       	subi	r18, 0xFF	; 255
    4644:	3f 4f       	sbci	r19, 0xFF	; 255
    4646:	20 93 c7 22 	sts	0x22C7, r18	; 0x8022c7 <serial_in_index>
    464a:	30 93 c8 22 	sts	0x22C8, r19	; 0x8022c8 <serial_in_index+0x1>
		putchar(data);
    464e:	60 91 2c 26 	lds	r22, 0x262C	; 0x80262c <__iob+0x2>
    4652:	70 91 2d 26 	lds	r23, 0x262D	; 0x80262d <__iob+0x3>
    4656:	08 2e       	mov	r0, r24
    4658:	00 0c       	add	r0, r0
    465a:	99 0b       	sbc	r25, r25
    465c:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    4660:	07 c0       	rjmp	.+14     	; 0x4670 <__vector_91+0x9c>
		if(data == 65){
			handle_up_arrow();
		}
		escaped_arrow=0;
	}else if(escaped){
		if(data == 91){
    4662:	8b 35       	cpi	r24, 0x5B	; 91
    4664:	19 f4       	brne	.+6      	; 0x466c <__vector_91+0x98>
			escaped_arrow=1;	
    4666:	81 e0       	ldi	r24, 0x01	; 1
    4668:	80 93 c9 22 	sts	0x22C9, r24	; 0x8022c9 <escaped_arrow>
		}
		escaped=0;
    466c:	10 92 ca 22 	sts	0x22CA, r1	; 0x8022ca <escaped>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    4670:	ff 91       	pop	r31
    4672:	ef 91       	pop	r30
    4674:	cf 91       	pop	r28
    4676:	bf 91       	pop	r27
    4678:	af 91       	pop	r26
    467a:	9f 91       	pop	r25
    467c:	8f 91       	pop	r24
    467e:	7f 91       	pop	r23
    4680:	6f 91       	pop	r22
    4682:	5f 91       	pop	r21
    4684:	4f 91       	pop	r20
    4686:	3f 91       	pop	r19
    4688:	2f 91       	pop	r18
    468a:	0f 90       	pop	r0
    468c:	0b be       	out	0x3b, r0	; 59
    468e:	0f 90       	pop	r0
    4690:	0f be       	out	0x3f, r0	; 63
    4692:	0f 90       	pop	r0
    4694:	1f 90       	pop	r1
    4696:	18 95       	reti

static void handle_serial_input(void){
	char data = PC_USART.DATA;
	if(escaped_arrow==1){
		if(data == 65){
    4698:	81 34       	cpi	r24, 0x41	; 65
    469a:	61 f1       	breq	.+88     	; 0x46f4 <__vector_91+0x120>
			handle_up_arrow();
		}
		escaped_arrow=0;
    469c:	10 92 c9 22 	sts	0x22C9, r1	; 0x8022c9 <escaped_arrow>
    46a0:	e7 cf       	rjmp	.-50     	; 0x4670 <__vector_91+0x9c>
		printf("\r\n");
		serial_in_buffer[serial_in_index]='\0';
		handleSerialCommand(serial_in_buffer,serial_in_index);
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
		if(serial_in_index > 0) serial_in_index--;
    46a2:	80 91 c7 22 	lds	r24, 0x22C7	; 0x8022c7 <serial_in_index>
    46a6:	90 91 c8 22 	lds	r25, 0x22C8	; 0x8022c8 <serial_in_index+0x1>
    46aa:	00 97       	sbiw	r24, 0x00	; 0
    46ac:	29 f0       	breq	.+10     	; 0x46b8 <__vector_91+0xe4>
    46ae:	01 97       	sbiw	r24, 0x01	; 1
    46b0:	80 93 c7 22 	sts	0x22C7, r24	; 0x8022c7 <serial_in_index>
    46b4:	90 93 c8 22 	sts	0x22C8, r25	; 0x8022c8 <serial_in_index+0x1>
		printf("\b \b");
    46b8:	89 ee       	ldi	r24, 0xE9	; 233
    46ba:	90 e2       	ldi	r25, 0x20	; 32
    46bc:	9f 93       	push	r25
    46be:	8f 93       	push	r24
    46c0:	0e 94 f4 4f 	call	0x9fe8	; 0x9fe8 <printf>
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	d3 cf       	rjmp	.-90     	; 0x4670 <__vector_91+0x9c>
		if(data == 91){
			escaped_arrow=1;	
		}
		escaped=0;
	}else if(data == '\r' || data == '\n'){ //We got the newline character.
		printf("\r\n");
    46ca:	85 e7       	ldi	r24, 0x75	; 117
    46cc:	90 e2       	ldi	r25, 0x20	; 32
    46ce:	0e 94 36 50 	call	0xa06c	; 0xa06c <puts>
		serial_in_buffer[serial_in_index]='\0';
    46d2:	60 91 c7 22 	lds	r22, 0x22C7	; 0x8022c7 <serial_in_index>
    46d6:	70 91 c8 22 	lds	r23, 0x22C8	; 0x8022c8 <serial_in_index+0x1>
    46da:	fb 01       	movw	r30, r22
    46dc:	e5 53       	subi	r30, 0x35	; 53
    46de:	fd 4d       	sbci	r31, 0xDD	; 221
    46e0:	10 82       	st	Z, r1
		handleSerialCommand(serial_in_buffer,serial_in_index);
    46e2:	8b ec       	ldi	r24, 0xCB	; 203
    46e4:	92 e2       	ldi	r25, 0x22	; 34
    46e6:	0e 94 89 38 	call	0x7112	; 0x7112 <handleSerialCommand>
		serial_in_index = 0;
    46ea:	10 92 c7 22 	sts	0x22C7, r1	; 0x8022c7 <serial_in_index>
    46ee:	10 92 c8 22 	sts	0x22C8, r1	; 0x8022c8 <serial_in_index+0x1>
    46f2:	be cf       	rjmp	.-132    	; 0x4670 <__vector_91+0x9c>
		putchar(data);
	}
}

static void handle_up_arrow(void){
	uint8_t temp_index = serial_in_index;
    46f4:	80 91 c7 22 	lds	r24, 0x22C7	; 0x8022c7 <serial_in_index>
    46f8:	90 91 c8 22 	lds	r25, 0x22C8	; 0x8022c8 <serial_in_index+0x1>
    46fc:	c8 2f       	mov	r28, r24
			
	while(serial_in_buffer[temp_index] != '\0'){
    46fe:	99 27       	eor	r25, r25
    4700:	fc 01       	movw	r30, r24
    4702:	e5 53       	subi	r30, 0x35	; 53
    4704:	fd 4d       	sbci	r31, 0xDD	; 221
    4706:	80 81       	ld	r24, Z
    4708:	88 23       	and	r24, r24
    470a:	69 f1       	breq	.+90     	; 0x4766 <__vector_91+0x192>
		putchar(serial_in_buffer[temp_index]);
    470c:	60 91 2c 26 	lds	r22, 0x262C	; 0x80262c <__iob+0x2>
    4710:	70 91 2d 26 	lds	r23, 0x262D	; 0x80262d <__iob+0x3>
    4714:	08 2e       	mov	r0, r24
    4716:	00 0c       	add	r0, r0
    4718:	99 0b       	sbc	r25, r25
    471a:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
		temp_index++;
    471e:	cf 5f       	subi	r28, 0xFF	; 255
}

static void handle_up_arrow(void){
	uint8_t temp_index = serial_in_index;
			
	while(serial_in_buffer[temp_index] != '\0'){
    4720:	2c 2f       	mov	r18, r28
    4722:	30 e0       	ldi	r19, 0x00	; 0
    4724:	f9 01       	movw	r30, r18
    4726:	e5 53       	subi	r30, 0x35	; 53
    4728:	fd 4d       	sbci	r31, 0xDD	; 221
    472a:	80 81       	ld	r24, Z
    472c:	81 11       	cpse	r24, r1
    472e:	ee cf       	rjmp	.-36     	; 0x470c <__vector_91+0x138>
		putchar(serial_in_buffer[temp_index]);
		temp_index++;
	}
				
	serial_in_index = temp_index;
    4730:	20 93 c7 22 	sts	0x22C7, r18	; 0x8022c7 <serial_in_index>
    4734:	30 93 c8 22 	sts	0x22C8, r19	; 0x8022c8 <serial_in_index+0x1>
    4738:	b1 cf       	rjmp	.-158    	; 0x469c <__vector_91+0xc8>
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
		if(serial_in_index > 0) serial_in_index--;
		printf("\b \b");
	}else if(data == 27){ //escape pressed.
		escaped = 1;
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	80 93 ca 22 	sts	0x22CA, r24	; 0x8022ca <escaped>
    4740:	97 cf       	rjmp	.-210    	; 0x4670 <__vector_91+0x9c>
	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFER_SIZE);
    4742:	1f 92       	push	r1
    4744:	80 e4       	ldi	r24, 0x40	; 64
    4746:	8f 93       	push	r24
    4748:	8f e2       	ldi	r24, 0x2F	; 47
    474a:	98 e0       	ldi	r25, 0x08	; 8
    474c:	9f 93       	push	r25
    474e:	8f 93       	push	r24
    4750:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
		serial_in_index = 0;
    4754:	10 92 c7 22 	sts	0x22C7, r1	; 0x8022c7 <serial_in_index>
    4758:	10 92 c8 22 	sts	0x22C8, r1	; 0x8022c8 <serial_in_index+0x1>
    475c:	0f 90       	pop	r0
    475e:	0f 90       	pop	r0
    4760:	0f 90       	pop	r0
    4762:	0f 90       	pop	r0
    4764:	85 cf       	rjmp	.-246    	; 0x4670 <__vector_91+0x9c>
    4766:	2c 2f       	mov	r18, r28
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	e2 cf       	rjmp	.-60     	; 0x4730 <__vector_91+0x15c>

0000476c <powerInit>:
	legMonitorInit();
}

void capMonitorInit()
{
	PORTB.DIRCLR = PIN0_bm | PIN1_bm;
    476c:	83 e0       	ldi	r24, 0x03	; 3
    476e:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
	
	ACB.AC0CTRL = AC_ENABLE_bm;
    4772:	e0 e9       	ldi	r30, 0x90	; 144
    4774:	f3 e0       	ldi	r31, 0x03	; 3
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	80 83       	st	Z, r24
	ACB.AC1CTRL = AC_ENABLE_bm;
    477a:	81 83       	std	Z+1, r24	; 0x01
	
	ACB.AC0MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc; //Changed the muxneg from bandgap
    477c:	88 e0       	ldi	r24, 0x08	; 8
    477e:	82 83       	std	Z+2, r24	; 0x02
	ACB.AC1MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc;
    4780:	83 83       	std	Z+3, r24	; 0x03
	
	ACB.WINCTRL = AC_WEN_bm;
    4782:	90 e1       	ldi	r25, 0x10	; 16
    4784:	96 83       	std	Z+6, r25	; 0x06
}

void legMonitorInit()
{
	PORTA.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm;
    4786:	e0 e0       	ldi	r30, 0x00	; 0
    4788:	f6 e0       	ldi	r31, 0x06	; 6
    478a:	8f e1       	ldi	r24, 0x1F	; 31
    478c:	82 83       	std	Z+2, r24	; 0x02
	
	PORTA.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    478e:	87 e0       	ldi	r24, 0x07	; 7
    4790:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    4792:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    4794:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    4796:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    4798:	84 8b       	std	Z+20, r24	; 0x14
	
	ACA.WINCTRL = AC_WEN_bm;					// Enable window mode
    479a:	e0 e8       	ldi	r30, 0x80	; 128
    479c:	f3 e0       	ldi	r31, 0x03	; 3
    479e:	96 83       	std	Z+6, r25	; 0x06
	
	ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN2_gc;	// PA0 is VREF_HI
    47a0:	92 83       	std	Z+2, r25	; 0x02
	ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN2_gc;	// PA1 is VREF_LO
    47a2:	81 e1       	ldi	r24, 0x11	; 17
    47a4:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.AC0CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    47a6:	89 e0       	ldi	r24, 0x09	; 9
    47a8:	80 83       	st	Z, r24
	ACA.AC1CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    47aa:	81 83       	std	Z+1, r24	; 0x01
    47ac:	08 95       	ret

000047ae <randomInit>:
    // Setting this bit will reset the AES crypto module to its initial status on the next positive edge of
    // the peripheral clock. All registers, pointers, and memories in the module are set to their initial
    // value. When written to one, the bit stays high for one clock cycle before it is reset to zero by
    // hardware. (p. 320)

	AES.CTRL = AES_RESET_bm;
    47ae:	80 e2       	ldi	r24, 0x20	; 32
    47b0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    // After encryption/decryption is done, the last subkey can be read sequentially, byte-by-byte,
    // through the KEY register.
    // Loading the initial data to the KEY register should be done after setting the appropriate AES
    // mode and direction. (p. 322)

	AES.KEY = PRODSIGNATURES_LOTNUM0;
    47b4:	88 b1       	in	r24, 0x08	; 8
    47b6:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM1;
    47ba:	89 b1       	in	r24, 0x09	; 9
    47bc:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM2;
    47c0:	8a b1       	in	r24, 0x0a	; 10
    47c2:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM3;
    47c6:	8b b1       	in	r24, 0x0b	; 11
    47c8:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = PRODSIGNATURES_LOTNUM4;
    47cc:	8c b1       	in	r24, 0x0c	; 12
    47ce:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM5;
    47d2:	8d b1       	in	r24, 0x0d	; 13
    47d4:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_WAFNUM;
    47d8:	80 b3       	in	r24, 0x10	; 16
    47da:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDX0;
    47de:	82 b3       	in	r24, 0x12	; 18
    47e0:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = PRODSIGNATURES_COORDX1;
    47e4:	83 b3       	in	r24, 0x13	; 19
    47e6:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDY0;
    47ea:	84 b3       	in	r24, 0x14	; 20
    47ec:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDY1;
    47f0:	85 b3       	in	r24, 0x15	; 21
    47f2:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCA.CH0.RESL;
    47f6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    47fa:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = ADCA.CH1.RESL;
    47fe:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    4802:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCA.CH2.RESL;
    4806:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    480a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCB.CH0.RESL;
    480e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    4812:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCB.CH1.RESL;
    4816:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    481a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	r_round = 1;
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	80 93 0d 23 	sts	0x230D, r24	; 0x80230d <r_round>
    4824:	80 e1       	ldi	r24, 0x10	; 16
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
		AES.STATE = r_round;
    4826:	91 e0       	ldi	r25, 0x01	; 1
    4828:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    482c:	81 50       	subi	r24, 0x01	; 1
    // After encryption/decryption is done, the ciphertext/plaintext can be read sequentially, byte-by-byte,
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
    482e:	e1 f7       	brne	.-8      	; 0x4828 <randomInit+0x7a>
    // Setting this bit starts the encryption/decryption procedure, and this bit remains set while the
    // encryption/decryption is ongoing. Writing this bit to zero will stop/abort any ongoing encryption/
    // decryption process. This bit is automatically cleared if the SRIF or the ERROR flags in
    // STATUS are set. (p. 320)

	AES.CTRL = AES_START_bm | AES_XOR_bm;
    4830:	84 e8       	ldi	r24, 0x84	; 132
    4832:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>

	r_position = 0;
    4836:	10 92 0c 23 	sts	0x230C, r1	; 0x80230c <r_position>
	randNormHasSaved = 0;
    483a:	10 92 0b 23 	sts	0x230B, r1	; 0x80230b <randNormHasSaved>
    483e:	08 95       	ret

00004840 <randByte>:
}

uint8_t randByte(){
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    4840:	90 91 0c 23 	lds	r25, 0x230C	; 0x80230c <r_position>
    4844:	99 23       	and	r25, r25
    4846:	a1 f0       	breq	.+40     	; 0x4870 <randByte+0x30>
	r = AES.STATE;
    4848:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    484c:	9f 5f       	subi	r25, 0xFF	; 255
    484e:	90 93 0c 23 	sts	0x230C, r25	; 0x80230c <r_position>
	if (r_position > 15){
    4852:	90 31       	cpi	r25, 0x10	; 16
    4854:	b0 f0       	brcs	.+44     	; 0x4882 <randByte+0x42>
    4856:	20 91 0d 23 	lds	r18, 0x230D	; 0x80230d <r_round>
    485a:	90 e1       	ldi	r25, 0x10	; 16
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
    485c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    4860:	91 50       	subi	r25, 0x01	; 1
    4862:	e1 f7       	brne	.-8      	; 0x485c <randByte+0x1c>
		AES.CTRL = AES_START_bm | AES_XOR_bm;
    4864:	94 e8       	ldi	r25, 0x84	; 132
    4866:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
		r_position = 0;
    486a:	10 92 0c 23 	sts	0x230C, r1	; 0x80230c <r_position>
    486e:	08 95       	ret
	randNormHasSaved = 0;
}

uint8_t randByte(){
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    4870:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    4874:	80 ff       	sbrs	r24, 0
    4876:	fc cf       	rjmp	.-8      	; 0x4870 <randByte+0x30>
	r = AES.STATE;
    4878:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    487c:	91 e0       	ldi	r25, 0x01	; 1
    487e:	90 93 0c 23 	sts	0x230C, r25	; 0x80230c <r_position>
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
		AES.CTRL = AES_START_bm | AES_XOR_bm;
		r_position = 0;
	}
	return r;
}
    4882:	08 95       	ret

00004884 <randShort>:

uint16_t randShort(){
    4884:	cf 93       	push	r28
	return ((uint16_t)randByte()<<8)|((uint16_t)randByte());
    4886:	0e 94 20 24 	call	0x4840	; 0x4840 <randByte>
    488a:	c8 2f       	mov	r28, r24
    488c:	0e 94 20 24 	call	0x4840	; 0x4840 <randByte>
    4890:	2c 2f       	mov	r18, r28
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	32 2f       	mov	r19, r18
    4896:	22 27       	eor	r18, r18
}
    4898:	a9 01       	movw	r20, r18
    489a:	48 2b       	or	r20, r24
    489c:	ca 01       	movw	r24, r20
    489e:	cf 91       	pop	r28
    48a0:	08 95       	ret

000048a2 <magicRangeFunc>:
	}
	setAllirPowers(prevPower);
}


static float magicRangeFunc(float a){
    48a2:	cf 92       	push	r12
    48a4:	df 92       	push	r13
    48a6:	ef 92       	push	r14
    48a8:	ff 92       	push	r15
    48aa:	6b 01       	movw	r12, r22
    48ac:	7c 01       	movw	r14, r24
	if(a<=0){
    48ae:	20 e0       	ldi	r18, 0x00	; 0
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	a9 01       	movw	r20, r18
    48b4:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__cmpsf2>
    48b8:	18 16       	cp	r1, r24
    48ba:	7c f5       	brge	.+94     	; 0x491a <magicRangeFunc+0x78>
		return NAN;
		}else{
		float result = -24.3675811184*(0.0259969683 + powf(a, -0.5));
    48bc:	20 e0       	ldi	r18, 0x00	; 0
    48be:	30 e0       	ldi	r19, 0x00	; 0
    48c0:	40 e0       	ldi	r20, 0x00	; 0
    48c2:	5f eb       	ldi	r21, 0xBF	; 191
    48c4:	c7 01       	movw	r24, r14
    48c6:	b6 01       	movw	r22, r12
    48c8:	0e 94 c0 4a 	call	0x9580	; 0x9580 <pow>
		result = 1 + exp(result);
    48cc:	28 e9       	ldi	r18, 0x98	; 152
    48ce:	37 ef       	ldi	r19, 0xF7	; 247
    48d0:	44 ed       	ldi	r20, 0xD4	; 212
    48d2:	5c e3       	ldi	r21, 0x3C	; 60
    48d4:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    48d8:	2e ec       	ldi	r18, 0xCE	; 206
    48da:	30 ef       	ldi	r19, 0xF0	; 240
    48dc:	42 ec       	ldi	r20, 0xC2	; 194
    48de:	51 ec       	ldi	r21, 0xC1	; 193
    48e0:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    48e4:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <exp>
		result = (778.0270114700/result) - 528.0270114700;
    48e8:	20 e0       	ldi	r18, 0x00	; 0
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	40 e8       	ldi	r20, 0x80	; 128
    48ee:	5f e3       	ldi	r21, 0x3F	; 63
    48f0:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    48f4:	9b 01       	movw	r18, r22
    48f6:	ac 01       	movw	r20, r24
    48f8:	6b eb       	ldi	r22, 0xBB	; 187
    48fa:	71 e8       	ldi	r23, 0x81	; 129
    48fc:	82 e4       	ldi	r24, 0x42	; 66
    48fe:	94 e4       	ldi	r25, 0x44	; 68
    4900:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    4904:	2b eb       	ldi	r18, 0xBB	; 187
    4906:	31 e0       	ldi	r19, 0x01	; 1
    4908:	44 e0       	ldi	r20, 0x04	; 4
    490a:	54 e4       	ldi	r21, 0x44	; 68
    490c:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
		return result;
	}
}
    4910:	ff 90       	pop	r15
    4912:	ef 90       	pop	r14
    4914:	df 90       	pop	r13
    4916:	cf 90       	pop	r12
    4918:	08 95       	ret
}


static float magicRangeFunc(float a){
	if(a<=0){
		return NAN;
    491a:	60 e0       	ldi	r22, 0x00	; 0
    491c:	70 e0       	ldi	r23, 0x00	; 0
    491e:	80 ec       	ldi	r24, 0xC0	; 192
    4920:	9f e7       	ldi	r25, 0x7F	; 127
		float result = -24.3675811184*(0.0259969683 + powf(a, -0.5));
		result = 1 + exp(result);
		result = (778.0270114700/result) - 528.0270114700;
		return result;
	}
}
    4922:	ff 90       	pop	r15
    4924:	ef 90       	pop	r14
    4926:	df 90       	pop	r13
    4928:	cf 90       	pop	r12
    492a:	08 95       	ret

0000492c <rangeAlgsInit>:
//static float invMagicRangeFunc(float r);

//static void print_brightMeas(void);
												
void rangeAlgsInit(){
	sensorHealthHistory = 0;
    492c:	10 92 56 23 	sts	0x2356, r1	; 0x802356 <sensorHealthHistory>
    4930:	10 92 57 23 	sts	0x2357, r1	; 0x802357 <sensorHealthHistory+0x1>
    4934:	10 92 58 23 	sts	0x2358, r1	; 0x802358 <sensorHealthHistory+0x2>
    4938:	10 92 59 23 	sts	0x2359, r1	; 0x802359 <sensorHealthHistory+0x3>
    493c:	ee e0       	ldi	r30, 0x0E	; 14
    493e:	f3 e2       	ldi	r31, 0x23	; 35
    4940:	86 e5       	ldi	r24, 0x56	; 86
    4942:	93 e2       	ldi	r25, 0x23	; 35
	for(uint8_t i=0 ; i<6 ;i++){
		for(uint8_t j=0 ; j<6 ; j++){
			brightMeas[i][j] = 0;
    4944:	10 82       	st	Z, r1
    4946:	11 82       	std	Z+1, r1	; 0x01
    4948:	12 82       	std	Z+2, r1	; 0x02
    494a:	13 82       	std	Z+3, r1	; 0x03
    494c:	14 82       	std	Z+4, r1	; 0x04
    494e:	15 82       	std	Z+5, r1	; 0x05
    4950:	16 82       	std	Z+6, r1	; 0x06
    4952:	17 82       	std	Z+7, r1	; 0x07
    4954:	10 86       	std	Z+8, r1	; 0x08
    4956:	11 86       	std	Z+9, r1	; 0x09
    4958:	12 86       	std	Z+10, r1	; 0x0a
    495a:	13 86       	std	Z+11, r1	; 0x0b
    495c:	3c 96       	adiw	r30, 0x0c	; 12

//static void print_brightMeas(void);
												
void rangeAlgsInit(){
	sensorHealthHistory = 0;
	for(uint8_t i=0 ; i<6 ;i++){
    495e:	8e 17       	cp	r24, r30
    4960:	9f 07       	cpc	r25, r31
    4962:	81 f7       	brne	.-32     	; 0x4944 <rangeAlgsInit+0x18>
		for(uint8_t j=0 ; j<6 ; j++){
			brightMeas[i][j] = 0;
		}
	}
	rnbCmdID=0;
    4964:	10 92 14 26 	sts	0x2614, r1	; 0x802614 <rnbCmdID>
    4968:	10 92 15 26 	sts	0x2615, r1	; 0x802615 <rnbCmdID+0x1>
	processing_rnb_flag=0;
    496c:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <processing_rnb_flag>
    4970:	08 95       	ret

00004972 <calculate_range>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		processing_rnb_flag=0;
	}
}

float calculate_range(float iRange, float bearing, float heading){
    4972:	2f 92       	push	r2
    4974:	3f 92       	push	r3
    4976:	4f 92       	push	r4
    4978:	5f 92       	push	r5
    497a:	6f 92       	push	r6
    497c:	7f 92       	push	r7
    497e:	8f 92       	push	r8
    4980:	9f 92       	push	r9
    4982:	af 92       	push	r10
    4984:	bf 92       	push	r11
    4986:	cf 92       	push	r12
    4988:	df 92       	push	r13
    498a:	ef 92       	push	r14
    498c:	ff 92       	push	r15
    498e:	0f 93       	push	r16
    4990:	1f 93       	push	r17
    4992:	cf 93       	push	r28
    4994:	df 93       	push	r29
    4996:	cd b7       	in	r28, 0x3d	; 61
    4998:	de b7       	in	r29, 0x3e	; 62
    499a:	cc 54       	subi	r28, 0x4C	; 76
    499c:	d1 09       	sbc	r29, r1
    499e:	cd bf       	out	0x3d, r28	; 61
    49a0:	de bf       	out	0x3e, r29	; 62
    49a2:	4b 01       	movw	r8, r22
    49a4:	5c 01       	movw	r10, r24
    49a6:	29 01       	movw	r4, r18
    49a8:	3a 01       	movw	r6, r20
    49aa:	67 01       	movw	r12, r14
    49ac:	78 01       	movw	r14, r16
	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
    49ae:	ca 01       	movw	r24, r20
    49b0:	b9 01       	movw	r22, r18
    49b2:	0e 94 10 4b 	call	0x9620	; 0x9620 <sin>
    49b6:	9b 01       	movw	r18, r22
    49b8:	ac 01       	movw	r20, r24
    49ba:	c5 01       	movw	r24, r10
    49bc:	b4 01       	movw	r22, r8
    49be:	90 58       	subi	r25, 0x80	; 128
    49c0:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    49c4:	29 96       	adiw	r28, 0x09	; 9
    49c6:	6c af       	std	Y+60, r22	; 0x3c
    49c8:	7d af       	std	Y+61, r23	; 0x3d
    49ca:	8e af       	std	Y+62, r24	; 0x3e
    49cc:	9f af       	std	Y+63, r25	; 0x3f
    49ce:	29 97       	sbiw	r28, 0x09	; 9
    49d0:	c3 01       	movw	r24, r6
    49d2:	b2 01       	movw	r22, r4
    49d4:	0e 94 27 47 	call	0x8e4e	; 0x8e4e <cos>
    49d8:	9b 01       	movw	r18, r22
    49da:	ac 01       	movw	r20, r24
    49dc:	c5 01       	movw	r24, r10
    49de:	b4 01       	movw	r22, r8
    49e0:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    49e4:	2d 96       	adiw	r28, 0x0d	; 13
    49e6:	6c af       	std	Y+60, r22	; 0x3c
    49e8:	7d af       	std	Y+61, r23	; 0x3d
    49ea:	8e af       	std	Y+62, r24	; 0x3e
    49ec:	9f af       	std	Y+63, r25	; 0x3f
    49ee:	2d 97       	sbiw	r28, 0x0d	; 13
    49f0:	c7 01       	movw	r24, r14
    49f2:	b6 01       	movw	r22, r12
    49f4:	0e 94 27 47 	call	0x8e4e	; 0x8e4e <cos>
    49f8:	4b 01       	movw	r8, r22
    49fa:	5c 01       	movw	r10, r24
    49fc:	c7 01       	movw	r24, r14
    49fe:	b6 01       	movw	r22, r12
    4a00:	0e 94 10 4b 	call	0x9620	; 0x9620 <sin>
    4a04:	6b ab       	std	Y+51, r22	; 0x33
    4a06:	7c ab       	std	Y+52, r23	; 0x34
    4a08:	8d ab       	std	Y+53, r24	; 0x35
    4a0a:	9e ab       	std	Y+54, r25	; 0x36
    4a0c:	8e 01       	movw	r16, r28
    4a0e:	0f 5f       	subi	r16, 0xFF	; 255
    4a10:	1f 4f       	sbci	r17, 0xFF	; 255
    4a12:	3d e1       	ldi	r19, 0x1D	; 29
    4a14:	23 2e       	mov	r2, r19
    4a16:	31 e2       	ldi	r19, 0x21	; 33
    4a18:	33 2e       	mov	r3, r19
    4a1a:	ce 01       	movw	r24, r28
    4a1c:	c1 96       	adiw	r24, 0x31	; 49
    4a1e:	89 ab       	std	Y+49, r24	; 0x31
    4a20:	9a ab       	std	Y+50, r25	; 0x32
    4a22:	44 ea       	ldi	r20, 0xA4	; 164
    4a24:	44 2e       	mov	r4, r20
    4a26:	4b e6       	ldi	r20, 0x6B	; 107
    4a28:	54 2e       	mov	r5, r20
    4a2a:	48 e9       	ldi	r20, 0x98	; 152
    4a2c:	64 2e       	mov	r6, r20
    4a2e:	41 e4       	ldi	r20, 0x41	; 65
    4a30:	74 2e       	mov	r7, r20
    4a32:	c1 2c       	mov	r12, r1
    4a34:	d1 2c       	mov	r13, r1
    4a36:	50 e3       	ldi	r21, 0x30	; 48
    4a38:	e5 2e       	mov	r14, r21
    4a3a:	51 e4       	ldi	r21, 0x41	; 65
    4a3c:	f5 2e       	mov	r15, r21
    4a3e:	0c c0       	rjmp	.+24     	; 0x4a58 <calculate_range+0xe6>
    4a40:	d1 01       	movw	r26, r2
    4a42:	cd 90       	ld	r12, X+
    4a44:	dd 90       	ld	r13, X+
    4a46:	ed 90       	ld	r14, X+
    4a48:	fc 90       	ld	r15, X
    4a4a:	13 97       	sbiw	r26, 0x03	; 3
    4a4c:	14 96       	adiw	r26, 0x04	; 4
    4a4e:	4d 90       	ld	r4, X+
    4a50:	5d 90       	ld	r5, X+
    4a52:	6d 90       	ld	r6, X+
    4a54:	7c 90       	ld	r7, X
    4a56:	17 97       	sbiw	r26, 0x07	; 7
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
		txHats[i][0] = hats[i][0]*cos(heading) - hats[i][1]*sin(heading);
    4a58:	a5 01       	movw	r20, r10
    4a5a:	94 01       	movw	r18, r8
    4a5c:	c7 01       	movw	r24, r14
    4a5e:	b6 01       	movw	r22, r12
    4a60:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4a64:	6f ab       	std	Y+55, r22	; 0x37
    4a66:	78 af       	std	Y+56, r23	; 0x38
    4a68:	89 af       	std	Y+57, r24	; 0x39
    4a6a:	9a af       	std	Y+58, r25	; 0x3a
    4a6c:	2b a9       	ldd	r18, Y+51	; 0x33
    4a6e:	3c a9       	ldd	r19, Y+52	; 0x34
    4a70:	4d a9       	ldd	r20, Y+53	; 0x35
    4a72:	5e a9       	ldd	r21, Y+54	; 0x36
    4a74:	c3 01       	movw	r24, r6
    4a76:	b2 01       	movw	r22, r4
    4a78:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4a7c:	9b 01       	movw	r18, r22
    4a7e:	ac 01       	movw	r20, r24
    4a80:	6f a9       	ldd	r22, Y+55	; 0x37
    4a82:	78 ad       	ldd	r23, Y+56	; 0x38
    4a84:	89 ad       	ldd	r24, Y+57	; 0x39
    4a86:	9a ad       	ldd	r25, Y+58	; 0x3a
    4a88:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    4a8c:	d8 01       	movw	r26, r16
    4a8e:	6d 93       	st	X+, r22
    4a90:	7d 93       	st	X+, r23
    4a92:	8d 93       	st	X+, r24
    4a94:	9c 93       	st	X, r25
    4a96:	13 97       	sbiw	r26, 0x03	; 3
		txHats[i][1] = hats[i][0]*sin(heading) + hats[i][1]*cos(heading);
    4a98:	2b a9       	ldd	r18, Y+51	; 0x33
    4a9a:	3c a9       	ldd	r19, Y+52	; 0x34
    4a9c:	4d a9       	ldd	r20, Y+53	; 0x35
    4a9e:	5e a9       	ldd	r21, Y+54	; 0x36
    4aa0:	c7 01       	movw	r24, r14
    4aa2:	b6 01       	movw	r22, r12
    4aa4:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4aa8:	6b 01       	movw	r12, r22
    4aaa:	7c 01       	movw	r14, r24
    4aac:	a3 01       	movw	r20, r6
    4aae:	92 01       	movw	r18, r4
    4ab0:	c5 01       	movw	r24, r10
    4ab2:	b4 01       	movw	r22, r8
    4ab4:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4ab8:	9b 01       	movw	r18, r22
    4aba:	ac 01       	movw	r20, r24
    4abc:	c7 01       	movw	r24, r14
    4abe:	b6 01       	movw	r22, r12
    4ac0:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    4ac4:	f8 01       	movw	r30, r16
    4ac6:	64 83       	std	Z+4, r22	; 0x04
    4ac8:	75 83       	std	Z+5, r23	; 0x05
    4aca:	86 83       	std	Z+6, r24	; 0x06
    4acc:	97 83       	std	Z+7, r25	; 0x07
    4ace:	08 5f       	subi	r16, 0xF8	; 248
    4ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad2:	f8 e0       	ldi	r31, 0x08	; 8
    4ad4:	2f 0e       	add	r2, r31
    4ad6:	31 1c       	adc	r3, r1
}

float calculate_range(float iRange, float bearing, float heading){
	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
    4ad8:	89 a9       	ldd	r24, Y+49	; 0x31
    4ada:	9a a9       	ldd	r25, Y+50	; 0x32
    4adc:	08 17       	cp	r16, r24
    4ade:	19 07       	cpc	r17, r25
    4ae0:	09 f0       	breq	.+2      	; 0x4ae4 <calculate_range+0x172>
    4ae2:	ae cf       	rjmp	.-164    	; 0x4a40 <calculate_range+0xce>
    4ae4:	ae e0       	ldi	r26, 0x0E	; 14
    4ae6:	b3 e2       	ldi	r27, 0x23	; 35
    4ae8:	25 96       	adiw	r28, 0x05	; 5
    4aea:	ae af       	std	Y+62, r26	; 0x3e
    4aec:	bf af       	std	Y+63, r27	; 0x3f
    4aee:	25 97       	sbiw	r28, 0x05	; 5
    4af0:	84 ea       	ldi	r24, 0xA4	; 164
    4af2:	9b e6       	ldi	r25, 0x6B	; 107
    4af4:	a8 e9       	ldi	r26, 0x98	; 152
    4af6:	b1 e4       	ldi	r27, 0x41	; 65
    4af8:	8b af       	std	Y+59, r24	; 0x3b
    4afa:	9c af       	std	Y+60, r25	; 0x3c
    4afc:	ad af       	std	Y+61, r26	; 0x3d
    4afe:	be af       	std	Y+62, r27	; 0x3e
    4b00:	41 2c       	mov	r4, r1
    4b02:	51 2c       	mov	r5, r1
    4b04:	90 e3       	ldi	r25, 0x30	; 48
    4b06:	69 2e       	mov	r6, r25
    4b08:	91 e4       	ldi	r25, 0x41	; 65
    4b0a:	79 2e       	mov	r7, r25
    4b0c:	31 2c       	mov	r3, r1
    4b0e:	23 96       	adiw	r28, 0x03	; 3
    4b10:	1c ae       	std	Y+60, r1	; 0x3c
    4b12:	1d ae       	std	Y+61, r1	; 0x3d
    4b14:	1e ae       	std	Y+62, r1	; 0x3e
    4b16:	1f ae       	std	Y+63, r1	; 0x3f
    4b18:	23 97       	sbiw	r28, 0x03	; 3
	float total = 0;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    4b1a:	2b ea       	ldi	r18, 0xAB	; 171
    4b1c:	22 2e       	mov	r2, r18
    4b1e:	77 c0       	rjmp	.+238    	; 0x4c0e <calculate_range+0x29c>
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
    4b20:	25 96       	adiw	r28, 0x05	; 5
    4b22:	ee ad       	ldd	r30, Y+62	; 0x3e
    4b24:	ff ad       	ldd	r31, Y+63	; 0x3f
    4b26:	25 97       	sbiw	r28, 0x05	; 5
    4b28:	01 91       	ld	r16, Z+
    4b2a:	11 91       	ld	r17, Z+
    4b2c:	25 96       	adiw	r28, 0x05	; 5
    4b2e:	ee af       	std	Y+62, r30	; 0x3e
    4b30:	ff af       	std	Y+63, r31	; 0x3f
    4b32:	25 97       	sbiw	r28, 0x05	; 5
    4b34:	a3 01       	movw	r20, r6
    4b36:	92 01       	movw	r18, r4
    4b38:	c5 01       	movw	r24, r10
    4b3a:	b4 01       	movw	r22, r8
    4b3c:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4b40:	4b 01       	movw	r8, r22
    4b42:	5c 01       	movw	r10, r24
    4b44:	2b a9       	ldd	r18, Y+51	; 0x33
    4b46:	3c a9       	ldd	r19, Y+52	; 0x34
    4b48:	4d a9       	ldd	r20, Y+53	; 0x35
    4b4a:	5e a9       	ldd	r21, Y+54	; 0x36
    4b4c:	ca 01       	movw	r24, r20
    4b4e:	b9 01       	movw	r22, r18
    4b50:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4b54:	2b 01       	movw	r4, r22
    4b56:	3c 01       	movw	r6, r24
    4b58:	a7 01       	movw	r20, r14
    4b5a:	96 01       	movw	r18, r12
    4b5c:	c7 01       	movw	r24, r14
    4b5e:	b6 01       	movw	r22, r12
    4b60:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4b64:	9b 01       	movw	r18, r22
    4b66:	ac 01       	movw	r20, r24
    4b68:	c3 01       	movw	r24, r6
    4b6a:	b2 01       	movw	r22, r4
    4b6c:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    4b70:	20 e0       	ldi	r18, 0x00	; 0
    4b72:	30 e0       	ldi	r19, 0x00	; 0
    4b74:	42 ef       	ldi	r20, 0xF2	; 242
    4b76:	53 e4       	ldi	r21, 0x43	; 67
    4b78:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4b7c:	9b 01       	movw	r18, r22
    4b7e:	ac 01       	movw	r20, r24
    4b80:	c5 01       	movw	r24, r10
    4b82:	b4 01       	movw	r22, r8
    4b84:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    4b88:	6b 01       	movw	r12, r22
    4b8a:	7c 01       	movw	r14, r24
    4b8c:	b8 01       	movw	r22, r16
    4b8e:	11 0f       	add	r17, r17
    4b90:	88 0b       	sbc	r24, r24
    4b92:	99 0b       	sbc	r25, r25
    4b94:	0e 94 10 48 	call	0x9020	; 0x9020 <__floatsisf>
    4b98:	9b 01       	movw	r18, r22
    4b9a:	ac 01       	movw	r20, r24
    4b9c:	c7 01       	movw	r24, r14
    4b9e:	b6 01       	movw	r22, r12
    4ba0:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4ba4:	9b 01       	movw	r18, r22
    4ba6:	ac 01       	movw	r20, r24
    4ba8:	23 96       	adiw	r28, 0x03	; 3
    4baa:	6c ad       	ldd	r22, Y+60	; 0x3c
    4bac:	7d ad       	ldd	r23, Y+61	; 0x3d
    4bae:	8e ad       	ldd	r24, Y+62	; 0x3e
    4bb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bb2:	23 97       	sbiw	r28, 0x03	; 3
    4bb4:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    4bb8:	23 96       	adiw	r28, 0x03	; 3
    4bba:	6c af       	std	Y+60, r22	; 0x3c
    4bbc:	7d af       	std	Y+61, r23	; 0x3d
    4bbe:	8e af       	std	Y+62, r24	; 0x3e
    4bc0:	9f af       	std	Y+63, r25	; 0x3f
    4bc2:	23 97       	sbiw	r28, 0x03	; 3
	float rijMagSq;
	float alphaDotP, betaDotP;
	float cosAcosB;
	float total = 0;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    4bc4:	33 94       	inc	r3
    4bc6:	f4 e2       	ldi	r31, 0x24	; 36
    4bc8:	3f 16       	cp	r3, r31
    4bca:	09 f4       	brne	.+2      	; 0x4bce <calculate_range+0x25c>
    4bcc:	a3 c0       	rjmp	.+326    	; 0x4d14 <calculate_range+0x3a2>
    4bce:	32 9c       	mul	r3, r2
    4bd0:	81 2d       	mov	r24, r1
    4bd2:	11 24       	eor	r1, r1
    4bd4:	86 95       	lsr	r24
    4bd6:	86 95       	lsr	r24
    4bd8:	98 2f       	mov	r25, r24
    4bda:	99 0f       	add	r25, r25
    4bdc:	89 0f       	add	r24, r25
    4bde:	88 0f       	add	r24, r24
    4be0:	e3 2d       	mov	r30, r3
    4be2:	e8 1b       	sub	r30, r24
    4be4:	f0 e0       	ldi	r31, 0x00	; 0
    4be6:	ee 0f       	add	r30, r30
    4be8:	ff 1f       	adc	r31, r31
    4bea:	ee 0f       	add	r30, r30
    4bec:	ff 1f       	adc	r31, r31
    4bee:	ee 0f       	add	r30, r30
    4bf0:	ff 1f       	adc	r31, r31
    4bf2:	e3 5e       	subi	r30, 0xE3	; 227
    4bf4:	fe 4d       	sbci	r31, 0xDE	; 222
    4bf6:	40 80       	ld	r4, Z
    4bf8:	51 80       	ldd	r5, Z+1	; 0x01
    4bfa:	62 80       	ldd	r6, Z+2	; 0x02
    4bfc:	73 80       	ldd	r7, Z+3	; 0x03
    4bfe:	84 81       	ldd	r24, Z+4	; 0x04
    4c00:	95 81       	ldd	r25, Z+5	; 0x05
    4c02:	a6 81       	ldd	r26, Z+6	; 0x06
    4c04:	b7 81       	ldd	r27, Z+7	; 0x07
    4c06:	8b af       	std	Y+59, r24	; 0x3b
    4c08:	9c af       	std	Y+60, r25	; 0x3c
    4c0a:	ad af       	std	Y+61, r26	; 0x3d
    4c0c:	be af       	std	Y+62, r27	; 0x3e
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    4c0e:	32 9c       	mul	r3, r2
    4c10:	81 2d       	mov	r24, r1
    4c12:	11 24       	eor	r1, r1
    4c14:	86 95       	lsr	r24
    4c16:	86 95       	lsr	r24
    4c18:	01 e0       	ldi	r16, 0x01	; 1
    4c1a:	10 e0       	ldi	r17, 0x00	; 0
    4c1c:	0c 0f       	add	r16, r28
    4c1e:	1d 1f       	adc	r17, r29
    4c20:	b8 e0       	ldi	r27, 0x08	; 8
    4c22:	8b 9f       	mul	r24, r27
    4c24:	00 0d       	add	r16, r0
    4c26:	11 1d       	adc	r17, r1
    4c28:	11 24       	eor	r1, r1
    4c2a:	f8 01       	movw	r30, r16
    4c2c:	80 80       	ld	r8, Z
    4c2e:	91 80       	ldd	r9, Z+1	; 0x01
    4c30:	a2 80       	ldd	r10, Z+2	; 0x02
    4c32:	b3 80       	ldd	r11, Z+3	; 0x03
    4c34:	a5 01       	movw	r20, r10
    4c36:	94 01       	movw	r18, r8
    4c38:	29 96       	adiw	r28, 0x09	; 9
    4c3a:	6c ad       	ldd	r22, Y+60	; 0x3c
    4c3c:	7d ad       	ldd	r23, Y+61	; 0x3d
    4c3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c40:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c42:	29 97       	sbiw	r28, 0x09	; 9
    4c44:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    4c48:	a3 01       	movw	r20, r6
    4c4a:	92 01       	movw	r18, r4
    4c4c:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    4c50:	6b ab       	std	Y+51, r22	; 0x33
    4c52:	7c ab       	std	Y+52, r23	; 0x34
    4c54:	8d ab       	std	Y+53, r24	; 0x35
    4c56:	9e ab       	std	Y+54, r25	; 0x36
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
    4c58:	d8 01       	movw	r26, r16
    4c5a:	14 96       	adiw	r26, 0x04	; 4
    4c5c:	8d 91       	ld	r24, X+
    4c5e:	9d 91       	ld	r25, X+
    4c60:	0d 90       	ld	r0, X+
    4c62:	bc 91       	ld	r27, X
    4c64:	a0 2d       	mov	r26, r0
    4c66:	8f ab       	std	Y+55, r24	; 0x37
    4c68:	98 af       	std	Y+56, r25	; 0x38
    4c6a:	a9 af       	std	Y+57, r26	; 0x39
    4c6c:	ba af       	std	Y+58, r27	; 0x3a
    4c6e:	9c 01       	movw	r18, r24
    4c70:	ad 01       	movw	r20, r26
    4c72:	2d 96       	adiw	r28, 0x0d	; 13
    4c74:	6c ad       	ldd	r22, Y+60	; 0x3c
    4c76:	7d ad       	ldd	r23, Y+61	; 0x3d
    4c78:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c7c:	2d 97       	sbiw	r28, 0x0d	; 13
    4c7e:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    4c82:	2b ad       	ldd	r18, Y+59	; 0x3b
    4c84:	3c ad       	ldd	r19, Y+60	; 0x3c
    4c86:	4d ad       	ldd	r20, Y+61	; 0x3d
    4c88:	5e ad       	ldd	r21, Y+62	; 0x3e
    4c8a:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    4c8e:	6b 01       	movw	r12, r22
    4c90:	7c 01       	movw	r14, r24
		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
    4c92:	a3 01       	movw	r20, r6
    4c94:	92 01       	movw	r18, r4
    4c96:	6b a9       	ldd	r22, Y+51	; 0x33
    4c98:	7c a9       	ldd	r23, Y+52	; 0x34
    4c9a:	8d a9       	ldd	r24, Y+53	; 0x35
    4c9c:	9e a9       	ldd	r25, Y+54	; 0x36
    4c9e:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4ca2:	2b 01       	movw	r4, r22
    4ca4:	3c 01       	movw	r6, r24
    4ca6:	2b ad       	ldd	r18, Y+59	; 0x3b
    4ca8:	3c ad       	ldd	r19, Y+60	; 0x3c
    4caa:	4d ad       	ldd	r20, Y+61	; 0x3d
    4cac:	5e ad       	ldd	r21, Y+62	; 0x3e
    4cae:	c7 01       	movw	r24, r14
    4cb0:	b6 01       	movw	r22, r12
    4cb2:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4cb6:	9b 01       	movw	r18, r22
    4cb8:	ac 01       	movw	r20, r24
    4cba:	c3 01       	movw	r24, r6
    4cbc:	b2 01       	movw	r22, r4
    4cbe:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    4cc2:	2b 01       	movw	r4, r22
    4cc4:	3c 01       	movw	r6, r24
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
    4cc6:	6b a9       	ldd	r22, Y+51	; 0x33
    4cc8:	7c a9       	ldd	r23, Y+52	; 0x34
    4cca:	8d a9       	ldd	r24, Y+53	; 0x35
    4ccc:	9e a9       	ldd	r25, Y+54	; 0x36
    4cce:	90 58       	subi	r25, 0x80	; 128
    4cd0:	a5 01       	movw	r20, r10
    4cd2:	94 01       	movw	r18, r8
    4cd4:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4cd8:	4b 01       	movw	r8, r22
    4cda:	5c 01       	movw	r10, r24
    4cdc:	c7 01       	movw	r24, r14
    4cde:	b6 01       	movw	r22, r12
    4ce0:	90 58       	subi	r25, 0x80	; 128
    4ce2:	2f a9       	ldd	r18, Y+55	; 0x37
    4ce4:	38 ad       	ldd	r19, Y+56	; 0x38
    4ce6:	49 ad       	ldd	r20, Y+57	; 0x39
    4ce8:	5a ad       	ldd	r21, Y+58	; 0x3a
    4cea:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4cee:	9b 01       	movw	r18, r22
    4cf0:	ac 01       	movw	r20, r24
    4cf2:	c5 01       	movw	r24, r10
    4cf4:	b4 01       	movw	r22, r8
    4cf6:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    4cfa:	4b 01       	movw	r8, r22
    4cfc:	5c 01       	movw	r10, r24
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    4cfe:	20 e0       	ldi	r18, 0x00	; 0
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	a9 01       	movw	r20, r18
    4d04:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__cmpsf2>
    4d08:	87 ff       	sbrs	r24, 7
    4d0a:	0a cf       	rjmp	.-492    	; 0x4b20 <calculate_range+0x1ae>
    4d0c:	81 2c       	mov	r8, r1
    4d0e:	91 2c       	mov	r9, r1
    4d10:	54 01       	movw	r10, r8
    4d12:	06 cf       	rjmp	.-500    	; 0x4b20 <calculate_range+0x1ae>
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
	}

	return magicRangeFunc(total);
    4d14:	23 96       	adiw	r28, 0x03	; 3
    4d16:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d18:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d1a:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d1e:	23 97       	sbiw	r28, 0x03	; 3
}
    4d20:	c4 5b       	subi	r28, 0xB4	; 180
    4d22:	df 4f       	sbci	r29, 0xFF	; 255
    4d24:	cd bf       	out	0x3d, r28	; 61
    4d26:	de bf       	out	0x3e, r29	; 62
    4d28:	df 91       	pop	r29
    4d2a:	cf 91       	pop	r28
    4d2c:	1f 91       	pop	r17
    4d2e:	0f 91       	pop	r16
    4d30:	ff 90       	pop	r15
    4d32:	ef 90       	pop	r14
    4d34:	df 90       	pop	r13
    4d36:	cf 90       	pop	r12
    4d38:	bf 90       	pop	r11
    4d3a:	af 90       	pop	r10
    4d3c:	9f 90       	pop	r9
    4d3e:	8f 90       	pop	r8
    4d40:	7f 90       	pop	r7
    4d42:	6f 90       	pop	r6
    4d44:	5f 90       	pop	r5
    4d46:	4f 90       	pop	r4
    4d48:	3f 90       	pop	r3
    4d4a:	2f 90       	pop	r2
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
	}

	return magicRangeFunc(total);
    4d4c:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <magicRangeFunc>

00004d50 <calculate_error>:
}

float calculate_error(float r, float b, float h){
    4d50:	2f 92       	push	r2
    4d52:	3f 92       	push	r3
    4d54:	4f 92       	push	r4
    4d56:	5f 92       	push	r5
    4d58:	6f 92       	push	r6
    4d5a:	7f 92       	push	r7
    4d5c:	8f 92       	push	r8
    4d5e:	9f 92       	push	r9
    4d60:	af 92       	push	r10
    4d62:	bf 92       	push	r11
    4d64:	cf 92       	push	r12
    4d66:	df 92       	push	r13
    4d68:	ef 92       	push	r14
    4d6a:	ff 92       	push	r15
    4d6c:	0f 93       	push	r16
    4d6e:	1f 93       	push	r17
    4d70:	cf 93       	push	r28
    4d72:	df 93       	push	r29
    4d74:	cd b7       	in	r28, 0x3d	; 61
    4d76:	de b7       	in	r29, 0x3e	; 62
    4d78:	cc 5e       	subi	r28, 0xEC	; 236
    4d7a:	d1 09       	sbc	r29, r1
    4d7c:	cd bf       	out	0x3d, r28	; 61
    4d7e:	de bf       	out	0x3e, r29	; 62
    4d80:	4b 01       	movw	r8, r22
    4d82:	5c 01       	movw	r10, r24
    4d84:	29 01       	movw	r4, r18
    4d86:	3a 01       	movw	r6, r20
    4d88:	67 01       	movw	r12, r14
    4d8a:	78 01       	movw	r14, r16
	r = r<46 ? 46 : r;
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	48 e3       	ldi	r20, 0x38	; 56
    4d92:	52 e4       	ldi	r21, 0x42	; 66
    4d94:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__cmpsf2>
    4d98:	87 fd       	sbrc	r24, 7
    4d9a:	df c2       	rjmp	.+1470   	; 0x535a <calculate_error+0x60a>
    4d9c:	d5 01       	movw	r26, r10
    4d9e:	c4 01       	movw	r24, r8
    4da0:	b0 58       	subi	r27, 0x80	; 128
    4da2:	cd 53       	subi	r28, 0x3D	; 61
    4da4:	df 4f       	sbci	r29, 0xFF	; 255
    4da6:	88 83       	st	Y, r24
    4da8:	99 83       	std	Y+1, r25	; 0x01
    4daa:	aa 83       	std	Y+2, r26	; 0x02
    4dac:	bb 83       	std	Y+3, r27	; 0x03
    4dae:	c3 5c       	subi	r28, 0xC3	; 195
    4db0:	d0 40       	sbci	r29, 0x00	; 0
	float bigR[2] = {-r*sin(b), r*cos(b)};
    4db2:	c3 01       	movw	r24, r6
    4db4:	b2 01       	movw	r22, r4
    4db6:	0e 94 10 4b 	call	0x9620	; 0x9620 <sin>
    4dba:	cd 53       	subi	r28, 0x3D	; 61
    4dbc:	df 4f       	sbci	r29, 0xFF	; 255
    4dbe:	28 81       	ld	r18, Y
    4dc0:	39 81       	ldd	r19, Y+1	; 0x01
    4dc2:	4a 81       	ldd	r20, Y+2	; 0x02
    4dc4:	5b 81       	ldd	r21, Y+3	; 0x03
    4dc6:	c3 5c       	subi	r28, 0xC3	; 195
    4dc8:	d0 40       	sbci	r29, 0x00	; 0
    4dca:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4dce:	cd 51       	subi	r28, 0x1D	; 29
    4dd0:	df 4f       	sbci	r29, 0xFF	; 255
    4dd2:	68 83       	st	Y, r22
    4dd4:	79 83       	std	Y+1, r23	; 0x01
    4dd6:	8a 83       	std	Y+2, r24	; 0x02
    4dd8:	9b 83       	std	Y+3, r25	; 0x03
    4dda:	c3 5e       	subi	r28, 0xE3	; 227
    4ddc:	d0 40       	sbci	r29, 0x00	; 0
    4dde:	c3 01       	movw	r24, r6
    4de0:	b2 01       	movw	r22, r4
    4de2:	0e 94 27 47 	call	0x8e4e	; 0x8e4e <cos>
    4de6:	9b 01       	movw	r18, r22
    4de8:	ac 01       	movw	r20, r24
    4dea:	c5 01       	movw	r24, r10
    4dec:	b4 01       	movw	r22, r8
    4dee:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4df2:	c9 51       	subi	r28, 0x19	; 25
    4df4:	df 4f       	sbci	r29, 0xFF	; 255
    4df6:	68 83       	st	Y, r22
    4df8:	79 83       	std	Y+1, r23	; 0x01
    4dfa:	8a 83       	std	Y+2, r24	; 0x02
    4dfc:	9b 83       	std	Y+3, r25	; 0x03
    4dfe:	c7 5e       	subi	r28, 0xE7	; 231
    4e00:	d0 40       	sbci	r29, 0x00	; 0
    4e02:	c7 01       	movw	r24, r14
    4e04:	b6 01       	movw	r22, r12
    4e06:	0e 94 27 47 	call	0x8e4e	; 0x8e4e <cos>
    4e0a:	cd 53       	subi	r28, 0x3D	; 61
    4e0c:	df 4f       	sbci	r29, 0xFF	; 255
    4e0e:	68 83       	st	Y, r22
    4e10:	79 83       	std	Y+1, r23	; 0x01
    4e12:	8a 83       	std	Y+2, r24	; 0x02
    4e14:	9b 83       	std	Y+3, r25	; 0x03
    4e16:	c3 5c       	subi	r28, 0xC3	; 195
    4e18:	d0 40       	sbci	r29, 0x00	; 0
    4e1a:	c7 01       	movw	r24, r14
    4e1c:	b6 01       	movw	r22, r12
    4e1e:	0e 94 10 4b 	call	0x9620	; 0x9620 <sin>
    4e22:	2b 01       	movw	r4, r22
    4e24:	3c 01       	movw	r6, r24
    4e26:	de 01       	movw	r26, r28
    4e28:	af 56       	subi	r26, 0x6F	; 111
    4e2a:	bf 4f       	sbci	r27, 0xFF	; 255
    4e2c:	cf 53       	subi	r28, 0x3F	; 63
    4e2e:	df 4f       	sbci	r29, 0xFF	; 255
    4e30:	a8 83       	st	Y, r26
    4e32:	b9 83       	std	Y+1, r27	; 0x01
    4e34:	c1 5c       	subi	r28, 0xC1	; 193
    4e36:	d0 40       	sbci	r29, 0x00	; 0
    4e38:	8d 01       	movw	r16, r26
    4e3a:	3d e1       	ldi	r19, 0x1D	; 29
    4e3c:	23 2e       	mov	r2, r19
    4e3e:	31 e2       	ldi	r19, 0x21	; 33
    4e40:	33 2e       	mov	r3, r19
    4e42:	fd 01       	movw	r30, r26
    4e44:	f0 96       	adiw	r30, 0x30	; 48
    4e46:	c5 53       	subi	r28, 0x35	; 53
    4e48:	df 4f       	sbci	r29, 0xFF	; 255
    4e4a:	e8 83       	st	Y, r30
    4e4c:	f9 83       	std	Y+1, r31	; 0x01
    4e4e:	cb 5c       	subi	r28, 0xCB	; 203
    4e50:	d0 40       	sbci	r29, 0x00	; 0
    4e52:	44 ea       	ldi	r20, 0xA4	; 164
    4e54:	84 2e       	mov	r8, r20
    4e56:	4b e6       	ldi	r20, 0x6B	; 107
    4e58:	94 2e       	mov	r9, r20
    4e5a:	48 e9       	ldi	r20, 0x98	; 152
    4e5c:	a4 2e       	mov	r10, r20
    4e5e:	41 e4       	ldi	r20, 0x41	; 65
    4e60:	b4 2e       	mov	r11, r20
    4e62:	c1 2c       	mov	r12, r1
    4e64:	d1 2c       	mov	r13, r1
    4e66:	50 e3       	ldi	r21, 0x30	; 48
    4e68:	e5 2e       	mov	r14, r21
    4e6a:	51 e4       	ldi	r21, 0x41	; 65
    4e6c:	f5 2e       	mov	r15, r21
    4e6e:	0c c0       	rjmp	.+24     	; 0x4e88 <calculate_error+0x138>
    4e70:	d1 01       	movw	r26, r2
    4e72:	cd 90       	ld	r12, X+
    4e74:	dd 90       	ld	r13, X+
    4e76:	ed 90       	ld	r14, X+
    4e78:	fc 90       	ld	r15, X
    4e7a:	13 97       	sbiw	r26, 0x03	; 3
    4e7c:	14 96       	adiw	r26, 0x04	; 4
    4e7e:	8d 90       	ld	r8, X+
    4e80:	9d 90       	ld	r9, X+
    4e82:	ad 90       	ld	r10, X+
    4e84:	bc 90       	ld	r11, X
    4e86:	17 97       	sbiw	r26, 0x07	; 7
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
		txHats[i][0] = hats[i][0]*cos(h) - hats[i][1]*sin(h);
    4e88:	cd 53       	subi	r28, 0x3D	; 61
    4e8a:	df 4f       	sbci	r29, 0xFF	; 255
    4e8c:	28 81       	ld	r18, Y
    4e8e:	39 81       	ldd	r19, Y+1	; 0x01
    4e90:	4a 81       	ldd	r20, Y+2	; 0x02
    4e92:	5b 81       	ldd	r21, Y+3	; 0x03
    4e94:	c3 5c       	subi	r28, 0xC3	; 195
    4e96:	d0 40       	sbci	r29, 0x00	; 0
    4e98:	c7 01       	movw	r24, r14
    4e9a:	b6 01       	movw	r22, r12
    4e9c:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4ea0:	c9 53       	subi	r28, 0x39	; 57
    4ea2:	df 4f       	sbci	r29, 0xFF	; 255
    4ea4:	68 83       	st	Y, r22
    4ea6:	79 83       	std	Y+1, r23	; 0x01
    4ea8:	8a 83       	std	Y+2, r24	; 0x02
    4eaa:	9b 83       	std	Y+3, r25	; 0x03
    4eac:	c7 5c       	subi	r28, 0xC7	; 199
    4eae:	d0 40       	sbci	r29, 0x00	; 0
    4eb0:	a3 01       	movw	r20, r6
    4eb2:	92 01       	movw	r18, r4
    4eb4:	c5 01       	movw	r24, r10
    4eb6:	b4 01       	movw	r22, r8
    4eb8:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4ebc:	9b 01       	movw	r18, r22
    4ebe:	ac 01       	movw	r20, r24
    4ec0:	c9 53       	subi	r28, 0x39	; 57
    4ec2:	df 4f       	sbci	r29, 0xFF	; 255
    4ec4:	68 81       	ld	r22, Y
    4ec6:	79 81       	ldd	r23, Y+1	; 0x01
    4ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eca:	9b 81       	ldd	r25, Y+3	; 0x03
    4ecc:	c7 5c       	subi	r28, 0xC7	; 199
    4ece:	d0 40       	sbci	r29, 0x00	; 0
    4ed0:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    4ed4:	d8 01       	movw	r26, r16
    4ed6:	6d 93       	st	X+, r22
    4ed8:	7d 93       	st	X+, r23
    4eda:	8d 93       	st	X+, r24
    4edc:	9c 93       	st	X, r25
    4ede:	13 97       	sbiw	r26, 0x03	; 3
		txHats[i][1] = hats[i][0]*sin(h) + hats[i][1]*cos(h);
    4ee0:	a3 01       	movw	r20, r6
    4ee2:	92 01       	movw	r18, r4
    4ee4:	c7 01       	movw	r24, r14
    4ee6:	b6 01       	movw	r22, r12
    4ee8:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4eec:	6b 01       	movw	r12, r22
    4eee:	7c 01       	movw	r14, r24
    4ef0:	a5 01       	movw	r20, r10
    4ef2:	94 01       	movw	r18, r8
    4ef4:	cd 53       	subi	r28, 0x3D	; 61
    4ef6:	df 4f       	sbci	r29, 0xFF	; 255
    4ef8:	68 81       	ld	r22, Y
    4efa:	79 81       	ldd	r23, Y+1	; 0x01
    4efc:	8a 81       	ldd	r24, Y+2	; 0x02
    4efe:	9b 81       	ldd	r25, Y+3	; 0x03
    4f00:	c3 5c       	subi	r28, 0xC3	; 195
    4f02:	d0 40       	sbci	r29, 0x00	; 0
    4f04:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4f08:	9b 01       	movw	r18, r22
    4f0a:	ac 01       	movw	r20, r24
    4f0c:	c7 01       	movw	r24, r14
    4f0e:	b6 01       	movw	r22, r12
    4f10:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    4f14:	f8 01       	movw	r30, r16
    4f16:	64 83       	std	Z+4, r22	; 0x04
    4f18:	75 83       	std	Z+5, r23	; 0x05
    4f1a:	86 83       	std	Z+6, r24	; 0x06
    4f1c:	97 83       	std	Z+7, r25	; 0x07
    4f1e:	08 5f       	subi	r16, 0xF8	; 248
    4f20:	1f 4f       	sbci	r17, 0xFF	; 255
    4f22:	f8 e0       	ldi	r31, 0x08	; 8
    4f24:	2f 0e       	add	r2, r31
    4f26:	31 1c       	adc	r3, r1

float calculate_error(float r, float b, float h){
	r = r<46 ? 46 : r;
	float bigR[2] = {-r*sin(b), r*cos(b)};
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
    4f28:	c5 53       	subi	r28, 0x35	; 53
    4f2a:	df 4f       	sbci	r29, 0xFF	; 255
    4f2c:	88 81       	ld	r24, Y
    4f2e:	99 81       	ldd	r25, Y+1	; 0x01
    4f30:	cb 5c       	subi	r28, 0xCB	; 203
    4f32:	d0 40       	sbci	r29, 0x00	; 0
    4f34:	08 17       	cp	r16, r24
    4f36:	19 07       	cpc	r17, r25
    4f38:	09 f0       	breq	.+2      	; 0x4f3c <calculate_error+0x1ec>
    4f3a:	9a cf       	rjmp	.-204    	; 0x4e70 <calculate_error+0x120>
    4f3c:	ae e0       	ldi	r26, 0x0E	; 14
    4f3e:	b3 e2       	ldi	r27, 0x23	; 35
    4f40:	c5 51       	subi	r28, 0x15	; 21
    4f42:	df 4f       	sbci	r29, 0xFF	; 255
    4f44:	a8 83       	st	Y, r26
    4f46:	b9 83       	std	Y+1, r27	; 0x01
    4f48:	cb 5e       	subi	r28, 0xEB	; 235
    4f4a:	d0 40       	sbci	r29, 0x00	; 0
    4f4c:	fe 01       	movw	r30, r28
    4f4e:	31 96       	adiw	r30, 0x01	; 1
    4f50:	1f 01       	movw	r2, r30
    4f52:	c3 52       	subi	r28, 0x23	; 35
    4f54:	df 4f       	sbci	r29, 0xFF	; 255
    4f56:	e8 83       	st	Y, r30
    4f58:	f9 83       	std	Y+1, r31	; 0x01
    4f5a:	cd 5d       	subi	r28, 0xDD	; 221
    4f5c:	d0 40       	sbci	r29, 0x00	; 0
    4f5e:	c5 52       	subi	r28, 0x25	; 37
    4f60:	df 4f       	sbci	r29, 0xFF	; 255
    4f62:	a8 83       	st	Y, r26
    4f64:	b9 83       	std	Y+1, r27	; 0x01
    4f66:	cb 5d       	subi	r28, 0xDB	; 219
    4f68:	d0 40       	sbci	r29, 0x00	; 0
    4f6a:	84 ea       	ldi	r24, 0xA4	; 164
    4f6c:	9b e6       	ldi	r25, 0x6B	; 107
    4f6e:	a8 e9       	ldi	r26, 0x98	; 152
    4f70:	b1 e4       	ldi	r27, 0x41	; 65
    4f72:	c9 52       	subi	r28, 0x29	; 41
    4f74:	df 4f       	sbci	r29, 0xFF	; 255
    4f76:	88 83       	st	Y, r24
    4f78:	99 83       	std	Y+1, r25	; 0x01
    4f7a:	aa 83       	std	Y+2, r26	; 0x02
    4f7c:	bb 83       	std	Y+3, r27	; 0x03
    4f7e:	c7 5d       	subi	r28, 0xD7	; 215
    4f80:	d0 40       	sbci	r29, 0x00	; 0
    4f82:	41 2c       	mov	r4, r1
    4f84:	51 2c       	mov	r5, r1
    4f86:	20 e3       	ldi	r18, 0x30	; 48
    4f88:	62 2e       	mov	r6, r18
    4f8a:	21 e4       	ldi	r18, 0x41	; 65
    4f8c:	72 2e       	mov	r7, r18
    4f8e:	10 e0       	ldi	r17, 0x00	; 0
    4f90:	c5 53       	subi	r28, 0x35	; 53
    4f92:	df 4f       	sbci	r29, 0xFF	; 255
    4f94:	18 82       	st	Y, r1
    4f96:	19 82       	std	Y+1, r1	; 0x01
    4f98:	1a 82       	std	Y+2, r1	; 0x02
    4f9a:	1b 82       	std	Y+3, r1	; 0x03
    4f9c:	cb 5c       	subi	r28, 0xCB	; 203
    4f9e:	d0 40       	sbci	r29, 0x00	; 0
    4fa0:	c9 53       	subi	r28, 0x39	; 57
    4fa2:	df 4f       	sbci	r29, 0xFF	; 255
    4fa4:	18 82       	st	Y, r1
    4fa6:	19 82       	std	Y+1, r1	; 0x01
    4fa8:	1a 82       	std	Y+2, r1	; 0x02
    4faa:	1b 82       	std	Y+3, r1	; 0x03
    4fac:	c7 5c       	subi	r28, 0xC7	; 199
    4fae:	d0 40       	sbci	r29, 0x00	; 0
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    4fb0:	0b ea       	ldi	r16, 0xAB	; 171
    4fb2:	c1 c0       	rjmp	.+386    	; 0x5136 <calculate_error+0x3e6>
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];

		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
    4fb4:	cd 53       	subi	r28, 0x3D	; 61
    4fb6:	df 4f       	sbci	r29, 0xFF	; 255
    4fb8:	68 81       	ld	r22, Y
    4fba:	79 81       	ldd	r23, Y+1	; 0x01
    4fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    4fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    4fc0:	c3 5c       	subi	r28, 0xC3	; 195
    4fc2:	d0 40       	sbci	r29, 0x00	; 0
    4fc4:	90 58       	subi	r25, 0x80	; 128
    4fc6:	c1 53       	subi	r28, 0x31	; 49
    4fc8:	df 4f       	sbci	r29, 0xFF	; 255
    4fca:	28 81       	ld	r18, Y
    4fcc:	39 81       	ldd	r19, Y+1	; 0x01
    4fce:	4a 81       	ldd	r20, Y+2	; 0x02
    4fd0:	5b 81       	ldd	r21, Y+3	; 0x03
    4fd2:	cf 5c       	subi	r28, 0xCF	; 207
    4fd4:	d0 40       	sbci	r29, 0x00	; 0
    4fd6:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4fda:	2b 01       	movw	r4, r22
    4fdc:	3c 01       	movw	r6, r24
    4fde:	c7 01       	movw	r24, r14
    4fe0:	b6 01       	movw	r22, r12
    4fe2:	90 58       	subi	r25, 0x80	; 128
    4fe4:	cd 52       	subi	r28, 0x2D	; 45
    4fe6:	df 4f       	sbci	r29, 0xFF	; 255
    4fe8:	28 81       	ld	r18, Y
    4fea:	39 81       	ldd	r19, Y+1	; 0x01
    4fec:	4a 81       	ldd	r20, Y+2	; 0x02
    4fee:	5b 81       	ldd	r21, Y+3	; 0x03
    4ff0:	c3 5d       	subi	r28, 0xD3	; 211
    4ff2:	d0 40       	sbci	r29, 0x00	; 0
    4ff4:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    4ff8:	9b 01       	movw	r18, r22
    4ffa:	ac 01       	movw	r20, r24
    4ffc:	c3 01       	movw	r24, r6
    4ffe:	b2 01       	movw	r22, r4
    5000:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    5004:	6b 01       	movw	r12, r22
    5006:	7c 01       	movw	r14, r24
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    5008:	20 e0       	ldi	r18, 0x00	; 0
    500a:	30 e0       	ldi	r19, 0x00	; 0
    500c:	a9 01       	movw	r20, r18
    500e:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__cmpsf2>
    5012:	87 fd       	sbrc	r24, 7
    5014:	3b c1       	rjmp	.+630    	; 0x528c <calculate_error+0x53c>

		measTotal += fast_bm[i];
    5016:	c5 52       	subi	r28, 0x25	; 37
    5018:	df 4f       	sbci	r29, 0xFF	; 255
    501a:	e8 81       	ld	r30, Y
    501c:	f9 81       	ldd	r31, Y+1	; 0x01
    501e:	cb 5d       	subi	r28, 0xDB	; 219
    5020:	d0 40       	sbci	r29, 0x00	; 0
    5022:	61 91       	ld	r22, Z+
    5024:	71 91       	ld	r23, Z+
    5026:	c5 52       	subi	r28, 0x25	; 37
    5028:	df 4f       	sbci	r29, 0xFF	; 255
    502a:	e8 83       	st	Y, r30
    502c:	f9 83       	std	Y+1, r31	; 0x01
    502e:	cb 5d       	subi	r28, 0xDB	; 219
    5030:	d0 40       	sbci	r29, 0x00	; 0
    5032:	07 2e       	mov	r0, r23
    5034:	00 0c       	add	r0, r0
    5036:	88 0b       	sbc	r24, r24
    5038:	99 0b       	sbc	r25, r25
    503a:	0e 94 10 48 	call	0x9020	; 0x9020 <__floatsisf>
    503e:	9b 01       	movw	r18, r22
    5040:	ac 01       	movw	r20, r24
    5042:	c9 53       	subi	r28, 0x39	; 57
    5044:	df 4f       	sbci	r29, 0xFF	; 255
    5046:	68 81       	ld	r22, Y
    5048:	79 81       	ldd	r23, Y+1	; 0x01
    504a:	8a 81       	ldd	r24, Y+2	; 0x02
    504c:	9b 81       	ldd	r25, Y+3	; 0x03
    504e:	c7 5c       	subi	r28, 0xC7	; 199
    5050:	d0 40       	sbci	r29, 0x00	; 0
    5052:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    5056:	c9 53       	subi	r28, 0x39	; 57
    5058:	df 4f       	sbci	r29, 0xFF	; 255
    505a:	68 83       	st	Y, r22
    505c:	79 83       	std	Y+1, r23	; 0x01
    505e:	8a 83       	std	Y+2, r24	; 0x02
    5060:	9b 83       	std	Y+3, r25	; 0x03
    5062:	c7 5c       	subi	r28, 0xC7	; 199
    5064:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
    5066:	a7 01       	movw	r20, r14
    5068:	96 01       	movw	r18, r12
    506a:	c5 01       	movw	r24, r10
    506c:	b4 01       	movw	r22, r8
    506e:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5072:	6b 01       	movw	r12, r22
    5074:	7c 01       	movw	r14, r24
    5076:	20 e0       	ldi	r18, 0x00	; 0
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	42 ef       	ldi	r20, 0xF2	; 242
    507c:	53 e4       	ldi	r21, 0x43	; 67
    507e:	c1 52       	subi	r28, 0x21	; 33
    5080:	df 4f       	sbci	r29, 0xFF	; 255
    5082:	68 81       	ld	r22, Y
    5084:	79 81       	ldd	r23, Y+1	; 0x01
    5086:	8a 81       	ldd	r24, Y+2	; 0x02
    5088:	9b 81       	ldd	r25, Y+3	; 0x03
    508a:	cf 5d       	subi	r28, 0xDF	; 223
    508c:	d0 40       	sbci	r29, 0x00	; 0
    508e:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5092:	9b 01       	movw	r18, r22
    5094:	ac 01       	movw	r20, r24
    5096:	c7 01       	movw	r24, r14
    5098:	b6 01       	movw	r22, r12
    509a:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    509e:	9b 01       	movw	r18, r22
    50a0:	ac 01       	movw	r20, r24
    50a2:	c3 52       	subi	r28, 0x23	; 35
    50a4:	df 4f       	sbci	r29, 0xFF	; 255
    50a6:	a8 81       	ld	r26, Y
    50a8:	b9 81       	ldd	r27, Y+1	; 0x01
    50aa:	cd 5d       	subi	r28, 0xDD	; 221
    50ac:	d0 40       	sbci	r29, 0x00	; 0
    50ae:	6d 93       	st	X+, r22
    50b0:	7d 93       	st	X+, r23
    50b2:	8d 93       	st	X+, r24
    50b4:	9d 93       	st	X+, r25
    50b6:	c3 52       	subi	r28, 0x23	; 35
    50b8:	df 4f       	sbci	r29, 0xFF	; 255
    50ba:	a8 83       	st	Y, r26
    50bc:	b9 83       	std	Y+1, r27	; 0x01
    50be:	cd 5d       	subi	r28, 0xDD	; 221
    50c0:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosBTotal += cosAcosB[i];
    50c2:	c5 53       	subi	r28, 0x35	; 53
    50c4:	df 4f       	sbci	r29, 0xFF	; 255
    50c6:	68 81       	ld	r22, Y
    50c8:	79 81       	ldd	r23, Y+1	; 0x01
    50ca:	8a 81       	ldd	r24, Y+2	; 0x02
    50cc:	9b 81       	ldd	r25, Y+3	; 0x03
    50ce:	cb 5c       	subi	r28, 0xCB	; 203
    50d0:	d0 40       	sbci	r29, 0x00	; 0
    50d2:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    50d6:	c5 53       	subi	r28, 0x35	; 53
    50d8:	df 4f       	sbci	r29, 0xFF	; 255
    50da:	68 83       	st	Y, r22
    50dc:	79 83       	std	Y+1, r23	; 0x01
    50de:	8a 83       	std	Y+2, r24	; 0x02
    50e0:	9b 83       	std	Y+3, r25	; 0x03
    50e2:	cb 5c       	subi	r28, 0xCB	; 203
    50e4:	d0 40       	sbci	r29, 0x00	; 0
	float measTotal = 0;
	float cosAcosBTotal = 0;
	float cosAcosBmat[6][6];
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    50e6:	1f 5f       	subi	r17, 0xFF	; 255
    50e8:	14 32       	cpi	r17, 0x24	; 36
    50ea:	09 f4       	brne	.+2      	; 0x50ee <calculate_error+0x39e>
    50ec:	d3 c0       	rjmp	.+422    	; 0x5294 <calculate_error+0x544>
    50ee:	10 9f       	mul	r17, r16
    50f0:	81 2d       	mov	r24, r1
    50f2:	11 24       	eor	r1, r1
    50f4:	86 95       	lsr	r24
    50f6:	86 95       	lsr	r24
    50f8:	98 2f       	mov	r25, r24
    50fa:	99 0f       	add	r25, r25
    50fc:	89 0f       	add	r24, r25
    50fe:	88 0f       	add	r24, r24
    5100:	e1 2f       	mov	r30, r17
    5102:	e8 1b       	sub	r30, r24
    5104:	f0 e0       	ldi	r31, 0x00	; 0
    5106:	ee 0f       	add	r30, r30
    5108:	ff 1f       	adc	r31, r31
    510a:	ee 0f       	add	r30, r30
    510c:	ff 1f       	adc	r31, r31
    510e:	ee 0f       	add	r30, r30
    5110:	ff 1f       	adc	r31, r31
    5112:	e3 5e       	subi	r30, 0xE3	; 227
    5114:	fe 4d       	sbci	r31, 0xDE	; 222
    5116:	40 80       	ld	r4, Z
    5118:	51 80       	ldd	r5, Z+1	; 0x01
    511a:	62 80       	ldd	r6, Z+2	; 0x02
    511c:	73 80       	ldd	r7, Z+3	; 0x03
    511e:	84 81       	ldd	r24, Z+4	; 0x04
    5120:	95 81       	ldd	r25, Z+5	; 0x05
    5122:	a6 81       	ldd	r26, Z+6	; 0x06
    5124:	b7 81       	ldd	r27, Z+7	; 0x07
    5126:	c9 52       	subi	r28, 0x29	; 41
    5128:	df 4f       	sbci	r29, 0xFF	; 255
    512a:	88 83       	st	Y, r24
    512c:	99 83       	std	Y+1, r25	; 0x01
    512e:	aa 83       	std	Y+2, r26	; 0x02
    5130:	bb 83       	std	Y+3, r27	; 0x03
    5132:	c7 5d       	subi	r28, 0xD7	; 215
    5134:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    5136:	10 9f       	mul	r17, r16
    5138:	81 2d       	mov	r24, r1
    513a:	11 24       	eor	r1, r1
    513c:	86 95       	lsr	r24
    513e:	86 95       	lsr	r24
    5140:	91 e9       	ldi	r25, 0x91	; 145
    5142:	e9 2e       	mov	r14, r25
    5144:	f1 2c       	mov	r15, r1
    5146:	ec 0e       	add	r14, r28
    5148:	fd 1e       	adc	r15, r29
    514a:	b8 e0       	ldi	r27, 0x08	; 8
    514c:	8b 9f       	mul	r24, r27
    514e:	e0 0c       	add	r14, r0
    5150:	f1 1c       	adc	r15, r1
    5152:	11 24       	eor	r1, r1
    5154:	d7 01       	movw	r26, r14
    5156:	8d 91       	ld	r24, X+
    5158:	9d 91       	ld	r25, X+
    515a:	0d 90       	ld	r0, X+
    515c:	bc 91       	ld	r27, X
    515e:	a0 2d       	mov	r26, r0
    5160:	c1 53       	subi	r28, 0x31	; 49
    5162:	df 4f       	sbci	r29, 0xFF	; 255
    5164:	88 83       	st	Y, r24
    5166:	99 83       	std	Y+1, r25	; 0x01
    5168:	aa 83       	std	Y+2, r26	; 0x02
    516a:	bb 83       	std	Y+3, r27	; 0x03
    516c:	cf 5c       	subi	r28, 0xCF	; 207
    516e:	d0 40       	sbci	r29, 0x00	; 0
    5170:	9c 01       	movw	r18, r24
    5172:	ad 01       	movw	r20, r26
    5174:	cd 51       	subi	r28, 0x1D	; 29
    5176:	df 4f       	sbci	r29, 0xFF	; 255
    5178:	68 81       	ld	r22, Y
    517a:	79 81       	ldd	r23, Y+1	; 0x01
    517c:	8a 81       	ldd	r24, Y+2	; 0x02
    517e:	9b 81       	ldd	r25, Y+3	; 0x03
    5180:	c3 5e       	subi	r28, 0xE3	; 227
    5182:	d0 40       	sbci	r29, 0x00	; 0
    5184:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    5188:	a3 01       	movw	r20, r6
    518a:	92 01       	movw	r18, r4
    518c:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    5190:	cd 53       	subi	r28, 0x3D	; 61
    5192:	df 4f       	sbci	r29, 0xFF	; 255
    5194:	68 83       	st	Y, r22
    5196:	79 83       	std	Y+1, r23	; 0x01
    5198:	8a 83       	std	Y+2, r24	; 0x02
    519a:	9b 83       	std	Y+3, r25	; 0x03
    519c:	c3 5c       	subi	r28, 0xC3	; 195
    519e:	d0 40       	sbci	r29, 0x00	; 0
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
    51a0:	d7 01       	movw	r26, r14
    51a2:	14 96       	adiw	r26, 0x04	; 4
    51a4:	8d 91       	ld	r24, X+
    51a6:	9d 91       	ld	r25, X+
    51a8:	0d 90       	ld	r0, X+
    51aa:	bc 91       	ld	r27, X
    51ac:	a0 2d       	mov	r26, r0
    51ae:	cd 52       	subi	r28, 0x2D	; 45
    51b0:	df 4f       	sbci	r29, 0xFF	; 255
    51b2:	88 83       	st	Y, r24
    51b4:	99 83       	std	Y+1, r25	; 0x01
    51b6:	aa 83       	std	Y+2, r26	; 0x02
    51b8:	bb 83       	std	Y+3, r27	; 0x03
    51ba:	c3 5d       	subi	r28, 0xD3	; 211
    51bc:	d0 40       	sbci	r29, 0x00	; 0
    51be:	9c 01       	movw	r18, r24
    51c0:	ad 01       	movw	r20, r26
    51c2:	c9 51       	subi	r28, 0x19	; 25
    51c4:	df 4f       	sbci	r29, 0xFF	; 255
    51c6:	68 81       	ld	r22, Y
    51c8:	79 81       	ldd	r23, Y+1	; 0x01
    51ca:	8a 81       	ldd	r24, Y+2	; 0x02
    51cc:	9b 81       	ldd	r25, Y+3	; 0x03
    51ce:	c7 5e       	subi	r28, 0xE7	; 231
    51d0:	d0 40       	sbci	r29, 0x00	; 0
    51d2:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    51d6:	c9 52       	subi	r28, 0x29	; 41
    51d8:	df 4f       	sbci	r29, 0xFF	; 255
    51da:	28 81       	ld	r18, Y
    51dc:	39 81       	ldd	r19, Y+1	; 0x01
    51de:	4a 81       	ldd	r20, Y+2	; 0x02
    51e0:	5b 81       	ldd	r21, Y+3	; 0x03
    51e2:	c7 5d       	subi	r28, 0xD7	; 215
    51e4:	d0 40       	sbci	r29, 0x00	; 0
    51e6:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    51ea:	6b 01       	movw	r12, r22
    51ec:	7c 01       	movw	r14, r24
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
    51ee:	cd 53       	subi	r28, 0x3D	; 61
    51f0:	df 4f       	sbci	r29, 0xFF	; 255
    51f2:	28 81       	ld	r18, Y
    51f4:	39 81       	ldd	r19, Y+1	; 0x01
    51f6:	4a 81       	ldd	r20, Y+2	; 0x02
    51f8:	5b 81       	ldd	r21, Y+3	; 0x03
    51fa:	c3 5c       	subi	r28, 0xC3	; 195
    51fc:	d0 40       	sbci	r29, 0x00	; 0
    51fe:	ca 01       	movw	r24, r20
    5200:	b9 01       	movw	r22, r18
    5202:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5206:	4b 01       	movw	r8, r22
    5208:	5c 01       	movw	r10, r24
    520a:	a7 01       	movw	r20, r14
    520c:	96 01       	movw	r18, r12
    520e:	c7 01       	movw	r24, r14
    5210:	b6 01       	movw	r22, r12
    5212:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5216:	9b 01       	movw	r18, r22
    5218:	ac 01       	movw	r20, r24
    521a:	c5 01       	movw	r24, r10
    521c:	b4 01       	movw	r22, r8
    521e:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    5222:	c1 52       	subi	r28, 0x21	; 33
    5224:	df 4f       	sbci	r29, 0xFF	; 255
    5226:	68 83       	st	Y, r22
    5228:	79 83       	std	Y+1, r23	; 0x01
    522a:	8a 83       	std	Y+2, r24	; 0x02
    522c:	9b 83       	std	Y+3, r25	; 0x03
    522e:	cf 5d       	subi	r28, 0xDF	; 223
    5230:	d0 40       	sbci	r29, 0x00	; 0

		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
    5232:	a3 01       	movw	r20, r6
    5234:	92 01       	movw	r18, r4
    5236:	cd 53       	subi	r28, 0x3D	; 61
    5238:	df 4f       	sbci	r29, 0xFF	; 255
    523a:	68 81       	ld	r22, Y
    523c:	79 81       	ldd	r23, Y+1	; 0x01
    523e:	8a 81       	ldd	r24, Y+2	; 0x02
    5240:	9b 81       	ldd	r25, Y+3	; 0x03
    5242:	c3 5c       	subi	r28, 0xC3	; 195
    5244:	d0 40       	sbci	r29, 0x00	; 0
    5246:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    524a:	4b 01       	movw	r8, r22
    524c:	5c 01       	movw	r10, r24
    524e:	c9 52       	subi	r28, 0x29	; 41
    5250:	df 4f       	sbci	r29, 0xFF	; 255
    5252:	28 81       	ld	r18, Y
    5254:	39 81       	ldd	r19, Y+1	; 0x01
    5256:	4a 81       	ldd	r20, Y+2	; 0x02
    5258:	5b 81       	ldd	r21, Y+3	; 0x03
    525a:	c7 5d       	subi	r28, 0xD7	; 215
    525c:	d0 40       	sbci	r29, 0x00	; 0
    525e:	c7 01       	movw	r24, r14
    5260:	b6 01       	movw	r22, r12
    5262:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5266:	9b 01       	movw	r18, r22
    5268:	ac 01       	movw	r20, r24
    526a:	c5 01       	movw	r24, r10
    526c:	b4 01       	movw	r22, r8
    526e:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    5272:	4b 01       	movw	r8, r22
    5274:	5c 01       	movw	r10, r24
		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
    5276:	20 e0       	ldi	r18, 0x00	; 0
    5278:	30 e0       	ldi	r19, 0x00	; 0
    527a:	a9 01       	movw	r20, r18
    527c:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__cmpsf2>
    5280:	87 ff       	sbrs	r24, 7
    5282:	98 ce       	rjmp	.-720    	; 0x4fb4 <calculate_error+0x264>
    5284:	81 2c       	mov	r8, r1
    5286:	91 2c       	mov	r9, r1
    5288:	54 01       	movw	r10, r8
    528a:	94 ce       	rjmp	.-728    	; 0x4fb4 <calculate_error+0x264>
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    528c:	c1 2c       	mov	r12, r1
    528e:	d1 2c       	mov	r13, r1
    5290:	76 01       	movw	r14, r12
    5292:	c1 ce       	rjmp	.-638    	; 0x5016 <calculate_error+0x2c6>
	float measTotal = 0;
	float cosAcosBTotal = 0;
	float cosAcosBmat[6][6];
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    5294:	c1 2c       	mov	r12, r1
    5296:	d1 2c       	mov	r13, r1
    5298:	76 01       	movw	r14, r12
    529a:	c5 51       	subi	r28, 0x15	; 21
    529c:	df 4f       	sbci	r29, 0xFF	; 255
    529e:	08 81       	ld	r16, Y
    52a0:	19 81       	ldd	r17, Y+1	; 0x01
    52a2:	cb 5e       	subi	r28, 0xEB	; 235
    52a4:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
		cosAcosBTotal += cosAcosB[i];
	}
	float conf = 0;
	for(uint8_t i=0;i<36;i++){
		conf += fabsf( (fast_bm[i]/measTotal) - (cosAcosB[i]/cosAcosBTotal) );
    52a6:	d8 01       	movw	r26, r16
    52a8:	6d 91       	ld	r22, X+
    52aa:	7d 91       	ld	r23, X+
    52ac:	8d 01       	movw	r16, r26
    52ae:	f1 01       	movw	r30, r2
    52b0:	41 90       	ld	r4, Z+
    52b2:	51 90       	ld	r5, Z+
    52b4:	61 90       	ld	r6, Z+
    52b6:	71 90       	ld	r7, Z+
    52b8:	1f 01       	movw	r2, r30
    52ba:	07 2e       	mov	r0, r23
    52bc:	00 0c       	add	r0, r0
    52be:	88 0b       	sbc	r24, r24
    52c0:	99 0b       	sbc	r25, r25
    52c2:	0e 94 10 48 	call	0x9020	; 0x9020 <__floatsisf>
    52c6:	c9 53       	subi	r28, 0x39	; 57
    52c8:	df 4f       	sbci	r29, 0xFF	; 255
    52ca:	28 81       	ld	r18, Y
    52cc:	39 81       	ldd	r19, Y+1	; 0x01
    52ce:	4a 81       	ldd	r20, Y+2	; 0x02
    52d0:	5b 81       	ldd	r21, Y+3	; 0x03
    52d2:	c7 5c       	subi	r28, 0xC7	; 199
    52d4:	d0 40       	sbci	r29, 0x00	; 0
    52d6:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    52da:	4b 01       	movw	r8, r22
    52dc:	5c 01       	movw	r10, r24
    52de:	c5 53       	subi	r28, 0x35	; 53
    52e0:	df 4f       	sbci	r29, 0xFF	; 255
    52e2:	28 81       	ld	r18, Y
    52e4:	39 81       	ldd	r19, Y+1	; 0x01
    52e6:	4a 81       	ldd	r20, Y+2	; 0x02
    52e8:	5b 81       	ldd	r21, Y+3	; 0x03
    52ea:	cb 5c       	subi	r28, 0xCB	; 203
    52ec:	d0 40       	sbci	r29, 0x00	; 0
    52ee:	c3 01       	movw	r24, r6
    52f0:	b2 01       	movw	r22, r4
    52f2:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    52f6:	9b 01       	movw	r18, r22
    52f8:	ac 01       	movw	r20, r24
    52fa:	c5 01       	movw	r24, r10
    52fc:	b4 01       	movw	r22, r8
    52fe:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    5302:	9b 01       	movw	r18, r22
    5304:	ac 01       	movw	r20, r24
    5306:	5f 77       	andi	r21, 0x7F	; 127
    5308:	c7 01       	movw	r24, r14
    530a:	b6 01       	movw	r22, r12
    530c:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    5310:	6b 01       	movw	r12, r22
    5312:	7c 01       	movw	r14, r24
		measTotal += fast_bm[i];
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
		cosAcosBTotal += cosAcosB[i];
	}
	float conf = 0;
	for(uint8_t i=0;i<36;i++){
    5314:	cf 53       	subi	r28, 0x3F	; 63
    5316:	df 4f       	sbci	r29, 0xFF	; 255
    5318:	88 81       	ld	r24, Y
    531a:	99 81       	ldd	r25, Y+1	; 0x01
    531c:	c1 5c       	subi	r28, 0xC1	; 193
    531e:	d0 40       	sbci	r29, 0x00	; 0
    5320:	82 15       	cp	r24, r2
    5322:	93 05       	cpc	r25, r3
    5324:	09 f0       	breq	.+2      	; 0x5328 <calculate_error+0x5d8>
    5326:	bf cf       	rjmp	.-130    	; 0x52a6 <calculate_error+0x556>
		//printf("}");
		//if(e<5) printf(",");
	//}
	//printf("}},\r\n");
	return conf;
}
    5328:	c7 01       	movw	r24, r14
    532a:	b6 01       	movw	r22, r12
    532c:	c4 51       	subi	r28, 0x14	; 20
    532e:	df 4f       	sbci	r29, 0xFF	; 255
    5330:	cd bf       	out	0x3d, r28	; 61
    5332:	de bf       	out	0x3e, r29	; 62
    5334:	df 91       	pop	r29
    5336:	cf 91       	pop	r28
    5338:	1f 91       	pop	r17
    533a:	0f 91       	pop	r16
    533c:	ff 90       	pop	r15
    533e:	ef 90       	pop	r14
    5340:	df 90       	pop	r13
    5342:	cf 90       	pop	r12
    5344:	bf 90       	pop	r11
    5346:	af 90       	pop	r10
    5348:	9f 90       	pop	r9
    534a:	8f 90       	pop	r8
    534c:	7f 90       	pop	r7
    534e:	6f 90       	pop	r6
    5350:	5f 90       	pop	r5
    5352:	4f 90       	pop	r4
    5354:	3f 90       	pop	r3
    5356:	2f 90       	pop	r2
    5358:	08 95       	ret
    535a:	80 e0       	ldi	r24, 0x00	; 0
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	a8 e3       	ldi	r26, 0x38	; 56
    5360:	b2 ec       	ldi	r27, 0xC2	; 194
    5362:	cd 53       	subi	r28, 0x3D	; 61
    5364:	df 4f       	sbci	r29, 0xFF	; 255
    5366:	88 83       	st	Y, r24
    5368:	99 83       	std	Y+1, r25	; 0x01
    536a:	aa 83       	std	Y+2, r26	; 0x02
    536c:	bb 83       	std	Y+3, r27	; 0x03
    536e:	c3 5c       	subi	r28, 0xC3	; 195
    5370:	d0 40       	sbci	r29, 0x00	; 0

	return magicRangeFunc(total);
}

float calculate_error(float r, float b, float h){
	r = r<46 ? 46 : r;
    5372:	81 2c       	mov	r8, r1
    5374:	91 2c       	mov	r9, r1
    5376:	68 e3       	ldi	r22, 0x38	; 56
    5378:	a6 2e       	mov	r10, r22
    537a:	62 e4       	ldi	r22, 0x42	; 66
    537c:	b6 2e       	mov	r11, r22
    537e:	19 cd       	rjmp	.-1486   	; 0x4db2 <calculate_error+0x62>

00005380 <calculate_bearing_and_heading>:
	//}
	//printf("}},\r\n");
	return conf;
}

void calculate_bearing_and_heading(float* bearing, float* heading){
    5380:	2f 92       	push	r2
    5382:	3f 92       	push	r3
    5384:	4f 92       	push	r4
    5386:	5f 92       	push	r5
    5388:	6f 92       	push	r6
    538a:	7f 92       	push	r7
    538c:	8f 92       	push	r8
    538e:	9f 92       	push	r9
    5390:	af 92       	push	r10
    5392:	bf 92       	push	r11
    5394:	cf 92       	push	r12
    5396:	df 92       	push	r13
    5398:	ef 92       	push	r14
    539a:	ff 92       	push	r15
    539c:	0f 93       	push	r16
    539e:	1f 93       	push	r17
    53a0:	cf 93       	push	r28
    53a2:	df 93       	push	r29
    53a4:	cd b7       	in	r28, 0x3d	; 61
    53a6:	de b7       	in	r29, 0x3e	; 62
    53a8:	6c 97       	sbiw	r28, 0x1c	; 28
    53aa:	cd bf       	out	0x3d, r28	; 61
    53ac:	de bf       	out	0x3e, r29	; 62
    53ae:	89 8f       	std	Y+25, r24	; 0x19
    53b0:	9a 8f       	std	Y+26, r25	; 0x1a
    53b2:	6b 8f       	std	Y+27, r22	; 0x1b
    53b4:	7c 8f       	std	Y+28, r23	; 0x1c
    53b6:	2e e0       	ldi	r18, 0x0E	; 14
    53b8:	22 2e       	mov	r2, r18
    53ba:	23 e2       	ldi	r18, 0x23	; 35
    53bc:	32 2e       	mov	r3, r18
    53be:	87 ed       	ldi	r24, 0xD7	; 215
    53c0:	93 eb       	ldi	r25, 0xB3	; 179
    53c2:	ad e5       	ldi	r26, 0x5D	; 93
    53c4:	bf e3       	ldi	r27, 0x3F	; 63
    53c6:	8d 8b       	std	Y+21, r24	; 0x15
    53c8:	9e 8b       	std	Y+22, r25	; 0x16
    53ca:	af 8b       	std	Y+23, r26	; 0x17
    53cc:	b8 8f       	std	Y+24, r27	; 0x18
    53ce:	80 e0       	ldi	r24, 0x00	; 0
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	a0 e0       	ldi	r26, 0x00	; 0
    53d4:	bf eb       	ldi	r27, 0xBF	; 191
    53d6:	89 8b       	std	Y+17, r24	; 0x11
    53d8:	9a 8b       	std	Y+18, r25	; 0x12
    53da:	ab 8b       	std	Y+19, r26	; 0x13
    53dc:	bc 8b       	std	Y+20, r27	; 0x14
    53de:	80 e0       	ldi	r24, 0x00	; 0
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	a0 e8       	ldi	r26, 0x80	; 128
    53e4:	bf eb       	ldi	r27, 0xBF	; 191
    53e6:	8d 87       	std	Y+13, r24	; 0x0d
    53e8:	9e 87       	std	Y+14, r25	; 0x0e
    53ea:	af 87       	std	Y+15, r26	; 0x0f
    53ec:	b8 8b       	std	Y+16, r27	; 0x10
    53ee:	19 86       	std	Y+9, r1	; 0x09
    53f0:	1a 86       	std	Y+10, r1	; 0x0a
    53f2:	1b 86       	std	Y+11, r1	; 0x0b
    53f4:	1c 86       	std	Y+12, r1	; 0x0c
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
    53f6:	10 e0       	ldi	r17, 0x00	; 0
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;
    53f8:	41 2c       	mov	r4, r1
    53fa:	51 2c       	mov	r5, r1
    53fc:	32 01       	movw	r6, r4
void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
    53fe:	53 01       	movw	r10, r6
    5400:	42 01       	movw	r8, r4

void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
    5402:	4d 82       	std	Y+5, r4	; 0x05
    5404:	5e 82       	std	Y+6, r5	; 0x06
    5406:	6f 82       	std	Y+7, r6	; 0x07
    5408:	78 86       	std	Y+8, r7	; 0x08
}

void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
    540a:	49 82       	std	Y+1, r4	; 0x01
    540c:	5a 82       	std	Y+2, r5	; 0x02
    540e:	6b 82       	std	Y+3, r6	; 0x03
    5410:	7c 82       	std	Y+4, r7	; 0x04
    5412:	0b ea       	ldi	r16, 0xAB	; 171
    5414:	49 c0       	rjmp	.+146    	; 0x54a8 <calculate_bearing_and_heading+0x128>
    5416:	10 9f       	mul	r17, r16
    5418:	81 2d       	mov	r24, r1
    541a:	11 24       	eor	r1, r1
    541c:	86 95       	lsr	r24
    541e:	86 95       	lsr	r24
    5420:	98 2f       	mov	r25, r24
    5422:	99 0f       	add	r25, r25
    5424:	98 0f       	add	r25, r24
    5426:	99 0f       	add	r25, r25
    5428:	21 2f       	mov	r18, r17
    542a:	29 1b       	sub	r18, r25
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	e6 e0       	ldi	r30, 0x06	; 6
    5430:	f0 e0       	ldi	r31, 0x00	; 0
    5432:	e8 1b       	sub	r30, r24
    5434:	f1 09       	sbc	r31, r1
    5436:	cf 01       	movw	r24, r30
    5438:	82 0f       	add	r24, r18
    543a:	93 1f       	adc	r25, r19
    543c:	66 e0       	ldi	r22, 0x06	; 6
    543e:	70 e0       	ldi	r23, 0x00	; 0
    5440:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <__divmodhi4>
    5444:	fc 01       	movw	r30, r24
    5446:	ee 0f       	add	r30, r30
    5448:	ff 1f       	adc	r31, r31
    544a:	ee 0f       	add	r30, r30
    544c:	ff 1f       	adc	r31, r31
    544e:	ee 0f       	add	r30, r30
    5450:	ff 1f       	adc	r31, r31
    5452:	e3 51       	subi	r30, 0x13	; 19
    5454:	ff 4d       	sbci	r31, 0xDF	; 223
    5456:	84 81       	ldd	r24, Z+4	; 0x04
    5458:	95 81       	ldd	r25, Z+5	; 0x05
    545a:	a6 81       	ldd	r26, Z+6	; 0x06
    545c:	b7 81       	ldd	r27, Z+7	; 0x07
    545e:	89 87       	std	Y+9, r24	; 0x09
    5460:	9a 87       	std	Y+10, r25	; 0x0a
    5462:	ab 87       	std	Y+11, r26	; 0x0b
    5464:	bc 87       	std	Y+12, r27	; 0x0c
    5466:	80 81       	ld	r24, Z
    5468:	91 81       	ldd	r25, Z+1	; 0x01
    546a:	a2 81       	ldd	r26, Z+2	; 0x02
    546c:	b3 81       	ldd	r27, Z+3	; 0x03
    546e:	8d 87       	std	Y+13, r24	; 0x0d
    5470:	9e 87       	std	Y+14, r25	; 0x0e
    5472:	af 87       	std	Y+15, r26	; 0x0f
    5474:	b8 8b       	std	Y+16, r27	; 0x10
    5476:	22 0f       	add	r18, r18
    5478:	33 1f       	adc	r19, r19
    547a:	22 0f       	add	r18, r18
    547c:	33 1f       	adc	r19, r19
    547e:	22 0f       	add	r18, r18
    5480:	33 1f       	adc	r19, r19
    5482:	f9 01       	movw	r30, r18
    5484:	e3 5b       	subi	r30, 0xB3	; 179
    5486:	fe 4d       	sbci	r31, 0xDE	; 222
    5488:	84 81       	ldd	r24, Z+4	; 0x04
    548a:	95 81       	ldd	r25, Z+5	; 0x05
    548c:	a6 81       	ldd	r26, Z+6	; 0x06
    548e:	b7 81       	ldd	r27, Z+7	; 0x07
    5490:	89 8b       	std	Y+17, r24	; 0x11
    5492:	9a 8b       	std	Y+18, r25	; 0x12
    5494:	ab 8b       	std	Y+19, r26	; 0x13
    5496:	bc 8b       	std	Y+20, r27	; 0x14
    5498:	80 81       	ld	r24, Z
    549a:	91 81       	ldd	r25, Z+1	; 0x01
    549c:	a2 81       	ldd	r26, Z+2	; 0x02
    549e:	b3 81       	ldd	r27, Z+3	; 0x03
    54a0:	8d 8b       	std	Y+21, r24	; 0x15
    54a2:	9e 8b       	std	Y+22, r25	; 0x16
    54a4:	af 8b       	std	Y+23, r26	; 0x17
    54a6:	b8 8f       	std	Y+24, r27	; 0x18
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
		
		bearingX+=fast_bm[i]*getCosBearingBasis(i/6,i%6);
    54a8:	d1 01       	movw	r26, r2
    54aa:	6d 91       	ld	r22, X+
    54ac:	7d 91       	ld	r23, X+
    54ae:	1d 01       	movw	r2, r26
    54b0:	07 2e       	mov	r0, r23
    54b2:	00 0c       	add	r0, r0
    54b4:	88 0b       	sbc	r24, r24
    54b6:	99 0b       	sbc	r25, r25
    54b8:	0e 94 10 48 	call	0x9020	; 0x9020 <__floatsisf>
    54bc:	6b 01       	movw	r12, r22
    54be:	7c 01       	movw	r14, r24
    54c0:	2d 89       	ldd	r18, Y+21	; 0x15
    54c2:	3e 89       	ldd	r19, Y+22	; 0x16
    54c4:	4f 89       	ldd	r20, Y+23	; 0x17
    54c6:	58 8d       	ldd	r21, Y+24	; 0x18
    54c8:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    54cc:	9b 01       	movw	r18, r22
    54ce:	ac 01       	movw	r20, r24
    54d0:	69 81       	ldd	r22, Y+1	; 0x01
    54d2:	7a 81       	ldd	r23, Y+2	; 0x02
    54d4:	8b 81       	ldd	r24, Y+3	; 0x03
    54d6:	9c 81       	ldd	r25, Y+4	; 0x04
    54d8:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    54dc:	69 83       	std	Y+1, r22	; 0x01
    54de:	7a 83       	std	Y+2, r23	; 0x02
    54e0:	8b 83       	std	Y+3, r24	; 0x03
    54e2:	9c 83       	std	Y+4, r25	; 0x04
		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
    54e4:	29 89       	ldd	r18, Y+17	; 0x11
    54e6:	3a 89       	ldd	r19, Y+18	; 0x12
    54e8:	4b 89       	ldd	r20, Y+19	; 0x13
    54ea:	5c 89       	ldd	r21, Y+20	; 0x14
    54ec:	c7 01       	movw	r24, r14
    54ee:	b6 01       	movw	r22, r12
    54f0:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    54f4:	9b 01       	movw	r18, r22
    54f6:	ac 01       	movw	r20, r24
    54f8:	6d 81       	ldd	r22, Y+5	; 0x05
    54fa:	7e 81       	ldd	r23, Y+6	; 0x06
    54fc:	8f 81       	ldd	r24, Y+7	; 0x07
    54fe:	98 85       	ldd	r25, Y+8	; 0x08
    5500:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    5504:	6d 83       	std	Y+5, r22	; 0x05
    5506:	7e 83       	std	Y+6, r23	; 0x06
    5508:	8f 83       	std	Y+7, r24	; 0x07
    550a:	98 87       	std	Y+8, r25	; 0x08
		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
    550c:	2d 85       	ldd	r18, Y+13	; 0x0d
    550e:	3e 85       	ldd	r19, Y+14	; 0x0e
    5510:	4f 85       	ldd	r20, Y+15	; 0x0f
    5512:	58 89       	ldd	r21, Y+16	; 0x10
    5514:	c7 01       	movw	r24, r14
    5516:	b6 01       	movw	r22, r12
    5518:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    551c:	9b 01       	movw	r18, r22
    551e:	ac 01       	movw	r20, r24
    5520:	c5 01       	movw	r24, r10
    5522:	b4 01       	movw	r22, r8
    5524:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    5528:	4b 01       	movw	r8, r22
    552a:	5c 01       	movw	r10, r24
		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
    552c:	29 85       	ldd	r18, Y+9	; 0x09
    552e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5530:	4b 85       	ldd	r20, Y+11	; 0x0b
    5532:	5c 85       	ldd	r21, Y+12	; 0x0c
    5534:	c7 01       	movw	r24, r14
    5536:	b6 01       	movw	r22, r12
    5538:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    553c:	9b 01       	movw	r18, r22
    553e:	ac 01       	movw	r20, r24
    5540:	c3 01       	movw	r24, r6
    5542:	b2 01       	movw	r22, r4
    5544:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    5548:	2b 01       	movw	r4, r22
    554a:	3c 01       	movw	r6, r24
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
    554c:	1f 5f       	subi	r17, 0xFF	; 255
    554e:	14 32       	cpi	r17, 0x24	; 36
    5550:	09 f0       	breq	.+2      	; 0x5554 <calculate_bearing_and_heading+0x1d4>
    5552:	61 cf       	rjmp	.-318    	; 0x5416 <calculate_bearing_and_heading+0x96>
		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
	}
	
	*bearing = atan2f(bearingY, bearingX);	
    5554:	29 81       	ldd	r18, Y+1	; 0x01
    5556:	3a 81       	ldd	r19, Y+2	; 0x02
    5558:	4b 81       	ldd	r20, Y+3	; 0x03
    555a:	5c 81       	ldd	r21, Y+4	; 0x04
    555c:	6d 81       	ldd	r22, Y+5	; 0x05
    555e:	7e 81       	ldd	r23, Y+6	; 0x06
    5560:	8f 81       	ldd	r24, Y+7	; 0x07
    5562:	98 85       	ldd	r25, Y+8	; 0x08
    5564:	0e 94 c3 46 	call	0x8d86	; 0x8d86 <atan2>
    5568:	a9 8d       	ldd	r26, Y+25	; 0x19
    556a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    556c:	6d 93       	st	X+, r22
    556e:	7d 93       	st	X+, r23
    5570:	8d 93       	st	X+, r24
    5572:	9c 93       	st	X, r25
    5574:	13 97       	sbiw	r26, 0x03	; 3
	*heading = atan2f(headingY, headingX);
    5576:	a5 01       	movw	r20, r10
    5578:	94 01       	movw	r18, r8
    557a:	c3 01       	movw	r24, r6
    557c:	b2 01       	movw	r22, r4
    557e:	0e 94 c3 46 	call	0x8d86	; 0x8d86 <atan2>
    5582:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5584:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5586:	60 83       	st	Z, r22
    5588:	71 83       	std	Z+1, r23	; 0x01
    558a:	82 83       	std	Z+2, r24	; 0x02
    558c:	93 83       	std	Z+3, r25	; 0x03
}
    558e:	6c 96       	adiw	r28, 0x1c	; 28
    5590:	cd bf       	out	0x3d, r28	; 61
    5592:	de bf       	out	0x3e, r29	; 62
    5594:	df 91       	pop	r29
    5596:	cf 91       	pop	r28
    5598:	1f 91       	pop	r17
    559a:	0f 91       	pop	r16
    559c:	ff 90       	pop	r15
    559e:	ef 90       	pop	r14
    55a0:	df 90       	pop	r13
    55a2:	cf 90       	pop	r12
    55a4:	bf 90       	pop	r11
    55a6:	af 90       	pop	r10
    55a8:	9f 90       	pop	r9
    55aa:	8f 90       	pop	r8
    55ac:	7f 90       	pop	r7
    55ae:	6f 90       	pop	r6
    55b0:	5f 90       	pop	r5
    55b2:	4f 90       	pop	r4
    55b4:	3f 90       	pop	r3
    55b6:	2f 90       	pop	r2
    55b8:	08 95       	ret

000055ba <useRnbData>:
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
	}
}

void useRnbData(){
    55ba:	2f 92       	push	r2
    55bc:	3f 92       	push	r3
    55be:	4f 92       	push	r4
    55c0:	5f 92       	push	r5
    55c2:	6f 92       	push	r6
    55c4:	7f 92       	push	r7
    55c6:	8f 92       	push	r8
    55c8:	9f 92       	push	r9
    55ca:	af 92       	push	r10
    55cc:	bf 92       	push	r11
    55ce:	cf 92       	push	r12
    55d0:	df 92       	push	r13
    55d2:	ef 92       	push	r14
    55d4:	ff 92       	push	r15
    55d6:	0f 93       	push	r16
    55d8:	1f 93       	push	r17
    55da:	cf 93       	push	r28
    55dc:	df 93       	push	r29
    55de:	cd b7       	in	r28, 0x3d	; 61
    55e0:	de b7       	in	r29, 0x3e	; 62
    55e2:	2c 97       	sbiw	r28, 0x0c	; 12
    55e4:	cd bf       	out	0x3d, r28	; 61
    55e6:	de bf       	out	0x3e, r29	; 62
    55e8:	ae e0       	ldi	r26, 0x0E	; 14
    55ea:	b3 e2       	ldi	r27, 0x23	; 35
    55ec:	06 e5       	ldi	r16, 0x56	; 86
    55ee:	13 e2       	ldi	r17, 0x23	; 35
	*heading = atan2f(headingY, headingX);
}

static int16_t processBrightMeas(void){
	int16_t val;
	int16_t valSum=0;
    55f0:	c1 2c       	mov	r12, r1
    55f2:	d1 2c       	mov	r13, r1
	uint8_t allColZeroCheck = 0b00111111;
    55f4:	6f e3       	ldi	r22, 0x3F	; 63
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
	}
}

void useRnbData(){
    55f6:	fd 01       	movw	r30, r26
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	30 e0       	ldi	r19, 0x00	; 0
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
			val = brightMeas[e][s];
    55fc:	41 91       	ld	r20, Z+
    55fe:	51 91       	ld	r21, Z+
			allColZeroCheck &= ~((!!val)<<s);	
    5600:	81 e0       	ldi	r24, 0x01	; 1
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	41 15       	cp	r20, r1
    5606:	51 05       	cpc	r21, r1
    5608:	11 f4       	brne	.+4      	; 0x560e <useRnbData+0x54>
    560a:	80 e0       	ldi	r24, 0x00	; 0
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	02 2e       	mov	r0, r18
    5610:	01 c0       	rjmp	.+2      	; 0x5614 <useRnbData+0x5a>
    5612:	88 0f       	add	r24, r24
    5614:	0a 94       	dec	r0
    5616:	ea f7       	brpl	.-6      	; 0x5612 <useRnbData+0x58>
    5618:	80 95       	com	r24
    561a:	68 23       	and	r22, r24
			//val=val*(val>0);
			brightMeas[e][s] = val;
			valSum+=val;	
    561c:	c4 0e       	add	r12, r20
    561e:	d5 1e       	adc	r13, r21
    5620:	2f 5f       	subi	r18, 0xFF	; 255
    5622:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t val;
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
    5624:	26 30       	cpi	r18, 0x06	; 6
    5626:	31 05       	cpc	r19, r1
    5628:	49 f7       	brne	.-46     	; 0x55fc <useRnbData+0x42>
    562a:	1c 96       	adiw	r26, 0x0c	; 12
static int16_t processBrightMeas(void){
	int16_t val;
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
    562c:	0a 17       	cp	r16, r26
    562e:	1b 07       	cpc	r17, r27
    5630:	11 f7       	brne	.-60     	; 0x55f6 <useRnbData+0x3c>
    5632:	e6 2e       	mov	r14, r22
    5634:	f1 2c       	mov	r15, r1
    5636:	81 2c       	mov	r8, r1
    5638:	91 2c       	mov	r9, r1
    563a:	a1 2c       	mov	r10, r1
    563c:	b1 2c       	mov	r11, r1
    563e:	e0 e0       	ldi	r30, 0x00	; 0
    5640:	40 91 56 23 	lds	r20, 0x2356	; 0x802356 <sensorHealthHistory>
    5644:	50 91 57 23 	lds	r21, 0x2357	; 0x802357 <sensorHealthHistory+0x1>
    5648:	60 91 58 23 	lds	r22, 0x2358	; 0x802358 <sensorHealthHistory+0x2>
    564c:	70 91 59 23 	lds	r23, 0x2359	; 0x802359 <sensorHealthHistory+0x3>
	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
    5650:	0f e0       	ldi	r16, 0x0F	; 15
    5652:	10 e0       	ldi	r17, 0x00	; 0
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
    5654:	66 24       	eor	r6, r6
    5656:	63 94       	inc	r6
    5658:	71 2c       	mov	r7, r1
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
    565a:	22 e7       	ldi	r18, 0x72	; 114
    565c:	22 2e       	mov	r2, r18
    565e:	28 e0       	ldi	r18, 0x08	; 8
    5660:	32 2e       	mov	r3, r18
    5662:	34 c0       	rjmp	.+104    	; 0x56cc <useRnbData+0x112>
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
    5664:	c3 01       	movw	r24, r6
    5666:	08 2c       	mov	r0, r8
    5668:	02 c0       	rjmp	.+4      	; 0x566e <useRnbData+0xb4>
    566a:	88 0f       	add	r24, r24
    566c:	99 1f       	adc	r25, r25
    566e:	0a 94       	dec	r0
    5670:	e2 f7       	brpl	.-8      	; 0x566a <useRnbData+0xb0>
    5672:	09 2e       	mov	r0, r25
    5674:	00 0c       	add	r0, r0
    5676:	aa 0b       	sbc	r26, r26
    5678:	bb 0b       	sbc	r27, r27
    567a:	84 0f       	add	r24, r20
    567c:	95 1f       	adc	r25, r21
    567e:	a6 1f       	adc	r26, r22
    5680:	b7 1f       	adc	r27, r23
    5682:	ac 01       	movw	r20, r24
    5684:	bd 01       	movw	r22, r26
    5686:	80 93 56 23 	sts	0x2356, r24	; 0x802356 <sensorHealthHistory>
    568a:	90 93 57 23 	sts	0x2357, r25	; 0x802357 <sensorHealthHistory+0x1>
    568e:	a0 93 58 23 	sts	0x2358, r26	; 0x802358 <sensorHealthHistory+0x2>
    5692:	b0 93 59 23 	sts	0x2359, r27	; 0x802359 <sensorHealthHistory+0x3>
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
    5696:	05 2c       	mov	r0, r5
    5698:	04 c0       	rjmp	.+8      	; 0x56a2 <useRnbData+0xe8>
    569a:	b6 95       	lsr	r27
    569c:	a7 95       	ror	r26
    569e:	97 95       	ror	r25
    56a0:	87 95       	ror	r24
    56a2:	0a 94       	dec	r0
    56a4:	d2 f7       	brpl	.-12     	; 0x569a <useRnbData+0xe0>
    56a6:	8f 70       	andi	r24, 0x0F	; 15
    56a8:	99 27       	eor	r25, r25
    56aa:	aa 27       	eor	r26, r26
    56ac:	bb 27       	eor	r27, r27
    56ae:	0f 97       	sbiw	r24, 0x0f	; 15
    56b0:	a1 05       	cpc	r26, r1
    56b2:	b1 05       	cpc	r27, r1
    56b4:	09 f4       	brne	.+2      	; 0x56b8 <useRnbData+0xfe>
    56b6:	8f c1       	rjmp	.+798    	; 0x59d6 <useRnbData+0x41c>
    56b8:	8f ef       	ldi	r24, 0xFF	; 255
    56ba:	a8 1a       	sub	r10, r24
    56bc:	b8 0a       	sbc	r11, r24
    56be:	94 e0       	ldi	r25, 0x04	; 4
    56c0:	89 0e       	add	r8, r25
    56c2:	91 1c       	adc	r9, r1
			valSum+=val;	
		}
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
    56c4:	a6 e0       	ldi	r26, 0x06	; 6
    56c6:	aa 16       	cp	r10, r26
    56c8:	b1 04       	cpc	r11, r1
    56ca:	39 f1       	breq	.+78     	; 0x571a <useRnbData+0x160>
		if(allColZeroCheck&(1<<i)){
    56cc:	95 01       	movw	r18, r10
    56ce:	c7 01       	movw	r24, r14
    56d0:	0a 2c       	mov	r0, r10
    56d2:	02 c0       	rjmp	.+4      	; 0x56d8 <useRnbData+0x11e>
    56d4:	95 95       	asr	r25
    56d6:	87 95       	ror	r24
    56d8:	0a 94       	dec	r0
    56da:	e2 f7       	brpl	.-8      	; 0x56d4 <useRnbData+0x11a>
			sensorHealthHistory+=(1<<(4*i));
    56dc:	58 2c       	mov	r5, r8
		}
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
    56de:	80 fd       	sbrc	r24, 0
    56e0:	c1 cf       	rjmp	.-126    	; 0x5664 <useRnbData+0xaa>
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
    56e2:	c8 01       	movw	r24, r16
    56e4:	08 2c       	mov	r0, r8
    56e6:	02 c0       	rjmp	.+4      	; 0x56ec <useRnbData+0x132>
    56e8:	88 0f       	add	r24, r24
    56ea:	99 1f       	adc	r25, r25
    56ec:	0a 94       	dec	r0
    56ee:	e2 f7       	brpl	.-8      	; 0x56e8 <useRnbData+0x12e>
    56f0:	80 95       	com	r24
    56f2:	90 95       	com	r25
    56f4:	09 2e       	mov	r0, r25
    56f6:	00 0c       	add	r0, r0
    56f8:	aa 0b       	sbc	r26, r26
    56fa:	bb 0b       	sbc	r27, r27
    56fc:	84 23       	and	r24, r20
    56fe:	95 23       	and	r25, r21
    5700:	a6 23       	and	r26, r22
    5702:	b7 23       	and	r27, r23
    5704:	ac 01       	movw	r20, r24
    5706:	bd 01       	movw	r22, r26
    5708:	80 93 56 23 	sts	0x2356, r24	; 0x802356 <sensorHealthHistory>
    570c:	90 93 57 23 	sts	0x2357, r25	; 0x802357 <sensorHealthHistory+0x1>
    5710:	a0 93 58 23 	sts	0x2358, r26	; 0x802358 <sensorHealthHistory+0x2>
    5714:	b0 93 59 23 	sts	0x2359, r27	; 0x802359 <sensorHealthHistory+0x3>
    5718:	be cf       	rjmp	.-132    	; 0x5696 <useRnbData+0xdc>
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
			sensorHealthHistory&=~(0xF<<(4*i));
			problem = 1;
		}		
	}
	if(problem){
    571a:	ee 23       	and	r30, r30
    571c:	09 f4       	brne	.+2      	; 0x5720 <useRnbData+0x166>
    571e:	57 c0       	rjmp	.+174    	; 0x57ce <useRnbData+0x214>
void setRGB(uint8_t r, uint8_t g, uint8_t b);
void setHSV(uint16_t h, uint8_t s, uint8_t v);
void hsvToRGB(uint16_t h, uint8_t s, uint8_t v, uint8_t* r, uint8_t* g, uint8_t* b);

inline void warningLightSequence(void){
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    5720:	44 e6       	ldi	r20, 0x64	; 100
    5722:	64 e6       	ldi	r22, 0x64	; 100
    5724:	80 e0       	ldi	r24, 0x00	; 0
    5726:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    572a:	8c e2       	ldi	r24, 0x2C	; 44
    572c:	91 e0       	ldi	r25, 0x01	; 1
    572e:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    5732:	44 e6       	ldi	r20, 0x64	; 100
    5734:	60 e0       	ldi	r22, 0x00	; 0
    5736:	84 e6       	ldi	r24, 0x64	; 100
    5738:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    573c:	8c e2       	ldi	r24, 0x2C	; 44
    573e:	91 e0       	ldi	r25, 0x01	; 1
    5740:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    5744:	40 e0       	ldi	r20, 0x00	; 0
    5746:	64 e6       	ldi	r22, 0x64	; 100
    5748:	84 e6       	ldi	r24, 0x64	; 100
    574a:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    574e:	8c e2       	ldi	r24, 0x2C	; 44
    5750:	91 e0       	ldi	r25, 0x01	; 1
    5752:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    5756:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <ledOff>
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    575a:	44 e6       	ldi	r20, 0x64	; 100
    575c:	64 e6       	ldi	r22, 0x64	; 100
    575e:	80 e0       	ldi	r24, 0x00	; 0
    5760:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    5764:	8c e2       	ldi	r24, 0x2C	; 44
    5766:	91 e0       	ldi	r25, 0x01	; 1
    5768:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    576c:	44 e6       	ldi	r20, 0x64	; 100
    576e:	60 e0       	ldi	r22, 0x00	; 0
    5770:	84 e6       	ldi	r24, 0x64	; 100
    5772:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    5776:	8c e2       	ldi	r24, 0x2C	; 44
    5778:	91 e0       	ldi	r25, 0x01	; 1
    577a:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    577e:	40 e0       	ldi	r20, 0x00	; 0
    5780:	64 e6       	ldi	r22, 0x64	; 100
    5782:	84 e6       	ldi	r24, 0x64	; 100
    5784:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    5788:	8c e2       	ldi	r24, 0x2C	; 44
    578a:	91 e0       	ldi	r25, 0x01	; 1
    578c:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    5790:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <ledOff>
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    5794:	44 e6       	ldi	r20, 0x64	; 100
    5796:	64 e6       	ldi	r22, 0x64	; 100
    5798:	80 e0       	ldi	r24, 0x00	; 0
    579a:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    579e:	8c e2       	ldi	r24, 0x2C	; 44
    57a0:	91 e0       	ldi	r25, 0x01	; 1
    57a2:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    57a6:	44 e6       	ldi	r20, 0x64	; 100
    57a8:	60 e0       	ldi	r22, 0x00	; 0
    57aa:	84 e6       	ldi	r24, 0x64	; 100
    57ac:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    57b0:	8c e2       	ldi	r24, 0x2C	; 44
    57b2:	91 e0       	ldi	r25, 0x01	; 1
    57b4:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    57b8:	40 e0       	ldi	r20, 0x00	; 0
    57ba:	64 e6       	ldi	r22, 0x64	; 100
    57bc:	84 e6       	ldi	r24, 0x64	; 100
    57be:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    57c2:	8c e2       	ldi	r24, 0x2C	; 44
    57c4:	91 e0       	ldi	r25, 0x01	; 1
    57c6:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    57ca:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <ledOff>
	//uint32_t start = get_time();
	int16_t matrixSum = processBrightMeas();
	//if(rand_byte()%2) broadcastBrightMeas();
	float bearing, heading;
	float error;
	calculate_bearing_and_heading(&bearing, &heading);
    57ce:	be 01       	movw	r22, r28
    57d0:	6f 5f       	subi	r22, 0xFF	; 255
    57d2:	7f 4f       	sbci	r23, 0xFF	; 255
    57d4:	ce 01       	movw	r24, r28
    57d6:	05 96       	adiw	r24, 0x05	; 5
    57d8:	0e 94 c0 29 	call	0x5380	; 0x5380 <calculate_bearing_and_heading>
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
    57dc:	b6 01       	movw	r22, r12
    57de:	dd 0c       	add	r13, r13
    57e0:	88 0b       	sbc	r24, r24
    57e2:	99 0b       	sbc	r25, r25
    57e4:	0e 94 10 48 	call	0x9020	; 0x9020 <__floatsisf>
    57e8:	20 e2       	ldi	r18, 0x20	; 32
    57ea:	3b eb       	ldi	r19, 0xBB	; 187
    57ec:	44 e0       	ldi	r20, 0x04	; 4
    57ee:	50 e4       	ldi	r21, 0x40	; 64
    57f0:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    57f4:	0e 94 51 24 	call	0x48a2	; 0x48a2 <magicRangeFunc>
    57f8:	4b 01       	movw	r8, r22
    57fa:	5c 01       	movw	r10, r24
	if(initialRange!=0&&!isnanf(initialRange)){	
    57fc:	20 e0       	ldi	r18, 0x00	; 0
    57fe:	30 e0       	ldi	r19, 0x00	; 0
    5800:	a9 01       	movw	r20, r18
    5802:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__cmpsf2>
    5806:	88 23       	and	r24, r24
    5808:	09 f4       	brne	.+2      	; 0x580c <useRnbData+0x252>
    580a:	ca c0       	rjmp	.+404    	; 0x59a0 <useRnbData+0x3e6>
    580c:	a5 01       	movw	r20, r10
    580e:	94 01       	movw	r18, r8
    5810:	c5 01       	movw	r24, r10
    5812:	b4 01       	movw	r22, r8
    5814:	0e 94 1c 4b 	call	0x9638	; 0x9638 <__unordsf2>
    5818:	81 11       	cpse	r24, r1
    581a:	c2 c0       	rjmp	.+388    	; 0x59a0 <useRnbData+0x3e6>
		float range = calculate_range(initialRange, bearing, heading);
    581c:	89 81       	ldd	r24, Y+1	; 0x01
    581e:	9a 81       	ldd	r25, Y+2	; 0x02
    5820:	ab 81       	ldd	r26, Y+3	; 0x03
    5822:	bc 81       	ldd	r27, Y+4	; 0x04
    5824:	89 87       	std	Y+9, r24	; 0x09
    5826:	9a 87       	std	Y+10, r25	; 0x0a
    5828:	ab 87       	std	Y+11, r26	; 0x0b
    582a:	bc 87       	std	Y+12, r27	; 0x0c
    582c:	4d 80       	ldd	r4, Y+5	; 0x05
    582e:	5e 80       	ldd	r5, Y+6	; 0x06
    5830:	6f 80       	ldd	r6, Y+7	; 0x07
    5832:	78 84       	ldd	r7, Y+8	; 0x08
    5834:	7c 01       	movw	r14, r24
    5836:	8d 01       	movw	r16, r26
    5838:	a3 01       	movw	r20, r6
    583a:	92 01       	movw	r18, r4
    583c:	c5 01       	movw	r24, r10
    583e:	b4 01       	movw	r22, r8
    5840:	0e 94 b9 24 	call	0x4972	; 0x4972 <calculate_range>
    5844:	4b 01       	movw	r8, r22
    5846:	5c 01       	movw	r10, r24
		if(!isnanf(range)){
    5848:	9b 01       	movw	r18, r22
    584a:	ac 01       	movw	r20, r24
    584c:	0e 94 1c 4b 	call	0x9638	; 0x9638 <__unordsf2>
    5850:	81 11       	cpse	r24, r1
    5852:	a6 c0       	rjmp	.+332    	; 0x59a0 <useRnbData+0x3e6>
			if(range<2*DROPLET_RADIUS) range=46;
    5854:	20 e0       	ldi	r18, 0x00	; 0
    5856:	30 e0       	ldi	r19, 0x00	; 0
    5858:	40 e3       	ldi	r20, 0x30	; 48
    585a:	52 e4       	ldi	r21, 0x42	; 66
    585c:	c5 01       	movw	r24, r10
    585e:	b4 01       	movw	r22, r8
    5860:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__cmpsf2>
    5864:	87 fd       	sbrc	r24, 7
    5866:	e3 c0       	rjmp	.+454    	; 0x5a2e <useRnbData+0x474>
			error = calculate_error(range, bearing, heading);
    5868:	a3 01       	movw	r20, r6
    586a:	92 01       	movw	r18, r4
    586c:	c5 01       	movw	r24, r10
    586e:	b4 01       	movw	r22, r8
    5870:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <calculate_error>
    5874:	6b 01       	movw	r12, r22
    5876:	7c 01       	movw	r14, r24
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    5878:	20 e0       	ldi	r18, 0x00	; 0
    587a:	30 e0       	ldi	r19, 0x00	; 0
    587c:	4c ed       	ldi	r20, 0xDC	; 220
    587e:	52 e4       	ldi	r21, 0x42	; 66
    5880:	c5 01       	movw	r24, r10
    5882:	b4 01       	movw	r22, r8
    5884:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__cmpsf2>
    5888:	87 fd       	sbrc	r24, 7
    588a:	1e c1       	rjmp	.+572    	; 0x5ac8 <useRnbData+0x50e>
    588c:	20 e0       	ldi	r18, 0x00	; 0
    588e:	30 e0       	ldi	r19, 0x00	; 0
    5890:	48 e4       	ldi	r20, 0x48	; 72
    5892:	53 e4       	ldi	r21, 0x43	; 67
    5894:	c5 01       	movw	r24, r10
    5896:	b4 01       	movw	r22, r8
    5898:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__cmpsf2>
    589c:	87 fd       	sbrc	r24, 7
    589e:	e4 c0       	rjmp	.+456    	; 0x5a68 <useRnbData+0x4ae>
    58a0:	20 e0       	ldi	r18, 0x00	; 0
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	48 e4       	ldi	r20, 0x48	; 72
    58a6:	53 e4       	ldi	r21, 0x43	; 67
    58a8:	c5 01       	movw	r24, r10
    58aa:	b4 01       	movw	r22, r8
    58ac:	0e 94 88 49 	call	0x9310	; 0x9310 <__gesf2>
    58b0:	18 16       	cp	r1, r24
    58b2:	0c f4       	brge	.+2      	; 0x58b6 <useRnbData+0x2fc>
    58b4:	75 c0       	rjmp	.+234    	; 0x59a0 <useRnbData+0x3e6>
				return;
			}else{
				//printf("\r\n");
			}
			
			last_good_rnb.id = rnbCmdID;
    58b6:	80 91 14 26 	lds	r24, 0x2614	; 0x802614 <rnbCmdID>
    58ba:	90 91 15 26 	lds	r25, 0x2615	; 0x802615 <rnbCmdID+0x1>
    58be:	80 93 21 24 	sts	0x2421, r24	; 0x802421 <last_good_rnb+0x6>
    58c2:	90 93 22 24 	sts	0x2422, r25	; 0x802422 <last_good_rnb+0x7>
			last_good_rnb.range		= (uint16_t)(range);
    58c6:	c5 01       	movw	r24, r10
    58c8:	b4 01       	movw	r22, r8
    58ca:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    58ce:	60 93 1b 24 	sts	0x241B, r22	; 0x80241b <last_good_rnb>
    58d2:	70 93 1c 24 	sts	0x241C, r23	; 0x80241c <last_good_rnb+0x1>
inline int16_t prettyAngleDeg(int16_t angle){
	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
}

inline float prettyAngle(float angle){
	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) + M_PI );
    58d6:	20 e0       	ldi	r18, 0x00	; 0
    58d8:	30 e0       	ldi	r19, 0x00	; 0
    58da:	a9 01       	movw	r20, r18
    58dc:	c3 01       	movw	r24, r6
    58de:	b2 01       	movw	r22, r4
    58e0:	0e 94 88 49 	call	0x9310	; 0x9310 <__gesf2>
    58e4:	2b ed       	ldi	r18, 0xDB	; 219
    58e6:	3f e0       	ldi	r19, 0x0F	; 15
    58e8:	49 e4       	ldi	r20, 0x49	; 73
    58ea:	50 e4       	ldi	r21, 0x40	; 64
    58ec:	87 fd       	sbrc	r24, 7
    58ee:	c8 c0       	rjmp	.+400    	; 0x5a80 <useRnbData+0x4c6>
    58f0:	c3 01       	movw	r24, r6
    58f2:	b2 01       	movw	r22, r4
    58f4:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    58f8:	2b ed       	ldi	r18, 0xDB	; 219
    58fa:	3f e0       	ldi	r19, 0x0F	; 15
    58fc:	49 ec       	ldi	r20, 0xC9	; 201
    58fe:	50 e4       	ldi	r21, 0x40	; 64
    5900:	0e 94 56 48 	call	0x90ac	; 0x90ac <fmod>
    5904:	2b ed       	ldi	r18, 0xDB	; 219
    5906:	3f e0       	ldi	r19, 0x0F	; 15
    5908:	49 e4       	ldi	r20, 0x49	; 73
    590a:	50 e4       	ldi	r21, 0x40	; 64
    590c:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
			last_good_rnb.bearing	= (int16_t)radToDeg(bearing);
    5910:	2b ed       	ldi	r18, 0xDB	; 219
    5912:	3f e0       	ldi	r19, 0x0F	; 15
    5914:	49 e4       	ldi	r20, 0x49	; 73
    5916:	50 e4       	ldi	r21, 0x40	; 64
    5918:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	30 e0       	ldi	r19, 0x00	; 0
    5920:	44 e3       	ldi	r20, 0x34	; 52
    5922:	53 e4       	ldi	r21, 0x43	; 67
    5924:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5928:	0e 94 d8 47 	call	0x8fb0	; 0x8fb0 <__fixsfsi>
    592c:	60 93 1d 24 	sts	0x241D, r22	; 0x80241d <last_good_rnb+0x2>
    5930:	70 93 1e 24 	sts	0x241E, r23	; 0x80241e <last_good_rnb+0x3>
    5934:	20 e0       	ldi	r18, 0x00	; 0
    5936:	30 e0       	ldi	r19, 0x00	; 0
    5938:	a9 01       	movw	r20, r18
    593a:	69 85       	ldd	r22, Y+9	; 0x09
    593c:	7a 85       	ldd	r23, Y+10	; 0x0a
    593e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5940:	9c 85       	ldd	r25, Y+12	; 0x0c
    5942:	0e 94 88 49 	call	0x9310	; 0x9310 <__gesf2>
    5946:	2b ed       	ldi	r18, 0xDB	; 219
    5948:	3f e0       	ldi	r19, 0x0F	; 15
    594a:	49 e4       	ldi	r20, 0x49	; 73
    594c:	50 e4       	ldi	r21, 0x40	; 64
    594e:	87 fd       	sbrc	r24, 7
    5950:	a8 c0       	rjmp	.+336    	; 0x5aa2 <useRnbData+0x4e8>
    5952:	69 85       	ldd	r22, Y+9	; 0x09
    5954:	7a 85       	ldd	r23, Y+10	; 0x0a
    5956:	8b 85       	ldd	r24, Y+11	; 0x0b
    5958:	9c 85       	ldd	r25, Y+12	; 0x0c
    595a:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    595e:	2b ed       	ldi	r18, 0xDB	; 219
    5960:	3f e0       	ldi	r19, 0x0F	; 15
    5962:	49 ec       	ldi	r20, 0xC9	; 201
    5964:	50 e4       	ldi	r21, 0x40	; 64
    5966:	0e 94 56 48 	call	0x90ac	; 0x90ac <fmod>
    596a:	2b ed       	ldi	r18, 0xDB	; 219
    596c:	3f e0       	ldi	r19, 0x0F	; 15
    596e:	49 e4       	ldi	r20, 0x49	; 73
    5970:	50 e4       	ldi	r21, 0x40	; 64
    5972:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
			last_good_rnb.heading	= (int16_t)radToDeg(heading);
    5976:	2b ed       	ldi	r18, 0xDB	; 219
    5978:	3f e0       	ldi	r19, 0x0F	; 15
    597a:	49 e4       	ldi	r20, 0x49	; 73
    597c:	50 e4       	ldi	r21, 0x40	; 64
    597e:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    5982:	20 e0       	ldi	r18, 0x00	; 0
    5984:	30 e0       	ldi	r19, 0x00	; 0
    5986:	44 e3       	ldi	r20, 0x34	; 52
    5988:	53 e4       	ldi	r21, 0x43	; 67
    598a:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    598e:	0e 94 d8 47 	call	0x8fb0	; 0x8fb0 <__fixsfsi>
    5992:	60 93 1f 24 	sts	0x241F, r22	; 0x80241f <last_good_rnb+0x4>
    5996:	70 93 20 24 	sts	0x2420, r23	; 0x802420 <last_good_rnb+0x5>
			//print_brightMeas();
			rnb_updated=1;
    599a:	81 e0       	ldi	r24, 0x01	; 1
    599c:	80 93 25 24 	sts	0x2425, r24	; 0x802425 <rnb_updated>
		}
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    59a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    59a2:	f8 94       	cli
		processing_rnb_flag=0;
    59a4:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    59a8:	8f bf       	out	0x3f, r24	; 63
	}
}
    59aa:	2c 96       	adiw	r28, 0x0c	; 12
    59ac:	cd bf       	out	0x3d, r28	; 61
    59ae:	de bf       	out	0x3e, r29	; 62
    59b0:	df 91       	pop	r29
    59b2:	cf 91       	pop	r28
    59b4:	1f 91       	pop	r17
    59b6:	0f 91       	pop	r16
    59b8:	ff 90       	pop	r15
    59ba:	ef 90       	pop	r14
    59bc:	df 90       	pop	r13
    59be:	cf 90       	pop	r12
    59c0:	bf 90       	pop	r11
    59c2:	af 90       	pop	r10
    59c4:	9f 90       	pop	r9
    59c6:	8f 90       	pop	r8
    59c8:	7f 90       	pop	r7
    59ca:	6f 90       	pop	r6
    59cc:	5f 90       	pop	r5
    59ce:	4f 90       	pop	r4
    59d0:	3f 90       	pop	r3
    59d2:	2f 90       	pop	r2
    59d4:	08 95       	ret
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
    59d6:	3f 93       	push	r19
    59d8:	2f 93       	push	r18
    59da:	3f 92       	push	r3
    59dc:	2f 92       	push	r2
    59de:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
			sensorHealthHistory&=~(0xF<<(4*i));
    59e2:	c8 01       	movw	r24, r16
    59e4:	02 c0       	rjmp	.+4      	; 0x59ea <useRnbData+0x430>
    59e6:	88 0f       	add	r24, r24
    59e8:	99 1f       	adc	r25, r25
    59ea:	5a 94       	dec	r5
    59ec:	e2 f7       	brpl	.-8      	; 0x59e6 <useRnbData+0x42c>
    59ee:	80 95       	com	r24
    59f0:	90 95       	com	r25
    59f2:	09 2e       	mov	r0, r25
    59f4:	00 0c       	add	r0, r0
    59f6:	aa 0b       	sbc	r26, r26
    59f8:	bb 0b       	sbc	r27, r27
    59fa:	40 91 56 23 	lds	r20, 0x2356	; 0x802356 <sensorHealthHistory>
    59fe:	50 91 57 23 	lds	r21, 0x2357	; 0x802357 <sensorHealthHistory+0x1>
    5a02:	60 91 58 23 	lds	r22, 0x2358	; 0x802358 <sensorHealthHistory+0x2>
    5a06:	70 91 59 23 	lds	r23, 0x2359	; 0x802359 <sensorHealthHistory+0x3>
    5a0a:	48 23       	and	r20, r24
    5a0c:	59 23       	and	r21, r25
    5a0e:	6a 23       	and	r22, r26
    5a10:	7b 23       	and	r23, r27
    5a12:	40 93 56 23 	sts	0x2356, r20	; 0x802356 <sensorHealthHistory>
    5a16:	50 93 57 23 	sts	0x2357, r21	; 0x802357 <sensorHealthHistory+0x1>
    5a1a:	60 93 58 23 	sts	0x2358, r22	; 0x802358 <sensorHealthHistory+0x2>
    5a1e:	70 93 59 23 	sts	0x2359, r23	; 0x802359 <sensorHealthHistory+0x3>
    5a22:	0f 90       	pop	r0
    5a24:	0f 90       	pop	r0
    5a26:	0f 90       	pop	r0
    5a28:	0f 90       	pop	r0
			problem = 1;
    5a2a:	e1 e0       	ldi	r30, 0x01	; 1
    5a2c:	45 ce       	rjmp	.-886    	; 0x56b8 <useRnbData+0xfe>
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
	if(initialRange!=0&&!isnanf(initialRange)){	
		float range = calculate_range(initialRange, bearing, heading);
		if(!isnanf(range)){
			if(range<2*DROPLET_RADIUS) range=46;
			error = calculate_error(range, bearing, heading);
    5a2e:	e9 84       	ldd	r14, Y+9	; 0x09
    5a30:	fa 84       	ldd	r15, Y+10	; 0x0a
    5a32:	0b 85       	ldd	r16, Y+11	; 0x0b
    5a34:	1c 85       	ldd	r17, Y+12	; 0x0c
    5a36:	a3 01       	movw	r20, r6
    5a38:	92 01       	movw	r18, r4
    5a3a:	60 e0       	ldi	r22, 0x00	; 0
    5a3c:	70 e0       	ldi	r23, 0x00	; 0
    5a3e:	88 e3       	ldi	r24, 0x38	; 56
    5a40:	92 e4       	ldi	r25, 0x42	; 66
    5a42:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <calculate_error>
    5a46:	6b 01       	movw	r12, r22
    5a48:	7c 01       	movw	r14, r24
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    5a4a:	20 e0       	ldi	r18, 0x00	; 0
    5a4c:	30 e0       	ldi	r19, 0x00	; 0
    5a4e:	40 e8       	ldi	r20, 0x80	; 128
    5a50:	5f e3       	ldi	r21, 0x3F	; 63
    5a52:	0e 94 88 49 	call	0x9310	; 0x9310 <__gesf2>
    5a56:	18 16       	cp	r1, r24
    5a58:	0c f4       	brge	.+2      	; 0x5a5c <useRnbData+0x4a2>
    5a5a:	a2 cf       	rjmp	.-188    	; 0x59a0 <useRnbData+0x3e6>
	calculate_bearing_and_heading(&bearing, &heading);
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
	if(initialRange!=0&&!isnanf(initialRange)){	
		float range = calculate_range(initialRange, bearing, heading);
		if(!isnanf(range)){
			if(range<2*DROPLET_RADIUS) range=46;
    5a5c:	81 2c       	mov	r8, r1
    5a5e:	91 2c       	mov	r9, r1
    5a60:	88 e3       	ldi	r24, 0x38	; 56
    5a62:	a8 2e       	mov	r10, r24
    5a64:	82 e4       	ldi	r24, 0x42	; 66
    5a66:	b8 2e       	mov	r11, r24
			error = calculate_error(range, bearing, heading);
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    5a68:	20 e0       	ldi	r18, 0x00	; 0
    5a6a:	30 e0       	ldi	r19, 0x00	; 0
    5a6c:	40 ec       	ldi	r20, 0xC0	; 192
    5a6e:	5f e3       	ldi	r21, 0x3F	; 63
    5a70:	c7 01       	movw	r24, r14
    5a72:	b6 01       	movw	r22, r12
    5a74:	0e 94 88 49 	call	0x9310	; 0x9310 <__gesf2>
    5a78:	18 16       	cp	r1, r24
    5a7a:	0c f0       	brlt	.+2      	; 0x5a7e <useRnbData+0x4c4>
    5a7c:	11 cf       	rjmp	.-478    	; 0x58a0 <useRnbData+0x2e6>
    5a7e:	90 cf       	rjmp	.-224    	; 0x59a0 <useRnbData+0x3e6>
    5a80:	c3 01       	movw	r24, r6
    5a82:	b2 01       	movw	r22, r4
    5a84:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    5a88:	2b ed       	ldi	r18, 0xDB	; 219
    5a8a:	3f e0       	ldi	r19, 0x0F	; 15
    5a8c:	49 ec       	ldi	r20, 0xC9	; 201
    5a8e:	50 e4       	ldi	r21, 0x40	; 64
    5a90:	0e 94 56 48 	call	0x90ac	; 0x90ac <fmod>
    5a94:	2b ed       	ldi	r18, 0xDB	; 219
    5a96:	3f e0       	ldi	r19, 0x0F	; 15
    5a98:	49 e4       	ldi	r20, 0x49	; 73
    5a9a:	50 e4       	ldi	r21, 0x40	; 64
    5a9c:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    5aa0:	37 cf       	rjmp	.-402    	; 0x5910 <useRnbData+0x356>
    5aa2:	69 85       	ldd	r22, Y+9	; 0x09
    5aa4:	7a 85       	ldd	r23, Y+10	; 0x0a
    5aa6:	8b 85       	ldd	r24, Y+11	; 0x0b
    5aa8:	9c 85       	ldd	r25, Y+12	; 0x0c
    5aaa:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    5aae:	2b ed       	ldi	r18, 0xDB	; 219
    5ab0:	3f e0       	ldi	r19, 0x0F	; 15
    5ab2:	49 ec       	ldi	r20, 0xC9	; 201
    5ab4:	50 e4       	ldi	r21, 0x40	; 64
    5ab6:	0e 94 56 48 	call	0x90ac	; 0x90ac <fmod>
    5aba:	2b ed       	ldi	r18, 0xDB	; 219
    5abc:	3f e0       	ldi	r19, 0x0F	; 15
    5abe:	49 e4       	ldi	r20, 0x49	; 73
    5ac0:	50 e4       	ldi	r21, 0x40	; 64
    5ac2:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    5ac6:	57 cf       	rjmp	.-338    	; 0x5976 <useRnbData+0x3bc>
    5ac8:	20 e0       	ldi	r18, 0x00	; 0
    5aca:	30 e0       	ldi	r19, 0x00	; 0
    5acc:	40 e8       	ldi	r20, 0x80	; 128
    5ace:	5f e3       	ldi	r21, 0x3F	; 63
    5ad0:	c7 01       	movw	r24, r14
    5ad2:	b6 01       	movw	r22, r12
    5ad4:	0e 94 88 49 	call	0x9310	; 0x9310 <__gesf2>
    5ad8:	18 16       	cp	r1, r24
    5ada:	0c f0       	brlt	.+2      	; 0x5ade <useRnbData+0x524>
    5adc:	d7 ce       	rjmp	.-594    	; 0x588c <useRnbData+0x2d2>
    5ade:	60 cf       	rjmp	.-320    	; 0x59a0 <useRnbData+0x3e6>

00005ae0 <irRangeMeas>:
		warningLightSequence();
	}	
	return valSum;
}

void irRangeMeas(uint32_t rnbCmdSentTime){
    5ae0:	cf 92       	push	r12
    5ae2:	df 92       	push	r13
    5ae4:	ef 92       	push	r14
    5ae6:	ff 92       	push	r15
    5ae8:	1f 93       	push	r17
    5aea:	cf 93       	push	r28
    5aec:	df 93       	push	r29
    5aee:	28 e0       	ldi	r18, 0x08	; 8
    5af0:	c2 2e       	mov	r12, r18
    5af2:	d1 2c       	mov	r13, r1
    5af4:	e1 2c       	mov	r14, r1
    5af6:	f1 2c       	mov	r15, r1
    5af8:	c6 1a       	sub	r12, r22
    5afa:	d7 0a       	sbc	r13, r23
    5afc:	e8 0a       	sbc	r14, r24
    5afe:	f9 0a       	sbc	r15, r25
	//int32_t times[16] = {0};
	//times[0] = get_time();
	while((getTime()-rnbCmdSentTime+8)<POST_BROADCAST_DELAY);
    5b00:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5b04:	dc 01       	movw	r26, r24
    5b06:	cb 01       	movw	r24, r22
    5b08:	8c 0d       	add	r24, r12
    5b0a:	9d 1d       	adc	r25, r13
    5b0c:	ae 1d       	adc	r26, r14
    5b0e:	bf 1d       	adc	r27, r15
    5b10:	4e 97       	sbiw	r24, 0x1e	; 30
    5b12:	a1 05       	cpc	r26, r1
    5b14:	b1 05       	cpc	r27, r1
    5b16:	a0 f3       	brcs	.-24     	; 0x5b00 <irRangeMeas+0x20>
	//times[1] = get_time();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    5b18:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5b1a:	f8 94       	cli
		uint32_t pre_sync_op = getTime();
    5b1c:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5b20:	6b 01       	movw	r12, r22
    5b22:	7c 01       	movw	r14, r24
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
    5b24:	06 c0       	rjmp	.+12     	; 0x5b32 <irRangeMeas+0x52>
    5b26:	8f e9       	ldi	r24, 0x9F	; 159
    5b28:	9f e0       	ldi	r25, 0x0F	; 15
    5b2a:	01 97       	sbiw	r24, 0x01	; 1
    5b2c:	f1 f7       	brne	.-4      	; 0x5b2a <irRangeMeas+0x4a>
    5b2e:	00 c0       	rjmp	.+0      	; 0x5b30 <irRangeMeas+0x50>
    5b30:	00 00       	nop
    5b32:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5b36:	dc 01       	movw	r26, r24
    5b38:	cb 01       	movw	r24, r22
    5b3a:	8c 19       	sub	r24, r12
    5b3c:	9d 09       	sbc	r25, r13
    5b3e:	ae 09       	sbc	r26, r14
    5b40:	bf 09       	sbc	r27, r15
    5b42:	02 97       	sbiw	r24, 0x02	; 2
    5b44:	a1 05       	cpc	r26, r1
    5b46:	b1 05       	cpc	r27, r1
    5b48:	70 f3       	brcs	.-36     	; 0x5b26 <irRangeMeas+0x46>
    5b4a:	ce e0       	ldi	r28, 0x0E	; 14
    5b4c:	d3 e2       	ldi	r29, 0x23	; 35
		//times[2] = get_time();
		for(uint8_t emitter_dir = 0; emitter_dir < 6; emitter_dir++){
			pre_sync_op = getTime();
    5b4e:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5b52:	6b 01       	movw	r12, r22
    5b54:	7c 01       	movw	r14, r24
			//times[2*emitter_dir+3] = pre_sync_op;
			while((getTime() - pre_sync_op) < (TIME_FOR_GET_IR_VALS-TIME_FOR_IR_MEAS)/2) delay_us(500);
    5b56:	06 c0       	rjmp	.+12     	; 0x5b64 <irRangeMeas+0x84>
    5b58:	8f e9       	ldi	r24, 0x9F	; 159
    5b5a:	9f e0       	ldi	r25, 0x0F	; 15
    5b5c:	01 97       	sbiw	r24, 0x01	; 1
    5b5e:	f1 f7       	brne	.-4      	; 0x5b5c <irRangeMeas+0x7c>
    5b60:	00 c0       	rjmp	.+0      	; 0x5b62 <irRangeMeas+0x82>
    5b62:	00 00       	nop
    5b64:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5b68:	dc 01       	movw	r26, r24
    5b6a:	cb 01       	movw	r24, r22
    5b6c:	8c 19       	sub	r24, r12
    5b6e:	9d 09       	sbc	r25, r13
    5b70:	ae 09       	sbc	r26, r14
    5b72:	bf 09       	sbc	r27, r15
    5b74:	02 97       	sbiw	r24, 0x02	; 2
    5b76:	a1 05       	cpc	r26, r1
    5b78:	b1 05       	cpc	r27, r1
    5b7a:	70 f3       	brcs	.-36     	; 0x5b58 <irRangeMeas+0x78>
			getIrSensors(brightMeas[emitter_dir] , 9); //11
    5b7c:	69 e0       	ldi	r22, 0x09	; 9
    5b7e:	ce 01       	movw	r24, r28
    5b80:	0e 94 31 1c 	call	0x3862	; 0x3862 <getIrSensors>
			//times[2*emitter_dir+4] = get_time();			
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);		
    5b84:	06 c0       	rjmp	.+12     	; 0x5b92 <irRangeMeas+0xb2>
    5b86:	8f e9       	ldi	r24, 0x9F	; 159
    5b88:	9f e0       	ldi	r25, 0x0F	; 15
    5b8a:	01 97       	sbiw	r24, 0x01	; 1
    5b8c:	f1 f7       	brne	.-4      	; 0x5b8a <irRangeMeas+0xaa>
    5b8e:	00 c0       	rjmp	.+0      	; 0x5b90 <irRangeMeas+0xb0>
    5b90:	00 00       	nop
    5b92:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5b96:	dc 01       	movw	r26, r24
    5b98:	cb 01       	movw	r24, r22
    5b9a:	8c 19       	sub	r24, r12
    5b9c:	9d 09       	sbc	r25, r13
    5b9e:	ae 09       	sbc	r26, r14
    5ba0:	bf 09       	sbc	r27, r15
    5ba2:	40 97       	sbiw	r24, 0x10	; 16
    5ba4:	a1 05       	cpc	r26, r1
    5ba6:	b1 05       	cpc	r27, r1
    5ba8:	70 f3       	brcs	.-36     	; 0x5b86 <irRangeMeas+0xa6>
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
    5baa:	8a e0       	ldi	r24, 0x0A	; 10
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    5bb2:	2c 96       	adiw	r28, 0x0c	; 12
	//times[1] = get_time();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
		uint32_t pre_sync_op = getTime();
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
		//times[2] = get_time();
		for(uint8_t emitter_dir = 0; emitter_dir < 6; emitter_dir++){
    5bb4:	93 e2       	ldi	r25, 0x23	; 35
    5bb6:	c6 35       	cpi	r28, 0x56	; 86
    5bb8:	d9 07       	cpc	r29, r25
    5bba:	49 f6       	brne	.-110    	; 0x5b4e <irRangeMeas+0x6e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5bbc:	1f bf       	out	0x3f, r17	; 63
			//times[2*emitter_dir+4] = get_time();			
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);		
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
}
    5bbe:	df 91       	pop	r29
    5bc0:	cf 91       	pop	r28
    5bc2:	1f 91       	pop	r17
    5bc4:	ff 90       	pop	r15
    5bc6:	ef 90       	pop	r14
    5bc8:	df 90       	pop	r13
    5bca:	cf 90       	pop	r12
    5bcc:	08 95       	ret

00005bce <irRangeBlast>:

void irRangeBlast(uint32_t rnbCmdSentTime, uint8_t power __attribute__ ((unused))){
    5bce:	cf 92       	push	r12
    5bd0:	df 92       	push	r13
    5bd2:	ef 92       	push	r14
    5bd4:	ff 92       	push	r15
    5bd6:	0f 93       	push	r16
    5bd8:	1f 93       	push	r17
    5bda:	cf 93       	push	r28
    5bdc:	df 93       	push	r29
    5bde:	6b 01       	movw	r12, r22
    5be0:	7c 01       	movw	r14, r24
	//int32_t times[16] = {0};
	//times[0] = get_time();
	while((getTime() - rnbCmdSentTime) < POST_BROADCAST_DELAY) delay_us(500);
    5be2:	06 c0       	rjmp	.+12     	; 0x5bf0 <irRangeBlast+0x22>
    5be4:	8f e9       	ldi	r24, 0x9F	; 159
    5be6:	9f e0       	ldi	r25, 0x0F	; 15
    5be8:	01 97       	sbiw	r24, 0x01	; 1
    5bea:	f1 f7       	brne	.-4      	; 0x5be8 <irRangeBlast+0x1a>
    5bec:	00 c0       	rjmp	.+0      	; 0x5bee <irRangeBlast+0x20>
    5bee:	00 00       	nop
    5bf0:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5bf4:	dc 01       	movw	r26, r24
    5bf6:	cb 01       	movw	r24, r22
    5bf8:	8c 19       	sub	r24, r12
    5bfa:	9d 09       	sbc	r25, r13
    5bfc:	ae 09       	sbc	r26, r14
    5bfe:	bf 09       	sbc	r27, r15
    5c00:	4e 97       	sbiw	r24, 0x1e	; 30
    5c02:	a1 05       	cpc	r26, r1
    5c04:	b1 05       	cpc	r27, r1
    5c06:	70 f3       	brcs	.-36     	; 0x5be4 <irRangeBlast+0x16>
	//times[1] = get_time();
	uint32_t pre_sync_op = getTime();
    5c08:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5c0c:	6b 01       	movw	r12, r22
    5c0e:	7c 01       	movw	r14, r24
	uint16_t prevPower = curr_ir_power;
    5c10:	c0 91 24 26 	lds	r28, 0x2624	; 0x802624 <curr_ir_power>
    5c14:	d0 91 25 26 	lds	r29, 0x2625	; 0x802625 <curr_ir_power+0x1>
	setAllirPowers(256);	
    5c18:	80 e0       	ldi	r24, 0x00	; 0
    5c1a:	91 e0       	ldi	r25, 0x01	; 1
    5c1c:	0e 94 8f 1b 	call	0x371e	; 0x371e <setAllirPowers>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    5c20:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5c22:	f8 94       	cli
    5c24:	06 c0       	rjmp	.+12     	; 0x5c32 <irRangeBlast+0x64>
    5c26:	8f e9       	ldi	r24, 0x9F	; 159
    5c28:	9f e0       	ldi	r25, 0x0F	; 15
    5c2a:	01 97       	sbiw	r24, 0x01	; 1
    5c2c:	f1 f7       	brne	.-4      	; 0x5c2a <irRangeBlast+0x5c>
    5c2e:	00 c0       	rjmp	.+0      	; 0x5c30 <irRangeBlast+0x62>
    5c30:	00 00       	nop
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
    5c32:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5c36:	dc 01       	movw	r26, r24
    5c38:	cb 01       	movw	r24, r22
    5c3a:	8c 19       	sub	r24, r12
    5c3c:	9d 09       	sbc	r25, r13
    5c3e:	ae 09       	sbc	r26, r14
    5c40:	bf 09       	sbc	r27, r15
    5c42:	02 97       	sbiw	r24, 0x02	; 2
    5c44:	a1 05       	cpc	r26, r1
    5c46:	b1 05       	cpc	r27, r1
    5c48:	70 f3       	brcs	.-36     	; 0x5c26 <irRangeBlast+0x58>
    5c4a:	00 e0       	ldi	r16, 0x00	; 0
		//times[2] = get_time();
		for(uint8_t dir = 0; dir < 6; dir++){
			pre_sync_op = getTime();
    5c4c:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5c50:	6b 01       	movw	r12, r22
    5c52:	7c 01       	movw	r14, r24
			//set_red_led(255);
			//times[2*dir+3] = pre_sync_op;			
			irLedOn(dir);
    5c54:	80 2f       	mov	r24, r16
    5c56:	0e 94 2b 1b 	call	0x3656	; 0x3656 <irLedOn>
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);
    5c5a:	06 c0       	rjmp	.+12     	; 0x5c68 <irRangeBlast+0x9a>
    5c5c:	8f e9       	ldi	r24, 0x9F	; 159
    5c5e:	9f e0       	ldi	r25, 0x0F	; 15
    5c60:	01 97       	sbiw	r24, 0x01	; 1
    5c62:	f1 f7       	brne	.-4      	; 0x5c60 <irRangeBlast+0x92>
    5c64:	00 c0       	rjmp	.+0      	; 0x5c66 <irRangeBlast+0x98>
    5c66:	00 00       	nop
    5c68:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5c6c:	dc 01       	movw	r26, r24
    5c6e:	cb 01       	movw	r24, r22
    5c70:	8c 19       	sub	r24, r12
    5c72:	9d 09       	sbc	r25, r13
    5c74:	ae 09       	sbc	r26, r14
    5c76:	bf 09       	sbc	r27, r15
    5c78:	40 97       	sbiw	r24, 0x10	; 16
    5c7a:	a1 05       	cpc	r26, r1
    5c7c:	b1 05       	cpc	r27, r1
    5c7e:	70 f3       	brcs	.-36     	; 0x5c5c <irRangeBlast+0x8e>
			irLedOff(dir);
    5c80:	80 2f       	mov	r24, r16
    5c82:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <irLedOff>
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
    5c86:	8a e0       	ldi	r24, 0x0A	; 10
    5c88:	90 e0       	ldi	r25, 0x00	; 0
    5c8a:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
	uint16_t prevPower = curr_ir_power;
	setAllirPowers(256);	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
		//times[2] = get_time();
		for(uint8_t dir = 0; dir < 6; dir++){
    5c8e:	0f 5f       	subi	r16, 0xFF	; 255
    5c90:	06 30       	cpi	r16, 0x06	; 6
    5c92:	e1 f6       	brne	.-72     	; 0x5c4c <irRangeBlast+0x7e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5c94:	1f bf       	out	0x3f, r17	; 63
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
	setAllirPowers(prevPower);
    5c96:	ce 01       	movw	r24, r28
}
    5c98:	df 91       	pop	r29
    5c9a:	cf 91       	pop	r28
    5c9c:	1f 91       	pop	r17
    5c9e:	0f 91       	pop	r16
    5ca0:	ff 90       	pop	r15
    5ca2:	ef 90       	pop	r14
    5ca4:	df 90       	pop	r13
    5ca6:	cf 90       	pop	r12
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
	setAllirPowers(prevPower);
    5ca8:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <setAllirPowers>

00005cac <broadcastRnbData>:
	rnbCmdID=0;
	processing_rnb_flag=0;
}

//TODO: handle variable power.
void broadcastRnbData(){
    5cac:	cf 92       	push	r12
    5cae:	df 92       	push	r13
    5cb0:	ef 92       	push	r14
    5cb2:	ff 92       	push	r15
    5cb4:	1f 93       	push	r17
    5cb6:	cf 93       	push	r28
    5cb8:	df 93       	push	r29
    5cba:	1f 92       	push	r1
    5cbc:	cd b7       	in	r28, 0x3d	; 61
    5cbe:	de b7       	in	r29, 0x3e	; 62
	uint8_t power = 255;
	uint8_t goAhead = 0;
	uint8_t result = 0;
	uint8_t irStatus = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5cc0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5cc2:	f8 94       	cli
		irStatus = irIsBusy(ALL_DIRS);
    5cc4:	8f e3       	ldi	r24, 0x3F	; 63
    5cc6:	0e 94 55 12 	call	0x24aa	; 0x24aa <irIsBusy>
		if(!processing_rnb_flag){
    5cca:	90 91 78 24 	lds	r25, 0x2478	; 0x802478 <processing_rnb_flag>
    5cce:	91 11       	cpse	r25, r1
    5cd0:	22 c0       	rjmp	.+68     	; 0x5d16 <broadcastRnbData+0x6a>
			processing_rnb_flag = 1;
    5cd2:	91 e0       	ldi	r25, 0x01	; 1
    5cd4:	90 93 78 24 	sts	0x2478, r25	; 0x802478 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5cd8:	1f bf       	out	0x3f, r17	; 63
			goAhead = 1;
		}
	}
	if(goAhead){
    5cda:	91 11       	cpse	r25, r1
    5cdc:	20 c0       	rjmp	.+64     	; 0x5d1e <broadcastRnbData+0x72>
		}
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			processing_rnb_flag = 0;
		}
	}else{
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
    5cde:	90 91 78 24 	lds	r25, 0x2478	; 0x802478 <processing_rnb_flag>
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
    5ce2:	40 e4       	ldi	r20, 0x40	; 64
    5ce4:	94 9f       	mul	r25, r20
    5ce6:	90 01       	movw	r18, r0
    5ce8:	11 24       	eor	r1, r1
    5cea:	28 2b       	or	r18, r24
    5cec:	1f 92       	push	r1
    5cee:	2f 93       	push	r18
    5cf0:	89 ea       	ldi	r24, 0xA9	; 169
    5cf2:	98 e0       	ldi	r25, 0x08	; 8
    5cf4:	9f 93       	push	r25
    5cf6:	8f 93       	push	r24
    5cf8:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    5cfc:	0f 90       	pop	r0
    5cfe:	0f 90       	pop	r0
    5d00:	0f 90       	pop	r0
    5d02:	0f 90       	pop	r0
	}
}
    5d04:	0f 90       	pop	r0
    5d06:	df 91       	pop	r29
    5d08:	cf 91       	pop	r28
    5d0a:	1f 91       	pop	r17
    5d0c:	ff 90       	pop	r15
    5d0e:	ef 90       	pop	r14
    5d10:	df 90       	pop	r13
    5d12:	cf 90       	pop	r12
    5d14:	08 95       	ret
    5d16:	90 e0       	ldi	r25, 0x00	; 0
    5d18:	1f bf       	out	0x3f, r17	; 63
		if(!processing_rnb_flag){
			processing_rnb_flag = 1;
			goAhead = 1;
		}
	}
	if(goAhead){
    5d1a:	99 23       	and	r25, r25
    5d1c:	01 f3       	breq	.-64     	; 0x5cde <broadcastRnbData+0x32>
		uint32_t rnbCmdSentTime = getTime();
    5d1e:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5d22:	6b 01       	movw	r12, r22
    5d24:	7c 01       	movw	r14, r24
		char c = 'r';
    5d26:	82 e7       	ldi	r24, 0x72	; 114
    5d28:	89 83       	std	Y+1, r24	; 0x01
		result = hpIrTargetedCmd(ALL_DIRS, &c, 65, (uint16_t)(rnbCmdSentTime&0xFFFF));
    5d2a:	96 01       	movw	r18, r12
    5d2c:	41 e4       	ldi	r20, 0x41	; 65
    5d2e:	be 01       	movw	r22, r28
    5d30:	6f 5f       	subi	r22, 0xFF	; 255
    5d32:	7f 4f       	sbci	r23, 0xFF	; 255
    5d34:	8f e3       	ldi	r24, 0x3F	; 63
    5d36:	0e 94 ee 13 	call	0x27dc	; 0x27dc <hpIrTargetedCmd>
		if(result){
    5d3a:	88 23       	and	r24, r24
    5d3c:	81 f0       	breq	.+32     	; 0x5d5e <broadcastRnbData+0xb2>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5d3e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5d40:	f8 94       	cli
				hpIrBlock_bm = 0x3F;
    5d42:	9f e3       	ldi	r25, 0x3F	; 63
    5d44:	90 93 fd 23 	sts	0x23FD, r25	; 0x8023fd <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5d48:	8f bf       	out	0x3f, r24	; 63
			}		
			irRangeBlast(rnbCmdSentTime, power);
    5d4a:	4f ef       	ldi	r20, 0xFF	; 255
    5d4c:	c7 01       	movw	r24, r14
    5d4e:	b6 01       	movw	r22, r12
    5d50:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <irRangeBlast>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5d54:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5d56:	f8 94       	cli
				hpIrBlock_bm = 0;
    5d58:	10 92 fd 23 	sts	0x23FD, r1	; 0x8023fd <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5d5c:	8f bf       	out	0x3f, r24	; 63
			}
			//printf("rnb_b\r\n");
		}
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5d5e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5d60:	f8 94       	cli
			processing_rnb_flag = 0;
    5d62:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5d66:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    5d68:	cd cf       	rjmp	.-102    	; 0x5d04 <broadcastRnbData+0x58>

00005d6a <rgbLEDinit>:
#include "rgb_led.h"

void rgbLEDinit()
{
	// LED Pins as output
	PORTE.DIRSET = LED_R_PIN_bm | LED_G_PIN_bm;
    5d6a:	80 e3       	ldi	r24, 0x30	; 48
    5d6c:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	PORTD.DIRSET = LED_B_PIN_bm;
    5d70:	80 e1       	ldi	r24, 0x10	; 16
    5d72:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	
	//-------RED&GREEN--------
	TCE1.PER = 255;							
    5d76:	e0 e4       	ldi	r30, 0x40	; 64
    5d78:	fa e0       	ldi	r31, 0x0A	; 10
    5d7a:	2f ef       	ldi	r18, 0xFF	; 255
    5d7c:	30 e0       	ldi	r19, 0x00	; 0
    5d7e:	26 a3       	std	Z+38, r18	; 0x26
    5d80:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.CCA = 0;							
    5d82:	10 a6       	std	Z+40, r1	; 0x28
    5d84:	11 a6       	std	Z+41, r1	; 0x29
	TCE1.CCB = 0;							
    5d86:	12 a6       	std	Z+42, r1	; 0x2a
    5d88:	13 a6       	std	Z+43, r1	; 0x2b
	TCE1.CTRLA = TC_CLKSEL_DIV64_gc;		
    5d8a:	85 e0       	ldi	r24, 0x05	; 5
    5d8c:	80 83       	st	Z, r24
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm | TC1_CCAEN_bm;
    5d8e:	93 e3       	ldi	r25, 0x33	; 51
    5d90:	91 83       	std	Z+1, r25	; 0x01
	
	//---------BLUE-----------
	
	TCD1.PER = 255;
    5d92:	e0 e4       	ldi	r30, 0x40	; 64
    5d94:	f9 e0       	ldi	r31, 0x09	; 9
    5d96:	26 a3       	std	Z+38, r18	; 0x26
    5d98:	37 a3       	std	Z+39, r19	; 0x27
	TCD1.CCA = 0;
    5d9a:	10 a6       	std	Z+40, r1	; 0x28
    5d9c:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CTRLA = TC_CLKSEL_DIV64_gc;
    5d9e:	80 83       	st	Z, r24
	TCD1.CTRLB = TC_WGMODE_SS_gc | TC1_CCAEN_bm;	
    5da0:	83 e1       	ldi	r24, 0x13	; 19
    5da2:	81 83       	std	Z+1, r24	; 0x01
    5da4:	08 95       	ret

00005da6 <ledOff>:
}

void ledOff()
{ 
	TCE1.CCABUF = 0;
    5da6:	e0 e4       	ldi	r30, 0x40	; 64
    5da8:	fa e0       	ldi	r31, 0x0A	; 10
    5daa:	10 ae       	std	Z+56, r1	; 0x38
    5dac:	11 ae       	std	Z+57, r1	; 0x39
	TCE1.CCBBUF = 0;
    5dae:	12 ae       	std	Z+58, r1	; 0x3a
    5db0:	13 ae       	std	Z+59, r1	; 0x3b
	TCD1.CCABUF = 0;	
    5db2:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    5db6:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    5dba:	08 95       	ret

00005dbc <setRGB>:

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	e0 e4       	ldi	r30, 0x40	; 64
    5dc0:	fa e0       	ldi	r31, 0x0A	; 10
    5dc2:	82 af       	std	Z+58, r24	; 0x3a
    5dc4:	93 af       	std	Z+59, r25	; 0x3b

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    5dc6:	70 e0       	ldi	r23, 0x00	; 0
    5dc8:	60 af       	std	Z+56, r22	; 0x38
    5dca:	71 af       	std	Z+57, r23	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    5dcc:	50 e0       	ldi	r21, 0x00	; 0
    5dce:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    5dd2:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    5dd6:	08 95       	ret

00005dd8 <hsvToRGB>:
	setRGB(r,g,b);
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
    5dd8:	2f 92       	push	r2
    5dda:	3f 92       	push	r3
    5ddc:	4f 92       	push	r4
    5dde:	5f 92       	push	r5
    5de0:	6f 92       	push	r6
    5de2:	7f 92       	push	r7
    5de4:	8f 92       	push	r8
    5de6:	9f 92       	push	r9
    5de8:	af 92       	push	r10
    5dea:	bf 92       	push	r11
    5dec:	cf 92       	push	r12
    5dee:	df 92       	push	r13
    5df0:	ef 92       	push	r14
    5df2:	ff 92       	push	r15
    5df4:	0f 93       	push	r16
    5df6:	1f 93       	push	r17
    5df8:	cf 93       	push	r28
    5dfa:	df 93       	push	r29
    5dfc:	cd b7       	in	r28, 0x3d	; 61
    5dfe:	de b7       	in	r29, 0x3e	; 62
    5e00:	2c 97       	sbiw	r28, 0x0c	; 12
    5e02:	cd bf       	out	0x3d, r28	; 61
    5e04:	de bf       	out	0x3e, r29	; 62
    5e06:	8b 83       	std	Y+3, r24	; 0x03
    5e08:	9c 83       	std	Y+4, r25	; 0x04
    5e0a:	b4 2e       	mov	r11, r20
    5e0c:	19 01       	movw	r2, r18
    5e0e:	e9 82       	std	Y+1, r14	; 0x01
    5e10:	fa 82       	std	Y+2, r15	; 0x02
	float h = (hue%360)*1.0;
	float s = (1.0*saturation)/255.0;
    5e12:	70 e0       	ldi	r23, 0x00	; 0
    5e14:	80 e0       	ldi	r24, 0x00	; 0
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	0e 94 10 48 	call	0x9020	; 0x9020 <__floatsisf>
    5e1c:	20 e0       	ldi	r18, 0x00	; 0
    5e1e:	30 e0       	ldi	r19, 0x00	; 0
    5e20:	4f e7       	ldi	r20, 0x7F	; 127
    5e22:	53 e4       	ldi	r21, 0x43	; 67
    5e24:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    5e28:	6b 01       	movw	r12, r22
    5e2a:	7c 01       	movw	r14, r24
	float v = (1.0*val)/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (fabsf(s)<0.00001){
    5e2c:	9f 77       	andi	r25, 0x7F	; 127
    5e2e:	2c ea       	ldi	r18, 0xAC	; 172
    5e30:	35 ec       	ldi	r19, 0xC5	; 197
    5e32:	47 e2       	ldi	r20, 0x27	; 39
    5e34:	57 e3       	ldi	r21, 0x37	; 55
    5e36:	0e 94 22 47 	call	0x8e44	; 0x8e44 <__cmpsf2>
    5e3a:	87 fd       	sbrc	r24, 7
    5e3c:	f0 c0       	rjmp	.+480    	; 0x601e <hsvToRGB+0x246>
//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
	float s = (1.0*saturation)/255.0;
	float v = (1.0*val)/255.0;
    5e3e:	6b 2d       	mov	r22, r11
    5e40:	70 e0       	ldi	r23, 0x00	; 0
    5e42:	80 e0       	ldi	r24, 0x00	; 0
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	0e 94 10 48 	call	0x9020	; 0x9020 <__floatsisf>
    5e4a:	20 e0       	ldi	r18, 0x00	; 0
    5e4c:	30 e0       	ldi	r19, 0x00	; 0
    5e4e:	4f e7       	ldi	r20, 0x7F	; 127
    5e50:	53 e4       	ldi	r21, 0x43	; 67
    5e52:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    5e56:	4b 01       	movw	r8, r22
    5e58:	5c 01       	movw	r10, r24
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
    5e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    5e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    5e5e:	a3 e8       	ldi	r26, 0x83	; 131
    5e60:	bd e2       	ldi	r27, 0x2D	; 45
    5e62:	0e 94 97 4b 	call	0x972e	; 0x972e <__umulhisi3>
    5e66:	00 24       	eor	r0, r0
    5e68:	88 0f       	add	r24, r24
    5e6a:	99 1f       	adc	r25, r25
    5e6c:	00 1c       	adc	r0, r0
    5e6e:	88 0f       	add	r24, r24
    5e70:	99 1f       	adc	r25, r25
    5e72:	00 1c       	adc	r0, r0
    5e74:	89 2f       	mov	r24, r25
    5e76:	90 2d       	mov	r25, r0
    5e78:	48 e6       	ldi	r20, 0x68	; 104
    5e7a:	51 e0       	ldi	r21, 0x01	; 1
    5e7c:	84 9f       	mul	r24, r20
    5e7e:	90 01       	movw	r18, r0
    5e80:	85 9f       	mul	r24, r21
    5e82:	30 0d       	add	r19, r0
    5e84:	94 9f       	mul	r25, r20
    5e86:	30 0d       	add	r19, r0
    5e88:	11 24       	eor	r1, r1
    5e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    5e8e:	82 1b       	sub	r24, r18
    5e90:	93 0b       	sbc	r25, r19
    5e92:	8b 83       	std	Y+3, r24	; 0x03
    5e94:	9c 83       	std	Y+4, r25	; 0x04
    5e96:	bc 01       	movw	r22, r24
    5e98:	80 e0       	ldi	r24, 0x00	; 0
    5e9a:	90 e0       	ldi	r25, 0x00	; 0
    5e9c:	0e 94 0e 48 	call	0x901c	; 0x901c <__floatunsisf>
	if (fabsf(s)<0.00001){
		*red = *green = *blue = val;
		return;
	}
	
	h = h / 60.0;
    5ea0:	20 e0       	ldi	r18, 0x00	; 0
    5ea2:	30 e0       	ldi	r19, 0x00	; 0
    5ea4:	40 e7       	ldi	r20, 0x70	; 112
    5ea6:	52 e4       	ldi	r21, 0x42	; 66
    5ea8:	0e 94 2c 47 	call	0x8e58	; 0x8e58 <__divsf3>
    5eac:	2b 01       	movw	r4, r22
    5eae:	3c 01       	movw	r6, r24
	uint8_t i = (uint8_t)h;
    5eb0:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    5eb4:	6b 87       	std	Y+11, r22	; 0x0b
	f = h - i;
    5eb6:	70 e0       	ldi	r23, 0x00	; 0
    5eb8:	80 e0       	ldi	r24, 0x00	; 0
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	0e 94 10 48 	call	0x9020	; 0x9020 <__floatsisf>
    5ec0:	9b 01       	movw	r18, r22
    5ec2:	ac 01       	movw	r20, r24
    5ec4:	c3 01       	movw	r24, r6
    5ec6:	b2 01       	movw	r22, r4
    5ec8:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    5ecc:	2b 01       	movw	r4, r22
    5ece:	3c 01       	movw	r6, r24
	
	p = v*(1.0-s);
    5ed0:	a7 01       	movw	r20, r14
    5ed2:	96 01       	movw	r18, r12
    5ed4:	60 e0       	ldi	r22, 0x00	; 0
    5ed6:	70 e0       	ldi	r23, 0x00	; 0
    5ed8:	80 e8       	ldi	r24, 0x80	; 128
    5eda:	9f e3       	ldi	r25, 0x3F	; 63
    5edc:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    5ee0:	a5 01       	movw	r20, r10
    5ee2:	94 01       	movw	r18, r8
    5ee4:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5ee8:	6b 83       	std	Y+3, r22	; 0x03
    5eea:	7c 83       	std	Y+4, r23	; 0x04
    5eec:	8d 83       	std	Y+5, r24	; 0x05
    5eee:	9e 83       	std	Y+6, r25	; 0x06
	q = v*(1.0-s*f);
    5ef0:	a3 01       	movw	r20, r6
    5ef2:	92 01       	movw	r18, r4
    5ef4:	c7 01       	movw	r24, r14
    5ef6:	b6 01       	movw	r22, r12
    5ef8:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5efc:	9b 01       	movw	r18, r22
    5efe:	ac 01       	movw	r20, r24
    5f00:	60 e0       	ldi	r22, 0x00	; 0
    5f02:	70 e0       	ldi	r23, 0x00	; 0
    5f04:	80 e8       	ldi	r24, 0x80	; 128
    5f06:	9f e3       	ldi	r25, 0x3F	; 63
    5f08:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    5f0c:	a5 01       	movw	r20, r10
    5f0e:	94 01       	movw	r18, r8
    5f10:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5f14:	6f 83       	std	Y+7, r22	; 0x07
    5f16:	78 87       	std	Y+8, r23	; 0x08
    5f18:	89 87       	std	Y+9, r24	; 0x09
    5f1a:	9a 87       	std	Y+10, r25	; 0x0a
	t = v*(1.0-s*(1-f));
    5f1c:	a3 01       	movw	r20, r6
    5f1e:	92 01       	movw	r18, r4
    5f20:	60 e0       	ldi	r22, 0x00	; 0
    5f22:	70 e0       	ldi	r23, 0x00	; 0
    5f24:	80 e8       	ldi	r24, 0x80	; 128
    5f26:	9f e3       	ldi	r25, 0x3F	; 63
    5f28:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    5f2c:	a7 01       	movw	r20, r14
    5f2e:	96 01       	movw	r18, r12
    5f30:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5f34:	9b 01       	movw	r18, r22
    5f36:	ac 01       	movw	r20, r24
    5f38:	60 e0       	ldi	r22, 0x00	; 0
    5f3a:	70 e0       	ldi	r23, 0x00	; 0
    5f3c:	80 e8       	ldi	r24, 0x80	; 128
    5f3e:	9f e3       	ldi	r25, 0x3F	; 63
    5f40:	0e 94 43 46 	call	0x8c86	; 0x8c86 <__subsf3>
    5f44:	a5 01       	movw	r20, r10
    5f46:	94 01       	movw	r18, r8
    5f48:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5f4c:	6b 01       	movw	r12, r22
    5f4e:	7c 01       	movw	r14, r24
	
	switch(i)
    5f50:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f52:	92 30       	cpi	r25, 0x02	; 2
    5f54:	09 f4       	brne	.+2      	; 0x5f58 <hsvToRGB+0x180>
    5f56:	de c0       	rjmp	.+444    	; 0x6114 <hsvToRGB+0x33c>
    5f58:	70 f1       	brcs	.+92     	; 0x5fb6 <hsvToRGB+0x1de>
    5f5a:	eb 85       	ldd	r30, Y+11	; 0x0b
    5f5c:	e4 30       	cpi	r30, 0x04	; 4
    5f5e:	09 f4       	brne	.+2      	; 0x5f62 <hsvToRGB+0x18a>
    5f60:	c7 c0       	rjmp	.+398    	; 0x60f0 <hsvToRGB+0x318>
    5f62:	08 f4       	brcc	.+2      	; 0x5f66 <hsvToRGB+0x18e>
    5f64:	9c c0       	rjmp	.+312    	; 0x609e <hsvToRGB+0x2c6>
    5f66:	e5 30       	cpi	r30, 0x05	; 5
    5f68:	09 f0       	breq	.+2      	; 0x5f6c <hsvToRGB+0x194>
    5f6a:	be c0       	rjmp	.+380    	; 0x60e8 <hsvToRGB+0x310>
    5f6c:	20 e0       	ldi	r18, 0x00	; 0
    5f6e:	30 e0       	ldi	r19, 0x00	; 0
    5f70:	4f e7       	ldi	r20, 0x7F	; 127
    5f72:	53 e4       	ldi	r21, 0x43	; 67
    5f74:	c5 01       	movw	r24, r10
    5f76:	b4 01       	movw	r22, r8
    5f78:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5f7c:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    5f80:	6c 87       	std	Y+12, r22	; 0x0c
    5f82:	20 e0       	ldi	r18, 0x00	; 0
    5f84:	30 e0       	ldi	r19, 0x00	; 0
    5f86:	4f e7       	ldi	r20, 0x7F	; 127
    5f88:	53 e4       	ldi	r21, 0x43	; 67
    5f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    5f8c:	78 85       	ldd	r23, Y+8	; 0x08
    5f8e:	89 85       	ldd	r24, Y+9	; 0x09
    5f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f92:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5f96:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    5f9a:	6b 87       	std	Y+11, r22	; 0x0b
    5f9c:	20 e0       	ldi	r18, 0x00	; 0
    5f9e:	30 e0       	ldi	r19, 0x00	; 0
    5fa0:	4f e7       	ldi	r20, 0x7F	; 127
    5fa2:	53 e4       	ldi	r21, 0x43	; 67
    5fa4:	6b 81       	ldd	r22, Y+3	; 0x03
    5fa6:	7c 81       	ldd	r23, Y+4	; 0x04
    5fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    5faa:	9e 81       	ldd	r25, Y+6	; 0x06
    5fac:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5fb0:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
			break;
		case 5:
			r = v;
			g = p;
			b = q;
			break;
    5fb4:	2a c0       	rjmp	.+84     	; 0x600a <hsvToRGB+0x232>
	
	p = v*(1.0-s);
	q = v*(1.0-s*f);
	t = v*(1.0-s*(1-f));
	
	switch(i)
    5fb6:	99 23       	and	r25, r25
    5fb8:	09 f4       	brne	.+2      	; 0x5fbc <hsvToRGB+0x1e4>
    5fba:	4e c0       	rjmp	.+156    	; 0x6058 <hsvToRGB+0x280>
    5fbc:	91 30       	cpi	r25, 0x01	; 1
    5fbe:	09 f0       	breq	.+2      	; 0x5fc2 <hsvToRGB+0x1ea>
    5fc0:	93 c0       	rjmp	.+294    	; 0x60e8 <hsvToRGB+0x310>
    5fc2:	20 e0       	ldi	r18, 0x00	; 0
    5fc4:	30 e0       	ldi	r19, 0x00	; 0
    5fc6:	4f e7       	ldi	r20, 0x7F	; 127
    5fc8:	53 e4       	ldi	r21, 0x43	; 67
    5fca:	6f 81       	ldd	r22, Y+7	; 0x07
    5fcc:	78 85       	ldd	r23, Y+8	; 0x08
    5fce:	89 85       	ldd	r24, Y+9	; 0x09
    5fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fd2:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5fd6:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    5fda:	6c 87       	std	Y+12, r22	; 0x0c
    5fdc:	20 e0       	ldi	r18, 0x00	; 0
    5fde:	30 e0       	ldi	r19, 0x00	; 0
    5fe0:	4f e7       	ldi	r20, 0x7F	; 127
    5fe2:	53 e4       	ldi	r21, 0x43	; 67
    5fe4:	6b 81       	ldd	r22, Y+3	; 0x03
    5fe6:	7c 81       	ldd	r23, Y+4	; 0x04
    5fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    5fea:	9e 81       	ldd	r25, Y+6	; 0x06
    5fec:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    5ff0:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    5ff4:	6b 87       	std	Y+11, r22	; 0x0b
    5ff6:	20 e0       	ldi	r18, 0x00	; 0
    5ff8:	30 e0       	ldi	r19, 0x00	; 0
    5ffa:	4f e7       	ldi	r20, 0x7F	; 127
    5ffc:	53 e4       	ldi	r21, 0x43	; 67
    5ffe:	c5 01       	movw	r24, r10
    6000:	b4 01       	movw	r22, r8
    6002:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    6006:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
			break;
		default:
			//printf("SHOULD NEVER SEE THIS. i: %hhu",i);
			break;
	}
	*red = (uint8_t)(r*255);
    600a:	2c 85       	ldd	r18, Y+12	; 0x0c
    600c:	f1 01       	movw	r30, r2
    600e:	20 83       	st	Z, r18
	*blue = (uint8_t)(b*255);
    6010:	2b 85       	ldd	r18, Y+11	; 0x0b
    6012:	e9 81       	ldd	r30, Y+1	; 0x01
    6014:	fa 81       	ldd	r31, Y+2	; 0x02
    6016:	20 83       	st	Z, r18
	*green = (uint8_t)(g*255);
    6018:	f8 01       	movw	r30, r16
    601a:	60 83       	st	Z, r22
    601c:	07 c0       	rjmp	.+14     	; 0x602c <hsvToRGB+0x254>
	float v = (1.0*val)/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (fabsf(s)<0.00001){
		*red = *green = *blue = val;
    601e:	e9 81       	ldd	r30, Y+1	; 0x01
    6020:	fa 81       	ldd	r31, Y+2	; 0x02
    6022:	b0 82       	st	Z, r11
    6024:	f8 01       	movw	r30, r16
    6026:	b0 82       	st	Z, r11
    6028:	f1 01       	movw	r30, r2
    602a:	b0 82       	st	Z, r11
			break;
	}
	*red = (uint8_t)(r*255);
	*blue = (uint8_t)(b*255);
	*green = (uint8_t)(g*255);
    602c:	2c 96       	adiw	r28, 0x0c	; 12
    602e:	cd bf       	out	0x3d, r28	; 61
    6030:	de bf       	out	0x3e, r29	; 62
    6032:	df 91       	pop	r29
    6034:	cf 91       	pop	r28
    6036:	1f 91       	pop	r17
    6038:	0f 91       	pop	r16
    603a:	ff 90       	pop	r15
    603c:	ef 90       	pop	r14
    603e:	df 90       	pop	r13
    6040:	cf 90       	pop	r12
    6042:	bf 90       	pop	r11
    6044:	af 90       	pop	r10
    6046:	9f 90       	pop	r9
    6048:	8f 90       	pop	r8
    604a:	7f 90       	pop	r7
    604c:	6f 90       	pop	r6
    604e:	5f 90       	pop	r5
    6050:	4f 90       	pop	r4
    6052:	3f 90       	pop	r3
    6054:	2f 90       	pop	r2
    6056:	08 95       	ret
    6058:	20 e0       	ldi	r18, 0x00	; 0
    605a:	30 e0       	ldi	r19, 0x00	; 0
    605c:	4f e7       	ldi	r20, 0x7F	; 127
    605e:	53 e4       	ldi	r21, 0x43	; 67
    6060:	c5 01       	movw	r24, r10
    6062:	b4 01       	movw	r22, r8
    6064:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    6068:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    606c:	6c 87       	std	Y+12, r22	; 0x0c
    606e:	20 e0       	ldi	r18, 0x00	; 0
    6070:	30 e0       	ldi	r19, 0x00	; 0
    6072:	4f e7       	ldi	r20, 0x7F	; 127
    6074:	53 e4       	ldi	r21, 0x43	; 67
    6076:	6b 81       	ldd	r22, Y+3	; 0x03
    6078:	7c 81       	ldd	r23, Y+4	; 0x04
    607a:	8d 81       	ldd	r24, Y+5	; 0x05
    607c:	9e 81       	ldd	r25, Y+6	; 0x06
    607e:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    6082:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    6086:	6b 87       	std	Y+11, r22	; 0x0b
    6088:	20 e0       	ldi	r18, 0x00	; 0
    608a:	30 e0       	ldi	r19, 0x00	; 0
    608c:	4f e7       	ldi	r20, 0x7F	; 127
    608e:	53 e4       	ldi	r21, 0x43	; 67
    6090:	c7 01       	movw	r24, r14
    6092:	b6 01       	movw	r22, r12
    6094:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    6098:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
	{
		case 0:
			r = v;
			g = t;
			b = p;
			break;
    609c:	b6 cf       	rjmp	.-148    	; 0x600a <hsvToRGB+0x232>
    609e:	20 e0       	ldi	r18, 0x00	; 0
    60a0:	30 e0       	ldi	r19, 0x00	; 0
    60a2:	4f e7       	ldi	r20, 0x7F	; 127
    60a4:	53 e4       	ldi	r21, 0x43	; 67
    60a6:	6b 81       	ldd	r22, Y+3	; 0x03
    60a8:	7c 81       	ldd	r23, Y+4	; 0x04
    60aa:	8d 81       	ldd	r24, Y+5	; 0x05
    60ac:	9e 81       	ldd	r25, Y+6	; 0x06
    60ae:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    60b2:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    60b6:	6c 87       	std	Y+12, r22	; 0x0c
    60b8:	20 e0       	ldi	r18, 0x00	; 0
    60ba:	30 e0       	ldi	r19, 0x00	; 0
    60bc:	4f e7       	ldi	r20, 0x7F	; 127
    60be:	53 e4       	ldi	r21, 0x43	; 67
    60c0:	c5 01       	movw	r24, r10
    60c2:	b4 01       	movw	r22, r8
    60c4:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    60c8:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    60cc:	6b 87       	std	Y+11, r22	; 0x0b
    60ce:	20 e0       	ldi	r18, 0x00	; 0
    60d0:	30 e0       	ldi	r19, 0x00	; 0
    60d2:	4f e7       	ldi	r20, 0x7F	; 127
    60d4:	53 e4       	ldi	r21, 0x43	; 67
    60d6:	6f 81       	ldd	r22, Y+7	; 0x07
    60d8:	78 85       	ldd	r23, Y+8	; 0x08
    60da:	89 85       	ldd	r24, Y+9	; 0x09
    60dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    60de:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    60e2:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
			break;
		case 3:
			r = p;
			g = q;
			b = v;
			break;
    60e6:	91 cf       	rjmp	.-222    	; 0x600a <hsvToRGB+0x232>
	
	p = v*(1.0-s);
	q = v*(1.0-s*f);
	t = v*(1.0-s*(1-f));
	
	switch(i)
    60e8:	60 e0       	ldi	r22, 0x00	; 0
    60ea:	1b 86       	std	Y+11, r1	; 0x0b
    60ec:	1c 86       	std	Y+12, r1	; 0x0c
    60ee:	8d cf       	rjmp	.-230    	; 0x600a <hsvToRGB+0x232>
    60f0:	20 e0       	ldi	r18, 0x00	; 0
    60f2:	30 e0       	ldi	r19, 0x00	; 0
    60f4:	4f e7       	ldi	r20, 0x7F	; 127
    60f6:	53 e4       	ldi	r21, 0x43	; 67
    60f8:	c7 01       	movw	r24, r14
    60fa:	b6 01       	movw	r22, r12
    60fc:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    6100:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    6104:	6c 87       	std	Y+12, r22	; 0x0c
    6106:	20 e0       	ldi	r18, 0x00	; 0
    6108:	30 e0       	ldi	r19, 0x00	; 0
    610a:	4f e7       	ldi	r20, 0x7F	; 127
    610c:	53 e4       	ldi	r21, 0x43	; 67
    610e:	c5 01       	movw	r24, r10
    6110:	b4 01       	movw	r22, r8
    6112:	3f cf       	rjmp	.-386    	; 0x5f92 <hsvToRGB+0x1ba>
    6114:	20 e0       	ldi	r18, 0x00	; 0
    6116:	30 e0       	ldi	r19, 0x00	; 0
    6118:	4f e7       	ldi	r20, 0x7F	; 127
    611a:	53 e4       	ldi	r21, 0x43	; 67
    611c:	6b 81       	ldd	r22, Y+3	; 0x03
    611e:	7c 81       	ldd	r23, Y+4	; 0x04
    6120:	8d 81       	ldd	r24, Y+5	; 0x05
    6122:	9e 81       	ldd	r25, Y+6	; 0x06
    6124:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    6128:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    612c:	6c 87       	std	Y+12, r22	; 0x0c
    612e:	20 e0       	ldi	r18, 0x00	; 0
    6130:	30 e0       	ldi	r19, 0x00	; 0
    6132:	4f e7       	ldi	r20, 0x7F	; 127
    6134:	53 e4       	ldi	r21, 0x43	; 67
    6136:	c7 01       	movw	r24, r14
    6138:	b6 01       	movw	r22, r12
    613a:	58 cf       	rjmp	.-336    	; 0x5fec <hsvToRGB+0x214>

0000613c <setHSV>:
Hue should be between 0 and 360 (though it gets modulo'd with 360, so should be okay)
Saturation and value can be between 0 and 255, where 255 is brightest/most saturated,
and 0 is dimmest/least saturated.
*/
void setHSV(uint16_t h, uint8_t s, uint8_t v)
{
    613c:	ef 92       	push	r14
    613e:	ff 92       	push	r15
    6140:	0f 93       	push	r16
    6142:	1f 93       	push	r17
    6144:	cf 93       	push	r28
    6146:	df 93       	push	r29
    6148:	00 d0       	rcall	.+0      	; 0x614a <setHSV+0xe>
    614a:	cd b7       	in	r28, 0x3d	; 61
    614c:	de b7       	in	r29, 0x3e	; 62
	uint8_t r,g,b;
	hsvToRGB(h,s,v,&r,&g,&b);
    614e:	9e 01       	movw	r18, r28
    6150:	2f 5f       	subi	r18, 0xFF	; 255
    6152:	3f 4f       	sbci	r19, 0xFF	; 255
    6154:	79 01       	movw	r14, r18
    6156:	8e 01       	movw	r16, r28
    6158:	0e 5f       	subi	r16, 0xFE	; 254
    615a:	1f 4f       	sbci	r17, 0xFF	; 255
    615c:	2e 5f       	subi	r18, 0xFE	; 254
    615e:	3f 4f       	sbci	r19, 0xFF	; 255
    6160:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <hsvToRGB>
	setRGB(r,g,b);
    6164:	89 81       	ldd	r24, Y+1	; 0x01
    6166:	2a 81       	ldd	r18, Y+2	; 0x02

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    6168:	4b 81       	ldd	r20, Y+3	; 0x03
    616a:	50 e0       	ldi	r21, 0x00	; 0
    616c:	e0 e4       	ldi	r30, 0x40	; 64
    616e:	fa e0       	ldi	r31, 0x0A	; 10
    6170:	42 af       	std	Z+58, r20	; 0x3a
    6172:	53 af       	std	Z+59, r21	; 0x3b

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    6174:	30 e0       	ldi	r19, 0x00	; 0
    6176:	20 af       	std	Z+56, r18	; 0x38
    6178:	31 af       	std	Z+57, r19	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    617a:	90 e0       	ldi	r25, 0x00	; 0
    617c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    6180:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
}
    6184:	23 96       	adiw	r28, 0x03	; 3
    6186:	cd bf       	out	0x3d, r28	; 61
    6188:	de bf       	out	0x3e, r29	; 62
    618a:	df 91       	pop	r29
    618c:	cf 91       	pop	r28
    618e:	1f 91       	pop	r17
    6190:	0f 91       	pop	r16
    6192:	ff 90       	pop	r15
    6194:	ef 90       	pop	r14
    6196:	08 95       	ret

00006198 <measFindMedian>:
	#endif
}

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
    6198:	cf 93       	push	r28
    619a:	df 93       	push	r29
    619c:	ec 01       	movw	r28, r24
	if(arr_len==1) return meas[0];
    619e:	61 30       	cpi	r22, 0x01	; 1
    61a0:	09 f4       	brne	.+2      	; 0x61a4 <measFindMedian+0xc>
    61a2:	48 c0       	rjmp	.+144    	; 0x6234 <measFindMedian+0x9c>
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    61a4:	62 30       	cpi	r22, 0x02	; 2
    61a6:	09 f4       	brne	.+2      	; 0x61aa <measFindMedian+0x12>
    61a8:	4a c0       	rjmp	.+148    	; 0x623e <measFindMedian+0xa6>
	
	for(uint8_t i=0; i<arr_len ; i++){
    61aa:	66 23       	and	r22, r22
    61ac:	79 f1       	breq	.+94     	; 0x620c <measFindMedian+0x74>
    61ae:	de 01       	movw	r26, r28
    61b0:	80 e0       	ldi	r24, 0x00	; 0
		for(uint8_t j=i+1 ; j<arr_len ; j++){
    61b2:	8f 5f       	subi	r24, 0xFF	; 255
    61b4:	68 17       	cp	r22, r24
    61b6:	d9 f0       	breq	.+54     	; 0x61ee <measFindMedian+0x56>
    61b8:	98 2f       	mov	r25, r24
			if(meas[j] < meas[i]){
    61ba:	e9 2f       	mov	r30, r25
    61bc:	f0 e0       	ldi	r31, 0x00	; 0
    61be:	ee 0f       	add	r30, r30
    61c0:	ff 1f       	adc	r31, r31
    61c2:	ec 0f       	add	r30, r28
    61c4:	fd 1f       	adc	r31, r29
    61c6:	40 81       	ld	r20, Z
    61c8:	51 81       	ldd	r21, Z+1	; 0x01
    61ca:	2d 91       	ld	r18, X+
    61cc:	3c 91       	ld	r19, X
    61ce:	11 97       	sbiw	r26, 0x01	; 1
    61d0:	42 17       	cp	r20, r18
    61d2:	53 07       	cpc	r21, r19
    61d4:	2c f4       	brge	.+10     	; 0x61e0 <measFindMedian+0x48>
				int16_t temp = meas[i];
				meas[i] = meas[j];
    61d6:	4d 93       	st	X+, r20
    61d8:	5c 93       	st	X, r21
    61da:	11 97       	sbiw	r26, 0x01	; 1
				meas[j] = temp;
    61dc:	20 83       	st	Z, r18
    61de:	31 83       	std	Z+1, r19	; 0x01
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++){
		for(uint8_t j=i+1 ; j<arr_len ; j++){
    61e0:	9f 5f       	subi	r25, 0xFF	; 255
    61e2:	69 13       	cpse	r22, r25
    61e4:	ea cf       	rjmp	.-44     	; 0x61ba <measFindMedian+0x22>
    61e6:	12 96       	adiw	r26, 0x02	; 2
    61e8:	8f 5f       	subi	r24, 0xFF	; 255
    61ea:	68 13       	cpse	r22, r24
    61ec:	e5 cf       	rjmp	.-54     	; 0x61b8 <measFindMedian+0x20>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    61ee:	60 ff       	sbrs	r22, 0
    61f0:	0d c0       	rjmp	.+26     	; 0x620c <measFindMedian+0x74>
	else return meas[arr_len/2];
    61f2:	66 95       	lsr	r22
    61f4:	26 2f       	mov	r18, r22
    61f6:	30 e0       	ldi	r19, 0x00	; 0
    61f8:	22 0f       	add	r18, r18
    61fa:	33 1f       	adc	r19, r19
    61fc:	fe 01       	movw	r30, r28
    61fe:	e2 0f       	add	r30, r18
    6200:	f3 1f       	adc	r31, r19
    6202:	80 81       	ld	r24, Z
    6204:	91 81       	ldd	r25, Z+1	; 0x01
    6206:	df 91       	pop	r29
    6208:	cf 91       	pop	r28
    620a:	08 95       	ret
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    620c:	66 95       	lsr	r22
    620e:	fe 01       	movw	r30, r28
    6210:	e6 0f       	add	r30, r22
    6212:	f1 1d       	adc	r31, r1
    6214:	e6 0f       	add	r30, r22
    6216:	f1 1d       	adc	r31, r1
    6218:	32 97       	sbiw	r30, 0x02	; 2
    621a:	22 81       	ldd	r18, Z+2	; 0x02
    621c:	33 81       	ldd	r19, Z+3	; 0x03
    621e:	80 81       	ld	r24, Z
    6220:	91 81       	ldd	r25, Z+1	; 0x01
    6222:	82 0f       	add	r24, r18
    6224:	93 1f       	adc	r25, r19
    6226:	97 fd       	sbrc	r25, 7
    6228:	12 c0       	rjmp	.+36     	; 0x624e <measFindMedian+0xb6>
    622a:	95 95       	asr	r25
    622c:	87 95       	ror	r24
	else return meas[arr_len/2];
    622e:	df 91       	pop	r29
    6230:	cf 91       	pop	r28
    6232:	08 95       	ret
}

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
    6234:	88 81       	ld	r24, Y
    6236:	99 81       	ldd	r25, Y+1	; 0x01
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
	else return meas[arr_len/2];
    6238:	df 91       	pop	r29
    623a:	cf 91       	pop	r28
    623c:	08 95       	ret

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    623e:	28 81       	ld	r18, Y
    6240:	39 81       	ldd	r19, Y+1	; 0x01
    6242:	8a 81       	ldd	r24, Y+2	; 0x02
    6244:	9b 81       	ldd	r25, Y+3	; 0x03
    6246:	82 0f       	add	r24, r18
    6248:	93 1f       	adc	r25, r19
    624a:	97 ff       	sbrs	r25, 7
    624c:	ee cf       	rjmp	.-36     	; 0x622a <measFindMedian+0x92>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    624e:	01 96       	adiw	r24, 0x01	; 1
    6250:	ec cf       	rjmp	.-40     	; 0x622a <measFindMedian+0x92>

00006252 <getRedSensor>:
	#endif		
}

#ifndef AUDIO_DROPLET

int16_t getRedSensor(){
    6252:	cf 93       	push	r28
    6254:	df 93       	push	r29
    6256:	cd b7       	in	r28, 0x3d	; 61
    6258:	de b7       	in	r29, 0x3e	; 62
    625a:	2a 97       	sbiw	r28, 0x0a	; 10
    625c:	cd bf       	out	0x3d, r28	; 61
    625e:	de bf       	out	0x3e, r29	; 62
    6260:	fe 01       	movw	r30, r28
    6262:	31 96       	adiw	r30, 0x01	; 1
    6264:	ae 01       	movw	r20, r28
    6266:	45 5f       	subi	r20, 0xF5	; 245
    6268:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    626a:	31 e0       	ldi	r19, 0x01	; 1
int16_t getRedSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    626c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
    6270:	80 68       	ori	r24, 0x80	; 128
    6272:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
    6276:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
    627a:	88 23       	and	r24, r24
    627c:	e1 f3       	breq	.-8      	; 0x6276 <getRedSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
    627e:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    6282:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	92 2b       	or	r25, r18
    628a:	95 95       	asr	r25
    628c:	87 95       	ror	r24
    628e:	95 95       	asr	r25
    6290:	87 95       	ror	r24
    6292:	95 95       	asr	r25
    6294:	87 95       	ror	r24
    6296:	95 95       	asr	r25
    6298:	87 95       	ror	r24
    629a:	81 93       	st	Z+, r24
    629c:	91 93       	st	Z+, r25
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    629e:	30 93 23 02 	sts	0x0223, r19	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>

int16_t getRedSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
    62a2:	e4 17       	cp	r30, r20
    62a4:	f5 07       	cpc	r31, r21
    62a6:	11 f7       	brne	.-60     	; 0x626c <getRedSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
		//printf("%6d ", meas[meas_count]);
	}
	//printf("\r\n");
	red_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    62a8:	63 e0       	ldi	r22, 0x03	; 3
    62aa:	ce 01       	movw	r24, r28
    62ac:	05 96       	adiw	r24, 0x05	; 5
    62ae:	0e 94 cc 30 	call	0x6198	; 0x6198 <measFindMedian>
	return red_val;
}
    62b2:	2a 96       	adiw	r28, 0x0a	; 10
    62b4:	cd bf       	out	0x3d, r28	; 61
    62b6:	de bf       	out	0x3e, r29	; 62
    62b8:	df 91       	pop	r29
    62ba:	cf 91       	pop	r28
    62bc:	08 95       	ret

000062be <getGreenSensor>:

int16_t getGreenSensor(){
    62be:	cf 93       	push	r28
    62c0:	df 93       	push	r29
    62c2:	cd b7       	in	r28, 0x3d	; 61
    62c4:	de b7       	in	r29, 0x3e	; 62
    62c6:	2a 97       	sbiw	r28, 0x0a	; 10
    62c8:	cd bf       	out	0x3d, r28	; 61
    62ca:	de bf       	out	0x3e, r29	; 62
    62cc:	fe 01       	movw	r30, r28
    62ce:	31 96       	adiw	r30, 0x01	; 1
    62d0:	ae 01       	movw	r20, r28
    62d2:	45 5f       	subi	r20, 0xF5	; 245
    62d4:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
    62d6:	31 e0       	ldi	r19, 0x01	; 1
int16_t getGreenSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    62d8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
    62dc:	80 68       	ori	r24, 0x80	; 128
    62de:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
    62e2:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>
    62e6:	88 23       	and	r24, r24
    62e8:	e1 f3       	breq	.-8      	; 0x62e2 <getGreenSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
    62ea:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    62ee:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	92 2b       	or	r25, r18
    62f6:	95 95       	asr	r25
    62f8:	87 95       	ror	r24
    62fa:	95 95       	asr	r25
    62fc:	87 95       	ror	r24
    62fe:	95 95       	asr	r25
    6300:	87 95       	ror	r24
    6302:	95 95       	asr	r25
    6304:	87 95       	ror	r24
    6306:	81 93       	st	Z+, r24
    6308:	91 93       	st	Z+, r25
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
    630a:	30 93 2b 02 	sts	0x022B, r19	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>

int16_t getGreenSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
    630e:	e4 17       	cp	r30, r20
    6310:	f5 07       	cpc	r31, r21
    6312:	11 f7       	brne	.-60     	; 0x62d8 <getGreenSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
		//printf("%6d ", meas[meas_count]);
	}
	//printf("\r\n");
	green_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    6314:	63 e0       	ldi	r22, 0x03	; 3
    6316:	ce 01       	movw	r24, r28
    6318:	05 96       	adiw	r24, 0x05	; 5
    631a:	0e 94 cc 30 	call	0x6198	; 0x6198 <measFindMedian>

	return green_val;
}
    631e:	2a 96       	adiw	r28, 0x0a	; 10
    6320:	cd bf       	out	0x3d, r28	; 61
    6322:	de bf       	out	0x3e, r29	; 62
    6324:	df 91       	pop	r29
    6326:	cf 91       	pop	r28
    6328:	08 95       	ret

0000632a <getBlueSensor>:

int16_t getBlueSensor(){
    632a:	cf 93       	push	r28
    632c:	df 93       	push	r29
    632e:	cd b7       	in	r28, 0x3d	; 61
    6330:	de b7       	in	r29, 0x3e	; 62
    6332:	2a 97       	sbiw	r28, 0x0a	; 10
    6334:	cd bf       	out	0x3d, r28	; 61
    6336:	de bf       	out	0x3e, r29	; 62
    6338:	fe 01       	movw	r30, r28
    633a:	31 96       	adiw	r30, 0x01	; 1
    633c:	ae 01       	movw	r20, r28
    633e:	45 5f       	subi	r20, 0xF5	; 245
    6340:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    6342:	31 e0       	ldi	r19, 0x01	; 1
int16_t getBlueSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    6344:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
    6348:	80 68       	ori	r24, 0x80	; 128
    634a:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
    634e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>
    6352:	88 23       	and	r24, r24
    6354:	e1 f3       	breq	.-8      	; 0x634e <getBlueSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
    6356:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    635a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    635e:	90 e0       	ldi	r25, 0x00	; 0
    6360:	92 2b       	or	r25, r18
    6362:	95 95       	asr	r25
    6364:	87 95       	ror	r24
    6366:	95 95       	asr	r25
    6368:	87 95       	ror	r24
    636a:	95 95       	asr	r25
    636c:	87 95       	ror	r24
    636e:	95 95       	asr	r25
    6370:	87 95       	ror	r24
    6372:	81 93       	st	Z+, r24
    6374:	91 93       	st	Z+, r25
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    6376:	30 93 33 02 	sts	0x0233, r19	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>

int16_t getBlueSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
    637a:	e4 17       	cp	r30, r20
    637c:	f5 07       	cpc	r31, r21
    637e:	11 f7       	brne	.-60     	; 0x6344 <getBlueSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
		//printf("%6d ", meas[meas_count]);
	}		
	//printf("\r\n");
	blue_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    6380:	63 e0       	ldi	r22, 0x03	; 3
    6382:	ce 01       	movw	r24, r28
    6384:	05 96       	adiw	r24, 0x05	; 5
    6386:	0e 94 cc 30 	call	0x6198	; 0x6198 <measFindMedian>
		
	return blue_val;
}
    638a:	2a 96       	adiw	r28, 0x0a	; 10
    638c:	cd bf       	out	0x3d, r28	; 61
    638e:	de bf       	out	0x3e, r29	; 62
    6390:	df 91       	pop	r29
    6392:	cf 91       	pop	r28
    6394:	08 95       	ret

00006396 <rgbSensorInit>:
	uint32_t i;
	float f;
} u;

void rgbSensorInit()
{
    6396:	cf 93       	push	r28
		result = twiWriteWrapper(RGB_SENSE_ADDR, &(power_on_sequence[4]), 2, callerDescr);
		if(!result)	printf_P(RGB_SENSE_POWERON_FAILURE,3);
		result = twiWriteWrapper(RGB_SENSE_ADDR, &(power_on_sequence[6]), 2, callerDescr);
		if(!result)	printf_P(RGB_SENSE_POWERON_FAILURE,4);
	#else		
		RGB_SENSOR_PORT.DIRCLR = RGB_SENSOR_R_PIN_bm | RGB_SENSOR_G_PIN_bm | RGB_SENSOR_B_PIN_bm;
    6398:	80 ee       	ldi	r24, 0xE0	; 224
    639a:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>

		ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    639e:	80 e2       	ldi	r24, 0x20	; 32
    63a0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
		ADCA.CTRLB = ADC_RESOLUTION_LEFT12BIT_gc | ADC_CONMODE_bm;
    63a4:	86 e1       	ldi	r24, 0x16	; 22
    63a6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc;
    63aa:	86 e0       	ldi	r24, 0x06	; 6
    63ac:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
		/* When differential input is used, signed mode must be used. (sec. 28.6 of Manual) */

		ADCA.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    63b0:	83 e0       	ldi	r24, 0x03	; 3
    63b2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		ADCA.CH1.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    63b6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
		ADCA.CH2.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_2X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    63ba:	87 e0       	ldi	r24, 0x07	; 7
    63bc:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
	
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Red sensor on ADC A channel 0
    63c0:	8c e2       	ldi	r24, 0x2C	; 44
    63c2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
		ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN6_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Green sensor on ADC A channel 1
    63c6:	84 e3       	ldi	r24, 0x34	; 52
    63c8:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <__TEXT_REGION_LENGTH__+0x700229>
		ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Blue sensor on ADC A channel 2
    63cc:	8c e3       	ldi	r24, 0x3C	; 60
    63ce:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__TEXT_REGION_LENGTH__+0x700231>
	
		ADCA.CALL = PRODSIGNATURES_ADCACAL0;
    63d2:	80 b5       	in	r24, 0x20	; 32
    63d4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
		ADCA.CALH = PRODSIGNATURES_ADCACAL1;
    63d8:	81 b5       	in	r24, 0x21	; 33
    63da:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>

		ADCA.CTRLA = ADC_ENABLE_bm;
    63de:	81 e0       	ldi	r24, 0x01	; 1
    63e0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
    63e4:	8f e8       	ldi	r24, 0x8F	; 143
    63e6:	91 e0       	ldi	r25, 0x01	; 1
    63e8:	01 97       	sbiw	r24, 0x01	; 1
    63ea:	f1 f7       	brne	.-4      	; 0x63e8 <rgbSensorInit+0x52>
    63ec:	00 c0       	rjmp	.+0      	; 0x63ee <rgbSensorInit+0x58>
    63ee:	00 00       	nop
	
		//read_color_settings();
	
		delay_us(50);
		const int8_t num_samples = 3;
		getRedSensor(); getBlueSensor(); getGreenSensor();
    63f0:	0e 94 29 31 	call	0x6252	; 0x6252 <getRedSensor>
    63f4:	0e 94 95 31 	call	0x632a	; 0x632a <getBlueSensor>
    63f8:	0e 94 5f 31 	call	0x62be	; 0x62be <getGreenSensor>
		delayMS(10);
    63fc:	8a e0       	ldi	r24, 0x0A	; 10
    63fe:	90 e0       	ldi	r25, 0x00	; 0
    6400:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    6404:	c0 e0       	ldi	r28, 0x00	; 0
		int16_t r_avg=0, g_avg=0, b_avg=0;
		for(uint8_t i=0; i<num_samples; i++)
		{
			r_avg+=getRedSensor();
    6406:	0e 94 29 31 	call	0x6252	; 0x6252 <getRedSensor>
			g_avg+=getGreenSensor();
    640a:	0e 94 5f 31 	call	0x62be	; 0x62be <getGreenSensor>
			b_avg+=getBlueSensor();
    640e:	0e 94 95 31 	call	0x632a	; 0x632a <getBlueSensor>
			delayMS(10);
    6412:	8a e0       	ldi	r24, 0x0A	; 10
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
		delay_us(50);
		const int8_t num_samples = 3;
		getRedSensor(); getBlueSensor(); getGreenSensor();
		delayMS(10);
		int16_t r_avg=0, g_avg=0, b_avg=0;
		for(uint8_t i=0; i<num_samples; i++)
    641a:	cf 5f       	subi	r28, 0xFF	; 255
    641c:	c3 30       	cpi	r28, 0x03	; 3
    641e:	99 f7       	brne	.-26     	; 0x6406 <rgbSensorInit+0x70>
		}
		r_baseline= r_avg/num_samples;
		g_baseline= g_avg/num_samples;
		b_baseline= b_avg/num_samples;
		//printf("Baselines:\r\n%3d  %3d  %3d\r\n", r_baseline, g_baseline, b_baseline);
		r_baseline = 0;
    6420:	10 92 5e 23 	sts	0x235E, r1	; 0x80235e <r_baseline>
    6424:	10 92 5f 23 	sts	0x235F, r1	; 0x80235f <r_baseline+0x1>
		g_baseline = 0;
    6428:	10 92 5c 23 	sts	0x235C, r1	; 0x80235c <g_baseline>
    642c:	10 92 5d 23 	sts	0x235D, r1	; 0x80235d <g_baseline+0x1>
		b_baseline = 0;	
    6430:	10 92 5a 23 	sts	0x235A, r1	; 0x80235a <b_baseline>
    6434:	10 92 5b 23 	sts	0x235B, r1	; 0x80235b <b_baseline+0x1>
	#endif		
}
    6438:	cf 91       	pop	r28
    643a:	08 95       	ret

0000643c <getRGB>:

#endif


void getRGB(int16_t *r, int16_t *g, int16_t *b)
{
    643c:	af 92       	push	r10
    643e:	bf 92       	push	r11
    6440:	cf 92       	push	r12
    6442:	df 92       	push	r13
    6444:	ef 92       	push	r14
    6446:	ff 92       	push	r15
    6448:	0f 93       	push	r16
    644a:	1f 93       	push	r17
    644c:	cf 93       	push	r28
    644e:	df 93       	push	r29
    6450:	5c 01       	movw	r10, r24
    6452:	6b 01       	movw	r12, r22
    6454:	7a 01       	movw	r14, r20
		}
		else printf_P(PSTR("Read failed.\r\n"));
	#else
		int16_t rTemp,gTemp,bTemp;
	
		rTemp = getRedSensor();
    6456:	0e 94 29 31 	call	0x6252	; 0x6252 <getRedSensor>
    645a:	8c 01       	movw	r16, r24
		gTemp = getGreenSensor();
    645c:	0e 94 5f 31 	call	0x62be	; 0x62be <getGreenSensor>
    6460:	ec 01       	movw	r28, r24
		bTemp = getBlueSensor();		
    6462:	0e 94 95 31 	call	0x632a	; 0x632a <getBlueSensor>
		rTemp = rTemp - r_baseline;
    6466:	20 91 5e 23 	lds	r18, 0x235E	; 0x80235e <r_baseline>
    646a:	30 91 5f 23 	lds	r19, 0x235F	; 0x80235f <r_baseline+0x1>
    646e:	02 1b       	sub	r16, r18
    6470:	13 0b       	sbc	r17, r19
		gTemp = gTemp - g_baseline;
    6472:	20 91 5c 23 	lds	r18, 0x235C	; 0x80235c <g_baseline>
    6476:	30 91 5d 23 	lds	r19, 0x235D	; 0x80235d <g_baseline+0x1>
    647a:	c2 1b       	sub	r28, r18
    647c:	d3 0b       	sbc	r29, r19
		bTemp = bTemp - b_baseline;
    647e:	20 91 5a 23 	lds	r18, 0x235A	; 0x80235a <b_baseline>
    6482:	30 91 5b 23 	lds	r19, 0x235B	; 0x80235b <b_baseline+0x1>
    6486:	82 1b       	sub	r24, r18
    6488:	93 0b       	sbc	r25, r19
		//if(rTemp<0)	rTemp=0;
		//if(gTemp<0)	gTemp=0;
		//if(bTemp<0)	bTemp=0;
		if(r!=NULL) *r = rTemp;
    648a:	a1 14       	cp	r10, r1
    648c:	b1 04       	cpc	r11, r1
    648e:	19 f0       	breq	.+6      	; 0x6496 <getRGB+0x5a>
    6490:	f5 01       	movw	r30, r10
    6492:	00 83       	st	Z, r16
    6494:	11 83       	std	Z+1, r17	; 0x01
		if(g!=NULL) *g = gTemp;
    6496:	c1 14       	cp	r12, r1
    6498:	d1 04       	cpc	r13, r1
    649a:	19 f0       	breq	.+6      	; 0x64a2 <getRGB+0x66>
    649c:	f6 01       	movw	r30, r12
    649e:	c0 83       	st	Z, r28
    64a0:	d1 83       	std	Z+1, r29	; 0x01
		if(b!=NULL) *b = bTemp;
    64a2:	e1 14       	cp	r14, r1
    64a4:	f1 04       	cpc	r15, r1
    64a6:	19 f0       	breq	.+6      	; 0x64ae <getRGB+0x72>
    64a8:	f7 01       	movw	r30, r14
    64aa:	80 83       	st	Z, r24
    64ac:	91 83       	std	Z+1, r25	; 0x01
	#endif
}
    64ae:	df 91       	pop	r29
    64b0:	cf 91       	pop	r28
    64b2:	1f 91       	pop	r17
    64b4:	0f 91       	pop	r16
    64b6:	ff 90       	pop	r15
    64b8:	ef 90       	pop	r14
    64ba:	df 90       	pop	r13
    64bc:	cf 90       	pop	r12
    64be:	bf 90       	pop	r11
    64c0:	af 90       	pop	r10
    64c2:	08 95       	ret

000064c4 <scheduler_free>:
	
	return (volatile Task_t*)0xFFFF;

}

static void scheduler_free(volatile Task_t* tgt){
    64c4:	cf 93       	push	r28
    64c6:	df 93       	push	r29
    64c8:	ec 01       	movw	r28, r24
	if((tgt<task_storage_arr)||(tgt>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS])))){
    64ca:	83 e2       	ldi	r24, 0x23	; 35
    64cc:	c0 36       	cpi	r28, 0x60	; 96
    64ce:	d8 07       	cpc	r29, r24
    64d0:	28 f0       	brcs	.+10     	; 0x64dc <scheduler_free+0x18>
    64d2:	83 e2       	ldi	r24, 0x23	; 35
    64d4:	cc 3e       	cpi	r28, 0xEC	; 236
    64d6:	d8 07       	cpc	r29, r24
    64d8:	b1 f0       	breq	.+44     	; 0x6506 <scheduler_free+0x42>
    64da:	a8 f0       	brcs	.+42     	; 0x6506 <scheduler_free+0x42>
		printf_P(PSTR("ERROR: In scheduler_free, tgt (%X) was outside valid Task* range.\r\n"),tgt);
    64dc:	df 93       	push	r29
    64de:	cf 93       	push	r28
    64e0:	8a ed       	ldi	r24, 0xDA	; 218
    64e2:	9b e0       	ldi	r25, 0x0B	; 11
    64e4:	9f 93       	push	r25
    64e6:	8f 93       	push	r24
    64e8:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
		setRGB(0,0,255);
    64ec:	4f ef       	ldi	r20, 0xFF	; 255
    64ee:	60 e0       	ldi	r22, 0x00	; 0
    64f0:	80 e0       	ldi	r24, 0x00	; 0
    64f2:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
		delayMS(60000);
    64f6:	80 e6       	ldi	r24, 0x60	; 96
    64f8:	9a ee       	ldi	r25, 0xEA	; 234
    64fa:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    64fe:	0f 90       	pop	r0
    6500:	0f 90       	pop	r0
    6502:	0f 90       	pop	r0
    6504:	0f 90       	pop	r0
	}
	tgt->arg = 0;
    6506:	1a 86       	std	Y+10, r1	; 0x0a
    6508:	1b 86       	std	Y+11, r1	; 0x0b
	tgt->period = 0;
    650a:	1c 82       	std	Y+4, r1	; 0x04
    650c:	1d 82       	std	Y+5, r1	; 0x05
    650e:	1e 82       	std	Y+6, r1	; 0x06
    6510:	1f 82       	std	Y+7, r1	; 0x07
	(tgt->func).noarg_func = ((void (*)(void))NULL);
    6512:	18 86       	std	Y+8, r1	; 0x08
    6514:	19 86       	std	Y+9, r1	; 0x09
	tgt->scheduled_time = 0;
    6516:	18 82       	st	Y, r1
    6518:	19 82       	std	Y+1, r1	; 0x01
    651a:	1a 82       	std	Y+2, r1	; 0x02
    651c:	1b 82       	std	Y+3, r1	; 0x03
	tgt->next = NULL;
    651e:	1c 86       	std	Y+12, r1	; 0x0c
    6520:	1d 86       	std	Y+13, r1	; 0x0d
}
    6522:	df 91       	pop	r29
    6524:	cf 91       	pop	r28
    6526:	08 95       	ret

00006528 <schedulerInit>:

void schedulerInit(){
    6528:	0f 93       	push	r16
    652a:	1f 93       	push	r17
    652c:	cf 93       	push	r28
    652e:	df 93       	push	r29
	task_list = NULL;
    6530:	10 92 16 26 	sts	0x2616, r1	; 0x802616 <task_list>
    6534:	10 92 17 26 	sts	0x2617, r1	; 0x802617 <task_list+0x1>
	num_tasks = 0;
    6538:	10 92 fe 23 	sts	0x23FE, r1	; 0x8023fe <num_tasks>
	task_executing = 0;
    653c:	10 92 11 26 	sts	0x2611, r1	; 0x802611 <task_executing>
    6540:	c0 e6       	ldi	r28, 0x60	; 96
    6542:	d3 e2       	ldi	r29, 0x23	; 35
    6544:	0c ee       	ldi	r16, 0xEC	; 236
    6546:	13 e2       	ldi	r17, 0x23	; 35
	for(uint8_t i=0; i<MAX_NUM_SCHEDULED_TASKS; i++) scheduler_free(&task_storage_arr[i]);
    6548:	ce 01       	movw	r24, r28
    654a:	0e 94 62 32 	call	0x64c4	; 0x64c4 <scheduler_free>
    654e:	2e 96       	adiw	r28, 0x0e	; 14
    6550:	0c 17       	cp	r16, r28
    6552:	1d 07       	cpc	r17, r29
    6554:	c9 f7       	brne	.-14     	; 0x6548 <schedulerInit+0x20>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){  // Disable interrupts during initialization
    6556:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6558:	f8 94       	cli
		// Set up real-time clock
		rtc_epoch = 0;
    655a:	10 92 ee 23 	sts	0x23EE, r1	; 0x8023ee <rtc_epoch>
    655e:	10 92 ef 23 	sts	0x23EF, r1	; 0x8023ef <rtc_epoch+0x1>
		CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    6562:	85 e0       	ldi	r24, 0x05	; 5
    6564:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
		RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;		// High level overflow interrupt to increment the epoch counter
    6568:	83 e0       	ldi	r24, 0x03	; 3
    656a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    656e:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6572:	80 fd       	sbrc	r24, 0
    6574:	fc cf       	rjmp	.-8      	; 0x656e <schedulerInit+0x46>
		RTC.PER = 0xFFFF;
    6576:	2f ef       	ldi	r18, 0xFF	; 255
    6578:	3f ef       	ldi	r19, 0xFF	; 255
    657a:	20 93 0a 04 	sts	0x040A, r18	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    657e:	30 93 0b 04 	sts	0x040B, r19	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6582:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6586:	80 fd       	sbrc	r24, 0
    6588:	fc cf       	rjmp	.-8      	; 0x6582 <schedulerInit+0x5a>
		RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    658a:	81 e0       	ldi	r24, 0x01	; 1
    658c:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6590:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6594:	80 fd       	sbrc	r24, 0
    6596:	fc cf       	rjmp	.-8      	; 0x6590 <schedulerInit+0x68>
		RTC.CNT = 0;
    6598:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    659c:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    65a0:	9f bf       	out	0x3f, r25	; 63
	}
}
    65a2:	df 91       	pop	r29
    65a4:	cf 91       	pop	r28
    65a6:	1f 91       	pop	r17
    65a8:	0f 91       	pop	r16
    65aa:	08 95       	ret

000065ac <taskListCleanup>:

//This function checks for errors or inconsistencies in the task list, and attempts to correct them.
void taskListCleanup(){
    65ac:	cf 92       	push	r12
    65ae:	df 92       	push	r13
    65b0:	ef 92       	push	r14
    65b2:	ff 92       	push	r15
    65b4:	0f 93       	push	r16
    65b6:	1f 93       	push	r17
    65b8:	cf 93       	push	r28
    65ba:	df 93       	push	r29
	printf_P(PSTR("\tAttempting to restore task_list.\r\n\tIf you only see this message rarely, don't worry too much.\r\n"));
    65bc:	89 e7       	ldi	r24, 0x79	; 121
    65be:	9b e0       	ldi	r25, 0x0B	; 11
    65c0:	9f 93       	push	r25
    65c2:	8f 93       	push	r24
    65c4:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
	volatile Task_t* cur_task = task_list;
    65c8:	c0 91 16 26 	lds	r28, 0x2616	; 0x802616 <task_list>
    65cc:	d0 91 17 26 	lds	r29, 0x2617	; 0x802617 <task_list+0x1>
	//volatile Task_t* prev_task;
	uint32_t nextTime = getTime()+500;
    65d0:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    65d4:	ab 01       	movw	r20, r22
    65d6:	bc 01       	movw	r22, r24
    65d8:	4c 50       	subi	r20, 0x0C	; 12
    65da:	5e 4f       	sbci	r21, 0xFE	; 254
    65dc:	6f 4f       	sbci	r22, 0xFF	; 255
    65de:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    65e0:	ef b7       	in	r30, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    65e2:	f8 94       	cli
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    65e4:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    65e8:	8b 7f       	andi	r24, 0xFB	; 251
    65ea:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		while (cur_task != NULL){
    65ee:	0f 90       	pop	r0
    65f0:	0f 90       	pop	r0
    65f2:	20 97       	sbiw	r28, 0x00	; 0
    65f4:	99 f1       	breq	.+102    	; 0x665c <taskListCleanup+0xb0>
			cur_task->scheduled_time = nextTime;
    65f6:	48 83       	st	Y, r20
    65f8:	59 83       	std	Y+1, r21	; 0x01
    65fa:	6a 83       	std	Y+2, r22	; 0x02
    65fc:	7b 83       	std	Y+3, r23	; 0x03
			if(first){
				if (cur_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    65fe:	c8 80       	ld	r12, Y
    6600:	d9 80       	ldd	r13, Y+1	; 0x01
    6602:	ea 80       	ldd	r14, Y+2	; 0x02
    6604:	fb 80       	ldd	r15, Y+3	; 0x03
    6606:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <rtc_epoch>
    660a:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <rtc_epoch+0x1>
    660e:	00 91 0a 04 	lds	r16, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    6612:	10 91 0b 04 	lds	r17, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    6616:	a0 e0       	ldi	r26, 0x00	; 0
    6618:	b0 e0       	ldi	r27, 0x00	; 0
    661a:	dc 01       	movw	r26, r24
    661c:	99 27       	eor	r25, r25
    661e:	88 27       	eor	r24, r24
    6620:	20 e0       	ldi	r18, 0x00	; 0
    6622:	30 e0       	ldi	r19, 0x00	; 0
    6624:	80 2b       	or	r24, r16
    6626:	91 2b       	or	r25, r17
    6628:	a2 2b       	or	r26, r18
    662a:	b3 2b       	or	r27, r19
    662c:	8c 15       	cp	r24, r12
    662e:	9d 05       	cpc	r25, r13
    6630:	ae 05       	cpc	r26, r14
    6632:	bf 05       	cpc	r27, r15
    6634:	e8 f4       	brcc	.+58     	; 0x6670 <taskListCleanup+0xc4>
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
					RTC.COMP = ((uint16_t)(cur_task->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    6636:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    663a:	8b 7f       	andi	r24, 0xFB	; 251
    663c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6640:	04 c0       	rjmp	.+8      	; 0x664a <taskListCleanup+0x9e>
	uint32_t nextTime = getTime()+500;
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
			cur_task->scheduled_time = nextTime;
    6642:	48 83       	st	Y, r20
    6644:	59 83       	std	Y+1, r21	; 0x01
    6646:	6a 83       	std	Y+2, r22	; 0x02
    6648:	7b 83       	std	Y+3, r23	; 0x03
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
				}
				first = 0;
			}
			nextTime += 500;
    664a:	4c 50       	subi	r20, 0x0C	; 12
    664c:	5e 4f       	sbci	r21, 0xFE	; 254
    664e:	6f 4f       	sbci	r22, 0xFF	; 255
    6650:	7f 4f       	sbci	r23, 0xFF	; 255
			cur_task = cur_task->next;
    6652:	0c 84       	ldd	r0, Y+12	; 0x0c
    6654:	dd 85       	ldd	r29, Y+13	; 0x0d
    6656:	c0 2d       	mov	r28, r0
	//volatile Task_t* prev_task;
	uint32_t nextTime = getTime()+500;
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
    6658:	20 97       	sbiw	r28, 0x00	; 0
    665a:	99 f7       	brne	.-26     	; 0x6642 <taskListCleanup+0x96>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    665c:	ef bf       	out	0x3f, r30	; 63
			}
			nextTime += 500;
			cur_task = cur_task->next;
		}
	}
}
    665e:	df 91       	pop	r29
    6660:	cf 91       	pop	r28
    6662:	1f 91       	pop	r17
    6664:	0f 91       	pop	r16
    6666:	ff 90       	pop	r15
    6668:	ef 90       	pop	r14
    666a:	df 90       	pop	r13
    666c:	cf 90       	pop	r12
    666e:	08 95       	ret
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
			cur_task->scheduled_time = nextTime;
			if(first){
				if (cur_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6670:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6674:	80 fd       	sbrc	r24, 0
    6676:	fc cf       	rjmp	.-8      	; 0x6670 <taskListCleanup+0xc4>
					RTC.COMP = ((uint16_t)(cur_task->scheduled_time))|0x8;
    6678:	88 81       	ld	r24, Y
    667a:	99 81       	ldd	r25, Y+1	; 0x01
    667c:	aa 81       	ldd	r26, Y+2	; 0x02
    667e:	bb 81       	ldd	r27, Y+3	; 0x03
    6680:	88 60       	ori	r24, 0x08	; 8
    6682:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    6686:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    668a:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    668e:	84 60       	ori	r24, 0x04	; 4
    6690:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6694:	da cf       	rjmp	.-76     	; 0x664a <taskListCleanup+0x9e>

00006696 <removeTask>:
		//task_list_checkup();
	}
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
    6696:	cf 93       	push	r28
    6698:	dc 01       	movw	r26, r24
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
    669a:	83 e2       	ldi	r24, 0x23	; 35
    669c:	a0 36       	cpi	r26, 0x60	; 96
    669e:	b8 07       	cpc	r27, r24
    66a0:	90 f1       	brcs	.+100    	; 0x6706 <removeTask+0x70>
    66a2:	83 e2       	ldi	r24, 0x23	; 35
    66a4:	ae 3d       	cpi	r26, 0xDE	; 222
    66a6:	b8 07       	cpc	r27, r24
    66a8:	09 f0       	breq	.+2      	; 0x66ac <removeTask+0x16>
    66aa:	68 f5       	brcc	.+90     	; 0x6706 <removeTask+0x70>
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
		return;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    66ac:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    66ae:	f8 94       	cli
		if(task==NULL){
    66b0:	10 97       	sbiw	r26, 0x00	; 0
    66b2:	31 f1       	breq	.+76     	; 0x6700 <removeTask+0x6a>
			continue;
		}
		if(task_list==task)	{
    66b4:	e0 91 16 26 	lds	r30, 0x2616	; 0x802616 <task_list>
    66b8:	f0 91 17 26 	lds	r31, 0x2617	; 0x802617 <task_list+0x1>
    66bc:	ae 17       	cp	r26, r30
    66be:	bf 07       	cpc	r27, r31
    66c0:	49 f4       	brne	.+18     	; 0x66d4 <removeTask+0x3e>
    66c2:	26 c0       	rjmp	.+76     	; 0x6710 <removeTask+0x7a>
			task_list=task->next;
			num_tasks--;
		}else{
			volatile Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    66c4:	24 85       	ldd	r18, Z+12	; 0x0c
    66c6:	35 85       	ldd	r19, Z+13	; 0x0d
    66c8:	a2 17       	cp	r26, r18
    66ca:	b3 07       	cpc	r27, r19
    66cc:	39 f0       	breq	.+14     	; 0x66dc <removeTask+0x46>
    66ce:	04 84       	ldd	r0, Z+12	; 0x0c
    66d0:	f5 85       	ldd	r31, Z+13	; 0x0d
    66d2:	e0 2d       	mov	r30, r0
    66d4:	24 85       	ldd	r18, Z+12	; 0x0c
    66d6:	35 85       	ldd	r19, Z+13	; 0x0d
    66d8:	23 2b       	or	r18, r19
    66da:	a1 f7       	brne	.-24     	; 0x66c4 <removeTask+0x2e>
			if (tmp_task->next != NULL){
    66dc:	24 85       	ldd	r18, Z+12	; 0x0c
    66de:	35 85       	ldd	r19, Z+13	; 0x0d
    66e0:	23 2b       	or	r18, r19
    66e2:	59 f0       	breq	.+22     	; 0x66fa <removeTask+0x64>
				tmp_task->next = task->next;
    66e4:	1c 96       	adiw	r26, 0x0c	; 12
    66e6:	2d 91       	ld	r18, X+
    66e8:	3c 91       	ld	r19, X
    66ea:	1d 97       	sbiw	r26, 0x0d	; 13
    66ec:	24 87       	std	Z+12, r18	; 0x0c
    66ee:	35 87       	std	Z+13, r19	; 0x0d
				num_tasks--;
    66f0:	20 91 fe 23 	lds	r18, 0x23FE	; 0x8023fe <num_tasks>
    66f4:	21 50       	subi	r18, 0x01	; 1
    66f6:	20 93 fe 23 	sts	0x23FE, r18	; 0x8023fe <num_tasks>
    66fa:	cd 01       	movw	r24, r26
			}
		}
		scheduler_free(task);		
    66fc:	0e 94 62 32 	call	0x64c4	; 0x64c4 <scheduler_free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6700:	cf bf       	out	0x3f, r28	; 63
	}
}
    6702:	cf 91       	pop	r28
    6704:	08 95       	ret
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    6706:	8d e7       	ldi	r24, 0x7D	; 125
    6708:	91 e2       	ldi	r25, 0x21	; 33
				num_tasks--;
			}
		}
		scheduler_free(task);		
	}
}
    670a:	cf 91       	pop	r28
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    670c:	0c 94 36 50 	jmp	0xa06c	; 0xa06c <puts>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		if(task==NULL){
			continue;
		}
		if(task_list==task)	{
			task_list=task->next;
    6710:	1c 96       	adiw	r26, 0x0c	; 12
    6712:	2d 91       	ld	r18, X+
    6714:	3c 91       	ld	r19, X
    6716:	1d 97       	sbiw	r26, 0x0d	; 13
    6718:	20 93 16 26 	sts	0x2616, r18	; 0x802616 <task_list>
    671c:	30 93 17 26 	sts	0x2617, r19	; 0x802617 <task_list+0x1>
			num_tasks--;
    6720:	20 91 fe 23 	lds	r18, 0x23FE	; 0x8023fe <num_tasks>
    6724:	21 50       	subi	r18, 0x01	; 1
    6726:	20 93 fe 23 	sts	0x23FE, r18	; 0x8023fe <num_tasks>
    672a:	e7 cf       	rjmp	.-50     	; 0x66fa <removeTask+0x64>

0000672c <printTaskQueue>:
		}
		scheduler_free(task);		
	}
}

void printTaskQueue(){
    672c:	bf 92       	push	r11
    672e:	cf 92       	push	r12
    6730:	df 92       	push	r13
    6732:	ef 92       	push	r14
    6734:	ff 92       	push	r15
    6736:	0f 93       	push	r16
    6738:	1f 93       	push	r17
    673a:	cf 93       	push	r28
    673c:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){  // Disable interrupts during printing
    673e:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6740:	f8 94       	cli
		volatile Task_t* cur_task = task_list;
    6742:	c0 91 16 26 	lds	r28, 0x2616	; 0x802616 <task_list>
    6746:	d0 91 17 26 	lds	r29, 0x2617	; 0x802617 <task_list+0x1>
		
		printf_P(PSTR("Task Queue (%hu tasks, %hu executing):\r\n"), num_tasks, task_executing);
    674a:	90 91 11 26 	lds	r25, 0x2611	; 0x802611 <task_executing>
    674e:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <num_tasks>
    6752:	1f 92       	push	r1
    6754:	9f 93       	push	r25
    6756:	1f 92       	push	r1
    6758:	8f 93       	push	r24
    675a:	87 ef       	ldi	r24, 0xF7	; 247
    675c:	99 e0       	ldi	r25, 0x09	; 9
    675e:	9f 93       	push	r25
    6760:	8f 93       	push	r24
    6762:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL){
    6766:	0f 90       	pop	r0
    6768:	0f 90       	pop	r0
    676a:	0f 90       	pop	r0
    676c:	0f 90       	pop	r0
    676e:	0f 90       	pop	r0
    6770:	0f 90       	pop	r0
    6772:	20 97       	sbiw	r28, 0x00	; 0
    6774:	a1 f1       	breq	.+104    	; 0x67de <printTaskQueue+0xb2>
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_func, cur_task->scheduled_time, cur_task->period, getTime());
    6776:	09 eb       	ldi	r16, 0xB9	; 185
    6778:	19 e0       	ldi	r17, 0x09	; 9
    677a:	05 c0       	rjmp	.+10     	; 0x6786 <printTaskQueue+0x5a>
			if(cur_task==cur_task->next) break;
			cur_task = cur_task->next;
    677c:	0c 84       	ldd	r0, Y+12	; 0x0c
    677e:	dd 85       	ldd	r29, Y+13	; 0x0d
    6780:	c0 2d       	mov	r28, r0
		volatile Task_t* cur_task = task_list;
		
		printf_P(PSTR("Task Queue (%hu tasks, %hu executing):\r\n"), num_tasks, task_executing);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL){
    6782:	20 97       	sbiw	r28, 0x00	; 0
    6784:	61 f1       	breq	.+88     	; 0x67de <printTaskQueue+0xb2>
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_func, cur_task->scheduled_time, cur_task->period, getTime());
    6786:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    678a:	fb 01       	movw	r30, r22
    678c:	cc 80       	ldd	r12, Y+4	; 0x04
    678e:	dd 80       	ldd	r13, Y+5	; 0x05
    6790:	ee 80       	ldd	r14, Y+6	; 0x06
    6792:	ff 80       	ldd	r15, Y+7	; 0x07
    6794:	48 81       	ld	r20, Y
    6796:	59 81       	ldd	r21, Y+1	; 0x01
    6798:	6a 81       	ldd	r22, Y+2	; 0x02
    679a:	7b 81       	ldd	r23, Y+3	; 0x03
    679c:	28 85       	ldd	r18, Y+8	; 0x08
    679e:	39 85       	ldd	r19, Y+9	; 0x09
    67a0:	9f 93       	push	r25
    67a2:	8f 93       	push	r24
    67a4:	ff 93       	push	r31
    67a6:	ef 93       	push	r30
    67a8:	ff 92       	push	r15
    67aa:	ef 92       	push	r14
    67ac:	df 92       	push	r13
    67ae:	cf 92       	push	r12
    67b0:	7f 93       	push	r23
    67b2:	6f 93       	push	r22
    67b4:	5f 93       	push	r21
    67b6:	4f 93       	push	r20
    67b8:	3f 93       	push	r19
    67ba:	2f 93       	push	r18
    67bc:	df 93       	push	r29
    67be:	cf 93       	push	r28
    67c0:	1f 93       	push	r17
    67c2:	0f 93       	push	r16
    67c4:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
			if(cur_task==cur_task->next) break;
    67c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    67ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    67cc:	2d b7       	in	r18, 0x3d	; 61
    67ce:	3e b7       	in	r19, 0x3e	; 62
    67d0:	2e 5e       	subi	r18, 0xEE	; 238
    67d2:	3f 4f       	sbci	r19, 0xFF	; 255
    67d4:	2d bf       	out	0x3d, r18	; 61
    67d6:	3e bf       	out	0x3e, r19	; 62
    67d8:	8c 17       	cp	r24, r28
    67da:	9d 07       	cpc	r25, r29
    67dc:	79 f6       	brne	.-98     	; 0x677c <printTaskQueue+0x50>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    67de:	bf be       	out	0x3f, r11	; 63
			cur_task = cur_task->next;
		}
	}
}
    67e0:	df 91       	pop	r29
    67e2:	cf 91       	pop	r28
    67e4:	1f 91       	pop	r17
    67e6:	0f 91       	pop	r16
    67e8:	ff 90       	pop	r15
    67ea:	ef 90       	pop	r14
    67ec:	df 90       	pop	r13
    67ee:	cf 90       	pop	r12
    67f0:	bf 90       	pop	r11
    67f2:	08 95       	ret

000067f4 <add_task_to_list>:
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
}

static void add_task_to_list(volatile Task_t* task){
    67f4:	8f 92       	push	r8
    67f6:	9f 92       	push	r9
    67f8:	af 92       	push	r10
    67fa:	bf 92       	push	r11
    67fc:	ff 92       	push	r15
    67fe:	0f 93       	push	r16
    6800:	1f 93       	push	r17
    6802:	cf 93       	push	r28
    6804:	df 93       	push	r29
    6806:	dc 01       	movw	r26, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6808:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    680a:	f8 94       	cli
		// Find the new task's proper spot in the list of tasks
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
    680c:	e0 91 16 26 	lds	r30, 0x2616	; 0x802616 <task_list>
    6810:	f0 91 17 26 	lds	r31, 0x2617	; 0x802617 <task_list+0x1>
    6814:	1c 96       	adiw	r26, 0x0c	; 12
    6816:	ed 93       	st	X+, r30
    6818:	fc 93       	st	X, r31
    681a:	1d 97       	sbiw	r26, 0x0d	; 13
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
    681c:	30 97       	sbiw	r30, 0x00	; 0
    681e:	09 f4       	brne	.+2      	; 0x6822 <add_task_to_list+0x2e>
    6820:	48 c0       	rjmp	.+144    	; 0x68b2 <add_task_to_list+0xbe>
    6822:	0d 91       	ld	r16, X+
    6824:	1d 91       	ld	r17, X+
    6826:	2d 91       	ld	r18, X+
    6828:	3c 91       	ld	r19, X
    682a:	13 97       	sbiw	r26, 0x03	; 3
    682c:	40 81       	ld	r20, Z
    682e:	51 81       	ldd	r21, Z+1	; 0x01
    6830:	62 81       	ldd	r22, Z+2	; 0x02
    6832:	73 81       	ldd	r23, Z+3	; 0x03
    6834:	40 17       	cp	r20, r16
    6836:	51 07       	cpc	r21, r17
    6838:	62 07       	cpc	r22, r18
    683a:	73 07       	cpc	r23, r19
    683c:	d0 f5       	brcc	.+116    	; 0x68b2 <add_task_to_list+0xbe>
			}
		}else{
			// If the new task is not the next to be executed, iterate through the task_list,
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
    683e:	84 85       	ldd	r24, Z+12	; 0x0c
    6840:	95 85       	ldd	r25, Z+13	; 0x0d
    6842:	89 2b       	or	r24, r25
    6844:	71 f4       	brne	.+28     	; 0x6862 <add_task_to_list+0x6e>
    6846:	1d c0       	rjmp	.+58     	; 0x6882 <add_task_to_list+0x8e>
				if(tmp_task_ptr->next==tmp_task_ptr){
    6848:	84 85       	ldd	r24, Z+12	; 0x0c
    684a:	95 85       	ldd	r25, Z+13	; 0x0d
    684c:	8e 17       	cp	r24, r30
    684e:	9f 07       	cpc	r25, r31
    6850:	09 f4       	brne	.+2      	; 0x6854 <add_task_to_list+0x60>
    6852:	6e c0       	rjmp	.+220    	; 0x6930 <add_task_to_list+0x13c>
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_func, task->scheduled_time, task->period, getTime());
					printTaskQueue();
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
    6854:	04 84       	ldd	r0, Z+12	; 0x0c
    6856:	f5 85       	ldd	r31, Z+13	; 0x0d
    6858:	e0 2d       	mov	r30, r0
			}
		}else{
			// If the new task is not the next to be executed, iterate through the task_list,
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
    685a:	24 85       	ldd	r18, Z+12	; 0x0c
    685c:	35 85       	ldd	r19, Z+13	; 0x0d
    685e:	23 2b       	or	r18, r19
    6860:	81 f0       	breq	.+32     	; 0x6882 <add_task_to_list+0x8e>
    6862:	0d 91       	ld	r16, X+
    6864:	1d 91       	ld	r17, X+
    6866:	2d 91       	ld	r18, X+
    6868:	3c 91       	ld	r19, X
    686a:	13 97       	sbiw	r26, 0x03	; 3
    686c:	c4 85       	ldd	r28, Z+12	; 0x0c
    686e:	d5 85       	ldd	r29, Z+13	; 0x0d
    6870:	48 81       	ld	r20, Y
    6872:	59 81       	ldd	r21, Y+1	; 0x01
    6874:	6a 81       	ldd	r22, Y+2	; 0x02
    6876:	7b 81       	ldd	r23, Y+3	; 0x03
    6878:	40 17       	cp	r20, r16
    687a:	51 07       	cpc	r21, r17
    687c:	62 07       	cpc	r22, r18
    687e:	73 07       	cpc	r23, r19
    6880:	18 f3       	brcs	.-58     	; 0x6848 <add_task_to_list+0x54>
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
			}
			//set_rgb(r, g, b);
			task->next = tmp_task_ptr->next;
    6882:	84 85       	ldd	r24, Z+12	; 0x0c
    6884:	95 85       	ldd	r25, Z+13	; 0x0d
    6886:	1c 96       	adiw	r26, 0x0c	; 12
    6888:	8d 93       	st	X+, r24
    688a:	9c 93       	st	X, r25
    688c:	1d 97       	sbiw	r26, 0x0d	; 13
			tmp_task_ptr->next = task;
    688e:	a4 87       	std	Z+12, r26	; 0x0c
    6890:	b5 87       	std	Z+13, r27	; 0x0d
			//while (RTC.STATUS & RTC_SYNCBUSY_bm);
			//RTC.COMP = RTC.CNT+5;
			//RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		//}

		num_tasks++;
    6892:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <num_tasks>
    6896:	8f 5f       	subi	r24, 0xFF	; 255
    6898:	80 93 fe 23 	sts	0x23FE, r24	; 0x8023fe <num_tasks>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    689c:	ff be       	out	0x3f, r15	; 63
		
		//task_list_checkup();
	}
}
    689e:	df 91       	pop	r29
    68a0:	cf 91       	pop	r28
    68a2:	1f 91       	pop	r17
    68a4:	0f 91       	pop	r16
    68a6:	ff 90       	pop	r15
    68a8:	bf 90       	pop	r11
    68aa:	af 90       	pop	r10
    68ac:	9f 90       	pop	r9
    68ae:	8f 90       	pop	r8
    68b0:	08 95       	ret
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
			task_list = task;
    68b2:	a0 93 16 26 	sts	0x2616, r26	; 0x802616 <task_list>
    68b6:	b0 93 17 26 	sts	0x2617, r27	; 0x802617 <task_list+0x1>
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0){			
    68ba:	80 91 11 26 	lds	r24, 0x2611	; 0x802611 <task_executing>
    68be:	81 11       	cpse	r24, r1
    68c0:	e8 cf       	rjmp	.-48     	; 0x6892 <add_task_to_list+0x9e>
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    68c2:	8d 90       	ld	r8, X+
    68c4:	9d 90       	ld	r9, X+
    68c6:	ad 90       	ld	r10, X+
    68c8:	bc 90       	ld	r11, X
    68ca:	13 97       	sbiw	r26, 0x03	; 3
    68cc:	40 91 ee 23 	lds	r20, 0x23EE	; 0x8023ee <rtc_epoch>
    68d0:	50 91 ef 23 	lds	r21, 0x23EF	; 0x8023ef <rtc_epoch+0x1>
    68d4:	00 91 0a 04 	lds	r16, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    68d8:	10 91 0b 04 	lds	r17, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    68dc:	60 e0       	ldi	r22, 0x00	; 0
    68de:	70 e0       	ldi	r23, 0x00	; 0
    68e0:	ba 01       	movw	r22, r20
    68e2:	55 27       	eor	r21, r21
    68e4:	44 27       	eor	r20, r20
    68e6:	20 e0       	ldi	r18, 0x00	; 0
    68e8:	30 e0       	ldi	r19, 0x00	; 0
    68ea:	40 2b       	or	r20, r16
    68ec:	51 2b       	or	r21, r17
    68ee:	62 2b       	or	r22, r18
    68f0:	73 2b       	or	r23, r19
    68f2:	48 15       	cp	r20, r8
    68f4:	59 05       	cpc	r21, r9
    68f6:	6a 05       	cpc	r22, r10
    68f8:	7b 05       	cpc	r23, r11
    68fa:	30 f4       	brcc	.+12     	; 0x6908 <add_task_to_list+0x114>
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;					
    68fc:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6900:	8b 7f       	andi	r24, 0xFB	; 251
    6902:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6906:	c5 cf       	rjmp	.-118    	; 0x6892 <add_task_to_list+0x9e>
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
			task_list = task;
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0){			
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6908:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    690c:	80 fd       	sbrc	r24, 0
    690e:	fc cf       	rjmp	.-8      	; 0x6908 <add_task_to_list+0x114>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    6910:	8d 91       	ld	r24, X+
    6912:	9d 91       	ld	r25, X+
    6914:	0d 90       	ld	r0, X+
    6916:	bc 91       	ld	r27, X
    6918:	a0 2d       	mov	r26, r0
    691a:	88 60       	ori	r24, 0x08	; 8
    691c:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    6920:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    6924:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6928:	84 60       	ori	r24, 0x04	; 4
    692a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    692e:	b1 cf       	rjmp	.-158    	; 0x6892 <add_task_to_list+0x9e>
    6930:	ed 01       	movw	r28, r26
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
				if(tmp_task_ptr->next==tmp_task_ptr){
					//set_rgb(255, 50, 0);
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
    6932:	81 e6       	ldi	r24, 0x61	; 97
    6934:	9a e0       	ldi	r25, 0x0A	; 10
    6936:	9f 93       	push	r25
    6938:	8f 93       	push	r24
    693a:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_func, task->scheduled_time, task->period, getTime());
    693e:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    6942:	db 01       	movw	r26, r22
    6944:	0c 81       	ldd	r16, Y+4	; 0x04
    6946:	1d 81       	ldd	r17, Y+5	; 0x05
    6948:	2e 81       	ldd	r18, Y+6	; 0x06
    694a:	3f 81       	ldd	r19, Y+7	; 0x07
    694c:	48 81       	ld	r20, Y
    694e:	59 81       	ldd	r21, Y+1	; 0x01
    6950:	6a 81       	ldd	r22, Y+2	; 0x02
    6952:	7b 81       	ldd	r23, Y+3	; 0x03
    6954:	e8 85       	ldd	r30, Y+8	; 0x08
    6956:	f9 85       	ldd	r31, Y+9	; 0x09
    6958:	9f 93       	push	r25
    695a:	8f 93       	push	r24
    695c:	bf 93       	push	r27
    695e:	af 93       	push	r26
    6960:	3f 93       	push	r19
    6962:	2f 93       	push	r18
    6964:	1f 93       	push	r17
    6966:	0f 93       	push	r16
    6968:	7f 93       	push	r23
    696a:	6f 93       	push	r22
    696c:	5f 93       	push	r21
    696e:	4f 93       	push	r20
    6970:	ff 93       	push	r31
    6972:	ef 93       	push	r30
    6974:	df 93       	push	r29
    6976:	cf 93       	push	r28
    6978:	80 e2       	ldi	r24, 0x20	; 32
    697a:	9a e0       	ldi	r25, 0x0A	; 10
    697c:	9f 93       	push	r25
    697e:	8f 93       	push	r24
    6980:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
					printTaskQueue();
    6984:	0e 94 96 33 	call	0x672c	; 0x672c <printTaskQueue>
    6988:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    698a:	8d b7       	in	r24, 0x3d	; 61
    698c:	9e b7       	in	r25, 0x3e	; 62
    698e:	44 96       	adiw	r24, 0x14	; 20
    6990:	8d bf       	out	0x3d, r24	; 61
    6992:	9e bf       	out	0x3e, r25	; 62
    6994:	84 cf       	rjmp	.-248    	; 0x689e <add_task_to_list+0xaa>

00006996 <schedule_task_absolute_time>:
	volatile Task_t* new_task = schedule_task_absolute_time(time, function, arg);
	new_task->period = period;
	return new_task;
}

volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
    6996:	9f 92       	push	r9
    6998:	af 92       	push	r10
    699a:	bf 92       	push	r11
    699c:	cf 92       	push	r12
    699e:	df 92       	push	r13
    69a0:	ef 92       	push	r14
    69a2:	ff 92       	push	r15
    69a4:	0f 93       	push	r16
    69a6:	1f 93       	push	r17
    69a8:	cf 93       	push	r28
    69aa:	df 93       	push	r29
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    69ac:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    69ae:	f8 94       	cli
static volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg);
static void add_task_to_list(volatile Task_t* task);
static int8_t run_tasks(void);

static volatile Task_t* scheduler_malloc(void){
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
    69b0:	e0 91 fe 23 	lds	r30, 0x23FE	; 0x8023fe <num_tasks>
    69b4:	ea 30       	cpi	r30, 0x0A	; 10
    69b6:	08 f0       	brcs	.+2      	; 0x69ba <schedule_task_absolute_time+0x24>
    69b8:	69 c0       	rjmp	.+210    	; 0x6a8c <schedule_task_absolute_time+0xf6>
    69ba:	89 01       	movw	r16, r18
    69bc:	5a 01       	movw	r10, r20
    69be:	6b 01       	movw	r12, r22
    69c0:	7c 01       	movw	r14, r24
    69c2:	80 e0       	ldi	r24, 0x00	; 0
    69c4:	90 e0       	ldi	r25, 0x00	; 0

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
		//This code assumes that all tasks will have non-null function pointers.
		if((task_storage_arr[tmp].func.noarg_func) == NULL){
    69c6:	9c 01       	movw	r18, r24
    69c8:	22 0f       	add	r18, r18
    69ca:	33 1f       	adc	r19, r19
    69cc:	f9 01       	movw	r30, r18
    69ce:	ee 0f       	add	r30, r30
    69d0:	ff 1f       	adc	r31, r31
    69d2:	ee 0f       	add	r30, r30
    69d4:	ff 1f       	adc	r31, r31
    69d6:	ee 0f       	add	r30, r30
    69d8:	ff 1f       	adc	r31, r31
    69da:	e2 1b       	sub	r30, r18
    69dc:	f3 0b       	sbc	r31, r19
    69de:	e0 5a       	subi	r30, 0xA0	; 160
    69e0:	fc 4d       	sbci	r31, 0xDC	; 220
    69e2:	20 85       	ldd	r18, Z+8	; 0x08
    69e4:	31 85       	ldd	r19, Z+9	; 0x09
    69e6:	23 2b       	or	r18, r19
    69e8:	59 f1       	breq	.+86     	; 0x6a40 <schedule_task_absolute_time+0xaa>
    69ea:	01 96       	adiw	r24, 0x01	; 1
static int8_t run_tasks(void);

static volatile Task_t* scheduler_malloc(void){
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
    69ec:	8a 30       	cpi	r24, 0x0A	; 10
    69ee:	91 05       	cpc	r25, r1
    69f0:	51 f7       	brne	.-44     	; 0x69c6 <schedule_task_absolute_time+0x30>
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
    69f2:	81 e1       	ldi	r24, 0x11	; 17
    69f4:	9b e0       	ldi	r25, 0x0B	; 11
    69f6:	9f 93       	push	r25
    69f8:	8f 93       	push	r24
    69fa:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
			taskListCleanup();
    69fe:	0e 94 d6 32 	call	0x65ac	; 0x65ac <taskListCleanup>
    6a02:	0f 90       	pop	r0
    6a04:	0f 90       	pop	r0
    6a06:	cf ef       	ldi	r28, 0xFF	; 255
    6a08:	df ef       	ldi	r29, 0xFF	; 255
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
			}else if(time < getTime()){
			printf_P(PSTR("ERROR: Task scheduled for a time in the past.\r\n"));
		}
		new_task->scheduled_time = time;
    6a0a:	c8 82       	st	Y, r12
    6a0c:	d9 82       	std	Y+1, r13	; 0x01
    6a0e:	ea 82       	std	Y+2, r14	; 0x02
    6a10:	fb 82       	std	Y+3, r15	; 0x03
		new_task->arg = arg;
    6a12:	0a 87       	std	Y+10, r16	; 0x0a
    6a14:	1b 87       	std	Y+11, r17	; 0x0b
		new_task->func = function;
    6a16:	a8 86       	std	Y+8, r10	; 0x08
    6a18:	b9 86       	std	Y+9, r11	; 0x09
		new_task->next = NULL;
    6a1a:	1c 86       	std	Y+12, r1	; 0x0c
    6a1c:	1d 86       	std	Y+13, r1	; 0x0d
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6a1e:	9f be       	out	0x3f, r9	; 63
	}
	add_task_to_list(new_task);
    6a20:	ce 01       	movw	r24, r28
    6a22:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <add_task_to_list>
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
    6a26:	ce 01       	movw	r24, r28
}
    6a28:	df 91       	pop	r29
    6a2a:	cf 91       	pop	r28
    6a2c:	1f 91       	pop	r17
    6a2e:	0f 91       	pop	r16
    6a30:	ff 90       	pop	r15
    6a32:	ef 90       	pop	r14
    6a34:	df 90       	pop	r13
    6a36:	cf 90       	pop	r12
    6a38:	bf 90       	pop	r11
    6a3a:	af 90       	pop	r10
    6a3c:	9f 90       	pop	r9
    6a3e:	08 95       	ret
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
		//This code assumes that all tasks will have non-null function pointers.
		if((task_storage_arr[tmp].func.noarg_func) == NULL){
			return &(task_storage_arr[tmp]);
    6a40:	ef 01       	movw	r28, r30
volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
    6a42:	ef 3f       	cpi	r30, 0xFF	; 255
    6a44:	8f ef       	ldi	r24, 0xFF	; 255
    6a46:	f8 07       	cpc	r31, r24
    6a48:	a1 f2       	breq	.-88     	; 0x69f2 <schedule_task_absolute_time+0x5c>
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
			taskListCleanup();
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
    6a4a:	83 e2       	ldi	r24, 0x23	; 35
    6a4c:	e0 36       	cpi	r30, 0x60	; 96
    6a4e:	f8 07       	cpc	r31, r24
    6a50:	a0 f0       	brcs	.+40     	; 0x6a7a <schedule_task_absolute_time+0xe4>
    6a52:	ee 5d       	subi	r30, 0xDE	; 222
    6a54:	f3 42       	sbci	r31, 0x23	; 35
    6a56:	09 f0       	breq	.+2      	; 0x6a5a <schedule_task_absolute_time+0xc4>
    6a58:	80 f4       	brcc	.+32     	; 0x6a7a <schedule_task_absolute_time+0xe4>
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
			}else if(time < getTime()){
    6a5a:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    6a5e:	c6 16       	cp	r12, r22
    6a60:	d7 06       	cpc	r13, r23
    6a62:	e8 06       	cpc	r14, r24
    6a64:	f9 06       	cpc	r15, r25
    6a66:	88 f6       	brcc	.-94     	; 0x6a0a <schedule_task_absolute_time+0x74>
			printf_P(PSTR("ERROR: Task scheduled for a time in the past.\r\n"));
    6a68:	88 e8       	ldi	r24, 0x88	; 136
    6a6a:	9a e0       	ldi	r25, 0x0A	; 10
    6a6c:	9f 93       	push	r25
    6a6e:	8f 93       	push	r24
    6a70:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    6a74:	0f 90       	pop	r0
    6a76:	0f 90       	pop	r0
    6a78:	c8 cf       	rjmp	.-112    	; 0x6a0a <schedule_task_absolute_time+0x74>
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
			taskListCleanup();
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
    6a7a:	88 eb       	ldi	r24, 0xB8	; 184
    6a7c:	9a e0       	ldi	r25, 0x0A	; 10
    6a7e:	9f 93       	push	r25
    6a80:	8f 93       	push	r24
    6a82:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    6a86:	0f 90       	pop	r0
    6a88:	0f 90       	pop	r0
    6a8a:	bf cf       	rjmp	.-130    	; 0x6a0a <schedule_task_absolute_time+0x74>
    6a8c:	9f be       	out	0x3f, r9	; 63

volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
    6a8e:	80 e0       	ldi	r24, 0x00	; 0
    6a90:	90 e0       	ldi	r25, 0x00	; 0
    6a92:	ca cf       	rjmp	.-108    	; 0x6a28 <schedule_task_absolute_time+0x92>

00006a94 <scheduleTask>:

// Adds a new task to the task queue
// time is number of milliseconds until function is executed
// function is a function pointer to execute
// arg is the argument to supply to function
volatile Task_t* scheduleTask(uint32_t time, FlexFunction function, void* arg){
    6a94:	8f 92       	push	r8
    6a96:	9f 92       	push	r9
    6a98:	af 92       	push	r10
    6a9a:	bf 92       	push	r11
    6a9c:	cf 92       	push	r12
    6a9e:	df 92       	push	r13
    6aa0:	ef 92       	push	r14
    6aa2:	ff 92       	push	r15
    6aa4:	0f 93       	push	r16
    6aa6:	1f 93       	push	r17
    6aa8:	cf 93       	push	r28
    6aaa:	df 93       	push	r29
    6aac:	6b 01       	movw	r12, r22
    6aae:	7c 01       	movw	r14, r24
    6ab0:	ea 01       	movw	r28, r20
    6ab2:	89 01       	movw	r16, r18
	time = (time<MIN_TASK_TIME_IN_FUTURE) ? MIN_TASK_TIME_IN_FUTURE : time;
	volatile Task_t* new_task = schedule_task_absolute_time(getTime()+time, function, arg);
    6ab4:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    6ab8:	46 01       	movw	r8, r12
    6aba:	57 01       	movw	r10, r14
    6abc:	2a e0       	ldi	r18, 0x0A	; 10
    6abe:	82 16       	cp	r8, r18
    6ac0:	91 04       	cpc	r9, r1
    6ac2:	a1 04       	cpc	r10, r1
    6ac4:	b1 04       	cpc	r11, r1
    6ac6:	28 f4       	brcc	.+10     	; 0x6ad2 <scheduleTask+0x3e>
    6ac8:	2a e0       	ldi	r18, 0x0A	; 10
    6aca:	82 2e       	mov	r8, r18
    6acc:	91 2c       	mov	r9, r1
    6ace:	a1 2c       	mov	r10, r1
    6ad0:	b1 2c       	mov	r11, r1
    6ad2:	68 0d       	add	r22, r8
    6ad4:	79 1d       	adc	r23, r9
    6ad6:	8a 1d       	adc	r24, r10
    6ad8:	9b 1d       	adc	r25, r11
    6ada:	98 01       	movw	r18, r16
    6adc:	ae 01       	movw	r20, r28
    6ade:	0e 94 cb 34 	call	0x6996	; 0x6996 <schedule_task_absolute_time>
	new_task->period = 0;
    6ae2:	fc 01       	movw	r30, r24
    6ae4:	14 82       	std	Z+4, r1	; 0x04
    6ae6:	15 82       	std	Z+5, r1	; 0x05
    6ae8:	16 82       	std	Z+6, r1	; 0x06
    6aea:	17 82       	std	Z+7, r1	; 0x07
	return new_task;
}
    6aec:	df 91       	pop	r29
    6aee:	cf 91       	pop	r28
    6af0:	1f 91       	pop	r17
    6af2:	0f 91       	pop	r16
    6af4:	ff 90       	pop	r15
    6af6:	ef 90       	pop	r14
    6af8:	df 90       	pop	r13
    6afa:	cf 90       	pop	r12
    6afc:	bf 90       	pop	r11
    6afe:	af 90       	pop	r10
    6b00:	9f 90       	pop	r9
    6b02:	8f 90       	pop	r8
    6b04:	08 95       	ret

00006b06 <schedulePeriodicTask>:

volatile Task_t* schedulePeriodicTask(uint32_t period, FlexFunction function, void* arg){
    6b06:	cf 92       	push	r12
    6b08:	df 92       	push	r13
    6b0a:	ef 92       	push	r14
    6b0c:	ff 92       	push	r15
    6b0e:	0f 93       	push	r16
    6b10:	1f 93       	push	r17
    6b12:	cf 93       	push	r28
    6b14:	df 93       	push	r29
    6b16:	ea 01       	movw	r28, r20
    6b18:	89 01       	movw	r16, r18
	period = (period<MIN_TASK_TIME_IN_FUTURE) ? MIN_TASK_TIME_IN_FUTURE : period;
    6b1a:	6b 01       	movw	r12, r22
    6b1c:	7c 01       	movw	r14, r24
    6b1e:	8a e0       	ldi	r24, 0x0A	; 10
    6b20:	c8 16       	cp	r12, r24
    6b22:	d1 04       	cpc	r13, r1
    6b24:	e1 04       	cpc	r14, r1
    6b26:	f1 04       	cpc	r15, r1
    6b28:	28 f4       	brcc	.+10     	; 0x6b34 <schedulePeriodicTask+0x2e>
    6b2a:	8a e0       	ldi	r24, 0x0A	; 10
    6b2c:	c8 2e       	mov	r12, r24
    6b2e:	d1 2c       	mov	r13, r1
    6b30:	e1 2c       	mov	r14, r1
    6b32:	f1 2c       	mov	r15, r1
	uint32_t time = ((getTime()/period)+1)*period;
    6b34:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
	volatile Task_t* new_task = schedule_task_absolute_time(time, function, arg);
    6b38:	a7 01       	movw	r20, r14
    6b3a:	96 01       	movw	r18, r12
    6b3c:	0e 94 6d 4b 	call	0x96da	; 0x96da <__udivmodsi4>
    6b40:	2f 5f       	subi	r18, 0xFF	; 255
    6b42:	3f 4f       	sbci	r19, 0xFF	; 255
    6b44:	4f 4f       	sbci	r20, 0xFF	; 255
    6b46:	5f 4f       	sbci	r21, 0xFF	; 255
    6b48:	c7 01       	movw	r24, r14
    6b4a:	b6 01       	movw	r22, r12
    6b4c:	0e 94 35 4b 	call	0x966a	; 0x966a <__mulsi3>
    6b50:	98 01       	movw	r18, r16
    6b52:	ae 01       	movw	r20, r28
    6b54:	0e 94 cb 34 	call	0x6996	; 0x6996 <schedule_task_absolute_time>
	new_task->period = period;
    6b58:	fc 01       	movw	r30, r24
    6b5a:	c4 82       	std	Z+4, r12	; 0x04
    6b5c:	d5 82       	std	Z+5, r13	; 0x05
    6b5e:	e6 82       	std	Z+6, r14	; 0x06
    6b60:	f7 82       	std	Z+7, r15	; 0x07
	return new_task;
}
    6b62:	df 91       	pop	r29
    6b64:	cf 91       	pop	r28
    6b66:	1f 91       	pop	r17
    6b68:	0f 91       	pop	r16
    6b6a:	ff 90       	pop	r15
    6b6c:	ef 90       	pop	r14
    6b6e:	df 90       	pop	r13
    6b70:	cf 90       	pop	r12
    6b72:	08 95       	ret

00006b74 <__vector_11>:
		}
	}
	return 0;
}

ISR(RTC_COMP_vect){
    6b74:	1f 92       	push	r1
    6b76:	0f 92       	push	r0
    6b78:	0f b6       	in	r0, 0x3f	; 63
    6b7a:	0f 92       	push	r0
    6b7c:	11 24       	eor	r1, r1
    6b7e:	0b b6       	in	r0, 0x3b	; 59
    6b80:	0f 92       	push	r0
    6b82:	4f 92       	push	r4
    6b84:	5f 92       	push	r5
    6b86:	6f 92       	push	r6
    6b88:	7f 92       	push	r7
    6b8a:	8f 92       	push	r8
    6b8c:	9f 92       	push	r9
    6b8e:	af 92       	push	r10
    6b90:	bf 92       	push	r11
    6b92:	cf 92       	push	r12
    6b94:	df 92       	push	r13
    6b96:	ef 92       	push	r14
    6b98:	ff 92       	push	r15
    6b9a:	0f 93       	push	r16
    6b9c:	1f 93       	push	r17
    6b9e:	2f 93       	push	r18
    6ba0:	3f 93       	push	r19
    6ba2:	4f 93       	push	r20
    6ba4:	5f 93       	push	r21
    6ba6:	6f 93       	push	r22
    6ba8:	7f 93       	push	r23
    6baa:	8f 93       	push	r24
    6bac:	9f 93       	push	r25
    6bae:	af 93       	push	r26
    6bb0:	bf 93       	push	r27
    6bb2:	cf 93       	push	r28
    6bb4:	df 93       	push	r29
    6bb6:	ef 93       	push	r30
    6bb8:	ff 93       	push	r31
	SAVE_CONTEXT();	
    6bba:	0f 92       	push	r0
    6bbc:	0f b6       	in	r0, 0x3f	; 63
    6bbe:	f8 94       	cli
    6bc0:	0f 92       	push	r0
    6bc2:	1f 92       	push	r1
    6bc4:	11 24       	eor	r1, r1
    6bc6:	2f 92       	push	r2
    6bc8:	3f 92       	push	r3
    6bca:	4f 92       	push	r4
    6bcc:	5f 92       	push	r5
    6bce:	6f 92       	push	r6
    6bd0:	7f 92       	push	r7
    6bd2:	8f 92       	push	r8
    6bd4:	9f 92       	push	r9
    6bd6:	af 92       	push	r10
    6bd8:	bf 92       	push	r11
    6bda:	cf 92       	push	r12
    6bdc:	df 92       	push	r13
    6bde:	ef 92       	push	r14
    6be0:	ff 92       	push	r15
    6be2:	0f 93       	push	r16
    6be4:	1f 93       	push	r17
    6be6:	2f 93       	push	r18
    6be8:	3f 93       	push	r19
    6bea:	4f 93       	push	r20
    6bec:	5f 93       	push	r21
    6bee:	6f 93       	push	r22
    6bf0:	7f 93       	push	r23
    6bf2:	8f 93       	push	r24
    6bf4:	9f 93       	push	r25
    6bf6:	af 93       	push	r26
    6bf8:	bf 93       	push	r27
    6bfa:	cf 93       	push	r28
    6bfc:	df 93       	push	r29
    6bfe:	ef 93       	push	r30
    6c00:	ff 93       	push	r31
	task_executing=1;
    6c02:	81 e0       	ldi	r24, 0x01	; 1
    6c04:	80 93 11 26 	sts	0x2611, r24	; 0x802611 <task_executing>

// TO BE CALLED FROM INTERRUPT HANDLER ONLY
// DO NOT CALL
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
    6c08:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6c0a:	f8 94       	cli
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    6c0c:	30 e8       	ldi	r19, 0x80	; 128
    6c0e:	c3 2e       	mov	r12, r19
    6c10:	39 e0       	ldi	r19, 0x09	; 9
    6c12:	d3 2e       	mov	r13, r19
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    6c14:	43 ed       	ldi	r20, 0xD3	; 211
    6c16:	e4 2e       	mov	r14, r20
    6c18:	41 e2       	ldi	r20, 0x21	; 33
    6c1a:	f4 2e       	mov	r15, r20
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    6c1c:	58 e0       	ldi	r21, 0x08	; 8
    6c1e:	a5 2e       	mov	r10, r21
    6c20:	59 e0       	ldi	r21, 0x09	; 9
    6c22:	b5 2e       	mov	r11, r21
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
    6c24:	e0 91 16 26 	lds	r30, 0x2616	; 0x802616 <task_list>
    6c28:	f0 91 17 26 	lds	r31, 0x2617	; 0x802617 <task_list+0x1>
    6c2c:	30 97       	sbiw	r30, 0x00	; 0
    6c2e:	09 f4       	brne	.+2      	; 0x6c32 <__vector_11+0xbe>
    6c30:	2c c1       	rjmp	.+600    	; 0x6e8a <__vector_11+0x316>
    6c32:	40 80       	ld	r4, Z
    6c34:	51 80       	ldd	r5, Z+1	; 0x01
    6c36:	62 80       	ldd	r6, Z+2	; 0x02
    6c38:	73 80       	ldd	r7, Z+3	; 0x03
    6c3a:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    6c3e:	dc 01       	movw	r26, r24
    6c40:	cb 01       	movw	r24, r22
    6c42:	02 96       	adiw	r24, 0x02	; 2
    6c44:	a1 1d       	adc	r26, r1
    6c46:	b1 1d       	adc	r27, r1
    6c48:	84 15       	cp	r24, r4
    6c4a:	95 05       	cpc	r25, r5
    6c4c:	a6 05       	cpc	r26, r6
    6c4e:	b7 05       	cpc	r27, r7
    6c50:	08 f4       	brcc	.+2      	; 0x6c54 <__vector_11+0xe0>
    6c52:	f8 c0       	rjmp	.+496    	; 0x6e44 <__vector_11+0x2d0>
    6c54:	00 e6       	ldi	r16, 0x60	; 96
    6c56:	13 e2       	ldi	r17, 0x23	; 35
    6c58:	c0 e0       	ldi	r28, 0x00	; 0
    6c5a:	d0 e0       	ldi	r29, 0x00	; 0
    6c5c:	81 2c       	mov	r8, r1
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
    6c5e:	ce 01       	movw	r24, r28
    6c60:	88 0f       	add	r24, r24
    6c62:	99 1f       	adc	r25, r25
    6c64:	fc 01       	movw	r30, r24
    6c66:	ee 0f       	add	r30, r30
    6c68:	ff 1f       	adc	r31, r31
    6c6a:	ee 0f       	add	r30, r30
    6c6c:	ff 1f       	adc	r31, r31
    6c6e:	ee 0f       	add	r30, r30
    6c70:	ff 1f       	adc	r31, r31
    6c72:	e8 1b       	sub	r30, r24
    6c74:	f9 0b       	sbc	r31, r25
    6c76:	e0 5a       	subi	r30, 0xA0	; 160
    6c78:	fc 4d       	sbci	r31, 0xDC	; 220
    6c7a:	80 85       	ldd	r24, Z+8	; 0x08
    6c7c:	91 85       	ldd	r25, Z+9	; 0x09
    6c7e:	89 2b       	or	r24, r25
    6c80:	09 f1       	breq	.+66     	; 0x6cc4 <__vector_11+0x150>
					num_slots_used++;
    6c82:	83 94       	inc	r8
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    6c84:	84 85       	ldd	r24, Z+12	; 0x0c
    6c86:	95 85       	ldd	r25, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
    6c88:	00 97       	sbiw	r24, 0x00	; 0
    6c8a:	e1 f0       	breq	.+56     	; 0x6cc4 <__vector_11+0x150>
    6c8c:	23 e2       	ldi	r18, 0x23	; 35
    6c8e:	80 36       	cpi	r24, 0x60	; 96
    6c90:	92 07       	cpc	r25, r18
    6c92:	20 f0       	brcs	.+8      	; 0x6c9c <__vector_11+0x128>
    6c94:	8e 5d       	subi	r24, 0xDE	; 222
    6c96:	93 42       	sbci	r25, 0x23	; 35
    6c98:	a9 f0       	breq	.+42     	; 0x6cc4 <__vector_11+0x150>
    6c9a:	a0 f0       	brcs	.+40     	; 0x6cc4 <__vector_11+0x150>
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    6c9c:	df 92       	push	r13
    6c9e:	cf 92       	push	r12
    6ca0:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    6ca4:	1f 93       	push	r17
    6ca6:	0f 93       	push	r16
    6ca8:	ff 92       	push	r15
    6caa:	ef 92       	push	r14
    6cac:	0e 94 f4 4f 	call	0x9fe8	; 0x9fe8 <printf>
						delayMS(10);
    6cb0:	8a e0       	ldi	r24, 0x0A	; 10
    6cb2:	90 e0       	ldi	r25, 0x00	; 0
    6cb4:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    6cb8:	0f 90       	pop	r0
    6cba:	0f 90       	pop	r0
    6cbc:	0f 90       	pop	r0
    6cbe:	0f 90       	pop	r0
    6cc0:	0f 90       	pop	r0
    6cc2:	0f 90       	pop	r0
    6cc4:	21 96       	adiw	r28, 0x01	; 1
    6cc6:	02 5f       	subi	r16, 0xF2	; 242
    6cc8:	1f 4f       	sbci	r17, 0xFF	; 255
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
    6cca:	ca 30       	cpi	r28, 0x0A	; 10
    6ccc:	d1 05       	cpc	r29, r1
    6cce:	39 f6       	brne	.-114    	; 0x6c5e <__vector_11+0xea>
						delayMS(10);
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
    6cd0:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <num_tasks>
    6cd4:	88 11       	cpse	r24, r8
    6cd6:	39 c1       	rjmp	.+626    	; 0x6f4a <__vector_11+0x3d6>
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
				return -1;
			}
			cur_task = task_list;
    6cd8:	c0 91 16 26 	lds	r28, 0x2616	; 0x802616 <task_list>
    6cdc:	d0 91 17 26 	lds	r29, 0x2617	; 0x802617 <task_list+0x1>
			task_list = cur_task->next;
    6ce0:	8c 85       	ldd	r24, Y+12	; 0x0c
    6ce2:	9d 85       	ldd	r25, Y+13	; 0x0d
    6ce4:	80 93 16 26 	sts	0x2616, r24	; 0x802616 <task_list>
    6ce8:	90 93 17 26 	sts	0x2617, r25	; 0x802617 <task_list+0x1>

			if(cur_task->arg==NULL){
    6cec:	8a 85       	ldd	r24, Y+10	; 0x0a
    6cee:	9b 85       	ldd	r25, Y+11	; 0x0b
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
    6cf0:	1f b7       	in	r17, 0x3f	; 63
				return -1;
			}
			cur_task = task_list;
			task_list = cur_task->next;

			if(cur_task->arg==NULL){
    6cf2:	89 2b       	or	r24, r25
    6cf4:	09 f4       	brne	.+2      	; 0x6cf8 <__vector_11+0x184>
    6cf6:	8f c0       	rjmp	.+286    	; 0x6e16 <__vector_11+0x2a2>

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    6cf8:	78 94       	sei
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).noarg_func(); // run the task
				}
			}else{
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).arg_function(cur_task->arg); // run the task
    6cfa:	e8 85       	ldd	r30, Y+8	; 0x08
    6cfc:	f9 85       	ldd	r31, Y+9	; 0x09
    6cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    6d00:	9b 85       	ldd	r25, Y+11	; 0x0b
    6d02:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6d04:	1f bf       	out	0x3f, r17	; 63
				}
			}
			
			if(cur_task->period>0){
    6d06:	8c 81       	ldd	r24, Y+4	; 0x04
    6d08:	9d 81       	ldd	r25, Y+5	; 0x05
    6d0a:	ae 81       	ldd	r26, Y+6	; 0x06
    6d0c:	bf 81       	ldd	r27, Y+7	; 0x07
    6d0e:	89 2b       	or	r24, r25
    6d10:	8a 2b       	or	r24, r26
    6d12:	8b 2b       	or	r24, r27
    6d14:	09 f4       	brne	.+2      	; 0x6d18 <__vector_11+0x1a4>
    6d16:	8d c0       	rjmp	.+282    	; 0x6e32 <__vector_11+0x2be>
				uint32_t nextTime = (((cur_task->scheduled_time)/(cur_task->period))+1)*(cur_task->period);
    6d18:	68 81       	ld	r22, Y
    6d1a:	79 81       	ldd	r23, Y+1	; 0x01
    6d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    6d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    6d20:	2c 81       	ldd	r18, Y+4	; 0x04
    6d22:	3d 81       	ldd	r19, Y+5	; 0x05
    6d24:	4e 81       	ldd	r20, Y+6	; 0x06
    6d26:	5f 81       	ldd	r21, Y+7	; 0x07
    6d28:	4c 80       	ldd	r4, Y+4	; 0x04
    6d2a:	5d 80       	ldd	r5, Y+5	; 0x05
    6d2c:	6e 80       	ldd	r6, Y+6	; 0x06
    6d2e:	7f 80       	ldd	r7, Y+7	; 0x07
    6d30:	0e 94 6d 4b 	call	0x96da	; 0x96da <__udivmodsi4>
    6d34:	2f 5f       	subi	r18, 0xFF	; 255
    6d36:	3f 4f       	sbci	r19, 0xFF	; 255
    6d38:	4f 4f       	sbci	r20, 0xFF	; 255
    6d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    6d3c:	c3 01       	movw	r24, r6
    6d3e:	b2 01       	movw	r22, r4
    6d40:	0e 94 35 4b 	call	0x966a	; 0x966a <__mulsi3>
				cur_task->scheduled_time = nextTime;
    6d44:	68 83       	st	Y, r22
    6d46:	79 83       	std	Y+1, r23	; 0x01
    6d48:	8a 83       	std	Y+2, r24	; 0x02
    6d4a:	9b 83       	std	Y+3, r25	; 0x03
				cur_task->next=NULL;
    6d4c:	1c 86       	std	Y+12, r1	; 0x0c
    6d4e:	1d 86       	std	Y+13, r1	; 0x0d
				num_tasks--;
    6d50:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <num_tasks>
    6d54:	81 50       	subi	r24, 0x01	; 1
    6d56:	80 93 fe 23 	sts	0x23FE, r24	; 0x8023fe <num_tasks>
				add_task_to_list(cur_task);
    6d5a:	ce 01       	movw	r24, r28
    6d5c:	0e 94 fa 33 	call	0x67f4	; 0x67f4 <add_task_to_list>
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
    6d60:	c0 e0       	ldi	r28, 0x00	; 0
    6d62:	d0 e0       	ldi	r29, 0x00	; 0
    6d64:	10 e0       	ldi	r17, 0x00	; 0
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
    6d66:	ce 01       	movw	r24, r28
    6d68:	88 0f       	add	r24, r24
    6d6a:	99 1f       	adc	r25, r25
    6d6c:	fc 01       	movw	r30, r24
    6d6e:	ee 0f       	add	r30, r30
    6d70:	ff 1f       	adc	r31, r31
    6d72:	ee 0f       	add	r30, r30
    6d74:	ff 1f       	adc	r31, r31
    6d76:	ee 0f       	add	r30, r30
    6d78:	ff 1f       	adc	r31, r31
    6d7a:	e8 1b       	sub	r30, r24
    6d7c:	f9 0b       	sbc	r31, r25
    6d7e:	e0 5a       	subi	r30, 0xA0	; 160
    6d80:	fc 4d       	sbci	r31, 0xDC	; 220
    6d82:	20 85       	ldd	r18, Z+8	; 0x08
    6d84:	31 85       	ldd	r19, Z+9	; 0x09
    6d86:	23 2b       	or	r18, r19
    6d88:	99 f1       	breq	.+102    	; 0x6df0 <__vector_11+0x27c>
					num_slots_used++;
    6d8a:	1f 5f       	subi	r17, 0xFF	; 255
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    6d8c:	24 85       	ldd	r18, Z+12	; 0x0c
    6d8e:	35 85       	ldd	r19, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
    6d90:	21 15       	cp	r18, r1
    6d92:	31 05       	cpc	r19, r1
    6d94:	69 f1       	breq	.+90     	; 0x6df0 <__vector_11+0x27c>
    6d96:	43 e2       	ldi	r20, 0x23	; 35
    6d98:	20 36       	cpi	r18, 0x60	; 96
    6d9a:	34 07       	cpc	r19, r20
    6d9c:	20 f0       	brcs	.+8      	; 0x6da6 <__vector_11+0x232>
    6d9e:	2e 5d       	subi	r18, 0xDE	; 222
    6da0:	33 42       	sbci	r19, 0x23	; 35
    6da2:	31 f1       	breq	.+76     	; 0x6df0 <__vector_11+0x27c>
    6da4:	28 f1       	brcs	.+74     	; 0x6df0 <__vector_11+0x27c>
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    6da6:	fc 01       	movw	r30, r24
    6da8:	ee 0f       	add	r30, r30
    6daa:	ff 1f       	adc	r31, r31
    6dac:	ee 0f       	add	r30, r30
    6dae:	ff 1f       	adc	r31, r31
    6db0:	ee 0f       	add	r30, r30
    6db2:	ff 1f       	adc	r31, r31
    6db4:	e8 1b       	sub	r30, r24
    6db6:	f9 0b       	sbc	r31, r25
    6db8:	e0 5a       	subi	r30, 0xA0	; 160
    6dba:	fc 4d       	sbci	r31, 0xDC	; 220
    6dbc:	8d b7       	in	r24, 0x3d	; 61
    6dbe:	9e b7       	in	r25, 0x3e	; 62
    6dc0:	0e 97       	sbiw	r24, 0x0e	; 14
    6dc2:	8d bf       	out	0x3d, r24	; 61
    6dc4:	9e bf       	out	0x3e, r25	; 62
    6dc6:	ad b7       	in	r26, 0x3d	; 61
    6dc8:	be b7       	in	r27, 0x3e	; 62
    6dca:	11 96       	adiw	r26, 0x01	; 1
    6dcc:	8e e0       	ldi	r24, 0x0E	; 14
    6dce:	01 90       	ld	r0, Z+
    6dd0:	0d 92       	st	X+, r0
    6dd2:	8a 95       	dec	r24
    6dd4:	e1 f7       	brne	.-8      	; 0x6dce <__vector_11+0x25a>
    6dd6:	bf 92       	push	r11
    6dd8:	af 92       	push	r10
    6dda:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
						delayMS(10);
    6dde:	8a e0       	ldi	r24, 0x0A	; 10
    6de0:	90 e0       	ldi	r25, 0x00	; 0
    6de2:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    6de6:	8d b7       	in	r24, 0x3d	; 61
    6de8:	9e b7       	in	r25, 0x3e	; 62
    6dea:	40 96       	adiw	r24, 0x10	; 16
    6dec:	8d bf       	out	0x3d, r24	; 61
    6dee:	9e bf       	out	0x3e, r25	; 62
    6df0:	21 96       	adiw	r28, 0x01	; 1
				cur_task = NULL;
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
    6df2:	ca 30       	cpi	r28, 0x0A	; 10
    6df4:	d1 05       	cpc	r29, r1
    6df6:	09 f0       	breq	.+2      	; 0x6dfa <__vector_11+0x286>
    6df8:	b6 cf       	rjmp	.-148    	; 0x6d66 <__vector_11+0x1f2>
						delayMS(10);
					}
				}
			}
			//printf_P(PSTR("\tReturned %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
    6dfa:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <num_tasks>
    6dfe:	81 17       	cp	r24, r17
    6e00:	09 f4       	brne	.+2      	; 0x6e04 <__vector_11+0x290>
    6e02:	10 cf       	rjmp	.-480    	; 0x6c24 <__vector_11+0xb0>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
    6e04:	8a ec       	ldi	r24, 0xCA	; 202
    6e06:	98 e0       	ldi	r25, 0x08	; 8
    6e08:	9f 93       	push	r25
    6e0a:	8f 93       	push	r24
    6e0c:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    6e10:	0f 90       	pop	r0
    6e12:	0f 90       	pop	r0
    6e14:	3f c0       	rjmp	.+126    	; 0x6e94 <__vector_11+0x320>

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    6e16:	78 94       	sei
			cur_task = task_list;
			task_list = cur_task->next;

			if(cur_task->arg==NULL){
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).noarg_func(); // run the task
    6e18:	e8 85       	ldd	r30, Y+8	; 0x08
    6e1a:	f9 85       	ldd	r31, Y+9	; 0x09
    6e1c:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6e1e:	1f bf       	out	0x3f, r17	; 63
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).arg_function(cur_task->arg); // run the task
				}
			}
			
			if(cur_task->period>0){
    6e20:	8c 81       	ldd	r24, Y+4	; 0x04
    6e22:	9d 81       	ldd	r25, Y+5	; 0x05
    6e24:	ae 81       	ldd	r26, Y+6	; 0x06
    6e26:	bf 81       	ldd	r27, Y+7	; 0x07
    6e28:	89 2b       	or	r24, r25
    6e2a:	8a 2b       	or	r24, r26
    6e2c:	8b 2b       	or	r24, r27
    6e2e:	09 f0       	breq	.+2      	; 0x6e32 <__vector_11+0x2be>
    6e30:	73 cf       	rjmp	.-282    	; 0x6d18 <__vector_11+0x1a4>
				cur_task->scheduled_time = nextTime;
				cur_task->next=NULL;
				num_tasks--;
				add_task_to_list(cur_task);
			}else{
				scheduler_free(cur_task);
    6e32:	ce 01       	movw	r24, r28
    6e34:	0e 94 62 32 	call	0x64c4	; 0x64c4 <scheduler_free>
				cur_task = NULL;
				num_tasks--;
    6e38:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <num_tasks>
    6e3c:	81 50       	subi	r24, 0x01	; 1
    6e3e:	80 93 fe 23 	sts	0x23FE, r24	; 0x8023fe <num_tasks>
    6e42:	8e cf       	rjmp	.-228    	; 0x6d60 <__vector_11+0x1ec>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
				return -1;
			}
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    6e44:	e0 91 16 26 	lds	r30, 0x2616	; 0x802616 <task_list>
    6e48:	f0 91 17 26 	lds	r31, 0x2617	; 0x802617 <task_list+0x1>
    6e4c:	30 97       	sbiw	r30, 0x00	; 0
    6e4e:	e9 f0       	breq	.+58     	; 0x6e8a <__vector_11+0x316>
    6e50:	00 81       	ld	r16, Z
    6e52:	11 81       	ldd	r17, Z+1	; 0x01
    6e54:	22 81       	ldd	r18, Z+2	; 0x02
    6e56:	33 81       	ldd	r19, Z+3	; 0x03
    6e58:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <rtc_epoch>
    6e5c:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <rtc_epoch+0x1>
    6e60:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    6e64:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    6e68:	a0 e0       	ldi	r26, 0x00	; 0
    6e6a:	b0 e0       	ldi	r27, 0x00	; 0
    6e6c:	dc 01       	movw	r26, r24
    6e6e:	99 27       	eor	r25, r25
    6e70:	88 27       	eor	r24, r24
    6e72:	60 e0       	ldi	r22, 0x00	; 0
    6e74:	70 e0       	ldi	r23, 0x00	; 0
    6e76:	84 2b       	or	r24, r20
    6e78:	95 2b       	or	r25, r21
    6e7a:	a6 2b       	or	r26, r22
    6e7c:	b7 2b       	or	r27, r23
    6e7e:	80 17       	cp	r24, r16
    6e80:	91 07       	cpc	r25, r17
    6e82:	a2 07       	cpc	r26, r18
    6e84:	b3 07       	cpc	r27, r19
    6e86:	08 f0       	brcs	.+2      	; 0x6e8a <__vector_11+0x316>
    6e88:	4d c0       	rjmp	.+154    	; 0x6f24 <__vector_11+0x3b0>
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		}else{
			RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    6e8a:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6e8e:	8b 7f       	andi	r24, 0xFB	; 251
    6e90:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6e94:	9f be       	out	0x3f, r9	; 63

ISR(RTC_COMP_vect){
	SAVE_CONTEXT();	
	task_executing=1;
	/*int8_t result =*/ run_tasks();
	task_executing=0;
    6e96:	10 92 11 26 	sts	0x2611, r1	; 0x802611 <task_executing>
	//if(result<0)
		//task_list_cleanup();		
	RESTORE_CONTEXT();	
    6e9a:	ff 91       	pop	r31
    6e9c:	ef 91       	pop	r30
    6e9e:	df 91       	pop	r29
    6ea0:	cf 91       	pop	r28
    6ea2:	bf 91       	pop	r27
    6ea4:	af 91       	pop	r26
    6ea6:	9f 91       	pop	r25
    6ea8:	8f 91       	pop	r24
    6eaa:	7f 91       	pop	r23
    6eac:	6f 91       	pop	r22
    6eae:	5f 91       	pop	r21
    6eb0:	4f 91       	pop	r20
    6eb2:	3f 91       	pop	r19
    6eb4:	2f 91       	pop	r18
    6eb6:	1f 91       	pop	r17
    6eb8:	0f 91       	pop	r16
    6eba:	ff 90       	pop	r15
    6ebc:	ef 90       	pop	r14
    6ebe:	df 90       	pop	r13
    6ec0:	cf 90       	pop	r12
    6ec2:	bf 90       	pop	r11
    6ec4:	af 90       	pop	r10
    6ec6:	9f 90       	pop	r9
    6ec8:	8f 90       	pop	r8
    6eca:	7f 90       	pop	r7
    6ecc:	6f 90       	pop	r6
    6ece:	5f 90       	pop	r5
    6ed0:	4f 90       	pop	r4
    6ed2:	3f 90       	pop	r3
    6ed4:	2f 90       	pop	r2
    6ed6:	1f 90       	pop	r1
    6ed8:	0f 90       	pop	r0
    6eda:	0f be       	out	0x3f, r0	; 63
    6edc:	0f 90       	pop	r0
}
    6ede:	ff 91       	pop	r31
    6ee0:	ef 91       	pop	r30
    6ee2:	df 91       	pop	r29
    6ee4:	cf 91       	pop	r28
    6ee6:	bf 91       	pop	r27
    6ee8:	af 91       	pop	r26
    6eea:	9f 91       	pop	r25
    6eec:	8f 91       	pop	r24
    6eee:	7f 91       	pop	r23
    6ef0:	6f 91       	pop	r22
    6ef2:	5f 91       	pop	r21
    6ef4:	4f 91       	pop	r20
    6ef6:	3f 91       	pop	r19
    6ef8:	2f 91       	pop	r18
    6efa:	1f 91       	pop	r17
    6efc:	0f 91       	pop	r16
    6efe:	ff 90       	pop	r15
    6f00:	ef 90       	pop	r14
    6f02:	df 90       	pop	r13
    6f04:	cf 90       	pop	r12
    6f06:	bf 90       	pop	r11
    6f08:	af 90       	pop	r10
    6f0a:	9f 90       	pop	r9
    6f0c:	8f 90       	pop	r8
    6f0e:	7f 90       	pop	r7
    6f10:	6f 90       	pop	r6
    6f12:	5f 90       	pop	r5
    6f14:	4f 90       	pop	r4
    6f16:	0f 90       	pop	r0
    6f18:	0b be       	out	0x3b, r0	; 59
    6f1a:	0f 90       	pop	r0
    6f1c:	0f be       	out	0x3f, r0	; 63
    6f1e:	0f 90       	pop	r0
    6f20:	1f 90       	pop	r1
    6f22:	18 95       	reti
				return -1;
			}
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6f24:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6f28:	80 fd       	sbrc	r24, 0
    6f2a:	fc cf       	rjmp	.-8      	; 0x6f24 <__vector_11+0x3b0>
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    6f2c:	80 81       	ld	r24, Z
    6f2e:	91 81       	ldd	r25, Z+1	; 0x01
    6f30:	a2 81       	ldd	r26, Z+2	; 0x02
    6f32:	b3 81       	ldd	r27, Z+3	; 0x03
    6f34:	88 60       	ori	r24, 0x08	; 8
    6f36:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    6f3a:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    6f3e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6f42:	84 60       	ori	r24, 0x04	; 4
    6f44:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6f48:	a5 cf       	rjmp	.-182    	; 0x6e94 <__vector_11+0x320>
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
    6f4a:	85 e4       	ldi	r24, 0x45	; 69
    6f4c:	99 e0       	ldi	r25, 0x09	; 9
    6f4e:	9f 93       	push	r25
    6f50:	8f 93       	push	r24
    6f52:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    6f56:	0f 90       	pop	r0
    6f58:	0f 90       	pop	r0
    6f5a:	9c cf       	rjmp	.-200    	; 0x6e94 <__vector_11+0x320>

00006f5c <__vector_10>:
	RESTORE_CONTEXT();	
}

// Increment rtc_epoch on RTC overflow
// Must be atomic so no reads of get_time() occur between RTC overflow and updating of epoch
ISR( RTC_OVF_vect ){
    6f5c:	1f 92       	push	r1
    6f5e:	0f 92       	push	r0
    6f60:	0f b6       	in	r0, 0x3f	; 63
    6f62:	0f 92       	push	r0
    6f64:	11 24       	eor	r1, r1
    6f66:	0b b6       	in	r0, 0x3b	; 59
    6f68:	0f 92       	push	r0
    6f6a:	cf 92       	push	r12
    6f6c:	df 92       	push	r13
    6f6e:	ef 92       	push	r14
    6f70:	ff 92       	push	r15
    6f72:	0f 93       	push	r16
    6f74:	1f 93       	push	r17
    6f76:	2f 93       	push	r18
    6f78:	3f 93       	push	r19
    6f7a:	4f 93       	push	r20
    6f7c:	5f 93       	push	r21
    6f7e:	6f 93       	push	r22
    6f80:	7f 93       	push	r23
    6f82:	8f 93       	push	r24
    6f84:	9f 93       	push	r25
    6f86:	af 93       	push	r26
    6f88:	bf 93       	push	r27
    6f8a:	cf 93       	push	r28
    6f8c:	ef 93       	push	r30
    6f8e:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
    6f90:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6f92:	f8 94       	cli
		rtc_epoch++;
    6f94:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <rtc_epoch>
    6f98:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <rtc_epoch+0x1>
    6f9c:	01 96       	adiw	r24, 0x01	; 1
    6f9e:	80 93 ee 23 	sts	0x23EE, r24	; 0x8023ee <rtc_epoch>
    6fa2:	90 93 ef 23 	sts	0x23EF, r25	; 0x8023ef <rtc_epoch+0x1>
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    6fa6:	e0 91 16 26 	lds	r30, 0x2616	; 0x802616 <task_list>
    6faa:	f0 91 17 26 	lds	r31, 0x2617	; 0x802617 <task_list+0x1>
    6fae:	30 97       	sbiw	r30, 0x00	; 0
    6fb0:	e1 f1       	breq	.+120    	; 0x702a <__vector_10+0xce>
    6fb2:	00 81       	ld	r16, Z
    6fb4:	11 81       	ldd	r17, Z+1	; 0x01
    6fb6:	22 81       	ldd	r18, Z+2	; 0x02
    6fb8:	33 81       	ldd	r19, Z+3	; 0x03
    6fba:	80 91 ee 23 	lds	r24, 0x23EE	; 0x8023ee <rtc_epoch>
    6fbe:	90 91 ef 23 	lds	r25, 0x23EF	; 0x8023ef <rtc_epoch+0x1>
    6fc2:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    6fc6:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    6fca:	a0 e0       	ldi	r26, 0x00	; 0
    6fcc:	b0 e0       	ldi	r27, 0x00	; 0
    6fce:	dc 01       	movw	r26, r24
    6fd0:	99 27       	eor	r25, r25
    6fd2:	88 27       	eor	r24, r24
    6fd4:	60 e0       	ldi	r22, 0x00	; 0
    6fd6:	70 e0       	ldi	r23, 0x00	; 0
    6fd8:	84 2b       	or	r24, r20
    6fda:	95 2b       	or	r25, r21
    6fdc:	a6 2b       	or	r26, r22
    6fde:	b7 2b       	or	r27, r23
    6fe0:	08 17       	cp	r16, r24
    6fe2:	19 07       	cpc	r17, r25
    6fe4:	2a 07       	cpc	r18, r26
    6fe6:	3b 07       	cpc	r19, r27
    6fe8:	00 f5       	brcc	.+64     	; 0x702a <__vector_10+0xce>
			if(!task_executing){
    6fea:	80 91 11 26 	lds	r24, 0x2611	; 0x802611 <task_executing>
    6fee:	88 23       	and	r24, r24
    6ff0:	09 f4       	brne	.+2      	; 0x6ff4 <__vector_10+0x98>
    6ff2:	3f c0       	rjmp	.+126    	; 0x7072 <__vector_10+0x116>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6ff4:	cf bf       	out	0x3f, r28	; 63
			}
		}else{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, getTime());
		}
	}
    6ff6:	ff 91       	pop	r31
    6ff8:	ef 91       	pop	r30
    6ffa:	cf 91       	pop	r28
    6ffc:	bf 91       	pop	r27
    6ffe:	af 91       	pop	r26
    7000:	9f 91       	pop	r25
    7002:	8f 91       	pop	r24
    7004:	7f 91       	pop	r23
    7006:	6f 91       	pop	r22
    7008:	5f 91       	pop	r21
    700a:	4f 91       	pop	r20
    700c:	3f 91       	pop	r19
    700e:	2f 91       	pop	r18
    7010:	1f 91       	pop	r17
    7012:	0f 91       	pop	r16
    7014:	ff 90       	pop	r15
    7016:	ef 90       	pop	r14
    7018:	df 90       	pop	r13
    701a:	cf 90       	pop	r12
    701c:	0f 90       	pop	r0
    701e:	0b be       	out	0x3b, r0	; 59
    7020:	0f 90       	pop	r0
    7022:	0f be       	out	0x3f, r0	; 63
    7024:	0f 90       	pop	r0
    7026:	1f 90       	pop	r1
    7028:	18 95       	reti
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}
			}
		}else{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, getTime());
    702a:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    702e:	36 2f       	mov	r19, r22
    7030:	e7 2f       	mov	r30, r23
    7032:	a0 91 16 26 	lds	r26, 0x2616	; 0x802616 <task_list>
    7036:	b0 91 17 26 	lds	r27, 0x2617	; 0x802617 <task_list+0x1>
    703a:	4d 91       	ld	r20, X+
    703c:	5d 91       	ld	r21, X+
    703e:	6d 91       	ld	r22, X+
    7040:	7c 91       	ld	r23, X
    7042:	20 91 11 26 	lds	r18, 0x2611	; 0x802611 <task_executing>
    7046:	9f 93       	push	r25
    7048:	8f 93       	push	r24
    704a:	ef 93       	push	r30
    704c:	3f 93       	push	r19
    704e:	7f 93       	push	r23
    7050:	6f 93       	push	r22
    7052:	5f 93       	push	r21
    7054:	4f 93       	push	r20
    7056:	1f 92       	push	r1
    7058:	2f 93       	push	r18
    705a:	89 ed       	ldi	r24, 0xD9	; 217
    705c:	91 e2       	ldi	r25, 0x21	; 33
    705e:	9f 93       	push	r25
    7060:	8f 93       	push	r24
    7062:	0e 94 f4 4f 	call	0x9fe8	; 0x9fe8 <printf>
    7066:	8d b7       	in	r24, 0x3d	; 61
    7068:	9e b7       	in	r25, 0x3e	; 62
    706a:	0c 96       	adiw	r24, 0x0c	; 12
    706c:	8d bf       	out	0x3d, r24	; 61
    706e:	9e bf       	out	0x3e, r25	; 62
    7070:	c1 cf       	rjmp	.-126    	; 0x6ff4 <__vector_10+0x98>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		rtc_epoch++;
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
			if(!task_executing){
				if(task_list->scheduled_time < getTime()){
    7072:	c0 80       	ld	r12, Z
    7074:	d1 80       	ldd	r13, Z+1	; 0x01
    7076:	e2 80       	ldd	r14, Z+2	; 0x02
    7078:	f3 80       	ldd	r15, Z+3	; 0x03
    707a:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    707e:	c6 16       	cp	r12, r22
    7080:	d7 06       	cpc	r13, r23
    7082:	e8 06       	cpc	r14, r24
    7084:	f9 06       	cpc	r15, r25
    7086:	08 f4       	brcc	.+2      	; 0x708a <__vector_10+0x12e>
    7088:	b5 cf       	rjmp	.-150    	; 0x6ff4 <__vector_10+0x98>
					//printf("In overflow, tasks need to have been executed!\r\n");
					//print_task_queue();
				}else{		
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    708a:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    708e:	80 fd       	sbrc	r24, 0
    7090:	fc cf       	rjmp	.-8      	; 0x708a <__vector_10+0x12e>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    7092:	e0 91 16 26 	lds	r30, 0x2616	; 0x802616 <task_list>
    7096:	f0 91 17 26 	lds	r31, 0x2617	; 0x802617 <task_list+0x1>
    709a:	80 81       	ld	r24, Z
    709c:	91 81       	ldd	r25, Z+1	; 0x01
    709e:	a2 81       	ldd	r26, Z+2	; 0x02
    70a0:	b3 81       	ldd	r27, Z+3	; 0x03
    70a2:	88 60       	ori	r24, 0x08	; 8
    70a4:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    70a8:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    70ac:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    70b0:	84 60       	ori	r24, 0x04	; 4
    70b2:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    70b6:	9e cf       	rjmp	.-196    	; 0x6ff4 <__vector_10+0x98>

000070b8 <sendID>:
 */
static void handle_reset(void){
	dropletReboot();
}

void sendID(){
    70b8:	0f 93       	push	r16
    70ba:	1f 93       	push	r17
    70bc:	cf 93       	push	r28
    70be:	df 93       	push	r29
    70c0:	cd b7       	in	r28, 0x3d	; 61
    70c2:	de b7       	in	r29, 0x3e	; 62
    70c4:	25 97       	sbiw	r28, 0x05	; 5
    70c6:	cd bf       	out	0x3d, r28	; 61
    70c8:	de bf       	out	0x3e, r29	; 62
	char msg[5];
	sprintf(msg, "%04X", getDropletID());
    70ca:	80 91 ed 23 	lds	r24, 0x23ED	; 0x8023ed <droplet_ID+0x1>
    70ce:	8f 93       	push	r24
    70d0:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <droplet_ID>
    70d4:	8f 93       	push	r24
    70d6:	8a e3       	ldi	r24, 0x3A	; 58
    70d8:	92 e2       	ldi	r25, 0x22	; 34
    70da:	9f 93       	push	r25
    70dc:	8f 93       	push	r24
    70de:	8e 01       	movw	r16, r28
    70e0:	0f 5f       	subi	r16, 0xFF	; 255
    70e2:	1f 4f       	sbci	r17, 0xFF	; 255
    70e4:	1f 93       	push	r17
    70e6:	0f 93       	push	r16
    70e8:	0e 94 66 50 	call	0xa0cc	; 0xa0cc <sprintf>
	irSend(ALL_DIRS, msg, 4);
    70ec:	44 e0       	ldi	r20, 0x04	; 4
    70ee:	b8 01       	movw	r22, r16
    70f0:	8f e3       	ldi	r24, 0x3F	; 63
    70f2:	0e 94 8f 13 	call	0x271e	; 0x271e <irSend>
}
    70f6:	0f 90       	pop	r0
    70f8:	0f 90       	pop	r0
    70fa:	0f 90       	pop	r0
    70fc:	0f 90       	pop	r0
    70fe:	0f 90       	pop	r0
    7100:	0f 90       	pop	r0
    7102:	25 96       	adiw	r28, 0x05	; 5
    7104:	cd bf       	out	0x3d, r28	; 61
    7106:	de bf       	out	0x3e, r29	; 62
    7108:	df 91       	pop	r29
    710a:	cf 91       	pop	r28
    710c:	1f 91       	pop	r17
    710e:	0f 91       	pop	r16
    7110:	08 95       	ret

00007112 <handleSerialCommand>:
/*
 * This is where incoming commands are interpreted. The actual command is the string inside the PSTR function.
 * For example, move_steps, walk, or get_rgb. If the command matches the string, the function on the same line
 * will get called. See individual functions for further documentation on that command's syntax.
 */
void handleSerialCommand(char* command, uint16_t command_length){
    7112:	2f 92       	push	r2
    7114:	3f 92       	push	r3
    7116:	4f 92       	push	r4
    7118:	5f 92       	push	r5
    711a:	6f 92       	push	r6
    711c:	7f 92       	push	r7
    711e:	8f 92       	push	r8
    7120:	9f 92       	push	r9
    7122:	af 92       	push	r10
    7124:	bf 92       	push	r11
    7126:	cf 92       	push	r12
    7128:	df 92       	push	r13
    712a:	ef 92       	push	r14
    712c:	ff 92       	push	r15
    712e:	0f 93       	push	r16
    7130:	1f 93       	push	r17
    7132:	cf 93       	push	r28
    7134:	df 93       	push	r29
    7136:	cd b7       	in	r28, 0x3d	; 61
    7138:	de b7       	in	r29, 0x3e	; 62
    713a:	c7 5a       	subi	r28, 0xA7	; 167
    713c:	d1 09       	sbc	r29, r1
    713e:	cd bf       	out	0x3d, r28	; 61
    7140:	de bf       	out	0x3e, r29	; 62
    7142:	dc 01       	movw	r26, r24
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
    7144:	9c 91       	ld	r25, X
    7146:	91 11       	cpse	r25, r1
    7148:	17 c0       	rjmp	.+46     	; 0x7178 <handleSerialCommand+0x66>
		}else if(userHandleCommand){ //First, make sure the function is defined
			if(!userHandleCommand(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
		}
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}
    714a:	c9 55       	subi	r28, 0x59	; 89
    714c:	df 4f       	sbci	r29, 0xFF	; 255
    714e:	cd bf       	out	0x3d, r28	; 61
    7150:	de bf       	out	0x3e, r29	; 62
    7152:	df 91       	pop	r29
    7154:	cf 91       	pop	r28
    7156:	1f 91       	pop	r17
    7158:	0f 91       	pop	r16
    715a:	ff 90       	pop	r15
    715c:	ef 90       	pop	r14
    715e:	df 90       	pop	r13
    7160:	cf 90       	pop	r12
    7162:	bf 90       	pop	r11
    7164:	af 90       	pop	r10
    7166:	9f 90       	pop	r9
    7168:	8f 90       	pop	r8
    716a:	7f 90       	pop	r7
    716c:	6f 90       	pop	r6
    716e:	5f 90       	pop	r5
    7170:	4f 90       	pop	r4
    7172:	3f 90       	pop	r3
    7174:	2f 90       	pop	r2
    7176:	08 95       	ret

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    7178:	61 15       	cp	r22, r1
    717a:	71 05       	cpc	r23, r1
    717c:	09 f4       	brne	.+2      	; 0x7180 <handleSerialCommand+0x6e>
    717e:	f9 c1       	rjmp	.+1010   	; 0x7572 <handleSerialCommand+0x460>
    7180:	fd 01       	movw	r30, r26
    7182:	31 96       	adiw	r30, 0x01	; 1
    7184:	6a 0f       	add	r22, r26
    7186:	7b 1f       	adc	r23, r27
    7188:	20 e0       	ldi	r18, 0x00	; 0
    718a:	30 e0       	ldi	r19, 0x00	; 0
    718c:	81 e0       	ldi	r24, 0x01	; 1
    718e:	8e 01       	movw	r16, r28
    7190:	0f 5b       	subi	r16, 0xBF	; 191
    7192:	1f 4f       	sbci	r17, 0xFF	; 255
    7194:	12 c0       	rjmp	.+36     	; 0x71ba <handleSerialCommand+0xa8>
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
			writing_word_boole = 0;
		}else{
			if(writing_word_boole==1){
    7196:	81 30       	cpi	r24, 0x01	; 1
    7198:	09 f4       	brne	.+2      	; 0x719c <handleSerialCommand+0x8a>
    719a:	ca c0       	rjmp	.+404    	; 0x7330 <handleSerialCommand+0x21e>
				command_word[write_index] = command[i];
			}else{
				command_args[write_index] = command[i];
    719c:	a1 e0       	ldi	r26, 0x01	; 1
    719e:	b0 e0       	ldi	r27, 0x00	; 0
    71a0:	ac 0f       	add	r26, r28
    71a2:	bd 1f       	adc	r27, r29
    71a4:	a2 0f       	add	r26, r18
    71a6:	b3 1f       	adc	r27, r19
    71a8:	9c 93       	st	X, r25
			}
			write_index++;
    71aa:	2f 5f       	subi	r18, 0xFF	; 255
    71ac:	3f 4f       	sbci	r19, 0xFF	; 255

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    71ae:	6e 17       	cp	r22, r30
    71b0:	7f 07       	cpc	r23, r31
    71b2:	89 f0       	breq	.+34     	; 0x71d6 <handleSerialCommand+0xc4>
		if(command[i]=='\0'){
    71b4:	91 91       	ld	r25, Z+
    71b6:	99 23       	and	r25, r25
    71b8:	71 f0       	breq	.+28     	; 0x71d6 <handleSerialCommand+0xc4>
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
    71ba:	90 32       	cpi	r25, 0x20	; 32
    71bc:	61 f7       	brne	.-40     	; 0x7196 <handleSerialCommand+0x84>
    71be:	81 30       	cpi	r24, 0x01	; 1
    71c0:	69 f7       	brne	.-38     	; 0x719c <handleSerialCommand+0x8a>
			command_word[write_index]='\0';
    71c2:	d8 01       	movw	r26, r16
    71c4:	a2 0f       	add	r26, r18
    71c6:	b3 1f       	adc	r27, r19
    71c8:	1c 92       	st	X, r1
			write_index = 0;
			writing_word_boole = 0;
    71ca:	80 e0       	ldi	r24, 0x00	; 0
	for(uint16_t i=0 ; i<command_length ; i++){
		if(command[i]=='\0'){
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
    71cc:	20 e0       	ldi	r18, 0x00	; 0
    71ce:	30 e0       	ldi	r19, 0x00	; 0

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    71d0:	6e 17       	cp	r22, r30
    71d2:	7f 07       	cpc	r23, r31
    71d4:	79 f7       	brne	.-34     	; 0x71b4 <handleSerialCommand+0xa2>
				command_args[write_index] = command[i];
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
    71d6:	81 30       	cpi	r24, 0x01	; 1
    71d8:	09 f4       	brne	.+2      	; 0x71dc <handleSerialCommand+0xca>
    71da:	72 c1       	rjmp	.+740    	; 0x74c0 <handleSerialCommand+0x3ae>
		command_word[write_index] = '\0';
		command_args[0] = '\0';
	}else{
		command_args[write_index] = '\0';
    71dc:	fe 01       	movw	r30, r28
    71de:	e2 0f       	add	r30, r18
    71e0:	f3 1f       	adc	r31, r19
    71e2:	11 82       	std	Z+1, r1	; 0x01
void handleSerialCommand(char* command, uint16_t command_length){
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
		char command_word[SRL_BUFFER_SIZE];
		char command_args[SRL_BUFFER_SIZE];
		get_command_word_and_args(command,command_length,command_word,command_args);
			 if(strcmp_P(command_word,PSTR("move_steps"))==0)			handle_move_steps(command_args);
    71e4:	6c ea       	ldi	r22, 0xAC	; 172
    71e6:	7f e0       	ldi	r23, 0x0F	; 15
    71e8:	c8 01       	movw	r24, r16
    71ea:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    71ee:	89 2b       	or	r24, r25
    71f0:	09 f4       	brne	.+2      	; 0x71f4 <handleSerialCommand+0xe2>
    71f2:	c3 c0       	rjmp	.+390    	; 0x737a <handleSerialCommand+0x268>
		else if(strcmp_P(command_word,PSTR("walk"))==0)					handle_walk(command_args);
    71f4:	67 ea       	ldi	r22, 0xA7	; 167
    71f6:	7f e0       	ldi	r23, 0x0F	; 15
    71f8:	c8 01       	movw	r24, r16
    71fa:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    71fe:	89 2b       	or	r24, r25
    7200:	09 f4       	brne	.+2      	; 0x7204 <handleSerialCommand+0xf2>
    7202:	9b c0       	rjmp	.+310    	; 0x733a <handleSerialCommand+0x228>
		else if(strcmp_P(command_word,PSTR("get_rgb"))==0)				handle_get_rgb();
    7204:	6f e9       	ldi	r22, 0x9F	; 159
    7206:	7f e0       	ldi	r23, 0x0F	; 15
    7208:	c8 01       	movw	r24, r16
    720a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    720e:	89 2b       	or	r24, r25
    7210:	09 f4       	brne	.+2      	; 0x7214 <handleSerialCommand+0x102>
    7212:	e8 c0       	rjmp	.+464    	; 0x73e4 <handleSerialCommand+0x2d2>
		else if(strcmp_P(command_word,PSTR("set_ir"))==0)				handle_set_ir(command_args);
    7214:	68 e9       	ldi	r22, 0x98	; 152
    7216:	7f e0       	ldi	r23, 0x0F	; 15
    7218:	c8 01       	movw	r24, r16
    721a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    721e:	89 2b       	or	r24, r25
    7220:	09 f4       	brne	.+2      	; 0x7224 <handleSerialCommand+0x112>
    7222:	54 c1       	rjmp	.+680    	; 0x74cc <handleSerialCommand+0x3ba>
		else if(strcmp_P(command_word,PSTR("coll"))==0)					handle_check_collisions();
    7224:	63 e9       	ldi	r22, 0x93	; 147
    7226:	7f e0       	ldi	r23, 0x0F	; 15
    7228:	c8 01       	movw	r24, r16
    722a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    722e:	89 2b       	or	r24, r25
    7230:	09 f4       	brne	.+2      	; 0x7234 <handleSerialCommand+0x122>
    7232:	67 c1       	rjmp	.+718    	; 0x7502 <handleSerialCommand+0x3f0>
		else if(strcmp_P(command_word,PSTR("stop_walk"))==0)			handle_stop_walk();
    7234:	69 e8       	ldi	r22, 0x89	; 137
    7236:	7f e0       	ldi	r23, 0x0F	; 15
    7238:	c8 01       	movw	r24, r16
    723a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    723e:	89 2b       	or	r24, r25
    7240:	09 f4       	brne	.+2      	; 0x7244 <handleSerialCommand+0x132>
    7242:	94 c1       	rjmp	.+808    	; 0x756c <handleSerialCommand+0x45a>
		else if(strcmp_P(command_word,PSTR("set_motors"))==0)			handle_set_motors(command_args);
    7244:	6e e7       	ldi	r22, 0x7E	; 126
    7246:	7f e0       	ldi	r23, 0x0F	; 15
    7248:	c8 01       	movw	r24, r16
    724a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    724e:	89 2b       	or	r24, r25
    7250:	09 f4       	brne	.+2      	; 0x7254 <handleSerialCommand+0x142>
    7252:	00 c1       	rjmp	.+512    	; 0x7454 <handleSerialCommand+0x342>
		else if(strcmp_P(command_word,PSTR("adj_motors"))==0)			handle_adjust_motors(command_args);
    7254:	63 e7       	ldi	r22, 0x73	; 115
    7256:	7f e0       	ldi	r23, 0x0F	; 15
    7258:	c8 01       	movw	r24, r16
    725a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    725e:	89 2b       	or	r24, r25
    7260:	09 f4       	brne	.+2      	; 0x7264 <handleSerialCommand+0x152>
    7262:	8c c1       	rjmp	.+792    	; 0x757c <handleSerialCommand+0x46a>
		else if(strcmp_P(command_word,PSTR("set_dist_per_step"))==0)	handle_set_mm_per_kilostep(command_args);
    7264:	61 e6       	ldi	r22, 0x61	; 97
    7266:	7f e0       	ldi	r23, 0x0F	; 15
    7268:	c8 01       	movw	r24, r16
    726a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    726e:	89 2b       	or	r24, r25
    7270:	09 f4       	brne	.+2      	; 0x7274 <handleSerialCommand+0x162>
    7272:	ba c1       	rjmp	.+884    	; 0x75e8 <handleSerialCommand+0x4d6>
		else if(strcmp_P(command_word,PSTR("rnb_b"))==0)				handle_rnb_broadcast();
    7274:	6b e5       	ldi	r22, 0x5B	; 91
    7276:	7f e0       	ldi	r23, 0x0F	; 15
    7278:	c8 01       	movw	r24, r16
    727a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    727e:	89 2b       	or	r24, r25
    7280:	09 f4       	brne	.+2      	; 0x7284 <handleSerialCommand+0x172>
    7282:	25 c2       	rjmp	.+1098   	; 0x76ce <handleSerialCommand+0x5bc>
		else if(strcmp_P(command_word,PSTR("set_led"))==0)				handle_set_led(command_args);
    7284:	63 e5       	ldi	r22, 0x53	; 83
    7286:	7f e0       	ldi	r23, 0x0F	; 15
    7288:	c8 01       	movw	r24, r16
    728a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    728e:	89 2b       	or	r24, r25
    7290:	09 f4       	brne	.+2      	; 0x7294 <handleSerialCommand+0x182>
    7292:	a4 c2       	rjmp	.+1352   	; 0x77dc <handleSerialCommand+0x6ca>
		else if(strcmp_P(command_word,PSTR("get_id"))==0)				handle_get_id();
    7294:	6c e4       	ldi	r22, 0x4C	; 76
    7296:	7f e0       	ldi	r23, 0x0F	; 15
    7298:	c8 01       	movw	r24, r16
    729a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    729e:	89 2b       	or	r24, r25
    72a0:	09 f4       	brne	.+2      	; 0x72a4 <handleSerialCommand+0x192>
    72a2:	ea c2       	rjmp	.+1492   	; 0x7878 <handleSerialCommand+0x766>
		else if(strcmp_P(command_word,PSTR("broadcast_id"))==0)			handle_broadcast_id();
    72a4:	6f e3       	ldi	r22, 0x3F	; 63
    72a6:	7f e0       	ldi	r23, 0x0F	; 15
    72a8:	c8 01       	movw	r24, r16
    72aa:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    72ae:	89 2b       	or	r24, r25
    72b0:	09 f4       	brne	.+2      	; 0x72b4 <handleSerialCommand+0x1a2>
    72b2:	f3 c2       	rjmp	.+1510   	; 0x789a <handleSerialCommand+0x788>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
    72b4:	6b e3       	ldi	r22, 0x3B	; 59
    72b6:	7f e0       	ldi	r23, 0x0F	; 15
    72b8:	c8 01       	movw	r24, r16
    72ba:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    72be:	89 2b       	or	r24, r25
    72c0:	09 f4       	brne	.+2      	; 0x72c4 <handleSerialCommand+0x1b2>
    72c2:	f6 c2       	rjmp	.+1516   	; 0x78b0 <handleSerialCommand+0x79e>
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
    72c4:	63 e3       	ldi	r22, 0x33	; 51
    72c6:	7f e0       	ldi	r23, 0x0F	; 15
    72c8:	c8 01       	movw	r24, r16
    72ca:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    72ce:	89 2b       	or	r24, r25
    72d0:	09 f4       	brne	.+2      	; 0x72d4 <handleSerialCommand+0x1c2>
    72d2:	42 c3       	rjmp	.+1668   	; 0x7958 <handleSerialCommand+0x846>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
    72d4:	6f e2       	ldi	r22, 0x2F	; 47
    72d6:	7f e0       	ldi	r23, 0x0F	; 15
    72d8:	c8 01       	movw	r24, r16
    72da:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    72de:	89 2b       	or	r24, r25
    72e0:	09 f4       	brne	.+2      	; 0x72e4 <handleSerialCommand+0x1d2>
    72e2:	59 c4       	rjmp	.+2226   	; 0x7b96 <handleSerialCommand+0xa84>
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
    72e4:	67 e2       	ldi	r22, 0x27	; 39
    72e6:	7f e0       	ldi	r23, 0x0F	; 15
    72e8:	c8 01       	movw	r24, r16
    72ea:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    72ee:	89 2b       	or	r24, r25
    72f0:	09 f4       	brne	.+2      	; 0x72f4 <handleSerialCommand+0x1e2>
    72f2:	3c c4       	rjmp	.+2168   	; 0x7b6c <handleSerialCommand+0xa5a>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
    72f4:	63 e2       	ldi	r22, 0x23	; 35
    72f6:	7f e0       	ldi	r23, 0x0F	; 15
    72f8:	c8 01       	movw	r24, r16
    72fa:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    72fe:	89 2b       	or	r24, r25
    7300:	09 f4       	brne	.+2      	; 0x7304 <handleSerialCommand+0x1f2>
    7302:	00 c4       	rjmp	.+2048   	; 0x7b04 <handleSerialCommand+0x9f2>
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
    7304:	6d e1       	ldi	r22, 0x1D	; 29
    7306:	7f e0       	ldi	r23, 0x0F	; 15
    7308:	c8 01       	movw	r24, r16
    730a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    730e:	89 2b       	or	r24, r25
    7310:	09 f4       	brne	.+2      	; 0x7314 <handleSerialCommand+0x202>
    7312:	f5 c3       	rjmp	.+2026   	; 0x7afe <handleSerialCommand+0x9ec>
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
    7314:	67 e1       	ldi	r22, 0x17	; 23
    7316:	7f e0       	ldi	r23, 0x0F	; 15
    7318:	c8 01       	movw	r24, r16
    731a:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    731e:	89 2b       	or	r24, r25
    7320:	09 f0       	breq	.+2      	; 0x7324 <handleSerialCommand+0x212>
    7322:	b9 c3       	rjmp	.+1906   	; 0x7a96 <handleSerialCommand+0x984>

/**
 * \brief Resets the Droplet's program counter and clears all low-level system buffers.
 */
inline void dropletReboot(void){
	CPU_CCP=CCP_IOREG_gc;
    7324:	88 ed       	ldi	r24, 0xD8	; 216
    7326:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
    7328:	81 e0       	ldi	r24, 0x01	; 1
    732a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    732e:	0d cf       	rjmp	.-486    	; 0x714a <handleSerialCommand+0x38>
			command_word[write_index]='\0';
			write_index = 0;
			writing_word_boole = 0;
		}else{
			if(writing_word_boole==1){
				command_word[write_index] = command[i];
    7330:	d8 01       	movw	r26, r16
    7332:	a2 0f       	add	r26, r18
    7334:	b3 1f       	adc	r27, r19
    7336:	9c 93       	st	X, r25
    7338:	38 cf       	rjmp	.-400    	; 0x71aa <handleSerialCommand+0x98>
 * Format:
 *     walk <dir> <distance>
 * Calls the walk function with arguments as described above.
 */
static void handle_walk(char* command_args){	
	const char delim[2] = " ";
    733a:	80 e2       	ldi	r24, 0x20	; 32
    733c:	90 e0       	ldi	r25, 0x00	; 0
    733e:	cf 57       	subi	r28, 0x7F	; 127
    7340:	df 4f       	sbci	r29, 0xFF	; 255
    7342:	88 83       	st	Y, r24
    7344:	99 83       	std	Y+1, r25	; 0x01
    7346:	c1 58       	subi	r28, 0x81	; 129
    7348:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    734a:	be 01       	movw	r22, r28
    734c:	6f 57       	subi	r22, 0x7F	; 127
    734e:	7f 4f       	sbci	r23, 0xFF	; 255
    7350:	ce 01       	movw	r24, r28
    7352:	01 96       	adiw	r24, 0x01	; 1
    7354:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	uint8_t direction = token[0]-'0';
    7358:	fc 01       	movw	r30, r24
    735a:	10 81       	ld	r17, Z
    735c:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    735e:	be 01       	movw	r22, r28
    7360:	6f 57       	subi	r22, 0x7F	; 127
    7362:	7f 4f       	sbci	r23, 0xFF	; 255
    7364:	80 e0       	ldi	r24, 0x00	; 0
    7366:	90 e0       	ldi	r25, 0x00	; 0
    7368:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	uint16_t distance_mm = (uint16_t)atoi(token);
    736c:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
	
	walk(direction, distance_mm);
    7370:	bc 01       	movw	r22, r24
    7372:	81 2f       	mov	r24, r17
    7374:	0e 94 03 20 	call	0x4006	; 0x4006 <walk>
    7378:	e8 ce       	rjmp	.-560    	; 0x714a <handleSerialCommand+0x38>
 * Format:
 *     move_steps <dir> <num_steps>
 * Calls the move_steps function with arguments as described above.
 */
static void handle_move_steps(char* command_args){
	const char delim[2] = " ";
    737a:	80 e2       	ldi	r24, 0x20	; 32
    737c:	90 e0       	ldi	r25, 0x00	; 0
    737e:	cf 57       	subi	r28, 0x7F	; 127
    7380:	df 4f       	sbci	r29, 0xFF	; 255
    7382:	88 83       	st	Y, r24
    7384:	99 83       	std	Y+1, r25	; 0x01
    7386:	c1 58       	subi	r28, 0x81	; 129
    7388:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    738a:	be 01       	movw	r22, r28
    738c:	6f 57       	subi	r22, 0x7F	; 127
    738e:	7f 4f       	sbci	r23, 0xFF	; 255
    7390:	ce 01       	movw	r24, r28
    7392:	01 96       	adiw	r24, 0x01	; 1
    7394:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	uint8_t direction = token[0]-'0';
    7398:	fc 01       	movw	r30, r24
    739a:	f0 80       	ld	r15, Z

	token = strtok(NULL,delim);
    739c:	be 01       	movw	r22, r28
    739e:	6f 57       	subi	r22, 0x7F	; 127
    73a0:	7f 4f       	sbci	r23, 0xFF	; 255
    73a2:	80 e0       	ldi	r24, 0x00	; 0
    73a4:	90 e0       	ldi	r25, 0x00	; 0
    73a6:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	uint16_t num_steps = (uint16_t)atoi(token);
    73aa:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    73ae:	8c 01       	movw	r16, r24
	if (num_steps > 0){	
    73b0:	00 97       	sbiw	r24, 0x00	; 0
    73b2:	09 f4       	brne	.+2      	; 0x73b6 <handleSerialCommand+0x2a4>
    73b4:	ca ce       	rjmp	.-620    	; 0x714a <handleSerialCommand+0x38>
 */
static void handle_move_steps(char* command_args){
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	uint8_t direction = token[0]-'0';
    73b6:	f0 ed       	ldi	r31, 0xD0	; 208
    73b8:	ff 0e       	add	r15, r31

	token = strtok(NULL,delim);
	uint16_t num_steps = (uint16_t)atoi(token);
	if (num_steps > 0){	
		printf_P(PSTR("walk direction %hu, num_steps %u\r\n"), direction, num_steps);	
    73ba:	1f 93       	push	r17
    73bc:	8f 93       	push	r24
    73be:	1f 92       	push	r1
    73c0:	ff 92       	push	r15
    73c2:	8a ec       	ldi	r24, 0xCA	; 202
    73c4:	9e e0       	ldi	r25, 0x0E	; 14
    73c6:	9f 93       	push	r25
    73c8:	8f 93       	push	r24
    73ca:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
		moveSteps(direction, num_steps);
    73ce:	b8 01       	movw	r22, r16
    73d0:	8f 2d       	mov	r24, r15
    73d2:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <moveSteps>
    73d6:	0f 90       	pop	r0
    73d8:	0f 90       	pop	r0
    73da:	0f 90       	pop	r0
    73dc:	0f 90       	pop	r0
    73de:	0f 90       	pop	r0
    73e0:	0f 90       	pop	r0
    73e2:	b3 ce       	rjmp	.-666    	; 0x714a <handleSerialCommand+0x38>
 * No arguments.
 * Prints the sensed colors, as reported by get_rgb.
 */
static void handle_get_rgb(void){
	int16_t r, g, b;
	getRGB(&r, &g, &b);
    73e4:	ae 01       	movw	r20, r28
    73e6:	4f 57       	subi	r20, 0x7F	; 127
    73e8:	5f 4f       	sbci	r21, 0xFF	; 255
    73ea:	be 01       	movw	r22, r28
    73ec:	6f 55       	subi	r22, 0x5F	; 95
    73ee:	7f 4f       	sbci	r23, 0xFF	; 255
    73f0:	ce 01       	movw	r24, r28
    73f2:	8a 55       	subi	r24, 0x5A	; 90
    73f4:	9f 4f       	sbci	r25, 0xFF	; 255
    73f6:	0e 94 1e 32 	call	0x643c	; 0x643c <getRGB>
	printf_P(PSTR("r: %hu, g: %hu, b: %hu\r\n"), r, g, b);
    73fa:	ce 57       	subi	r28, 0x7E	; 126
    73fc:	df 4f       	sbci	r29, 0xFF	; 255
    73fe:	88 81       	ld	r24, Y
    7400:	c2 58       	subi	r28, 0x82	; 130
    7402:	d0 40       	sbci	r29, 0x00	; 0
    7404:	8f 93       	push	r24
    7406:	cf 57       	subi	r28, 0x7F	; 127
    7408:	df 4f       	sbci	r29, 0xFF	; 255
    740a:	88 81       	ld	r24, Y
    740c:	c1 58       	subi	r28, 0x81	; 129
    740e:	d0 40       	sbci	r29, 0x00	; 0
    7410:	8f 93       	push	r24
    7412:	ce 55       	subi	r28, 0x5E	; 94
    7414:	df 4f       	sbci	r29, 0xFF	; 255
    7416:	88 81       	ld	r24, Y
    7418:	c2 5a       	subi	r28, 0xA2	; 162
    741a:	d0 40       	sbci	r29, 0x00	; 0
    741c:	8f 93       	push	r24
    741e:	cf 55       	subi	r28, 0x5F	; 95
    7420:	df 4f       	sbci	r29, 0xFF	; 255
    7422:	88 81       	ld	r24, Y
    7424:	c1 5a       	subi	r28, 0xA1	; 161
    7426:	d0 40       	sbci	r29, 0x00	; 0
    7428:	8f 93       	push	r24
    742a:	c9 55       	subi	r28, 0x59	; 89
    742c:	df 4f       	sbci	r29, 0xFF	; 255
    742e:	88 81       	ld	r24, Y
    7430:	c7 5a       	subi	r28, 0xA7	; 167
    7432:	d0 40       	sbci	r29, 0x00	; 0
    7434:	8f 93       	push	r24
    7436:	ca 55       	subi	r28, 0x5A	; 90
    7438:	df 4f       	sbci	r29, 0xFF	; 255
    743a:	88 81       	ld	r24, Y
    743c:	c6 5a       	subi	r28, 0xA6	; 166
    743e:	d0 40       	sbci	r29, 0x00	; 0
    7440:	8f 93       	push	r24
    7442:	81 eb       	ldi	r24, 0xB1	; 177
    7444:	9e e0       	ldi	r25, 0x0E	; 14
    7446:	9f 93       	push	r25
    7448:	8f 93       	push	r24
    744a:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    744e:	cd bf       	out	0x3d, r28	; 61
    7450:	de bf       	out	0x3e, r29	; 62
    7452:	7b ce       	rjmp	.-778    	; 0x714a <handleSerialCommand+0x38>
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    7454:	60 90 7a 0a 	lds	r6, 0x0A7A	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    7458:	70 90 7b 0a 	lds	r7, 0x0A7B	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    745c:	a0 90 78 0a 	lds	r10, 0x0A78	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    7460:	b0 90 79 0a 	lds	r11, 0x0A79	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    7464:	80 90 78 09 	lds	r8, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    7468:	90 90 79 09 	lds	r9, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
 * how long it spins for.
 * Note that Audio Droplets don't have a motor 0, so <mot0val> should always be 0 for them.
 */
static void handle_set_motors(char* command_args){	
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
    746c:	4f ef       	ldi	r20, 0xFF	; 255
    746e:	60 e0       	ldi	r22, 0x00	; 0
    7470:	80 e0       	ldi	r24, 0x00	; 0
    7472:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
	const char delim[2] = " ";
    7476:	8e 01       	movw	r16, r28
    7478:	0f 57       	subi	r16, 0x7F	; 127
    747a:	1f 4f       	sbci	r17, 0xFF	; 255
    747c:	80 e2       	ldi	r24, 0x20	; 32
    747e:	90 e0       	ldi	r25, 0x00	; 0
    7480:	f8 01       	movw	r30, r16
    7482:	80 83       	st	Z, r24
    7484:	91 83       	std	Z+1, r25	; 0x01
	
	char* token = strtok(command_args,delim);
    7486:	b8 01       	movw	r22, r16
    7488:	ce 01       	movw	r24, r28
    748a:	01 96       	adiw	r24, 0x01	; 1
    748c:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    7490:	00 97       	sbiw	r24, 0x00	; 0
    7492:	09 f4       	brne	.+2      	; 0x7496 <handleSerialCommand+0x384>
    7494:	ca c2       	rjmp	.+1428   	; 0x7a2a <handleSerialCommand+0x918>
	uint8_t direction = atoi(token);
    7496:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    749a:	7c 01       	movw	r14, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}
    749c:	f7 e0       	ldi	r31, 0x07	; 7
    749e:	f8 17       	cp	r31, r24
    74a0:	08 f0       	brcs	.+2      	; 0x74a4 <handleSerialCommand+0x392>
    74a2:	c2 c0       	rjmp	.+388    	; 0x7628 <handleSerialCommand+0x516>
    74a4:	ff 24       	eor	r15, r15
    74a6:	ff 92       	push	r15
    74a8:	ef 92       	push	r14
    74aa:	81 e7       	ldi	r24, 0x71	; 113
    74ac:	9e e0       	ldi	r25, 0x0E	; 14
    74ae:	9f 93       	push	r25
    74b0:	8f 93       	push	r24
    74b2:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    74b6:	0f 90       	pop	r0
    74b8:	0f 90       	pop	r0
    74ba:	0f 90       	pop	r0
    74bc:	0f 90       	pop	r0
    74be:	45 ce       	rjmp	.-886    	; 0x714a <handleSerialCommand+0x38>
    74c0:	f8 01       	movw	r30, r16
    74c2:	e2 0f       	add	r30, r18
    74c4:	f3 1f       	adc	r31, r19
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
		command_word[write_index] = '\0';
    74c6:	10 82       	st	Z, r1
		command_args[0] = '\0';
    74c8:	19 82       	std	Y+1, r1	; 0x01
    74ca:	8c ce       	rjmp	.-744    	; 0x71e4 <handleSerialCommand+0xd2>
 * Format:
 *     set_ir <power>
 * Calls the set_all_ir_powers function with arguments as described above.
 */
static void handle_set_ir(char* command_args){
	const char delim[2] = " ";
    74cc:	80 e2       	ldi	r24, 0x20	; 32
    74ce:	90 e0       	ldi	r25, 0x00	; 0
    74d0:	cf 57       	subi	r28, 0x7F	; 127
    74d2:	df 4f       	sbci	r29, 0xFF	; 255
    74d4:	88 83       	st	Y, r24
    74d6:	99 83       	std	Y+1, r25	; 0x01
    74d8:	c1 58       	subi	r28, 0x81	; 129
    74da:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    74dc:	be 01       	movw	r22, r28
    74de:	6f 57       	subi	r22, 0x7F	; 127
    74e0:	7f 4f       	sbci	r23, 0xFF	; 255
    74e2:	ce 01       	movw	r24, r28
    74e4:	01 96       	adiw	r24, 0x01	; 1
    74e6:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	uint16_t ir_val = (uint16_t)atoi(token);
    74ea:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>

	scheduleTask(10, (arg_func_t)setAllirPowers, (void*)ir_val);
    74ee:	9c 01       	movw	r18, r24
    74f0:	4f e8       	ldi	r20, 0x8F	; 143
    74f2:	5b e1       	ldi	r21, 0x1B	; 27
    74f4:	6a e0       	ldi	r22, 0x0A	; 10
    74f6:	70 e0       	ldi	r23, 0x00	; 0
    74f8:	80 e0       	ldi	r24, 0x00	; 0
    74fa:	90 e0       	ldi	r25, 0x00	; 0
    74fc:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <scheduleTask>
    7500:	24 ce       	rjmp	.-952    	; 0x714a <handleSerialCommand+0x38>
/*
 * No arguments.
 * Prints each direction in which a collision was detected, or None.
 */
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
    7502:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <checkCollisions>
    7506:	e8 2e       	mov	r14, r24
    7508:	f1 2c       	mov	r15, r1
    750a:	00 e0       	ldi	r16, 0x00	; 0
    750c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t found=0;
    750e:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
			printf("%hu",i);
    7510:	a0 e5       	ldi	r26, 0x50	; 80
    7512:	ca 2e       	mov	r12, r26
    7514:	a2 e2       	ldi	r26, 0x22	; 34
    7516:	da 2e       	mov	r13, r26
    7518:	05 c0       	rjmp	.+10     	; 0x7524 <handleSerialCommand+0x412>
    751a:	0f 5f       	subi	r16, 0xFF	; 255
    751c:	1f 4f       	sbci	r17, 0xFF	; 255
 * Prints each direction in which a collision was detected, or None.
 */
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
    751e:	06 30       	cpi	r16, 0x06	; 6
    7520:	11 05       	cpc	r17, r1
    7522:	a9 f0       	breq	.+42     	; 0x754e <handleSerialCommand+0x43c>
		if(dirs&(1<<i)){
    7524:	c7 01       	movw	r24, r14
    7526:	00 2e       	mov	r0, r16
    7528:	02 c0       	rjmp	.+4      	; 0x752e <handleSerialCommand+0x41c>
    752a:	95 95       	asr	r25
    752c:	87 95       	ror	r24
    752e:	0a 94       	dec	r0
    7530:	e2 f7       	brpl	.-8      	; 0x752a <handleSerialCommand+0x418>
    7532:	80 ff       	sbrs	r24, 0
    7534:	f2 cf       	rjmp	.-28     	; 0x751a <handleSerialCommand+0x408>
			found=1;
			printf("%hu",i);
    7536:	1f 93       	push	r17
    7538:	0f 93       	push	r16
    753a:	df 92       	push	r13
    753c:	cf 92       	push	r12
    753e:	0e 94 f4 4f 	call	0x9fe8	; 0x9fe8 <printf>
    7542:	0f 90       	pop	r0
    7544:	0f 90       	pop	r0
    7546:	0f 90       	pop	r0
    7548:	0f 90       	pop	r0
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
    754a:	21 e0       	ldi	r18, 0x01	; 1
    754c:	e6 cf       	rjmp	.-52     	; 0x751a <handleSerialCommand+0x408>
			printf("%hu",i);
		}
	}
	if(!found) printf("None");
    754e:	21 11       	cpse	r18, r1
    7550:	08 c0       	rjmp	.+16     	; 0x7562 <handleSerialCommand+0x450>
    7552:	84 e5       	ldi	r24, 0x54	; 84
    7554:	92 e2       	ldi	r25, 0x22	; 34
    7556:	9f 93       	push	r25
    7558:	8f 93       	push	r24
    755a:	0e 94 f4 4f 	call	0x9fe8	; 0x9fe8 <printf>
    755e:	0f 90       	pop	r0
    7560:	0f 90       	pop	r0
	printf("\r\n");
    7562:	85 e7       	ldi	r24, 0x75	; 117
    7564:	90 e2       	ldi	r25, 0x20	; 32
    7566:	0e 94 36 50 	call	0xa06c	; 0xa06c <puts>
    756a:	ef cd       	rjmp	.-1058   	; 0x714a <handleSerialCommand+0x38>
/*
 * No arguments.
 * Calls the stop_move function; the droplet stops moving.
 */
static void handle_stop_walk(void){
	stopMove();
    756c:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <stopMove>
    7570:	ec cd       	rjmp	.-1064   	; 0x714a <handleSerialCommand+0x38>

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    7572:	8e 01       	movw	r16, r28
    7574:	0f 5b       	subi	r16, 0xBF	; 191
    7576:	1f 4f       	sbci	r17, 0xFF	; 255
    7578:	f8 01       	movw	r30, r16
    757a:	a5 cf       	rjmp	.-182    	; 0x74c6 <handleSerialCommand+0x3b4>
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    757c:	40 90 7a 0a 	lds	r4, 0x0A7A	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    7580:	50 90 7b 0a 	lds	r5, 0x0A7B	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    7584:	60 90 78 0a 	lds	r6, 0x0A78	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    7588:	70 90 79 0a 	lds	r7, 0x0A79	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    758c:	80 90 78 09 	lds	r8, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    7590:	90 90 79 09 	lds	r9, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
 * Same as set_motors, described above, except that the motor settings currently stored in volatile 
 * memory are changed by the indicated values.
 */
static void handle_adjust_motors(char* command_args){
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
    7594:	4f ef       	ldi	r20, 0xFF	; 255
    7596:	60 e0       	ldi	r22, 0x00	; 0
    7598:	80 e0       	ldi	r24, 0x00	; 0
    759a:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
	const char delim[2] = " ";
    759e:	8e 01       	movw	r16, r28
    75a0:	0f 57       	subi	r16, 0x7F	; 127
    75a2:	1f 4f       	sbci	r17, 0xFF	; 255
    75a4:	80 e2       	ldi	r24, 0x20	; 32
    75a6:	90 e0       	ldi	r25, 0x00	; 0
    75a8:	f8 01       	movw	r30, r16
    75aa:	80 83       	st	Z, r24
    75ac:	91 83       	std	Z+1, r25	; 0x01
	
	char* token = strtok(command_args,delim);
    75ae:	b8 01       	movw	r22, r16
    75b0:	ce 01       	movw	r24, r28
    75b2:	01 96       	adiw	r24, 0x01	; 1
    75b4:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    75b8:	00 97       	sbiw	r24, 0x00	; 0
    75ba:	09 f4       	brne	.+2      	; 0x75be <handleSerialCommand+0x4ac>
    75bc:	3f c2       	rjmp	.+1150   	; 0x7a3c <handleSerialCommand+0x92a>
	uint8_t direction = atoi(token);
    75be:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    75c2:	7c 01       	movw	r14, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}
    75c4:	f7 e0       	ldi	r31, 0x07	; 7
    75c6:	f8 17       	cp	r31, r24
    75c8:	08 f0       	brcs	.+2      	; 0x75cc <handleSerialCommand+0x4ba>
    75ca:	8c c0       	rjmp	.+280    	; 0x76e4 <handleSerialCommand+0x5d2>
    75cc:	ff 24       	eor	r15, r15
    75ce:	ff 92       	push	r15
    75d0:	ef 92       	push	r14
    75d2:	84 e8       	ldi	r24, 0x84	; 132
    75d4:	9d e0       	ldi	r25, 0x0D	; 13
    75d6:	9f 93       	push	r25
    75d8:	8f 93       	push	r24
    75da:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    75de:	0f 90       	pop	r0
    75e0:	0f 90       	pop	r0
    75e2:	0f 90       	pop	r0
    75e4:	0f 90       	pop	r0
    75e6:	b1 cd       	rjmp	.-1182   	; 0x714a <handleSerialCommand+0x38>
 * Adjusts the (volatile-memory-copy) walking distance settings for <dir>; the value should
 * be the distance in mm that the robot travels per thousand steps taken. For spinning
 * directions (6 & 7), the distance is in degrees.
 */
static void handle_set_mm_per_kilostep(char* command_args){
	const char delim[2] = " ";
    75e8:	80 e2       	ldi	r24, 0x20	; 32
    75ea:	90 e0       	ldi	r25, 0x00	; 0
    75ec:	cf 57       	subi	r28, 0x7F	; 127
    75ee:	df 4f       	sbci	r29, 0xFF	; 255
    75f0:	88 83       	st	Y, r24
    75f2:	99 83       	std	Y+1, r25	; 0x01
    75f4:	c1 58       	subi	r28, 0x81	; 129
    75f6:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    75f8:	be 01       	movw	r22, r28
    75fa:	6f 57       	subi	r22, 0x7F	; 127
    75fc:	7f 4f       	sbci	r23, 0xFF	; 255
    75fe:	ce 01       	movw	r24, r28
    7600:	01 96       	adiw	r24, 0x01	; 1
    7602:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	uint8_t direction = token[0]-'0';
    7606:	fc 01       	movw	r30, r24
    7608:	10 81       	ld	r17, Z
    760a:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    760c:	be 01       	movw	r22, r28
    760e:	6f 57       	subi	r22, 0x7F	; 127
    7610:	7f 4f       	sbci	r23, 0xFF	; 255
    7612:	80 e0       	ldi	r24, 0x00	; 0
    7614:	90 e0       	ldi	r25, 0x00	; 0
    7616:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	uint16_t mm_per_kilostep = atoi(token);
    761a:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>

	setMMperKilostep(direction, mm_per_kilostep);
    761e:	bc 01       	movw	r22, r24
    7620:	81 2f       	mov	r24, r17
    7622:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <setMMperKilostep>
    7626:	91 cd       	rjmp	.-1246   	; 0x714a <handleSerialCommand+0x38>
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
    7628:	b8 01       	movw	r22, r16
    762a:	80 e0       	ldi	r24, 0x00	; 0
    762c:	90 e0       	ldi	r25, 0x00	; 0
    762e:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    7632:	00 97       	sbiw	r24, 0x00	; 0
    7634:	09 f4       	brne	.+2      	; 0x7638 <handleSerialCommand+0x526>
    7636:	e6 c1       	rjmp	.+972    	; 0x7a04 <handleSerialCommand+0x8f2>
    7638:	ff 24       	eor	r15, r15
	motorAdjusts[direction][0] = atoi(token);
    763a:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    763e:	97 01       	movw	r18, r14
    7640:	22 0f       	add	r18, r18
    7642:	33 1f       	adc	r19, r19
    7644:	2e 0d       	add	r18, r14
    7646:	3f 1d       	adc	r19, r15
    7648:	22 0f       	add	r18, r18
    764a:	33 1f       	adc	r19, r19
    764c:	a9 01       	movw	r20, r18
    764e:	4f 51       	subi	r20, 0x1F	; 31
    7650:	5a 4d       	sbci	r21, 0xDA	; 218
    7652:	6a 01       	movw	r12, r20
    7654:	fa 01       	movw	r30, r20
    7656:	80 83       	st	Z, r24
    7658:	91 83       	std	Z+1, r25	; 0x01
	
	token = strtok(NULL,delim);
    765a:	b8 01       	movw	r22, r16
    765c:	80 e0       	ldi	r24, 0x00	; 0
    765e:	90 e0       	ldi	r25, 0x00	; 0
    7660:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7664:	00 97       	sbiw	r24, 0x00	; 0
    7666:	09 f4       	brne	.+2      	; 0x766a <handleSerialCommand+0x558>
    7668:	c4 c1       	rjmp	.+904    	; 0x79f2 <handleSerialCommand+0x8e0>
	motorAdjusts[direction][1] = atoi(token);
    766a:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    766e:	26 01       	movw	r4, r12
    7670:	f2 e0       	ldi	r31, 0x02	; 2
    7672:	4f 0e       	add	r4, r31
    7674:	51 1c       	adc	r5, r1
    7676:	f6 01       	movw	r30, r12
    7678:	82 83       	std	Z+2, r24	; 0x02
    767a:	93 83       	std	Z+3, r25	; 0x03
	
	token = strtok(NULL,delim);
    767c:	b8 01       	movw	r22, r16
    767e:	80 e0       	ldi	r24, 0x00	; 0
    7680:	90 e0       	ldi	r25, 0x00	; 0
    7682:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    7686:	00 97       	sbiw	r24, 0x00	; 0
    7688:	09 f4       	brne	.+2      	; 0x768c <handleSerialCommand+0x57a>
    768a:	e1 c1       	rjmp	.+962    	; 0x7a4e <handleSerialCommand+0x93c>
	motorAdjusts[direction][2] = atoi(token);	
    768c:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    7690:	f6 01       	movw	r30, r12
    7692:	84 83       	std	Z+4, r24	; 0x04
    7694:	95 83       	std	Z+5, r25	; 0x05

	printf_P(PSTR("Got set_motors command. direction: %hu, vals: (%d, %d, %d)\r\n"), direction, motorAdjusts[direction][0], motorAdjusts[direction][1], motorAdjusts[direction][2]);
    7696:	9f 93       	push	r25
    7698:	8f 93       	push	r24
    769a:	f2 01       	movw	r30, r4
    769c:	81 81       	ldd	r24, Z+1	; 0x01
    769e:	8f 93       	push	r24
    76a0:	f6 01       	movw	r30, r12
    76a2:	82 81       	ldd	r24, Z+2	; 0x02
    76a4:	8f 93       	push	r24
    76a6:	81 81       	ldd	r24, Z+1	; 0x01
    76a8:	8f 93       	push	r24
    76aa:	80 81       	ld	r24, Z
    76ac:	8f 93       	push	r24
    76ae:	ff 92       	push	r15
    76b0:	ef 92       	push	r14
    76b2:	84 ec       	ldi	r24, 0xC4	; 196
    76b4:	9d e0       	ldi	r25, 0x0D	; 13
    76b6:	9f 93       	push	r25
    76b8:	8f 93       	push	r24
    76ba:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
	setRGB(r,g,b);
    76be:	48 2d       	mov	r20, r8
    76c0:	6a 2d       	mov	r22, r10
    76c2:	86 2d       	mov	r24, r6
    76c4:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    76c8:	cd bf       	out	0x3d, r28	; 61
    76ca:	de bf       	out	0x3e, r29	; 62
    76cc:	3e cd       	rjmp	.-1412   	; 0x714a <handleSerialCommand+0x38>
/*
 * No arguments.
 * Calls broadcast_rnb_data.
 */
static void handle_rnb_broadcast(void){
	scheduleTask(5,broadcastRnbData,NULL);
    76ce:	20 e0       	ldi	r18, 0x00	; 0
    76d0:	30 e0       	ldi	r19, 0x00	; 0
    76d2:	46 e5       	ldi	r20, 0x56	; 86
    76d4:	5e e2       	ldi	r21, 0x2E	; 46
    76d6:	65 e0       	ldi	r22, 0x05	; 5
    76d8:	70 e0       	ldi	r23, 0x00	; 0
    76da:	80 e0       	ldi	r24, 0x00	; 0
    76dc:	90 e0       	ldi	r25, 0x00	; 0
    76de:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <scheduleTask>
    76e2:	33 cd       	rjmp	.-1434   	; 0x714a <handleSerialCommand+0x38>
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
    76e4:	b8 01       	movw	r22, r16
    76e6:	80 e0       	ldi	r24, 0x00	; 0
    76e8:	90 e0       	ldi	r25, 0x00	; 0
    76ea:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    76ee:	00 97       	sbiw	r24, 0x00	; 0
    76f0:	09 f4       	brne	.+2      	; 0x76f4 <handleSerialCommand+0x5e2>
    76f2:	bf c1       	rjmp	.+894    	; 0x7a72 <handleSerialCommand+0x960>
    76f4:	ff 24       	eor	r15, r15
	if(motorAdjusts[direction][0]>=0)
    76f6:	67 01       	movw	r12, r14
    76f8:	cc 0c       	add	r12, r12
    76fa:	dd 1c       	adc	r13, r13
    76fc:	96 01       	movw	r18, r12
    76fe:	2e 0d       	add	r18, r14
    7700:	3f 1d       	adc	r19, r15
    7702:	22 0f       	add	r18, r18
    7704:	33 1f       	adc	r19, r19
    7706:	a9 01       	movw	r20, r18
    7708:	4f 51       	subi	r20, 0x1F	; 31
    770a:	5a 4d       	sbci	r21, 0xDA	; 218
    770c:	1a 01       	movw	r2, r20
    770e:	fa 01       	movw	r30, r20
    7710:	a0 80       	ld	r10, Z
    7712:	b1 80       	ldd	r11, Z+1	; 0x01
    7714:	b7 fc       	sbrc	r11, 7
    7716:	fb c0       	rjmp	.+502    	; 0x790e <handleSerialCommand+0x7fc>
		motorAdjusts[direction][0]+= atoi(token);
    7718:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    771c:	8a 0d       	add	r24, r10
    771e:	9b 1d       	adc	r25, r11
    7720:	f1 01       	movw	r30, r2
    7722:	80 83       	st	Z, r24
    7724:	91 83       	std	Z+1, r25	; 0x01
	else
		motorAdjusts[direction][0]-= atoi(token);
	
	token = strtok(NULL,delim);
    7726:	b8 01       	movw	r22, r16
    7728:	80 e0       	ldi	r24, 0x00	; 0
    772a:	90 e0       	ldi	r25, 0x00	; 0
    772c:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7730:	00 97       	sbiw	r24, 0x00	; 0
    7732:	09 f4       	brne	.+2      	; 0x7736 <handleSerialCommand+0x624>
    7734:	95 c1       	rjmp	.+810    	; 0x7a60 <handleSerialCommand+0x94e>
	if(motorAdjusts[direction][1]>=0)
    7736:	96 01       	movw	r18, r12
    7738:	2e 0d       	add	r18, r14
    773a:	3f 1d       	adc	r19, r15
    773c:	22 0f       	add	r18, r18
    773e:	33 1f       	adc	r19, r19
    7740:	a9 01       	movw	r20, r18
    7742:	4f 51       	subi	r20, 0x1F	; 31
    7744:	5a 4d       	sbci	r21, 0xDA	; 218
    7746:	1a 01       	movw	r2, r20
    7748:	fa 01       	movw	r30, r20
    774a:	a2 80       	ldd	r10, Z+2	; 0x02
    774c:	b3 80       	ldd	r11, Z+3	; 0x03
    774e:	b7 fc       	sbrc	r11, 7
    7750:	d6 c0       	rjmp	.+428    	; 0x78fe <handleSerialCommand+0x7ec>
	motorAdjusts[direction][1]+= atoi(token);
    7752:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    7756:	8a 0d       	add	r24, r10
    7758:	9b 1d       	adc	r25, r11
    775a:	f1 01       	movw	r30, r2
    775c:	82 83       	std	Z+2, r24	; 0x02
    775e:	93 83       	std	Z+3, r25	; 0x03
	else
	motorAdjusts[direction][1]-= atoi(token);
	
	token = strtok(NULL,delim);
    7760:	b8 01       	movw	r22, r16
    7762:	80 e0       	ldi	r24, 0x00	; 0
    7764:	90 e0       	ldi	r25, 0x00	; 0
    7766:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    776a:	00 97       	sbiw	r24, 0x00	; 0
    776c:	09 f4       	brne	.+2      	; 0x7770 <handleSerialCommand+0x65e>
    776e:	8a c1       	rjmp	.+788    	; 0x7a84 <handleSerialCommand+0x972>
	if(motorAdjusts[direction][2]>=0)
    7770:	96 01       	movw	r18, r12
    7772:	2e 0d       	add	r18, r14
    7774:	3f 1d       	adc	r19, r15
    7776:	22 0f       	add	r18, r18
    7778:	33 1f       	adc	r19, r19
    777a:	a9 01       	movw	r20, r18
    777c:	4f 51       	subi	r20, 0x1F	; 31
    777e:	5a 4d       	sbci	r21, 0xDA	; 218
    7780:	5a 01       	movw	r10, r20
    7782:	fa 01       	movw	r30, r20
    7784:	04 81       	ldd	r16, Z+4	; 0x04
    7786:	15 81       	ldd	r17, Z+5	; 0x05
    7788:	17 fd       	sbrc	r17, 7
    778a:	45 c1       	rjmp	.+650    	; 0x7a16 <handleSerialCommand+0x904>
	motorAdjusts[direction][2]+= atoi(token);
    778c:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    7790:	80 0f       	add	r24, r16
    7792:	91 1f       	adc	r25, r17
    7794:	f5 01       	movw	r30, r10
    7796:	84 83       	std	Z+4, r24	; 0x04
    7798:	95 83       	std	Z+5, r25	; 0x05
	else
	motorAdjusts[direction][2]-= atoi(token);

	printf_P(PSTR("Got adjust_motors command. direction: %hu, New Settings: (%d, %d, %d)\r\n"), direction, motorAdjusts[direction][0], motorAdjusts[direction][1], motorAdjusts[direction][2]);
    779a:	9f 93       	push	r25
    779c:	8f 93       	push	r24
    779e:	f6 01       	movw	r30, r12
    77a0:	ee 0d       	add	r30, r14
    77a2:	ff 1d       	adc	r31, r15
    77a4:	ee 0f       	add	r30, r30
    77a6:	ff 1f       	adc	r31, r31
    77a8:	ef 51       	subi	r30, 0x1F	; 31
    77aa:	fa 4d       	sbci	r31, 0xDA	; 218
    77ac:	83 81       	ldd	r24, Z+3	; 0x03
    77ae:	8f 93       	push	r24
    77b0:	82 81       	ldd	r24, Z+2	; 0x02
    77b2:	8f 93       	push	r24
    77b4:	81 81       	ldd	r24, Z+1	; 0x01
    77b6:	8f 93       	push	r24
    77b8:	80 81       	ld	r24, Z
    77ba:	8f 93       	push	r24
    77bc:	ff 92       	push	r15
    77be:	ef 92       	push	r14
    77c0:	8c ec       	ldi	r24, 0xCC	; 204
    77c2:	9c e0       	ldi	r25, 0x0C	; 12
    77c4:	9f 93       	push	r25
    77c6:	8f 93       	push	r24
    77c8:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
	setRGB(r,g,b);
    77cc:	48 2d       	mov	r20, r8
    77ce:	66 2d       	mov	r22, r6
    77d0:	84 2d       	mov	r24, r4
    77d2:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
    77d6:	cd bf       	out	0x3d, r28	; 61
    77d8:	de bf       	out	0x3e, r29	; 62
    77da:	b7 cc       	rjmp	.-1682   	; 0x714a <handleSerialCommand+0x38>
 *     set_led r 255           //Full red without effecting green or blue.
 *     set_led br 127 64       //Half-strength blue, quarter-strength red. (order is flexible)
 *     set_led hsv 0 255 255   //Set to fully saturated and bright hue 0 (red).
 */
static void handle_set_led(char* command_args){
	const char delim[2] = " ";
    77dc:	8e 01       	movw	r16, r28
    77de:	0f 57       	subi	r16, 0x7F	; 127
    77e0:	1f 4f       	sbci	r17, 0xFF	; 255
    77e2:	80 e2       	ldi	r24, 0x20	; 32
    77e4:	90 e0       	ldi	r25, 0x00	; 0
    77e6:	f8 01       	movw	r30, r16
    77e8:	80 83       	st	Z, r24
    77ea:	91 83       	std	Z+1, r25	; 0x01
	char* token;	
	char* colors = strtok(command_args,delim);
    77ec:	b8 01       	movw	r22, r16
    77ee:	ce 01       	movw	r24, r28
    77f0:	01 96       	adiw	r24, 0x01	; 1
    77f2:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
    77f6:	7c 01       	movw	r14, r24
	int length = strlen(colors);
    77f8:	fc 01       	movw	r30, r24
    77fa:	01 90       	ld	r0, Z+
    77fc:	00 20       	and	r0, r0
    77fe:	e9 f7       	brne	.-6      	; 0x77fa <handleSerialCommand+0x6e8>
    7800:	31 97       	sbiw	r30, 0x01	; 1
    7802:	6f 01       	movw	r12, r30
    7804:	c8 1a       	sub	r12, r24
    7806:	d9 0a       	sbc	r13, r25

	if(strcmp(colors,"hsv")==0){
    7808:	69 e5       	ldi	r22, 0x59	; 89
    780a:	72 e2       	ldi	r23, 0x22	; 34
    780c:	0e 94 12 4f 	call	0x9e24	; 0x9e24 <strcmp>
    7810:	89 2b       	or	r24, r25
    7812:	09 f4       	brne	.+2      	; 0x7816 <handleSerialCommand+0x704>
    7814:	84 c0       	rjmp	.+264    	; 0x791e <handleSerialCommand+0x80c>
		sVal = atoi(token);
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		setHSV(hVal,sVal,vVal);
	}else{
		for(int i=0 ; i < length ; i++){
    7816:	1c 14       	cp	r1, r12
    7818:	1d 04       	cpc	r1, r13
    781a:	0c f0       	brlt	.+2      	; 0x781e <handleSerialCommand+0x70c>
    781c:	96 cc       	rjmp	.-1748   	; 0x714a <handleSerialCommand+0x38>
    781e:	ce 0c       	add	r12, r14
    7820:	df 1c       	adc	r13, r15
    7822:	10 c0       	rjmp	.+32     	; 0x7844 <handleSerialCommand+0x732>
			token = strtok(NULL,delim);
			if(colors[i]=='r'){
				setRedLED(atoi(token));
			}else if(colors[i]=='g'){
    7824:	27 36       	cpi	r18, 0x67	; 103
    7826:	01 f1       	breq	.+64     	; 0x7868 <handleSerialCommand+0x756>
				setGreenLED(atoi(token));
			}else if(colors[i]=='b'){
    7828:	22 36       	cpi	r18, 0x62	; 98
    782a:	09 f0       	breq	.+2      	; 0x782e <handleSerialCommand+0x71c>
    782c:	8e cc       	rjmp	.-1764   	; 0x714a <handleSerialCommand+0x38>
				setBlueLED(atoi(token));
    782e:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    7832:	99 27       	eor	r25, r25
    7834:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    7838:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
		sVal = atoi(token);
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		setHSV(hVal,sVal,vVal);
	}else{
		for(int i=0 ; i < length ; i++){
    783c:	ec 14       	cp	r14, r12
    783e:	fd 04       	cpc	r15, r13
    7840:	09 f4       	brne	.+2      	; 0x7844 <handleSerialCommand+0x732>
    7842:	83 cc       	rjmp	.-1786   	; 0x714a <handleSerialCommand+0x38>
			token = strtok(NULL,delim);
    7844:	b8 01       	movw	r22, r16
    7846:	80 e0       	ldi	r24, 0x00	; 0
    7848:	90 e0       	ldi	r25, 0x00	; 0
    784a:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
			if(colors[i]=='r'){
    784e:	f7 01       	movw	r30, r14
    7850:	21 91       	ld	r18, Z+
    7852:	7f 01       	movw	r14, r30
    7854:	22 37       	cpi	r18, 0x72	; 114
    7856:	31 f7       	brne	.-52     	; 0x7824 <handleSerialCommand+0x712>
				setRedLED(atoi(token));
    7858:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    785c:	99 27       	eor	r25, r25
    785e:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    7862:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
    7866:	ea cf       	rjmp	.-44     	; 0x783c <handleSerialCommand+0x72a>
			}else if(colors[i]=='g'){
				setGreenLED(atoi(token));
    7868:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    786c:	99 27       	eor	r25, r25
    786e:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    7872:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
    7876:	e2 cf       	rjmp	.-60     	; 0x783c <handleSerialCommand+0x72a>
/*
 * No arguments.
 * prints this Droplet's ID.
 */
static void handle_get_id(void){
	printf_P(PSTR("My ID is: %04X\r\n"),getDropletID());
    7878:	80 91 ed 23 	lds	r24, 0x23ED	; 0x8023ed <droplet_ID+0x1>
    787c:	8f 93       	push	r24
    787e:	80 91 ec 23 	lds	r24, 0x23EC	; 0x8023ec <droplet_ID>
    7882:	8f 93       	push	r24
    7884:	8b eb       	ldi	r24, 0xBB	; 187
    7886:	9c e0       	ldi	r25, 0x0C	; 12
    7888:	9f 93       	push	r25
    788a:	8f 93       	push	r24
    788c:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    7890:	0f 90       	pop	r0
    7892:	0f 90       	pop	r0
    7894:	0f 90       	pop	r0
    7896:	0f 90       	pop	r0
    7898:	58 cc       	rjmp	.-1872   	; 0x714a <handleSerialCommand+0x38>
/*
 * No arguments.
 * Broadcasts the four-character readable form of this Droplet's ID.
 */
static void handle_broadcast_id(void){
	scheduleTask(5, sendID, NULL);
    789a:	20 e0       	ldi	r18, 0x00	; 0
    789c:	30 e0       	ldi	r19, 0x00	; 0
    789e:	4c e5       	ldi	r20, 0x5C	; 92
    78a0:	58 e3       	ldi	r21, 0x38	; 56
    78a2:	65 e0       	ldi	r22, 0x05	; 5
    78a4:	70 e0       	ldi	r23, 0x00	; 0
    78a6:	80 e0       	ldi	r24, 0x00	; 0
    78a8:	90 e0       	ldi	r25, 0x00	; 0
    78aa:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <scheduleTask>
    78ae:	4d cc       	rjmp	.-1894   	; 0x714a <handleSerialCommand+0x38>
 * Example:
 *     cmd reset
 *     All receiving Droplets will act as if they had 'reset' typed to them over the terminal, and reset.
 */
static void handle_cmd(char* command_args){
	printf_P(PSTR("Broadcasting command: \"%s\", of length %i.\r\n"), (uint8_t*)command_args, strlen(command_args));
    78b0:	8e 01       	movw	r16, r28
    78b2:	0f 5f       	subi	r16, 0xFF	; 255
    78b4:	1f 4f       	sbci	r17, 0xFF	; 255
    78b6:	f8 01       	movw	r30, r16
    78b8:	01 90       	ld	r0, Z+
    78ba:	00 20       	and	r0, r0
    78bc:	e9 f7       	brne	.-6      	; 0x78b8 <handleSerialCommand+0x7a6>
    78be:	31 97       	sbiw	r30, 0x01	; 1
    78c0:	e0 1b       	sub	r30, r16
    78c2:	f1 0b       	sbc	r31, r17
    78c4:	ff 93       	push	r31
    78c6:	ef 93       	push	r30
    78c8:	1f 93       	push	r17
    78ca:	0f 93       	push	r16
    78cc:	8f e8       	ldi	r24, 0x8F	; 143
    78ce:	9c e0       	ldi	r25, 0x0C	; 12
    78d0:	9f 93       	push	r25
    78d2:	8f 93       	push	r24
    78d4:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
	irCmd(ALL_DIRS, command_args,strlen(command_args));
    78d8:	f8 01       	movw	r30, r16
    78da:	01 90       	ld	r0, Z+
    78dc:	00 20       	and	r0, r0
    78de:	e9 f7       	brne	.-6      	; 0x78da <handleSerialCommand+0x7c8>
    78e0:	31 97       	sbiw	r30, 0x01	; 1
    78e2:	af 01       	movw	r20, r30
    78e4:	40 1b       	sub	r20, r16
    78e6:	51 0b       	sbc	r21, r17
    78e8:	b8 01       	movw	r22, r16
    78ea:	8f e3       	ldi	r24, 0x3F	; 63
    78ec:	0e 94 81 13 	call	0x2702	; 0x2702 <irCmd>
    78f0:	0f 90       	pop	r0
    78f2:	0f 90       	pop	r0
    78f4:	0f 90       	pop	r0
    78f6:	0f 90       	pop	r0
    78f8:	0f 90       	pop	r0
    78fa:	0f 90       	pop	r0
    78fc:	26 cc       	rjmp	.-1972   	; 0x714a <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
	if(motorAdjusts[direction][1]>=0)
	motorAdjusts[direction][1]+= atoi(token);
	else
	motorAdjusts[direction][1]-= atoi(token);
    78fe:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    7902:	a8 1a       	sub	r10, r24
    7904:	b9 0a       	sbc	r11, r25
    7906:	f1 01       	movw	r30, r2
    7908:	a2 82       	std	Z+2, r10	; 0x02
    790a:	b3 82       	std	Z+3, r11	; 0x03
    790c:	29 cf       	rjmp	.-430    	; 0x7760 <handleSerialCommand+0x64e>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
	if(motorAdjusts[direction][0]>=0)
		motorAdjusts[direction][0]+= atoi(token);
	else
		motorAdjusts[direction][0]-= atoi(token);
    790e:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    7912:	a8 1a       	sub	r10, r24
    7914:	b9 0a       	sbc	r11, r25
    7916:	f1 01       	movw	r30, r2
    7918:	a0 82       	st	Z, r10
    791a:	b1 82       	std	Z+1, r11	; 0x01
    791c:	04 cf       	rjmp	.-504    	; 0x7726 <handleSerialCommand+0x614>
	int length = strlen(colors);

	if(strcmp(colors,"hsv")==0){
		uint16_t hVal;
		uint8_t sVal, vVal;
		token = strtok(NULL,delim);
    791e:	b8 01       	movw	r22, r16
    7920:	80 e0       	ldi	r24, 0x00	; 0
    7922:	90 e0       	ldi	r25, 0x00	; 0
    7924:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
		hVal = atoi(token);
    7928:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    792c:	7c 01       	movw	r14, r24
		token = strtok(NULL,delim);
    792e:	b8 01       	movw	r22, r16
    7930:	80 e0       	ldi	r24, 0x00	; 0
    7932:	90 e0       	ldi	r25, 0x00	; 0
    7934:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
		sVal = atoi(token);
    7938:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    793c:	d8 2e       	mov	r13, r24
		token = strtok(NULL,delim);	
    793e:	b8 01       	movw	r22, r16
    7940:	80 e0       	ldi	r24, 0x00	; 0
    7942:	90 e0       	ldi	r25, 0x00	; 0
    7944:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <strtok>
		vVal = atoi(token);
    7948:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
		setHSV(hVal,sVal,vVal);
    794c:	48 2f       	mov	r20, r24
    794e:	6d 2d       	mov	r22, r13
    7950:	c7 01       	movw	r24, r14
    7952:	0e 94 9e 30 	call	0x613c	; 0x613c <setHSV>
    7956:	f9 cb       	rjmp	.-2062   	; 0x714a <handleSerialCommand+0x38>
 *     tgt_cmd af6a reset
 *     The Droplet with ID 0xAF6A will act as if it had 'reset' typed to it over the terminal, and reset. Other
 *     Droplets will do nothing.)
 */
static void handle_targeted_cmd(char* command_args){
	uint8_t loc = strcspn(command_args, " ");
    7958:	68 e8       	ldi	r22, 0x88	; 136
    795a:	70 e2       	ldi	r23, 0x20	; 32
    795c:	ce 01       	movw	r24, r28
    795e:	01 96       	adiw	r24, 0x01	; 1
    7960:	0e 94 22 4f 	call	0x9e44	; 0x9e44 <strcspn>
    7964:	8c 01       	movw	r16, r24
    7966:	11 27       	eor	r17, r17
	char targetString[5];
	char cmdString[32];
	
	strncpy(targetString, command_args, loc);
    7968:	a8 01       	movw	r20, r16
    796a:	be 01       	movw	r22, r28
    796c:	6f 5f       	subi	r22, 0xFF	; 255
    796e:	7f 4f       	sbci	r23, 0xFF	; 255
    7970:	ce 01       	movw	r24, r28
    7972:	8f 55       	subi	r24, 0x5F	; 95
    7974:	9f 4f       	sbci	r25, 0xFF	; 255
    7976:	0e 94 31 4f 	call	0x9e62	; 0x9e62 <strncpy>
	strcpy(cmdString, command_args+loc+1);
    797a:	b8 01       	movw	r22, r16
    797c:	6f 5f       	subi	r22, 0xFF	; 255
    797e:	7f 4f       	sbci	r23, 0xFF	; 255
    7980:	21 e0       	ldi	r18, 0x01	; 1
    7982:	30 e0       	ldi	r19, 0x00	; 0
    7984:	2c 0f       	add	r18, r28
    7986:	3d 1f       	adc	r19, r29
    7988:	62 0f       	add	r22, r18
    798a:	73 1f       	adc	r23, r19
    798c:	8e 01       	movw	r16, r28
    798e:	0f 57       	subi	r16, 0x7F	; 127
    7990:	1f 4f       	sbci	r17, 0xFF	; 255
    7992:	c8 01       	movw	r24, r16
    7994:	0e 94 1b 4f 	call	0x9e36	; 0x9e36 <strcpy>
	
	uint16_t target = strtoul(targetString, NULL, 16);
    7998:	40 e1       	ldi	r20, 0x10	; 16
    799a:	50 e0       	ldi	r21, 0x00	; 0
    799c:	60 e0       	ldi	r22, 0x00	; 0
    799e:	70 e0       	ldi	r23, 0x00	; 0
    79a0:	ce 01       	movw	r24, r28
    79a2:	8f 55       	subi	r24, 0x5F	; 95
    79a4:	9f 4f       	sbci	r25, 0xFF	; 255
    79a6:	0e 94 d2 4c 	call	0x99a4	; 0x99a4 <strtoul>
    79aa:	7b 01       	movw	r14, r22
	printf_P(PSTR("Broadcasting command to %04X: \"%s\", of length %i.\r\n"), target, (uint8_t*)cmdString, strlen(cmdString));
    79ac:	f8 01       	movw	r30, r16
    79ae:	01 90       	ld	r0, Z+
    79b0:	00 20       	and	r0, r0
    79b2:	e9 f7       	brne	.-6      	; 0x79ae <handleSerialCommand+0x89c>
    79b4:	31 97       	sbiw	r30, 0x01	; 1
    79b6:	e0 1b       	sub	r30, r16
    79b8:	f1 0b       	sbc	r31, r17
    79ba:	ff 93       	push	r31
    79bc:	ef 93       	push	r30
    79be:	1f 93       	push	r17
    79c0:	0f 93       	push	r16
    79c2:	ff 92       	push	r15
    79c4:	6f 93       	push	r22
    79c6:	8b e5       	ldi	r24, 0x5B	; 91
    79c8:	9c e0       	ldi	r25, 0x0C	; 12
    79ca:	9f 93       	push	r25
    79cc:	8f 93       	push	r24
    79ce:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
	irTargetedCmd(ALL_DIRS, cmdString,strlen(cmdString), target);
    79d2:	f8 01       	movw	r30, r16
    79d4:	01 90       	ld	r0, Z+
    79d6:	00 20       	and	r0, r0
    79d8:	e9 f7       	brne	.-6      	; 0x79d4 <handleSerialCommand+0x8c2>
    79da:	31 97       	sbiw	r30, 0x01	; 1
    79dc:	af 01       	movw	r20, r30
    79de:	40 1b       	sub	r20, r16
    79e0:	51 0b       	sbc	r21, r17
    79e2:	97 01       	movw	r18, r14
    79e4:	b8 01       	movw	r22, r16
    79e6:	8f e3       	ldi	r24, 0x3F	; 63
    79e8:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <irTargetedCmd>
    79ec:	cd bf       	out	0x3d, r28	; 61
    79ee:	de bf       	out	0x3e, r29	; 62
    79f0:	ac cb       	rjmp	.-2216   	; 0x714a <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
	motorAdjusts[direction][0] = atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    79f2:	86 e2       	ldi	r24, 0x26	; 38
    79f4:	9e e0       	ldi	r25, 0x0E	; 14
    79f6:	9f 93       	push	r25
    79f8:	8f 93       	push	r24
    79fa:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    79fe:	0f 90       	pop	r0
    7a00:	0f 90       	pop	r0
    7a02:	a3 cb       	rjmp	.-2234   	; 0x714a <handleSerialCommand+0x38>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    7a04:	8c e4       	ldi	r24, 0x4C	; 76
    7a06:	9e e0       	ldi	r25, 0x0E	; 14
    7a08:	9f 93       	push	r25
    7a0a:	8f 93       	push	r24
    7a0c:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    7a10:	0f 90       	pop	r0
    7a12:	0f 90       	pop	r0
    7a14:	9a cb       	rjmp	.-2252   	; 0x714a <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
	if(motorAdjusts[direction][2]>=0)
	motorAdjusts[direction][2]+= atoi(token);
	else
	motorAdjusts[direction][2]-= atoi(token);
    7a16:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    7a1a:	98 01       	movw	r18, r16
    7a1c:	28 1b       	sub	r18, r24
    7a1e:	39 0b       	sbc	r19, r25
    7a20:	c9 01       	movw	r24, r18
    7a22:	f5 01       	movw	r30, r10
    7a24:	24 83       	std	Z+4, r18	; 0x04
    7a26:	35 83       	std	Z+5, r19	; 0x05
    7a28:	b8 ce       	rjmp	.-656    	; 0x779a <handleSerialCommand+0x688>
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    7a2a:	8c e8       	ldi	r24, 0x8C	; 140
    7a2c:	9e e0       	ldi	r25, 0x0E	; 14
    7a2e:	9f 93       	push	r25
    7a30:	8f 93       	push	r24
    7a32:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    7a36:	0f 90       	pop	r0
    7a38:	0f 90       	pop	r0
    7a3a:	87 cb       	rjmp	.-2290   	; 0x714a <handleSerialCommand+0x38>
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    7a3c:	8f e9       	ldi	r24, 0x9F	; 159
    7a3e:	9d e0       	ldi	r25, 0x0D	; 13
    7a40:	9f 93       	push	r25
    7a42:	8f 93       	push	r24
    7a44:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    7a48:	0f 90       	pop	r0
    7a4a:	0f 90       	pop	r0
    7a4c:	7e cb       	rjmp	.-2308   	; 0x714a <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
	motorAdjusts[direction][1] = atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    7a4e:	81 e0       	ldi	r24, 0x01	; 1
    7a50:	9e e0       	ldi	r25, 0x0E	; 14
    7a52:	9f 93       	push	r25
    7a54:	8f 93       	push	r24
    7a56:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    7a5a:	0f 90       	pop	r0
    7a5c:	0f 90       	pop	r0
    7a5e:	75 cb       	rjmp	.-2326   	; 0x714a <handleSerialCommand+0x38>
		motorAdjusts[direction][0]+= atoi(token);
	else
		motorAdjusts[direction][0]-= atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7a60:	89 e3       	ldi	r24, 0x39	; 57
    7a62:	9d e0       	ldi	r25, 0x0D	; 13
    7a64:	9f 93       	push	r25
    7a66:	8f 93       	push	r24
    7a68:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    7a6c:	0f 90       	pop	r0
    7a6e:	0f 90       	pop	r0
    7a70:	6c cb       	rjmp	.-2344   	; 0x714a <handleSerialCommand+0x38>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    7a72:	8f e5       	ldi	r24, 0x5F	; 95
    7a74:	9d e0       	ldi	r25, 0x0D	; 13
    7a76:	9f 93       	push	r25
    7a78:	8f 93       	push	r24
    7a7a:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    7a7e:	0f 90       	pop	r0
    7a80:	0f 90       	pop	r0
    7a82:	63 cb       	rjmp	.-2362   	; 0x714a <handleSerialCommand+0x38>
	motorAdjusts[direction][1]+= atoi(token);
	else
	motorAdjusts[direction][1]-= atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    7a84:	84 e1       	ldi	r24, 0x14	; 20
    7a86:	9d e0       	ldi	r25, 0x0D	; 13
    7a88:	9f 93       	push	r25
    7a8a:	8f 93       	push	r24
    7a8c:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    7a90:	0f 90       	pop	r0
    7a92:	0f 90       	pop	r0
    7a94:	5a cb       	rjmp	.-2380   	; 0x714a <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
    7a96:	62 e0       	ldi	r22, 0x02	; 2
    7a98:	7f e0       	ldi	r23, 0x0F	; 15
    7a9a:	c8 01       	movw	r24, r16
    7a9c:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    7aa0:	89 2b       	or	r24, r25
    7aa2:	09 f4       	brne	.+2      	; 0x7aa6 <handleSerialCommand+0x994>
    7aa4:	00 c1       	rjmp	.+512    	; 0x7ca6 <handleSerialCommand+0xb94>
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
    7aa6:	6d ee       	ldi	r22, 0xED	; 237
    7aa8:	7e e0       	ldi	r23, 0x0E	; 14
    7aaa:	c8 01       	movw	r24, r16
    7aac:	0e 94 f1 4e 	call	0x9de2	; 0x9de2 <strcmp_P>
    7ab0:	89 2b       	or	r24, r25
    7ab2:	09 f4       	brne	.+2      	; 0x7ab6 <handleSerialCommand+0x9a4>
    7ab4:	f3 c0       	rjmp	.+486    	; 0x7c9c <handleSerialCommand+0xb8a>
																		printMotorValues();
																		printDistPerStep();																	
		}else if(command_word[0] == 'S'){
    7ab6:	f8 01       	movw	r30, r16
    7ab8:	80 81       	ld	r24, Z
    7aba:	83 35       	cpi	r24, 0x53	; 83
    7abc:	09 f4       	brne	.+2      	; 0x7ac0 <handleSerialCommand+0x9ae>
    7abe:	df c0       	rjmp	.+446    	; 0x7c7e <handleSerialCommand+0xb6c>
			str12 = command_word;
			str12++;
			number_of_hex = atoi(str12);
			reprogramming=1;
			//delayMS(20000);
		}else if(command_word[0] == 'R' && command_word[1] == 0){
    7ac0:	82 35       	cpi	r24, 0x52	; 82
    7ac2:	09 f4       	brne	.+2      	; 0x7ac6 <handleSerialCommand+0x9b4>
    7ac4:	b1 c0       	rjmp	.+354    	; 0x7c28 <handleSerialCommand+0xb16>
			int length = strlen(initial_msg);
			setRGB(255,0,0);
			//delayMS(3000);
			//strcpy(initial_msg, "start");
			irCmd(ALL_DIRS, initial_msg, length);
		}else if(command_word[0] == 'M' && command_word[1] == 0){
    7ac6:	8d 34       	cpi	r24, 0x4D	; 77
    7ac8:	09 f4       	brne	.+2      	; 0x7acc <handleSerialCommand+0x9ba>
    7aca:	83 c0       	rjmp	.+262    	; 0x7bd2 <handleSerialCommand+0xac0>
			strcpy(dataHEX, command_args);
			scheduleTask(100, send_hex, NULL );
		
		}else if(userHandleCommand){ //First, make sure the function is defined
    7acc:	80 e0       	ldi	r24, 0x00	; 0
    7ace:	90 e0       	ldi	r25, 0x00	; 0
    7ad0:	89 2b       	or	r24, r25
    7ad2:	41 f0       	breq	.+16     	; 0x7ae4 <handleSerialCommand+0x9d2>
			if(!userHandleCommand(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
    7ad4:	be 01       	movw	r22, r28
    7ad6:	6f 5f       	subi	r22, 0xFF	; 255
    7ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    7ada:	c8 01       	movw	r24, r16
    7adc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    7ae0:	81 11       	cpse	r24, r1
    7ae2:	33 cb       	rjmp	.-2458   	; 0x714a <handleSerialCommand+0x38>
    7ae4:	1f 93       	push	r17
    7ae6:	0f 93       	push	r16
    7ae8:	87 eb       	ldi	r24, 0xB7	; 183
    7aea:	9f e0       	ldi	r25, 0x0F	; 15
    7aec:	9f 93       	push	r25
    7aee:	8f 93       	push	r24
    7af0:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    7af4:	0f 90       	pop	r0
    7af6:	0f 90       	pop	r0
    7af8:	0f 90       	pop	r0
    7afa:	0f 90       	pop	r0
		}
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}
    7afc:	26 cb       	rjmp	.-2484   	; 0x714a <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
    7afe:	0e 94 96 33 	call	0x672c	; 0x672c <printTaskQueue>
    7b02:	23 cb       	rjmp	.-2490   	; 0x714a <handleSerialCommand+0x38>
 * Behaves the same as the 'msg' command, described above, except the message is broadcast
 * to a specific Droplet with <ID>, and will be ignored by other Droplets. Also, this function
 * does not have a default message.
 */
static void handle_target(char* command_args){
	uint8_t loc = strcspn(command_args, " ");
    7b04:	68 e8       	ldi	r22, 0x88	; 136
    7b06:	70 e2       	ldi	r23, 0x20	; 32
    7b08:	ce 01       	movw	r24, r28
    7b0a:	01 96       	adiw	r24, 0x01	; 1
    7b0c:	0e 94 22 4f 	call	0x9e44	; 0x9e44 <strcspn>
    7b10:	8c 01       	movw	r16, r24
    7b12:	11 27       	eor	r17, r17
	char targetString[5];
	char msgString[32];
	
	strncpy(targetString, command_args, loc);
    7b14:	a8 01       	movw	r20, r16
    7b16:	be 01       	movw	r22, r28
    7b18:	6f 5f       	subi	r22, 0xFF	; 255
    7b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    7b1c:	ce 01       	movw	r24, r28
    7b1e:	8f 55       	subi	r24, 0x5F	; 95
    7b20:	9f 4f       	sbci	r25, 0xFF	; 255
    7b22:	0e 94 31 4f 	call	0x9e62	; 0x9e62 <strncpy>
	strcpy(msgString, command_args+loc);
    7b26:	61 e0       	ldi	r22, 0x01	; 1
    7b28:	70 e0       	ldi	r23, 0x00	; 0
    7b2a:	6c 0f       	add	r22, r28
    7b2c:	7d 1f       	adc	r23, r29
    7b2e:	60 0f       	add	r22, r16
    7b30:	71 1f       	adc	r23, r17
    7b32:	8e 01       	movw	r16, r28
    7b34:	0f 57       	subi	r16, 0x7F	; 127
    7b36:	1f 4f       	sbci	r17, 0xFF	; 255
    7b38:	c8 01       	movw	r24, r16
    7b3a:	0e 94 1b 4f 	call	0x9e36	; 0x9e36 <strcpy>
	
	
	uint16_t target = strtoul(targetString, NULL, 16);
    7b3e:	40 e1       	ldi	r20, 0x10	; 16
    7b40:	50 e0       	ldi	r21, 0x00	; 0
    7b42:	60 e0       	ldi	r22, 0x00	; 0
    7b44:	70 e0       	ldi	r23, 0x00	; 0
    7b46:	ce 01       	movw	r24, r28
    7b48:	8f 55       	subi	r24, 0x5F	; 95
    7b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b4c:	0e 94 d2 4c 	call	0x99a4	; 0x99a4 <strtoul>
	
	//printf("Target: %04X\r\n",target);
	irTargetedSend(ALL_DIRS, msgString,strlen(msgString), target);
    7b50:	f8 01       	movw	r30, r16
    7b52:	01 90       	ld	r0, Z+
    7b54:	00 20       	and	r0, r0
    7b56:	e9 f7       	brne	.-6      	; 0x7b52 <handleSerialCommand+0xa40>
    7b58:	31 97       	sbiw	r30, 0x01	; 1
    7b5a:	af 01       	movw	r20, r30
    7b5c:	40 1b       	sub	r20, r16
    7b5e:	51 0b       	sbc	r21, r17
    7b60:	9b 01       	movw	r18, r22
    7b62:	b8 01       	movw	r22, r16
    7b64:	8f e3       	ldi	r24, 0x3F	; 63
    7b66:	0e 94 89 13 	call	0x2712	; 0x2712 <irTargetedSend>
    7b6a:	ef ca       	rjmp	.-2594   	; 0x714a <handleSerialCommand+0x38>
 *     msg_tst <dir_mask>
 *     <dir_mask>: A direction mask indicating which direction(s) to send the message in.
 * Sends a simple test message in the indicated directions.
 */
static void handle_msg_test(char* command_args){
	uint8_t dir_mask = atoi(command_args);
    7b6c:	ce 01       	movw	r24, r28
    7b6e:	01 96       	adiw	r24, 0x01	; 1
    7b70:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
	char msg[16] = "Unique New York.";
    7b74:	90 e1       	ldi	r25, 0x10	; 16
    7b76:	ef e3       	ldi	r30, 0x3F	; 63
    7b78:	f2 e2       	ldi	r31, 0x22	; 34
    7b7a:	de 01       	movw	r26, r28
    7b7c:	af 57       	subi	r26, 0x7F	; 127
    7b7e:	bf 4f       	sbci	r27, 0xFF	; 255
    7b80:	01 90       	ld	r0, Z+
    7b82:	0d 92       	st	X+, r0
    7b84:	9a 95       	dec	r25
    7b86:	e1 f7       	brne	.-8      	; 0x7b80 <handleSerialCommand+0xa6e>
	
	irSend(dir_mask, msg,16);
    7b88:	40 e1       	ldi	r20, 0x10	; 16
    7b8a:	be 01       	movw	r22, r28
    7b8c:	6f 57       	subi	r22, 0x7F	; 127
    7b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    7b90:	0e 94 8f 13 	call	0x271e	; 0x271e <irSend>
    7b94:	da ca       	rjmp	.-2636   	; 0x714a <handleSerialCommand+0x38>
 *
 * <MSG> will be treated as a string and broadcast over IR.
 * If <MSG> is not present, a simple test string will be broadcast instead.
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
    7b96:	89 81       	ldd	r24, Y+1	; 0x01
    7b98:	88 23       	and	r24, r24
    7b9a:	09 f4       	brne	.+2      	; 0x7b9e <handleSerialCommand+0xa8c>
    7b9c:	42 c0       	rjmp	.+132    	; 0x7c22 <handleSerialCommand+0xb10>
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
    7b9e:	fe 01       	movw	r30, r28
    7ba0:	31 96       	adiw	r30, 0x01	; 1
    7ba2:	df 01       	movw	r26, r30
    7ba4:	0d 90       	ld	r0, X+
    7ba6:	00 20       	and	r0, r0
    7ba8:	e9 f7       	brne	.-6      	; 0x7ba4 <handleSerialCommand+0xa92>
    7baa:	11 97       	sbiw	r26, 0x01	; 1
    7bac:	cd 01       	movw	r24, r26
    7bae:	8e 1b       	sub	r24, r30
    7bb0:	9f 0b       	sbc	r25, r31
    7bb2:	89 32       	cpi	r24, 0x29	; 41
    7bb4:	91 05       	cpc	r25, r1
    7bb6:	18 f5       	brcc	.+70     	; 0x7bfe <handleSerialCommand+0xaec>
    7bb8:	bf 01       	movw	r22, r30
		printf_P(PSTR("Message length was %z chars, which exceeds the maximum of %u"), strlen(command_args), IR_BUFFER_SIZE);
		return;
	}
	irSend(ALL_DIRS, command_args,strlen(command_args));
    7bba:	fb 01       	movw	r30, r22
    7bbc:	01 90       	ld	r0, Z+
    7bbe:	00 20       	and	r0, r0
    7bc0:	e9 f7       	brne	.-6      	; 0x7bbc <handleSerialCommand+0xaaa>
    7bc2:	31 97       	sbiw	r30, 0x01	; 1
    7bc4:	af 01       	movw	r20, r30
    7bc6:	46 1b       	sub	r20, r22
    7bc8:	57 0b       	sbc	r21, r23
    7bca:	8f e3       	ldi	r24, 0x3F	; 63
    7bcc:	0e 94 8f 13 	call	0x271e	; 0x271e <irSend>
    7bd0:	bc ca       	rjmp	.-2696   	; 0x714a <handleSerialCommand+0x38>
			int length = strlen(initial_msg);
			setRGB(255,0,0);
			//delayMS(3000);
			//strcpy(initial_msg, "start");
			irCmd(ALL_DIRS, initial_msg, length);
		}else if(command_word[0] == 'M' && command_word[1] == 0){
    7bd2:	f8 01       	movw	r30, r16
    7bd4:	81 81       	ldd	r24, Z+1	; 0x01
    7bd6:	81 11       	cpse	r24, r1
    7bd8:	79 cf       	rjmp	.-270    	; 0x7acc <handleSerialCommand+0x9ba>
			strcpy(dataHEX, command_args);
    7bda:	be 01       	movw	r22, r28
    7bdc:	6f 5f       	subi	r22, 0xFF	; 255
    7bde:	7f 4f       	sbci	r23, 0xFF	; 255
    7be0:	87 e3       	ldi	r24, 0x37	; 55
    7be2:	94 e2       	ldi	r25, 0x24	; 36
    7be4:	0e 94 1b 4f 	call	0x9e36	; 0x9e36 <strcpy>
			scheduleTask(100, send_hex, NULL );
    7be8:	20 e0       	ldi	r18, 0x00	; 0
    7bea:	30 e0       	ldi	r19, 0x00	; 0
    7bec:	4d e4       	ldi	r20, 0x4D	; 77
    7bee:	59 e0       	ldi	r21, 0x09	; 9
    7bf0:	64 e6       	ldi	r22, 0x64	; 100
    7bf2:	70 e0       	ldi	r23, 0x00	; 0
    7bf4:	80 e0       	ldi	r24, 0x00	; 0
    7bf6:	90 e0       	ldi	r25, 0x00	; 0
    7bf8:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <scheduleTask>
    7bfc:	a6 ca       	rjmp	.-2740   	; 0x714a <handleSerialCommand+0x38>
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
		printf_P(PSTR("Message length was %z chars, which exceeds the maximum of %u"), strlen(command_args), IR_BUFFER_SIZE);
    7bfe:	1f 92       	push	r1
    7c00:	28 e2       	ldi	r18, 0x28	; 40
    7c02:	2f 93       	push	r18
    7c04:	9f 93       	push	r25
    7c06:	8f 93       	push	r24
    7c08:	8e e1       	ldi	r24, 0x1E	; 30
    7c0a:	9c e0       	ldi	r25, 0x0C	; 12
    7c0c:	9f 93       	push	r25
    7c0e:	8f 93       	push	r24
    7c10:	0e 94 08 50 	call	0xa010	; 0xa010 <printf_P>
    7c14:	0f 90       	pop	r0
    7c16:	0f 90       	pop	r0
    7c18:	0f 90       	pop	r0
    7c1a:	0f 90       	pop	r0
    7c1c:	0f 90       	pop	r0
    7c1e:	0f 90       	pop	r0
    7c20:	94 ca       	rjmp	.-2776   	; 0x714a <handleSerialCommand+0x38>
 * <MSG> will be treated as a string and broadcast over IR.
 * If <MSG> is not present, a simple test string will be broadcast instead.
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
    7c22:	6f e3       	ldi	r22, 0x3F	; 63
    7c24:	72 e2       	ldi	r23, 0x22	; 34
    7c26:	c9 cf       	rjmp	.-110    	; 0x7bba <handleSerialCommand+0xaa8>
			str12 = command_word;
			str12++;
			number_of_hex = atoi(str12);
			reprogramming=1;
			//delayMS(20000);
		}else if(command_word[0] == 'R' && command_word[1] == 0){
    7c28:	f8 01       	movw	r30, r16
    7c2a:	81 81       	ldd	r24, Z+1	; 0x01
    7c2c:	81 11       	cpse	r24, r1
    7c2e:	4e cf       	rjmp	.-356    	; 0x7acc <handleSerialCommand+0x9ba>
			strcat(initial_msg, "S");
    7c30:	0c ec       	ldi	r16, 0xCC	; 204
    7c32:	15 e2       	ldi	r17, 0x25	; 37
    7c34:	f8 01       	movw	r30, r16
    7c36:	01 90       	ld	r0, Z+
    7c38:	00 20       	and	r0, r0
    7c3a:	e9 f7       	brne	.-6      	; 0x7c36 <handleSerialCommand+0xb24>
    7c3c:	31 97       	sbiw	r30, 0x01	; 1
    7c3e:	cf 01       	movw	r24, r30
    7c40:	8c 5c       	subi	r24, 0xCC	; 204
    7c42:	95 42       	sbci	r25, 0x25	; 37
    7c44:	23 e5       	ldi	r18, 0x53	; 83
    7c46:	20 83       	st	Z, r18
			strcat(initial_msg, command_args);
    7c48:	be 01       	movw	r22, r28
    7c4a:	6f 5f       	subi	r22, 0xFF	; 255
    7c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    7c4e:	83 53       	subi	r24, 0x33	; 51
    7c50:	9a 4d       	sbci	r25, 0xDA	; 218
    7c52:	0e 94 1b 4f 	call	0x9e36	; 0x9e36 <strcpy>
			int length = strlen(initial_msg);
    7c56:	f8 01       	movw	r30, r16
    7c58:	01 90       	ld	r0, Z+
    7c5a:	00 20       	and	r0, r0
    7c5c:	e9 f7       	brne	.-6      	; 0x7c58 <handleSerialCommand+0xb46>
    7c5e:	31 97       	sbiw	r30, 0x01	; 1
    7c60:	8f 01       	movw	r16, r30
    7c62:	0c 5c       	subi	r16, 0xCC	; 204
    7c64:	15 42       	sbci	r17, 0x25	; 37
			setRGB(255,0,0);
    7c66:	40 e0       	ldi	r20, 0x00	; 0
    7c68:	60 e0       	ldi	r22, 0x00	; 0
    7c6a:	8f ef       	ldi	r24, 0xFF	; 255
    7c6c:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
			//delayMS(3000);
			//strcpy(initial_msg, "start");
			irCmd(ALL_DIRS, initial_msg, length);
    7c70:	40 2f       	mov	r20, r16
    7c72:	6c ec       	ldi	r22, 0xCC	; 204
    7c74:	75 e2       	ldi	r23, 0x25	; 37
    7c76:	8f e3       	ldi	r24, 0x3F	; 63
    7c78:	0e 94 81 13 	call	0x2702	; 0x2702 <irCmd>
			str12 = command_word;
			str12++;
			number_of_hex = atoi(str12);
			reprogramming=1;
			//delayMS(20000);
		}else if(command_word[0] == 'R' && command_word[1] == 0){
    7c7c:	66 ca       	rjmp	.-2868   	; 0x714a <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
																		printMotorValues();
																		printDistPerStep();																	
		}else if(command_word[0] == 'S'){
			setRGB(0,0,255);
    7c7e:	4f ef       	ldi	r20, 0xFF	; 255
    7c80:	60 e0       	ldi	r22, 0x00	; 0
    7c82:	80 e0       	ldi	r24, 0x00	; 0
    7c84:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <setRGB>
			char *str12;
			str12 = command_word;
			str12++;
			number_of_hex = atoi(str12);
    7c88:	c8 01       	movw	r24, r16
    7c8a:	01 96       	adiw	r24, 0x01	; 1
    7c8c:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <atoi>
    7c90:	80 93 36 24 	sts	0x2436, r24	; 0x802436 <number_of_hex>
			reprogramming=1;
    7c94:	81 e0       	ldi	r24, 0x01	; 1
    7c96:	80 93 fc 23 	sts	0x23FC, r24	; 0x8023fc <reprogramming>
    7c9a:	57 ca       	rjmp	.-2898   	; 0x714a <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
																		printMotorValues();
    7c9c:	0e 94 4a 21 	call	0x4294	; 0x4294 <printMotorValues>
																		printDistPerStep();																	
    7ca0:	0e 94 a3 21 	call	0x4346	; 0x4346 <printDistPerStep>
    7ca4:	52 ca       	rjmp	.-2908   	; 0x714a <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
    7ca6:	0e 94 08 21 	call	0x4210	; 0x4210 <writeMotorSettings>
    7caa:	4f ca       	rjmp	.-2914   	; 0x714a <handleSerialCommand+0x38>

00007cac <vfprintf>:
    7cac:	2f 92       	push	r2
    7cae:	3f 92       	push	r3
    7cb0:	4f 92       	push	r4
    7cb2:	5f 92       	push	r5
    7cb4:	6f 92       	push	r6
    7cb6:	7f 92       	push	r7
    7cb8:	8f 92       	push	r8
    7cba:	9f 92       	push	r9
    7cbc:	af 92       	push	r10
    7cbe:	bf 92       	push	r11
    7cc0:	cf 92       	push	r12
    7cc2:	df 92       	push	r13
    7cc4:	ef 92       	push	r14
    7cc6:	ff 92       	push	r15
    7cc8:	0f 93       	push	r16
    7cca:	1f 93       	push	r17
    7ccc:	cf 93       	push	r28
    7cce:	df 93       	push	r29
    7cd0:	cd b7       	in	r28, 0x3d	; 61
    7cd2:	de b7       	in	r29, 0x3e	; 62
    7cd4:	60 97       	sbiw	r28, 0x10	; 16
    7cd6:	cd bf       	out	0x3d, r28	; 61
    7cd8:	de bf       	out	0x3e, r29	; 62
    7cda:	7c 01       	movw	r14, r24
    7cdc:	1b 01       	movw	r2, r22
    7cde:	6a 01       	movw	r12, r20
    7ce0:	fc 01       	movw	r30, r24
    7ce2:	16 82       	std	Z+6, r1	; 0x06
    7ce4:	17 82       	std	Z+7, r1	; 0x07
    7ce6:	83 81       	ldd	r24, Z+3	; 0x03
    7ce8:	81 ff       	sbrs	r24, 1
    7cea:	44 c3       	rjmp	.+1672   	; 0x8374 <vfprintf+0x6c8>
    7cec:	9e 01       	movw	r18, r28
    7cee:	2f 5f       	subi	r18, 0xFF	; 255
    7cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    7cf2:	39 01       	movw	r6, r18
    7cf4:	f7 01       	movw	r30, r14
    7cf6:	93 81       	ldd	r25, Z+3	; 0x03
    7cf8:	f1 01       	movw	r30, r2
    7cfa:	93 fd       	sbrc	r25, 3
    7cfc:	85 91       	lpm	r24, Z+
    7cfe:	93 ff       	sbrs	r25, 3
    7d00:	81 91       	ld	r24, Z+
    7d02:	1f 01       	movw	r2, r30
    7d04:	88 23       	and	r24, r24
    7d06:	09 f4       	brne	.+2      	; 0x7d0a <vfprintf+0x5e>
    7d08:	31 c3       	rjmp	.+1634   	; 0x836c <vfprintf+0x6c0>
    7d0a:	85 32       	cpi	r24, 0x25	; 37
    7d0c:	39 f4       	brne	.+14     	; 0x7d1c <vfprintf+0x70>
    7d0e:	93 fd       	sbrc	r25, 3
    7d10:	85 91       	lpm	r24, Z+
    7d12:	93 ff       	sbrs	r25, 3
    7d14:	81 91       	ld	r24, Z+
    7d16:	1f 01       	movw	r2, r30
    7d18:	85 32       	cpi	r24, 0x25	; 37
    7d1a:	39 f4       	brne	.+14     	; 0x7d2a <vfprintf+0x7e>
    7d1c:	b7 01       	movw	r22, r14
    7d1e:	90 e0       	ldi	r25, 0x00	; 0
    7d20:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    7d24:	56 01       	movw	r10, r12
    7d26:	65 01       	movw	r12, r10
    7d28:	e5 cf       	rjmp	.-54     	; 0x7cf4 <vfprintf+0x48>
    7d2a:	10 e0       	ldi	r17, 0x00	; 0
    7d2c:	51 2c       	mov	r5, r1
    7d2e:	91 2c       	mov	r9, r1
    7d30:	ff e1       	ldi	r31, 0x1F	; 31
    7d32:	f9 15       	cp	r31, r9
    7d34:	d8 f0       	brcs	.+54     	; 0x7d6c <vfprintf+0xc0>
    7d36:	8b 32       	cpi	r24, 0x2B	; 43
    7d38:	79 f0       	breq	.+30     	; 0x7d58 <vfprintf+0xac>
    7d3a:	38 f4       	brcc	.+14     	; 0x7d4a <vfprintf+0x9e>
    7d3c:	80 32       	cpi	r24, 0x20	; 32
    7d3e:	79 f0       	breq	.+30     	; 0x7d5e <vfprintf+0xb2>
    7d40:	83 32       	cpi	r24, 0x23	; 35
    7d42:	a1 f4       	brne	.+40     	; 0x7d6c <vfprintf+0xc0>
    7d44:	f9 2d       	mov	r31, r9
    7d46:	f0 61       	ori	r31, 0x10	; 16
    7d48:	2e c0       	rjmp	.+92     	; 0x7da6 <vfprintf+0xfa>
    7d4a:	8d 32       	cpi	r24, 0x2D	; 45
    7d4c:	61 f0       	breq	.+24     	; 0x7d66 <vfprintf+0xba>
    7d4e:	80 33       	cpi	r24, 0x30	; 48
    7d50:	69 f4       	brne	.+26     	; 0x7d6c <vfprintf+0xc0>
    7d52:	29 2d       	mov	r18, r9
    7d54:	21 60       	ori	r18, 0x01	; 1
    7d56:	2d c0       	rjmp	.+90     	; 0x7db2 <vfprintf+0x106>
    7d58:	39 2d       	mov	r19, r9
    7d5a:	32 60       	ori	r19, 0x02	; 2
    7d5c:	93 2e       	mov	r9, r19
    7d5e:	89 2d       	mov	r24, r9
    7d60:	84 60       	ori	r24, 0x04	; 4
    7d62:	98 2e       	mov	r9, r24
    7d64:	2a c0       	rjmp	.+84     	; 0x7dba <vfprintf+0x10e>
    7d66:	e9 2d       	mov	r30, r9
    7d68:	e8 60       	ori	r30, 0x08	; 8
    7d6a:	15 c0       	rjmp	.+42     	; 0x7d96 <vfprintf+0xea>
    7d6c:	97 fc       	sbrc	r9, 7
    7d6e:	2d c0       	rjmp	.+90     	; 0x7dca <vfprintf+0x11e>
    7d70:	20 ed       	ldi	r18, 0xD0	; 208
    7d72:	28 0f       	add	r18, r24
    7d74:	2a 30       	cpi	r18, 0x0A	; 10
    7d76:	88 f4       	brcc	.+34     	; 0x7d9a <vfprintf+0xee>
    7d78:	96 fe       	sbrs	r9, 6
    7d7a:	06 c0       	rjmp	.+12     	; 0x7d88 <vfprintf+0xdc>
    7d7c:	3a e0       	ldi	r19, 0x0A	; 10
    7d7e:	13 9f       	mul	r17, r19
    7d80:	20 0d       	add	r18, r0
    7d82:	11 24       	eor	r1, r1
    7d84:	12 2f       	mov	r17, r18
    7d86:	19 c0       	rjmp	.+50     	; 0x7dba <vfprintf+0x10e>
    7d88:	8a e0       	ldi	r24, 0x0A	; 10
    7d8a:	58 9e       	mul	r5, r24
    7d8c:	20 0d       	add	r18, r0
    7d8e:	11 24       	eor	r1, r1
    7d90:	52 2e       	mov	r5, r18
    7d92:	e9 2d       	mov	r30, r9
    7d94:	e0 62       	ori	r30, 0x20	; 32
    7d96:	9e 2e       	mov	r9, r30
    7d98:	10 c0       	rjmp	.+32     	; 0x7dba <vfprintf+0x10e>
    7d9a:	8e 32       	cpi	r24, 0x2E	; 46
    7d9c:	31 f4       	brne	.+12     	; 0x7daa <vfprintf+0xfe>
    7d9e:	96 fc       	sbrc	r9, 6
    7da0:	e5 c2       	rjmp	.+1482   	; 0x836c <vfprintf+0x6c0>
    7da2:	f9 2d       	mov	r31, r9
    7da4:	f0 64       	ori	r31, 0x40	; 64
    7da6:	9f 2e       	mov	r9, r31
    7da8:	08 c0       	rjmp	.+16     	; 0x7dba <vfprintf+0x10e>
    7daa:	8c 36       	cpi	r24, 0x6C	; 108
    7dac:	21 f4       	brne	.+8      	; 0x7db6 <vfprintf+0x10a>
    7dae:	29 2d       	mov	r18, r9
    7db0:	20 68       	ori	r18, 0x80	; 128
    7db2:	92 2e       	mov	r9, r18
    7db4:	02 c0       	rjmp	.+4      	; 0x7dba <vfprintf+0x10e>
    7db6:	88 36       	cpi	r24, 0x68	; 104
    7db8:	41 f4       	brne	.+16     	; 0x7dca <vfprintf+0x11e>
    7dba:	f1 01       	movw	r30, r2
    7dbc:	93 fd       	sbrc	r25, 3
    7dbe:	85 91       	lpm	r24, Z+
    7dc0:	93 ff       	sbrs	r25, 3
    7dc2:	81 91       	ld	r24, Z+
    7dc4:	1f 01       	movw	r2, r30
    7dc6:	81 11       	cpse	r24, r1
    7dc8:	b3 cf       	rjmp	.-154    	; 0x7d30 <vfprintf+0x84>
    7dca:	9b eb       	ldi	r25, 0xBB	; 187
    7dcc:	98 0f       	add	r25, r24
    7dce:	93 30       	cpi	r25, 0x03	; 3
    7dd0:	20 f4       	brcc	.+8      	; 0x7dda <vfprintf+0x12e>
    7dd2:	99 2d       	mov	r25, r9
    7dd4:	90 61       	ori	r25, 0x10	; 16
    7dd6:	80 5e       	subi	r24, 0xE0	; 224
    7dd8:	07 c0       	rjmp	.+14     	; 0x7de8 <vfprintf+0x13c>
    7dda:	9b e9       	ldi	r25, 0x9B	; 155
    7ddc:	98 0f       	add	r25, r24
    7dde:	93 30       	cpi	r25, 0x03	; 3
    7de0:	08 f0       	brcs	.+2      	; 0x7de4 <vfprintf+0x138>
    7de2:	66 c1       	rjmp	.+716    	; 0x80b0 <vfprintf+0x404>
    7de4:	99 2d       	mov	r25, r9
    7de6:	9f 7e       	andi	r25, 0xEF	; 239
    7de8:	96 ff       	sbrs	r25, 6
    7dea:	16 e0       	ldi	r17, 0x06	; 6
    7dec:	9f 73       	andi	r25, 0x3F	; 63
    7dee:	99 2e       	mov	r9, r25
    7df0:	85 36       	cpi	r24, 0x65	; 101
    7df2:	19 f4       	brne	.+6      	; 0x7dfa <vfprintf+0x14e>
    7df4:	90 64       	ori	r25, 0x40	; 64
    7df6:	99 2e       	mov	r9, r25
    7df8:	08 c0       	rjmp	.+16     	; 0x7e0a <vfprintf+0x15e>
    7dfa:	86 36       	cpi	r24, 0x66	; 102
    7dfc:	21 f4       	brne	.+8      	; 0x7e06 <vfprintf+0x15a>
    7dfe:	39 2f       	mov	r19, r25
    7e00:	30 68       	ori	r19, 0x80	; 128
    7e02:	93 2e       	mov	r9, r19
    7e04:	02 c0       	rjmp	.+4      	; 0x7e0a <vfprintf+0x15e>
    7e06:	11 11       	cpse	r17, r1
    7e08:	11 50       	subi	r17, 0x01	; 1
    7e0a:	97 fe       	sbrs	r9, 7
    7e0c:	07 c0       	rjmp	.+14     	; 0x7e1c <vfprintf+0x170>
    7e0e:	1c 33       	cpi	r17, 0x3C	; 60
    7e10:	50 f4       	brcc	.+20     	; 0x7e26 <vfprintf+0x17a>
    7e12:	44 24       	eor	r4, r4
    7e14:	43 94       	inc	r4
    7e16:	41 0e       	add	r4, r17
    7e18:	27 e0       	ldi	r18, 0x07	; 7
    7e1a:	0b c0       	rjmp	.+22     	; 0x7e32 <vfprintf+0x186>
    7e1c:	18 30       	cpi	r17, 0x08	; 8
    7e1e:	38 f0       	brcs	.+14     	; 0x7e2e <vfprintf+0x182>
    7e20:	27 e0       	ldi	r18, 0x07	; 7
    7e22:	17 e0       	ldi	r17, 0x07	; 7
    7e24:	05 c0       	rjmp	.+10     	; 0x7e30 <vfprintf+0x184>
    7e26:	27 e0       	ldi	r18, 0x07	; 7
    7e28:	9c e3       	ldi	r25, 0x3C	; 60
    7e2a:	49 2e       	mov	r4, r25
    7e2c:	02 c0       	rjmp	.+4      	; 0x7e32 <vfprintf+0x186>
    7e2e:	21 2f       	mov	r18, r17
    7e30:	41 2c       	mov	r4, r1
    7e32:	56 01       	movw	r10, r12
    7e34:	84 e0       	ldi	r24, 0x04	; 4
    7e36:	a8 0e       	add	r10, r24
    7e38:	b1 1c       	adc	r11, r1
    7e3a:	f6 01       	movw	r30, r12
    7e3c:	60 81       	ld	r22, Z
    7e3e:	71 81       	ldd	r23, Z+1	; 0x01
    7e40:	82 81       	ldd	r24, Z+2	; 0x02
    7e42:	93 81       	ldd	r25, Z+3	; 0x03
    7e44:	04 2d       	mov	r16, r4
    7e46:	a3 01       	movw	r20, r6
    7e48:	0e 94 fd 4d 	call	0x9bfa	; 0x9bfa <__ftoa_engine>
    7e4c:	6c 01       	movw	r12, r24
    7e4e:	f9 81       	ldd	r31, Y+1	; 0x01
    7e50:	fc 87       	std	Y+12, r31	; 0x0c
    7e52:	f0 ff       	sbrs	r31, 0
    7e54:	02 c0       	rjmp	.+4      	; 0x7e5a <vfprintf+0x1ae>
    7e56:	f3 ff       	sbrs	r31, 3
    7e58:	06 c0       	rjmp	.+12     	; 0x7e66 <vfprintf+0x1ba>
    7e5a:	91 fc       	sbrc	r9, 1
    7e5c:	06 c0       	rjmp	.+12     	; 0x7e6a <vfprintf+0x1be>
    7e5e:	92 fe       	sbrs	r9, 2
    7e60:	06 c0       	rjmp	.+12     	; 0x7e6e <vfprintf+0x1c2>
    7e62:	00 e2       	ldi	r16, 0x20	; 32
    7e64:	05 c0       	rjmp	.+10     	; 0x7e70 <vfprintf+0x1c4>
    7e66:	0d e2       	ldi	r16, 0x2D	; 45
    7e68:	03 c0       	rjmp	.+6      	; 0x7e70 <vfprintf+0x1c4>
    7e6a:	0b e2       	ldi	r16, 0x2B	; 43
    7e6c:	01 c0       	rjmp	.+2      	; 0x7e70 <vfprintf+0x1c4>
    7e6e:	00 e0       	ldi	r16, 0x00	; 0
    7e70:	8c 85       	ldd	r24, Y+12	; 0x0c
    7e72:	8c 70       	andi	r24, 0x0C	; 12
    7e74:	19 f0       	breq	.+6      	; 0x7e7c <vfprintf+0x1d0>
    7e76:	01 11       	cpse	r16, r1
    7e78:	5a c2       	rjmp	.+1204   	; 0x832e <vfprintf+0x682>
    7e7a:	9b c2       	rjmp	.+1334   	; 0x83b2 <vfprintf+0x706>
    7e7c:	97 fe       	sbrs	r9, 7
    7e7e:	10 c0       	rjmp	.+32     	; 0x7ea0 <vfprintf+0x1f4>
    7e80:	4c 0c       	add	r4, r12
    7e82:	fc 85       	ldd	r31, Y+12	; 0x0c
    7e84:	f4 ff       	sbrs	r31, 4
    7e86:	04 c0       	rjmp	.+8      	; 0x7e90 <vfprintf+0x1e4>
    7e88:	8a 81       	ldd	r24, Y+2	; 0x02
    7e8a:	81 33       	cpi	r24, 0x31	; 49
    7e8c:	09 f4       	brne	.+2      	; 0x7e90 <vfprintf+0x1e4>
    7e8e:	4a 94       	dec	r4
    7e90:	14 14       	cp	r1, r4
    7e92:	74 f5       	brge	.+92     	; 0x7ef0 <vfprintf+0x244>
    7e94:	28 e0       	ldi	r18, 0x08	; 8
    7e96:	24 15       	cp	r18, r4
    7e98:	78 f5       	brcc	.+94     	; 0x7ef8 <vfprintf+0x24c>
    7e9a:	88 e0       	ldi	r24, 0x08	; 8
    7e9c:	48 2e       	mov	r4, r24
    7e9e:	2c c0       	rjmp	.+88     	; 0x7ef8 <vfprintf+0x24c>
    7ea0:	96 fc       	sbrc	r9, 6
    7ea2:	2a c0       	rjmp	.+84     	; 0x7ef8 <vfprintf+0x24c>
    7ea4:	81 2f       	mov	r24, r17
    7ea6:	90 e0       	ldi	r25, 0x00	; 0
    7ea8:	8c 15       	cp	r24, r12
    7eaa:	9d 05       	cpc	r25, r13
    7eac:	9c f0       	brlt	.+38     	; 0x7ed4 <vfprintf+0x228>
    7eae:	3c ef       	ldi	r19, 0xFC	; 252
    7eb0:	c3 16       	cp	r12, r19
    7eb2:	3f ef       	ldi	r19, 0xFF	; 255
    7eb4:	d3 06       	cpc	r13, r19
    7eb6:	74 f0       	brlt	.+28     	; 0x7ed4 <vfprintf+0x228>
    7eb8:	89 2d       	mov	r24, r9
    7eba:	80 68       	ori	r24, 0x80	; 128
    7ebc:	98 2e       	mov	r9, r24
    7ebe:	0a c0       	rjmp	.+20     	; 0x7ed4 <vfprintf+0x228>
    7ec0:	e2 e0       	ldi	r30, 0x02	; 2
    7ec2:	f0 e0       	ldi	r31, 0x00	; 0
    7ec4:	ec 0f       	add	r30, r28
    7ec6:	fd 1f       	adc	r31, r29
    7ec8:	e1 0f       	add	r30, r17
    7eca:	f1 1d       	adc	r31, r1
    7ecc:	80 81       	ld	r24, Z
    7ece:	80 33       	cpi	r24, 0x30	; 48
    7ed0:	19 f4       	brne	.+6      	; 0x7ed8 <vfprintf+0x22c>
    7ed2:	11 50       	subi	r17, 0x01	; 1
    7ed4:	11 11       	cpse	r17, r1
    7ed6:	f4 cf       	rjmp	.-24     	; 0x7ec0 <vfprintf+0x214>
    7ed8:	97 fe       	sbrs	r9, 7
    7eda:	0e c0       	rjmp	.+28     	; 0x7ef8 <vfprintf+0x24c>
    7edc:	44 24       	eor	r4, r4
    7ede:	43 94       	inc	r4
    7ee0:	41 0e       	add	r4, r17
    7ee2:	81 2f       	mov	r24, r17
    7ee4:	90 e0       	ldi	r25, 0x00	; 0
    7ee6:	c8 16       	cp	r12, r24
    7ee8:	d9 06       	cpc	r13, r25
    7eea:	2c f4       	brge	.+10     	; 0x7ef6 <vfprintf+0x24a>
    7eec:	1c 19       	sub	r17, r12
    7eee:	04 c0       	rjmp	.+8      	; 0x7ef8 <vfprintf+0x24c>
    7ef0:	44 24       	eor	r4, r4
    7ef2:	43 94       	inc	r4
    7ef4:	01 c0       	rjmp	.+2      	; 0x7ef8 <vfprintf+0x24c>
    7ef6:	10 e0       	ldi	r17, 0x00	; 0
    7ef8:	97 fe       	sbrs	r9, 7
    7efa:	06 c0       	rjmp	.+12     	; 0x7f08 <vfprintf+0x25c>
    7efc:	1c 14       	cp	r1, r12
    7efe:	1d 04       	cpc	r1, r13
    7f00:	34 f4       	brge	.+12     	; 0x7f0e <vfprintf+0x262>
    7f02:	c6 01       	movw	r24, r12
    7f04:	01 96       	adiw	r24, 0x01	; 1
    7f06:	05 c0       	rjmp	.+10     	; 0x7f12 <vfprintf+0x266>
    7f08:	85 e0       	ldi	r24, 0x05	; 5
    7f0a:	90 e0       	ldi	r25, 0x00	; 0
    7f0c:	02 c0       	rjmp	.+4      	; 0x7f12 <vfprintf+0x266>
    7f0e:	81 e0       	ldi	r24, 0x01	; 1
    7f10:	90 e0       	ldi	r25, 0x00	; 0
    7f12:	01 11       	cpse	r16, r1
    7f14:	01 96       	adiw	r24, 0x01	; 1
    7f16:	11 23       	and	r17, r17
    7f18:	31 f0       	breq	.+12     	; 0x7f26 <vfprintf+0x27a>
    7f1a:	21 2f       	mov	r18, r17
    7f1c:	30 e0       	ldi	r19, 0x00	; 0
    7f1e:	2f 5f       	subi	r18, 0xFF	; 255
    7f20:	3f 4f       	sbci	r19, 0xFF	; 255
    7f22:	82 0f       	add	r24, r18
    7f24:	93 1f       	adc	r25, r19
    7f26:	25 2d       	mov	r18, r5
    7f28:	30 e0       	ldi	r19, 0x00	; 0
    7f2a:	82 17       	cp	r24, r18
    7f2c:	93 07       	cpc	r25, r19
    7f2e:	14 f4       	brge	.+4      	; 0x7f34 <vfprintf+0x288>
    7f30:	58 1a       	sub	r5, r24
    7f32:	01 c0       	rjmp	.+2      	; 0x7f36 <vfprintf+0x28a>
    7f34:	51 2c       	mov	r5, r1
    7f36:	89 2d       	mov	r24, r9
    7f38:	89 70       	andi	r24, 0x09	; 9
    7f3a:	49 f4       	brne	.+18     	; 0x7f4e <vfprintf+0x2a2>
    7f3c:	55 20       	and	r5, r5
    7f3e:	39 f0       	breq	.+14     	; 0x7f4e <vfprintf+0x2a2>
    7f40:	b7 01       	movw	r22, r14
    7f42:	80 e2       	ldi	r24, 0x20	; 32
    7f44:	90 e0       	ldi	r25, 0x00	; 0
    7f46:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    7f4a:	5a 94       	dec	r5
    7f4c:	f7 cf       	rjmp	.-18     	; 0x7f3c <vfprintf+0x290>
    7f4e:	00 23       	and	r16, r16
    7f50:	29 f0       	breq	.+10     	; 0x7f5c <vfprintf+0x2b0>
    7f52:	b7 01       	movw	r22, r14
    7f54:	80 2f       	mov	r24, r16
    7f56:	90 e0       	ldi	r25, 0x00	; 0
    7f58:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    7f5c:	93 fc       	sbrc	r9, 3
    7f5e:	09 c0       	rjmp	.+18     	; 0x7f72 <vfprintf+0x2c6>
    7f60:	55 20       	and	r5, r5
    7f62:	39 f0       	breq	.+14     	; 0x7f72 <vfprintf+0x2c6>
    7f64:	b7 01       	movw	r22, r14
    7f66:	80 e3       	ldi	r24, 0x30	; 48
    7f68:	90 e0       	ldi	r25, 0x00	; 0
    7f6a:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    7f6e:	5a 94       	dec	r5
    7f70:	f7 cf       	rjmp	.-18     	; 0x7f60 <vfprintf+0x2b4>
    7f72:	97 fe       	sbrs	r9, 7
    7f74:	4c c0       	rjmp	.+152    	; 0x800e <vfprintf+0x362>
    7f76:	46 01       	movw	r8, r12
    7f78:	d7 fe       	sbrs	r13, 7
    7f7a:	02 c0       	rjmp	.+4      	; 0x7f80 <vfprintf+0x2d4>
    7f7c:	81 2c       	mov	r8, r1
    7f7e:	91 2c       	mov	r9, r1
    7f80:	c6 01       	movw	r24, r12
    7f82:	88 19       	sub	r24, r8
    7f84:	99 09       	sbc	r25, r9
    7f86:	f3 01       	movw	r30, r6
    7f88:	e8 0f       	add	r30, r24
    7f8a:	f9 1f       	adc	r31, r25
    7f8c:	ed 87       	std	Y+13, r30	; 0x0d
    7f8e:	fe 87       	std	Y+14, r31	; 0x0e
    7f90:	96 01       	movw	r18, r12
    7f92:	24 19       	sub	r18, r4
    7f94:	31 09       	sbc	r19, r1
    7f96:	2f 87       	std	Y+15, r18	; 0x0f
    7f98:	38 8b       	std	Y+16, r19	; 0x10
    7f9a:	01 2f       	mov	r16, r17
    7f9c:	10 e0       	ldi	r17, 0x00	; 0
    7f9e:	11 95       	neg	r17
    7fa0:	01 95       	neg	r16
    7fa2:	11 09       	sbc	r17, r1
    7fa4:	3f ef       	ldi	r19, 0xFF	; 255
    7fa6:	83 16       	cp	r8, r19
    7fa8:	93 06       	cpc	r9, r19
    7faa:	29 f4       	brne	.+10     	; 0x7fb6 <vfprintf+0x30a>
    7fac:	b7 01       	movw	r22, r14
    7fae:	8e e2       	ldi	r24, 0x2E	; 46
    7fb0:	90 e0       	ldi	r25, 0x00	; 0
    7fb2:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    7fb6:	c8 14       	cp	r12, r8
    7fb8:	d9 04       	cpc	r13, r9
    7fba:	4c f0       	brlt	.+18     	; 0x7fce <vfprintf+0x322>
    7fbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    7fbe:	98 89       	ldd	r25, Y+16	; 0x10
    7fc0:	88 15       	cp	r24, r8
    7fc2:	99 05       	cpc	r25, r9
    7fc4:	24 f4       	brge	.+8      	; 0x7fce <vfprintf+0x322>
    7fc6:	ed 85       	ldd	r30, Y+13	; 0x0d
    7fc8:	fe 85       	ldd	r31, Y+14	; 0x0e
    7fca:	81 81       	ldd	r24, Z+1	; 0x01
    7fcc:	01 c0       	rjmp	.+2      	; 0x7fd0 <vfprintf+0x324>
    7fce:	80 e3       	ldi	r24, 0x30	; 48
    7fd0:	f1 e0       	ldi	r31, 0x01	; 1
    7fd2:	8f 1a       	sub	r8, r31
    7fd4:	91 08       	sbc	r9, r1
    7fd6:	2d 85       	ldd	r18, Y+13	; 0x0d
    7fd8:	3e 85       	ldd	r19, Y+14	; 0x0e
    7fda:	2f 5f       	subi	r18, 0xFF	; 255
    7fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    7fde:	2d 87       	std	Y+13, r18	; 0x0d
    7fe0:	3e 87       	std	Y+14, r19	; 0x0e
    7fe2:	80 16       	cp	r8, r16
    7fe4:	91 06       	cpc	r9, r17
    7fe6:	2c f0       	brlt	.+10     	; 0x7ff2 <vfprintf+0x346>
    7fe8:	b7 01       	movw	r22, r14
    7fea:	90 e0       	ldi	r25, 0x00	; 0
    7fec:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    7ff0:	d9 cf       	rjmp	.-78     	; 0x7fa4 <vfprintf+0x2f8>
    7ff2:	c8 14       	cp	r12, r8
    7ff4:	d9 04       	cpc	r13, r9
    7ff6:	41 f4       	brne	.+16     	; 0x8008 <vfprintf+0x35c>
    7ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    7ffa:	96 33       	cpi	r25, 0x36	; 54
    7ffc:	20 f4       	brcc	.+8      	; 0x8006 <vfprintf+0x35a>
    7ffe:	95 33       	cpi	r25, 0x35	; 53
    8000:	19 f4       	brne	.+6      	; 0x8008 <vfprintf+0x35c>
    8002:	3c 85       	ldd	r19, Y+12	; 0x0c
    8004:	34 ff       	sbrs	r19, 4
    8006:	81 e3       	ldi	r24, 0x31	; 49
    8008:	b7 01       	movw	r22, r14
    800a:	90 e0       	ldi	r25, 0x00	; 0
    800c:	4e c0       	rjmp	.+156    	; 0x80aa <vfprintf+0x3fe>
    800e:	8a 81       	ldd	r24, Y+2	; 0x02
    8010:	81 33       	cpi	r24, 0x31	; 49
    8012:	19 f0       	breq	.+6      	; 0x801a <vfprintf+0x36e>
    8014:	9c 85       	ldd	r25, Y+12	; 0x0c
    8016:	9f 7e       	andi	r25, 0xEF	; 239
    8018:	9c 87       	std	Y+12, r25	; 0x0c
    801a:	b7 01       	movw	r22, r14
    801c:	90 e0       	ldi	r25, 0x00	; 0
    801e:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    8022:	11 11       	cpse	r17, r1
    8024:	05 c0       	rjmp	.+10     	; 0x8030 <vfprintf+0x384>
    8026:	94 fc       	sbrc	r9, 4
    8028:	18 c0       	rjmp	.+48     	; 0x805a <vfprintf+0x3ae>
    802a:	85 e6       	ldi	r24, 0x65	; 101
    802c:	90 e0       	ldi	r25, 0x00	; 0
    802e:	17 c0       	rjmp	.+46     	; 0x805e <vfprintf+0x3b2>
    8030:	b7 01       	movw	r22, r14
    8032:	8e e2       	ldi	r24, 0x2E	; 46
    8034:	90 e0       	ldi	r25, 0x00	; 0
    8036:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    803a:	1e 5f       	subi	r17, 0xFE	; 254
    803c:	82 e0       	ldi	r24, 0x02	; 2
    803e:	01 e0       	ldi	r16, 0x01	; 1
    8040:	08 0f       	add	r16, r24
    8042:	f3 01       	movw	r30, r6
    8044:	e8 0f       	add	r30, r24
    8046:	f1 1d       	adc	r31, r1
    8048:	80 81       	ld	r24, Z
    804a:	b7 01       	movw	r22, r14
    804c:	90 e0       	ldi	r25, 0x00	; 0
    804e:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    8052:	80 2f       	mov	r24, r16
    8054:	01 13       	cpse	r16, r17
    8056:	f3 cf       	rjmp	.-26     	; 0x803e <vfprintf+0x392>
    8058:	e6 cf       	rjmp	.-52     	; 0x8026 <vfprintf+0x37a>
    805a:	85 e4       	ldi	r24, 0x45	; 69
    805c:	90 e0       	ldi	r25, 0x00	; 0
    805e:	b7 01       	movw	r22, r14
    8060:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    8064:	d7 fc       	sbrc	r13, 7
    8066:	06 c0       	rjmp	.+12     	; 0x8074 <vfprintf+0x3c8>
    8068:	c1 14       	cp	r12, r1
    806a:	d1 04       	cpc	r13, r1
    806c:	41 f4       	brne	.+16     	; 0x807e <vfprintf+0x3d2>
    806e:	ec 85       	ldd	r30, Y+12	; 0x0c
    8070:	e4 ff       	sbrs	r30, 4
    8072:	05 c0       	rjmp	.+10     	; 0x807e <vfprintf+0x3d2>
    8074:	d1 94       	neg	r13
    8076:	c1 94       	neg	r12
    8078:	d1 08       	sbc	r13, r1
    807a:	8d e2       	ldi	r24, 0x2D	; 45
    807c:	01 c0       	rjmp	.+2      	; 0x8080 <vfprintf+0x3d4>
    807e:	8b e2       	ldi	r24, 0x2B	; 43
    8080:	b7 01       	movw	r22, r14
    8082:	90 e0       	ldi	r25, 0x00	; 0
    8084:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    8088:	80 e3       	ldi	r24, 0x30	; 48
    808a:	2a e0       	ldi	r18, 0x0A	; 10
    808c:	c2 16       	cp	r12, r18
    808e:	d1 04       	cpc	r13, r1
    8090:	2c f0       	brlt	.+10     	; 0x809c <vfprintf+0x3f0>
    8092:	8f 5f       	subi	r24, 0xFF	; 255
    8094:	fa e0       	ldi	r31, 0x0A	; 10
    8096:	cf 1a       	sub	r12, r31
    8098:	d1 08       	sbc	r13, r1
    809a:	f7 cf       	rjmp	.-18     	; 0x808a <vfprintf+0x3de>
    809c:	b7 01       	movw	r22, r14
    809e:	90 e0       	ldi	r25, 0x00	; 0
    80a0:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    80a4:	b7 01       	movw	r22, r14
    80a6:	c6 01       	movw	r24, r12
    80a8:	c0 96       	adiw	r24, 0x30	; 48
    80aa:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    80ae:	54 c1       	rjmp	.+680    	; 0x8358 <vfprintf+0x6ac>
    80b0:	83 36       	cpi	r24, 0x63	; 99
    80b2:	31 f0       	breq	.+12     	; 0x80c0 <vfprintf+0x414>
    80b4:	83 37       	cpi	r24, 0x73	; 115
    80b6:	79 f0       	breq	.+30     	; 0x80d6 <vfprintf+0x42a>
    80b8:	83 35       	cpi	r24, 0x53	; 83
    80ba:	09 f0       	breq	.+2      	; 0x80be <vfprintf+0x412>
    80bc:	56 c0       	rjmp	.+172    	; 0x816a <vfprintf+0x4be>
    80be:	20 c0       	rjmp	.+64     	; 0x8100 <vfprintf+0x454>
    80c0:	56 01       	movw	r10, r12
    80c2:	32 e0       	ldi	r19, 0x02	; 2
    80c4:	a3 0e       	add	r10, r19
    80c6:	b1 1c       	adc	r11, r1
    80c8:	f6 01       	movw	r30, r12
    80ca:	80 81       	ld	r24, Z
    80cc:	89 83       	std	Y+1, r24	; 0x01
    80ce:	01 e0       	ldi	r16, 0x01	; 1
    80d0:	10 e0       	ldi	r17, 0x00	; 0
    80d2:	63 01       	movw	r12, r6
    80d4:	12 c0       	rjmp	.+36     	; 0x80fa <vfprintf+0x44e>
    80d6:	56 01       	movw	r10, r12
    80d8:	f2 e0       	ldi	r31, 0x02	; 2
    80da:	af 0e       	add	r10, r31
    80dc:	b1 1c       	adc	r11, r1
    80de:	f6 01       	movw	r30, r12
    80e0:	c0 80       	ld	r12, Z
    80e2:	d1 80       	ldd	r13, Z+1	; 0x01
    80e4:	96 fe       	sbrs	r9, 6
    80e6:	03 c0       	rjmp	.+6      	; 0x80ee <vfprintf+0x442>
    80e8:	61 2f       	mov	r22, r17
    80ea:	70 e0       	ldi	r23, 0x00	; 0
    80ec:	02 c0       	rjmp	.+4      	; 0x80f2 <vfprintf+0x446>
    80ee:	6f ef       	ldi	r22, 0xFF	; 255
    80f0:	7f ef       	ldi	r23, 0xFF	; 255
    80f2:	c6 01       	movw	r24, r12
    80f4:	0e 94 40 4f 	call	0x9e80	; 0x9e80 <strnlen>
    80f8:	8c 01       	movw	r16, r24
    80fa:	f9 2d       	mov	r31, r9
    80fc:	ff 77       	andi	r31, 0x7F	; 127
    80fe:	14 c0       	rjmp	.+40     	; 0x8128 <vfprintf+0x47c>
    8100:	56 01       	movw	r10, r12
    8102:	22 e0       	ldi	r18, 0x02	; 2
    8104:	a2 0e       	add	r10, r18
    8106:	b1 1c       	adc	r11, r1
    8108:	f6 01       	movw	r30, r12
    810a:	c0 80       	ld	r12, Z
    810c:	d1 80       	ldd	r13, Z+1	; 0x01
    810e:	96 fe       	sbrs	r9, 6
    8110:	03 c0       	rjmp	.+6      	; 0x8118 <vfprintf+0x46c>
    8112:	61 2f       	mov	r22, r17
    8114:	70 e0       	ldi	r23, 0x00	; 0
    8116:	02 c0       	rjmp	.+4      	; 0x811c <vfprintf+0x470>
    8118:	6f ef       	ldi	r22, 0xFF	; 255
    811a:	7f ef       	ldi	r23, 0xFF	; 255
    811c:	c6 01       	movw	r24, r12
    811e:	0e 94 fa 4e 	call	0x9df4	; 0x9df4 <strnlen_P>
    8122:	8c 01       	movw	r16, r24
    8124:	f9 2d       	mov	r31, r9
    8126:	f0 68       	ori	r31, 0x80	; 128
    8128:	9f 2e       	mov	r9, r31
    812a:	f3 fd       	sbrc	r31, 3
    812c:	1a c0       	rjmp	.+52     	; 0x8162 <vfprintf+0x4b6>
    812e:	85 2d       	mov	r24, r5
    8130:	90 e0       	ldi	r25, 0x00	; 0
    8132:	08 17       	cp	r16, r24
    8134:	19 07       	cpc	r17, r25
    8136:	a8 f4       	brcc	.+42     	; 0x8162 <vfprintf+0x4b6>
    8138:	b7 01       	movw	r22, r14
    813a:	80 e2       	ldi	r24, 0x20	; 32
    813c:	90 e0       	ldi	r25, 0x00	; 0
    813e:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    8142:	5a 94       	dec	r5
    8144:	f4 cf       	rjmp	.-24     	; 0x812e <vfprintf+0x482>
    8146:	f6 01       	movw	r30, r12
    8148:	97 fc       	sbrc	r9, 7
    814a:	85 91       	lpm	r24, Z+
    814c:	97 fe       	sbrs	r9, 7
    814e:	81 91       	ld	r24, Z+
    8150:	6f 01       	movw	r12, r30
    8152:	b7 01       	movw	r22, r14
    8154:	90 e0       	ldi	r25, 0x00	; 0
    8156:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    815a:	51 10       	cpse	r5, r1
    815c:	5a 94       	dec	r5
    815e:	01 50       	subi	r16, 0x01	; 1
    8160:	11 09       	sbc	r17, r1
    8162:	01 15       	cp	r16, r1
    8164:	11 05       	cpc	r17, r1
    8166:	79 f7       	brne	.-34     	; 0x8146 <vfprintf+0x49a>
    8168:	f7 c0       	rjmp	.+494    	; 0x8358 <vfprintf+0x6ac>
    816a:	84 36       	cpi	r24, 0x64	; 100
    816c:	11 f0       	breq	.+4      	; 0x8172 <vfprintf+0x4c6>
    816e:	89 36       	cpi	r24, 0x69	; 105
    8170:	61 f5       	brne	.+88     	; 0x81ca <vfprintf+0x51e>
    8172:	56 01       	movw	r10, r12
    8174:	97 fe       	sbrs	r9, 7
    8176:	09 c0       	rjmp	.+18     	; 0x818a <vfprintf+0x4de>
    8178:	24 e0       	ldi	r18, 0x04	; 4
    817a:	a2 0e       	add	r10, r18
    817c:	b1 1c       	adc	r11, r1
    817e:	f6 01       	movw	r30, r12
    8180:	60 81       	ld	r22, Z
    8182:	71 81       	ldd	r23, Z+1	; 0x01
    8184:	82 81       	ldd	r24, Z+2	; 0x02
    8186:	93 81       	ldd	r25, Z+3	; 0x03
    8188:	0a c0       	rjmp	.+20     	; 0x819e <vfprintf+0x4f2>
    818a:	f2 e0       	ldi	r31, 0x02	; 2
    818c:	af 0e       	add	r10, r31
    818e:	b1 1c       	adc	r11, r1
    8190:	f6 01       	movw	r30, r12
    8192:	60 81       	ld	r22, Z
    8194:	71 81       	ldd	r23, Z+1	; 0x01
    8196:	07 2e       	mov	r0, r23
    8198:	00 0c       	add	r0, r0
    819a:	88 0b       	sbc	r24, r24
    819c:	99 0b       	sbc	r25, r25
    819e:	f9 2d       	mov	r31, r9
    81a0:	ff 76       	andi	r31, 0x6F	; 111
    81a2:	9f 2e       	mov	r9, r31
    81a4:	97 ff       	sbrs	r25, 7
    81a6:	09 c0       	rjmp	.+18     	; 0x81ba <vfprintf+0x50e>
    81a8:	90 95       	com	r25
    81aa:	80 95       	com	r24
    81ac:	70 95       	com	r23
    81ae:	61 95       	neg	r22
    81b0:	7f 4f       	sbci	r23, 0xFF	; 255
    81b2:	8f 4f       	sbci	r24, 0xFF	; 255
    81b4:	9f 4f       	sbci	r25, 0xFF	; 255
    81b6:	f0 68       	ori	r31, 0x80	; 128
    81b8:	9f 2e       	mov	r9, r31
    81ba:	2a e0       	ldi	r18, 0x0A	; 10
    81bc:	30 e0       	ldi	r19, 0x00	; 0
    81be:	a3 01       	movw	r20, r6
    81c0:	0e 94 a8 50 	call	0xa150	; 0xa150 <__ultoa_invert>
    81c4:	c8 2e       	mov	r12, r24
    81c6:	c6 18       	sub	r12, r6
    81c8:	3f c0       	rjmp	.+126    	; 0x8248 <vfprintf+0x59c>
    81ca:	09 2d       	mov	r16, r9
    81cc:	85 37       	cpi	r24, 0x75	; 117
    81ce:	21 f4       	brne	.+8      	; 0x81d8 <vfprintf+0x52c>
    81d0:	0f 7e       	andi	r16, 0xEF	; 239
    81d2:	2a e0       	ldi	r18, 0x0A	; 10
    81d4:	30 e0       	ldi	r19, 0x00	; 0
    81d6:	1d c0       	rjmp	.+58     	; 0x8212 <vfprintf+0x566>
    81d8:	09 7f       	andi	r16, 0xF9	; 249
    81da:	8f 36       	cpi	r24, 0x6F	; 111
    81dc:	91 f0       	breq	.+36     	; 0x8202 <vfprintf+0x556>
    81de:	18 f4       	brcc	.+6      	; 0x81e6 <vfprintf+0x53a>
    81e0:	88 35       	cpi	r24, 0x58	; 88
    81e2:	59 f0       	breq	.+22     	; 0x81fa <vfprintf+0x54e>
    81e4:	c3 c0       	rjmp	.+390    	; 0x836c <vfprintf+0x6c0>
    81e6:	80 37       	cpi	r24, 0x70	; 112
    81e8:	19 f0       	breq	.+6      	; 0x81f0 <vfprintf+0x544>
    81ea:	88 37       	cpi	r24, 0x78	; 120
    81ec:	11 f0       	breq	.+4      	; 0x81f2 <vfprintf+0x546>
    81ee:	be c0       	rjmp	.+380    	; 0x836c <vfprintf+0x6c0>
    81f0:	00 61       	ori	r16, 0x10	; 16
    81f2:	04 ff       	sbrs	r16, 4
    81f4:	09 c0       	rjmp	.+18     	; 0x8208 <vfprintf+0x55c>
    81f6:	04 60       	ori	r16, 0x04	; 4
    81f8:	07 c0       	rjmp	.+14     	; 0x8208 <vfprintf+0x55c>
    81fa:	94 fe       	sbrs	r9, 4
    81fc:	08 c0       	rjmp	.+16     	; 0x820e <vfprintf+0x562>
    81fe:	06 60       	ori	r16, 0x06	; 6
    8200:	06 c0       	rjmp	.+12     	; 0x820e <vfprintf+0x562>
    8202:	28 e0       	ldi	r18, 0x08	; 8
    8204:	30 e0       	ldi	r19, 0x00	; 0
    8206:	05 c0       	rjmp	.+10     	; 0x8212 <vfprintf+0x566>
    8208:	20 e1       	ldi	r18, 0x10	; 16
    820a:	30 e0       	ldi	r19, 0x00	; 0
    820c:	02 c0       	rjmp	.+4      	; 0x8212 <vfprintf+0x566>
    820e:	20 e1       	ldi	r18, 0x10	; 16
    8210:	32 e0       	ldi	r19, 0x02	; 2
    8212:	56 01       	movw	r10, r12
    8214:	07 ff       	sbrs	r16, 7
    8216:	09 c0       	rjmp	.+18     	; 0x822a <vfprintf+0x57e>
    8218:	84 e0       	ldi	r24, 0x04	; 4
    821a:	a8 0e       	add	r10, r24
    821c:	b1 1c       	adc	r11, r1
    821e:	f6 01       	movw	r30, r12
    8220:	60 81       	ld	r22, Z
    8222:	71 81       	ldd	r23, Z+1	; 0x01
    8224:	82 81       	ldd	r24, Z+2	; 0x02
    8226:	93 81       	ldd	r25, Z+3	; 0x03
    8228:	08 c0       	rjmp	.+16     	; 0x823a <vfprintf+0x58e>
    822a:	f2 e0       	ldi	r31, 0x02	; 2
    822c:	af 0e       	add	r10, r31
    822e:	b1 1c       	adc	r11, r1
    8230:	f6 01       	movw	r30, r12
    8232:	60 81       	ld	r22, Z
    8234:	71 81       	ldd	r23, Z+1	; 0x01
    8236:	80 e0       	ldi	r24, 0x00	; 0
    8238:	90 e0       	ldi	r25, 0x00	; 0
    823a:	a3 01       	movw	r20, r6
    823c:	0e 94 a8 50 	call	0xa150	; 0xa150 <__ultoa_invert>
    8240:	c8 2e       	mov	r12, r24
    8242:	c6 18       	sub	r12, r6
    8244:	0f 77       	andi	r16, 0x7F	; 127
    8246:	90 2e       	mov	r9, r16
    8248:	96 fe       	sbrs	r9, 6
    824a:	0b c0       	rjmp	.+22     	; 0x8262 <vfprintf+0x5b6>
    824c:	09 2d       	mov	r16, r9
    824e:	0e 7f       	andi	r16, 0xFE	; 254
    8250:	c1 16       	cp	r12, r17
    8252:	50 f4       	brcc	.+20     	; 0x8268 <vfprintf+0x5bc>
    8254:	94 fe       	sbrs	r9, 4
    8256:	0a c0       	rjmp	.+20     	; 0x826c <vfprintf+0x5c0>
    8258:	92 fc       	sbrc	r9, 2
    825a:	08 c0       	rjmp	.+16     	; 0x826c <vfprintf+0x5c0>
    825c:	09 2d       	mov	r16, r9
    825e:	0e 7e       	andi	r16, 0xEE	; 238
    8260:	05 c0       	rjmp	.+10     	; 0x826c <vfprintf+0x5c0>
    8262:	dc 2c       	mov	r13, r12
    8264:	09 2d       	mov	r16, r9
    8266:	03 c0       	rjmp	.+6      	; 0x826e <vfprintf+0x5c2>
    8268:	dc 2c       	mov	r13, r12
    826a:	01 c0       	rjmp	.+2      	; 0x826e <vfprintf+0x5c2>
    826c:	d1 2e       	mov	r13, r17
    826e:	04 ff       	sbrs	r16, 4
    8270:	0d c0       	rjmp	.+26     	; 0x828c <vfprintf+0x5e0>
    8272:	fe 01       	movw	r30, r28
    8274:	ec 0d       	add	r30, r12
    8276:	f1 1d       	adc	r31, r1
    8278:	80 81       	ld	r24, Z
    827a:	80 33       	cpi	r24, 0x30	; 48
    827c:	11 f4       	brne	.+4      	; 0x8282 <vfprintf+0x5d6>
    827e:	09 7e       	andi	r16, 0xE9	; 233
    8280:	09 c0       	rjmp	.+18     	; 0x8294 <vfprintf+0x5e8>
    8282:	02 ff       	sbrs	r16, 2
    8284:	06 c0       	rjmp	.+12     	; 0x8292 <vfprintf+0x5e6>
    8286:	d3 94       	inc	r13
    8288:	d3 94       	inc	r13
    828a:	04 c0       	rjmp	.+8      	; 0x8294 <vfprintf+0x5e8>
    828c:	80 2f       	mov	r24, r16
    828e:	86 78       	andi	r24, 0x86	; 134
    8290:	09 f0       	breq	.+2      	; 0x8294 <vfprintf+0x5e8>
    8292:	d3 94       	inc	r13
    8294:	03 fd       	sbrc	r16, 3
    8296:	11 c0       	rjmp	.+34     	; 0x82ba <vfprintf+0x60e>
    8298:	00 ff       	sbrs	r16, 0
    829a:	06 c0       	rjmp	.+12     	; 0x82a8 <vfprintf+0x5fc>
    829c:	1c 2d       	mov	r17, r12
    829e:	d5 14       	cp	r13, r5
    82a0:	80 f4       	brcc	.+32     	; 0x82c2 <vfprintf+0x616>
    82a2:	15 0d       	add	r17, r5
    82a4:	1d 19       	sub	r17, r13
    82a6:	0d c0       	rjmp	.+26     	; 0x82c2 <vfprintf+0x616>
    82a8:	d5 14       	cp	r13, r5
    82aa:	58 f4       	brcc	.+22     	; 0x82c2 <vfprintf+0x616>
    82ac:	b7 01       	movw	r22, r14
    82ae:	80 e2       	ldi	r24, 0x20	; 32
    82b0:	90 e0       	ldi	r25, 0x00	; 0
    82b2:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    82b6:	d3 94       	inc	r13
    82b8:	f7 cf       	rjmp	.-18     	; 0x82a8 <vfprintf+0x5fc>
    82ba:	d5 14       	cp	r13, r5
    82bc:	10 f4       	brcc	.+4      	; 0x82c2 <vfprintf+0x616>
    82be:	5d 18       	sub	r5, r13
    82c0:	01 c0       	rjmp	.+2      	; 0x82c4 <vfprintf+0x618>
    82c2:	51 2c       	mov	r5, r1
    82c4:	04 ff       	sbrs	r16, 4
    82c6:	10 c0       	rjmp	.+32     	; 0x82e8 <vfprintf+0x63c>
    82c8:	b7 01       	movw	r22, r14
    82ca:	80 e3       	ldi	r24, 0x30	; 48
    82cc:	90 e0       	ldi	r25, 0x00	; 0
    82ce:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    82d2:	02 ff       	sbrs	r16, 2
    82d4:	17 c0       	rjmp	.+46     	; 0x8304 <vfprintf+0x658>
    82d6:	01 fd       	sbrc	r16, 1
    82d8:	03 c0       	rjmp	.+6      	; 0x82e0 <vfprintf+0x634>
    82da:	88 e7       	ldi	r24, 0x78	; 120
    82dc:	90 e0       	ldi	r25, 0x00	; 0
    82de:	02 c0       	rjmp	.+4      	; 0x82e4 <vfprintf+0x638>
    82e0:	88 e5       	ldi	r24, 0x58	; 88
    82e2:	90 e0       	ldi	r25, 0x00	; 0
    82e4:	b7 01       	movw	r22, r14
    82e6:	0c c0       	rjmp	.+24     	; 0x8300 <vfprintf+0x654>
    82e8:	80 2f       	mov	r24, r16
    82ea:	86 78       	andi	r24, 0x86	; 134
    82ec:	59 f0       	breq	.+22     	; 0x8304 <vfprintf+0x658>
    82ee:	01 ff       	sbrs	r16, 1
    82f0:	02 c0       	rjmp	.+4      	; 0x82f6 <vfprintf+0x64a>
    82f2:	8b e2       	ldi	r24, 0x2B	; 43
    82f4:	01 c0       	rjmp	.+2      	; 0x82f8 <vfprintf+0x64c>
    82f6:	80 e2       	ldi	r24, 0x20	; 32
    82f8:	07 fd       	sbrc	r16, 7
    82fa:	8d e2       	ldi	r24, 0x2D	; 45
    82fc:	b7 01       	movw	r22, r14
    82fe:	90 e0       	ldi	r25, 0x00	; 0
    8300:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    8304:	c1 16       	cp	r12, r17
    8306:	38 f4       	brcc	.+14     	; 0x8316 <vfprintf+0x66a>
    8308:	b7 01       	movw	r22, r14
    830a:	80 e3       	ldi	r24, 0x30	; 48
    830c:	90 e0       	ldi	r25, 0x00	; 0
    830e:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    8312:	11 50       	subi	r17, 0x01	; 1
    8314:	f7 cf       	rjmp	.-18     	; 0x8304 <vfprintf+0x658>
    8316:	ca 94       	dec	r12
    8318:	f3 01       	movw	r30, r6
    831a:	ec 0d       	add	r30, r12
    831c:	f1 1d       	adc	r31, r1
    831e:	80 81       	ld	r24, Z
    8320:	b7 01       	movw	r22, r14
    8322:	90 e0       	ldi	r25, 0x00	; 0
    8324:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    8328:	c1 10       	cpse	r12, r1
    832a:	f5 cf       	rjmp	.-22     	; 0x8316 <vfprintf+0x66a>
    832c:	15 c0       	rjmp	.+42     	; 0x8358 <vfprintf+0x6ac>
    832e:	f4 e0       	ldi	r31, 0x04	; 4
    8330:	f5 15       	cp	r31, r5
    8332:	60 f5       	brcc	.+88     	; 0x838c <vfprintf+0x6e0>
    8334:	84 e0       	ldi	r24, 0x04	; 4
    8336:	58 1a       	sub	r5, r24
    8338:	93 fe       	sbrs	r9, 3
    833a:	1f c0       	rjmp	.+62     	; 0x837a <vfprintf+0x6ce>
    833c:	01 11       	cpse	r16, r1
    833e:	27 c0       	rjmp	.+78     	; 0x838e <vfprintf+0x6e2>
    8340:	2c 85       	ldd	r18, Y+12	; 0x0c
    8342:	23 ff       	sbrs	r18, 3
    8344:	2a c0       	rjmp	.+84     	; 0x839a <vfprintf+0x6ee>
    8346:	0e e4       	ldi	r16, 0x4E	; 78
    8348:	13 e0       	ldi	r17, 0x03	; 3
    834a:	39 2d       	mov	r19, r9
    834c:	30 71       	andi	r19, 0x10	; 16
    834e:	93 2e       	mov	r9, r19
    8350:	f8 01       	movw	r30, r16
    8352:	84 91       	lpm	r24, Z
    8354:	81 11       	cpse	r24, r1
    8356:	24 c0       	rjmp	.+72     	; 0x83a0 <vfprintf+0x6f4>
    8358:	55 20       	and	r5, r5
    835a:	09 f4       	brne	.+2      	; 0x835e <vfprintf+0x6b2>
    835c:	e4 cc       	rjmp	.-1592   	; 0x7d26 <vfprintf+0x7a>
    835e:	b7 01       	movw	r22, r14
    8360:	80 e2       	ldi	r24, 0x20	; 32
    8362:	90 e0       	ldi	r25, 0x00	; 0
    8364:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    8368:	5a 94       	dec	r5
    836a:	f6 cf       	rjmp	.-20     	; 0x8358 <vfprintf+0x6ac>
    836c:	f7 01       	movw	r30, r14
    836e:	86 81       	ldd	r24, Z+6	; 0x06
    8370:	97 81       	ldd	r25, Z+7	; 0x07
    8372:	26 c0       	rjmp	.+76     	; 0x83c0 <vfprintf+0x714>
    8374:	8f ef       	ldi	r24, 0xFF	; 255
    8376:	9f ef       	ldi	r25, 0xFF	; 255
    8378:	23 c0       	rjmp	.+70     	; 0x83c0 <vfprintf+0x714>
    837a:	b7 01       	movw	r22, r14
    837c:	80 e2       	ldi	r24, 0x20	; 32
    837e:	90 e0       	ldi	r25, 0x00	; 0
    8380:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    8384:	5a 94       	dec	r5
    8386:	51 10       	cpse	r5, r1
    8388:	f8 cf       	rjmp	.-16     	; 0x837a <vfprintf+0x6ce>
    838a:	d8 cf       	rjmp	.-80     	; 0x833c <vfprintf+0x690>
    838c:	51 2c       	mov	r5, r1
    838e:	b7 01       	movw	r22, r14
    8390:	80 2f       	mov	r24, r16
    8392:	90 e0       	ldi	r25, 0x00	; 0
    8394:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    8398:	d3 cf       	rjmp	.-90     	; 0x8340 <vfprintf+0x694>
    839a:	02 e5       	ldi	r16, 0x52	; 82
    839c:	13 e0       	ldi	r17, 0x03	; 3
    839e:	d5 cf       	rjmp	.-86     	; 0x834a <vfprintf+0x69e>
    83a0:	91 10       	cpse	r9, r1
    83a2:	80 52       	subi	r24, 0x20	; 32
    83a4:	b7 01       	movw	r22, r14
    83a6:	90 e0       	ldi	r25, 0x00	; 0
    83a8:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <fputc>
    83ac:	0f 5f       	subi	r16, 0xFF	; 255
    83ae:	1f 4f       	sbci	r17, 0xFF	; 255
    83b0:	cf cf       	rjmp	.-98     	; 0x8350 <vfprintf+0x6a4>
    83b2:	23 e0       	ldi	r18, 0x03	; 3
    83b4:	25 15       	cp	r18, r5
    83b6:	10 f4       	brcc	.+4      	; 0x83bc <vfprintf+0x710>
    83b8:	83 e0       	ldi	r24, 0x03	; 3
    83ba:	bd cf       	rjmp	.-134    	; 0x8336 <vfprintf+0x68a>
    83bc:	51 2c       	mov	r5, r1
    83be:	c0 cf       	rjmp	.-128    	; 0x8340 <vfprintf+0x694>
    83c0:	60 96       	adiw	r28, 0x10	; 16
    83c2:	cd bf       	out	0x3d, r28	; 61
    83c4:	de bf       	out	0x3e, r29	; 62
    83c6:	df 91       	pop	r29
    83c8:	cf 91       	pop	r28
    83ca:	1f 91       	pop	r17
    83cc:	0f 91       	pop	r16
    83ce:	ff 90       	pop	r15
    83d0:	ef 90       	pop	r14
    83d2:	df 90       	pop	r13
    83d4:	cf 90       	pop	r12
    83d6:	bf 90       	pop	r11
    83d8:	af 90       	pop	r10
    83da:	9f 90       	pop	r9
    83dc:	8f 90       	pop	r8
    83de:	7f 90       	pop	r7
    83e0:	6f 90       	pop	r6
    83e2:	5f 90       	pop	r5
    83e4:	4f 90       	pop	r4
    83e6:	3f 90       	pop	r3
    83e8:	2f 90       	pop	r2
    83ea:	08 95       	ret

000083ec <putval>:
    83ec:	20 fd       	sbrc	r18, 0
    83ee:	09 c0       	rjmp	.+18     	; 0x8402 <putval+0x16>
    83f0:	fc 01       	movw	r30, r24
    83f2:	23 fd       	sbrc	r18, 3
    83f4:	05 c0       	rjmp	.+10     	; 0x8400 <putval+0x14>
    83f6:	22 ff       	sbrs	r18, 2
    83f8:	02 c0       	rjmp	.+4      	; 0x83fe <putval+0x12>
    83fa:	73 83       	std	Z+3, r23	; 0x03
    83fc:	62 83       	std	Z+2, r22	; 0x02
    83fe:	51 83       	std	Z+1, r21	; 0x01
    8400:	40 83       	st	Z, r20
    8402:	08 95       	ret

00008404 <mulacc>:
    8404:	44 fd       	sbrc	r20, 4
    8406:	17 c0       	rjmp	.+46     	; 0x8436 <mulacc+0x32>
    8408:	46 fd       	sbrc	r20, 6
    840a:	17 c0       	rjmp	.+46     	; 0x843a <mulacc+0x36>
    840c:	ab 01       	movw	r20, r22
    840e:	bc 01       	movw	r22, r24
    8410:	da 01       	movw	r26, r20
    8412:	fb 01       	movw	r30, r22
    8414:	aa 0f       	add	r26, r26
    8416:	bb 1f       	adc	r27, r27
    8418:	ee 1f       	adc	r30, r30
    841a:	ff 1f       	adc	r31, r31
    841c:	10 94       	com	r1
    841e:	d1 f7       	brne	.-12     	; 0x8414 <mulacc+0x10>
    8420:	4a 0f       	add	r20, r26
    8422:	5b 1f       	adc	r21, r27
    8424:	6e 1f       	adc	r22, r30
    8426:	7f 1f       	adc	r23, r31
    8428:	cb 01       	movw	r24, r22
    842a:	ba 01       	movw	r22, r20
    842c:	66 0f       	add	r22, r22
    842e:	77 1f       	adc	r23, r23
    8430:	88 1f       	adc	r24, r24
    8432:	99 1f       	adc	r25, r25
    8434:	09 c0       	rjmp	.+18     	; 0x8448 <mulacc+0x44>
    8436:	33 e0       	ldi	r19, 0x03	; 3
    8438:	01 c0       	rjmp	.+2      	; 0x843c <mulacc+0x38>
    843a:	34 e0       	ldi	r19, 0x04	; 4
    843c:	66 0f       	add	r22, r22
    843e:	77 1f       	adc	r23, r23
    8440:	88 1f       	adc	r24, r24
    8442:	99 1f       	adc	r25, r25
    8444:	31 50       	subi	r19, 0x01	; 1
    8446:	d1 f7       	brne	.-12     	; 0x843c <mulacc+0x38>
    8448:	62 0f       	add	r22, r18
    844a:	71 1d       	adc	r23, r1
    844c:	81 1d       	adc	r24, r1
    844e:	91 1d       	adc	r25, r1
    8450:	08 95       	ret

00008452 <skip_spaces>:
    8452:	0f 93       	push	r16
    8454:	1f 93       	push	r17
    8456:	cf 93       	push	r28
    8458:	df 93       	push	r29
    845a:	8c 01       	movw	r16, r24
    845c:	c8 01       	movw	r24, r16
    845e:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    8462:	ec 01       	movw	r28, r24
    8464:	97 fd       	sbrc	r25, 7
    8466:	08 c0       	rjmp	.+16     	; 0x8478 <skip_spaces+0x26>
    8468:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <isspace>
    846c:	89 2b       	or	r24, r25
    846e:	b1 f7       	brne	.-20     	; 0x845c <skip_spaces+0xa>
    8470:	b8 01       	movw	r22, r16
    8472:	ce 01       	movw	r24, r28
    8474:	0e 94 8f 50 	call	0xa11e	; 0xa11e <ungetc>
    8478:	ce 01       	movw	r24, r28
    847a:	df 91       	pop	r29
    847c:	cf 91       	pop	r28
    847e:	1f 91       	pop	r17
    8480:	0f 91       	pop	r16
    8482:	08 95       	ret

00008484 <conv_int>:
    8484:	8f 92       	push	r8
    8486:	9f 92       	push	r9
    8488:	af 92       	push	r10
    848a:	bf 92       	push	r11
    848c:	cf 92       	push	r12
    848e:	df 92       	push	r13
    8490:	ef 92       	push	r14
    8492:	ff 92       	push	r15
    8494:	0f 93       	push	r16
    8496:	1f 93       	push	r17
    8498:	cf 93       	push	r28
    849a:	df 93       	push	r29
    849c:	7c 01       	movw	r14, r24
    849e:	8b 01       	movw	r16, r22
    84a0:	6a 01       	movw	r12, r20
    84a2:	d2 2f       	mov	r29, r18
    84a4:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    84a8:	9c 01       	movw	r18, r24
    84aa:	33 27       	eor	r19, r19
    84ac:	2b 32       	cpi	r18, 0x2B	; 43
    84ae:	31 05       	cpc	r19, r1
    84b0:	21 f0       	breq	.+8      	; 0x84ba <conv_int+0x36>
    84b2:	2d 32       	cpi	r18, 0x2D	; 45
    84b4:	31 05       	cpc	r19, r1
    84b6:	59 f4       	brne	.+22     	; 0x84ce <conv_int+0x4a>
    84b8:	d0 68       	ori	r29, 0x80	; 128
    84ba:	01 50       	subi	r16, 0x01	; 1
    84bc:	11 09       	sbc	r17, r1
    84be:	11 f4       	brne	.+4      	; 0x84c4 <conv_int+0x40>
    84c0:	80 e0       	ldi	r24, 0x00	; 0
    84c2:	6b c0       	rjmp	.+214    	; 0x859a <conv_int+0x116>
    84c4:	c7 01       	movw	r24, r14
    84c6:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    84ca:	97 fd       	sbrc	r25, 7
    84cc:	f9 cf       	rjmp	.-14     	; 0x84c0 <conv_int+0x3c>
    84ce:	cd 2f       	mov	r28, r29
    84d0:	cd 7f       	andi	r28, 0xFD	; 253
    84d2:	2d 2f       	mov	r18, r29
    84d4:	20 73       	andi	r18, 0x30	; 48
    84d6:	19 f5       	brne	.+70     	; 0x851e <conv_int+0x9a>
    84d8:	80 33       	cpi	r24, 0x30	; 48
    84da:	09 f5       	brne	.+66     	; 0x851e <conv_int+0x9a>
    84dc:	58 01       	movw	r10, r16
    84de:	81 e0       	ldi	r24, 0x01	; 1
    84e0:	a8 1a       	sub	r10, r24
    84e2:	b1 08       	sbc	r11, r1
    84e4:	09 f4       	brne	.+2      	; 0x84e8 <conv_int+0x64>
    84e6:	45 c0       	rjmp	.+138    	; 0x8572 <conv_int+0xee>
    84e8:	c7 01       	movw	r24, r14
    84ea:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    84ee:	97 fd       	sbrc	r25, 7
    84f0:	40 c0       	rjmp	.+128    	; 0x8572 <conv_int+0xee>
    84f2:	9c 01       	movw	r18, r24
    84f4:	2f 7d       	andi	r18, 0xDF	; 223
    84f6:	33 27       	eor	r19, r19
    84f8:	28 35       	cpi	r18, 0x58	; 88
    84fa:	31 05       	cpc	r19, r1
    84fc:	51 f4       	brne	.+20     	; 0x8512 <conv_int+0x8e>
    84fe:	c2 64       	ori	r28, 0x42	; 66
    8500:	02 50       	subi	r16, 0x02	; 2
    8502:	11 09       	sbc	r17, r1
    8504:	b1 f1       	breq	.+108    	; 0x8572 <conv_int+0xee>
    8506:	c7 01       	movw	r24, r14
    8508:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    850c:	97 ff       	sbrs	r25, 7
    850e:	07 c0       	rjmp	.+14     	; 0x851e <conv_int+0x9a>
    8510:	30 c0       	rjmp	.+96     	; 0x8572 <conv_int+0xee>
    8512:	d6 ff       	sbrs	r29, 6
    8514:	02 c0       	rjmp	.+4      	; 0x851a <conv_int+0x96>
    8516:	c2 60       	ori	r28, 0x02	; 2
    8518:	01 c0       	rjmp	.+2      	; 0x851c <conv_int+0x98>
    851a:	c2 61       	ori	r28, 0x12	; 18
    851c:	85 01       	movw	r16, r10
    851e:	81 2c       	mov	r8, r1
    8520:	91 2c       	mov	r9, r1
    8522:	54 01       	movw	r10, r8
    8524:	20 ed       	ldi	r18, 0xD0	; 208
    8526:	28 0f       	add	r18, r24
    8528:	28 30       	cpi	r18, 0x08	; 8
    852a:	80 f0       	brcs	.+32     	; 0x854c <conv_int+0xc8>
    852c:	c4 ff       	sbrs	r28, 4
    852e:	04 c0       	rjmp	.+8      	; 0x8538 <conv_int+0xb4>
    8530:	b7 01       	movw	r22, r14
    8532:	0e 94 8f 50 	call	0xa11e	; 0xa11e <ungetc>
    8536:	1a c0       	rjmp	.+52     	; 0x856c <conv_int+0xe8>
    8538:	2a 30       	cpi	r18, 0x0A	; 10
    853a:	40 f0       	brcs	.+16     	; 0x854c <conv_int+0xc8>
    853c:	c6 ff       	sbrs	r28, 6
    853e:	f8 cf       	rjmp	.-16     	; 0x8530 <conv_int+0xac>
    8540:	2f 7d       	andi	r18, 0xDF	; 223
    8542:	3f ee       	ldi	r19, 0xEF	; 239
    8544:	32 0f       	add	r19, r18
    8546:	36 30       	cpi	r19, 0x06	; 6
    8548:	98 f7       	brcc	.-26     	; 0x8530 <conv_int+0xac>
    854a:	27 50       	subi	r18, 0x07	; 7
    854c:	4c 2f       	mov	r20, r28
    854e:	c5 01       	movw	r24, r10
    8550:	b4 01       	movw	r22, r8
    8552:	0e 94 02 42 	call	0x8404	; 0x8404 <mulacc>
    8556:	4b 01       	movw	r8, r22
    8558:	5c 01       	movw	r10, r24
    855a:	c2 60       	ori	r28, 0x02	; 2
    855c:	01 50       	subi	r16, 0x01	; 1
    855e:	11 09       	sbc	r17, r1
    8560:	59 f0       	breq	.+22     	; 0x8578 <conv_int+0xf4>
    8562:	c7 01       	movw	r24, r14
    8564:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    8568:	97 ff       	sbrs	r25, 7
    856a:	dc cf       	rjmp	.-72     	; 0x8524 <conv_int+0xa0>
    856c:	c1 fd       	sbrc	r28, 1
    856e:	04 c0       	rjmp	.+8      	; 0x8578 <conv_int+0xf4>
    8570:	a7 cf       	rjmp	.-178    	; 0x84c0 <conv_int+0x3c>
    8572:	81 2c       	mov	r8, r1
    8574:	91 2c       	mov	r9, r1
    8576:	54 01       	movw	r10, r8
    8578:	c7 ff       	sbrs	r28, 7
    857a:	08 c0       	rjmp	.+16     	; 0x858c <conv_int+0x108>
    857c:	b0 94       	com	r11
    857e:	a0 94       	com	r10
    8580:	90 94       	com	r9
    8582:	80 94       	com	r8
    8584:	81 1c       	adc	r8, r1
    8586:	91 1c       	adc	r9, r1
    8588:	a1 1c       	adc	r10, r1
    858a:	b1 1c       	adc	r11, r1
    858c:	2c 2f       	mov	r18, r28
    858e:	b5 01       	movw	r22, r10
    8590:	a4 01       	movw	r20, r8
    8592:	c6 01       	movw	r24, r12
    8594:	0e 94 f6 41 	call	0x83ec	; 0x83ec <putval>
    8598:	81 e0       	ldi	r24, 0x01	; 1
    859a:	df 91       	pop	r29
    859c:	cf 91       	pop	r28
    859e:	1f 91       	pop	r17
    85a0:	0f 91       	pop	r16
    85a2:	ff 90       	pop	r15
    85a4:	ef 90       	pop	r14
    85a6:	df 90       	pop	r13
    85a8:	cf 90       	pop	r12
    85aa:	bf 90       	pop	r11
    85ac:	af 90       	pop	r10
    85ae:	9f 90       	pop	r9
    85b0:	8f 90       	pop	r8
    85b2:	08 95       	ret

000085b4 <conv_brk>:
    85b4:	4f 92       	push	r4
    85b6:	5f 92       	push	r5
    85b8:	6f 92       	push	r6
    85ba:	7f 92       	push	r7
    85bc:	8f 92       	push	r8
    85be:	9f 92       	push	r9
    85c0:	af 92       	push	r10
    85c2:	bf 92       	push	r11
    85c4:	cf 92       	push	r12
    85c6:	df 92       	push	r13
    85c8:	ef 92       	push	r14
    85ca:	ff 92       	push	r15
    85cc:	0f 93       	push	r16
    85ce:	1f 93       	push	r17
    85d0:	cf 93       	push	r28
    85d2:	df 93       	push	r29
    85d4:	cd b7       	in	r28, 0x3d	; 61
    85d6:	de b7       	in	r29, 0x3e	; 62
    85d8:	a0 97       	sbiw	r28, 0x20	; 32
    85da:	cd bf       	out	0x3d, r28	; 61
    85dc:	de bf       	out	0x3e, r29	; 62
    85de:	5c 01       	movw	r10, r24
    85e0:	4b 01       	movw	r8, r22
    85e2:	7a 01       	movw	r14, r20
    85e4:	8e 01       	movw	r16, r28
    85e6:	0f 5f       	subi	r16, 0xFF	; 255
    85e8:	1f 4f       	sbci	r17, 0xFF	; 255
    85ea:	68 01       	movw	r12, r16
    85ec:	80 e2       	ldi	r24, 0x20	; 32
    85ee:	f8 01       	movw	r30, r16
    85f0:	11 92       	st	Z+, r1
    85f2:	8a 95       	dec	r24
    85f4:	e9 f7       	brne	.-6      	; 0x85f0 <conv_brk+0x3c>
    85f6:	f5 01       	movw	r30, r10
    85f8:	53 80       	ldd	r5, Z+3	; 0x03
    85fa:	40 e0       	ldi	r20, 0x00	; 0
    85fc:	50 e0       	ldi	r21, 0x00	; 0
    85fe:	61 2c       	mov	r6, r1
    8600:	90 e0       	ldi	r25, 0x00	; 0
    8602:	71 2c       	mov	r7, r1
    8604:	a1 e0       	ldi	r26, 0x01	; 1
    8606:	b0 e0       	ldi	r27, 0x00	; 0
    8608:	f9 01       	movw	r30, r18
    860a:	53 fc       	sbrc	r5, 3
    860c:	85 91       	lpm	r24, Z+
    860e:	53 fe       	sbrs	r5, 3
    8610:	81 91       	ld	r24, Z+
    8612:	8f 01       	movw	r16, r30
    8614:	48 2e       	mov	r4, r24
    8616:	9f 01       	movw	r18, r30
    8618:	81 11       	cpse	r24, r1
    861a:	03 c0       	rjmp	.+6      	; 0x8622 <conv_brk+0x6e>
    861c:	80 e0       	ldi	r24, 0x00	; 0
    861e:	90 e0       	ldi	r25, 0x00	; 0
    8620:	96 c0       	rjmp	.+300    	; 0x874e <conv_brk+0x19a>
    8622:	8e 35       	cpi	r24, 0x5E	; 94
    8624:	19 f4       	brne	.+6      	; 0x862c <conv_brk+0x78>
    8626:	41 15       	cp	r20, r1
    8628:	51 05       	cpc	r21, r1
    862a:	51 f1       	breq	.+84     	; 0x8680 <conv_brk+0xcc>
    862c:	67 2d       	mov	r22, r7
    862e:	70 e0       	ldi	r23, 0x00	; 0
    8630:	64 17       	cp	r22, r20
    8632:	75 07       	cpc	r23, r21
    8634:	3c f4       	brge	.+14     	; 0x8644 <conv_brk+0x90>
    8636:	8d 35       	cpi	r24, 0x5D	; 93
    8638:	61 f1       	breq	.+88     	; 0x8692 <conv_brk+0xde>
    863a:	8d 32       	cpi	r24, 0x2D	; 45
    863c:	19 f4       	brne	.+6      	; 0x8644 <conv_brk+0x90>
    863e:	99 23       	and	r25, r25
    8640:	11 f1       	breq	.+68     	; 0x8686 <conv_brk+0xd2>
    8642:	03 c0       	rjmp	.+6      	; 0x864a <conv_brk+0x96>
    8644:	99 23       	and	r25, r25
    8646:	09 f4       	brne	.+2      	; 0x864a <conv_brk+0x96>
    8648:	6d c0       	rjmp	.+218    	; 0x8724 <conv_brk+0x170>
    864a:	84 2d       	mov	r24, r4
    864c:	86 95       	lsr	r24
    864e:	86 95       	lsr	r24
    8650:	86 95       	lsr	r24
    8652:	f6 01       	movw	r30, r12
    8654:	e8 0f       	add	r30, r24
    8656:	f1 1d       	adc	r31, r1
    8658:	84 2d       	mov	r24, r4
    865a:	87 70       	andi	r24, 0x07	; 7
    865c:	8d 01       	movw	r16, r26
    865e:	02 c0       	rjmp	.+4      	; 0x8664 <conv_brk+0xb0>
    8660:	00 0f       	add	r16, r16
    8662:	11 1f       	adc	r17, r17
    8664:	8a 95       	dec	r24
    8666:	e2 f7       	brpl	.-8      	; 0x8660 <conv_brk+0xac>
    8668:	c8 01       	movw	r24, r16
    866a:	90 81       	ld	r25, Z
    866c:	89 2b       	or	r24, r25
    866e:	80 83       	st	Z, r24
    8670:	64 14       	cp	r6, r4
    8672:	59 f0       	breq	.+22     	; 0x868a <conv_brk+0xd6>
    8674:	46 14       	cp	r4, r6
    8676:	10 f4       	brcc	.+4      	; 0x867c <conv_brk+0xc8>
    8678:	43 94       	inc	r4
    867a:	e7 cf       	rjmp	.-50     	; 0x864a <conv_brk+0x96>
    867c:	4a 94       	dec	r4
    867e:	e5 cf       	rjmp	.-54     	; 0x864a <conv_brk+0x96>
    8680:	77 24       	eor	r7, r7
    8682:	73 94       	inc	r7
    8684:	03 c0       	rjmp	.+6      	; 0x868c <conv_brk+0xd8>
    8686:	91 e0       	ldi	r25, 0x01	; 1
    8688:	01 c0       	rjmp	.+2      	; 0x868c <conv_brk+0xd8>
    868a:	90 e0       	ldi	r25, 0x00	; 0
    868c:	4f 5f       	subi	r20, 0xFF	; 255
    868e:	5f 4f       	sbci	r21, 0xFF	; 255
    8690:	bb cf       	rjmp	.-138    	; 0x8608 <conv_brk+0x54>
    8692:	99 23       	and	r25, r25
    8694:	19 f0       	breq	.+6      	; 0x869c <conv_brk+0xe8>
    8696:	8e 81       	ldd	r24, Y+6	; 0x06
    8698:	80 62       	ori	r24, 0x20	; 32
    869a:	8e 83       	std	Y+6, r24	; 0x06
    869c:	71 10       	cpse	r7, r1
    869e:	03 c0       	rjmp	.+6      	; 0x86a6 <conv_brk+0xf2>
    86a0:	77 24       	eor	r7, r7
    86a2:	73 94       	inc	r7
    86a4:	19 c0       	rjmp	.+50     	; 0x86d8 <conv_brk+0x124>
    86a6:	f6 01       	movw	r30, r12
    86a8:	9e 01       	movw	r18, r28
    86aa:	2f 5d       	subi	r18, 0xDF	; 223
    86ac:	3f 4f       	sbci	r19, 0xFF	; 255
    86ae:	80 81       	ld	r24, Z
    86b0:	80 95       	com	r24
    86b2:	81 93       	st	Z+, r24
    86b4:	2e 17       	cp	r18, r30
    86b6:	3f 07       	cpc	r19, r31
    86b8:	d1 f7       	brne	.-12     	; 0x86ae <conv_brk+0xfa>
    86ba:	f2 cf       	rjmp	.-28     	; 0x86a0 <conv_brk+0xec>
    86bc:	e1 14       	cp	r14, r1
    86be:	f1 04       	cpc	r15, r1
    86c0:	31 f0       	breq	.+12     	; 0x86ce <conv_brk+0x11a>
    86c2:	f7 01       	movw	r30, r14
    86c4:	80 83       	st	Z, r24
    86c6:	b7 01       	movw	r22, r14
    86c8:	6f 5f       	subi	r22, 0xFF	; 255
    86ca:	7f 4f       	sbci	r23, 0xFF	; 255
    86cc:	7b 01       	movw	r14, r22
    86ce:	71 e0       	ldi	r23, 0x01	; 1
    86d0:	87 1a       	sub	r8, r23
    86d2:	91 08       	sbc	r9, r1
    86d4:	71 2c       	mov	r7, r1
    86d6:	f9 f0       	breq	.+62     	; 0x8716 <conv_brk+0x162>
    86d8:	c5 01       	movw	r24, r10
    86da:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    86de:	97 fd       	sbrc	r25, 7
    86e0:	18 c0       	rjmp	.+48     	; 0x8712 <conv_brk+0x15e>
    86e2:	fc 01       	movw	r30, r24
    86e4:	ff 27       	eor	r31, r31
    86e6:	23 e0       	ldi	r18, 0x03	; 3
    86e8:	f5 95       	asr	r31
    86ea:	e7 95       	ror	r30
    86ec:	2a 95       	dec	r18
    86ee:	e1 f7       	brne	.-8      	; 0x86e8 <conv_brk+0x134>
    86f0:	ec 0d       	add	r30, r12
    86f2:	fd 1d       	adc	r31, r13
    86f4:	20 81       	ld	r18, Z
    86f6:	30 e0       	ldi	r19, 0x00	; 0
    86f8:	ac 01       	movw	r20, r24
    86fa:	47 70       	andi	r20, 0x07	; 7
    86fc:	55 27       	eor	r21, r21
    86fe:	02 c0       	rjmp	.+4      	; 0x8704 <conv_brk+0x150>
    8700:	35 95       	asr	r19
    8702:	27 95       	ror	r18
    8704:	4a 95       	dec	r20
    8706:	e2 f7       	brpl	.-8      	; 0x8700 <conv_brk+0x14c>
    8708:	20 fd       	sbrc	r18, 0
    870a:	d8 cf       	rjmp	.-80     	; 0x86bc <conv_brk+0x108>
    870c:	b5 01       	movw	r22, r10
    870e:	0e 94 8f 50 	call	0xa11e	; 0xa11e <ungetc>
    8712:	71 10       	cpse	r7, r1
    8714:	83 cf       	rjmp	.-250    	; 0x861c <conv_brk+0x68>
    8716:	e1 14       	cp	r14, r1
    8718:	f1 04       	cpc	r15, r1
    871a:	11 f0       	breq	.+4      	; 0x8720 <conv_brk+0x16c>
    871c:	f7 01       	movw	r30, r14
    871e:	10 82       	st	Z, r1
    8720:	c8 01       	movw	r24, r16
    8722:	15 c0       	rjmp	.+42     	; 0x874e <conv_brk+0x19a>
    8724:	68 2f       	mov	r22, r24
    8726:	66 95       	lsr	r22
    8728:	66 95       	lsr	r22
    872a:	66 95       	lsr	r22
    872c:	f6 01       	movw	r30, r12
    872e:	e6 0f       	add	r30, r22
    8730:	f1 1d       	adc	r31, r1
    8732:	68 2f       	mov	r22, r24
    8734:	67 70       	andi	r22, 0x07	; 7
    8736:	8d 01       	movw	r16, r26
    8738:	02 c0       	rjmp	.+4      	; 0x873e <conv_brk+0x18a>
    873a:	00 0f       	add	r16, r16
    873c:	11 1f       	adc	r17, r17
    873e:	6a 95       	dec	r22
    8740:	e2 f7       	brpl	.-8      	; 0x873a <conv_brk+0x186>
    8742:	b8 01       	movw	r22, r16
    8744:	70 81       	ld	r23, Z
    8746:	67 2b       	or	r22, r23
    8748:	60 83       	st	Z, r22
    874a:	68 2e       	mov	r6, r24
    874c:	9f cf       	rjmp	.-194    	; 0x868c <conv_brk+0xd8>
    874e:	a0 96       	adiw	r28, 0x20	; 32
    8750:	cd bf       	out	0x3d, r28	; 61
    8752:	de bf       	out	0x3e, r29	; 62
    8754:	df 91       	pop	r29
    8756:	cf 91       	pop	r28
    8758:	1f 91       	pop	r17
    875a:	0f 91       	pop	r16
    875c:	ff 90       	pop	r15
    875e:	ef 90       	pop	r14
    8760:	df 90       	pop	r13
    8762:	cf 90       	pop	r12
    8764:	bf 90       	pop	r11
    8766:	af 90       	pop	r10
    8768:	9f 90       	pop	r9
    876a:	8f 90       	pop	r8
    876c:	7f 90       	pop	r7
    876e:	6f 90       	pop	r6
    8770:	5f 90       	pop	r5
    8772:	4f 90       	pop	r4
    8774:	08 95       	ret

00008776 <conv_flt>:
    8776:	2f 92       	push	r2
    8778:	3f 92       	push	r3
    877a:	4f 92       	push	r4
    877c:	5f 92       	push	r5
    877e:	6f 92       	push	r6
    8780:	7f 92       	push	r7
    8782:	9f 92       	push	r9
    8784:	af 92       	push	r10
    8786:	bf 92       	push	r11
    8788:	cf 92       	push	r12
    878a:	df 92       	push	r13
    878c:	ef 92       	push	r14
    878e:	ff 92       	push	r15
    8790:	0f 93       	push	r16
    8792:	1f 93       	push	r17
    8794:	cf 93       	push	r28
    8796:	df 93       	push	r29
    8798:	6c 01       	movw	r12, r24
    879a:	8b 01       	movw	r16, r22
    879c:	1a 01       	movw	r2, r20
    879e:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    87a2:	ec 01       	movw	r28, r24
    87a4:	99 27       	eor	r25, r25
    87a6:	8b 32       	cpi	r24, 0x2B	; 43
    87a8:	91 05       	cpc	r25, r1
    87aa:	29 f0       	breq	.+10     	; 0x87b6 <conv_flt+0x40>
    87ac:	8d 97       	sbiw	r24, 0x2d	; 45
    87ae:	81 f4       	brne	.+32     	; 0x87d0 <conv_flt+0x5a>
    87b0:	30 e8       	ldi	r19, 0x80	; 128
    87b2:	93 2e       	mov	r9, r19
    87b4:	01 c0       	rjmp	.+2      	; 0x87b8 <conv_flt+0x42>
    87b6:	91 2c       	mov	r9, r1
    87b8:	01 50       	subi	r16, 0x01	; 1
    87ba:	11 09       	sbc	r17, r1
    87bc:	11 f4       	brne	.+4      	; 0x87c2 <conv_flt+0x4c>
    87be:	80 e0       	ldi	r24, 0x00	; 0
    87c0:	0c c1       	rjmp	.+536    	; 0x89da <conv_flt+0x264>
    87c2:	c6 01       	movw	r24, r12
    87c4:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    87c8:	ec 01       	movw	r28, r24
    87ca:	97 ff       	sbrs	r25, 7
    87cc:	02 c0       	rjmp	.+4      	; 0x87d2 <conv_flt+0x5c>
    87ce:	f7 cf       	rjmp	.-18     	; 0x87be <conv_flt+0x48>
    87d0:	91 2c       	mov	r9, r1
    87d2:	ce 01       	movw	r24, r28
    87d4:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <tolower>
    87d8:	89 36       	cpi	r24, 0x69	; 105
    87da:	91 05       	cpc	r25, r1
    87dc:	31 f0       	breq	.+12     	; 0x87ea <conv_flt+0x74>
    87de:	8e 36       	cpi	r24, 0x6E	; 110
    87e0:	91 05       	cpc	r25, r1
    87e2:	99 f5       	brne	.+102    	; 0x884a <conv_flt+0xd4>
    87e4:	cb ee       	ldi	r28, 0xEB	; 235
    87e6:	df e0       	ldi	r29, 0x0F	; 15
    87e8:	02 c0       	rjmp	.+4      	; 0x87ee <conv_flt+0x78>
    87ea:	ce ee       	ldi	r28, 0xEE	; 238
    87ec:	df e0       	ldi	r29, 0x0F	; 15
    87ee:	21 96       	adiw	r28, 0x01	; 1
    87f0:	fe 01       	movw	r30, r28
    87f2:	31 97       	sbiw	r30, 0x01	; 1
    87f4:	b4 90       	lpm	r11, Z
    87f6:	bb 20       	and	r11, r11
    87f8:	c9 f0       	breq	.+50     	; 0x882c <conv_flt+0xb6>
    87fa:	01 50       	subi	r16, 0x01	; 1
    87fc:	11 09       	sbc	r17, r1
    87fe:	91 f0       	breq	.+36     	; 0x8824 <conv_flt+0xae>
    8800:	c6 01       	movw	r24, r12
    8802:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    8806:	7c 01       	movw	r14, r24
    8808:	97 fd       	sbrc	r25, 7
    880a:	0c c0       	rjmp	.+24     	; 0x8824 <conv_flt+0xae>
    880c:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <tolower>
    8810:	99 27       	eor	r25, r25
    8812:	eb 2d       	mov	r30, r11
    8814:	f0 e0       	ldi	r31, 0x00	; 0
    8816:	8e 17       	cp	r24, r30
    8818:	9f 07       	cpc	r25, r31
    881a:	49 f3       	breq	.-46     	; 0x87ee <conv_flt+0x78>
    881c:	b6 01       	movw	r22, r12
    881e:	c7 01       	movw	r24, r14
    8820:	0e 94 8f 50 	call	0xa11e	; 0xa11e <ungetc>
    8824:	c1 5f       	subi	r28, 0xF1	; 241
    8826:	df 40       	sbci	r29, 0x0F	; 15
    8828:	51 f6       	brne	.-108    	; 0x87be <conv_flt+0x48>
    882a:	03 c0       	rjmp	.+6      	; 0x8832 <conv_flt+0xbc>
    882c:	ce 5e       	subi	r28, 0xEE	; 238
    882e:	df 40       	sbci	r29, 0x0F	; 15
    8830:	29 f0       	breq	.+10     	; 0x883c <conv_flt+0xc6>
    8832:	80 e0       	ldi	r24, 0x00	; 0
    8834:	90 e0       	ldi	r25, 0x00	; 0
    8836:	a0 e8       	ldi	r26, 0x80	; 128
    8838:	bf e7       	ldi	r27, 0x7F	; 127
    883a:	04 c0       	rjmp	.+8      	; 0x8844 <conv_flt+0xce>
    883c:	80 e0       	ldi	r24, 0x00	; 0
    883e:	90 e0       	ldi	r25, 0x00	; 0
    8840:	a0 ec       	ldi	r26, 0xC0	; 192
    8842:	bf e7       	ldi	r27, 0x7F	; 127
    8844:	bc 01       	movw	r22, r24
    8846:	cd 01       	movw	r24, r26
    8848:	b8 c0       	rjmp	.+368    	; 0x89ba <conv_flt+0x244>
    884a:	41 2c       	mov	r4, r1
    884c:	51 2c       	mov	r5, r1
    884e:	32 01       	movw	r6, r4
    8850:	e1 2c       	mov	r14, r1
    8852:	f1 2c       	mov	r15, r1
    8854:	2c 2f       	mov	r18, r28
    8856:	20 53       	subi	r18, 0x30	; 48
    8858:	2a 30       	cpi	r18, 0x0A	; 10
    885a:	10 f5       	brcc	.+68     	; 0x88a0 <conv_flt+0x12a>
    885c:	e9 2d       	mov	r30, r9
    885e:	e2 60       	ori	r30, 0x02	; 2
    8860:	be 2e       	mov	r11, r30
    8862:	89 2d       	mov	r24, r9
    8864:	88 70       	andi	r24, 0x08	; 8
    8866:	92 fe       	sbrs	r9, 2
    8868:	06 c0       	rjmp	.+12     	; 0x8876 <conv_flt+0x100>
    886a:	81 11       	cpse	r24, r1
    886c:	20 c0       	rjmp	.+64     	; 0x88ae <conv_flt+0x138>
    886e:	ff ef       	ldi	r31, 0xFF	; 255
    8870:	ef 1a       	sub	r14, r31
    8872:	ff 0a       	sbc	r15, r31
    8874:	1c c0       	rjmp	.+56     	; 0x88ae <conv_flt+0x138>
    8876:	88 23       	and	r24, r24
    8878:	19 f0       	breq	.+6      	; 0x8880 <conv_flt+0x10a>
    887a:	81 e0       	ldi	r24, 0x01	; 1
    887c:	e8 1a       	sub	r14, r24
    887e:	f1 08       	sbc	r15, r1
    8880:	40 e2       	ldi	r20, 0x20	; 32
    8882:	c3 01       	movw	r24, r6
    8884:	b2 01       	movw	r22, r4
    8886:	0e 94 02 42 	call	0x8404	; 0x8404 <mulacc>
    888a:	2b 01       	movw	r4, r22
    888c:	3c 01       	movw	r6, r24
    888e:	68 39       	cpi	r22, 0x98	; 152
    8890:	79 49       	sbci	r23, 0x99	; 153
    8892:	89 49       	sbci	r24, 0x99	; 153
    8894:	99 41       	sbci	r25, 0x19	; 25
    8896:	58 f0       	brcs	.+22     	; 0x88ae <conv_flt+0x138>
    8898:	f9 2d       	mov	r31, r9
    889a:	f6 60       	ori	r31, 0x06	; 6
    889c:	bf 2e       	mov	r11, r31
    889e:	07 c0       	rjmp	.+14     	; 0x88ae <conv_flt+0x138>
    88a0:	2e 3f       	cpi	r18, 0xFE	; 254
    88a2:	89 f4       	brne	.+34     	; 0x88c6 <conv_flt+0x150>
    88a4:	93 fc       	sbrc	r9, 3
    88a6:	0f c0       	rjmp	.+30     	; 0x88c6 <conv_flt+0x150>
    88a8:	29 2d       	mov	r18, r9
    88aa:	28 60       	ori	r18, 0x08	; 8
    88ac:	b2 2e       	mov	r11, r18
    88ae:	01 50       	subi	r16, 0x01	; 1
    88b0:	11 09       	sbc	r17, r1
    88b2:	41 f0       	breq	.+16     	; 0x88c4 <conv_flt+0x14e>
    88b4:	c6 01       	movw	r24, r12
    88b6:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    88ba:	ec 01       	movw	r28, r24
    88bc:	9b 2c       	mov	r9, r11
    88be:	97 ff       	sbrs	r25, 7
    88c0:	c9 cf       	rjmp	.-110    	; 0x8854 <conv_flt+0xde>
    88c2:	01 c0       	rjmp	.+2      	; 0x88c6 <conv_flt+0x150>
    88c4:	9b 2c       	mov	r9, r11
    88c6:	91 fe       	sbrs	r9, 1
    88c8:	7a cf       	rjmp	.-268    	; 0x87be <conv_flt+0x48>
    88ca:	ce 01       	movw	r24, r28
    88cc:	8f 7d       	andi	r24, 0xDF	; 223
    88ce:	99 27       	eor	r25, r25
    88d0:	85 34       	cpi	r24, 0x45	; 69
    88d2:	91 05       	cpc	r25, r1
    88d4:	09 f0       	breq	.+2      	; 0x88d8 <conv_flt+0x162>
    88d6:	42 c0       	rjmp	.+132    	; 0x895c <conv_flt+0x1e6>
    88d8:	58 01       	movw	r10, r16
    88da:	81 e0       	ldi	r24, 0x01	; 1
    88dc:	a8 1a       	sub	r10, r24
    88de:	b1 08       	sbc	r11, r1
    88e0:	09 f4       	brne	.+2      	; 0x88e4 <conv_flt+0x16e>
    88e2:	6d cf       	rjmp	.-294    	; 0x87be <conv_flt+0x48>
    88e4:	c6 01       	movw	r24, r12
    88e6:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    88ea:	ec 01       	movw	r28, r24
    88ec:	97 fd       	sbrc	r25, 7
    88ee:	67 cf       	rjmp	.-306    	; 0x87be <conv_flt+0x48>
    88f0:	99 27       	eor	r25, r25
    88f2:	8b 32       	cpi	r24, 0x2B	; 43
    88f4:	91 05       	cpc	r25, r1
    88f6:	29 f0       	breq	.+10     	; 0x8902 <conv_flt+0x18c>
    88f8:	8d 97       	sbiw	r24, 0x2d	; 45
    88fa:	69 f4       	brne	.+26     	; 0x8916 <conv_flt+0x1a0>
    88fc:	e9 2d       	mov	r30, r9
    88fe:	e0 61       	ori	r30, 0x10	; 16
    8900:	9e 2e       	mov	r9, r30
    8902:	58 01       	movw	r10, r16
    8904:	f2 e0       	ldi	r31, 0x02	; 2
    8906:	af 1a       	sub	r10, r31
    8908:	b1 08       	sbc	r11, r1
    890a:	09 f4       	brne	.+2      	; 0x890e <conv_flt+0x198>
    890c:	58 cf       	rjmp	.-336    	; 0x87be <conv_flt+0x48>
    890e:	c6 01       	movw	r24, r12
    8910:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    8914:	ec 01       	movw	r28, r24
    8916:	ce 01       	movw	r24, r28
    8918:	c0 97       	sbiw	r24, 0x30	; 48
    891a:	0a 97       	sbiw	r24, 0x0a	; 10
    891c:	08 f0       	brcs	.+2      	; 0x8920 <conv_flt+0x1aa>
    891e:	4f cf       	rjmp	.-354    	; 0x87be <conv_flt+0x48>
    8920:	85 01       	movw	r16, r10
    8922:	a1 2c       	mov	r10, r1
    8924:	b1 2c       	mov	r11, r1
    8926:	b5 01       	movw	r22, r10
    8928:	bb 0c       	add	r11, r11
    892a:	88 0b       	sbc	r24, r24
    892c:	99 0b       	sbc	r25, r25
    892e:	2c 2f       	mov	r18, r28
    8930:	20 53       	subi	r18, 0x30	; 48
    8932:	40 e2       	ldi	r20, 0x20	; 32
    8934:	0e 94 02 42 	call	0x8404	; 0x8404 <mulacc>
    8938:	5b 01       	movw	r10, r22
    893a:	01 50       	subi	r16, 0x01	; 1
    893c:	11 09       	sbc	r17, r1
    893e:	39 f0       	breq	.+14     	; 0x894e <conv_flt+0x1d8>
    8940:	c6 01       	movw	r24, r12
    8942:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    8946:	ec 01       	movw	r28, r24
    8948:	c0 97       	sbiw	r24, 0x30	; 48
    894a:	0a 97       	sbiw	r24, 0x0a	; 10
    894c:	60 f3       	brcs	.-40     	; 0x8926 <conv_flt+0x1b0>
    894e:	94 fe       	sbrs	r9, 4
    8950:	03 c0       	rjmp	.+6      	; 0x8958 <conv_flt+0x1e2>
    8952:	b1 94       	neg	r11
    8954:	a1 94       	neg	r10
    8956:	b1 08       	sbc	r11, r1
    8958:	ea 0c       	add	r14, r10
    895a:	fb 1c       	adc	r15, r11
    895c:	01 2b       	or	r16, r17
    895e:	31 f0       	breq	.+12     	; 0x896c <conv_flt+0x1f6>
    8960:	d7 fd       	sbrc	r29, 7
    8962:	04 c0       	rjmp	.+8      	; 0x896c <conv_flt+0x1f6>
    8964:	b6 01       	movw	r22, r12
    8966:	ce 01       	movw	r24, r28
    8968:	0e 94 8f 50 	call	0xa11e	; 0xa11e <ungetc>
    896c:	c3 01       	movw	r24, r6
    896e:	b2 01       	movw	r22, r4
    8970:	0e 94 0e 48 	call	0x901c	; 0x901c <__floatunsisf>
    8974:	f7 fe       	sbrs	r15, 7
    8976:	06 c0       	rjmp	.+12     	; 0x8984 <conv_flt+0x20e>
    8978:	f1 94       	neg	r15
    897a:	e1 94       	neg	r14
    897c:	f1 08       	sbc	r15, r1
    897e:	ca e0       	ldi	r28, 0x0A	; 10
    8980:	d0 e1       	ldi	r29, 0x10	; 16
    8982:	02 c0       	rjmp	.+4      	; 0x8988 <conv_flt+0x212>
    8984:	c2 e2       	ldi	r28, 0x22	; 34
    8986:	d0 e1       	ldi	r29, 0x10	; 16
    8988:	6e 01       	movw	r12, r28
    898a:	28 e1       	ldi	r18, 0x18	; 24
    898c:	c2 1a       	sub	r12, r18
    898e:	d1 08       	sbc	r13, r1
    8990:	00 e2       	ldi	r16, 0x20	; 32
    8992:	10 e0       	ldi	r17, 0x00	; 0
    8994:	e0 16       	cp	r14, r16
    8996:	f1 06       	cpc	r15, r17
    8998:	50 f0       	brcs	.+20     	; 0x89ae <conv_flt+0x238>
    899a:	fe 01       	movw	r30, r28
    899c:	25 91       	lpm	r18, Z+
    899e:	35 91       	lpm	r19, Z+
    89a0:	45 91       	lpm	r20, Z+
    89a2:	54 91       	lpm	r21, Z
    89a4:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    89a8:	e0 1a       	sub	r14, r16
    89aa:	f1 0a       	sbc	r15, r17
    89ac:	f3 cf       	rjmp	.-26     	; 0x8994 <conv_flt+0x21e>
    89ae:	24 97       	sbiw	r28, 0x04	; 4
    89b0:	16 95       	lsr	r17
    89b2:	07 95       	ror	r16
    89b4:	cc 16       	cp	r12, r28
    89b6:	dd 06       	cpc	r13, r29
    89b8:	69 f7       	brne	.-38     	; 0x8994 <conv_flt+0x21e>
    89ba:	97 fe       	sbrs	r9, 7
    89bc:	05 c0       	rjmp	.+10     	; 0x89c8 <conv_flt+0x252>
    89be:	dc 01       	movw	r26, r24
    89c0:	cb 01       	movw	r24, r22
    89c2:	b0 58       	subi	r27, 0x80	; 128
    89c4:	bc 01       	movw	r22, r24
    89c6:	cd 01       	movw	r24, r26
    89c8:	21 14       	cp	r2, r1
    89ca:	31 04       	cpc	r3, r1
    89cc:	29 f0       	breq	.+10     	; 0x89d8 <conv_flt+0x262>
    89ce:	f1 01       	movw	r30, r2
    89d0:	60 83       	st	Z, r22
    89d2:	71 83       	std	Z+1, r23	; 0x01
    89d4:	82 83       	std	Z+2, r24	; 0x02
    89d6:	93 83       	std	Z+3, r25	; 0x03
    89d8:	81 e0       	ldi	r24, 0x01	; 1
    89da:	df 91       	pop	r29
    89dc:	cf 91       	pop	r28
    89de:	1f 91       	pop	r17
    89e0:	0f 91       	pop	r16
    89e2:	ff 90       	pop	r15
    89e4:	ef 90       	pop	r14
    89e6:	df 90       	pop	r13
    89e8:	cf 90       	pop	r12
    89ea:	bf 90       	pop	r11
    89ec:	af 90       	pop	r10
    89ee:	9f 90       	pop	r9
    89f0:	7f 90       	pop	r7
    89f2:	6f 90       	pop	r6
    89f4:	5f 90       	pop	r5
    89f6:	4f 90       	pop	r4
    89f8:	3f 90       	pop	r3
    89fa:	2f 90       	pop	r2
    89fc:	08 95       	ret

000089fe <vfscanf>:
    89fe:	6f 92       	push	r6
    8a00:	7f 92       	push	r7
    8a02:	8f 92       	push	r8
    8a04:	9f 92       	push	r9
    8a06:	af 92       	push	r10
    8a08:	bf 92       	push	r11
    8a0a:	cf 92       	push	r12
    8a0c:	df 92       	push	r13
    8a0e:	ef 92       	push	r14
    8a10:	ff 92       	push	r15
    8a12:	0f 93       	push	r16
    8a14:	1f 93       	push	r17
    8a16:	cf 93       	push	r28
    8a18:	df 93       	push	r29
    8a1a:	5c 01       	movw	r10, r24
    8a1c:	eb 01       	movw	r28, r22
    8a1e:	4a 01       	movw	r8, r20
    8a20:	fc 01       	movw	r30, r24
    8a22:	16 82       	std	Z+6, r1	; 0x06
    8a24:	17 82       	std	Z+7, r1	; 0x07
    8a26:	61 2c       	mov	r6, r1
    8a28:	f5 01       	movw	r30, r10
    8a2a:	03 81       	ldd	r16, Z+3	; 0x03
    8a2c:	fe 01       	movw	r30, r28
    8a2e:	03 fd       	sbrc	r16, 3
    8a30:	85 91       	lpm	r24, Z+
    8a32:	03 ff       	sbrs	r16, 3
    8a34:	81 91       	ld	r24, Z+
    8a36:	18 2f       	mov	r17, r24
    8a38:	ef 01       	movw	r28, r30
    8a3a:	88 23       	and	r24, r24
    8a3c:	09 f4       	brne	.+2      	; 0x8a40 <vfscanf+0x42>
    8a3e:	0f c1       	rjmp	.+542    	; 0x8c5e <vfscanf+0x260>
    8a40:	90 e0       	ldi	r25, 0x00	; 0
    8a42:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <isspace>
    8a46:	89 2b       	or	r24, r25
    8a48:	21 f0       	breq	.+8      	; 0x8a52 <vfscanf+0x54>
    8a4a:	c5 01       	movw	r24, r10
    8a4c:	0e 94 29 42 	call	0x8452	; 0x8452 <skip_spaces>
    8a50:	eb cf       	rjmp	.-42     	; 0x8a28 <vfscanf+0x2a>
    8a52:	15 32       	cpi	r17, 0x25	; 37
    8a54:	41 f4       	brne	.+16     	; 0x8a66 <vfscanf+0x68>
    8a56:	fe 01       	movw	r30, r28
    8a58:	03 fd       	sbrc	r16, 3
    8a5a:	15 91       	lpm	r17, Z+
    8a5c:	03 ff       	sbrs	r16, 3
    8a5e:	11 91       	ld	r17, Z+
    8a60:	ef 01       	movw	r28, r30
    8a62:	15 32       	cpi	r17, 0x25	; 37
    8a64:	81 f4       	brne	.+32     	; 0x8a86 <vfscanf+0x88>
    8a66:	c5 01       	movw	r24, r10
    8a68:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    8a6c:	97 fd       	sbrc	r25, 7
    8a6e:	f5 c0       	rjmp	.+490    	; 0x8c5a <vfscanf+0x25c>
    8a70:	41 2f       	mov	r20, r17
    8a72:	50 e0       	ldi	r21, 0x00	; 0
    8a74:	9c 01       	movw	r18, r24
    8a76:	33 27       	eor	r19, r19
    8a78:	24 17       	cp	r18, r20
    8a7a:	35 07       	cpc	r19, r21
    8a7c:	a9 f2       	breq	.-86     	; 0x8a28 <vfscanf+0x2a>
    8a7e:	b5 01       	movw	r22, r10
    8a80:	0e 94 8f 50 	call	0xa11e	; 0xa11e <ungetc>
    8a84:	ec c0       	rjmp	.+472    	; 0x8c5e <vfscanf+0x260>
    8a86:	1a 32       	cpi	r17, 0x2A	; 42
    8a88:	41 f4       	brne	.+16     	; 0x8a9a <vfscanf+0x9c>
    8a8a:	03 fd       	sbrc	r16, 3
    8a8c:	15 91       	lpm	r17, Z+
    8a8e:	03 ff       	sbrs	r16, 3
    8a90:	11 91       	ld	r17, Z+
    8a92:	ef 01       	movw	r28, r30
    8a94:	77 24       	eor	r7, r7
    8a96:	73 94       	inc	r7
    8a98:	01 c0       	rjmp	.+2      	; 0x8a9c <vfscanf+0x9e>
    8a9a:	71 2c       	mov	r7, r1
    8a9c:	e1 2c       	mov	r14, r1
    8a9e:	f1 2c       	mov	r15, r1
    8aa0:	20 ed       	ldi	r18, 0xD0	; 208
    8aa2:	21 0f       	add	r18, r17
    8aa4:	2a 30       	cpi	r18, 0x0A	; 10
    8aa6:	88 f4       	brcc	.+34     	; 0x8aca <vfscanf+0xcc>
    8aa8:	f7 2d       	mov	r31, r7
    8aaa:	f2 60       	ori	r31, 0x02	; 2
    8aac:	7f 2e       	mov	r7, r31
    8aae:	b7 01       	movw	r22, r14
    8ab0:	80 e0       	ldi	r24, 0x00	; 0
    8ab2:	90 e0       	ldi	r25, 0x00	; 0
    8ab4:	40 e2       	ldi	r20, 0x20	; 32
    8ab6:	0e 94 02 42 	call	0x8404	; 0x8404 <mulacc>
    8aba:	7b 01       	movw	r14, r22
    8abc:	fe 01       	movw	r30, r28
    8abe:	03 fd       	sbrc	r16, 3
    8ac0:	15 91       	lpm	r17, Z+
    8ac2:	03 ff       	sbrs	r16, 3
    8ac4:	11 91       	ld	r17, Z+
    8ac6:	ef 01       	movw	r28, r30
    8ac8:	eb cf       	rjmp	.-42     	; 0x8aa0 <vfscanf+0xa2>
    8aca:	71 fe       	sbrs	r7, 1
    8acc:	04 c0       	rjmp	.+8      	; 0x8ad6 <vfscanf+0xd8>
    8ace:	e1 14       	cp	r14, r1
    8ad0:	f1 04       	cpc	r15, r1
    8ad2:	21 f4       	brne	.+8      	; 0x8adc <vfscanf+0xde>
    8ad4:	c4 c0       	rjmp	.+392    	; 0x8c5e <vfscanf+0x260>
    8ad6:	ee 24       	eor	r14, r14
    8ad8:	ea 94       	dec	r14
    8ada:	fe 2c       	mov	r15, r14
    8adc:	18 36       	cpi	r17, 0x68	; 104
    8ade:	19 f0       	breq	.+6      	; 0x8ae6 <vfscanf+0xe8>
    8ae0:	1c 36       	cpi	r17, 0x6C	; 108
    8ae2:	61 f0       	breq	.+24     	; 0x8afc <vfscanf+0xfe>
    8ae4:	14 c0       	rjmp	.+40     	; 0x8b0e <vfscanf+0x110>
    8ae6:	fe 01       	movw	r30, r28
    8ae8:	03 fd       	sbrc	r16, 3
    8aea:	15 91       	lpm	r17, Z+
    8aec:	03 ff       	sbrs	r16, 3
    8aee:	11 91       	ld	r17, Z+
    8af0:	ef 01       	movw	r28, r30
    8af2:	18 36       	cpi	r17, 0x68	; 104
    8af4:	61 f4       	brne	.+24     	; 0x8b0e <vfscanf+0x110>
    8af6:	87 2d       	mov	r24, r7
    8af8:	88 60       	ori	r24, 0x08	; 8
    8afa:	78 2e       	mov	r7, r24
    8afc:	97 2d       	mov	r25, r7
    8afe:	94 60       	ori	r25, 0x04	; 4
    8b00:	79 2e       	mov	r7, r25
    8b02:	fe 01       	movw	r30, r28
    8b04:	03 fd       	sbrc	r16, 3
    8b06:	15 91       	lpm	r17, Z+
    8b08:	03 ff       	sbrs	r16, 3
    8b0a:	11 91       	ld	r17, Z+
    8b0c:	ef 01       	movw	r28, r30
    8b0e:	11 23       	and	r17, r17
    8b10:	09 f4       	brne	.+2      	; 0x8b14 <vfscanf+0x116>
    8b12:	a5 c0       	rjmp	.+330    	; 0x8c5e <vfscanf+0x260>
    8b14:	61 2f       	mov	r22, r17
    8b16:	70 e0       	ldi	r23, 0x00	; 0
    8b18:	89 ed       	ldi	r24, 0xD9	; 217
    8b1a:	9f e0       	ldi	r25, 0x0F	; 15
    8b1c:	0e 94 e6 4e 	call	0x9dcc	; 0x9dcc <strchr_P>
    8b20:	89 2b       	or	r24, r25
    8b22:	09 f4       	brne	.+2      	; 0x8b26 <vfscanf+0x128>
    8b24:	9c c0       	rjmp	.+312    	; 0x8c5e <vfscanf+0x260>
    8b26:	70 fc       	sbrc	r7, 0
    8b28:	07 c0       	rjmp	.+14     	; 0x8b38 <vfscanf+0x13a>
    8b2a:	f4 01       	movw	r30, r8
    8b2c:	c0 80       	ld	r12, Z
    8b2e:	d1 80       	ldd	r13, Z+1	; 0x01
    8b30:	c4 01       	movw	r24, r8
    8b32:	02 96       	adiw	r24, 0x02	; 2
    8b34:	4c 01       	movw	r8, r24
    8b36:	02 c0       	rjmp	.+4      	; 0x8b3c <vfscanf+0x13e>
    8b38:	c1 2c       	mov	r12, r1
    8b3a:	d1 2c       	mov	r13, r1
    8b3c:	1e 36       	cpi	r17, 0x6E	; 110
    8b3e:	51 f4       	brne	.+20     	; 0x8b54 <vfscanf+0x156>
    8b40:	f5 01       	movw	r30, r10
    8b42:	46 81       	ldd	r20, Z+6	; 0x06
    8b44:	57 81       	ldd	r21, Z+7	; 0x07
    8b46:	60 e0       	ldi	r22, 0x00	; 0
    8b48:	70 e0       	ldi	r23, 0x00	; 0
    8b4a:	27 2d       	mov	r18, r7
    8b4c:	c6 01       	movw	r24, r12
    8b4e:	0e 94 f6 41 	call	0x83ec	; 0x83ec <putval>
    8b52:	6a cf       	rjmp	.-300    	; 0x8a28 <vfscanf+0x2a>
    8b54:	13 36       	cpi	r17, 0x63	; 99
    8b56:	b9 f4       	brne	.+46     	; 0x8b86 <vfscanf+0x188>
    8b58:	71 fc       	sbrc	r7, 1
    8b5a:	03 c0       	rjmp	.+6      	; 0x8b62 <vfscanf+0x164>
    8b5c:	ee 24       	eor	r14, r14
    8b5e:	e3 94       	inc	r14
    8b60:	f1 2c       	mov	r15, r1
    8b62:	c5 01       	movw	r24, r10
    8b64:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    8b68:	97 fd       	sbrc	r25, 7
    8b6a:	77 c0       	rjmp	.+238    	; 0x8c5a <vfscanf+0x25c>
    8b6c:	c1 14       	cp	r12, r1
    8b6e:	d1 04       	cpc	r13, r1
    8b70:	29 f0       	breq	.+10     	; 0x8b7c <vfscanf+0x17e>
    8b72:	f6 01       	movw	r30, r12
    8b74:	80 83       	st	Z, r24
    8b76:	c6 01       	movw	r24, r12
    8b78:	01 96       	adiw	r24, 0x01	; 1
    8b7a:	6c 01       	movw	r12, r24
    8b7c:	91 e0       	ldi	r25, 0x01	; 1
    8b7e:	e9 1a       	sub	r14, r25
    8b80:	f1 08       	sbc	r15, r1
    8b82:	79 f7       	brne	.-34     	; 0x8b62 <vfscanf+0x164>
    8b84:	66 c0       	rjmp	.+204    	; 0x8c52 <vfscanf+0x254>
    8b86:	1b 35       	cpi	r17, 0x5B	; 91
    8b88:	59 f4       	brne	.+22     	; 0x8ba0 <vfscanf+0x1a2>
    8b8a:	9e 01       	movw	r18, r28
    8b8c:	a6 01       	movw	r20, r12
    8b8e:	b7 01       	movw	r22, r14
    8b90:	c5 01       	movw	r24, r10
    8b92:	0e 94 da 42 	call	0x85b4	; 0x85b4 <conv_brk>
    8b96:	ec 01       	movw	r28, r24
    8b98:	89 2b       	or	r24, r25
    8b9a:	09 f0       	breq	.+2      	; 0x8b9e <vfscanf+0x1a0>
    8b9c:	5a c0       	rjmp	.+180    	; 0x8c52 <vfscanf+0x254>
    8b9e:	54 c0       	rjmp	.+168    	; 0x8c48 <vfscanf+0x24a>
    8ba0:	c5 01       	movw	r24, r10
    8ba2:	0e 94 29 42 	call	0x8452	; 0x8452 <skip_spaces>
    8ba6:	97 fd       	sbrc	r25, 7
    8ba8:	58 c0       	rjmp	.+176    	; 0x8c5a <vfscanf+0x25c>
    8baa:	1f 36       	cpi	r17, 0x6F	; 111
    8bac:	e1 f1       	breq	.+120    	; 0x8c26 <vfscanf+0x228>
    8bae:	40 f4       	brcc	.+16     	; 0x8bc0 <vfscanf+0x1c2>
    8bb0:	14 36       	cpi	r17, 0x64	; 100
    8bb2:	a9 f1       	breq	.+106    	; 0x8c1e <vfscanf+0x220>
    8bb4:	19 36       	cpi	r17, 0x69	; 105
    8bb6:	d1 f1       	breq	.+116    	; 0x8c2c <vfscanf+0x22e>
    8bb8:	18 35       	cpi	r17, 0x58	; 88
    8bba:	09 f0       	breq	.+2      	; 0x8bbe <vfscanf+0x1c0>
    8bbc:	3e c0       	rjmp	.+124    	; 0x8c3a <vfscanf+0x23c>
    8bbe:	2b c0       	rjmp	.+86     	; 0x8c16 <vfscanf+0x218>
    8bc0:	13 37       	cpi	r17, 0x73	; 115
    8bc2:	a9 f0       	breq	.+42     	; 0x8bee <vfscanf+0x1f0>
    8bc4:	18 f4       	brcc	.+6      	; 0x8bcc <vfscanf+0x1ce>
    8bc6:	10 37       	cpi	r17, 0x70	; 112
    8bc8:	31 f1       	breq	.+76     	; 0x8c16 <vfscanf+0x218>
    8bca:	37 c0       	rjmp	.+110    	; 0x8c3a <vfscanf+0x23c>
    8bcc:	15 37       	cpi	r17, 0x75	; 117
    8bce:	39 f1       	breq	.+78     	; 0x8c1e <vfscanf+0x220>
    8bd0:	18 37       	cpi	r17, 0x78	; 120
    8bd2:	09 f1       	breq	.+66     	; 0x8c16 <vfscanf+0x218>
    8bd4:	32 c0       	rjmp	.+100    	; 0x8c3a <vfscanf+0x23c>
    8bd6:	c1 14       	cp	r12, r1
    8bd8:	d1 04       	cpc	r13, r1
    8bda:	29 f0       	breq	.+10     	; 0x8be6 <vfscanf+0x1e8>
    8bdc:	f6 01       	movw	r30, r12
    8bde:	00 83       	st	Z, r16
    8be0:	c6 01       	movw	r24, r12
    8be2:	01 96       	adiw	r24, 0x01	; 1
    8be4:	6c 01       	movw	r12, r24
    8be6:	91 e0       	ldi	r25, 0x01	; 1
    8be8:	e9 1a       	sub	r14, r25
    8bea:	f1 08       	sbc	r15, r1
    8bec:	71 f0       	breq	.+28     	; 0x8c0a <vfscanf+0x20c>
    8bee:	c5 01       	movw	r24, r10
    8bf0:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <fgetc>
    8bf4:	8c 01       	movw	r16, r24
    8bf6:	97 fd       	sbrc	r25, 7
    8bf8:	08 c0       	rjmp	.+16     	; 0x8c0a <vfscanf+0x20c>
    8bfa:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <isspace>
    8bfe:	89 2b       	or	r24, r25
    8c00:	51 f3       	breq	.-44     	; 0x8bd6 <vfscanf+0x1d8>
    8c02:	b5 01       	movw	r22, r10
    8c04:	c8 01       	movw	r24, r16
    8c06:	0e 94 8f 50 	call	0xa11e	; 0xa11e <ungetc>
    8c0a:	c1 14       	cp	r12, r1
    8c0c:	d1 04       	cpc	r13, r1
    8c0e:	09 f1       	breq	.+66     	; 0x8c52 <vfscanf+0x254>
    8c10:	f6 01       	movw	r30, r12
    8c12:	10 82       	st	Z, r1
    8c14:	1e c0       	rjmp	.+60     	; 0x8c52 <vfscanf+0x254>
    8c16:	f7 2d       	mov	r31, r7
    8c18:	f0 64       	ori	r31, 0x40	; 64
    8c1a:	7f 2e       	mov	r7, r31
    8c1c:	07 c0       	rjmp	.+14     	; 0x8c2c <vfscanf+0x22e>
    8c1e:	87 2d       	mov	r24, r7
    8c20:	80 62       	ori	r24, 0x20	; 32
    8c22:	78 2e       	mov	r7, r24
    8c24:	03 c0       	rjmp	.+6      	; 0x8c2c <vfscanf+0x22e>
    8c26:	97 2d       	mov	r25, r7
    8c28:	90 61       	ori	r25, 0x10	; 16
    8c2a:	79 2e       	mov	r7, r25
    8c2c:	27 2d       	mov	r18, r7
    8c2e:	a6 01       	movw	r20, r12
    8c30:	b7 01       	movw	r22, r14
    8c32:	c5 01       	movw	r24, r10
    8c34:	0e 94 42 42 	call	0x8484	; 0x8484 <conv_int>
    8c38:	05 c0       	rjmp	.+10     	; 0x8c44 <vfscanf+0x246>
    8c3a:	a6 01       	movw	r20, r12
    8c3c:	b7 01       	movw	r22, r14
    8c3e:	c5 01       	movw	r24, r10
    8c40:	0e 94 bb 43 	call	0x8776	; 0x8776 <conv_flt>
    8c44:	81 11       	cpse	r24, r1
    8c46:	05 c0       	rjmp	.+10     	; 0x8c52 <vfscanf+0x254>
    8c48:	f5 01       	movw	r30, r10
    8c4a:	83 81       	ldd	r24, Z+3	; 0x03
    8c4c:	80 73       	andi	r24, 0x30	; 48
    8c4e:	29 f4       	brne	.+10     	; 0x8c5a <vfscanf+0x25c>
    8c50:	06 c0       	rjmp	.+12     	; 0x8c5e <vfscanf+0x260>
    8c52:	70 fc       	sbrc	r7, 0
    8c54:	e9 ce       	rjmp	.-558    	; 0x8a28 <vfscanf+0x2a>
    8c56:	63 94       	inc	r6
    8c58:	e7 ce       	rjmp	.-562    	; 0x8a28 <vfscanf+0x2a>
    8c5a:	66 20       	and	r6, r6
    8c5c:	19 f0       	breq	.+6      	; 0x8c64 <vfscanf+0x266>
    8c5e:	86 2d       	mov	r24, r6
    8c60:	90 e0       	ldi	r25, 0x00	; 0
    8c62:	02 c0       	rjmp	.+4      	; 0x8c68 <vfscanf+0x26a>
    8c64:	8f ef       	ldi	r24, 0xFF	; 255
    8c66:	9f ef       	ldi	r25, 0xFF	; 255
    8c68:	df 91       	pop	r29
    8c6a:	cf 91       	pop	r28
    8c6c:	1f 91       	pop	r17
    8c6e:	0f 91       	pop	r16
    8c70:	ff 90       	pop	r15
    8c72:	ef 90       	pop	r14
    8c74:	df 90       	pop	r13
    8c76:	cf 90       	pop	r12
    8c78:	bf 90       	pop	r11
    8c7a:	af 90       	pop	r10
    8c7c:	9f 90       	pop	r9
    8c7e:	8f 90       	pop	r8
    8c80:	7f 90       	pop	r7
    8c82:	6f 90       	pop	r6
    8c84:	08 95       	ret

00008c86 <__subsf3>:
    8c86:	50 58       	subi	r21, 0x80	; 128

00008c88 <__addsf3>:
    8c88:	bb 27       	eor	r27, r27
    8c8a:	aa 27       	eor	r26, r26
    8c8c:	0e 94 5b 46 	call	0x8cb6	; 0x8cb6 <__addsf3x>
    8c90:	0c 94 3a 49 	jmp	0x9274	; 0x9274 <__fp_round>
    8c94:	0e 94 01 49 	call	0x9202	; 0x9202 <__fp_pscA>
    8c98:	38 f0       	brcs	.+14     	; 0x8ca8 <__addsf3+0x20>
    8c9a:	0e 94 08 49 	call	0x9210	; 0x9210 <__fp_pscB>
    8c9e:	20 f0       	brcs	.+8      	; 0x8ca8 <__addsf3+0x20>
    8ca0:	39 f4       	brne	.+14     	; 0x8cb0 <__addsf3+0x28>
    8ca2:	9f 3f       	cpi	r25, 0xFF	; 255
    8ca4:	19 f4       	brne	.+6      	; 0x8cac <__addsf3+0x24>
    8ca6:	26 f4       	brtc	.+8      	; 0x8cb0 <__addsf3+0x28>
    8ca8:	0c 94 d7 48 	jmp	0x91ae	; 0x91ae <__fp_nan>
    8cac:	0e f4       	brtc	.+2      	; 0x8cb0 <__addsf3+0x28>
    8cae:	e0 95       	com	r30
    8cb0:	e7 fb       	bst	r30, 7
    8cb2:	0c 94 c3 48 	jmp	0x9186	; 0x9186 <__fp_inf>

00008cb6 <__addsf3x>:
    8cb6:	e9 2f       	mov	r30, r25
    8cb8:	0e 94 5f 49 	call	0x92be	; 0x92be <__fp_split3>
    8cbc:	58 f3       	brcs	.-42     	; 0x8c94 <__addsf3+0xc>
    8cbe:	ba 17       	cp	r27, r26
    8cc0:	62 07       	cpc	r22, r18
    8cc2:	73 07       	cpc	r23, r19
    8cc4:	84 07       	cpc	r24, r20
    8cc6:	95 07       	cpc	r25, r21
    8cc8:	20 f0       	brcs	.+8      	; 0x8cd2 <__addsf3x+0x1c>
    8cca:	79 f4       	brne	.+30     	; 0x8cea <__addsf3x+0x34>
    8ccc:	a6 f5       	brtc	.+104    	; 0x8d36 <__addsf3x+0x80>
    8cce:	0c 94 81 49 	jmp	0x9302	; 0x9302 <__fp_zero>
    8cd2:	0e f4       	brtc	.+2      	; 0x8cd6 <__addsf3x+0x20>
    8cd4:	e0 95       	com	r30
    8cd6:	0b 2e       	mov	r0, r27
    8cd8:	ba 2f       	mov	r27, r26
    8cda:	a0 2d       	mov	r26, r0
    8cdc:	0b 01       	movw	r0, r22
    8cde:	b9 01       	movw	r22, r18
    8ce0:	90 01       	movw	r18, r0
    8ce2:	0c 01       	movw	r0, r24
    8ce4:	ca 01       	movw	r24, r20
    8ce6:	a0 01       	movw	r20, r0
    8ce8:	11 24       	eor	r1, r1
    8cea:	ff 27       	eor	r31, r31
    8cec:	59 1b       	sub	r21, r25
    8cee:	99 f0       	breq	.+38     	; 0x8d16 <__addsf3x+0x60>
    8cf0:	59 3f       	cpi	r21, 0xF9	; 249
    8cf2:	50 f4       	brcc	.+20     	; 0x8d08 <__addsf3x+0x52>
    8cf4:	50 3e       	cpi	r21, 0xE0	; 224
    8cf6:	68 f1       	brcs	.+90     	; 0x8d52 <__addsf3x+0x9c>
    8cf8:	1a 16       	cp	r1, r26
    8cfa:	f0 40       	sbci	r31, 0x00	; 0
    8cfc:	a2 2f       	mov	r26, r18
    8cfe:	23 2f       	mov	r18, r19
    8d00:	34 2f       	mov	r19, r20
    8d02:	44 27       	eor	r20, r20
    8d04:	58 5f       	subi	r21, 0xF8	; 248
    8d06:	f3 cf       	rjmp	.-26     	; 0x8cee <__addsf3x+0x38>
    8d08:	46 95       	lsr	r20
    8d0a:	37 95       	ror	r19
    8d0c:	27 95       	ror	r18
    8d0e:	a7 95       	ror	r26
    8d10:	f0 40       	sbci	r31, 0x00	; 0
    8d12:	53 95       	inc	r21
    8d14:	c9 f7       	brne	.-14     	; 0x8d08 <__addsf3x+0x52>
    8d16:	7e f4       	brtc	.+30     	; 0x8d36 <__addsf3x+0x80>
    8d18:	1f 16       	cp	r1, r31
    8d1a:	ba 0b       	sbc	r27, r26
    8d1c:	62 0b       	sbc	r22, r18
    8d1e:	73 0b       	sbc	r23, r19
    8d20:	84 0b       	sbc	r24, r20
    8d22:	ba f0       	brmi	.+46     	; 0x8d52 <__addsf3x+0x9c>
    8d24:	91 50       	subi	r25, 0x01	; 1
    8d26:	a1 f0       	breq	.+40     	; 0x8d50 <__addsf3x+0x9a>
    8d28:	ff 0f       	add	r31, r31
    8d2a:	bb 1f       	adc	r27, r27
    8d2c:	66 1f       	adc	r22, r22
    8d2e:	77 1f       	adc	r23, r23
    8d30:	88 1f       	adc	r24, r24
    8d32:	c2 f7       	brpl	.-16     	; 0x8d24 <__addsf3x+0x6e>
    8d34:	0e c0       	rjmp	.+28     	; 0x8d52 <__addsf3x+0x9c>
    8d36:	ba 0f       	add	r27, r26
    8d38:	62 1f       	adc	r22, r18
    8d3a:	73 1f       	adc	r23, r19
    8d3c:	84 1f       	adc	r24, r20
    8d3e:	48 f4       	brcc	.+18     	; 0x8d52 <__addsf3x+0x9c>
    8d40:	87 95       	ror	r24
    8d42:	77 95       	ror	r23
    8d44:	67 95       	ror	r22
    8d46:	b7 95       	ror	r27
    8d48:	f7 95       	ror	r31
    8d4a:	9e 3f       	cpi	r25, 0xFE	; 254
    8d4c:	08 f0       	brcs	.+2      	; 0x8d50 <__addsf3x+0x9a>
    8d4e:	b0 cf       	rjmp	.-160    	; 0x8cb0 <__addsf3+0x28>
    8d50:	93 95       	inc	r25
    8d52:	88 0f       	add	r24, r24
    8d54:	08 f0       	brcs	.+2      	; 0x8d58 <__addsf3x+0xa2>
    8d56:	99 27       	eor	r25, r25
    8d58:	ee 0f       	add	r30, r30
    8d5a:	97 95       	ror	r25
    8d5c:	87 95       	ror	r24
    8d5e:	08 95       	ret
    8d60:	0e 94 01 49 	call	0x9202	; 0x9202 <__fp_pscA>
    8d64:	60 f0       	brcs	.+24     	; 0x8d7e <__addsf3x+0xc8>
    8d66:	80 e8       	ldi	r24, 0x80	; 128
    8d68:	91 e0       	ldi	r25, 0x01	; 1
    8d6a:	09 f4       	brne	.+2      	; 0x8d6e <__addsf3x+0xb8>
    8d6c:	9e ef       	ldi	r25, 0xFE	; 254
    8d6e:	0e 94 08 49 	call	0x9210	; 0x9210 <__fp_pscB>
    8d72:	28 f0       	brcs	.+10     	; 0x8d7e <__addsf3x+0xc8>
    8d74:	40 e8       	ldi	r20, 0x80	; 128
    8d76:	51 e0       	ldi	r21, 0x01	; 1
    8d78:	71 f4       	brne	.+28     	; 0x8d96 <atan2+0x10>
    8d7a:	5e ef       	ldi	r21, 0xFE	; 254
    8d7c:	0c c0       	rjmp	.+24     	; 0x8d96 <atan2+0x10>
    8d7e:	0c 94 d7 48 	jmp	0x91ae	; 0x91ae <__fp_nan>
    8d82:	0c 94 81 49 	jmp	0x9302	; 0x9302 <__fp_zero>

00008d86 <atan2>:
    8d86:	e9 2f       	mov	r30, r25
    8d88:	e0 78       	andi	r30, 0x80	; 128
    8d8a:	0e 94 5f 49 	call	0x92be	; 0x92be <__fp_split3>
    8d8e:	40 f3       	brcs	.-48     	; 0x8d60 <__addsf3x+0xaa>
    8d90:	09 2e       	mov	r0, r25
    8d92:	05 2a       	or	r0, r21
    8d94:	b1 f3       	breq	.-20     	; 0x8d82 <__addsf3x+0xcc>
    8d96:	26 17       	cp	r18, r22
    8d98:	37 07       	cpc	r19, r23
    8d9a:	48 07       	cpc	r20, r24
    8d9c:	59 07       	cpc	r21, r25
    8d9e:	38 f0       	brcs	.+14     	; 0x8dae <atan2+0x28>
    8da0:	0e 2e       	mov	r0, r30
    8da2:	07 f8       	bld	r0, 7
    8da4:	e0 25       	eor	r30, r0
    8da6:	69 f0       	breq	.+26     	; 0x8dc2 <atan2+0x3c>
    8da8:	e0 25       	eor	r30, r0
    8daa:	e0 64       	ori	r30, 0x40	; 64
    8dac:	0a c0       	rjmp	.+20     	; 0x8dc2 <atan2+0x3c>
    8dae:	ef 63       	ori	r30, 0x3F	; 63
    8db0:	07 f8       	bld	r0, 7
    8db2:	00 94       	com	r0
    8db4:	07 fa       	bst	r0, 7
    8db6:	db 01       	movw	r26, r22
    8db8:	b9 01       	movw	r22, r18
    8dba:	9d 01       	movw	r18, r26
    8dbc:	dc 01       	movw	r26, r24
    8dbe:	ca 01       	movw	r24, r20
    8dc0:	ad 01       	movw	r20, r26
    8dc2:	ef 93       	push	r30
    8dc4:	0e 94 43 47 	call	0x8e86	; 0x8e86 <__divsf3_pse>
    8dc8:	0e 94 3a 49 	call	0x9274	; 0x9274 <__fp_round>
    8dcc:	0e 94 f3 46 	call	0x8de6	; 0x8de6 <atan>
    8dd0:	5f 91       	pop	r21
    8dd2:	55 23       	and	r21, r21
    8dd4:	39 f0       	breq	.+14     	; 0x8de4 <atan2+0x5e>
    8dd6:	2b ed       	ldi	r18, 0xDB	; 219
    8dd8:	3f e0       	ldi	r19, 0x0F	; 15
    8dda:	49 e4       	ldi	r20, 0x49	; 73
    8ddc:	50 fd       	sbrc	r21, 0
    8dde:	49 ec       	ldi	r20, 0xC9	; 201
    8de0:	0c 94 44 46 	jmp	0x8c88	; 0x8c88 <__addsf3>
    8de4:	08 95       	ret

00008de6 <atan>:
    8de6:	df 93       	push	r29
    8de8:	dd 27       	eor	r29, r29
    8dea:	b9 2f       	mov	r27, r25
    8dec:	bf 77       	andi	r27, 0x7F	; 127
    8dee:	40 e8       	ldi	r20, 0x80	; 128
    8df0:	5f e3       	ldi	r21, 0x3F	; 63
    8df2:	16 16       	cp	r1, r22
    8df4:	17 06       	cpc	r1, r23
    8df6:	48 07       	cpc	r20, r24
    8df8:	5b 07       	cpc	r21, r27
    8dfa:	18 f4       	brcc	.+6      	; 0x8e02 <atan+0x1c>
    8dfc:	d9 2f       	mov	r29, r25
    8dfe:	0e 94 8d 49 	call	0x931a	; 0x931a <inverse>
    8e02:	9f 93       	push	r25
    8e04:	8f 93       	push	r24
    8e06:	7f 93       	push	r23
    8e08:	6f 93       	push	r22
    8e0a:	0e 94 18 4b 	call	0x9630	; 0x9630 <square>
    8e0e:	e8 e1       	ldi	r30, 0x18	; 24
    8e10:	f2 e0       	ldi	r31, 0x02	; 2
    8e12:	0e 94 da 48 	call	0x91b4	; 0x91b4 <__fp_powser>
    8e16:	0e 94 3a 49 	call	0x9274	; 0x9274 <__fp_round>
    8e1a:	2f 91       	pop	r18
    8e1c:	3f 91       	pop	r19
    8e1e:	4f 91       	pop	r20
    8e20:	5f 91       	pop	r21
    8e22:	0e 94 66 4a 	call	0x94cc	; 0x94cc <__mulsf3x>
    8e26:	dd 23       	and	r29, r29
    8e28:	51 f0       	breq	.+20     	; 0x8e3e <atan+0x58>
    8e2a:	90 58       	subi	r25, 0x80	; 128
    8e2c:	a2 ea       	ldi	r26, 0xA2	; 162
    8e2e:	2a ed       	ldi	r18, 0xDA	; 218
    8e30:	3f e0       	ldi	r19, 0x0F	; 15
    8e32:	49 ec       	ldi	r20, 0xC9	; 201
    8e34:	5f e3       	ldi	r21, 0x3F	; 63
    8e36:	d0 78       	andi	r29, 0x80	; 128
    8e38:	5d 27       	eor	r21, r29
    8e3a:	0e 94 5b 46 	call	0x8cb6	; 0x8cb6 <__addsf3x>
    8e3e:	df 91       	pop	r29
    8e40:	0c 94 3a 49 	jmp	0x9274	; 0x9274 <__fp_round>

00008e44 <__cmpsf2>:
    8e44:	0e 94 9f 48 	call	0x913e	; 0x913e <__fp_cmp>
    8e48:	08 f4       	brcc	.+2      	; 0x8e4c <__cmpsf2+0x8>
    8e4a:	81 e0       	ldi	r24, 0x01	; 1
    8e4c:	08 95       	ret

00008e4e <cos>:
    8e4e:	0e 94 11 49 	call	0x9222	; 0x9222 <__fp_rempio2>
    8e52:	e3 95       	inc	r30
    8e54:	0c 94 4b 49 	jmp	0x9296	; 0x9296 <__fp_sinus>

00008e58 <__divsf3>:
    8e58:	0e 94 40 47 	call	0x8e80	; 0x8e80 <__divsf3x>
    8e5c:	0c 94 3a 49 	jmp	0x9274	; 0x9274 <__fp_round>
    8e60:	0e 94 08 49 	call	0x9210	; 0x9210 <__fp_pscB>
    8e64:	58 f0       	brcs	.+22     	; 0x8e7c <__divsf3+0x24>
    8e66:	0e 94 01 49 	call	0x9202	; 0x9202 <__fp_pscA>
    8e6a:	40 f0       	brcs	.+16     	; 0x8e7c <__divsf3+0x24>
    8e6c:	29 f4       	brne	.+10     	; 0x8e78 <__divsf3+0x20>
    8e6e:	5f 3f       	cpi	r21, 0xFF	; 255
    8e70:	29 f0       	breq	.+10     	; 0x8e7c <__divsf3+0x24>
    8e72:	0c 94 c3 48 	jmp	0x9186	; 0x9186 <__fp_inf>
    8e76:	51 11       	cpse	r21, r1
    8e78:	0c 94 82 49 	jmp	0x9304	; 0x9304 <__fp_szero>
    8e7c:	0c 94 d7 48 	jmp	0x91ae	; 0x91ae <__fp_nan>

00008e80 <__divsf3x>:
    8e80:	0e 94 5f 49 	call	0x92be	; 0x92be <__fp_split3>
    8e84:	68 f3       	brcs	.-38     	; 0x8e60 <__divsf3+0x8>

00008e86 <__divsf3_pse>:
    8e86:	99 23       	and	r25, r25
    8e88:	b1 f3       	breq	.-20     	; 0x8e76 <__divsf3+0x1e>
    8e8a:	55 23       	and	r21, r21
    8e8c:	91 f3       	breq	.-28     	; 0x8e72 <__divsf3+0x1a>
    8e8e:	95 1b       	sub	r25, r21
    8e90:	55 0b       	sbc	r21, r21
    8e92:	bb 27       	eor	r27, r27
    8e94:	aa 27       	eor	r26, r26
    8e96:	62 17       	cp	r22, r18
    8e98:	73 07       	cpc	r23, r19
    8e9a:	84 07       	cpc	r24, r20
    8e9c:	38 f0       	brcs	.+14     	; 0x8eac <__divsf3_pse+0x26>
    8e9e:	9f 5f       	subi	r25, 0xFF	; 255
    8ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    8ea2:	22 0f       	add	r18, r18
    8ea4:	33 1f       	adc	r19, r19
    8ea6:	44 1f       	adc	r20, r20
    8ea8:	aa 1f       	adc	r26, r26
    8eaa:	a9 f3       	breq	.-22     	; 0x8e96 <__divsf3_pse+0x10>
    8eac:	35 d0       	rcall	.+106    	; 0x8f18 <__divsf3_pse+0x92>
    8eae:	0e 2e       	mov	r0, r30
    8eb0:	3a f0       	brmi	.+14     	; 0x8ec0 <__divsf3_pse+0x3a>
    8eb2:	e0 e8       	ldi	r30, 0x80	; 128
    8eb4:	32 d0       	rcall	.+100    	; 0x8f1a <__divsf3_pse+0x94>
    8eb6:	91 50       	subi	r25, 0x01	; 1
    8eb8:	50 40       	sbci	r21, 0x00	; 0
    8eba:	e6 95       	lsr	r30
    8ebc:	00 1c       	adc	r0, r0
    8ebe:	ca f7       	brpl	.-14     	; 0x8eb2 <__divsf3_pse+0x2c>
    8ec0:	2b d0       	rcall	.+86     	; 0x8f18 <__divsf3_pse+0x92>
    8ec2:	fe 2f       	mov	r31, r30
    8ec4:	29 d0       	rcall	.+82     	; 0x8f18 <__divsf3_pse+0x92>
    8ec6:	66 0f       	add	r22, r22
    8ec8:	77 1f       	adc	r23, r23
    8eca:	88 1f       	adc	r24, r24
    8ecc:	bb 1f       	adc	r27, r27
    8ece:	26 17       	cp	r18, r22
    8ed0:	37 07       	cpc	r19, r23
    8ed2:	48 07       	cpc	r20, r24
    8ed4:	ab 07       	cpc	r26, r27
    8ed6:	b0 e8       	ldi	r27, 0x80	; 128
    8ed8:	09 f0       	breq	.+2      	; 0x8edc <__divsf3_pse+0x56>
    8eda:	bb 0b       	sbc	r27, r27
    8edc:	80 2d       	mov	r24, r0
    8ede:	bf 01       	movw	r22, r30
    8ee0:	ff 27       	eor	r31, r31
    8ee2:	93 58       	subi	r25, 0x83	; 131
    8ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ee6:	3a f0       	brmi	.+14     	; 0x8ef6 <__divsf3_pse+0x70>
    8ee8:	9e 3f       	cpi	r25, 0xFE	; 254
    8eea:	51 05       	cpc	r21, r1
    8eec:	78 f0       	brcs	.+30     	; 0x8f0c <__divsf3_pse+0x86>
    8eee:	0c 94 c3 48 	jmp	0x9186	; 0x9186 <__fp_inf>
    8ef2:	0c 94 82 49 	jmp	0x9304	; 0x9304 <__fp_szero>
    8ef6:	5f 3f       	cpi	r21, 0xFF	; 255
    8ef8:	e4 f3       	brlt	.-8      	; 0x8ef2 <__divsf3_pse+0x6c>
    8efa:	98 3e       	cpi	r25, 0xE8	; 232
    8efc:	d4 f3       	brlt	.-12     	; 0x8ef2 <__divsf3_pse+0x6c>
    8efe:	86 95       	lsr	r24
    8f00:	77 95       	ror	r23
    8f02:	67 95       	ror	r22
    8f04:	b7 95       	ror	r27
    8f06:	f7 95       	ror	r31
    8f08:	9f 5f       	subi	r25, 0xFF	; 255
    8f0a:	c9 f7       	brne	.-14     	; 0x8efe <__divsf3_pse+0x78>
    8f0c:	88 0f       	add	r24, r24
    8f0e:	91 1d       	adc	r25, r1
    8f10:	96 95       	lsr	r25
    8f12:	87 95       	ror	r24
    8f14:	97 f9       	bld	r25, 7
    8f16:	08 95       	ret
    8f18:	e1 e0       	ldi	r30, 0x01	; 1
    8f1a:	66 0f       	add	r22, r22
    8f1c:	77 1f       	adc	r23, r23
    8f1e:	88 1f       	adc	r24, r24
    8f20:	bb 1f       	adc	r27, r27
    8f22:	62 17       	cp	r22, r18
    8f24:	73 07       	cpc	r23, r19
    8f26:	84 07       	cpc	r24, r20
    8f28:	ba 07       	cpc	r27, r26
    8f2a:	20 f0       	brcs	.+8      	; 0x8f34 <__divsf3_pse+0xae>
    8f2c:	62 1b       	sub	r22, r18
    8f2e:	73 0b       	sbc	r23, r19
    8f30:	84 0b       	sbc	r24, r20
    8f32:	ba 0b       	sbc	r27, r26
    8f34:	ee 1f       	adc	r30, r30
    8f36:	88 f7       	brcc	.-30     	; 0x8f1a <__divsf3_pse+0x94>
    8f38:	e0 95       	com	r30
    8f3a:	08 95       	ret
    8f3c:	29 f4       	brne	.+10     	; 0x8f48 <__divsf3_pse+0xc2>
    8f3e:	16 f0       	brts	.+4      	; 0x8f44 <__divsf3_pse+0xbe>
    8f40:	0c 94 c3 48 	jmp	0x9186	; 0x9186 <__fp_inf>
    8f44:	0c 94 81 49 	jmp	0x9302	; 0x9302 <__fp_zero>
    8f48:	0c 94 d7 48 	jmp	0x91ae	; 0x91ae <__fp_nan>

00008f4c <exp>:
    8f4c:	0e 94 67 49 	call	0x92ce	; 0x92ce <__fp_splitA>
    8f50:	a8 f3       	brcs	.-22     	; 0x8f3c <__divsf3_pse+0xb6>
    8f52:	96 38       	cpi	r25, 0x86	; 134
    8f54:	a0 f7       	brcc	.-24     	; 0x8f3e <__divsf3_pse+0xb8>
    8f56:	07 f8       	bld	r0, 7
    8f58:	0f 92       	push	r0
    8f5a:	e8 94       	clt
    8f5c:	2b e3       	ldi	r18, 0x3B	; 59
    8f5e:	3a ea       	ldi	r19, 0xAA	; 170
    8f60:	48 eb       	ldi	r20, 0xB8	; 184
    8f62:	5f e7       	ldi	r21, 0x7F	; 127
    8f64:	0e 94 69 4a 	call	0x94d2	; 0x94d2 <__mulsf3_pse>
    8f68:	0f 92       	push	r0
    8f6a:	0f 92       	push	r0
    8f6c:	0f 92       	push	r0
    8f6e:	4d b7       	in	r20, 0x3d	; 61
    8f70:	5e b7       	in	r21, 0x3e	; 62
    8f72:	0f 92       	push	r0
    8f74:	0e 94 1f 4a 	call	0x943e	; 0x943e <modf>
    8f78:	e5 e4       	ldi	r30, 0x45	; 69
    8f7a:	f2 e0       	ldi	r31, 0x02	; 2
    8f7c:	0e 94 da 48 	call	0x91b4	; 0x91b4 <__fp_powser>
    8f80:	4f 91       	pop	r20
    8f82:	5f 91       	pop	r21
    8f84:	ef 91       	pop	r30
    8f86:	ff 91       	pop	r31
    8f88:	e5 95       	asr	r30
    8f8a:	ee 1f       	adc	r30, r30
    8f8c:	ff 1f       	adc	r31, r31
    8f8e:	49 f0       	breq	.+18     	; 0x8fa2 <exp+0x56>
    8f90:	fe 57       	subi	r31, 0x7E	; 126
    8f92:	e0 68       	ori	r30, 0x80	; 128
    8f94:	44 27       	eor	r20, r20
    8f96:	ee 0f       	add	r30, r30
    8f98:	44 1f       	adc	r20, r20
    8f9a:	fa 95       	dec	r31
    8f9c:	e1 f7       	brne	.-8      	; 0x8f96 <exp+0x4a>
    8f9e:	41 95       	neg	r20
    8fa0:	55 0b       	sbc	r21, r21
    8fa2:	0e 94 99 49 	call	0x9332	; 0x9332 <ldexp>
    8fa6:	0f 90       	pop	r0
    8fa8:	07 fe       	sbrs	r0, 7
    8faa:	0c 94 8d 49 	jmp	0x931a	; 0x931a <inverse>
    8fae:	08 95       	ret

00008fb0 <__fixsfsi>:
    8fb0:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <__fixunssfsi>
    8fb4:	68 94       	set
    8fb6:	b1 11       	cpse	r27, r1
    8fb8:	0c 94 82 49 	jmp	0x9304	; 0x9304 <__fp_szero>
    8fbc:	08 95       	ret

00008fbe <__fixunssfsi>:
    8fbe:	0e 94 67 49 	call	0x92ce	; 0x92ce <__fp_splitA>
    8fc2:	88 f0       	brcs	.+34     	; 0x8fe6 <__fixunssfsi+0x28>
    8fc4:	9f 57       	subi	r25, 0x7F	; 127
    8fc6:	98 f0       	brcs	.+38     	; 0x8fee <__fixunssfsi+0x30>
    8fc8:	b9 2f       	mov	r27, r25
    8fca:	99 27       	eor	r25, r25
    8fcc:	b7 51       	subi	r27, 0x17	; 23
    8fce:	b0 f0       	brcs	.+44     	; 0x8ffc <__fixunssfsi+0x3e>
    8fd0:	e1 f0       	breq	.+56     	; 0x900a <__fixunssfsi+0x4c>
    8fd2:	66 0f       	add	r22, r22
    8fd4:	77 1f       	adc	r23, r23
    8fd6:	88 1f       	adc	r24, r24
    8fd8:	99 1f       	adc	r25, r25
    8fda:	1a f0       	brmi	.+6      	; 0x8fe2 <__fixunssfsi+0x24>
    8fdc:	ba 95       	dec	r27
    8fde:	c9 f7       	brne	.-14     	; 0x8fd2 <__fixunssfsi+0x14>
    8fe0:	14 c0       	rjmp	.+40     	; 0x900a <__fixunssfsi+0x4c>
    8fe2:	b1 30       	cpi	r27, 0x01	; 1
    8fe4:	91 f0       	breq	.+36     	; 0x900a <__fixunssfsi+0x4c>
    8fe6:	0e 94 81 49 	call	0x9302	; 0x9302 <__fp_zero>
    8fea:	b1 e0       	ldi	r27, 0x01	; 1
    8fec:	08 95       	ret
    8fee:	0c 94 81 49 	jmp	0x9302	; 0x9302 <__fp_zero>
    8ff2:	67 2f       	mov	r22, r23
    8ff4:	78 2f       	mov	r23, r24
    8ff6:	88 27       	eor	r24, r24
    8ff8:	b8 5f       	subi	r27, 0xF8	; 248
    8ffa:	39 f0       	breq	.+14     	; 0x900a <__fixunssfsi+0x4c>
    8ffc:	b9 3f       	cpi	r27, 0xF9	; 249
    8ffe:	cc f3       	brlt	.-14     	; 0x8ff2 <__fixunssfsi+0x34>
    9000:	86 95       	lsr	r24
    9002:	77 95       	ror	r23
    9004:	67 95       	ror	r22
    9006:	b3 95       	inc	r27
    9008:	d9 f7       	brne	.-10     	; 0x9000 <__fixunssfsi+0x42>
    900a:	3e f4       	brtc	.+14     	; 0x901a <__fixunssfsi+0x5c>
    900c:	90 95       	com	r25
    900e:	80 95       	com	r24
    9010:	70 95       	com	r23
    9012:	61 95       	neg	r22
    9014:	7f 4f       	sbci	r23, 0xFF	; 255
    9016:	8f 4f       	sbci	r24, 0xFF	; 255
    9018:	9f 4f       	sbci	r25, 0xFF	; 255
    901a:	08 95       	ret

0000901c <__floatunsisf>:
    901c:	e8 94       	clt
    901e:	09 c0       	rjmp	.+18     	; 0x9032 <__floatsisf+0x12>

00009020 <__floatsisf>:
    9020:	97 fb       	bst	r25, 7
    9022:	3e f4       	brtc	.+14     	; 0x9032 <__floatsisf+0x12>
    9024:	90 95       	com	r25
    9026:	80 95       	com	r24
    9028:	70 95       	com	r23
    902a:	61 95       	neg	r22
    902c:	7f 4f       	sbci	r23, 0xFF	; 255
    902e:	8f 4f       	sbci	r24, 0xFF	; 255
    9030:	9f 4f       	sbci	r25, 0xFF	; 255
    9032:	99 23       	and	r25, r25
    9034:	a9 f0       	breq	.+42     	; 0x9060 <__floatsisf+0x40>
    9036:	f9 2f       	mov	r31, r25
    9038:	96 e9       	ldi	r25, 0x96	; 150
    903a:	bb 27       	eor	r27, r27
    903c:	93 95       	inc	r25
    903e:	f6 95       	lsr	r31
    9040:	87 95       	ror	r24
    9042:	77 95       	ror	r23
    9044:	67 95       	ror	r22
    9046:	b7 95       	ror	r27
    9048:	f1 11       	cpse	r31, r1
    904a:	f8 cf       	rjmp	.-16     	; 0x903c <__floatsisf+0x1c>
    904c:	fa f4       	brpl	.+62     	; 0x908c <__floatsisf+0x6c>
    904e:	bb 0f       	add	r27, r27
    9050:	11 f4       	brne	.+4      	; 0x9056 <__floatsisf+0x36>
    9052:	60 ff       	sbrs	r22, 0
    9054:	1b c0       	rjmp	.+54     	; 0x908c <__floatsisf+0x6c>
    9056:	6f 5f       	subi	r22, 0xFF	; 255
    9058:	7f 4f       	sbci	r23, 0xFF	; 255
    905a:	8f 4f       	sbci	r24, 0xFF	; 255
    905c:	9f 4f       	sbci	r25, 0xFF	; 255
    905e:	16 c0       	rjmp	.+44     	; 0x908c <__floatsisf+0x6c>
    9060:	88 23       	and	r24, r24
    9062:	11 f0       	breq	.+4      	; 0x9068 <__floatsisf+0x48>
    9064:	96 e9       	ldi	r25, 0x96	; 150
    9066:	11 c0       	rjmp	.+34     	; 0x908a <__floatsisf+0x6a>
    9068:	77 23       	and	r23, r23
    906a:	21 f0       	breq	.+8      	; 0x9074 <__floatsisf+0x54>
    906c:	9e e8       	ldi	r25, 0x8E	; 142
    906e:	87 2f       	mov	r24, r23
    9070:	76 2f       	mov	r23, r22
    9072:	05 c0       	rjmp	.+10     	; 0x907e <__floatsisf+0x5e>
    9074:	66 23       	and	r22, r22
    9076:	71 f0       	breq	.+28     	; 0x9094 <__floatsisf+0x74>
    9078:	96 e8       	ldi	r25, 0x86	; 134
    907a:	86 2f       	mov	r24, r22
    907c:	70 e0       	ldi	r23, 0x00	; 0
    907e:	60 e0       	ldi	r22, 0x00	; 0
    9080:	2a f0       	brmi	.+10     	; 0x908c <__floatsisf+0x6c>
    9082:	9a 95       	dec	r25
    9084:	66 0f       	add	r22, r22
    9086:	77 1f       	adc	r23, r23
    9088:	88 1f       	adc	r24, r24
    908a:	da f7       	brpl	.-10     	; 0x9082 <__floatsisf+0x62>
    908c:	88 0f       	add	r24, r24
    908e:	96 95       	lsr	r25
    9090:	87 95       	ror	r24
    9092:	97 f9       	bld	r25, 7
    9094:	08 95       	ret
    9096:	0e 94 01 49 	call	0x9202	; 0x9202 <__fp_pscA>
    909a:	20 f0       	brcs	.+8      	; 0x90a4 <__floatsisf+0x84>
    909c:	19 f0       	breq	.+6      	; 0x90a4 <__floatsisf+0x84>
    909e:	0e 94 08 49 	call	0x9210	; 0x9210 <__fp_pscB>
    90a2:	50 f4       	brcc	.+20     	; 0x90b8 <fmod+0xc>
    90a4:	0c 94 d7 48 	jmp	0x91ae	; 0x91ae <__fp_nan>
    90a8:	0c 94 82 49 	jmp	0x9304	; 0x9304 <__fp_szero>

000090ac <fmod>:
    90ac:	e9 2f       	mov	r30, r25
    90ae:	0e 94 5f 49 	call	0x92be	; 0x92be <__fp_split3>
    90b2:	88 f3       	brcs	.-30     	; 0x9096 <__floatsisf+0x76>
    90b4:	55 23       	and	r21, r21
    90b6:	b1 f3       	breq	.-20     	; 0x90a4 <__floatsisf+0x84>
    90b8:	e7 fb       	bst	r30, 7
    90ba:	62 17       	cp	r22, r18
    90bc:	73 07       	cpc	r23, r19
    90be:	84 07       	cpc	r24, r20
    90c0:	95 07       	cpc	r25, r21
    90c2:	a8 f1       	brcs	.+106    	; 0x912e <fmod+0x82>
    90c4:	89 f3       	breq	.-30     	; 0x90a8 <__floatsisf+0x88>
    90c6:	e9 2f       	mov	r30, r25
    90c8:	ff 27       	eor	r31, r31
    90ca:	88 23       	and	r24, r24
    90cc:	2a f0       	brmi	.+10     	; 0x90d8 <fmod+0x2c>
    90ce:	31 97       	sbiw	r30, 0x01	; 1
    90d0:	66 0f       	add	r22, r22
    90d2:	77 1f       	adc	r23, r23
    90d4:	88 1f       	adc	r24, r24
    90d6:	da f7       	brpl	.-10     	; 0x90ce <fmod+0x22>
    90d8:	95 2f       	mov	r25, r21
    90da:	55 27       	eor	r21, r21
    90dc:	44 23       	and	r20, r20
    90de:	32 f0       	brmi	.+12     	; 0x90ec <fmod+0x40>
    90e0:	91 50       	subi	r25, 0x01	; 1
    90e2:	50 40       	sbci	r21, 0x00	; 0
    90e4:	22 0f       	add	r18, r18
    90e6:	33 1f       	adc	r19, r19
    90e8:	44 1f       	adc	r20, r20
    90ea:	d2 f7       	brpl	.-12     	; 0x90e0 <fmod+0x34>
    90ec:	bb 27       	eor	r27, r27
    90ee:	e9 1b       	sub	r30, r25
    90f0:	f5 0b       	sbc	r31, r21
    90f2:	62 1b       	sub	r22, r18
    90f4:	73 0b       	sbc	r23, r19
    90f6:	84 0b       	sbc	r24, r20
    90f8:	b1 09       	sbc	r27, r1
    90fa:	b1 f2       	breq	.-84     	; 0x90a8 <__floatsisf+0x88>
    90fc:	22 f4       	brpl	.+8      	; 0x9106 <fmod+0x5a>
    90fe:	62 0f       	add	r22, r18
    9100:	73 1f       	adc	r23, r19
    9102:	84 1f       	adc	r24, r20
    9104:	b1 1d       	adc	r27, r1
    9106:	31 97       	sbiw	r30, 0x01	; 1
    9108:	2a f0       	brmi	.+10     	; 0x9114 <fmod+0x68>
    910a:	66 0f       	add	r22, r22
    910c:	77 1f       	adc	r23, r23
    910e:	88 1f       	adc	r24, r24
    9110:	bb 1f       	adc	r27, r27
    9112:	ef cf       	rjmp	.-34     	; 0x90f2 <fmod+0x46>
    9114:	91 50       	subi	r25, 0x01	; 1
    9116:	50 40       	sbci	r21, 0x00	; 0
    9118:	62 f0       	brmi	.+24     	; 0x9132 <fmod+0x86>
    911a:	41 f0       	breq	.+16     	; 0x912c <fmod+0x80>
    911c:	88 23       	and	r24, r24
    911e:	32 f0       	brmi	.+12     	; 0x912c <fmod+0x80>
    9120:	66 0f       	add	r22, r22
    9122:	77 1f       	adc	r23, r23
    9124:	88 1f       	adc	r24, r24
    9126:	91 50       	subi	r25, 0x01	; 1
    9128:	50 40       	sbci	r21, 0x00	; 0
    912a:	c1 f7       	brne	.-16     	; 0x911c <fmod+0x70>
    912c:	93 95       	inc	r25
    912e:	0c 94 c9 48 	jmp	0x9192	; 0x9192 <__fp_mpack>
    9132:	86 95       	lsr	r24
    9134:	77 95       	ror	r23
    9136:	67 95       	ror	r22
    9138:	9f 5f       	subi	r25, 0xFF	; 255
    913a:	d9 f7       	brne	.-10     	; 0x9132 <fmod+0x86>
    913c:	f7 cf       	rjmp	.-18     	; 0x912c <fmod+0x80>

0000913e <__fp_cmp>:
    913e:	99 0f       	add	r25, r25
    9140:	00 08       	sbc	r0, r0
    9142:	55 0f       	add	r21, r21
    9144:	aa 0b       	sbc	r26, r26
    9146:	e0 e8       	ldi	r30, 0x80	; 128
    9148:	fe ef       	ldi	r31, 0xFE	; 254
    914a:	16 16       	cp	r1, r22
    914c:	17 06       	cpc	r1, r23
    914e:	e8 07       	cpc	r30, r24
    9150:	f9 07       	cpc	r31, r25
    9152:	c0 f0       	brcs	.+48     	; 0x9184 <__fp_cmp+0x46>
    9154:	12 16       	cp	r1, r18
    9156:	13 06       	cpc	r1, r19
    9158:	e4 07       	cpc	r30, r20
    915a:	f5 07       	cpc	r31, r21
    915c:	98 f0       	brcs	.+38     	; 0x9184 <__fp_cmp+0x46>
    915e:	62 1b       	sub	r22, r18
    9160:	73 0b       	sbc	r23, r19
    9162:	84 0b       	sbc	r24, r20
    9164:	95 0b       	sbc	r25, r21
    9166:	39 f4       	brne	.+14     	; 0x9176 <__fp_cmp+0x38>
    9168:	0a 26       	eor	r0, r26
    916a:	61 f0       	breq	.+24     	; 0x9184 <__fp_cmp+0x46>
    916c:	23 2b       	or	r18, r19
    916e:	24 2b       	or	r18, r20
    9170:	25 2b       	or	r18, r21
    9172:	21 f4       	brne	.+8      	; 0x917c <__fp_cmp+0x3e>
    9174:	08 95       	ret
    9176:	0a 26       	eor	r0, r26
    9178:	09 f4       	brne	.+2      	; 0x917c <__fp_cmp+0x3e>
    917a:	a1 40       	sbci	r26, 0x01	; 1
    917c:	a6 95       	lsr	r26
    917e:	8f ef       	ldi	r24, 0xFF	; 255
    9180:	81 1d       	adc	r24, r1
    9182:	81 1d       	adc	r24, r1
    9184:	08 95       	ret

00009186 <__fp_inf>:
    9186:	97 f9       	bld	r25, 7
    9188:	9f 67       	ori	r25, 0x7F	; 127
    918a:	80 e8       	ldi	r24, 0x80	; 128
    918c:	70 e0       	ldi	r23, 0x00	; 0
    918e:	60 e0       	ldi	r22, 0x00	; 0
    9190:	08 95       	ret

00009192 <__fp_mpack>:
    9192:	9f 3f       	cpi	r25, 0xFF	; 255
    9194:	31 f0       	breq	.+12     	; 0x91a2 <__fp_mpack_finite+0xc>

00009196 <__fp_mpack_finite>:
    9196:	91 50       	subi	r25, 0x01	; 1
    9198:	20 f4       	brcc	.+8      	; 0x91a2 <__fp_mpack_finite+0xc>
    919a:	87 95       	ror	r24
    919c:	77 95       	ror	r23
    919e:	67 95       	ror	r22
    91a0:	b7 95       	ror	r27
    91a2:	88 0f       	add	r24, r24
    91a4:	91 1d       	adc	r25, r1
    91a6:	96 95       	lsr	r25
    91a8:	87 95       	ror	r24
    91aa:	97 f9       	bld	r25, 7
    91ac:	08 95       	ret

000091ae <__fp_nan>:
    91ae:	9f ef       	ldi	r25, 0xFF	; 255
    91b0:	80 ec       	ldi	r24, 0xC0	; 192
    91b2:	08 95       	ret

000091b4 <__fp_powser>:
    91b4:	df 93       	push	r29
    91b6:	cf 93       	push	r28
    91b8:	1f 93       	push	r17
    91ba:	0f 93       	push	r16
    91bc:	ff 92       	push	r15
    91be:	ef 92       	push	r14
    91c0:	df 92       	push	r13
    91c2:	7b 01       	movw	r14, r22
    91c4:	8c 01       	movw	r16, r24
    91c6:	68 94       	set
    91c8:	06 c0       	rjmp	.+12     	; 0x91d6 <__fp_powser+0x22>
    91ca:	da 2e       	mov	r13, r26
    91cc:	ef 01       	movw	r28, r30
    91ce:	0e 94 66 4a 	call	0x94cc	; 0x94cc <__mulsf3x>
    91d2:	fe 01       	movw	r30, r28
    91d4:	e8 94       	clt
    91d6:	a5 91       	lpm	r26, Z+
    91d8:	25 91       	lpm	r18, Z+
    91da:	35 91       	lpm	r19, Z+
    91dc:	45 91       	lpm	r20, Z+
    91de:	55 91       	lpm	r21, Z+
    91e0:	a6 f3       	brts	.-24     	; 0x91ca <__fp_powser+0x16>
    91e2:	ef 01       	movw	r28, r30
    91e4:	0e 94 5b 46 	call	0x8cb6	; 0x8cb6 <__addsf3x>
    91e8:	fe 01       	movw	r30, r28
    91ea:	97 01       	movw	r18, r14
    91ec:	a8 01       	movw	r20, r16
    91ee:	da 94       	dec	r13
    91f0:	69 f7       	brne	.-38     	; 0x91cc <__fp_powser+0x18>
    91f2:	df 90       	pop	r13
    91f4:	ef 90       	pop	r14
    91f6:	ff 90       	pop	r15
    91f8:	0f 91       	pop	r16
    91fa:	1f 91       	pop	r17
    91fc:	cf 91       	pop	r28
    91fe:	df 91       	pop	r29
    9200:	08 95       	ret

00009202 <__fp_pscA>:
    9202:	00 24       	eor	r0, r0
    9204:	0a 94       	dec	r0
    9206:	16 16       	cp	r1, r22
    9208:	17 06       	cpc	r1, r23
    920a:	18 06       	cpc	r1, r24
    920c:	09 06       	cpc	r0, r25
    920e:	08 95       	ret

00009210 <__fp_pscB>:
    9210:	00 24       	eor	r0, r0
    9212:	0a 94       	dec	r0
    9214:	12 16       	cp	r1, r18
    9216:	13 06       	cpc	r1, r19
    9218:	14 06       	cpc	r1, r20
    921a:	05 06       	cpc	r0, r21
    921c:	08 95       	ret
    921e:	0c 94 d7 48 	jmp	0x91ae	; 0x91ae <__fp_nan>

00009222 <__fp_rempio2>:
    9222:	0e 94 67 49 	call	0x92ce	; 0x92ce <__fp_splitA>
    9226:	d8 f3       	brcs	.-10     	; 0x921e <__fp_pscB+0xe>
    9228:	e8 94       	clt
    922a:	e0 e0       	ldi	r30, 0x00	; 0
    922c:	bb 27       	eor	r27, r27
    922e:	9f 57       	subi	r25, 0x7F	; 127
    9230:	f0 f0       	brcs	.+60     	; 0x926e <__fp_rempio2+0x4c>
    9232:	2a ed       	ldi	r18, 0xDA	; 218
    9234:	3f e0       	ldi	r19, 0x0F	; 15
    9236:	49 ec       	ldi	r20, 0xC9	; 201
    9238:	06 c0       	rjmp	.+12     	; 0x9246 <__fp_rempio2+0x24>
    923a:	ee 0f       	add	r30, r30
    923c:	bb 0f       	add	r27, r27
    923e:	66 1f       	adc	r22, r22
    9240:	77 1f       	adc	r23, r23
    9242:	88 1f       	adc	r24, r24
    9244:	28 f0       	brcs	.+10     	; 0x9250 <__fp_rempio2+0x2e>
    9246:	b2 3a       	cpi	r27, 0xA2	; 162
    9248:	62 07       	cpc	r22, r18
    924a:	73 07       	cpc	r23, r19
    924c:	84 07       	cpc	r24, r20
    924e:	28 f0       	brcs	.+10     	; 0x925a <__fp_rempio2+0x38>
    9250:	b2 5a       	subi	r27, 0xA2	; 162
    9252:	62 0b       	sbc	r22, r18
    9254:	73 0b       	sbc	r23, r19
    9256:	84 0b       	sbc	r24, r20
    9258:	e3 95       	inc	r30
    925a:	9a 95       	dec	r25
    925c:	72 f7       	brpl	.-36     	; 0x923a <__fp_rempio2+0x18>
    925e:	80 38       	cpi	r24, 0x80	; 128
    9260:	30 f4       	brcc	.+12     	; 0x926e <__fp_rempio2+0x4c>
    9262:	9a 95       	dec	r25
    9264:	bb 0f       	add	r27, r27
    9266:	66 1f       	adc	r22, r22
    9268:	77 1f       	adc	r23, r23
    926a:	88 1f       	adc	r24, r24
    926c:	d2 f7       	brpl	.-12     	; 0x9262 <__fp_rempio2+0x40>
    926e:	90 48       	sbci	r25, 0x80	; 128
    9270:	0c 94 cb 48 	jmp	0x9196	; 0x9196 <__fp_mpack_finite>

00009274 <__fp_round>:
    9274:	09 2e       	mov	r0, r25
    9276:	03 94       	inc	r0
    9278:	00 0c       	add	r0, r0
    927a:	11 f4       	brne	.+4      	; 0x9280 <__fp_round+0xc>
    927c:	88 23       	and	r24, r24
    927e:	52 f0       	brmi	.+20     	; 0x9294 <__fp_round+0x20>
    9280:	bb 0f       	add	r27, r27
    9282:	40 f4       	brcc	.+16     	; 0x9294 <__fp_round+0x20>
    9284:	bf 2b       	or	r27, r31
    9286:	11 f4       	brne	.+4      	; 0x928c <__fp_round+0x18>
    9288:	60 ff       	sbrs	r22, 0
    928a:	04 c0       	rjmp	.+8      	; 0x9294 <__fp_round+0x20>
    928c:	6f 5f       	subi	r22, 0xFF	; 255
    928e:	7f 4f       	sbci	r23, 0xFF	; 255
    9290:	8f 4f       	sbci	r24, 0xFF	; 255
    9292:	9f 4f       	sbci	r25, 0xFF	; 255
    9294:	08 95       	ret

00009296 <__fp_sinus>:
    9296:	ef 93       	push	r30
    9298:	e0 ff       	sbrs	r30, 0
    929a:	07 c0       	rjmp	.+14     	; 0x92aa <__fp_sinus+0x14>
    929c:	a2 ea       	ldi	r26, 0xA2	; 162
    929e:	2a ed       	ldi	r18, 0xDA	; 218
    92a0:	3f e0       	ldi	r19, 0x0F	; 15
    92a2:	49 ec       	ldi	r20, 0xC9	; 201
    92a4:	5f eb       	ldi	r21, 0xBF	; 191
    92a6:	0e 94 5b 46 	call	0x8cb6	; 0x8cb6 <__addsf3x>
    92aa:	0e 94 3a 49 	call	0x9274	; 0x9274 <__fp_round>
    92ae:	0f 90       	pop	r0
    92b0:	03 94       	inc	r0
    92b2:	01 fc       	sbrc	r0, 1
    92b4:	90 58       	subi	r25, 0x80	; 128
    92b6:	ed e6       	ldi	r30, 0x6D	; 109
    92b8:	f2 e0       	ldi	r31, 0x02	; 2
    92ba:	0c 94 21 4b 	jmp	0x9642	; 0x9642 <__fp_powsodd>

000092be <__fp_split3>:
    92be:	57 fd       	sbrc	r21, 7
    92c0:	90 58       	subi	r25, 0x80	; 128
    92c2:	44 0f       	add	r20, r20
    92c4:	55 1f       	adc	r21, r21
    92c6:	59 f0       	breq	.+22     	; 0x92de <__fp_splitA+0x10>
    92c8:	5f 3f       	cpi	r21, 0xFF	; 255
    92ca:	71 f0       	breq	.+28     	; 0x92e8 <__fp_splitA+0x1a>
    92cc:	47 95       	ror	r20

000092ce <__fp_splitA>:
    92ce:	88 0f       	add	r24, r24
    92d0:	97 fb       	bst	r25, 7
    92d2:	99 1f       	adc	r25, r25
    92d4:	61 f0       	breq	.+24     	; 0x92ee <__fp_splitA+0x20>
    92d6:	9f 3f       	cpi	r25, 0xFF	; 255
    92d8:	79 f0       	breq	.+30     	; 0x92f8 <__fp_splitA+0x2a>
    92da:	87 95       	ror	r24
    92dc:	08 95       	ret
    92de:	12 16       	cp	r1, r18
    92e0:	13 06       	cpc	r1, r19
    92e2:	14 06       	cpc	r1, r20
    92e4:	55 1f       	adc	r21, r21
    92e6:	f2 cf       	rjmp	.-28     	; 0x92cc <__fp_split3+0xe>
    92e8:	46 95       	lsr	r20
    92ea:	f1 df       	rcall	.-30     	; 0x92ce <__fp_splitA>
    92ec:	08 c0       	rjmp	.+16     	; 0x92fe <__fp_splitA+0x30>
    92ee:	16 16       	cp	r1, r22
    92f0:	17 06       	cpc	r1, r23
    92f2:	18 06       	cpc	r1, r24
    92f4:	99 1f       	adc	r25, r25
    92f6:	f1 cf       	rjmp	.-30     	; 0x92da <__fp_splitA+0xc>
    92f8:	86 95       	lsr	r24
    92fa:	71 05       	cpc	r23, r1
    92fc:	61 05       	cpc	r22, r1
    92fe:	08 94       	sec
    9300:	08 95       	ret

00009302 <__fp_zero>:
    9302:	e8 94       	clt

00009304 <__fp_szero>:
    9304:	bb 27       	eor	r27, r27
    9306:	66 27       	eor	r22, r22
    9308:	77 27       	eor	r23, r23
    930a:	cb 01       	movw	r24, r22
    930c:	97 f9       	bld	r25, 7
    930e:	08 95       	ret

00009310 <__gesf2>:
    9310:	0e 94 9f 48 	call	0x913e	; 0x913e <__fp_cmp>
    9314:	08 f4       	brcc	.+2      	; 0x9318 <__gesf2+0x8>
    9316:	8f ef       	ldi	r24, 0xFF	; 255
    9318:	08 95       	ret

0000931a <inverse>:
    931a:	9b 01       	movw	r18, r22
    931c:	ac 01       	movw	r20, r24
    931e:	60 e0       	ldi	r22, 0x00	; 0
    9320:	70 e0       	ldi	r23, 0x00	; 0
    9322:	80 e8       	ldi	r24, 0x80	; 128
    9324:	9f e3       	ldi	r25, 0x3F	; 63
    9326:	0c 94 2c 47 	jmp	0x8e58	; 0x8e58 <__divsf3>
    932a:	0c 94 c3 48 	jmp	0x9186	; 0x9186 <__fp_inf>
    932e:	0c 94 c9 48 	jmp	0x9192	; 0x9192 <__fp_mpack>

00009332 <ldexp>:
    9332:	0e 94 67 49 	call	0x92ce	; 0x92ce <__fp_splitA>
    9336:	d8 f3       	brcs	.-10     	; 0x932e <inverse+0x14>
    9338:	99 23       	and	r25, r25
    933a:	c9 f3       	breq	.-14     	; 0x932e <inverse+0x14>
    933c:	94 0f       	add	r25, r20
    933e:	51 1d       	adc	r21, r1
    9340:	a3 f3       	brvs	.-24     	; 0x932a <inverse+0x10>
    9342:	91 50       	subi	r25, 0x01	; 1
    9344:	50 40       	sbci	r21, 0x00	; 0
    9346:	94 f0       	brlt	.+36     	; 0x936c <ldexp+0x3a>
    9348:	59 f0       	breq	.+22     	; 0x9360 <ldexp+0x2e>
    934a:	88 23       	and	r24, r24
    934c:	32 f0       	brmi	.+12     	; 0x935a <ldexp+0x28>
    934e:	66 0f       	add	r22, r22
    9350:	77 1f       	adc	r23, r23
    9352:	88 1f       	adc	r24, r24
    9354:	91 50       	subi	r25, 0x01	; 1
    9356:	50 40       	sbci	r21, 0x00	; 0
    9358:	c1 f7       	brne	.-16     	; 0x934a <ldexp+0x18>
    935a:	9e 3f       	cpi	r25, 0xFE	; 254
    935c:	51 05       	cpc	r21, r1
    935e:	2c f7       	brge	.-54     	; 0x932a <inverse+0x10>
    9360:	88 0f       	add	r24, r24
    9362:	91 1d       	adc	r25, r1
    9364:	96 95       	lsr	r25
    9366:	87 95       	ror	r24
    9368:	97 f9       	bld	r25, 7
    936a:	08 95       	ret
    936c:	5f 3f       	cpi	r21, 0xFF	; 255
    936e:	ac f0       	brlt	.+42     	; 0x939a <ldexp+0x68>
    9370:	98 3e       	cpi	r25, 0xE8	; 232
    9372:	9c f0       	brlt	.+38     	; 0x939a <ldexp+0x68>
    9374:	bb 27       	eor	r27, r27
    9376:	86 95       	lsr	r24
    9378:	77 95       	ror	r23
    937a:	67 95       	ror	r22
    937c:	b7 95       	ror	r27
    937e:	08 f4       	brcc	.+2      	; 0x9382 <ldexp+0x50>
    9380:	b1 60       	ori	r27, 0x01	; 1
    9382:	93 95       	inc	r25
    9384:	c1 f7       	brne	.-16     	; 0x9376 <ldexp+0x44>
    9386:	bb 0f       	add	r27, r27
    9388:	58 f7       	brcc	.-42     	; 0x9360 <ldexp+0x2e>
    938a:	11 f4       	brne	.+4      	; 0x9390 <ldexp+0x5e>
    938c:	60 ff       	sbrs	r22, 0
    938e:	e8 cf       	rjmp	.-48     	; 0x9360 <ldexp+0x2e>
    9390:	6f 5f       	subi	r22, 0xFF	; 255
    9392:	7f 4f       	sbci	r23, 0xFF	; 255
    9394:	8f 4f       	sbci	r24, 0xFF	; 255
    9396:	9f 4f       	sbci	r25, 0xFF	; 255
    9398:	e3 cf       	rjmp	.-58     	; 0x9360 <ldexp+0x2e>
    939a:	0c 94 82 49 	jmp	0x9304	; 0x9304 <__fp_szero>
    939e:	16 f0       	brts	.+4      	; 0x93a4 <ldexp+0x72>
    93a0:	0c 94 c9 48 	jmp	0x9192	; 0x9192 <__fp_mpack>
    93a4:	0c 94 d7 48 	jmp	0x91ae	; 0x91ae <__fp_nan>
    93a8:	68 94       	set
    93aa:	0c 94 c3 48 	jmp	0x9186	; 0x9186 <__fp_inf>

000093ae <log>:
    93ae:	0e 94 67 49 	call	0x92ce	; 0x92ce <__fp_splitA>
    93b2:	a8 f3       	brcs	.-22     	; 0x939e <ldexp+0x6c>
    93b4:	99 23       	and	r25, r25
    93b6:	c1 f3       	breq	.-16     	; 0x93a8 <ldexp+0x76>
    93b8:	ae f3       	brts	.-22     	; 0x93a4 <ldexp+0x72>
    93ba:	df 93       	push	r29
    93bc:	cf 93       	push	r28
    93be:	1f 93       	push	r17
    93c0:	0f 93       	push	r16
    93c2:	ff 92       	push	r15
    93c4:	c9 2f       	mov	r28, r25
    93c6:	dd 27       	eor	r29, r29
    93c8:	88 23       	and	r24, r24
    93ca:	2a f0       	brmi	.+10     	; 0x93d6 <log+0x28>
    93cc:	21 97       	sbiw	r28, 0x01	; 1
    93ce:	66 0f       	add	r22, r22
    93d0:	77 1f       	adc	r23, r23
    93d2:	88 1f       	adc	r24, r24
    93d4:	da f7       	brpl	.-10     	; 0x93cc <log+0x1e>
    93d6:	20 e0       	ldi	r18, 0x00	; 0
    93d8:	30 e0       	ldi	r19, 0x00	; 0
    93da:	40 e8       	ldi	r20, 0x80	; 128
    93dc:	5f eb       	ldi	r21, 0xBF	; 191
    93de:	9f e3       	ldi	r25, 0x3F	; 63
    93e0:	88 39       	cpi	r24, 0x98	; 152
    93e2:	20 f0       	brcs	.+8      	; 0x93ec <log+0x3e>
    93e4:	80 3e       	cpi	r24, 0xE0	; 224
    93e6:	38 f0       	brcs	.+14     	; 0x93f6 <log+0x48>
    93e8:	21 96       	adiw	r28, 0x01	; 1
    93ea:	8f 77       	andi	r24, 0x7F	; 127
    93ec:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    93f0:	eb e8       	ldi	r30, 0x8B	; 139
    93f2:	f2 e0       	ldi	r31, 0x02	; 2
    93f4:	04 c0       	rjmp	.+8      	; 0x93fe <log+0x50>
    93f6:	0e 94 44 46 	call	0x8c88	; 0x8c88 <__addsf3>
    93fa:	e8 eb       	ldi	r30, 0xB8	; 184
    93fc:	f2 e0       	ldi	r31, 0x02	; 2
    93fe:	0e 94 da 48 	call	0x91b4	; 0x91b4 <__fp_powser>
    9402:	8b 01       	movw	r16, r22
    9404:	be 01       	movw	r22, r28
    9406:	ec 01       	movw	r28, r24
    9408:	fb 2e       	mov	r15, r27
    940a:	6f 57       	subi	r22, 0x7F	; 127
    940c:	71 09       	sbc	r23, r1
    940e:	75 95       	asr	r23
    9410:	77 1f       	adc	r23, r23
    9412:	88 0b       	sbc	r24, r24
    9414:	99 0b       	sbc	r25, r25
    9416:	0e 94 10 48 	call	0x9020	; 0x9020 <__floatsisf>
    941a:	28 e1       	ldi	r18, 0x18	; 24
    941c:	32 e7       	ldi	r19, 0x72	; 114
    941e:	41 e3       	ldi	r20, 0x31	; 49
    9420:	5f e3       	ldi	r21, 0x3F	; 63
    9422:	0e 94 66 4a 	call	0x94cc	; 0x94cc <__mulsf3x>
    9426:	af 2d       	mov	r26, r15
    9428:	98 01       	movw	r18, r16
    942a:	ae 01       	movw	r20, r28
    942c:	ff 90       	pop	r15
    942e:	0f 91       	pop	r16
    9430:	1f 91       	pop	r17
    9432:	cf 91       	pop	r28
    9434:	df 91       	pop	r29
    9436:	0e 94 5b 46 	call	0x8cb6	; 0x8cb6 <__addsf3x>
    943a:	0c 94 3a 49 	jmp	0x9274	; 0x9274 <__fp_round>

0000943e <modf>:
    943e:	fa 01       	movw	r30, r20
    9440:	dc 01       	movw	r26, r24
    9442:	aa 0f       	add	r26, r26
    9444:	bb 1f       	adc	r27, r27
    9446:	9b 01       	movw	r18, r22
    9448:	ac 01       	movw	r20, r24
    944a:	bf 57       	subi	r27, 0x7F	; 127
    944c:	28 f4       	brcc	.+10     	; 0x9458 <modf+0x1a>
    944e:	22 27       	eor	r18, r18
    9450:	33 27       	eor	r19, r19
    9452:	44 27       	eor	r20, r20
    9454:	50 78       	andi	r21, 0x80	; 128
    9456:	20 c0       	rjmp	.+64     	; 0x9498 <modf+0x5a>
    9458:	b7 51       	subi	r27, 0x17	; 23
    945a:	90 f4       	brcc	.+36     	; 0x9480 <modf+0x42>
    945c:	ab 2f       	mov	r26, r27
    945e:	00 24       	eor	r0, r0
    9460:	46 95       	lsr	r20
    9462:	37 95       	ror	r19
    9464:	27 95       	ror	r18
    9466:	01 1c       	adc	r0, r1
    9468:	a3 95       	inc	r26
    946a:	d2 f3       	brmi	.-12     	; 0x9460 <modf+0x22>
    946c:	00 20       	and	r0, r0
    946e:	71 f0       	breq	.+28     	; 0x948c <modf+0x4e>
    9470:	22 0f       	add	r18, r18
    9472:	33 1f       	adc	r19, r19
    9474:	44 1f       	adc	r20, r20
    9476:	b3 95       	inc	r27
    9478:	da f3       	brmi	.-10     	; 0x9470 <modf+0x32>
    947a:	0e d0       	rcall	.+28     	; 0x9498 <modf+0x5a>
    947c:	0c 94 43 46 	jmp	0x8c86	; 0x8c86 <__subsf3>
    9480:	61 30       	cpi	r22, 0x01	; 1
    9482:	71 05       	cpc	r23, r1
    9484:	a0 e8       	ldi	r26, 0x80	; 128
    9486:	8a 07       	cpc	r24, r26
    9488:	b9 46       	sbci	r27, 0x69	; 105
    948a:	30 f4       	brcc	.+12     	; 0x9498 <modf+0x5a>
    948c:	9b 01       	movw	r18, r22
    948e:	ac 01       	movw	r20, r24
    9490:	66 27       	eor	r22, r22
    9492:	77 27       	eor	r23, r23
    9494:	88 27       	eor	r24, r24
    9496:	90 78       	andi	r25, 0x80	; 128
    9498:	30 96       	adiw	r30, 0x00	; 0
    949a:	21 f0       	breq	.+8      	; 0x94a4 <modf+0x66>
    949c:	20 83       	st	Z, r18
    949e:	31 83       	std	Z+1, r19	; 0x01
    94a0:	42 83       	std	Z+2, r20	; 0x02
    94a2:	53 83       	std	Z+3, r21	; 0x03
    94a4:	08 95       	ret

000094a6 <__mulsf3>:
    94a6:	0e 94 66 4a 	call	0x94cc	; 0x94cc <__mulsf3x>
    94aa:	0c 94 3a 49 	jmp	0x9274	; 0x9274 <__fp_round>
    94ae:	0e 94 01 49 	call	0x9202	; 0x9202 <__fp_pscA>
    94b2:	38 f0       	brcs	.+14     	; 0x94c2 <__mulsf3+0x1c>
    94b4:	0e 94 08 49 	call	0x9210	; 0x9210 <__fp_pscB>
    94b8:	20 f0       	brcs	.+8      	; 0x94c2 <__mulsf3+0x1c>
    94ba:	95 23       	and	r25, r21
    94bc:	11 f0       	breq	.+4      	; 0x94c2 <__mulsf3+0x1c>
    94be:	0c 94 c3 48 	jmp	0x9186	; 0x9186 <__fp_inf>
    94c2:	0c 94 d7 48 	jmp	0x91ae	; 0x91ae <__fp_nan>
    94c6:	11 24       	eor	r1, r1
    94c8:	0c 94 82 49 	jmp	0x9304	; 0x9304 <__fp_szero>

000094cc <__mulsf3x>:
    94cc:	0e 94 5f 49 	call	0x92be	; 0x92be <__fp_split3>
    94d0:	70 f3       	brcs	.-36     	; 0x94ae <__mulsf3+0x8>

000094d2 <__mulsf3_pse>:
    94d2:	95 9f       	mul	r25, r21
    94d4:	c1 f3       	breq	.-16     	; 0x94c6 <__mulsf3+0x20>
    94d6:	95 0f       	add	r25, r21
    94d8:	50 e0       	ldi	r21, 0x00	; 0
    94da:	55 1f       	adc	r21, r21
    94dc:	62 9f       	mul	r22, r18
    94de:	f0 01       	movw	r30, r0
    94e0:	72 9f       	mul	r23, r18
    94e2:	bb 27       	eor	r27, r27
    94e4:	f0 0d       	add	r31, r0
    94e6:	b1 1d       	adc	r27, r1
    94e8:	63 9f       	mul	r22, r19
    94ea:	aa 27       	eor	r26, r26
    94ec:	f0 0d       	add	r31, r0
    94ee:	b1 1d       	adc	r27, r1
    94f0:	aa 1f       	adc	r26, r26
    94f2:	64 9f       	mul	r22, r20
    94f4:	66 27       	eor	r22, r22
    94f6:	b0 0d       	add	r27, r0
    94f8:	a1 1d       	adc	r26, r1
    94fa:	66 1f       	adc	r22, r22
    94fc:	82 9f       	mul	r24, r18
    94fe:	22 27       	eor	r18, r18
    9500:	b0 0d       	add	r27, r0
    9502:	a1 1d       	adc	r26, r1
    9504:	62 1f       	adc	r22, r18
    9506:	73 9f       	mul	r23, r19
    9508:	b0 0d       	add	r27, r0
    950a:	a1 1d       	adc	r26, r1
    950c:	62 1f       	adc	r22, r18
    950e:	83 9f       	mul	r24, r19
    9510:	a0 0d       	add	r26, r0
    9512:	61 1d       	adc	r22, r1
    9514:	22 1f       	adc	r18, r18
    9516:	74 9f       	mul	r23, r20
    9518:	33 27       	eor	r19, r19
    951a:	a0 0d       	add	r26, r0
    951c:	61 1d       	adc	r22, r1
    951e:	23 1f       	adc	r18, r19
    9520:	84 9f       	mul	r24, r20
    9522:	60 0d       	add	r22, r0
    9524:	21 1d       	adc	r18, r1
    9526:	82 2f       	mov	r24, r18
    9528:	76 2f       	mov	r23, r22
    952a:	6a 2f       	mov	r22, r26
    952c:	11 24       	eor	r1, r1
    952e:	9f 57       	subi	r25, 0x7F	; 127
    9530:	50 40       	sbci	r21, 0x00	; 0
    9532:	9a f0       	brmi	.+38     	; 0x955a <__mulsf3_pse+0x88>
    9534:	f1 f0       	breq	.+60     	; 0x9572 <__mulsf3_pse+0xa0>
    9536:	88 23       	and	r24, r24
    9538:	4a f0       	brmi	.+18     	; 0x954c <__mulsf3_pse+0x7a>
    953a:	ee 0f       	add	r30, r30
    953c:	ff 1f       	adc	r31, r31
    953e:	bb 1f       	adc	r27, r27
    9540:	66 1f       	adc	r22, r22
    9542:	77 1f       	adc	r23, r23
    9544:	88 1f       	adc	r24, r24
    9546:	91 50       	subi	r25, 0x01	; 1
    9548:	50 40       	sbci	r21, 0x00	; 0
    954a:	a9 f7       	brne	.-22     	; 0x9536 <__mulsf3_pse+0x64>
    954c:	9e 3f       	cpi	r25, 0xFE	; 254
    954e:	51 05       	cpc	r21, r1
    9550:	80 f0       	brcs	.+32     	; 0x9572 <__mulsf3_pse+0xa0>
    9552:	0c 94 c3 48 	jmp	0x9186	; 0x9186 <__fp_inf>
    9556:	0c 94 82 49 	jmp	0x9304	; 0x9304 <__fp_szero>
    955a:	5f 3f       	cpi	r21, 0xFF	; 255
    955c:	e4 f3       	brlt	.-8      	; 0x9556 <__mulsf3_pse+0x84>
    955e:	98 3e       	cpi	r25, 0xE8	; 232
    9560:	d4 f3       	brlt	.-12     	; 0x9556 <__mulsf3_pse+0x84>
    9562:	86 95       	lsr	r24
    9564:	77 95       	ror	r23
    9566:	67 95       	ror	r22
    9568:	b7 95       	ror	r27
    956a:	f7 95       	ror	r31
    956c:	e7 95       	ror	r30
    956e:	9f 5f       	subi	r25, 0xFF	; 255
    9570:	c1 f7       	brne	.-16     	; 0x9562 <__mulsf3_pse+0x90>
    9572:	fe 2b       	or	r31, r30
    9574:	88 0f       	add	r24, r24
    9576:	91 1d       	adc	r25, r1
    9578:	96 95       	lsr	r25
    957a:	87 95       	ror	r24
    957c:	97 f9       	bld	r25, 7
    957e:	08 95       	ret

00009580 <pow>:
    9580:	fa 01       	movw	r30, r20
    9582:	ee 0f       	add	r30, r30
    9584:	ff 1f       	adc	r31, r31
    9586:	30 96       	adiw	r30, 0x00	; 0
    9588:	21 05       	cpc	r18, r1
    958a:	31 05       	cpc	r19, r1
    958c:	a1 f1       	breq	.+104    	; 0x95f6 <pow+0x76>
    958e:	61 15       	cp	r22, r1
    9590:	71 05       	cpc	r23, r1
    9592:	61 f4       	brne	.+24     	; 0x95ac <pow+0x2c>
    9594:	80 38       	cpi	r24, 0x80	; 128
    9596:	bf e3       	ldi	r27, 0x3F	; 63
    9598:	9b 07       	cpc	r25, r27
    959a:	49 f1       	breq	.+82     	; 0x95ee <pow+0x6e>
    959c:	68 94       	set
    959e:	90 38       	cpi	r25, 0x80	; 128
    95a0:	81 05       	cpc	r24, r1
    95a2:	61 f0       	breq	.+24     	; 0x95bc <pow+0x3c>
    95a4:	80 38       	cpi	r24, 0x80	; 128
    95a6:	bf ef       	ldi	r27, 0xFF	; 255
    95a8:	9b 07       	cpc	r25, r27
    95aa:	41 f0       	breq	.+16     	; 0x95bc <pow+0x3c>
    95ac:	99 23       	and	r25, r25
    95ae:	4a f5       	brpl	.+82     	; 0x9602 <pow+0x82>
    95b0:	ff 3f       	cpi	r31, 0xFF	; 255
    95b2:	e1 05       	cpc	r30, r1
    95b4:	31 05       	cpc	r19, r1
    95b6:	21 05       	cpc	r18, r1
    95b8:	19 f1       	breq	.+70     	; 0x9600 <pow+0x80>
    95ba:	e8 94       	clt
    95bc:	08 94       	sec
    95be:	e7 95       	ror	r30
    95c0:	d9 01       	movw	r26, r18
    95c2:	aa 23       	and	r26, r26
    95c4:	29 f4       	brne	.+10     	; 0x95d0 <pow+0x50>
    95c6:	ab 2f       	mov	r26, r27
    95c8:	be 2f       	mov	r27, r30
    95ca:	f8 5f       	subi	r31, 0xF8	; 248
    95cc:	d0 f3       	brcs	.-12     	; 0x95c2 <pow+0x42>
    95ce:	10 c0       	rjmp	.+32     	; 0x95f0 <pow+0x70>
    95d0:	ff 5f       	subi	r31, 0xFF	; 255
    95d2:	70 f4       	brcc	.+28     	; 0x95f0 <pow+0x70>
    95d4:	a6 95       	lsr	r26
    95d6:	e0 f7       	brcc	.-8      	; 0x95d0 <pow+0x50>
    95d8:	f7 39       	cpi	r31, 0x97	; 151
    95da:	50 f0       	brcs	.+20     	; 0x95f0 <pow+0x70>
    95dc:	19 f0       	breq	.+6      	; 0x95e4 <pow+0x64>
    95de:	ff 3a       	cpi	r31, 0xAF	; 175
    95e0:	38 f4       	brcc	.+14     	; 0x95f0 <pow+0x70>
    95e2:	9f 77       	andi	r25, 0x7F	; 127
    95e4:	9f 93       	push	r25
    95e6:	0d d0       	rcall	.+26     	; 0x9602 <pow+0x82>
    95e8:	0f 90       	pop	r0
    95ea:	07 fc       	sbrc	r0, 7
    95ec:	90 58       	subi	r25, 0x80	; 128
    95ee:	08 95       	ret
    95f0:	46 f0       	brts	.+16     	; 0x9602 <pow+0x82>
    95f2:	0c 94 d7 48 	jmp	0x91ae	; 0x91ae <__fp_nan>
    95f6:	60 e0       	ldi	r22, 0x00	; 0
    95f8:	70 e0       	ldi	r23, 0x00	; 0
    95fa:	80 e8       	ldi	r24, 0x80	; 128
    95fc:	9f e3       	ldi	r25, 0x3F	; 63
    95fe:	08 95       	ret
    9600:	4f e7       	ldi	r20, 0x7F	; 127
    9602:	9f 77       	andi	r25, 0x7F	; 127
    9604:	5f 93       	push	r21
    9606:	4f 93       	push	r20
    9608:	3f 93       	push	r19
    960a:	2f 93       	push	r18
    960c:	0e 94 d7 49 	call	0x93ae	; 0x93ae <log>
    9610:	2f 91       	pop	r18
    9612:	3f 91       	pop	r19
    9614:	4f 91       	pop	r20
    9616:	5f 91       	pop	r21
    9618:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    961c:	0c 94 a6 47 	jmp	0x8f4c	; 0x8f4c <exp>

00009620 <sin>:
    9620:	9f 93       	push	r25
    9622:	0e 94 11 49 	call	0x9222	; 0x9222 <__fp_rempio2>
    9626:	0f 90       	pop	r0
    9628:	07 fc       	sbrc	r0, 7
    962a:	ee 5f       	subi	r30, 0xFE	; 254
    962c:	0c 94 4b 49 	jmp	0x9296	; 0x9296 <__fp_sinus>

00009630 <square>:
    9630:	9b 01       	movw	r18, r22
    9632:	ac 01       	movw	r20, r24
    9634:	0c 94 53 4a 	jmp	0x94a6	; 0x94a6 <__mulsf3>

00009638 <__unordsf2>:
    9638:	0e 94 9f 48 	call	0x913e	; 0x913e <__fp_cmp>
    963c:	88 0b       	sbc	r24, r24
    963e:	99 0b       	sbc	r25, r25
    9640:	08 95       	ret

00009642 <__fp_powsodd>:
    9642:	9f 93       	push	r25
    9644:	8f 93       	push	r24
    9646:	7f 93       	push	r23
    9648:	6f 93       	push	r22
    964a:	ff 93       	push	r31
    964c:	ef 93       	push	r30
    964e:	9b 01       	movw	r18, r22
    9650:	ac 01       	movw	r20, r24
    9652:	0e 94 53 4a 	call	0x94a6	; 0x94a6 <__mulsf3>
    9656:	ef 91       	pop	r30
    9658:	ff 91       	pop	r31
    965a:	0e 94 da 48 	call	0x91b4	; 0x91b4 <__fp_powser>
    965e:	2f 91       	pop	r18
    9660:	3f 91       	pop	r19
    9662:	4f 91       	pop	r20
    9664:	5f 91       	pop	r21
    9666:	0c 94 53 4a 	jmp	0x94a6	; 0x94a6 <__mulsf3>

0000966a <__mulsi3>:
    966a:	db 01       	movw	r26, r22
    966c:	8f 93       	push	r24
    966e:	9f 93       	push	r25
    9670:	0e 94 a6 4b 	call	0x974c	; 0x974c <__muluhisi3>
    9674:	bf 91       	pop	r27
    9676:	af 91       	pop	r26
    9678:	a2 9f       	mul	r26, r18
    967a:	80 0d       	add	r24, r0
    967c:	91 1d       	adc	r25, r1
    967e:	a3 9f       	mul	r26, r19
    9680:	90 0d       	add	r25, r0
    9682:	b2 9f       	mul	r27, r18
    9684:	90 0d       	add	r25, r0
    9686:	11 24       	eor	r1, r1
    9688:	08 95       	ret

0000968a <__udivmodhi4>:
    968a:	aa 1b       	sub	r26, r26
    968c:	bb 1b       	sub	r27, r27
    968e:	51 e1       	ldi	r21, 0x11	; 17
    9690:	07 c0       	rjmp	.+14     	; 0x96a0 <__udivmodhi4_ep>

00009692 <__udivmodhi4_loop>:
    9692:	aa 1f       	adc	r26, r26
    9694:	bb 1f       	adc	r27, r27
    9696:	a6 17       	cp	r26, r22
    9698:	b7 07       	cpc	r27, r23
    969a:	10 f0       	brcs	.+4      	; 0x96a0 <__udivmodhi4_ep>
    969c:	a6 1b       	sub	r26, r22
    969e:	b7 0b       	sbc	r27, r23

000096a0 <__udivmodhi4_ep>:
    96a0:	88 1f       	adc	r24, r24
    96a2:	99 1f       	adc	r25, r25
    96a4:	5a 95       	dec	r21
    96a6:	a9 f7       	brne	.-22     	; 0x9692 <__udivmodhi4_loop>
    96a8:	80 95       	com	r24
    96aa:	90 95       	com	r25
    96ac:	bc 01       	movw	r22, r24
    96ae:	cd 01       	movw	r24, r26
    96b0:	08 95       	ret

000096b2 <__divmodhi4>:
    96b2:	97 fb       	bst	r25, 7
    96b4:	07 2e       	mov	r0, r23
    96b6:	16 f4       	brtc	.+4      	; 0x96bc <__divmodhi4+0xa>
    96b8:	00 94       	com	r0
    96ba:	07 d0       	rcall	.+14     	; 0x96ca <__divmodhi4_neg1>
    96bc:	77 fd       	sbrc	r23, 7
    96be:	09 d0       	rcall	.+18     	; 0x96d2 <__divmodhi4_neg2>
    96c0:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodhi4>
    96c4:	07 fc       	sbrc	r0, 7
    96c6:	05 d0       	rcall	.+10     	; 0x96d2 <__divmodhi4_neg2>
    96c8:	3e f4       	brtc	.+14     	; 0x96d8 <__divmodhi4_exit>

000096ca <__divmodhi4_neg1>:
    96ca:	90 95       	com	r25
    96cc:	81 95       	neg	r24
    96ce:	9f 4f       	sbci	r25, 0xFF	; 255
    96d0:	08 95       	ret

000096d2 <__divmodhi4_neg2>:
    96d2:	70 95       	com	r23
    96d4:	61 95       	neg	r22
    96d6:	7f 4f       	sbci	r23, 0xFF	; 255

000096d8 <__divmodhi4_exit>:
    96d8:	08 95       	ret

000096da <__udivmodsi4>:
    96da:	a1 e2       	ldi	r26, 0x21	; 33
    96dc:	1a 2e       	mov	r1, r26
    96de:	aa 1b       	sub	r26, r26
    96e0:	bb 1b       	sub	r27, r27
    96e2:	fd 01       	movw	r30, r26
    96e4:	0d c0       	rjmp	.+26     	; 0x9700 <__udivmodsi4_ep>

000096e6 <__udivmodsi4_loop>:
    96e6:	aa 1f       	adc	r26, r26
    96e8:	bb 1f       	adc	r27, r27
    96ea:	ee 1f       	adc	r30, r30
    96ec:	ff 1f       	adc	r31, r31
    96ee:	a2 17       	cp	r26, r18
    96f0:	b3 07       	cpc	r27, r19
    96f2:	e4 07       	cpc	r30, r20
    96f4:	f5 07       	cpc	r31, r21
    96f6:	20 f0       	brcs	.+8      	; 0x9700 <__udivmodsi4_ep>
    96f8:	a2 1b       	sub	r26, r18
    96fa:	b3 0b       	sbc	r27, r19
    96fc:	e4 0b       	sbc	r30, r20
    96fe:	f5 0b       	sbc	r31, r21

00009700 <__udivmodsi4_ep>:
    9700:	66 1f       	adc	r22, r22
    9702:	77 1f       	adc	r23, r23
    9704:	88 1f       	adc	r24, r24
    9706:	99 1f       	adc	r25, r25
    9708:	1a 94       	dec	r1
    970a:	69 f7       	brne	.-38     	; 0x96e6 <__udivmodsi4_loop>
    970c:	60 95       	com	r22
    970e:	70 95       	com	r23
    9710:	80 95       	com	r24
    9712:	90 95       	com	r25
    9714:	9b 01       	movw	r18, r22
    9716:	ac 01       	movw	r20, r24
    9718:	bd 01       	movw	r22, r26
    971a:	cf 01       	movw	r24, r30
    971c:	08 95       	ret

0000971e <__tablejump2__>:
    971e:	ee 0f       	add	r30, r30
    9720:	ff 1f       	adc	r31, r31
    9722:	88 1f       	adc	r24, r24
    9724:	8b bf       	out	0x3b, r24	; 59
    9726:	07 90       	elpm	r0, Z+
    9728:	f6 91       	elpm	r31, Z
    972a:	e0 2d       	mov	r30, r0
    972c:	19 94       	eijmp

0000972e <__umulhisi3>:
    972e:	a2 9f       	mul	r26, r18
    9730:	b0 01       	movw	r22, r0
    9732:	b3 9f       	mul	r27, r19
    9734:	c0 01       	movw	r24, r0
    9736:	a3 9f       	mul	r26, r19
    9738:	70 0d       	add	r23, r0
    973a:	81 1d       	adc	r24, r1
    973c:	11 24       	eor	r1, r1
    973e:	91 1d       	adc	r25, r1
    9740:	b2 9f       	mul	r27, r18
    9742:	70 0d       	add	r23, r0
    9744:	81 1d       	adc	r24, r1
    9746:	11 24       	eor	r1, r1
    9748:	91 1d       	adc	r25, r1
    974a:	08 95       	ret

0000974c <__muluhisi3>:
    974c:	0e 94 97 4b 	call	0x972e	; 0x972e <__umulhisi3>
    9750:	a5 9f       	mul	r26, r21
    9752:	90 0d       	add	r25, r0
    9754:	b4 9f       	mul	r27, r20
    9756:	90 0d       	add	r25, r0
    9758:	a4 9f       	mul	r26, r20
    975a:	80 0d       	add	r24, r0
    975c:	91 1d       	adc	r25, r1
    975e:	11 24       	eor	r1, r1
    9760:	08 95       	ret

00009762 <malloc>:
    9762:	0f 93       	push	r16
    9764:	1f 93       	push	r17
    9766:	cf 93       	push	r28
    9768:	df 93       	push	r29
    976a:	82 30       	cpi	r24, 0x02	; 2
    976c:	91 05       	cpc	r25, r1
    976e:	10 f4       	brcc	.+4      	; 0x9774 <malloc+0x12>
    9770:	82 e0       	ldi	r24, 0x02	; 2
    9772:	90 e0       	ldi	r25, 0x00	; 0
    9774:	e0 91 28 26 	lds	r30, 0x2628	; 0x802628 <__flp>
    9778:	f0 91 29 26 	lds	r31, 0x2629	; 0x802629 <__flp+0x1>
    977c:	20 e0       	ldi	r18, 0x00	; 0
    977e:	30 e0       	ldi	r19, 0x00	; 0
    9780:	a0 e0       	ldi	r26, 0x00	; 0
    9782:	b0 e0       	ldi	r27, 0x00	; 0
    9784:	30 97       	sbiw	r30, 0x00	; 0
    9786:	19 f1       	breq	.+70     	; 0x97ce <malloc+0x6c>
    9788:	40 81       	ld	r20, Z
    978a:	51 81       	ldd	r21, Z+1	; 0x01
    978c:	02 81       	ldd	r16, Z+2	; 0x02
    978e:	13 81       	ldd	r17, Z+3	; 0x03
    9790:	48 17       	cp	r20, r24
    9792:	59 07       	cpc	r21, r25
    9794:	c8 f0       	brcs	.+50     	; 0x97c8 <malloc+0x66>
    9796:	84 17       	cp	r24, r20
    9798:	95 07       	cpc	r25, r21
    979a:	69 f4       	brne	.+26     	; 0x97b6 <malloc+0x54>
    979c:	10 97       	sbiw	r26, 0x00	; 0
    979e:	31 f0       	breq	.+12     	; 0x97ac <malloc+0x4a>
    97a0:	12 96       	adiw	r26, 0x02	; 2
    97a2:	0c 93       	st	X, r16
    97a4:	12 97       	sbiw	r26, 0x02	; 2
    97a6:	13 96       	adiw	r26, 0x03	; 3
    97a8:	1c 93       	st	X, r17
    97aa:	27 c0       	rjmp	.+78     	; 0x97fa <malloc+0x98>
    97ac:	00 93 28 26 	sts	0x2628, r16	; 0x802628 <__flp>
    97b0:	10 93 29 26 	sts	0x2629, r17	; 0x802629 <__flp+0x1>
    97b4:	22 c0       	rjmp	.+68     	; 0x97fa <malloc+0x98>
    97b6:	21 15       	cp	r18, r1
    97b8:	31 05       	cpc	r19, r1
    97ba:	19 f0       	breq	.+6      	; 0x97c2 <malloc+0x60>
    97bc:	42 17       	cp	r20, r18
    97be:	53 07       	cpc	r21, r19
    97c0:	18 f4       	brcc	.+6      	; 0x97c8 <malloc+0x66>
    97c2:	9a 01       	movw	r18, r20
    97c4:	bd 01       	movw	r22, r26
    97c6:	ef 01       	movw	r28, r30
    97c8:	df 01       	movw	r26, r30
    97ca:	f8 01       	movw	r30, r16
    97cc:	db cf       	rjmp	.-74     	; 0x9784 <malloc+0x22>
    97ce:	21 15       	cp	r18, r1
    97d0:	31 05       	cpc	r19, r1
    97d2:	f9 f0       	breq	.+62     	; 0x9812 <malloc+0xb0>
    97d4:	28 1b       	sub	r18, r24
    97d6:	39 0b       	sbc	r19, r25
    97d8:	24 30       	cpi	r18, 0x04	; 4
    97da:	31 05       	cpc	r19, r1
    97dc:	80 f4       	brcc	.+32     	; 0x97fe <malloc+0x9c>
    97de:	8a 81       	ldd	r24, Y+2	; 0x02
    97e0:	9b 81       	ldd	r25, Y+3	; 0x03
    97e2:	61 15       	cp	r22, r1
    97e4:	71 05       	cpc	r23, r1
    97e6:	21 f0       	breq	.+8      	; 0x97f0 <malloc+0x8e>
    97e8:	fb 01       	movw	r30, r22
    97ea:	82 83       	std	Z+2, r24	; 0x02
    97ec:	93 83       	std	Z+3, r25	; 0x03
    97ee:	04 c0       	rjmp	.+8      	; 0x97f8 <malloc+0x96>
    97f0:	80 93 28 26 	sts	0x2628, r24	; 0x802628 <__flp>
    97f4:	90 93 29 26 	sts	0x2629, r25	; 0x802629 <__flp+0x1>
    97f8:	fe 01       	movw	r30, r28
    97fa:	32 96       	adiw	r30, 0x02	; 2
    97fc:	44 c0       	rjmp	.+136    	; 0x9886 <malloc+0x124>
    97fe:	fe 01       	movw	r30, r28
    9800:	e2 0f       	add	r30, r18
    9802:	f3 1f       	adc	r31, r19
    9804:	81 93       	st	Z+, r24
    9806:	91 93       	st	Z+, r25
    9808:	22 50       	subi	r18, 0x02	; 2
    980a:	31 09       	sbc	r19, r1
    980c:	28 83       	st	Y, r18
    980e:	39 83       	std	Y+1, r19	; 0x01
    9810:	3a c0       	rjmp	.+116    	; 0x9886 <malloc+0x124>
    9812:	20 91 26 26 	lds	r18, 0x2626	; 0x802626 <__brkval>
    9816:	30 91 27 26 	lds	r19, 0x2627	; 0x802627 <__brkval+0x1>
    981a:	23 2b       	or	r18, r19
    981c:	41 f4       	brne	.+16     	; 0x982e <malloc+0xcc>
    981e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    9822:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    9826:	20 93 26 26 	sts	0x2626, r18	; 0x802626 <__brkval>
    982a:	30 93 27 26 	sts	0x2627, r19	; 0x802627 <__brkval+0x1>
    982e:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    9832:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    9836:	21 15       	cp	r18, r1
    9838:	31 05       	cpc	r19, r1
    983a:	41 f4       	brne	.+16     	; 0x984c <malloc+0xea>
    983c:	2d b7       	in	r18, 0x3d	; 61
    983e:	3e b7       	in	r19, 0x3e	; 62
    9840:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    9844:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    9848:	24 1b       	sub	r18, r20
    984a:	35 0b       	sbc	r19, r21
    984c:	e0 91 26 26 	lds	r30, 0x2626	; 0x802626 <__brkval>
    9850:	f0 91 27 26 	lds	r31, 0x2627	; 0x802627 <__brkval+0x1>
    9854:	e2 17       	cp	r30, r18
    9856:	f3 07       	cpc	r31, r19
    9858:	a0 f4       	brcc	.+40     	; 0x9882 <malloc+0x120>
    985a:	2e 1b       	sub	r18, r30
    985c:	3f 0b       	sbc	r19, r31
    985e:	28 17       	cp	r18, r24
    9860:	39 07       	cpc	r19, r25
    9862:	78 f0       	brcs	.+30     	; 0x9882 <malloc+0x120>
    9864:	ac 01       	movw	r20, r24
    9866:	4e 5f       	subi	r20, 0xFE	; 254
    9868:	5f 4f       	sbci	r21, 0xFF	; 255
    986a:	24 17       	cp	r18, r20
    986c:	35 07       	cpc	r19, r21
    986e:	48 f0       	brcs	.+18     	; 0x9882 <malloc+0x120>
    9870:	4e 0f       	add	r20, r30
    9872:	5f 1f       	adc	r21, r31
    9874:	40 93 26 26 	sts	0x2626, r20	; 0x802626 <__brkval>
    9878:	50 93 27 26 	sts	0x2627, r21	; 0x802627 <__brkval+0x1>
    987c:	81 93       	st	Z+, r24
    987e:	91 93       	st	Z+, r25
    9880:	02 c0       	rjmp	.+4      	; 0x9886 <malloc+0x124>
    9882:	e0 e0       	ldi	r30, 0x00	; 0
    9884:	f0 e0       	ldi	r31, 0x00	; 0
    9886:	cf 01       	movw	r24, r30
    9888:	df 91       	pop	r29
    988a:	cf 91       	pop	r28
    988c:	1f 91       	pop	r17
    988e:	0f 91       	pop	r16
    9890:	08 95       	ret

00009892 <free>:
    9892:	cf 93       	push	r28
    9894:	df 93       	push	r29
    9896:	00 97       	sbiw	r24, 0x00	; 0
    9898:	09 f4       	brne	.+2      	; 0x989c <free+0xa>
    989a:	81 c0       	rjmp	.+258    	; 0x999e <free+0x10c>
    989c:	fc 01       	movw	r30, r24
    989e:	32 97       	sbiw	r30, 0x02	; 2
    98a0:	12 82       	std	Z+2, r1	; 0x02
    98a2:	13 82       	std	Z+3, r1	; 0x03
    98a4:	a0 91 28 26 	lds	r26, 0x2628	; 0x802628 <__flp>
    98a8:	b0 91 29 26 	lds	r27, 0x2629	; 0x802629 <__flp+0x1>
    98ac:	10 97       	sbiw	r26, 0x00	; 0
    98ae:	81 f4       	brne	.+32     	; 0x98d0 <free+0x3e>
    98b0:	20 81       	ld	r18, Z
    98b2:	31 81       	ldd	r19, Z+1	; 0x01
    98b4:	82 0f       	add	r24, r18
    98b6:	93 1f       	adc	r25, r19
    98b8:	20 91 26 26 	lds	r18, 0x2626	; 0x802626 <__brkval>
    98bc:	30 91 27 26 	lds	r19, 0x2627	; 0x802627 <__brkval+0x1>
    98c0:	28 17       	cp	r18, r24
    98c2:	39 07       	cpc	r19, r25
    98c4:	51 f5       	brne	.+84     	; 0x991a <free+0x88>
    98c6:	e0 93 26 26 	sts	0x2626, r30	; 0x802626 <__brkval>
    98ca:	f0 93 27 26 	sts	0x2627, r31	; 0x802627 <__brkval+0x1>
    98ce:	67 c0       	rjmp	.+206    	; 0x999e <free+0x10c>
    98d0:	ed 01       	movw	r28, r26
    98d2:	20 e0       	ldi	r18, 0x00	; 0
    98d4:	30 e0       	ldi	r19, 0x00	; 0
    98d6:	ce 17       	cp	r28, r30
    98d8:	df 07       	cpc	r29, r31
    98da:	40 f4       	brcc	.+16     	; 0x98ec <free+0x5a>
    98dc:	4a 81       	ldd	r20, Y+2	; 0x02
    98de:	5b 81       	ldd	r21, Y+3	; 0x03
    98e0:	9e 01       	movw	r18, r28
    98e2:	41 15       	cp	r20, r1
    98e4:	51 05       	cpc	r21, r1
    98e6:	f1 f0       	breq	.+60     	; 0x9924 <free+0x92>
    98e8:	ea 01       	movw	r28, r20
    98ea:	f5 cf       	rjmp	.-22     	; 0x98d6 <free+0x44>
    98ec:	c2 83       	std	Z+2, r28	; 0x02
    98ee:	d3 83       	std	Z+3, r29	; 0x03
    98f0:	40 81       	ld	r20, Z
    98f2:	51 81       	ldd	r21, Z+1	; 0x01
    98f4:	84 0f       	add	r24, r20
    98f6:	95 1f       	adc	r25, r21
    98f8:	c8 17       	cp	r28, r24
    98fa:	d9 07       	cpc	r29, r25
    98fc:	59 f4       	brne	.+22     	; 0x9914 <free+0x82>
    98fe:	88 81       	ld	r24, Y
    9900:	99 81       	ldd	r25, Y+1	; 0x01
    9902:	84 0f       	add	r24, r20
    9904:	95 1f       	adc	r25, r21
    9906:	02 96       	adiw	r24, 0x02	; 2
    9908:	80 83       	st	Z, r24
    990a:	91 83       	std	Z+1, r25	; 0x01
    990c:	8a 81       	ldd	r24, Y+2	; 0x02
    990e:	9b 81       	ldd	r25, Y+3	; 0x03
    9910:	82 83       	std	Z+2, r24	; 0x02
    9912:	93 83       	std	Z+3, r25	; 0x03
    9914:	21 15       	cp	r18, r1
    9916:	31 05       	cpc	r19, r1
    9918:	29 f4       	brne	.+10     	; 0x9924 <free+0x92>
    991a:	e0 93 28 26 	sts	0x2628, r30	; 0x802628 <__flp>
    991e:	f0 93 29 26 	sts	0x2629, r31	; 0x802629 <__flp+0x1>
    9922:	3d c0       	rjmp	.+122    	; 0x999e <free+0x10c>
    9924:	e9 01       	movw	r28, r18
    9926:	ea 83       	std	Y+2, r30	; 0x02
    9928:	fb 83       	std	Y+3, r31	; 0x03
    992a:	49 91       	ld	r20, Y+
    992c:	59 91       	ld	r21, Y+
    992e:	c4 0f       	add	r28, r20
    9930:	d5 1f       	adc	r29, r21
    9932:	ec 17       	cp	r30, r28
    9934:	fd 07       	cpc	r31, r29
    9936:	61 f4       	brne	.+24     	; 0x9950 <free+0xbe>
    9938:	80 81       	ld	r24, Z
    993a:	91 81       	ldd	r25, Z+1	; 0x01
    993c:	84 0f       	add	r24, r20
    993e:	95 1f       	adc	r25, r21
    9940:	02 96       	adiw	r24, 0x02	; 2
    9942:	e9 01       	movw	r28, r18
    9944:	88 83       	st	Y, r24
    9946:	99 83       	std	Y+1, r25	; 0x01
    9948:	82 81       	ldd	r24, Z+2	; 0x02
    994a:	93 81       	ldd	r25, Z+3	; 0x03
    994c:	8a 83       	std	Y+2, r24	; 0x02
    994e:	9b 83       	std	Y+3, r25	; 0x03
    9950:	e0 e0       	ldi	r30, 0x00	; 0
    9952:	f0 e0       	ldi	r31, 0x00	; 0
    9954:	12 96       	adiw	r26, 0x02	; 2
    9956:	8d 91       	ld	r24, X+
    9958:	9c 91       	ld	r25, X
    995a:	13 97       	sbiw	r26, 0x03	; 3
    995c:	00 97       	sbiw	r24, 0x00	; 0
    995e:	19 f0       	breq	.+6      	; 0x9966 <free+0xd4>
    9960:	fd 01       	movw	r30, r26
    9962:	dc 01       	movw	r26, r24
    9964:	f7 cf       	rjmp	.-18     	; 0x9954 <free+0xc2>
    9966:	8d 91       	ld	r24, X+
    9968:	9c 91       	ld	r25, X
    996a:	11 97       	sbiw	r26, 0x01	; 1
    996c:	9d 01       	movw	r18, r26
    996e:	2e 5f       	subi	r18, 0xFE	; 254
    9970:	3f 4f       	sbci	r19, 0xFF	; 255
    9972:	82 0f       	add	r24, r18
    9974:	93 1f       	adc	r25, r19
    9976:	20 91 26 26 	lds	r18, 0x2626	; 0x802626 <__brkval>
    997a:	30 91 27 26 	lds	r19, 0x2627	; 0x802627 <__brkval+0x1>
    997e:	28 17       	cp	r18, r24
    9980:	39 07       	cpc	r19, r25
    9982:	69 f4       	brne	.+26     	; 0x999e <free+0x10c>
    9984:	30 97       	sbiw	r30, 0x00	; 0
    9986:	29 f4       	brne	.+10     	; 0x9992 <free+0x100>
    9988:	10 92 28 26 	sts	0x2628, r1	; 0x802628 <__flp>
    998c:	10 92 29 26 	sts	0x2629, r1	; 0x802629 <__flp+0x1>
    9990:	02 c0       	rjmp	.+4      	; 0x9996 <free+0x104>
    9992:	12 82       	std	Z+2, r1	; 0x02
    9994:	13 82       	std	Z+3, r1	; 0x03
    9996:	a0 93 26 26 	sts	0x2626, r26	; 0x802626 <__brkval>
    999a:	b0 93 27 26 	sts	0x2627, r27	; 0x802627 <__brkval+0x1>
    999e:	df 91       	pop	r29
    99a0:	cf 91       	pop	r28
    99a2:	08 95       	ret

000099a4 <strtoul>:
    99a4:	3f 92       	push	r3
    99a6:	4f 92       	push	r4
    99a8:	5f 92       	push	r5
    99aa:	6f 92       	push	r6
    99ac:	7f 92       	push	r7
    99ae:	8f 92       	push	r8
    99b0:	9f 92       	push	r9
    99b2:	af 92       	push	r10
    99b4:	bf 92       	push	r11
    99b6:	cf 92       	push	r12
    99b8:	df 92       	push	r13
    99ba:	ef 92       	push	r14
    99bc:	ff 92       	push	r15
    99be:	0f 93       	push	r16
    99c0:	1f 93       	push	r17
    99c2:	cf 93       	push	r28
    99c4:	df 93       	push	r29
    99c6:	5c 01       	movw	r10, r24
    99c8:	6b 01       	movw	r12, r22
    99ca:	7a 01       	movw	r14, r20
    99cc:	61 15       	cp	r22, r1
    99ce:	71 05       	cpc	r23, r1
    99d0:	19 f0       	breq	.+6      	; 0x99d8 <strtoul+0x34>
    99d2:	fb 01       	movw	r30, r22
    99d4:	80 83       	st	Z, r24
    99d6:	91 83       	std	Z+1, r25	; 0x01
    99d8:	e1 14       	cp	r14, r1
    99da:	f1 04       	cpc	r15, r1
    99dc:	29 f0       	breq	.+10     	; 0x99e8 <strtoul+0x44>
    99de:	c7 01       	movw	r24, r14
    99e0:	02 97       	sbiw	r24, 0x02	; 2
    99e2:	83 97       	sbiw	r24, 0x23	; 35
    99e4:	08 f0       	brcs	.+2      	; 0x99e8 <strtoul+0x44>
    99e6:	c9 c0       	rjmp	.+402    	; 0x9b7a <strtoul+0x1d6>
    99e8:	e5 01       	movw	r28, r10
    99ea:	21 96       	adiw	r28, 0x01	; 1
    99ec:	f5 01       	movw	r30, r10
    99ee:	10 81       	ld	r17, Z
    99f0:	81 2f       	mov	r24, r17
    99f2:	90 e0       	ldi	r25, 0x00	; 0
    99f4:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <isspace>
    99f8:	89 2b       	or	r24, r25
    99fa:	11 f0       	breq	.+4      	; 0x9a00 <strtoul+0x5c>
    99fc:	5e 01       	movw	r10, r28
    99fe:	f4 cf       	rjmp	.-24     	; 0x99e8 <strtoul+0x44>
    9a00:	1d 32       	cpi	r17, 0x2D	; 45
    9a02:	29 f4       	brne	.+10     	; 0x9a0e <strtoul+0x6a>
    9a04:	21 96       	adiw	r28, 0x01	; 1
    9a06:	f5 01       	movw	r30, r10
    9a08:	11 81       	ldd	r17, Z+1	; 0x01
    9a0a:	01 e0       	ldi	r16, 0x01	; 1
    9a0c:	07 c0       	rjmp	.+14     	; 0x9a1c <strtoul+0x78>
    9a0e:	1b 32       	cpi	r17, 0x2B	; 43
    9a10:	21 f4       	brne	.+8      	; 0x9a1a <strtoul+0x76>
    9a12:	e5 01       	movw	r28, r10
    9a14:	22 96       	adiw	r28, 0x02	; 2
    9a16:	f5 01       	movw	r30, r10
    9a18:	11 81       	ldd	r17, Z+1	; 0x01
    9a1a:	00 e0       	ldi	r16, 0x00	; 0
    9a1c:	e1 14       	cp	r14, r1
    9a1e:	f1 04       	cpc	r15, r1
    9a20:	b1 f0       	breq	.+44     	; 0x9a4e <strtoul+0xaa>
    9a22:	f0 e1       	ldi	r31, 0x10	; 16
    9a24:	ef 16       	cp	r14, r31
    9a26:	f1 04       	cpc	r15, r1
    9a28:	29 f4       	brne	.+10     	; 0x9a34 <strtoul+0x90>
    9a2a:	b0 c0       	rjmp	.+352    	; 0x9b8c <strtoul+0x1e8>
    9a2c:	10 e3       	ldi	r17, 0x30	; 48
    9a2e:	e1 14       	cp	r14, r1
    9a30:	f1 04       	cpc	r15, r1
    9a32:	01 f1       	breq	.+64     	; 0x9a74 <strtoul+0xd0>
    9a34:	2a e0       	ldi	r18, 0x0A	; 10
    9a36:	e2 16       	cp	r14, r18
    9a38:	f1 04       	cpc	r15, r1
    9a3a:	b1 f1       	breq	.+108    	; 0x9aa8 <strtoul+0x104>
    9a3c:	80 e1       	ldi	r24, 0x10	; 16
    9a3e:	e8 16       	cp	r14, r24
    9a40:	f1 04       	cpc	r15, r1
    9a42:	71 f0       	breq	.+28     	; 0x9a60 <strtoul+0xbc>
    9a44:	e8 e0       	ldi	r30, 0x08	; 8
    9a46:	ee 16       	cp	r14, r30
    9a48:	f1 04       	cpc	r15, r1
    9a4a:	f1 f4       	brne	.+60     	; 0x9a88 <strtoul+0xe4>
    9a4c:	13 c0       	rjmp	.+38     	; 0x9a74 <strtoul+0xd0>
    9a4e:	10 33       	cpi	r17, 0x30	; 48
    9a50:	41 f5       	brne	.+80     	; 0x9aa2 <strtoul+0xfe>
    9a52:	88 81       	ld	r24, Y
    9a54:	8f 7d       	andi	r24, 0xDF	; 223
    9a56:	88 35       	cpi	r24, 0x58	; 88
    9a58:	49 f7       	brne	.-46     	; 0x9a2c <strtoul+0x88>
    9a5a:	19 81       	ldd	r17, Y+1	; 0x01
    9a5c:	22 96       	adiw	r28, 0x02	; 2
    9a5e:	02 60       	ori	r16, 0x02	; 2
    9a60:	f0 e1       	ldi	r31, 0x10	; 16
    9a62:	ef 2e       	mov	r14, r31
    9a64:	f1 2c       	mov	r15, r1
    9a66:	88 24       	eor	r8, r8
    9a68:	8a 94       	dec	r8
    9a6a:	98 2c       	mov	r9, r8
    9a6c:	a8 2c       	mov	r10, r8
    9a6e:	af e0       	ldi	r26, 0x0F	; 15
    9a70:	ba 2e       	mov	r11, r26
    9a72:	20 c0       	rjmp	.+64     	; 0x9ab4 <strtoul+0x110>
    9a74:	78 e0       	ldi	r23, 0x08	; 8
    9a76:	e7 2e       	mov	r14, r23
    9a78:	f1 2c       	mov	r15, r1
    9a7a:	88 24       	eor	r8, r8
    9a7c:	8a 94       	dec	r8
    9a7e:	98 2c       	mov	r9, r8
    9a80:	a8 2c       	mov	r10, r8
    9a82:	ef e1       	ldi	r30, 0x1F	; 31
    9a84:	be 2e       	mov	r11, r30
    9a86:	16 c0       	rjmp	.+44     	; 0x9ab4 <strtoul+0x110>
    9a88:	6f ef       	ldi	r22, 0xFF	; 255
    9a8a:	7f ef       	ldi	r23, 0xFF	; 255
    9a8c:	cb 01       	movw	r24, r22
    9a8e:	97 01       	movw	r18, r14
    9a90:	0f 2c       	mov	r0, r15
    9a92:	00 0c       	add	r0, r0
    9a94:	44 0b       	sbc	r20, r20
    9a96:	55 0b       	sbc	r21, r21
    9a98:	0e 94 6d 4b 	call	0x96da	; 0x96da <__udivmodsi4>
    9a9c:	49 01       	movw	r8, r18
    9a9e:	5a 01       	movw	r10, r20
    9aa0:	09 c0       	rjmp	.+18     	; 0x9ab4 <strtoul+0x110>
    9aa2:	8a e0       	ldi	r24, 0x0A	; 10
    9aa4:	e8 2e       	mov	r14, r24
    9aa6:	f1 2c       	mov	r15, r1
    9aa8:	69 e9       	ldi	r22, 0x99	; 153
    9aaa:	86 2e       	mov	r8, r22
    9aac:	98 2c       	mov	r9, r8
    9aae:	a8 2c       	mov	r10, r8
    9ab0:	69 e1       	ldi	r22, 0x19	; 25
    9ab2:	b6 2e       	mov	r11, r22
    9ab4:	40 e0       	ldi	r20, 0x00	; 0
    9ab6:	60 e0       	ldi	r22, 0x00	; 0
    9ab8:	70 e0       	ldi	r23, 0x00	; 0
    9aba:	cb 01       	movw	r24, r22
    9abc:	27 01       	movw	r4, r14
    9abe:	0f 2c       	mov	r0, r15
    9ac0:	00 0c       	add	r0, r0
    9ac2:	66 08       	sbc	r6, r6
    9ac4:	77 08       	sbc	r7, r7
    9ac6:	fe 01       	movw	r30, r28
    9ac8:	50 ed       	ldi	r21, 0xD0	; 208
    9aca:	35 2e       	mov	r3, r21
    9acc:	31 0e       	add	r3, r17
    9ace:	29 e0       	ldi	r18, 0x09	; 9
    9ad0:	23 15       	cp	r18, r3
    9ad2:	70 f4       	brcc	.+28     	; 0x9af0 <strtoul+0x14c>
    9ad4:	2f eb       	ldi	r18, 0xBF	; 191
    9ad6:	21 0f       	add	r18, r17
    9ad8:	2a 31       	cpi	r18, 0x1A	; 26
    9ada:	18 f4       	brcc	.+6      	; 0x9ae2 <strtoul+0x13e>
    9adc:	39 ec       	ldi	r19, 0xC9	; 201
    9ade:	33 2e       	mov	r3, r19
    9ae0:	06 c0       	rjmp	.+12     	; 0x9aee <strtoul+0x14a>
    9ae2:	2f e9       	ldi	r18, 0x9F	; 159
    9ae4:	21 0f       	add	r18, r17
    9ae6:	2a 31       	cpi	r18, 0x1A	; 26
    9ae8:	30 f5       	brcc	.+76     	; 0x9b36 <strtoul+0x192>
    9aea:	29 ea       	ldi	r18, 0xA9	; 169
    9aec:	32 2e       	mov	r3, r18
    9aee:	31 0e       	add	r3, r17
    9af0:	23 2d       	mov	r18, r3
    9af2:	30 e0       	ldi	r19, 0x00	; 0
    9af4:	2e 15       	cp	r18, r14
    9af6:	3f 05       	cpc	r19, r15
    9af8:	f4 f4       	brge	.+60     	; 0x9b36 <strtoul+0x192>
    9afa:	4f 3f       	cpi	r20, 0xFF	; 255
    9afc:	c9 f0       	breq	.+50     	; 0x9b30 <strtoul+0x18c>
    9afe:	86 16       	cp	r8, r22
    9b00:	97 06       	cpc	r9, r23
    9b02:	a8 06       	cpc	r10, r24
    9b04:	b9 06       	cpc	r11, r25
    9b06:	88 f0       	brcs	.+34     	; 0x9b2a <strtoul+0x186>
    9b08:	a3 01       	movw	r20, r6
    9b0a:	92 01       	movw	r18, r4
    9b0c:	0e 94 35 4b 	call	0x966a	; 0x966a <__mulsi3>
    9b10:	23 2d       	mov	r18, r3
    9b12:	30 e0       	ldi	r19, 0x00	; 0
    9b14:	40 e0       	ldi	r20, 0x00	; 0
    9b16:	50 e0       	ldi	r21, 0x00	; 0
    9b18:	62 0f       	add	r22, r18
    9b1a:	73 1f       	adc	r23, r19
    9b1c:	84 1f       	adc	r24, r20
    9b1e:	95 1f       	adc	r25, r21
    9b20:	62 17       	cp	r22, r18
    9b22:	73 07       	cpc	r23, r19
    9b24:	84 07       	cpc	r24, r20
    9b26:	95 07       	cpc	r25, r21
    9b28:	10 f4       	brcc	.+4      	; 0x9b2e <strtoul+0x18a>
    9b2a:	4f ef       	ldi	r20, 0xFF	; 255
    9b2c:	01 c0       	rjmp	.+2      	; 0x9b30 <strtoul+0x18c>
    9b2e:	41 e0       	ldi	r20, 0x01	; 1
    9b30:	21 96       	adiw	r28, 0x01	; 1
    9b32:	10 81       	ld	r17, Z
    9b34:	c8 cf       	rjmp	.-112    	; 0x9ac6 <strtoul+0x122>
    9b36:	c1 14       	cp	r12, r1
    9b38:	d1 04       	cpc	r13, r1
    9b3a:	51 f0       	breq	.+20     	; 0x9b50 <strtoul+0x1ac>
    9b3c:	44 23       	and	r20, r20
    9b3e:	11 f0       	breq	.+4      	; 0x9b44 <strtoul+0x1a0>
    9b40:	21 97       	sbiw	r28, 0x01	; 1
    9b42:	03 c0       	rjmp	.+6      	; 0x9b4a <strtoul+0x1a6>
    9b44:	01 ff       	sbrs	r16, 1
    9b46:	04 c0       	rjmp	.+8      	; 0x9b50 <strtoul+0x1ac>
    9b48:	22 97       	sbiw	r28, 0x02	; 2
    9b4a:	f6 01       	movw	r30, r12
    9b4c:	c0 83       	st	Z, r28
    9b4e:	d1 83       	std	Z+1, r29	; 0x01
    9b50:	00 ff       	sbrs	r16, 0
    9b52:	07 c0       	rjmp	.+14     	; 0x9b62 <strtoul+0x1be>
    9b54:	90 95       	com	r25
    9b56:	80 95       	com	r24
    9b58:	70 95       	com	r23
    9b5a:	61 95       	neg	r22
    9b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    9b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    9b60:	9f 4f       	sbci	r25, 0xFF	; 255
    9b62:	4f 3f       	cpi	r20, 0xFF	; 255
    9b64:	79 f4       	brne	.+30     	; 0x9b84 <strtoul+0x1e0>
    9b66:	82 e2       	ldi	r24, 0x22	; 34
    9b68:	90 e0       	ldi	r25, 0x00	; 0
    9b6a:	80 93 30 26 	sts	0x2630, r24	; 0x802630 <errno>
    9b6e:	90 93 31 26 	sts	0x2631, r25	; 0x802631 <errno+0x1>
    9b72:	3f ef       	ldi	r19, 0xFF	; 255
    9b74:	2f ef       	ldi	r18, 0xFF	; 255
    9b76:	9f ef       	ldi	r25, 0xFF	; 255
    9b78:	0d c0       	rjmp	.+26     	; 0x9b94 <strtoul+0x1f0>
    9b7a:	40 e0       	ldi	r20, 0x00	; 0
    9b7c:	30 e0       	ldi	r19, 0x00	; 0
    9b7e:	20 e0       	ldi	r18, 0x00	; 0
    9b80:	90 e0       	ldi	r25, 0x00	; 0
    9b82:	08 c0       	rjmp	.+16     	; 0x9b94 <strtoul+0x1f0>
    9b84:	46 2f       	mov	r20, r22
    9b86:	37 2f       	mov	r19, r23
    9b88:	28 2f       	mov	r18, r24
    9b8a:	04 c0       	rjmp	.+8      	; 0x9b94 <strtoul+0x1f0>
    9b8c:	10 33       	cpi	r17, 0x30	; 48
    9b8e:	09 f0       	breq	.+2      	; 0x9b92 <strtoul+0x1ee>
    9b90:	67 cf       	rjmp	.-306    	; 0x9a60 <strtoul+0xbc>
    9b92:	5f cf       	rjmp	.-322    	; 0x9a52 <strtoul+0xae>
    9b94:	64 2f       	mov	r22, r20
    9b96:	73 2f       	mov	r23, r19
    9b98:	82 2f       	mov	r24, r18
    9b9a:	df 91       	pop	r29
    9b9c:	cf 91       	pop	r28
    9b9e:	1f 91       	pop	r17
    9ba0:	0f 91       	pop	r16
    9ba2:	ff 90       	pop	r15
    9ba4:	ef 90       	pop	r14
    9ba6:	df 90       	pop	r13
    9ba8:	cf 90       	pop	r12
    9baa:	bf 90       	pop	r11
    9bac:	af 90       	pop	r10
    9bae:	9f 90       	pop	r9
    9bb0:	8f 90       	pop	r8
    9bb2:	7f 90       	pop	r7
    9bb4:	6f 90       	pop	r6
    9bb6:	5f 90       	pop	r5
    9bb8:	4f 90       	pop	r4
    9bba:	3f 90       	pop	r3
    9bbc:	08 95       	ret

00009bbe <atoi>:
    9bbe:	fc 01       	movw	r30, r24
    9bc0:	88 27       	eor	r24, r24
    9bc2:	99 27       	eor	r25, r25
    9bc4:	e8 94       	clt
    9bc6:	21 91       	ld	r18, Z+
    9bc8:	20 32       	cpi	r18, 0x20	; 32
    9bca:	e9 f3       	breq	.-6      	; 0x9bc6 <atoi+0x8>
    9bcc:	29 30       	cpi	r18, 0x09	; 9
    9bce:	10 f0       	brcs	.+4      	; 0x9bd4 <atoi+0x16>
    9bd0:	2e 30       	cpi	r18, 0x0E	; 14
    9bd2:	c8 f3       	brcs	.-14     	; 0x9bc6 <atoi+0x8>
    9bd4:	2b 32       	cpi	r18, 0x2B	; 43
    9bd6:	41 f0       	breq	.+16     	; 0x9be8 <atoi+0x2a>
    9bd8:	2d 32       	cpi	r18, 0x2D	; 45
    9bda:	39 f4       	brne	.+14     	; 0x9bea <atoi+0x2c>
    9bdc:	68 94       	set
    9bde:	04 c0       	rjmp	.+8      	; 0x9be8 <atoi+0x2a>
    9be0:	0e 94 72 4f 	call	0x9ee4	; 0x9ee4 <__mulhi_const_10>
    9be4:	82 0f       	add	r24, r18
    9be6:	91 1d       	adc	r25, r1
    9be8:	21 91       	ld	r18, Z+
    9bea:	20 53       	subi	r18, 0x30	; 48
    9bec:	2a 30       	cpi	r18, 0x0A	; 10
    9bee:	c0 f3       	brcs	.-16     	; 0x9be0 <atoi+0x22>
    9bf0:	1e f4       	brtc	.+6      	; 0x9bf8 <atoi+0x3a>
    9bf2:	90 95       	com	r25
    9bf4:	81 95       	neg	r24
    9bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    9bf8:	08 95       	ret

00009bfa <__ftoa_engine>:
    9bfa:	28 30       	cpi	r18, 0x08	; 8
    9bfc:	08 f0       	brcs	.+2      	; 0x9c00 <__ftoa_engine+0x6>
    9bfe:	27 e0       	ldi	r18, 0x07	; 7
    9c00:	33 27       	eor	r19, r19
    9c02:	da 01       	movw	r26, r20
    9c04:	99 0f       	add	r25, r25
    9c06:	31 1d       	adc	r19, r1
    9c08:	87 fd       	sbrc	r24, 7
    9c0a:	91 60       	ori	r25, 0x01	; 1
    9c0c:	00 96       	adiw	r24, 0x00	; 0
    9c0e:	61 05       	cpc	r22, r1
    9c10:	71 05       	cpc	r23, r1
    9c12:	39 f4       	brne	.+14     	; 0x9c22 <__ftoa_engine+0x28>
    9c14:	32 60       	ori	r19, 0x02	; 2
    9c16:	2e 5f       	subi	r18, 0xFE	; 254
    9c18:	3d 93       	st	X+, r19
    9c1a:	30 e3       	ldi	r19, 0x30	; 48
    9c1c:	2a 95       	dec	r18
    9c1e:	e1 f7       	brne	.-8      	; 0x9c18 <__ftoa_engine+0x1e>
    9c20:	08 95       	ret
    9c22:	9f 3f       	cpi	r25, 0xFF	; 255
    9c24:	30 f0       	brcs	.+12     	; 0x9c32 <__ftoa_engine+0x38>
    9c26:	80 38       	cpi	r24, 0x80	; 128
    9c28:	71 05       	cpc	r23, r1
    9c2a:	61 05       	cpc	r22, r1
    9c2c:	09 f0       	breq	.+2      	; 0x9c30 <__ftoa_engine+0x36>
    9c2e:	3c 5f       	subi	r19, 0xFC	; 252
    9c30:	3c 5f       	subi	r19, 0xFC	; 252
    9c32:	3d 93       	st	X+, r19
    9c34:	91 30       	cpi	r25, 0x01	; 1
    9c36:	08 f0       	brcs	.+2      	; 0x9c3a <__ftoa_engine+0x40>
    9c38:	80 68       	ori	r24, 0x80	; 128
    9c3a:	91 1d       	adc	r25, r1
    9c3c:	df 93       	push	r29
    9c3e:	cf 93       	push	r28
    9c40:	1f 93       	push	r17
    9c42:	0f 93       	push	r16
    9c44:	ff 92       	push	r15
    9c46:	ef 92       	push	r14
    9c48:	19 2f       	mov	r17, r25
    9c4a:	98 7f       	andi	r25, 0xF8	; 248
    9c4c:	96 95       	lsr	r25
    9c4e:	e9 2f       	mov	r30, r25
    9c50:	96 95       	lsr	r25
    9c52:	96 95       	lsr	r25
    9c54:	e9 0f       	add	r30, r25
    9c56:	ff 27       	eor	r31, r31
    9c58:	e0 55       	subi	r30, 0x50	; 80
    9c5a:	fc 4f       	sbci	r31, 0xFC	; 252
    9c5c:	99 27       	eor	r25, r25
    9c5e:	33 27       	eor	r19, r19
    9c60:	ee 24       	eor	r14, r14
    9c62:	ff 24       	eor	r15, r15
    9c64:	a7 01       	movw	r20, r14
    9c66:	e7 01       	movw	r28, r14
    9c68:	05 90       	lpm	r0, Z+
    9c6a:	08 94       	sec
    9c6c:	07 94       	ror	r0
    9c6e:	28 f4       	brcc	.+10     	; 0x9c7a <__ftoa_engine+0x80>
    9c70:	36 0f       	add	r19, r22
    9c72:	e7 1e       	adc	r14, r23
    9c74:	f8 1e       	adc	r15, r24
    9c76:	49 1f       	adc	r20, r25
    9c78:	51 1d       	adc	r21, r1
    9c7a:	66 0f       	add	r22, r22
    9c7c:	77 1f       	adc	r23, r23
    9c7e:	88 1f       	adc	r24, r24
    9c80:	99 1f       	adc	r25, r25
    9c82:	06 94       	lsr	r0
    9c84:	a1 f7       	brne	.-24     	; 0x9c6e <__ftoa_engine+0x74>
    9c86:	05 90       	lpm	r0, Z+
    9c88:	07 94       	ror	r0
    9c8a:	28 f4       	brcc	.+10     	; 0x9c96 <__ftoa_engine+0x9c>
    9c8c:	e7 0e       	add	r14, r23
    9c8e:	f8 1e       	adc	r15, r24
    9c90:	49 1f       	adc	r20, r25
    9c92:	56 1f       	adc	r21, r22
    9c94:	c1 1d       	adc	r28, r1
    9c96:	77 0f       	add	r23, r23
    9c98:	88 1f       	adc	r24, r24
    9c9a:	99 1f       	adc	r25, r25
    9c9c:	66 1f       	adc	r22, r22
    9c9e:	06 94       	lsr	r0
    9ca0:	a1 f7       	brne	.-24     	; 0x9c8a <__ftoa_engine+0x90>
    9ca2:	05 90       	lpm	r0, Z+
    9ca4:	07 94       	ror	r0
    9ca6:	28 f4       	brcc	.+10     	; 0x9cb2 <__ftoa_engine+0xb8>
    9ca8:	f8 0e       	add	r15, r24
    9caa:	49 1f       	adc	r20, r25
    9cac:	56 1f       	adc	r21, r22
    9cae:	c7 1f       	adc	r28, r23
    9cb0:	d1 1d       	adc	r29, r1
    9cb2:	88 0f       	add	r24, r24
    9cb4:	99 1f       	adc	r25, r25
    9cb6:	66 1f       	adc	r22, r22
    9cb8:	77 1f       	adc	r23, r23
    9cba:	06 94       	lsr	r0
    9cbc:	a1 f7       	brne	.-24     	; 0x9ca6 <__ftoa_engine+0xac>
    9cbe:	05 90       	lpm	r0, Z+
    9cc0:	07 94       	ror	r0
    9cc2:	20 f4       	brcc	.+8      	; 0x9ccc <__ftoa_engine+0xd2>
    9cc4:	49 0f       	add	r20, r25
    9cc6:	56 1f       	adc	r21, r22
    9cc8:	c7 1f       	adc	r28, r23
    9cca:	d8 1f       	adc	r29, r24
    9ccc:	99 0f       	add	r25, r25
    9cce:	66 1f       	adc	r22, r22
    9cd0:	77 1f       	adc	r23, r23
    9cd2:	88 1f       	adc	r24, r24
    9cd4:	06 94       	lsr	r0
    9cd6:	a9 f7       	brne	.-22     	; 0x9cc2 <__ftoa_engine+0xc8>
    9cd8:	84 91       	lpm	r24, Z
    9cda:	10 95       	com	r17
    9cdc:	17 70       	andi	r17, 0x07	; 7
    9cde:	41 f0       	breq	.+16     	; 0x9cf0 <__ftoa_engine+0xf6>
    9ce0:	d6 95       	lsr	r29
    9ce2:	c7 95       	ror	r28
    9ce4:	57 95       	ror	r21
    9ce6:	47 95       	ror	r20
    9ce8:	f7 94       	ror	r15
    9cea:	e7 94       	ror	r14
    9cec:	1a 95       	dec	r17
    9cee:	c1 f7       	brne	.-16     	; 0x9ce0 <__ftoa_engine+0xe6>
    9cf0:	e6 e5       	ldi	r30, 0x56	; 86
    9cf2:	f3 e0       	ldi	r31, 0x03	; 3
    9cf4:	68 94       	set
    9cf6:	15 90       	lpm	r1, Z+
    9cf8:	15 91       	lpm	r17, Z+
    9cfa:	35 91       	lpm	r19, Z+
    9cfc:	65 91       	lpm	r22, Z+
    9cfe:	95 91       	lpm	r25, Z+
    9d00:	05 90       	lpm	r0, Z+
    9d02:	7f e2       	ldi	r23, 0x2F	; 47
    9d04:	73 95       	inc	r23
    9d06:	e1 18       	sub	r14, r1
    9d08:	f1 0a       	sbc	r15, r17
    9d0a:	43 0b       	sbc	r20, r19
    9d0c:	56 0b       	sbc	r21, r22
    9d0e:	c9 0b       	sbc	r28, r25
    9d10:	d0 09       	sbc	r29, r0
    9d12:	c0 f7       	brcc	.-16     	; 0x9d04 <__ftoa_engine+0x10a>
    9d14:	e1 0c       	add	r14, r1
    9d16:	f1 1e       	adc	r15, r17
    9d18:	43 1f       	adc	r20, r19
    9d1a:	56 1f       	adc	r21, r22
    9d1c:	c9 1f       	adc	r28, r25
    9d1e:	d0 1d       	adc	r29, r0
    9d20:	7e f4       	brtc	.+30     	; 0x9d40 <__ftoa_engine+0x146>
    9d22:	70 33       	cpi	r23, 0x30	; 48
    9d24:	11 f4       	brne	.+4      	; 0x9d2a <__ftoa_engine+0x130>
    9d26:	8a 95       	dec	r24
    9d28:	e6 cf       	rjmp	.-52     	; 0x9cf6 <__ftoa_engine+0xfc>
    9d2a:	e8 94       	clt
    9d2c:	01 50       	subi	r16, 0x01	; 1
    9d2e:	30 f0       	brcs	.+12     	; 0x9d3c <__ftoa_engine+0x142>
    9d30:	08 0f       	add	r16, r24
    9d32:	0a f4       	brpl	.+2      	; 0x9d36 <__ftoa_engine+0x13c>
    9d34:	00 27       	eor	r16, r16
    9d36:	02 17       	cp	r16, r18
    9d38:	08 f4       	brcc	.+2      	; 0x9d3c <__ftoa_engine+0x142>
    9d3a:	20 2f       	mov	r18, r16
    9d3c:	23 95       	inc	r18
    9d3e:	02 2f       	mov	r16, r18
    9d40:	7a 33       	cpi	r23, 0x3A	; 58
    9d42:	28 f0       	brcs	.+10     	; 0x9d4e <__ftoa_engine+0x154>
    9d44:	79 e3       	ldi	r23, 0x39	; 57
    9d46:	7d 93       	st	X+, r23
    9d48:	2a 95       	dec	r18
    9d4a:	e9 f7       	brne	.-6      	; 0x9d46 <__ftoa_engine+0x14c>
    9d4c:	10 c0       	rjmp	.+32     	; 0x9d6e <__ftoa_engine+0x174>
    9d4e:	7d 93       	st	X+, r23
    9d50:	2a 95       	dec	r18
    9d52:	89 f6       	brne	.-94     	; 0x9cf6 <__ftoa_engine+0xfc>
    9d54:	06 94       	lsr	r0
    9d56:	97 95       	ror	r25
    9d58:	67 95       	ror	r22
    9d5a:	37 95       	ror	r19
    9d5c:	17 95       	ror	r17
    9d5e:	17 94       	ror	r1
    9d60:	e1 18       	sub	r14, r1
    9d62:	f1 0a       	sbc	r15, r17
    9d64:	43 0b       	sbc	r20, r19
    9d66:	56 0b       	sbc	r21, r22
    9d68:	c9 0b       	sbc	r28, r25
    9d6a:	d0 09       	sbc	r29, r0
    9d6c:	98 f0       	brcs	.+38     	; 0x9d94 <__ftoa_engine+0x19a>
    9d6e:	23 95       	inc	r18
    9d70:	7e 91       	ld	r23, -X
    9d72:	73 95       	inc	r23
    9d74:	7a 33       	cpi	r23, 0x3A	; 58
    9d76:	08 f0       	brcs	.+2      	; 0x9d7a <__ftoa_engine+0x180>
    9d78:	70 e3       	ldi	r23, 0x30	; 48
    9d7a:	7c 93       	st	X, r23
    9d7c:	20 13       	cpse	r18, r16
    9d7e:	b8 f7       	brcc	.-18     	; 0x9d6e <__ftoa_engine+0x174>
    9d80:	7e 91       	ld	r23, -X
    9d82:	70 61       	ori	r23, 0x10	; 16
    9d84:	7d 93       	st	X+, r23
    9d86:	30 f0       	brcs	.+12     	; 0x9d94 <__ftoa_engine+0x19a>
    9d88:	83 95       	inc	r24
    9d8a:	71 e3       	ldi	r23, 0x31	; 49
    9d8c:	7d 93       	st	X+, r23
    9d8e:	70 e3       	ldi	r23, 0x30	; 48
    9d90:	2a 95       	dec	r18
    9d92:	e1 f7       	brne	.-8      	; 0x9d8c <__ftoa_engine+0x192>
    9d94:	11 24       	eor	r1, r1
    9d96:	ef 90       	pop	r14
    9d98:	ff 90       	pop	r15
    9d9a:	0f 91       	pop	r16
    9d9c:	1f 91       	pop	r17
    9d9e:	cf 91       	pop	r28
    9da0:	df 91       	pop	r29
    9da2:	99 27       	eor	r25, r25
    9da4:	87 fd       	sbrc	r24, 7
    9da6:	90 95       	com	r25
    9da8:	08 95       	ret

00009daa <isspace>:
    9daa:	91 11       	cpse	r25, r1
    9dac:	0c 94 06 51 	jmp	0xa20c	; 0xa20c <__ctype_isfalse>
    9db0:	80 32       	cpi	r24, 0x20	; 32
    9db2:	19 f0       	breq	.+6      	; 0x9dba <isspace+0x10>
    9db4:	89 50       	subi	r24, 0x09	; 9
    9db6:	85 50       	subi	r24, 0x05	; 5
    9db8:	c8 f7       	brcc	.-14     	; 0x9dac <isspace+0x2>
    9dba:	08 95       	ret

00009dbc <tolower>:
    9dbc:	91 11       	cpse	r25, r1
    9dbe:	08 95       	ret
    9dc0:	81 54       	subi	r24, 0x41	; 65
    9dc2:	8a 51       	subi	r24, 0x1A	; 26
    9dc4:	08 f4       	brcc	.+2      	; 0x9dc8 <tolower+0xc>
    9dc6:	80 5e       	subi	r24, 0xE0	; 224
    9dc8:	85 5a       	subi	r24, 0xA5	; 165
    9dca:	08 95       	ret

00009dcc <strchr_P>:
    9dcc:	fc 01       	movw	r30, r24
    9dce:	05 90       	lpm	r0, Z+
    9dd0:	06 16       	cp	r0, r22
    9dd2:	21 f0       	breq	.+8      	; 0x9ddc <strchr_P+0x10>
    9dd4:	00 20       	and	r0, r0
    9dd6:	d9 f7       	brne	.-10     	; 0x9dce <strchr_P+0x2>
    9dd8:	c0 01       	movw	r24, r0
    9dda:	08 95       	ret
    9ddc:	31 97       	sbiw	r30, 0x01	; 1
    9dde:	cf 01       	movw	r24, r30
    9de0:	08 95       	ret

00009de2 <strcmp_P>:
    9de2:	fb 01       	movw	r30, r22
    9de4:	dc 01       	movw	r26, r24
    9de6:	8d 91       	ld	r24, X+
    9de8:	05 90       	lpm	r0, Z+
    9dea:	80 19       	sub	r24, r0
    9dec:	01 10       	cpse	r0, r1
    9dee:	d9 f3       	breq	.-10     	; 0x9de6 <strcmp_P+0x4>
    9df0:	99 0b       	sbc	r25, r25
    9df2:	08 95       	ret

00009df4 <strnlen_P>:
    9df4:	fc 01       	movw	r30, r24
    9df6:	05 90       	lpm	r0, Z+
    9df8:	61 50       	subi	r22, 0x01	; 1
    9dfa:	70 40       	sbci	r23, 0x00	; 0
    9dfc:	01 10       	cpse	r0, r1
    9dfe:	d8 f7       	brcc	.-10     	; 0x9df6 <strnlen_P+0x2>
    9e00:	80 95       	com	r24
    9e02:	90 95       	com	r25
    9e04:	8e 0f       	add	r24, r30
    9e06:	9f 1f       	adc	r25, r31
    9e08:	08 95       	ret

00009e0a <strtok>:
    9e0a:	4e e5       	ldi	r20, 0x5E	; 94
    9e0c:	52 e2       	ldi	r21, 0x22	; 34
    9e0e:	0c 94 4b 4f 	jmp	0x9e96	; 0x9e96 <strtok_r>

00009e12 <memcpy>:
    9e12:	fb 01       	movw	r30, r22
    9e14:	dc 01       	movw	r26, r24
    9e16:	02 c0       	rjmp	.+4      	; 0x9e1c <memcpy+0xa>
    9e18:	01 90       	ld	r0, Z+
    9e1a:	0d 92       	st	X+, r0
    9e1c:	41 50       	subi	r20, 0x01	; 1
    9e1e:	50 40       	sbci	r21, 0x00	; 0
    9e20:	d8 f7       	brcc	.-10     	; 0x9e18 <memcpy+0x6>
    9e22:	08 95       	ret

00009e24 <strcmp>:
    9e24:	fb 01       	movw	r30, r22
    9e26:	dc 01       	movw	r26, r24
    9e28:	8d 91       	ld	r24, X+
    9e2a:	01 90       	ld	r0, Z+
    9e2c:	80 19       	sub	r24, r0
    9e2e:	01 10       	cpse	r0, r1
    9e30:	d9 f3       	breq	.-10     	; 0x9e28 <strcmp+0x4>
    9e32:	99 0b       	sbc	r25, r25
    9e34:	08 95       	ret

00009e36 <strcpy>:
    9e36:	fb 01       	movw	r30, r22
    9e38:	dc 01       	movw	r26, r24
    9e3a:	01 90       	ld	r0, Z+
    9e3c:	0d 92       	st	X+, r0
    9e3e:	00 20       	and	r0, r0
    9e40:	e1 f7       	brne	.-8      	; 0x9e3a <strcpy+0x4>
    9e42:	08 95       	ret

00009e44 <strcspn>:
    9e44:	dc 01       	movw	r26, r24
    9e46:	5d 91       	ld	r21, X+
    9e48:	55 23       	and	r21, r21
    9e4a:	31 f0       	breq	.+12     	; 0x9e58 <strcspn+0x14>
    9e4c:	fb 01       	movw	r30, r22
    9e4e:	01 90       	ld	r0, Z+
    9e50:	05 16       	cp	r0, r21
    9e52:	01 10       	cpse	r0, r1
    9e54:	e1 f7       	brne	.-8      	; 0x9e4e <strcspn+0xa>
    9e56:	b9 f7       	brne	.-18     	; 0x9e46 <strcspn+0x2>
    9e58:	80 95       	com	r24
    9e5a:	90 95       	com	r25
    9e5c:	8a 0f       	add	r24, r26
    9e5e:	9b 1f       	adc	r25, r27
    9e60:	08 95       	ret

00009e62 <strncpy>:
    9e62:	fb 01       	movw	r30, r22
    9e64:	dc 01       	movw	r26, r24
    9e66:	41 50       	subi	r20, 0x01	; 1
    9e68:	50 40       	sbci	r21, 0x00	; 0
    9e6a:	48 f0       	brcs	.+18     	; 0x9e7e <strncpy+0x1c>
    9e6c:	01 90       	ld	r0, Z+
    9e6e:	0d 92       	st	X+, r0
    9e70:	00 20       	and	r0, r0
    9e72:	c9 f7       	brne	.-14     	; 0x9e66 <strncpy+0x4>
    9e74:	01 c0       	rjmp	.+2      	; 0x9e78 <strncpy+0x16>
    9e76:	1d 92       	st	X+, r1
    9e78:	41 50       	subi	r20, 0x01	; 1
    9e7a:	50 40       	sbci	r21, 0x00	; 0
    9e7c:	e0 f7       	brcc	.-8      	; 0x9e76 <strncpy+0x14>
    9e7e:	08 95       	ret

00009e80 <strnlen>:
    9e80:	fc 01       	movw	r30, r24
    9e82:	61 50       	subi	r22, 0x01	; 1
    9e84:	70 40       	sbci	r23, 0x00	; 0
    9e86:	01 90       	ld	r0, Z+
    9e88:	01 10       	cpse	r0, r1
    9e8a:	d8 f7       	brcc	.-10     	; 0x9e82 <strnlen+0x2>
    9e8c:	80 95       	com	r24
    9e8e:	90 95       	com	r25
    9e90:	8e 0f       	add	r24, r30
    9e92:	9f 1f       	adc	r25, r31
    9e94:	08 95       	ret

00009e96 <strtok_r>:
    9e96:	fa 01       	movw	r30, r20
    9e98:	a1 91       	ld	r26, Z+
    9e9a:	b0 81       	ld	r27, Z
    9e9c:	00 97       	sbiw	r24, 0x00	; 0
    9e9e:	19 f4       	brne	.+6      	; 0x9ea6 <strtok_r+0x10>
    9ea0:	10 97       	sbiw	r26, 0x00	; 0
    9ea2:	e1 f0       	breq	.+56     	; 0x9edc <strtok_r+0x46>
    9ea4:	cd 01       	movw	r24, r26
    9ea6:	dc 01       	movw	r26, r24
    9ea8:	cd 01       	movw	r24, r26
    9eaa:	0d 90       	ld	r0, X+
    9eac:	00 20       	and	r0, r0
    9eae:	11 f4       	brne	.+4      	; 0x9eb4 <strtok_r+0x1e>
    9eb0:	c0 01       	movw	r24, r0
    9eb2:	13 c0       	rjmp	.+38     	; 0x9eda <strtok_r+0x44>
    9eb4:	fb 01       	movw	r30, r22
    9eb6:	21 91       	ld	r18, Z+
    9eb8:	22 23       	and	r18, r18
    9eba:	19 f0       	breq	.+6      	; 0x9ec2 <strtok_r+0x2c>
    9ebc:	20 15       	cp	r18, r0
    9ebe:	d9 f7       	brne	.-10     	; 0x9eb6 <strtok_r+0x20>
    9ec0:	f3 cf       	rjmp	.-26     	; 0x9ea8 <strtok_r+0x12>
    9ec2:	fb 01       	movw	r30, r22
    9ec4:	21 91       	ld	r18, Z+
    9ec6:	20 15       	cp	r18, r0
    9ec8:	19 f4       	brne	.+6      	; 0x9ed0 <strtok_r+0x3a>
    9eca:	1e 92       	st	-X, r1
    9ecc:	11 96       	adiw	r26, 0x01	; 1
    9ece:	06 c0       	rjmp	.+12     	; 0x9edc <strtok_r+0x46>
    9ed0:	22 23       	and	r18, r18
    9ed2:	c1 f7       	brne	.-16     	; 0x9ec4 <strtok_r+0x2e>
    9ed4:	0d 90       	ld	r0, X+
    9ed6:	00 20       	and	r0, r0
    9ed8:	a1 f7       	brne	.-24     	; 0x9ec2 <strtok_r+0x2c>
    9eda:	d0 01       	movw	r26, r0
    9edc:	fa 01       	movw	r30, r20
    9ede:	a1 93       	st	Z+, r26
    9ee0:	b0 83       	st	Z, r27
    9ee2:	08 95       	ret

00009ee4 <__mulhi_const_10>:
    9ee4:	7a e0       	ldi	r23, 0x0A	; 10
    9ee6:	97 9f       	mul	r25, r23
    9ee8:	90 2d       	mov	r25, r0
    9eea:	87 9f       	mul	r24, r23
    9eec:	80 2d       	mov	r24, r0
    9eee:	91 0d       	add	r25, r1
    9ef0:	11 24       	eor	r1, r1
    9ef2:	08 95       	ret

00009ef4 <fgetc>:
    9ef4:	cf 93       	push	r28
    9ef6:	df 93       	push	r29
    9ef8:	ec 01       	movw	r28, r24
    9efa:	2b 81       	ldd	r18, Y+3	; 0x03
    9efc:	20 ff       	sbrs	r18, 0
    9efe:	33 c0       	rjmp	.+102    	; 0x9f66 <fgetc+0x72>
    9f00:	26 ff       	sbrs	r18, 6
    9f02:	0a c0       	rjmp	.+20     	; 0x9f18 <fgetc+0x24>
    9f04:	2f 7b       	andi	r18, 0xBF	; 191
    9f06:	2b 83       	std	Y+3, r18	; 0x03
    9f08:	8e 81       	ldd	r24, Y+6	; 0x06
    9f0a:	9f 81       	ldd	r25, Y+7	; 0x07
    9f0c:	01 96       	adiw	r24, 0x01	; 1
    9f0e:	8e 83       	std	Y+6, r24	; 0x06
    9f10:	9f 83       	std	Y+7, r25	; 0x07
    9f12:	8a 81       	ldd	r24, Y+2	; 0x02
    9f14:	90 e0       	ldi	r25, 0x00	; 0
    9f16:	29 c0       	rjmp	.+82     	; 0x9f6a <fgetc+0x76>
    9f18:	22 ff       	sbrs	r18, 2
    9f1a:	0f c0       	rjmp	.+30     	; 0x9f3a <fgetc+0x46>
    9f1c:	e8 81       	ld	r30, Y
    9f1e:	f9 81       	ldd	r31, Y+1	; 0x01
    9f20:	80 81       	ld	r24, Z
    9f22:	08 2e       	mov	r0, r24
    9f24:	00 0c       	add	r0, r0
    9f26:	99 0b       	sbc	r25, r25
    9f28:	00 97       	sbiw	r24, 0x00	; 0
    9f2a:	19 f4       	brne	.+6      	; 0x9f32 <fgetc+0x3e>
    9f2c:	20 62       	ori	r18, 0x20	; 32
    9f2e:	2b 83       	std	Y+3, r18	; 0x03
    9f30:	1a c0       	rjmp	.+52     	; 0x9f66 <fgetc+0x72>
    9f32:	31 96       	adiw	r30, 0x01	; 1
    9f34:	e8 83       	st	Y, r30
    9f36:	f9 83       	std	Y+1, r31	; 0x01
    9f38:	0e c0       	rjmp	.+28     	; 0x9f56 <fgetc+0x62>
    9f3a:	ea 85       	ldd	r30, Y+10	; 0x0a
    9f3c:	fb 85       	ldd	r31, Y+11	; 0x0b
    9f3e:	19 95       	eicall
    9f40:	97 ff       	sbrs	r25, 7
    9f42:	09 c0       	rjmp	.+18     	; 0x9f56 <fgetc+0x62>
    9f44:	2b 81       	ldd	r18, Y+3	; 0x03
    9f46:	01 96       	adiw	r24, 0x01	; 1
    9f48:	11 f0       	breq	.+4      	; 0x9f4e <fgetc+0x5a>
    9f4a:	80 e2       	ldi	r24, 0x20	; 32
    9f4c:	01 c0       	rjmp	.+2      	; 0x9f50 <fgetc+0x5c>
    9f4e:	80 e1       	ldi	r24, 0x10	; 16
    9f50:	82 2b       	or	r24, r18
    9f52:	8b 83       	std	Y+3, r24	; 0x03
    9f54:	08 c0       	rjmp	.+16     	; 0x9f66 <fgetc+0x72>
    9f56:	2e 81       	ldd	r18, Y+6	; 0x06
    9f58:	3f 81       	ldd	r19, Y+7	; 0x07
    9f5a:	2f 5f       	subi	r18, 0xFF	; 255
    9f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    9f5e:	2e 83       	std	Y+6, r18	; 0x06
    9f60:	3f 83       	std	Y+7, r19	; 0x07
    9f62:	99 27       	eor	r25, r25
    9f64:	02 c0       	rjmp	.+4      	; 0x9f6a <fgetc+0x76>
    9f66:	8f ef       	ldi	r24, 0xFF	; 255
    9f68:	9f ef       	ldi	r25, 0xFF	; 255
    9f6a:	df 91       	pop	r29
    9f6c:	cf 91       	pop	r28
    9f6e:	08 95       	ret

00009f70 <fputc>:
    9f70:	0f 93       	push	r16
    9f72:	1f 93       	push	r17
    9f74:	cf 93       	push	r28
    9f76:	df 93       	push	r29
    9f78:	fb 01       	movw	r30, r22
    9f7a:	23 81       	ldd	r18, Z+3	; 0x03
    9f7c:	21 fd       	sbrc	r18, 1
    9f7e:	03 c0       	rjmp	.+6      	; 0x9f86 <fputc+0x16>
    9f80:	8f ef       	ldi	r24, 0xFF	; 255
    9f82:	9f ef       	ldi	r25, 0xFF	; 255
    9f84:	2c c0       	rjmp	.+88     	; 0x9fde <fputc+0x6e>
    9f86:	22 ff       	sbrs	r18, 2
    9f88:	16 c0       	rjmp	.+44     	; 0x9fb6 <fputc+0x46>
    9f8a:	46 81       	ldd	r20, Z+6	; 0x06
    9f8c:	57 81       	ldd	r21, Z+7	; 0x07
    9f8e:	24 81       	ldd	r18, Z+4	; 0x04
    9f90:	35 81       	ldd	r19, Z+5	; 0x05
    9f92:	42 17       	cp	r20, r18
    9f94:	53 07       	cpc	r21, r19
    9f96:	44 f4       	brge	.+16     	; 0x9fa8 <fputc+0x38>
    9f98:	a0 81       	ld	r26, Z
    9f9a:	b1 81       	ldd	r27, Z+1	; 0x01
    9f9c:	9d 01       	movw	r18, r26
    9f9e:	2f 5f       	subi	r18, 0xFF	; 255
    9fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    9fa2:	20 83       	st	Z, r18
    9fa4:	31 83       	std	Z+1, r19	; 0x01
    9fa6:	8c 93       	st	X, r24
    9fa8:	26 81       	ldd	r18, Z+6	; 0x06
    9faa:	37 81       	ldd	r19, Z+7	; 0x07
    9fac:	2f 5f       	subi	r18, 0xFF	; 255
    9fae:	3f 4f       	sbci	r19, 0xFF	; 255
    9fb0:	26 83       	std	Z+6, r18	; 0x06
    9fb2:	37 83       	std	Z+7, r19	; 0x07
    9fb4:	14 c0       	rjmp	.+40     	; 0x9fde <fputc+0x6e>
    9fb6:	8b 01       	movw	r16, r22
    9fb8:	ec 01       	movw	r28, r24
    9fba:	fb 01       	movw	r30, r22
    9fbc:	00 84       	ldd	r0, Z+8	; 0x08
    9fbe:	f1 85       	ldd	r31, Z+9	; 0x09
    9fc0:	e0 2d       	mov	r30, r0
    9fc2:	19 95       	eicall
    9fc4:	89 2b       	or	r24, r25
    9fc6:	e1 f6       	brne	.-72     	; 0x9f80 <fputc+0x10>
    9fc8:	d8 01       	movw	r26, r16
    9fca:	16 96       	adiw	r26, 0x06	; 6
    9fcc:	8d 91       	ld	r24, X+
    9fce:	9c 91       	ld	r25, X
    9fd0:	17 97       	sbiw	r26, 0x07	; 7
    9fd2:	01 96       	adiw	r24, 0x01	; 1
    9fd4:	16 96       	adiw	r26, 0x06	; 6
    9fd6:	8d 93       	st	X+, r24
    9fd8:	9c 93       	st	X, r25
    9fda:	17 97       	sbiw	r26, 0x07	; 7
    9fdc:	ce 01       	movw	r24, r28
    9fde:	df 91       	pop	r29
    9fe0:	cf 91       	pop	r28
    9fe2:	1f 91       	pop	r17
    9fe4:	0f 91       	pop	r16
    9fe6:	08 95       	ret

00009fe8 <printf>:
    9fe8:	cf 93       	push	r28
    9fea:	df 93       	push	r29
    9fec:	cd b7       	in	r28, 0x3d	; 61
    9fee:	de b7       	in	r29, 0x3e	; 62
    9ff0:	ae 01       	movw	r20, r28
    9ff2:	4a 5f       	subi	r20, 0xFA	; 250
    9ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    9ff6:	fa 01       	movw	r30, r20
    9ff8:	61 91       	ld	r22, Z+
    9ffa:	71 91       	ld	r23, Z+
    9ffc:	af 01       	movw	r20, r30
    9ffe:	80 91 2c 26 	lds	r24, 0x262C	; 0x80262c <__iob+0x2>
    a002:	90 91 2d 26 	lds	r25, 0x262D	; 0x80262d <__iob+0x3>
    a006:	0e 94 56 3e 	call	0x7cac	; 0x7cac <vfprintf>
    a00a:	df 91       	pop	r29
    a00c:	cf 91       	pop	r28
    a00e:	08 95       	ret

0000a010 <printf_P>:
    a010:	0f 93       	push	r16
    a012:	1f 93       	push	r17
    a014:	cf 93       	push	r28
    a016:	df 93       	push	r29
    a018:	cd b7       	in	r28, 0x3d	; 61
    a01a:	de b7       	in	r29, 0x3e	; 62
    a01c:	ae 01       	movw	r20, r28
    a01e:	48 5f       	subi	r20, 0xF8	; 248
    a020:	5f 4f       	sbci	r21, 0xFF	; 255
    a022:	da 01       	movw	r26, r20
    a024:	6d 91       	ld	r22, X+
    a026:	7d 91       	ld	r23, X+
    a028:	ad 01       	movw	r20, r26
    a02a:	0a e2       	ldi	r16, 0x2A	; 42
    a02c:	16 e2       	ldi	r17, 0x26	; 38
    a02e:	f8 01       	movw	r30, r16
    a030:	82 81       	ldd	r24, Z+2	; 0x02
    a032:	93 81       	ldd	r25, Z+3	; 0x03
    a034:	dc 01       	movw	r26, r24
    a036:	13 96       	adiw	r26, 0x03	; 3
    a038:	2c 91       	ld	r18, X
    a03a:	13 97       	sbiw	r26, 0x03	; 3
    a03c:	28 60       	ori	r18, 0x08	; 8
    a03e:	13 96       	adiw	r26, 0x03	; 3
    a040:	2c 93       	st	X, r18
    a042:	0e 94 56 3e 	call	0x7cac	; 0x7cac <vfprintf>
    a046:	d8 01       	movw	r26, r16
    a048:	12 96       	adiw	r26, 0x02	; 2
    a04a:	ed 91       	ld	r30, X+
    a04c:	fc 91       	ld	r31, X
    a04e:	13 97       	sbiw	r26, 0x03	; 3
    a050:	23 81       	ldd	r18, Z+3	; 0x03
    a052:	27 7f       	andi	r18, 0xF7	; 247
    a054:	23 83       	std	Z+3, r18	; 0x03
    a056:	df 91       	pop	r29
    a058:	cf 91       	pop	r28
    a05a:	1f 91       	pop	r17
    a05c:	0f 91       	pop	r16
    a05e:	08 95       	ret

0000a060 <putchar>:
    a060:	60 91 2c 26 	lds	r22, 0x262C	; 0x80262c <__iob+0x2>
    a064:	70 91 2d 26 	lds	r23, 0x262D	; 0x80262d <__iob+0x3>
    a068:	0c 94 b8 4f 	jmp	0x9f70	; 0x9f70 <fputc>

0000a06c <puts>:
    a06c:	0f 93       	push	r16
    a06e:	1f 93       	push	r17
    a070:	cf 93       	push	r28
    a072:	df 93       	push	r29
    a074:	e0 91 2c 26 	lds	r30, 0x262C	; 0x80262c <__iob+0x2>
    a078:	f0 91 2d 26 	lds	r31, 0x262D	; 0x80262d <__iob+0x3>
    a07c:	23 81       	ldd	r18, Z+3	; 0x03
    a07e:	21 ff       	sbrs	r18, 1
    a080:	1b c0       	rjmp	.+54     	; 0xa0b8 <puts+0x4c>
    a082:	8c 01       	movw	r16, r24
    a084:	d0 e0       	ldi	r29, 0x00	; 0
    a086:	c0 e0       	ldi	r28, 0x00	; 0
    a088:	f8 01       	movw	r30, r16
    a08a:	81 91       	ld	r24, Z+
    a08c:	8f 01       	movw	r16, r30
    a08e:	60 91 2c 26 	lds	r22, 0x262C	; 0x80262c <__iob+0x2>
    a092:	70 91 2d 26 	lds	r23, 0x262D	; 0x80262d <__iob+0x3>
    a096:	db 01       	movw	r26, r22
    a098:	18 96       	adiw	r26, 0x08	; 8
    a09a:	ed 91       	ld	r30, X+
    a09c:	fc 91       	ld	r31, X
    a09e:	19 97       	sbiw	r26, 0x09	; 9
    a0a0:	88 23       	and	r24, r24
    a0a2:	31 f0       	breq	.+12     	; 0xa0b0 <puts+0x44>
    a0a4:	19 95       	eicall
    a0a6:	89 2b       	or	r24, r25
    a0a8:	79 f3       	breq	.-34     	; 0xa088 <puts+0x1c>
    a0aa:	df ef       	ldi	r29, 0xFF	; 255
    a0ac:	cf ef       	ldi	r28, 0xFF	; 255
    a0ae:	ec cf       	rjmp	.-40     	; 0xa088 <puts+0x1c>
    a0b0:	8a e0       	ldi	r24, 0x0A	; 10
    a0b2:	19 95       	eicall
    a0b4:	89 2b       	or	r24, r25
    a0b6:	19 f0       	breq	.+6      	; 0xa0be <puts+0x52>
    a0b8:	8f ef       	ldi	r24, 0xFF	; 255
    a0ba:	9f ef       	ldi	r25, 0xFF	; 255
    a0bc:	02 c0       	rjmp	.+4      	; 0xa0c2 <puts+0x56>
    a0be:	8d 2f       	mov	r24, r29
    a0c0:	9c 2f       	mov	r25, r28
    a0c2:	df 91       	pop	r29
    a0c4:	cf 91       	pop	r28
    a0c6:	1f 91       	pop	r17
    a0c8:	0f 91       	pop	r16
    a0ca:	08 95       	ret

0000a0cc <sprintf>:
    a0cc:	0f 93       	push	r16
    a0ce:	1f 93       	push	r17
    a0d0:	cf 93       	push	r28
    a0d2:	df 93       	push	r29
    a0d4:	cd b7       	in	r28, 0x3d	; 61
    a0d6:	de b7       	in	r29, 0x3e	; 62
    a0d8:	2e 97       	sbiw	r28, 0x0e	; 14
    a0da:	cd bf       	out	0x3d, r28	; 61
    a0dc:	de bf       	out	0x3e, r29	; 62
    a0de:	0e 89       	ldd	r16, Y+22	; 0x16
    a0e0:	1f 89       	ldd	r17, Y+23	; 0x17
    a0e2:	86 e0       	ldi	r24, 0x06	; 6
    a0e4:	8c 83       	std	Y+4, r24	; 0x04
    a0e6:	09 83       	std	Y+1, r16	; 0x01
    a0e8:	1a 83       	std	Y+2, r17	; 0x02
    a0ea:	8f ef       	ldi	r24, 0xFF	; 255
    a0ec:	9f e7       	ldi	r25, 0x7F	; 127
    a0ee:	8d 83       	std	Y+5, r24	; 0x05
    a0f0:	9e 83       	std	Y+6, r25	; 0x06
    a0f2:	ae 01       	movw	r20, r28
    a0f4:	46 5e       	subi	r20, 0xE6	; 230
    a0f6:	5f 4f       	sbci	r21, 0xFF	; 255
    a0f8:	68 8d       	ldd	r22, Y+24	; 0x18
    a0fa:	79 8d       	ldd	r23, Y+25	; 0x19
    a0fc:	ce 01       	movw	r24, r28
    a0fe:	01 96       	adiw	r24, 0x01	; 1
    a100:	0e 94 56 3e 	call	0x7cac	; 0x7cac <vfprintf>
    a104:	ef 81       	ldd	r30, Y+7	; 0x07
    a106:	f8 85       	ldd	r31, Y+8	; 0x08
    a108:	e0 0f       	add	r30, r16
    a10a:	f1 1f       	adc	r31, r17
    a10c:	10 82       	st	Z, r1
    a10e:	2e 96       	adiw	r28, 0x0e	; 14
    a110:	cd bf       	out	0x3d, r28	; 61
    a112:	de bf       	out	0x3e, r29	; 62
    a114:	df 91       	pop	r29
    a116:	cf 91       	pop	r28
    a118:	1f 91       	pop	r17
    a11a:	0f 91       	pop	r16
    a11c:	08 95       	ret

0000a11e <ungetc>:
    a11e:	fb 01       	movw	r30, r22
    a120:	23 81       	ldd	r18, Z+3	; 0x03
    a122:	20 ff       	sbrs	r18, 0
    a124:	12 c0       	rjmp	.+36     	; 0xa14a <ungetc+0x2c>
    a126:	26 fd       	sbrc	r18, 6
    a128:	10 c0       	rjmp	.+32     	; 0xa14a <ungetc+0x2c>
    a12a:	8f 3f       	cpi	r24, 0xFF	; 255
    a12c:	3f ef       	ldi	r19, 0xFF	; 255
    a12e:	93 07       	cpc	r25, r19
    a130:	61 f0       	breq	.+24     	; 0xa14a <ungetc+0x2c>
    a132:	82 83       	std	Z+2, r24	; 0x02
    a134:	2f 7d       	andi	r18, 0xDF	; 223
    a136:	20 64       	ori	r18, 0x40	; 64
    a138:	23 83       	std	Z+3, r18	; 0x03
    a13a:	26 81       	ldd	r18, Z+6	; 0x06
    a13c:	37 81       	ldd	r19, Z+7	; 0x07
    a13e:	21 50       	subi	r18, 0x01	; 1
    a140:	31 09       	sbc	r19, r1
    a142:	26 83       	std	Z+6, r18	; 0x06
    a144:	37 83       	std	Z+7, r19	; 0x07
    a146:	99 27       	eor	r25, r25
    a148:	08 95       	ret
    a14a:	8f ef       	ldi	r24, 0xFF	; 255
    a14c:	9f ef       	ldi	r25, 0xFF	; 255
    a14e:	08 95       	ret

0000a150 <__ultoa_invert>:
    a150:	fa 01       	movw	r30, r20
    a152:	aa 27       	eor	r26, r26
    a154:	28 30       	cpi	r18, 0x08	; 8
    a156:	51 f1       	breq	.+84     	; 0xa1ac <__ultoa_invert+0x5c>
    a158:	20 31       	cpi	r18, 0x10	; 16
    a15a:	81 f1       	breq	.+96     	; 0xa1bc <__ultoa_invert+0x6c>
    a15c:	e8 94       	clt
    a15e:	6f 93       	push	r22
    a160:	6e 7f       	andi	r22, 0xFE	; 254
    a162:	6e 5f       	subi	r22, 0xFE	; 254
    a164:	7f 4f       	sbci	r23, 0xFF	; 255
    a166:	8f 4f       	sbci	r24, 0xFF	; 255
    a168:	9f 4f       	sbci	r25, 0xFF	; 255
    a16a:	af 4f       	sbci	r26, 0xFF	; 255
    a16c:	b1 e0       	ldi	r27, 0x01	; 1
    a16e:	3e d0       	rcall	.+124    	; 0xa1ec <__ultoa_invert+0x9c>
    a170:	b4 e0       	ldi	r27, 0x04	; 4
    a172:	3c d0       	rcall	.+120    	; 0xa1ec <__ultoa_invert+0x9c>
    a174:	67 0f       	add	r22, r23
    a176:	78 1f       	adc	r23, r24
    a178:	89 1f       	adc	r24, r25
    a17a:	9a 1f       	adc	r25, r26
    a17c:	a1 1d       	adc	r26, r1
    a17e:	68 0f       	add	r22, r24
    a180:	79 1f       	adc	r23, r25
    a182:	8a 1f       	adc	r24, r26
    a184:	91 1d       	adc	r25, r1
    a186:	a1 1d       	adc	r26, r1
    a188:	6a 0f       	add	r22, r26
    a18a:	71 1d       	adc	r23, r1
    a18c:	81 1d       	adc	r24, r1
    a18e:	91 1d       	adc	r25, r1
    a190:	a1 1d       	adc	r26, r1
    a192:	20 d0       	rcall	.+64     	; 0xa1d4 <__ultoa_invert+0x84>
    a194:	09 f4       	brne	.+2      	; 0xa198 <__ultoa_invert+0x48>
    a196:	68 94       	set
    a198:	3f 91       	pop	r19
    a19a:	2a e0       	ldi	r18, 0x0A	; 10
    a19c:	26 9f       	mul	r18, r22
    a19e:	11 24       	eor	r1, r1
    a1a0:	30 19       	sub	r19, r0
    a1a2:	30 5d       	subi	r19, 0xD0	; 208
    a1a4:	31 93       	st	Z+, r19
    a1a6:	de f6       	brtc	.-74     	; 0xa15e <__ultoa_invert+0xe>
    a1a8:	cf 01       	movw	r24, r30
    a1aa:	08 95       	ret
    a1ac:	46 2f       	mov	r20, r22
    a1ae:	47 70       	andi	r20, 0x07	; 7
    a1b0:	40 5d       	subi	r20, 0xD0	; 208
    a1b2:	41 93       	st	Z+, r20
    a1b4:	b3 e0       	ldi	r27, 0x03	; 3
    a1b6:	0f d0       	rcall	.+30     	; 0xa1d6 <__ultoa_invert+0x86>
    a1b8:	c9 f7       	brne	.-14     	; 0xa1ac <__ultoa_invert+0x5c>
    a1ba:	f6 cf       	rjmp	.-20     	; 0xa1a8 <__ultoa_invert+0x58>
    a1bc:	46 2f       	mov	r20, r22
    a1be:	4f 70       	andi	r20, 0x0F	; 15
    a1c0:	40 5d       	subi	r20, 0xD0	; 208
    a1c2:	4a 33       	cpi	r20, 0x3A	; 58
    a1c4:	18 f0       	brcs	.+6      	; 0xa1cc <__ultoa_invert+0x7c>
    a1c6:	49 5d       	subi	r20, 0xD9	; 217
    a1c8:	31 fd       	sbrc	r19, 1
    a1ca:	40 52       	subi	r20, 0x20	; 32
    a1cc:	41 93       	st	Z+, r20
    a1ce:	02 d0       	rcall	.+4      	; 0xa1d4 <__ultoa_invert+0x84>
    a1d0:	a9 f7       	brne	.-22     	; 0xa1bc <__ultoa_invert+0x6c>
    a1d2:	ea cf       	rjmp	.-44     	; 0xa1a8 <__ultoa_invert+0x58>
    a1d4:	b4 e0       	ldi	r27, 0x04	; 4
    a1d6:	a6 95       	lsr	r26
    a1d8:	97 95       	ror	r25
    a1da:	87 95       	ror	r24
    a1dc:	77 95       	ror	r23
    a1de:	67 95       	ror	r22
    a1e0:	ba 95       	dec	r27
    a1e2:	c9 f7       	brne	.-14     	; 0xa1d6 <__ultoa_invert+0x86>
    a1e4:	00 97       	sbiw	r24, 0x00	; 0
    a1e6:	61 05       	cpc	r22, r1
    a1e8:	71 05       	cpc	r23, r1
    a1ea:	08 95       	ret
    a1ec:	9b 01       	movw	r18, r22
    a1ee:	ac 01       	movw	r20, r24
    a1f0:	0a 2e       	mov	r0, r26
    a1f2:	06 94       	lsr	r0
    a1f4:	57 95       	ror	r21
    a1f6:	47 95       	ror	r20
    a1f8:	37 95       	ror	r19
    a1fa:	27 95       	ror	r18
    a1fc:	ba 95       	dec	r27
    a1fe:	c9 f7       	brne	.-14     	; 0xa1f2 <__ultoa_invert+0xa2>
    a200:	62 0f       	add	r22, r18
    a202:	73 1f       	adc	r23, r19
    a204:	84 1f       	adc	r24, r20
    a206:	95 1f       	adc	r25, r21
    a208:	a0 1d       	adc	r26, r0
    a20a:	08 95       	ret

0000a20c <__ctype_isfalse>:
    a20c:	99 27       	eor	r25, r25
    a20e:	88 27       	eor	r24, r24

0000a210 <__ctype_istrue>:
    a210:	08 95       	ret

0000a212 <_exit>:
    a212:	f8 94       	cli

0000a214 <__stop_program>:
    a214:	ff cf       	rjmp	.-2      	; 0xa214 <__stop_program>
