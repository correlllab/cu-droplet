
My_Droplets.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000044  00020000  00020000  0000a766  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .USERCODE     0000002a  0000c000  0000c000  0000a73c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000a360  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000308  00802000  0000a360  0000a434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005dd  00802308  00802308  0000a7aa  2**0
                  ALLOC
  5 .comment      0000005c  00000000  00000000  0000a7aa  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a808  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000710  00000000  00000000  0000a848  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001bb76  00000000  00000000  0000af58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007334  00000000  00000000  00026ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000077e1  00000000  00000000  0002de02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000027b4  00000000  00000000  000355e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000756d  00000000  00000000  00037d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000e4eb  00000000  00000000  0003f305  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001258  00000000  00000000  0004d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20000:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20002:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   20004:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   20006:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   2000a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   2000e:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   20010:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   20014:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   20016:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   2001a:	9b bf       	out	0x3b, r25	; 59

	ret
   2001c:	08 95       	ret

0002001e <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   2001e:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   20022:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   20024:	fc cf       	rjmp	.-8      	; 0x2001e <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20026:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20028:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   2002a:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   2002c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   20030:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   20032:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   20036:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   20038:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   2003a:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   2003c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   20040:	9b bf       	out	0x3b, r25	; 59

	ret
   20042:	08 95       	ret

Disassembly of section .USERCODE:

0000c000 <init>:
 */




void init(){
    c000:	cf 93       	push	r28
    c002:	df 93       	push	r29
    c004:	c0 e0       	ldi	r28, 0x00	; 0
    c006:	d0 e0       	ldi	r29, 0x00	; 0
	//volatile int dummyArray[512];
	//memset(dummyArray, 0x55, 512);

	for (int i= 0;i<18;i++)
	{
		setHSV(i*20,200,100);
    c008:	44 e6       	ldi	r20, 0x64	; 100
    c00a:	68 ec       	ldi	r22, 0xC8	; 200
    c00c:	ce 01       	movw	r24, r28
    c00e:	0e 94 4b 31 	call	0x6296	; 0x6296 <setHSV>
		delayMS(2000);
    c012:	80 ed       	ldi	r24, 0xD0	; 208
    c014:	97 e0       	ldi	r25, 0x07	; 7
    c016:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    c01a:	64 96       	adiw	r28, 0x14	; 20
		
	//delayMS(5000);
	//volatile int dummyArray[512];
	//memset(dummyArray, 0x55, 512);

	for (int i= 0;i<18;i++)
    c01c:	c8 36       	cpi	r28, 0x68	; 104
    c01e:	81 e0       	ldi	r24, 0x01	; 1
    c020:	d8 07       	cpc	r29, r24
    c022:	91 f7       	brne	.-28     	; 0xc008 <init+0x8>
		delayMS(2000);
	}
	//dummyArray[i] = i;
	//setRGB(255,0,0);
	
}
    c024:	df 91       	pop	r29
    c026:	cf 91       	pop	r28
    c028:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__ctors_end>
       4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
       8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
       c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      10:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      14:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      18:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      1c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      20:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      24:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      28:	0c 94 5b 38 	jmp	0x70b6	; 0x70b6 <__vector_10>
      2c:	0c 94 67 36 	jmp	0x6cce	; 0x6cce <__vector_11>
      30:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      34:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      38:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      3c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      40:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      44:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      48:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      4c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      50:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      54:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      58:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      5c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      60:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      64:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__vector_25>
      68:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__vector_26>
      6c:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__vector_27>
      70:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__vector_28>
      74:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__vector_29>
      78:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__vector_30>
      7c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      80:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      84:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      88:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      8c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      90:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      94:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      98:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      9c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      a0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      a4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      a8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      ac:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      b0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      b4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      b8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__vector_46>
      bc:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__vector_47>
      c0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      c4:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__vector_49>
      c8:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <__vector_50>
      cc:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      d0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      d4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      d8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      dc:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      e0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      e4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
      e8:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__vector_58>
      ec:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__vector_59>
      f0:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__vector_60>
      f4:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__vector_61>
      f8:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__vector_62>
      fc:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <__vector_63>
     100:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     104:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     108:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     10c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     110:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     114:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     118:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     11c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     120:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     124:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     128:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     12c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     130:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     134:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     138:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     13c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     140:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     144:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     148:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     14c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     150:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     154:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     158:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     15c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     160:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__vector_88>
     164:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__vector_89>
     168:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__vector_90>
     16c:	0c 94 97 23 	jmp	0x472e	; 0x472e <__vector_91>
     170:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     174:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     178:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     17c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     180:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     184:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     188:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     18c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     190:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     194:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     198:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     19c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1a0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1a4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1a8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1ac:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1b0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1b4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1b8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1bc:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1c0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1c4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1c8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1cc:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1d0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1d4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1d8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1dc:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__vector_119>
     1e0:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <__vector_120>
     1e4:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__vector_121>
     1e8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1ec:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1f0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1f4:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1f8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__bad_interrupt>
     1fc:	db 10       	cpse	r13, r11
     1fe:	e8 10       	cpse	r14, r8
     200:	f5 10       	cpse	r15, r5
     202:	02 11       	cpse	r16, r2
     204:	0f 11       	cpse	r16, r15
     206:	b5 10       	cpse	r11, r5
     208:	c2 10       	cpse	r12, r2
     20a:	2a 16       	cp	r2, r26
     20c:	37 16       	cp	r3, r23
     20e:	ad 15       	cp	r26, r13
     210:	ba 15       	cp	r27, r10
     212:	c8 15       	cp	r28, r8
     214:	fc 15       	cp	r31, r12
     216:	a0 15       	cp	r26, r0
     218:	08 4a       	sbci	r16, 0xA8	; 168
     21a:	d7 3b       	cpi	r29, 0xB7	; 183
     21c:	3b ce       	rjmp	.-906    	; 0xfffffe94 <__eeprom_end+0xff7efe94>
     21e:	01 6e       	ori	r16, 0xE1	; 225
     220:	84 bc       	out	0x24, r8	; 36
     222:	bf fd       	.word	0xfdbf	; ????
     224:	c1 2f       	mov	r28, r17
     226:	3d 6c       	ori	r19, 0xCD	; 205
     228:	74 31       	cpi	r23, 0x14	; 20
     22a:	9a bd       	out	0x2a, r25	; 42
     22c:	56 83       	std	Z+6, r21	; 0x06
     22e:	3d da       	rcall	.-2950   	; 0xfffff6aa <__eeprom_end+0xff7ef6aa>
     230:	3d 00       	.word	0x003d	; ????
     232:	c7 7f       	andi	r28, 0xF7	; 247
     234:	11 be       	out	0x31, r1	; 49
     236:	d9 e4       	ldi	r29, 0x49	; 73
     238:	bb 4c       	sbci	r27, 0xCB	; 203
     23a:	3e 91       	ld	r19, -X
     23c:	6b aa       	std	Y+51, r6	; 0x33
     23e:	aa be       	out	0x3a, r10	; 58
     240:	00 00       	nop
     242:	00 80       	ld	r0, Z
     244:	3f 07       	cpc	r19, r31
     246:	63 42       	sbci	r22, 0x23	; 35
     248:	36 b7       	in	r19, 0x36	; 54
     24a:	9b d8       	rcall	.-3786   	; 0xfffff382 <__eeprom_end+0xff7ef382>
     24c:	a7 1a       	sub	r10, r23
     24e:	39 68       	ori	r19, 0x89	; 137
     250:	56 18       	sub	r5, r6
     252:	ae ba       	out	0x1e, r10	; 30
     254:	ab 55       	subi	r26, 0x5B	; 91
     256:	8c 1d       	adc	r24, r12
     258:	3c b7       	in	r19, 0x3c	; 60
     25a:	cc 57       	subi	r28, 0x7C	; 124
     25c:	63 bd       	out	0x23, r22	; 35
     25e:	6d ed       	ldi	r22, 0xDD	; 221
     260:	fd 75       	andi	r31, 0x5D	; 93
     262:	3e f6       	brtc	.-114    	; 0x1f2 <__SREG__+0x1b3>
     264:	17 72       	andi	r17, 0x27	; 39
     266:	31 bf       	out	0x31, r19	; 49
     268:	00 00       	nop
     26a:	00 80       	ld	r0, Z
     26c:	3f 05       	cpc	r19, r15
     26e:	a8 4c       	sbci	r26, 0xC8	; 200
     270:	cd b2       	in	r12, 0x1d	; 29
     272:	d4 4e       	sbci	r29, 0xE4	; 228
     274:	b9 38       	cpi	r27, 0x89	; 137
     276:	36 a9       	ldd	r19, Z+54	; 0x36
     278:	02 0c       	add	r0, r2
     27a:	50 b9       	out	0x00, r21	; 0
     27c:	91 86       	std	Z+9, r9	; 0x09
     27e:	88 08       	sbc	r8, r8
     280:	3c a6       	std	Y+44, r3	; 0x2c
     282:	aa aa       	std	Y+50, r10	; 0x32
     284:	2a be       	out	0x3a, r2	; 58
     286:	00 00       	nop
     288:	00 80       	ld	r0, Z
     28a:	3f 08       	sbc	r3, r15
     28c:	00 00       	nop
     28e:	00 be       	out	0x30, r0	; 48
     290:	92 24       	eor	r9, r2
     292:	49 12       	cpse	r4, r25
     294:	3e ab       	std	Y+54, r19	; 0x36
     296:	aa aa       	std	Y+50, r10	; 0x32
     298:	2a be       	out	0x3a, r2	; 58
     29a:	cd cc       	rjmp	.-1638   	; 0xfffffc36 <__eeprom_end+0xff7efc36>
     29c:	cc 4c       	sbci	r28, 0xCC	; 204
     29e:	3e 00       	.word	0x003e	; ????
     2a0:	00 00       	nop
     2a2:	80 be       	out	0x30, r8	; 48
     2a4:	ab aa       	std	Y+51, r10	; 0x33
     2a6:	aa aa       	std	Y+50, r10	; 0x32
     2a8:	3e 00       	.word	0x003e	; ????
     2aa:	00 00       	nop
     2ac:	00 bf       	out	0x30, r16	; 48
     2ae:	00 00       	nop
     2b0:	00 80       	ld	r0, Z
     2b2:	3f 00       	.word	0x003f	; ????
     2b4:	00 00       	nop
     2b6:	00 00       	nop
     2b8:	08 41       	sbci	r16, 0x18	; 24
     2ba:	78 d3       	rcall	.+1776   	; 0x9ac <__c.4892+0x2c>
     2bc:	bb 43       	sbci	r27, 0x3B	; 59
     2be:	87 d1       	rcall	.+782    	; 0x5ce <__c.5226+0x68>
     2c0:	13 3d       	cpi	r17, 0xD3	; 211
     2c2:	19 0e       	add	r1, r25
     2c4:	3c c3       	rjmp	.+1656   	; 0x93e <__c.4912+0x36>
     2c6:	bd 42       	sbci	r27, 0x2D	; 45
     2c8:	82 ad       	ldd	r24, Z+58	; 0x3a
     2ca:	2b 3e       	cpi	r18, 0xEB	; 235
     2cc:	68 ec       	ldi	r22, 0xC8	; 200
     2ce:	82 76       	andi	r24, 0x62	; 98
     2d0:	be d9       	rcall	.-3204   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     2d2:	8f e1       	ldi	r24, 0x1F	; 31
     2d4:	a9 3e       	cpi	r26, 0xE9	; 233
     2d6:	4c 80       	ldd	r4, Y+4	; 0x04
     2d8:	ef ff       	.word	0xffef	; ????
     2da:	be 01       	movw	r22, r28
     2dc:	c4 ff       	sbrs	r28, 4
     2de:	7f 3f       	cpi	r23, 0xFF	; 255
     2e0:	00 00       	nop
     2e2:	00 00       	nop
     2e4:	00 00       	nop

000002e6 <__trampolines_start>:
     2e6:	0c 94 b5 10 	jmp	0x216a	; 0x216a <irTransmit+0xe4>
     2ea:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <sendPing>
     2ee:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <pc_comm_putchar>
     2f2:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <irReceive+0x206>
     2f6:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <setAllirPowers>
     2fa:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <irTransmit+0x164>
     2fe:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <irReceive+0x31a>
     302:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <send_hex>
     306:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <irReceive+0x2be>
     30a:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <initIrBaselines>
     30e:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <irTransmit+0x14a>
     312:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <processObsQueue>
     316:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <irReceive+0x256>
     31a:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <broadcastRnbData>
     31e:	0c 94 c2 10 	jmp	0x2184	; 0x2184 <irTransmit+0xfe>
     322:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <updateIrBaselines>
     326:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <irTransmit+0x130>
     32a:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <stopMove>
     32e:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <irReceive+0x334>
     332:	0c 94 09 39 	jmp	0x7212	; 0x7212 <sendID>
     336:	0c 94 02 11 	jmp	0x2204	; 0x2204 <irTransmit+0x17e>
     33a:	0c 94 8a 2b 	jmp	0x5714	; 0x5714 <useRnbData>
     33e:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <handleCmdWrapper>
     342:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <irReceive+0x23a>
     346:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <irReceive+0x220>
     34a:	0c 94 0f 11 	jmp	0x221e	; 0x221e <irTransmit+0x198>

0000034e <__trampolines_end>:
     34e:	6e 61       	ori	r22, 0x1E	; 30
     350:	6e 00       	.word	0x006e	; ????

00000352 <__c.2332>:
     352:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     362:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     372:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     382:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     392:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     3a2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     3b2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     3c2:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     3d2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     3e2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     3f2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     402:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     412:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     422:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     432:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     442:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000450 <__c.5355>:
     450:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 6c     ERROR: Message l
     460:	65 6e 67 74 68 20 30 20 66 6f 72 20 6d 73 67 5f     ength 0 for msg_
     470:	6e 6f 64 65 2e 0d 0a 00                             node....

00000478 <__c.5349>:
     478:	45 72 72 6f 72 3a 20 4d 65 73 73 61 67 65 73 20     Error: Messages 
     488:	6f 76 65 72 66 6c 6f 77 2e 20 54 6f 6f 20 6d 61     overflow. Too ma
     498:	6e 79 20 6d 65 73 73 61 67 65 73 20 72 65 63 65     ny messages rece
     4a8:	69 76 65 64 2e 20 54 72 79 20 73 70 65 65 64 69     ived. Try speedi
     4b8:	6e 67 20 75 70 20 79 6f 75 72 20 6c 6f 6f 70 20     ng up your loop 
     4c8:	69 66 20 79 6f 75 20 73 65 65 20 74 68 69 73 20     if you see this 
     4d8:	61 20 6c 6f 74 2e 0d 0a 00                          a lot....

000004e1 <__c.5342>:
     4e1:	45 72 72 6f 72 21 20 57 65 20 67 6f 74 20 61 68     Error! We got ah
     4f1:	65 61 64 20 6f 66 20 74 68 65 20 74 61 73 6b 20     ead of the task 
     501:	6c 69 73 74 20 61 6e 64 20 6e 6f 77 20 6e 6f 74     list and now not
     511:	68 69 6e 67 20 77 69 6c 6c 20 65 78 65 63 75 74     hing will execut
     521:	65 2e 0d 0a 00                                      e....

00000526 <__c.4802>:
     526:	09 54 57 49 20 77 61 73 6e 27 74 20 72 65 61 64     .TWI wasn't read
     536:	79 2e 0d 0a 00                                      y....

0000053b <__c.4769>:
     53b:	57 61 69 74 69 6e 67 20 66 6f 72 20 54 57 49 20     Waiting for TWI 
     54b:	7c 20 25 73 0d 0a 00                                | %s...

00000552 <__c.4767>:
     552:	09 54 57 49 20 74 69 6d 65 6f 75 74 20 7c 20 25     .TWI timeout | %
     562:	73 0d 0a 00                                         s...

00000566 <__c.5226>:
     566:	45 52 52 4f 52 21 20 42 75 66 66 65 72 65 64 20     ERROR! Buffered 
     576:	69 6e 63 6f 6d 69 6e 67 20 6d 65 73 73 61 67 65     incoming message
     586:	73 20 63 6f 6e 73 75 6d 69 6e 67 20 74 6f 6f 20     s consuming too 
     596:	6d 75 63 68 20 6d 65 6d 6f 72 79 2e 20 41 6c 6c     much memory. All
     5a6:	6f 77 20 68 61 6e 64 6c 65 5f 6d 73 67 20 74 6f     ow handle_msg to
     5b6:	20 62 65 20 63 61 6c 6c 65 64 20 6d 6f 72 65 20      be called more 
     5c6:	66 72 65 71 75 65 6e 74 6c 79 2e 0d 0a 00           frequently....

000005d4 <__c.5224>:
     5d4:	45 52 52 4f 52 21 20 53 68 6f 75 6c 64 20 4e 4f     ERROR! Should NO
     5e4:	54 20 62 65 20 61 64 64 69 6e 67 20 61 20 6d 65     T be adding a me
     5f4:	73 73 61 67 65 20 77 69 74 68 20 6c 65 6e 67 74     ssage with lengt
     604:	68 20 67 72 65 61 74 65 72 20 74 68 61 6e 20 62     h greater than b
     614:	75 66 66 65 72 20 73 69 7a 65 20 74 6f 20 71 75     uffer size to qu
     624:	65 75 65 2e 0d 0a 00                                eue....

0000062b <__c.5222>:
     62b:	45 52 52 4f 52 21 20 53 68 6f 75 6c 64 20 4e 4f     ERROR! Should NO
     63b:	54 20 62 65 20 61 64 64 69 6e 67 20 30 2d 6c 65     T be adding 0-le
     64b:	6e 67 74 68 20 6d 65 73 73 61 67 65 20 74 6f 20     ngth message to 
     65b:	71 75 65 75 65 2e 0d 0a 00                          queue....

00000664 <__c.5145>:
     664:	41 62 6f 72 74 69 6e 67 20 49 52 20 73 65 6e 64     Aborting IR send
     674:	20 5b 25 30 32 68 78 5d 20 77 68 69 6c 65 20 74      [%02hx] while t
     684:	72 79 69 6e 67 3a 20 00                             rying: .

0000068c <__c.5118>:
     68c:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 65     ERROR: Message e
     69c:	78 63 65 65 64 73 20 49 52 5f 42 55 46 46 45 52     xceeds IR_BUFFER
     6ac:	5f 53 49 5a 45 2e 0d 0a 00                          _SIZE....

000006b5 <__c.4740>:
     6b5:	09 44 6f 6e 65 20 77 61 69 74 69 6e 67 20 66 6f     .Done waiting fo
     6c5:	72 20 54 57 49 2e 20 49 52 20 70 6f 77 65 72 73     r TWI. IR powers
     6d5:	20 73 65 74 20 73 75 63 63 65 73 73 66 75 6c 6c      set successfull
     6e5:	79 2e 0d 0a 00                                      y....

000006ea <__c.5112>:
     6ea:	49 52 20 48 61 72 64 77 61 72 65 20 62 75 73 79     IR Hardware busy
     6fa:	2e 20 43 61 6e 27 74 20 63 68 65 63 6b 20 63 6f     . Can't check co
     70a:	6c 6c 69 73 69 6f 6e 73 2e 0d 0a 00                 llisions....

00000716 <__c.4920>:
     716:	09 25 68 75 09 25 75 0d 0a 00                       .%hu.%u...

00000720 <__c.4917>:
     720:	44 69 73 74 20 28 6d 6d 29 20 70 65 72 20 6b 69     Dist (mm) per ki
     730:	6c 6f 73 74 65 70 0d 0a 00                          lostep...

00000739 <__c.4904>:
     739:	09 64 69 72 3a 20 25 68 75 09 00                    .dir: %hu..

00000744 <__c.4901>:
     744:	4d 6f 74 6f 72 20 56 61 6c 75 65 73 0d 0a 00        Motor Values...

00000753 <__c.4856>:
     753:	49 6e 20 6f 72 64 65 72 20 74 6f 20 67 6f 20 69     In order to go i
     763:	6e 20 64 69 72 65 63 74 69 6f 6e 20 25 68 75 20     n direction %hu 
     773:	66 6f 72 20 25 75 20 6d 6d 2c 20 74 61 6b 69 6e     for %u mm, takin
     783:	67 20 25 75 20 73 74 65 70 73 2e 0d 0a 00           g %u steps....

00000791 <__c.4852>:
     791:	45 72 72 6f 72 3a 20 44 6f 6e 27 74 20 68 61 76     Error: Don't hav
     7a1:	65 20 63 61 6c 69 62 72 61 74 65 64 20 76 61 6c     e calibrated val
     7b1:	75 65 73 20 66 6f 72 20 74 68 69 73 20 64 69 72     ues for this dir
     7c1:	65 63 74 69 6f 6e 2e 0d 0a 00                       ection....

000007cb <__c.4845>:
     7cb:	45 72 72 6f 72 21 20 46 61 69 6c 65 64 20 74 6f     Error! Failed to
     7db:	20 73 63 68 65 64 75 6c 65 20 73 74 6f 70 5f 6d      schedule stop_m
     7eb:	6f 76 65 20 74 61 73 6b 2e 00                       ove task..

000007f5 <__c.4838>:
     7f5:	45 52 52 4f 52 3a 20 63 75 72 72 65 6e 74 5f 6f     ERROR: current_o
     805:	66 66 73 65 74 3a 20 25 75 20 61 6e 64 20 74 6f     ffset: %u and to
     815:	74 61 6c 5f 74 69 6d 65 3a 20 25 75 20 6e 6f 74     tal_time: %u not
     825:	20 65 71 75 61 6c 21 0d 0a 00                        equal!...

0000082f <__c.5065>:
     82f:	0d 0a 45 52 52 4f 52 3a 20 53 65 72 69 61 6c 20     ..ERROR: Serial 
     83f:	69 6e 70 75 74 20 62 75 66 66 65 72 20 63 61 70     input buffer cap
     84f:	61 63 69 74 79 20 6f 66 20 25 75 20 63 68 61 72     acity of %u char
     85f:	61 63 74 65 72 73 20 65 78 63 65 65 64 65 64 2e     acters exceeded.
     86f:	0d 0a 00                                            ...

00000872 <__c.5223>:
     872:	21 21 21 09 47 6f 74 20 31 35 20 63 6f 6e 73 65     !!!.Got 15 conse
     882:	63 75 74 69 76 65 20 6e 6f 74 68 69 6e 67 73 20     cutive nothings 
     892:	66 72 6f 6d 20 73 65 6e 73 6f 72 20 25 68 75 2e     from sensor %hu.
     8a2:	09 21 21 21 0d 0a 00                                .!!!...

000008a9 <__c.5119>:
     8a9:	52 4e 42 20 42 72 6f 61 64 63 61 73 74 20 66 61     RNB Broadcast fa
     8b9:	69 6c 65 64 20 5b 20 25 30 32 68 58 20 5d 0d 0a     iled [ %02hX ]..
     8c9:	00                                                  .

000008ca <__c.4917>:
     8ca:	45 52 52 4f 52 3a 20 50 6f 73 74 2d 72 65 74 75     ERROR: Post-retu
     8da:	72 6e 2c 20 74 61 73 6b 20 73 74 6f 72 61 67 65     rn, task storage
     8ea:	20 63 6f 6e 73 69 73 74 65 6e 63 79 20 63 68 65      consistency che
     8fa:	63 6b 20 66 61 69 6c 75 72 65 2e 0d 0a 00           ck failure....

00000908 <__c.4912>:
     908:	50 6f 73 74 2d 63 61 6c 6c 2c 20 74 61 73 6b 20     Post-call, task 
     918:	25 58 20 68 61 73 20 6e 65 78 74 5f 70 74 72 20     %X has next_ptr 
     928:	70 6f 69 6e 74 69 6e 67 20 6f 75 74 73 69 64 65     pointing outside
     938:	20 6f 66 20 61 72 72 61 79 2e 0d 0a 00               of array....

00000945 <__c.4897>:
     945:	45 52 52 4f 52 3a 20 50 72 65 2d 63 61 6c 6c 2c     ERROR: Pre-call,
     955:	20 74 61 73 6b 20 73 74 6f 72 61 67 65 20 63 6f      task storage co
     965:	6e 73 69 73 74 65 6e 63 79 20 63 68 65 63 6b 20     nsistency check 
     975:	66 61 69 6c 75 72 65 2e 0d 0a 00                    failure....

00000980 <__c.4892>:
     980:	50 72 65 2d 63 61 6c 6c 2c 20 74 61 73 6b 20 68     Pre-call, task h
     990:	61 73 20 6e 65 78 74 5f 70 74 72 20 70 6f 69 6e     as next_ptr poin
     9a0:	74 69 6e 67 20 6f 75 74 73 69 64 65 20 6f 66 20     ting outside of 
     9b0:	61 72 72 61 79 2e 0d 0a 00                          array....

000009b9 <__c.4876>:
     9b9:	09 54 61 73 6b 20 25 70 20 28 25 70 29 20 73 63     .Task %p (%p) sc
     9c9:	68 65 64 75 6c 65 64 20 61 74 20 25 6c 75 20 77     heduled at %lu w
     9d9:	69 74 68 20 70 65 72 69 6f 64 20 25 6c 75 2c 20     ith period %lu, 
     9e9:	25 6c 75 20 63 75 72 72 65 6e 74 0d 0a 00           %lu current...

000009f7 <__c.4874>:
     9f7:	54 61 73 6b 20 51 75 65 75 65 20 28 25 68 75 20     Task Queue (%hu 
     a07:	74 61 73 6b 73 2c 20 25 68 75 20 65 78 65 63 75     tasks, %hu execu
     a17:	74 69 6e 67 29 3a 0d 0a 00                          ting):...

00000a20 <__c.4848>:
     a20:	4e 65 77 20 54 61 73 6b 20 25 70 20 28 25 70 29     New Task %p (%p)
     a30:	20 73 63 68 65 64 75 6c 65 64 20 61 74 20 25 6c      scheduled at %l
     a40:	75 20 77 69 74 68 20 70 65 72 69 6f 64 20 25 6c     u with period %l
     a50:	75 2c 20 25 6c 75 20 63 75 72 72 65 6e 74 0d 0a     u, %lu current..
     a60:	00                                                  .

00000a61 <__c.4846>:
     a61:	45 52 52 4f 52 21 20 54 61 73 6b 20 6c 69 73 74     ERROR! Task list
     a71:	20 68 61 73 20 73 65 6c 66 2d 72 65 66 65 72 65      has self-refere
     a81:	6e 63 65 2e 0d 0a 00                                nce....

00000a88 <__c.4832>:
     a88:	45 52 52 4f 52 3a 20 54 61 73 6b 20 73 63 68 65     ERROR: Task sche
     a98:	64 75 6c 65 64 20 66 6f 72 20 61 20 74 69 6d 65     duled for a time
     aa8:	20 69 6e 20 74 68 65 20 70 61 73 74 2e 0d 0a 00      in the past....

00000ab8 <__c.4830>:
     ab8:	45 52 52 4f 52 3a 20 73 63 68 65 64 75 6c 65 72     ERROR: scheduler
     ac8:	5f 6d 61 6c 6c 6f 63 20 72 65 74 75 72 6e 65 64     _malloc returned
     ad8:	20 61 20 6e 65 77 5f 74 61 73 6b 20 70 6f 69 6e      a new_task poin
     ae8:	74 65 72 20 6f 75 74 73 69 64 65 20 6f 66 20 74     ter outside of t
     af8:	68 65 20 74 61 73 6b 20 73 74 6f 72 61 67 65 20     he task storage 
     b08:	61 72 72 61 79 2e 0d 0a 00                          array....

00000b11 <__c.4828>:
     b11:	45 52 52 4f 52 3a 20 4e 6f 20 65 6d 70 74 79 20     ERROR: No empty 
     b21:	73 70 6f 74 20 66 6f 75 6e 64 20 69 6e 20 73 63     spot found in sc
     b31:	68 65 64 75 6c 65 72 5f 6d 61 6c 6c 6f 63 2c 20     heduler_malloc, 
     b41:	62 75 74 20 6e 75 6d 5f 74 61 73 6b 73 20 77 61     but num_tasks wa
     b51:	73 6e 27 74 20 67 72 65 61 74 65 72 20 74 68 61     sn't greater tha
     b61:	6e 20 6f 72 20 65 71 75 61 6c 20 6d 61 78 5f 74     n or equal max_t
     b71:	61 73 6b 73 2e 0d 0a 00                             asks....

00000b79 <__c.4791>:
     b79:	09 41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 72     .Attempting to r
     b89:	65 73 74 6f 72 65 20 74 61 73 6b 5f 6c 69 73 74     estore task_list
     b99:	2e 0d 0a 09 49 66 20 79 6f 75 20 6f 6e 6c 79 20     ....If you only 
     ba9:	73 65 65 20 74 68 69 73 20 6d 65 73 73 61 67 65     see this message
     bb9:	20 72 61 72 65 6c 79 2c 20 64 6f 6e 27 74 20 77      rarely, don't w
     bc9:	6f 72 72 79 20 74 6f 6f 20 6d 75 63 68 2e 0d 0a     orry too much...
     bd9:	00                                                  .

00000bda <__c.4766>:
     bda:	45 52 52 4f 52 3a 20 49 6e 20 73 63 68 65 64 75     ERROR: In schedu
     bea:	6c 65 72 5f 66 72 65 65 2c 20 74 67 74 20 28 25     ler_free, tgt (%
     bfa:	58 29 20 77 61 73 20 6f 75 74 73 69 64 65 20 76     X) was outside v
     c0a:	61 6c 69 64 20 54 61 73 6b 2a 20 72 61 6e 67 65     alid Task* range
     c1a:	2e 0d 0a 00                                         ....

00000c1e <__c.5550>:
     c1e:	4d 65 73 73 61 67 65 20 6c 65 6e 67 74 68 20 77     Message length w
     c2e:	61 73 20 25 7a 20 63 68 61 72 73 2c 20 77 68 69     as %z chars, whi
     c3e:	63 68 20 65 78 63 65 65 64 73 20 74 68 65 20 6d     ch exceeds the m
     c4e:	61 78 69 6d 75 6d 20 6f 66 20 25 75 00              aximum of %u.

00000c5b <__c.5545>:
     c5b:	42 72 6f 61 64 63 61 73 74 69 6e 67 20 63 6f 6d     Broadcasting com
     c6b:	6d 61 6e 64 20 74 6f 20 25 30 34 58 3a 20 22 25     mand to %04X: "%
     c7b:	73 22 2c 20 6f 66 20 6c 65 6e 67 74 68 20 25 69     s", of length %i
     c8b:	2e 0d 0a 00                                         ....

00000c8f <__c.5536>:
     c8f:	42 72 6f 61 64 63 61 73 74 69 6e 67 20 63 6f 6d     Broadcasting com
     c9f:	6d 61 6e 64 3a 20 22 25 73 22 2c 20 6f 66 20 6c     mand: "%s", of l
     caf:	65 6e 67 74 68 20 25 69 2e 0d 0a 00                 ength %i....

00000cbb <__c.5531>:
     cbb:	4d 79 20 49 44 20 69 73 3a 20 25 30 34 58 0d 0a     My ID is: %04X..
     ccb:	00                                                  .

00000ccc <__c.5499>:
     ccc:	47 6f 74 20 61 64 6a 75 73 74 5f 6d 6f 74 6f 72     Got adjust_motor
     cdc:	73 20 63 6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63     s command. direc
     cec:	74 69 6f 6e 3a 20 25 68 75 2c 20 4e 65 77 20 53     tion: %hu, New S
     cfc:	65 74 74 69 6e 67 73 3a 20 28 25 64 2c 20 25 64     ettings: (%d, %d
     d0c:	2c 20 25 64 29 0d 0a 00                             , %d)...

00000d14 <__c.5497>:
     d14:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d24:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     d34:	6c 2e 0d 0a 00                                      l....

00000d39 <__c.5495>:
     d39:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d49:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     d59:	61 6c 2e 0d 0a 00                                   al....

00000d5f <__c.5493>:
     d5f:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d6f:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     d7f:	6c 2e 0d 0a 00                                      l....

00000d84 <__c.5491>:
     d84:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     d94:	6f 74 3a 20 25 68 75 2e 0d 0a 00                    ot: %hu....

00000d9f <__c.5488>:
     d9f:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     daf:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     dbf:	6e 2e 0d 0a 00                                      n....

00000dc4 <__c.5478>:
     dc4:	47 6f 74 20 73 65 74 5f 6d 6f 74 6f 72 73 20 63     Got set_motors c
     dd4:	6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63 74 69 6f     ommand. directio
     de4:	6e 3a 20 25 68 75 2c 20 76 61 6c 73 3a 20 28 25     n: %hu, vals: (%
     df4:	64 2c 20 25 64 2c 20 25 64 29 0d 0a 00              d, %d, %d)...

00000e01 <__c.5476>:
     e01:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e11:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     e21:	6c 2e 0d 0a 00                                      l....

00000e26 <__c.5474>:
     e26:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e36:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     e46:	61 6c 2e 0d 0a 00                                   al....

00000e4c <__c.5472>:
     e4c:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e5c:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     e6c:	6c 2e 0d 0a 00                                      l....

00000e71 <__c.5470>:
     e71:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     e81:	6f 74 3a 20 25 68 75 2e 0d 0a 00                    ot: %hu....

00000e8c <__c.5467>:
     e8c:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e9c:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     eac:	6e 2e 0d 0a 00                                      n....

00000eb1 <__c.5448>:
     eb1:	72 3a 20 25 68 75 2c 20 67 3a 20 25 68 75 2c 20     r: %hu, g: %hu, 
     ec1:	62 3a 20 25 68 75 0d 0a 00                          b: %hu...

00000eca <__c.5433>:
     eca:	77 61 6c 6b 20 64 69 72 65 63 74 69 6f 6e 20 25     walk direction %
     eda:	68 75 2c 20 6e 75 6d 5f 73 74 65 70 73 20 25 75     hu, num_steps %u
     eea:	0d 0a 00                                            ...

00000eed <__c.5413>:
     eed:	70 72 69 6e 74 5f 6d 6f 74 6f 72 5f 73 65 74 74     print_motor_sett
     efd:	69 6e 67 73 00                                      ings.

00000f02 <__c.5411>:
     f02:	77 72 69 74 65 5f 6d 6f 74 6f 72 5f 73 65 74 74     write_motor_sett
     f12:	69 6e 67 73 00                                      ings.

00000f17 <__c.5409>:
     f17:	72 65 73 65 74 00                                   reset.

00000f1d <__c.5407>:
     f1d:	74 61 73 6b 73 00                                   tasks.

00000f23 <__c.5405>:
     f23:	74 67 74 00                                         tgt.

00000f27 <__c.5403>:
     f27:	6d 73 67 5f 74 73 74 00                             msg_tst.

00000f2f <__c.5401>:
     f2f:	6d 73 67 00                                         msg.

00000f33 <__c.5399>:
     f33:	74 67 74 5f 63 6d 64 00                             tgt_cmd.

00000f3b <__c.5397>:
     f3b:	63 6d 64 00                                         cmd.

00000f3f <__c.5395>:
     f3f:	62 72 6f 61 64 63 61 73 74 5f 69 64 00              broadcast_id.

00000f4c <__c.5393>:
     f4c:	67 65 74 5f 69 64 00                                get_id.

00000f53 <__c.5391>:
     f53:	73 65 74 5f 6c 65 64 00                             set_led.

00000f5b <__c.5389>:
     f5b:	72 6e 62 5f 62 00                                   rnb_b.

00000f61 <__c.5387>:
     f61:	73 65 74 5f 64 69 73 74 5f 70 65 72 5f 73 74 65     set_dist_per_ste
     f71:	70 00                                               p.

00000f73 <__c.5385>:
     f73:	61 64 6a 5f 6d 6f 74 6f 72 73 00                    adj_motors.

00000f7e <__c.5383>:
     f7e:	73 65 74 5f 6d 6f 74 6f 72 73 00                    set_motors.

00000f89 <__c.5381>:
     f89:	73 74 6f 70 5f 77 61 6c 6b 00                       stop_walk.

00000f93 <__c.5379>:
     f93:	63 6f 6c 6c 00                                      coll.

00000f98 <__c.5377>:
     f98:	73 65 74 5f 69 72 00                                set_ir.

00000f9f <__c.5375>:
     f9f:	67 65 74 5f 72 67 62 00                             get_rgb.

00000fa7 <__c.5373>:
     fa7:	77 61 6c 6b 00                                      walk.

00000fac <__c.5371>:
     fac:	6d 6f 76 65 5f 73 74 65 70 73 00                    move_steps.

00000fb7 <CMD_NOT_RECOGNIZED_STR>:
     fb7:	09 43 6f 6d 6d 61 6e 64 20 28 20 25 73 20 29 20     .Command ( %s ) 
     fc7:	6e 6f 74 20 72 65 63 6f 67 6e 69 7a 65 64 2e 0d     not recognized..
     fd7:	0a 00                                               ..

00000fd9 <__c.2529>:
     fd9:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     fe9:	47 00                                               G.

00000feb <pstr_an>:
     feb:	61 6e 00                                            an.

00000fee <pstr_nfinity>:
     fee:	6e 66 69 6e 69 74 79 00                             nfinity.

00000ff6 <pwr_m10>:
     ff6:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1006:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000100e <pwr_p10>:
    100e:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    101e:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00001026 <__ctors_end>:
    1026:	11 24       	eor	r1, r1
    1028:	1f be       	out	0x3f, r1	; 63
    102a:	cf ef       	ldi	r28, 0xFF	; 255
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	df e3       	ldi	r29, 0x3F	; 63
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	00 e0       	ldi	r16, 0x00	; 0
    1034:	0c bf       	out	0x3c, r16	; 60

00001036 <__do_copy_data>:
    1036:	13 e2       	ldi	r17, 0x23	; 35
    1038:	a0 e0       	ldi	r26, 0x00	; 0
    103a:	b0 e2       	ldi	r27, 0x20	; 32
    103c:	e0 e6       	ldi	r30, 0x60	; 96
    103e:	f3 ea       	ldi	r31, 0xA3	; 163
    1040:	00 e0       	ldi	r16, 0x00	; 0
    1042:	0b bf       	out	0x3b, r16	; 59
    1044:	02 c0       	rjmp	.+4      	; 0x104a <__do_copy_data+0x14>
    1046:	07 90       	elpm	r0, Z+
    1048:	0d 92       	st	X+, r0
    104a:	a8 30       	cpi	r26, 0x08	; 8
    104c:	b1 07       	cpc	r27, r17
    104e:	d9 f7       	brne	.-10     	; 0x1046 <__do_copy_data+0x10>

00001050 <__do_clear_bss>:
    1050:	28 e2       	ldi	r18, 0x28	; 40
    1052:	a8 e0       	ldi	r26, 0x08	; 8
    1054:	b3 e2       	ldi	r27, 0x23	; 35
    1056:	01 c0       	rjmp	.+2      	; 0x105a <.do_clear_bss_start>

00001058 <.do_clear_bss_loop>:
    1058:	1d 92       	st	X+, r1

0000105a <.do_clear_bss_start>:
    105a:	a5 3e       	cpi	r26, 0xE5	; 229
    105c:	b2 07       	cpc	r27, r18
    105e:	e1 f7       	brne	.-8      	; 0x1058 <.do_clear_bss_loop>
    1060:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <main>
    1064:	0c 94 ae 51 	jmp	0xa35c	; 0xa35c <_exit>

00001068 <__bad_interrupt>:
    1068:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000106c <getTime>:

.extern rtc_epoch
; Gets the time as an atomic operation
.global getTime
getTime:
	in		r0,_SFR_IO_ADDR(SREG)		; Save the state of the status register
    106c:	0f b6       	in	r0, 0x3f	; 63
	cli									; Disable interrupts
    106e:	f8 94       	cli
	lds		r22, RTC_CNT				; Load low byte into return value
    1070:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
	lds		r23, RTC_CNT+1
    1074:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	lds		r24, rtc_epoch				; epoch 16-bit high word
    1078:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <rtc_epoch>
	lds		r25, rtc_epoch+1
    107c:	90 91 9a 24 	lds	r25, 0x249A	; 0x80249a <rtc_epoch+0x1>
	out		_SFR_IO_ADDR(SREG), r0		; Restore status register (including re-enabling interrupts if necessary)
    1080:	0f be       	out	0x3f, r0	; 63
	ret
    1082:	08 95       	ret

00001084 <loop>:


/*
 * the code in this function will be called repeatedly, as fast as it can execute.
 */
void loop(){
    1084:	08 95       	ret

00001086 <handleMsg>:

/*
 * after each pass through loop(), the robot checks for all mes sages it has 
 * received, and calls this function once for each message.
 */
void handleMsg(irMsg* msgStruct){
    1086:	08 95       	ret

00001088 <delayMS>:
#include "droplet_base.h"

void delayMS(uint16_t ms){
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	7c 01       	movw	r14, r24
	uint32_t cur_time, end_time;
	cli(); cur_time = getTime(); sei();
    1092:	f8 94       	cli
    1094:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1098:	78 94       	sei
	end_time = cur_time + ms;
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	2e 0d       	add	r18, r14
    10a0:	3f 1d       	adc	r19, r15
    10a2:	41 1d       	adc	r20, r1
    10a4:	51 1d       	adc	r21, r1
    10a6:	69 01       	movw	r12, r18
    10a8:	7a 01       	movw	r14, r20
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <delayMS+0x2e>
		cli();
		if (getTime() >= end_time){
			sei();
			return;
		}
		sei();
    10ac:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ae:	3a e6       	ldi	r19, 0x6A	; 106
    10b0:	3a 95       	dec	r19
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <delayMS+0x28>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <delayMS+0x2e>
void delayMS(uint16_t ms){
	uint32_t cur_time, end_time;
	cli(); cur_time = getTime(); sei();
	end_time = cur_time + ms;
	while (1){
		cli();
    10b6:	f8 94       	cli
		if (getTime() >= end_time){
    10b8:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    10bc:	6c 15       	cp	r22, r12
    10be:	7d 05       	cpc	r23, r13
    10c0:	8e 05       	cpc	r24, r14
    10c2:	9f 05       	cpc	r25, r15
    10c4:	98 f3       	brcs	.-26     	; 0x10ac <delayMS+0x24>
			sei();
    10c6:	78 94       	sei
			return;
		}
		sei();
		delay_us(10);
	}
}
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	08 95       	ret

000010d2 <handle_reprogramming>:
	uint8_t len = strlen(initial_msg);
	irSend(ALL_DIRS,initial_msg,len);
	NONATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		waitForTransmission(ALL_DIRS);
	}
}
    10d2:	af 92       	push	r10
    10d4:	bf 92       	push	r11
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	28 97       	sbiw	r28, 0x08	; 8
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	8c 01       	movw	r16, r24
    10f2:	80 91 e1 24 	lds	r24, 0x24E1	; 0x8024e1 <number_of_hex>
    10f6:	81 50       	subi	r24, 0x01	; 1
    10f8:	80 93 e1 24 	sts	0x24E1, r24	; 0x8024e1 <number_of_hex>
    10fc:	d8 01       	movw	r26, r16
    10fe:	16 96       	adiw	r26, 0x06	; 6
    1100:	ed 91       	ld	r30, X+
    1102:	fc 91       	ld	r31, X
    1104:	17 97       	sbiw	r26, 0x07	; 7
    1106:	80 81       	ld	r24, Z
    1108:	8e 83       	std	Y+6, r24	; 0x06
    110a:	81 81       	ldd	r24, Z+1	; 0x01
    110c:	8f 83       	std	Y+7, r24	; 0x07
    110e:	18 86       	std	Y+8, r1	; 0x08
    1110:	40 e1       	ldi	r20, 0x10	; 16
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	ce 01       	movw	r24, r28
    111a:	06 96       	adiw	r24, 0x06	; 6
    111c:	0e 94 77 4d 	call	0x9aee	; 0x9aee <strtoul>
    1120:	60 93 d5 26 	sts	0x26D5, r22	; 0x8026d5 <message_bytes>
    1124:	80 91 d8 26 	lds	r24, 0x26D8	; 0x8026d8 <Numberofbytes>
    1128:	68 0f       	add	r22, r24
    112a:	60 93 d8 26 	sts	0x26D8, r22	; 0x8026d8 <Numberofbytes>
    112e:	80 91 e1 24 	lds	r24, 0x24E1	; 0x8024e1 <number_of_hex>
    1132:	1f 92       	push	r1
    1134:	8f 93       	push	r24
    1136:	87 e7       	ldi	r24, 0x77	; 119
    1138:	90 e2       	ldi	r25, 0x20	; 32
    113a:	9f 93       	push	r25
    113c:	8f 93       	push	r24
    113e:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    1142:	f8 01       	movw	r30, r16
    1144:	a6 81       	ldd	r26, Z+6	; 0x06
    1146:	b7 81       	ldd	r27, Z+7	; 0x07
    1148:	12 96       	adiw	r26, 0x02	; 2
    114a:	fe 01       	movw	r30, r28
    114c:	31 96       	adiw	r30, 0x01	; 1
    114e:	9e 01       	movw	r18, r28
    1150:	2b 5f       	subi	r18, 0xFB	; 251
    1152:	3f 4f       	sbci	r19, 0xFF	; 255
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	8d 91       	ld	r24, X+
    115e:	81 93       	st	Z+, r24
    1160:	e2 17       	cp	r30, r18
    1162:	f3 07       	cpc	r31, r19
    1164:	d9 f7       	brne	.-10     	; 0x115c <handle_reprogramming+0x8a>
    1166:	1d 82       	std	Y+5, r1	; 0x05
    1168:	40 e1       	ldi	r20, 0x10	; 16
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	ce 01       	movw	r24, r28
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	0e 94 77 4d 	call	0x9aee	; 0x9aee <strtoul>
    1178:	20 91 0a 23 	lds	r18, 0x230A	; 0x80230a <firstmessage_flag>
    117c:	21 11       	cpse	r18, r1
    117e:	1d c0       	rjmp	.+58     	; 0x11ba <handle_reprogramming+0xe8>
    1180:	20 91 e1 24 	lds	r18, 0x24E1	; 0x8024e1 <number_of_hex>
    1184:	22 23       	and	r18, r18
    1186:	09 f4       	brne	.+2      	; 0x118a <handle_reprogramming+0xb8>
    1188:	61 c0       	rjmp	.+194    	; 0x124c <handle_reprogramming+0x17a>
    118a:	60 93 d6 26 	sts	0x26D6, r22	; 0x8026d6 <addrstart>
    118e:	70 93 d7 26 	sts	0x26D7, r23	; 0x8026d7 <addrstart+0x1>
    1192:	ab 01       	movw	r20, r22
    1194:	bc 01       	movw	r22, r24
    1196:	66 27       	eor	r22, r22
    1198:	77 27       	eor	r23, r23
    119a:	40 93 d1 26 	sts	0x26D1, r20	; 0x8026d1 <targetAddr>
    119e:	50 93 d2 26 	sts	0x26D2, r21	; 0x8026d2 <targetAddr+0x1>
    11a2:	60 93 d3 26 	sts	0x26D3, r22	; 0x8026d3 <targetAddr+0x2>
    11a6:	70 93 d4 26 	sts	0x26D4, r23	; 0x8026d4 <targetAddr+0x3>
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	80 93 0a 23 	sts	0x230A, r24	; 0x80230a <firstmessage_flag>
    11b0:	80 91 d5 26 	lds	r24, 0x26D5	; 0x8026d5 <message_bytes>
    11b4:	81 11       	cpse	r24, r1
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <handle_reprogramming+0xf0>
    11b8:	3b c0       	rjmp	.+118    	; 0x1230 <handle_reprogramming+0x15e>
    11ba:	80 91 d5 26 	lds	r24, 0x26D5	; 0x8026d5 <message_bytes>
    11be:	88 23       	and	r24, r24
    11c0:	99 f1       	breq	.+102    	; 0x1228 <handle_reprogramming+0x156>
    11c2:	e0 90 0b 23 	lds	r14, 0x230B	; 0x80230b <flashBufferPos>
    11c6:	56 e0       	ldi	r21, 0x06	; 6
    11c8:	f5 2e       	mov	r15, r21
    11ca:	26 e0       	ldi	r18, 0x06	; 6
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	d8 01       	movw	r26, r16
    11d0:	16 96       	adiw	r26, 0x06	; 6
    11d2:	ed 91       	ld	r30, X+
    11d4:	fc 91       	ld	r31, X
    11d6:	17 97       	sbiw	r26, 0x07	; 7
    11d8:	e2 0f       	add	r30, r18
    11da:	f3 1f       	adc	r31, r19
    11dc:	80 81       	ld	r24, Z
    11de:	8e 83       	std	Y+6, r24	; 0x06
    11e0:	81 81       	ldd	r24, Z+1	; 0x01
    11e2:	8f 83       	std	Y+7, r24	; 0x07
    11e4:	18 86       	std	Y+8, r1	; 0x08
    11e6:	40 e1       	ldi	r20, 0x10	; 16
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	ce 01       	movw	r24, r28
    11f0:	06 96       	adiw	r24, 0x06	; 6
    11f2:	0e 94 77 4d 	call	0x9aee	; 0x9aee <strtoul>
    11f6:	ee 2d       	mov	r30, r14
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	e7 52       	subi	r30, 0x27	; 39
    11fc:	f9 4d       	sbci	r31, 0xD9	; 217
    11fe:	60 83       	st	Z, r22
    1200:	e0 91 0b 23 	lds	r30, 0x230B	; 0x80230b <flashBufferPos>
    1204:	ee 24       	eor	r14, r14
    1206:	e3 94       	inc	r14
    1208:	ee 0e       	add	r14, r30
    120a:	e0 92 0b 23 	sts	0x230B, r14	; 0x80230b <flashBufferPos>
    120e:	f3 94       	inc	r15
    1210:	f3 94       	inc	r15
    1212:	2f 2d       	mov	r18, r15
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	80 91 d5 26 	lds	r24, 0x26D5	; 0x8026d5 <message_bytes>
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	03 96       	adiw	r24, 0x03	; 3
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	28 17       	cp	r18, r24
    1224:	39 07       	cpc	r19, r25
    1226:	9c f2       	brlt	.-90     	; 0x11ce <handle_reprogramming+0xfc>
    1228:	80 91 e1 24 	lds	r24, 0x24E1	; 0x8024e1 <number_of_hex>
    122c:	88 23       	and	r24, r24
    122e:	91 f0       	breq	.+36     	; 0x1254 <handle_reprogramming+0x182>
    1230:	28 96       	adiw	r28, 0x08	; 8
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	bf 90       	pop	r11
    1248:	af 90       	pop	r10
    124a:	08 95       	ret
    124c:	80 91 d5 26 	lds	r24, 0x26D5	; 0x8026d5 <message_bytes>
    1250:	81 11       	cpse	r24, r1
    1252:	b7 cf       	rjmp	.-146    	; 0x11c2 <handle_reprogramming+0xf0>
    1254:	81 e9       	ldi	r24, 0x91	; 145
    1256:	90 e2       	ldi	r25, 0x20	; 32
    1258:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <puts>
    125c:	80 91 d8 26 	lds	r24, 0x26D8	; 0x8026d8 <Numberofbytes>
    1260:	39 ed       	ldi	r19, 0xD9	; 217
    1262:	c3 2e       	mov	r12, r19
    1264:	36 e2       	ldi	r19, 0x26	; 38
    1266:	d3 2e       	mov	r13, r19
    1268:	88 23       	and	r24, r24
    126a:	51 f1       	breq	.+84     	; 0x12c0 <handle_reprogramming+0x1ee>
    126c:	56 01       	movw	r10, r12
    126e:	00 e0       	ldi	r16, 0x00	; 0
    1270:	10 e0       	ldi	r17, 0x00	; 0
    1272:	26 ef       	ldi	r18, 0xF6	; 246
    1274:	e2 2e       	mov	r14, r18
    1276:	20 e2       	ldi	r18, 0x20	; 32
    1278:	f2 2e       	mov	r15, r18
    127a:	08 c0       	rjmp	.+16     	; 0x128c <handle_reprogramming+0x1ba>
    127c:	0f 5f       	subi	r16, 0xFF	; 255
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	80 91 d8 26 	lds	r24, 0x26D8	; 0x8026d8 <Numberofbytes>
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	08 17       	cp	r16, r24
    1288:	19 07       	cpc	r17, r25
    128a:	d4 f4       	brge	.+52     	; 0x12c0 <handle_reprogramming+0x1ee>
    128c:	d5 01       	movw	r26, r10
    128e:	8d 91       	ld	r24, X+
    1290:	5d 01       	movw	r10, r26
    1292:	1f 92       	push	r1
    1294:	8f 93       	push	r24
    1296:	ff 92       	push	r15
    1298:	ef 92       	push	r14
    129a:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	c8 01       	movw	r24, r16
    12a8:	8f 70       	andi	r24, 0x0F	; 15
    12aa:	99 27       	eor	r25, r25
    12ac:	89 2b       	or	r24, r25
    12ae:	31 f7       	brne	.-52     	; 0x127c <handle_reprogramming+0x1aa>
    12b0:	01 15       	cp	r16, r1
    12b2:	11 05       	cpc	r17, r1
    12b4:	19 f3       	breq	.-58     	; 0x127c <handle_reprogramming+0x1aa>
    12b6:	8f eb       	ldi	r24, 0xBF	; 191
    12b8:	90 e2       	ldi	r25, 0x20	; 32
    12ba:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <puts>
    12be:	de cf       	rjmp	.-68     	; 0x127c <handle_reprogramming+0x1aa>
    12c0:	8f eb       	ldi	r24, 0xBF	; 191
    12c2:	90 e2       	ldi	r25, 0x20	; 32
    12c4:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <puts>
    12c8:	80 91 e1 24 	lds	r24, 0x24E1	; 0x8024e1 <number_of_hex>
    12cc:	1f 92       	push	r1
    12ce:	8f 93       	push	r24
    12d0:	80 91 d4 26 	lds	r24, 0x26D4	; 0x8026d4 <targetAddr+0x3>
    12d4:	8f 93       	push	r24
    12d6:	80 91 d3 26 	lds	r24, 0x26D3	; 0x8026d3 <targetAddr+0x2>
    12da:	8f 93       	push	r24
    12dc:	80 91 d2 26 	lds	r24, 0x26D2	; 0x8026d2 <targetAddr+0x1>
    12e0:	8f 93       	push	r24
    12e2:	80 91 d1 26 	lds	r24, 0x26D1	; 0x8026d1 <targetAddr>
    12e6:	8f 93       	push	r24
    12e8:	81 ec       	ldi	r24, 0xC1	; 193
    12ea:	90 e2       	ldi	r25, 0x20	; 32
    12ec:	9f 93       	push	r25
    12ee:	8f 93       	push	r24
    12f0:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    12f4:	20 91 d8 26 	lds	r18, 0x26D8	; 0x8026d8 <Numberofbytes>
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	60 91 d1 26 	lds	r22, 0x26D1	; 0x8026d1 <targetAddr>
    12fe:	70 91 d2 26 	lds	r23, 0x26D2	; 0x8026d2 <targetAddr+0x1>
    1302:	80 91 d3 26 	lds	r24, 0x26D3	; 0x8026d3 <targetAddr+0x2>
    1306:	90 91 d4 26 	lds	r25, 0x26D4	; 0x8026d4 <targetAddr+0x3>
    130a:	01 e0       	ldi	r16, 0x01	; 1
    130c:	49 ed       	ldi	r20, 0xD9	; 217
    130e:	56 e2       	ldi	r21, 0x26	; 38
    1310:	0e 94 9b 22 	call	0x4536	; 0x4536 <nvm_flash_erase_and_write_buffer>
    1314:	20 91 d8 26 	lds	r18, 0x26D8	; 0x8026d8 <Numberofbytes>
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	60 91 d1 26 	lds	r22, 0x26D1	; 0x8026d1 <targetAddr>
    131e:	70 91 d2 26 	lds	r23, 0x26D2	; 0x8026d2 <targetAddr+0x1>
    1322:	80 91 d3 26 	lds	r24, 0x26D3	; 0x8026d3 <targetAddr+0x2>
    1326:	90 91 d4 26 	lds	r25, 0x26D4	; 0x8026d4 <targetAddr+0x3>
    132a:	49 ed       	ldi	r20, 0xD9	; 217
    132c:	56 e2       	ldi	r21, 0x26	; 38
    132e:	0e 94 84 22 	call	0x4508	; 0x4508 <nvm_flash_read_buffer>
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	80 91 d8 26 	lds	r24, 0x26D8	; 0x8026d8 <Numberofbytes>
    133a:	88 23       	and	r24, r24
    133c:	69 f1       	breq	.+90     	; 0x1398 <handle_reprogramming+0x2c6>
    133e:	89 ed       	ldi	r24, 0xD9	; 217
    1340:	a8 2e       	mov	r10, r24
    1342:	86 e2       	ldi	r24, 0x26	; 38
    1344:	b8 2e       	mov	r11, r24
    1346:	00 e0       	ldi	r16, 0x00	; 0
    1348:	10 e0       	ldi	r17, 0x00	; 0
    134a:	96 ef       	ldi	r25, 0xF6	; 246
    134c:	e9 2e       	mov	r14, r25
    134e:	90 e2       	ldi	r25, 0x20	; 32
    1350:	f9 2e       	mov	r15, r25
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <handle_reprogramming+0x292>
    1354:	0f 5f       	subi	r16, 0xFF	; 255
    1356:	1f 4f       	sbci	r17, 0xFF	; 255
    1358:	80 91 d8 26 	lds	r24, 0x26D8	; 0x8026d8 <Numberofbytes>
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	08 17       	cp	r16, r24
    1360:	19 07       	cpc	r17, r25
    1362:	d4 f4       	brge	.+52     	; 0x1398 <handle_reprogramming+0x2c6>
    1364:	d5 01       	movw	r26, r10
    1366:	8d 91       	ld	r24, X+
    1368:	5d 01       	movw	r10, r26
    136a:	1f 92       	push	r1
    136c:	8f 93       	push	r24
    136e:	ff 92       	push	r15
    1370:	ef 92       	push	r14
    1372:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	c8 01       	movw	r24, r16
    1380:	8f 70       	andi	r24, 0x0F	; 15
    1382:	99 27       	eor	r25, r25
    1384:	89 2b       	or	r24, r25
    1386:	31 f7       	brne	.-52     	; 0x1354 <handle_reprogramming+0x282>
    1388:	01 15       	cp	r16, r1
    138a:	11 05       	cpc	r17, r1
    138c:	19 f3       	breq	.-58     	; 0x1354 <handle_reprogramming+0x282>
    138e:	8f eb       	ldi	r24, 0xBF	; 191
    1390:	90 e2       	ldi	r25, 0x20	; 32
    1392:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <puts>
    1396:	de cf       	rjmp	.-68     	; 0x1354 <handle_reprogramming+0x282>
    1398:	8f eb       	ldi	r24, 0xBF	; 191
    139a:	90 e2       	ldi	r25, 0x20	; 32
    139c:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <puts>
    13a0:	8d ef       	ldi	r24, 0xFD	; 253
    13a2:	90 e2       	ldi	r25, 0x20	; 32
    13a4:	9f 93       	push	r25
    13a6:	8f 93       	push	r24
    13a8:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    13ac:	84 ef       	ldi	r24, 0xF4	; 244
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    13b4:	10 92 a7 24 	sts	0x24A7, r1	; 0x8024a7 <reprogramming>
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	91 e2       	ldi	r25, 0x21	; 33
    13bc:	9f 93       	push	r25
    13be:	8f 93       	push	r24
    13c0:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    13c4:	10 92 0a 23 	sts	0x230A, r1	; 0x80230a <firstmessage_flag>
    13c8:	10 92 d8 26 	sts	0x26D8, r1	; 0x8026d8 <Numberofbytes>
    13cc:	10 92 0b 23 	sts	0x230B, r1	; 0x80230b <flashBufferPos>
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	92 e0       	ldi	r25, 0x02	; 2
    13d4:	f6 01       	movw	r30, r12
    13d6:	9c 01       	movw	r18, r24
    13d8:	11 92       	st	Z+, r1
    13da:	21 50       	subi	r18, 0x01	; 1
    13dc:	30 40       	sbci	r19, 0x00	; 0
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <handle_reprogramming+0x306>
    13e0:	88 ed       	ldi	r24, 0xD8	; 216
    13e2:	84 bf       	out	0x34, r24	; 52
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	1e cf       	rjmp	.-452    	; 0x1230 <handle_reprogramming+0x15e>

000013f4 <send_hex>:
    13f4:	cf 93       	push	r28
    13f6:	e2 ee       	ldi	r30, 0xE2	; 226
    13f8:	f4 e2       	ldi	r31, 0x24	; 36
    13fa:	01 90       	ld	r0, Z+
    13fc:	00 20       	and	r0, r0
    13fe:	e9 f7       	brne	.-6      	; 0x13fa <send_hex+0x6>
    1400:	31 97       	sbiw	r30, 0x01	; 1
    1402:	af 01       	movw	r20, r30
    1404:	42 5e       	subi	r20, 0xE2	; 226
    1406:	54 42       	sbci	r21, 0x24	; 36
    1408:	62 ee       	ldi	r22, 0xE2	; 226
    140a:	74 e2       	ldi	r23, 0x24	; 36
    140c:	8f e3       	ldi	r24, 0x3F	; 63
    140e:	0e 94 3c 14 	call	0x2878	; 0x2878 <irSend>
    1412:	cf b7       	in	r28, 0x3f	; 63
    1414:	78 94       	sei
    1416:	8f e3       	ldi	r24, 0x3F	; 63
    1418:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <waitForTransmission>
    141c:	cf bf       	out	0x3f, r28	; 63
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <startupLightSequence>:
	PMIC.CTRL |= PMIC_RREN_bm;
	sei();
}

void startupLightSequence(){
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	84 e6       	ldi	r24, 0x64	; 100
    1428:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    142c:	84 e6       	ldi	r24, 0x64	; 100
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	64 e6       	ldi	r22, 0x64	; 100
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    143e:	84 e6       	ldi	r24, 0x64	; 100
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1446:	44 e6       	ldi	r20, 0x64	; 100
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    1450:	84 e6       	ldi	r24, 0x64	; 100
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1458:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <ledOff>
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	84 e6       	ldi	r24, 0x64	; 100
    1462:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    1466:	84 e6       	ldi	r24, 0x64	; 100
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	64 e6       	ldi	r22, 0x64	; 100
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    1478:	84 e6       	ldi	r24, 0x64	; 100
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1480:	44 e6       	ldi	r20, 0x64	; 100
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    148a:	84 e6       	ldi	r24, 0x64	; 100
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1492:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <ledOff>
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	84 e6       	ldi	r24, 0x64	; 100
    149c:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    14a0:	84 e6       	ldi	r24, 0x64	; 100
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	64 e6       	ldi	r22, 0x64	; 100
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    14b2:	84 e6       	ldi	r24, 0x64	; 100
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    14ba:	44 e6       	ldi	r20, 0x64	; 100
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    14c4:	84 e6       	ldi	r24, 0x64	; 100
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    14cc:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <ledOff>

000014d0 <main>:
	startupLightSequence();
	
	irCommInit();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
}

int main(void){
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	c0 54       	subi	r28, 0x40	; 64
    14da:	d1 09       	sbc	r29, r1
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	de bf       	out	0x3e, r29	; 62
/**
 * \brief Initializes all the subsystems for this Droplet. This function MUST be called
 * by the user before using any other functions in the API.
 */ 
static void initAllSystems(void){
	cli();
    14e0:	f8 94       	cli
	}
}

inline void Config32MHzClock(void){
	// Set system clock to 32 MHz
	CCP = CCP_IOREG_gc;
    14e2:	88 ed       	ldi	r24, 0xD8	; 216
    14e4:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    14ec:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    14f0:	81 ff       	sbrs	r24, 1
    14f2:	fc cf       	rjmp	.-8      	; 0x14ec <main+0x1c>
	CCP = CCP_IOREG_gc;
    14f4:	88 ed       	ldi	r24, 0xD8	; 216
    14f6:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	//OSC.RC32KCAL = PRODSIGNATURES_RCOSC32K;
	// Set up real-time clock
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    14fe:	85 e0       	ldi	r24, 0x05	; 5
    1500:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	while (RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    1504:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    1508:	80 fd       	sbrc	r24, 0
    150a:	fc cf       	rjmp	.-8      	; 0x1504 <main+0x34>
	
	RTC.PER = 0xFFFF;		//(2^16)-1 milliseconds is 65.535 seconds
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	9f ef       	ldi	r25, 0xFF	; 255
    1510:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    1514:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>

	// reset RTC to 0, important for after a reboot:
	while(RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    151e:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    1522:	80 fd       	sbrc	r24, 0
    1524:	fc cf       	rjmp	.-8      	; 0x151e <main+0x4e>
	RTC.CNT = 0;
    1526:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    152a:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	uint16_t crc = 0;
	
	// calculate local id
	// simply crc of user sig row
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    152e:	82 e0       	ldi	r24, 0x02	; 2
    1530:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};
    1534:	80 e4       	ldi	r24, 0x40	; 64
    1536:	e0 e2       	ldi	r30, 0x20	; 32
    1538:	f0 e2       	ldi	r31, 0x20	; 32
    153a:	de 01       	movw	r26, r28
    153c:	11 96       	adiw	r26, 0x01	; 1
    153e:	01 90       	ld	r0, Z+
    1540:	0d 92       	st	X+, r0
    1542:	8a 95       	dec	r24
    1544:	e1 f7       	brne	.-8      	; 0x153e <main+0x6e>
    1546:	de 01       	movw	r26, r28
    1548:	11 96       	adiw	r26, 0x01	; 1
    154a:	9e 01       	movw	r18, r28
    154c:	2f 5b       	subi	r18, 0xBF	; 191
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
}
static void calculateIdNumber(void){
	INIT_DEBUG_PRINT("get id number\r\n");

	uint32_t pgm_bytes = 0;
	uint16_t crc = 0;
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++){
		pgm_bytes = pgm_read_word_far(addrs[i]);
    1554:	4d 91       	ld	r20, X+
    1556:	5d 91       	ld	r21, X+
    1558:	6d 91       	ld	r22, X+
    155a:	7d 91       	ld	r23, X+
    155c:	6b bf       	out	0x3b, r22	; 59
    155e:	fa 01       	movw	r30, r20
    1560:	47 91       	elpm	r20, Z+
    1562:	56 91       	elpm	r21, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    1564:	84 27       	eor	r24, r20
    1566:	48 2f       	mov	r20, r24
    1568:	42 95       	swap	r20
    156a:	48 27       	eor	r20, r24
    156c:	04 2e       	mov	r0, r20
    156e:	46 95       	lsr	r20
    1570:	46 95       	lsr	r20
    1572:	40 25       	eor	r20, r0
    1574:	04 2e       	mov	r0, r20
    1576:	46 95       	lsr	r20
    1578:	40 25       	eor	r20, r0
    157a:	47 70       	andi	r20, 0x07	; 7
    157c:	08 2e       	mov	r0, r24
    157e:	89 2f       	mov	r24, r25
    1580:	46 95       	lsr	r20
    1582:	07 94       	ror	r0
    1584:	47 95       	ror	r20
    1586:	90 2d       	mov	r25, r0
    1588:	84 27       	eor	r24, r20
    158a:	06 94       	lsr	r0
    158c:	47 95       	ror	r20
    158e:	90 25       	eor	r25, r0
    1590:	84 27       	eor	r24, r20
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++){
    1592:	2a 17       	cp	r18, r26
    1594:	3b 07       	cpc	r19, r27
    1596:	f1 f6       	brne	.-68     	; 0x1554 <main+0x84>
		pgm_bytes = pgm_read_word_far(addrs[i]);
		crc = _crc16_update(crc, (uint16_t)(pgm_bytes&0xFF));
	}

	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1598:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	droplet_ID = crc;
    159c:	80 93 97 24 	sts	0x2497, r24	; 0x802497 <droplet_ID>
    15a0:	90 93 98 24 	sts	0x2498, r25	; 0x802498 <droplet_ID+0x1>
	cli();
	Config32MHzClock();
	
	calculateIdNumber();
	
	schedulerInit();			INIT_DEBUG_PRINT("SCHEDULER INIT\r\n");
    15a4:	0e 94 41 33 	call	0x6682	; 0x6682 <schedulerInit>
	pcCommInit();				INIT_DEBUG_PRINT("PC COM INIT\r\n");
    15a8:	0e 94 73 23 	call	0x46e6	; 0x46e6 <pcCommInit>
	rgbLEDinit();				INIT_DEBUG_PRINT("LED INIT\r\n");
    15ac:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <rgbLEDinit>
	powerInit();				INIT_DEBUG_PRINT("POWER INIT\r\n");
    15b0:	0e 94 63 24 	call	0x48c6	; 0x48c6 <powerInit>
	i2cInit();					INIT_DEBUG_PRINT("I2C INIT\r\n");
    15b4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <i2cInit>

	droplet_ID = crc;
}

static void enableInterrupts(void){
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// enable low level interrupts
    15b8:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    15bc:	81 60       	ori	r24, 0x01	; 1
    15be:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// enable medium level interrupts	(e.g. TXCIF)
    15c2:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    15c6:	82 60       	ori	r24, 0x02	; 2
    15c8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// enable high level interrupts		(e.g. RTC_OVF)
    15cc:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    15d0:	84 60       	ori	r24, 0x04	; 4
    15d2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_RREN_bm;
    15d6:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    15da:	80 68       	ori	r24, 0x80	; 128
    15dc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    15e0:	78 94       	sei
	powerInit();				INIT_DEBUG_PRINT("POWER INIT\r\n");
	i2cInit();					INIT_DEBUG_PRINT("I2C INIT\r\n");
	
	enableInterrupts();	
	
	rangeAlgsInit();			INIT_DEBUG_PRINT("RANGE ALGORITHMS INIT\r\n");
    15e2:	0e 94 43 25 	call	0x4a86	; 0x4a86 <rangeAlgsInit>
	rgbSensorInit();			INIT_DEBUG_PRINT("RGB SENSE INIT\r\n");
    15e6:	0e 94 78 32 	call	0x64f0	; 0x64f0 <rgbSensorInit>
	irLedInit();				INIT_DEBUG_PRINT("IR LED INIT\r\n");
    15ea:	0e 94 99 1b 	call	0x3732	; 0x3732 <irLedInit>
	irSensorInit();			INIT_DEBUG_PRINT("IR SENSE INIT\r\n");
    15ee:	0e 94 9f 1c 	call	0x393e	; 0x393e <irSensorInit>
	#ifdef AUDIO_DROPLET
		speakerInit();			INIT_DEBUG_PRINT("SPEAKER INIT\r\n");
		micInit();				INIT_DEBUG_PRINT("MIC INIT\r\n"); //Must occur after ir_sensor_init.
	#endif
	
	motorInit();				INIT_DEBUG_PRINT("MOTOR INIT\r\n");
    15f2:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <motorInit>
	randomInit();				INIT_DEBUG_PRINT("RAND INIT\r\n"); //This uses adc readings for a random seed, and so requires that the adcs have been initialized.
    15f6:	0e 94 84 24 	call	0x4908	; 0x4908 <randomInit>
	localizationInit();		INIT_DEBUG_PRINT("LOCALIZATION INIT\r\n"); 
    15fa:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <localizationInit>
	
	#ifdef SYNCHRONIZED
		fireflySyncInit();
    15fe:	0e 94 65 0d 	call	0x1aca	; 0x1aca <fireflySyncInit>
	#endif

	reprogramming = 0;
    1602:	10 92 a7 24 	sts	0x24A7, r1	; 0x8024a7 <reprogramming>
	
	setAllirPowers(256);
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 3c 1c 	call	0x3878	; 0x3878 <setAllirPowers>

	startupLightSequence();
    160e:	0e 94 11 0a 	call	0x1422	; 0x1422 <startupLightSequence>
	
	irCommInit();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
    1612:	0e 94 52 11 	call	0x22a4	; 0x22a4 <irCommInit>
}

int main(void){
	initAllSystems();
	init();
    1616:	0e 94 00 60 	call	0xc000	; 0xc000 <init>
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    161a:	88 e7       	ldi	r24, 0x78	; 120
    161c:	28 2e       	mov	r2, r24
    161e:	84 e0       	ldi	r24, 0x04	; 4
    1620:	38 2e       	mov	r3, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    1622:	90 e5       	ldi	r25, 0x50	; 80
    1624:	89 2e       	mov	r8, r25
    1626:	94 e0       	ldi	r25, 0x04	; 4
    1628:	99 2e       	mov	r9, r25
	init();
	while(1){
		loop();
		checkMessages();
		if(taskListCheck()){
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    162a:	21 ee       	ldi	r18, 0xE1	; 225
    162c:	42 2e       	mov	r4, r18
    162e:	24 e0       	ldi	r18, 0x04	; 4
    1630:	52 2e       	mov	r5, r18

int main(void){
	initAllSystems();
	init();
	while(1){
		loop();
    1632:	0e 94 42 08 	call	0x1084	; 0x1084 <loop>
 * For each message, it populates an ir_msg struct and calls handle_msg with it.
 */
static void checkMessages(void){
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
    1636:	80 91 8b 26 	lds	r24, 0x268B	; 0x80268b <userFacingMessagesOvf>
    163a:	81 11       	cpse	r24, r1
    163c:	a2 c0       	rjmp	.+324    	; 0x1782 <main+0x2b2>
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
    163e:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1640:	f8 94       	cli
		uint16_t crc;
		while(incomingMsgHead != NULL){
    1642:	00 91 bd 26 	lds	r16, 0x26BD	; 0x8026bd <incomingMsgHead>
    1646:	10 91 be 26 	lds	r17, 0x26BE	; 0x8026be <incomingMsgHead+0x1>
    164a:	01 15       	cp	r16, r1
    164c:	11 05       	cpc	r17, r1
    164e:	09 f4       	brne	.+2      	; 0x1652 <main+0x182>
    1650:	87 c0       	rjmp	.+270    	; 0x1760 <main+0x290>
    1652:	ad b6       	in	r10, 0x3d	; 61
    1654:	be b6       	in	r11, 0x3e	; 62
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
    1656:	d8 01       	movw	r26, r16
    1658:	1c 96       	adiw	r26, 0x0c	; 12
    165a:	4c 91       	ld	r20, X
    165c:	44 23       	and	r20, r20
    165e:	09 f4       	brne	.+2      	; 0x1662 <main+0x192>
    1660:	c2 c0       	rjmp	.+388    	; 0x17e6 <main+0x316>
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
			}
			char msgData[node->length];
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	8d b7       	in	r24, 0x3d	; 61
    1666:	9e b7       	in	r25, 0x3e	; 62
    1668:	84 1b       	sub	r24, r20
    166a:	95 0b       	sbc	r25, r21
    166c:	8d bf       	out	0x3d, r24	; 61
    166e:	9e bf       	out	0x3e, r25	; 62
    1670:	ad b7       	in	r26, 0x3d	; 61
    1672:	be b7       	in	r27, 0x3e	; 62
    1674:	11 96       	adiw	r26, 0x01	; 1
    1676:	7d 01       	movw	r14, r26
			memcpy(msgData, node->msg, node->length);
    1678:	f8 01       	movw	r30, r16
    167a:	60 85       	ldd	r22, Z+8	; 0x08
    167c:	71 85       	ldd	r23, Z+9	; 0x09
    167e:	cd 01       	movw	r24, r26
    1680:	0e 94 ae 4f 	call	0x9f5c	; 0x9f5c <memcpy>
			msgStruct.msg			= msgData;
    1684:	ef 82       	std	Y+7, r14	; 0x07
    1686:	f8 86       	std	Y+8, r15	; 0x08
			msgStruct.arrivalTime	= node->arrivalTime;
    1688:	f8 01       	movw	r30, r16
    168a:	80 81       	ld	r24, Z
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	a2 81       	ldd	r26, Z+2	; 0x02
    1690:	b3 81       	ldd	r27, Z+3	; 0x03
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	ab 83       	std	Y+3, r26	; 0x03
    1698:	bc 83       	std	Y+4, r27	; 0x04
			msgStruct.senderID		= node->senderID;
    169a:	84 81       	ldd	r24, Z+4	; 0x04
    169c:	95 81       	ldd	r25, Z+5	; 0x05
    169e:	8d 83       	std	Y+5, r24	; 0x05
    16a0:	9e 83       	std	Y+6, r25	; 0x06
			msgStruct.length		= node->length;
    16a2:	84 85       	ldd	r24, Z+12	; 0x0c
    16a4:	89 87       	std	Y+9, r24	; 0x09
			crc						= node->crc;
    16a6:	c6 80       	ldd	r12, Z+6	; 0x06
    16a8:	d7 80       	ldd	r13, Z+7	; 0x07
			//While we let user code handle the message we want interrupts to be back on. At this point everything relevant has been copied out of the buffer.
			NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){
    16aa:	ff b6       	in	r15, 0x3f	; 63

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    16ac:	78 94       	sei
				if(reprogramming)
    16ae:	80 91 a7 24 	lds	r24, 0x24A7	; 0x8024a7 <reprogramming>
    16b2:	88 23       	and	r24, r24
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <main+0x1e8>
    16b6:	71 c0       	rjmp	.+226    	; 0x179a <main+0x2ca>
				{
					setRGB(0,0,250);
    16b8:	4a ef       	ldi	r20, 0xFA	; 250
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
					//handle_serial_comm(&msgStruct);
					handle_reprogramming(&msgStruct);
    16c2:	ce 01       	movw	r24, r28
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <handle_reprogramming>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    16ca:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    16cc:	78 01       	movw	r14, r16
				else handleMsg(&msgStruct);
			}
			
			MsgNode* tmp = node;
			MsgNode* deleteMe;
			while(tmp->next !=NULL){
    16ce:	d7 01       	movw	r26, r14
    16d0:	1a 96       	adiw	r26, 0x0a	; 10
    16d2:	ed 91       	ld	r30, X+
    16d4:	fc 91       	ld	r31, X
    16d6:	1b 97       	sbiw	r26, 0x0b	; 11
    16d8:	30 97       	sbiw	r30, 0x00	; 0
    16da:	d1 f0       	breq	.+52     	; 0x1710 <main+0x240>
				uint8_t crcMatches = (tmp->next->crc == crc);
				uint8_t closeTimes = (abs((int32_t)(tmp->next->arrivalTime) - (int32_t)(msgStruct.arrivalTime))) < 30;
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	29 81       	ldd	r18, Y+1	; 0x01
    16e2:	3a 81       	ldd	r19, Y+2	; 0x02
    16e4:	82 1b       	sub	r24, r18
    16e6:	93 0b       	sbc	r25, r19
    16e8:	83 3e       	cpi	r24, 0xE3	; 227
    16ea:	2f ef       	ldi	r18, 0xFF	; 255
    16ec:	92 07       	cpc	r25, r18
    16ee:	44 f0       	brlt	.+16     	; 0x1700 <main+0x230>
    16f0:	4e 97       	sbiw	r24, 0x1e	; 30
    16f2:	34 f4       	brge	.+12     	; 0x1700 <main+0x230>
				if(crcMatches && closeTimes){
    16f4:	86 81       	ldd	r24, Z+6	; 0x06
    16f6:	97 81       	ldd	r25, Z+7	; 0x07
    16f8:	c8 16       	cp	r12, r24
    16fa:	d9 06       	cpc	r13, r25
    16fc:	09 f4       	brne	.+2      	; 0x1700 <main+0x230>
    16fe:	52 c0       	rjmp	.+164    	; 0x17a4 <main+0x2d4>
    1700:	7f 01       	movw	r14, r30
				else handleMsg(&msgStruct);
			}
			
			MsgNode* tmp = node;
			MsgNode* deleteMe;
			while(tmp->next !=NULL){
    1702:	d7 01       	movw	r26, r14
    1704:	1a 96       	adiw	r26, 0x0a	; 10
    1706:	ed 91       	ld	r30, X+
    1708:	fc 91       	ld	r31, X
    170a:	1b 97       	sbiw	r26, 0x0b	; 11
    170c:	30 97       	sbiw	r30, 0x00	; 0
    170e:	31 f7       	brne	.-52     	; 0x16dc <main+0x20c>
				}else{
					tmp = tmp->next;
				}

			}
			incomingMsgHead = (volatile MsgNode*)(node->next);
    1710:	f8 01       	movw	r30, r16
    1712:	82 85       	ldd	r24, Z+10	; 0x0a
    1714:	93 85       	ldd	r25, Z+11	; 0x0b
    1716:	80 93 bd 26 	sts	0x26BD, r24	; 0x8026bd <incomingMsgHead>
    171a:	90 93 be 26 	sts	0x26BE, r25	; 0x8026be <incomingMsgHead+0x1>
			numWaitingMsgs--;
    171e:	80 91 24 25 	lds	r24, 0x2524	; 0x802524 <numWaitingMsgs>
    1722:	81 50       	subi	r24, 0x01	; 1
    1724:	80 93 24 25 	sts	0x2524, r24	; 0x802524 <numWaitingMsgs>
			memoryConsumedByBuffer -= (sizeof(MsgNode) + msgStruct.length);
    1728:	80 91 ce 24 	lds	r24, 0x24CE	; 0x8024ce <memoryConsumedByBuffer>
    172c:	90 91 cf 24 	lds	r25, 0x24CF	; 0x8024cf <memoryConsumedByBuffer+0x1>
    1730:	0d 97       	sbiw	r24, 0x0d	; 13
    1732:	29 85       	ldd	r18, Y+9	; 0x09
    1734:	82 1b       	sub	r24, r18
    1736:	91 09       	sbc	r25, r1
    1738:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <memoryConsumedByBuffer>
    173c:	90 93 cf 24 	sts	0x24CF, r25	; 0x8024cf <memoryConsumedByBuffer+0x1>
	}
	return tmp;
}

inline void myFree(void* ptr){
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1740:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1742:	f8 94       	cli
		free(ptr);
    1744:	c8 01       	movw	r24, r16
    1746:	0e 94 ee 4c 	call	0x99dc	; 0x99dc <free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    174a:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    174c:	ad be       	out	0x3d, r10	; 61
    174e:	be be       	out	0x3e, r11	; 62
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
    1750:	00 91 bd 26 	lds	r16, 0x26BD	; 0x8026bd <incomingMsgHead>
    1754:	10 91 be 26 	lds	r17, 0x26BE	; 0x8026be <incomingMsgHead+0x1>
    1758:	01 15       	cp	r16, r1
    175a:	11 05       	cpc	r17, r1
    175c:	09 f0       	breq	.+2      	; 0x1760 <main+0x290>
    175e:	79 cf       	rjmp	.-270    	; 0x1652 <main+0x182>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1760:	7f be       	out	0x3f, r7	; 63
void removeTask(volatile Task_t*); // Removes a task from the queue
void printTaskQueue(void);

//Returns '1' if the next task to run is scheduled for more than 255ms in the past. If this occurs, call task_list_cleanup.
inline uint8_t taskListCheck(void){ 
	if(task_executing)	return 0;
    1762:	80 91 bc 26 	lds	r24, 0x26BC	; 0x8026bc <task_executing>
    1766:	88 23       	and	r24, r24
    1768:	09 f4       	brne	.+2      	; 0x176c <main+0x29c>
    176a:	46 c0       	rjmp	.+140    	; 0x17f8 <main+0x328>
		if(taskListCheck()){
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
			printTaskQueue();
			taskListCleanup();
		}
		delayMS(1);	
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>

int main(void){
	initAllSystems();
	init();
	while(1){
		loop();
    1774:	0e 94 42 08 	call	0x1084	; 0x1084 <loop>
 * For each message, it populates an ir_msg struct and calls handle_msg with it.
 */
static void checkMessages(void){
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
    1778:	80 91 8b 26 	lds	r24, 0x268B	; 0x80268b <userFacingMessagesOvf>
    177c:	88 23       	and	r24, r24
    177e:	09 f4       	brne	.+2      	; 0x1782 <main+0x2b2>
    1780:	5e cf       	rjmp	.-324    	; 0x163e <main+0x16e>
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
    1782:	26 e0       	ldi	r18, 0x06	; 6
    1784:	20 93 24 25 	sts	0x2524, r18	; 0x802524 <numWaitingMsgs>
		userFacingMessagesOvf=0;
    1788:	10 92 8b 26 	sts	0x268B, r1	; 0x80268b <userFacingMessagesOvf>
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    178c:	3f 92       	push	r3
    178e:	2f 92       	push	r2
    1790:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	52 cf       	rjmp	.-348    	; 0x163e <main+0x16e>
				{
					setRGB(0,0,250);
					//handle_serial_comm(&msgStruct);
					handle_reprogramming(&msgStruct);
				} 
				else handleMsg(&msgStruct);
    179a:	ce 01       	movw	r24, r28
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	0e 94 43 08 	call	0x1086	; 0x1086 <handleMsg>
    17a2:	93 cf       	rjmp	.-218    	; 0x16ca <main+0x1fa>
			while(tmp->next !=NULL){
				uint8_t crcMatches = (tmp->next->crc == crc);
				uint8_t closeTimes = (abs((int32_t)(tmp->next->arrivalTime) - (int32_t)(msgStruct.arrivalTime))) < 30;
				if(crcMatches && closeTimes){
					deleteMe = tmp->next;
					tmp->next = tmp->next->next;
    17a4:	82 85       	ldd	r24, Z+10	; 0x0a
    17a6:	93 85       	ldd	r25, Z+11	; 0x0b
    17a8:	d7 01       	movw	r26, r14
    17aa:	1a 96       	adiw	r26, 0x0a	; 10
    17ac:	8d 93       	st	X+, r24
    17ae:	9c 93       	st	X, r25
    17b0:	1b 97       	sbiw	r26, 0x0b	; 11
					memoryConsumedByBuffer -= (sizeof(MsgNode) + msgStruct.length);
    17b2:	80 91 ce 24 	lds	r24, 0x24CE	; 0x8024ce <memoryConsumedByBuffer>
    17b6:	90 91 cf 24 	lds	r25, 0x24CF	; 0x8024cf <memoryConsumedByBuffer+0x1>
    17ba:	0d 97       	sbiw	r24, 0x0d	; 13
    17bc:	29 85       	ldd	r18, Y+9	; 0x09
    17be:	82 1b       	sub	r24, r18
    17c0:	91 09       	sbc	r25, r1
    17c2:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <memoryConsumedByBuffer>
    17c6:	90 93 cf 24 	sts	0x24CF, r25	; 0x8024cf <memoryConsumedByBuffer+0x1>
					numWaitingMsgs--;
    17ca:	80 91 24 25 	lds	r24, 0x2524	; 0x802524 <numWaitingMsgs>
    17ce:	81 50       	subi	r24, 0x01	; 1
    17d0:	80 93 24 25 	sts	0x2524, r24	; 0x802524 <numWaitingMsgs>
	}
	return tmp;
}

inline void myFree(void* ptr){
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    17d4:	6f b6       	in	r6, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17d6:	f8 94       	cli
		free(ptr);
    17d8:	cf 01       	movw	r24, r30
    17da:	0e 94 ee 4c 	call	0x99dc	; 0x99dc <free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    17de:	6f be       	out	0x3f, r6	; 63
    __asm__ volatile ("" ::: "memory");
    17e0:	f7 01       	movw	r30, r14
    17e2:	7f 01       	movw	r14, r30
    17e4:	8e cf       	rjmp	.-228    	; 0x1702 <main+0x232>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    17e6:	9f 92       	push	r9
    17e8:	8f 92       	push	r8
    17ea:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    17ee:	f8 01       	movw	r30, r16
    17f0:	44 85       	ldd	r20, Z+12	; 0x0c
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	35 cf       	rjmp	.-406    	; 0x1662 <main+0x192>
	else				return (((int32_t)(getTime()-(task_list->scheduled_time)))>3000); 
    17f8:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    17fc:	e0 91 c1 26 	lds	r30, 0x26C1	; 0x8026c1 <task_list>
    1800:	f0 91 c2 26 	lds	r31, 0x26C2	; 0x8026c2 <task_list+0x1>
    1804:	00 81       	ld	r16, Z
    1806:	11 81       	ldd	r17, Z+1	; 0x01
    1808:	22 81       	ldd	r18, Z+2	; 0x02
    180a:	33 81       	ldd	r19, Z+3	; 0x03
	initAllSystems();
	init();
	while(1){
		loop();
		checkMessages();
		if(taskListCheck()){
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	80 1b       	sub	r24, r16
    1812:	91 0b       	sbc	r25, r17
    1814:	a2 0b       	sbc	r26, r18
    1816:	b3 0b       	sbc	r27, r19
    1818:	89 3b       	cpi	r24, 0xB9	; 185
    181a:	9b 40       	sbci	r25, 0x0B	; 11
    181c:	a1 05       	cpc	r26, r1
    181e:	b1 05       	cpc	r27, r1
    1820:	0c f4       	brge	.+2      	; 0x1824 <main+0x354>
    1822:	a4 cf       	rjmp	.-184    	; 0x176c <main+0x29c>
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    1824:	5f 92       	push	r5
    1826:	4f 92       	push	r4
    1828:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
			printTaskQueue();
    182c:	0e 94 43 34 	call	0x6886	; 0x6886 <printTaskQueue>
			taskListCleanup();
    1830:	0e 94 83 33 	call	0x6706	; 0x6706 <taskListCleanup>
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	99 cf       	rjmp	.-206    	; 0x176c <main+0x29c>

0000183a <EEPROM_read_byte>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    183a:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    183e:	27 fd       	sbrc	r18, 7
    1840:	fc cf       	rjmp	.-8      	; 0x183a <EEPROM_read_byte>

uint8_t EEPROM_read_byte(uint16_t addr)
{
        wait_for_nvm();
        
        NVM.ADDR0 = addr & 0xFF;
    1842:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    1846:	9f 71       	andi	r25, 0x1F	; 31
    1848:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
        NVM.ADDR2 = 0;
    184c:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    1850:	86 e0       	ldi	r24, 0x06	; 6
    1852:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    1856:	eb ec       	ldi	r30, 0xCB	; 203
    1858:	f1 e0       	ldi	r31, 0x01	; 1
    185a:	21 e0       	ldi	r18, 0x01	; 1
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	88 ed       	ldi	r24, 0xD8	; 216
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	84 bf       	out	0x34, r24	; 52
    1864:	20 83       	st	Z, r18
        NVM.ADDR2 = 0;
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();
        
        return NVM.DATA0;
    1866:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
}
    186a:	08 95       	ret

0000186c <EEPROM_write_byte>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    186c:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    1870:	27 fd       	sbrc	r18, 7
    1872:	fc cf       	rjmp	.-8      	; 0x186c <EEPROM_write_byte>

void flush_buffer(void)
{
        wait_for_nvm();
        
        if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    1874:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    1878:	21 ff       	sbrs	r18, 1
    187a:	0b c0       	rjmp	.+22     	; 0x1892 <EEPROM_write_byte+0x26>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    187c:	26 e3       	ldi	r18, 0x36	; 54
    187e:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    1882:	eb ec       	ldi	r30, 0xCB	; 203
    1884:	f1 e0       	ldi	r31, 0x01	; 1
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	28 ed       	ldi	r18, 0xD8	; 216
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	24 bf       	out	0x34, r18	; 52
    1890:	40 83       	st	Z, r20


void EEPROM_write_byte(uint16_t addr, uint8_t byte)
{
        flush_buffer();
        NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1892:	23 e3       	ldi	r18, 0x33	; 51
    1894:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
        
        NVM.ADDR0 = addr & 0xFF;
    1898:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    189c:	9f 71       	andi	r25, 0x1F	; 31
    189e:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
        NVM.ADDR2 = 0;
    18a2:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
        
        NVM.DATA0 = byte;
    18a6:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    18aa:	85 e3       	ldi	r24, 0x35	; 53
    18ac:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    18b0:	eb ec       	ldi	r30, 0xCB	; 203
    18b2:	f1 e0       	ldi	r31, 0x01	; 1
    18b4:	21 e0       	ldi	r18, 0x01	; 1
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	88 ed       	ldi	r24, 0xD8	; 216
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	84 bf       	out	0x34, r24	; 52
    18be:	20 83       	st	Z, r18
    18c0:	08 95       	ret

000018c2 <processObsQueue>:
}

void disableSyncBlink(){
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc;
	TCE0.CCA = 0;
	TCE0.CCB = 0;
    18c2:	bf 92       	push	r11
    18c4:	cf 92       	push	r12
    18c6:	df 92       	push	r13
    18c8:	ef 92       	push	r14
    18ca:	ff 92       	push	r15
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	e0 91 aa 24 	lds	r30, 0x24AA	; 0x8024aa <obsStart>
    18d8:	f0 91 ab 24 	lds	r31, 0x24AB	; 0x8024ab <obsStart+0x1>
    18dc:	c2 81       	ldd	r28, Z+2	; 0x02
    18de:	d3 81       	ldd	r29, Z+3	; 0x03
    18e0:	ec 17       	cp	r30, r28
    18e2:	fd 07       	cpc	r31, r29
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <processObsQueue+0x26>
    18e6:	6f c0       	rjmp	.+222    	; 0x19c6 <processObsQueue+0x104>
    18e8:	c1 2c       	mov	r12, r1
    18ea:	d1 2c       	mov	r13, r1
    18ec:	76 01       	movw	r14, r12
    18ee:	68 81       	ld	r22, Y
    18f0:	79 81       	ldd	r23, Y+1	; 0x01
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 b3 48 	call	0x9166	; 0x9166 <__floatunsisf>
    18fa:	a7 01       	movw	r20, r14
    18fc:	96 01       	movw	r18, r12
    18fe:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e7       	ldi	r20, 0x70	; 112
    1908:	52 e4       	ldi	r21, 0x42	; 66
    190a:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    190e:	9b 01       	movw	r18, r22
    1910:	ac 01       	movw	r20, r24
    1912:	c7 01       	movw	r24, r14
    1914:	b6 01       	movw	r22, r12
    1916:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    191a:	6b 01       	movw	r12, r22
    191c:	7c 01       	movw	r14, r24
    191e:	0a 81       	ldd	r16, Y+2	; 0x02
    1920:	1b 81       	ldd	r17, Y+3	; 0x03
    1922:	bf b6       	in	r11, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	ce 01       	movw	r24, r28
    1928:	0e 94 ee 4c 	call	0x99dc	; 0x99dc <free>
    192c:	bf be       	out	0x3f, r11	; 63
    192e:	e8 01       	movw	r28, r16
    1930:	80 91 aa 24 	lds	r24, 0x24AA	; 0x8024aa <obsStart>
    1934:	90 91 ab 24 	lds	r25, 0x24AB	; 0x8024ab <obsStart+0x1>
    1938:	80 17       	cp	r24, r16
    193a:	91 07       	cpc	r25, r17
    193c:	c1 f6       	brne	.-80     	; 0x18ee <processObsQueue+0x2c>
    193e:	c7 01       	movw	r24, r14
    1940:	b6 01       	movw	r22, r12
    1942:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    1946:	f8 01       	movw	r30, r16
    1948:	02 83       	std	Z+2, r16	; 0x02
    194a:	13 83       	std	Z+3, r17	; 0x03
    194c:	04 83       	std	Z+4, r16	; 0x04
    194e:	15 83       	std	Z+5, r17	; 0x05
    1950:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    1954:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    1958:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
    195c:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
    1960:	c8 17       	cp	r28, r24
    1962:	d9 07       	cpc	r29, r25
    1964:	a0 f0       	brcs	.+40     	; 0x198e <processObsQueue+0xcc>
    1966:	c6 0f       	add	r28, r22
    1968:	d7 1f       	adc	r29, r23
    196a:	c1 34       	cpi	r28, 0x41	; 65
    196c:	fd e9       	ldi	r31, 0x9D	; 157
    196e:	df 07       	cpc	r29, r31
    1970:	18 f5       	brcc	.+70     	; 0x19b8 <processObsQueue+0xf6>
    1972:	c0 93 20 0a 	sts	0x0A20, r28	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    1976:	d0 93 21 0a 	sts	0x0A21, r29	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	ff 90       	pop	r15
    1984:	ef 90       	pop	r14
    1986:	df 90       	pop	r13
    1988:	cf 90       	pop	r12
    198a:	bf 90       	pop	r11
    198c:	08 95       	ret
    198e:	c6 0f       	add	r28, r22
    1990:	d7 1f       	adc	r29, r23
    1992:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
    1996:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
    199a:	8c 17       	cp	r24, r28
    199c:	9d 07       	cpc	r25, r29
    199e:	28 f7       	brcc	.-54     	; 0x196a <processObsQueue+0xa8>
    19a0:	40 91 0e 23 	lds	r20, 0x230E	; 0x80230e <ffsync_blink_prev_b>
    19a4:	60 91 0f 23 	lds	r22, 0x230F	; 0x80230f <ffsync_blink_prev_g>
    19a8:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <ffsync_blink_prev_r>
    19ac:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    19b0:	c1 34       	cpi	r28, 0x41	; 65
    19b2:	fd e9       	ldi	r31, 0x9D	; 157
    19b4:	df 07       	cpc	r29, r31
    19b6:	e8 f2       	brcs	.-70     	; 0x1972 <processObsQueue+0xb0>
    19b8:	80 e4       	ldi	r24, 0x40	; 64
    19ba:	9d e9       	ldi	r25, 0x9D	; 157
    19bc:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    19c0:	90 93 21 0a 	sts	0x0A21, r25	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    19c4:	da cf       	rjmp	.-76     	; 0x197a <processObsQueue+0xb8>
    19c6:	8f 01       	movw	r16, r30
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	bc cf       	rjmp	.-136    	; 0x1946 <processObsQueue+0x84>

000019ce <sendPing>:
    19ce:	9c 01       	movw	r18, r24
    19d0:	40 e4       	ldi	r20, 0x40	; 64
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	8f e3       	ldi	r24, 0x3F	; 63
    19d8:	0e 94 9b 14 	call	0x2936	; 0x2936 <hpIrTargetedCmd>
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	41 e6       	ldi	r20, 0x61	; 97
    19e2:	5c e0       	ldi	r21, 0x0C	; 12
    19e4:	68 ec       	ldi	r22, 0xC8	; 200
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 f7 35 	call	0x6bee	; 0x6bee <scheduleTask>
    19f0:	08 95       	ret

000019f2 <__vector_49>:
}


ISR(TCE0_CCA_vect){
    19f2:	1f 92       	push	r1
    19f4:	0f 92       	push	r0
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	0f 92       	push	r0
    19fa:	11 24       	eor	r1, r1
    19fc:	0b b6       	in	r0, 0x3b	; 59
    19fe:	0f 92       	push	r0
    1a00:	2f 93       	push	r18
    1a02:	3f 93       	push	r19
    1a04:	4f 93       	push	r20
    1a06:	5f 93       	push	r21
    1a08:	6f 93       	push	r22
    1a0a:	7f 93       	push	r23
    1a0c:	8f 93       	push	r24
    1a0e:	9f 93       	push	r25
    1a10:	af 93       	push	r26
    1a12:	bf 93       	push	r27
    1a14:	ef 93       	push	r30
    1a16:	ff 93       	push	r31
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    1a18:	e0 e4       	ldi	r30, 0x40	; 64
    1a1a:	fa e0       	ldi	r31, 0x0A	; 10
    1a1c:	82 ad       	ldd	r24, Z+58	; 0x3a
    1a1e:	93 ad       	ldd	r25, Z+59	; 0x3b
	ffsync_blink_prev_r = getRedLED();
    1a20:	80 93 10 23 	sts	0x2310, r24	; 0x802310 <ffsync_blink_prev_r>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    1a24:	80 ad       	ldd	r24, Z+56	; 0x38
    1a26:	91 ad       	ldd	r25, Z+57	; 0x39
	ffsync_blink_prev_g = getGreenLED();
    1a28:	80 93 0f 23 	sts	0x230F, r24	; 0x80230f <ffsync_blink_prev_g>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    1a2c:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    1a30:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	ffsync_blink_prev_b = getBlueLED();
    1a34:	80 93 0e 23 	sts	0x230E, r24	; 0x80230e <ffsync_blink_prev_b>
	setRGB(ffsync_blink_r,ffsync_blink_g,ffsync_blink_b);
    1a38:	40 91 11 23 	lds	r20, 0x2311	; 0x802311 <ffsync_blink_b>
    1a3c:	60 91 12 23 	lds	r22, 0x2312	; 0x802312 <ffsync_blink_g>
    1a40:	80 91 13 23 	lds	r24, 0x2313	; 0x802313 <ffsync_blink_r>
    1a44:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
}
    1a48:	ff 91       	pop	r31
    1a4a:	ef 91       	pop	r30
    1a4c:	bf 91       	pop	r27
    1a4e:	af 91       	pop	r26
    1a50:	9f 91       	pop	r25
    1a52:	8f 91       	pop	r24
    1a54:	7f 91       	pop	r23
    1a56:	6f 91       	pop	r22
    1a58:	5f 91       	pop	r21
    1a5a:	4f 91       	pop	r20
    1a5c:	3f 91       	pop	r19
    1a5e:	2f 91       	pop	r18
    1a60:	0f 90       	pop	r0
    1a62:	0b be       	out	0x3b, r0	; 59
    1a64:	0f 90       	pop	r0
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	0f 90       	pop	r0
    1a6a:	1f 90       	pop	r1
    1a6c:	18 95       	reti

00001a6e <__vector_50>:

ISR(TCE0_CCB_vect){
    1a6e:	1f 92       	push	r1
    1a70:	0f 92       	push	r0
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	0f 92       	push	r0
    1a76:	11 24       	eor	r1, r1
    1a78:	0b b6       	in	r0, 0x3b	; 59
    1a7a:	0f 92       	push	r0
    1a7c:	2f 93       	push	r18
    1a7e:	3f 93       	push	r19
    1a80:	4f 93       	push	r20
    1a82:	5f 93       	push	r21
    1a84:	6f 93       	push	r22
    1a86:	7f 93       	push	r23
    1a88:	8f 93       	push	r24
    1a8a:	9f 93       	push	r25
    1a8c:	af 93       	push	r26
    1a8e:	bf 93       	push	r27
    1a90:	ef 93       	push	r30
    1a92:	ff 93       	push	r31
	setRGB(ffsync_blink_prev_r, ffsync_blink_prev_g, ffsync_blink_prev_b);	
    1a94:	40 91 0e 23 	lds	r20, 0x230E	; 0x80230e <ffsync_blink_prev_b>
    1a98:	60 91 0f 23 	lds	r22, 0x230F	; 0x80230f <ffsync_blink_prev_g>
    1a9c:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <ffsync_blink_prev_r>
    1aa0:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
}
    1aa4:	ff 91       	pop	r31
    1aa6:	ef 91       	pop	r30
    1aa8:	bf 91       	pop	r27
    1aaa:	af 91       	pop	r26
    1aac:	9f 91       	pop	r25
    1aae:	8f 91       	pop	r24
    1ab0:	7f 91       	pop	r23
    1ab2:	6f 91       	pop	r22
    1ab4:	5f 91       	pop	r21
    1ab6:	4f 91       	pop	r20
    1ab8:	3f 91       	pop	r19
    1aba:	2f 91       	pop	r18
    1abc:	0f 90       	pop	r0
    1abe:	0b be       	out	0x3b, r0	; 59
    1ac0:	0f 90       	pop	r0
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	0f 90       	pop	r0
    1ac6:	1f 90       	pop	r1
    1ac8:	18 95       	reti

00001aca <fireflySyncInit>:

void fireflySyncInit()
{
    1aca:	cf 93       	push	r28
	ffsync_blink_r = 255;
    1acc:	8f ef       	ldi	r24, 0xFF	; 255
    1ace:	80 93 13 23 	sts	0x2313, r24	; 0x802313 <ffsync_blink_r>
	ffsync_blink_g = 255;
    1ad2:	80 93 12 23 	sts	0x2312, r24	; 0x802312 <ffsync_blink_g>
	ffsync_blink_b = 255;
    1ad6:	80 93 11 23 	sts	0x2311, r24	; 0x802311 <ffsync_blink_b>
	ffsync_blink_dur = 200;
    1ada:	88 ec       	ldi	r24, 0xC8	; 200
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	80 93 0c 23 	sts	0x230C, r24	; 0x80230c <ffsync_blink_dur>
    1ae2:	90 93 0d 23 	sts	0x230D, r25	; 0x80230d <ffsync_blink_dur+0x1>
	
	ffsync_blink_phase_offset_ms = 0;

	EVSYS.CH0MUX = EVSYS_CHMUX_PRESCALER_4096_gc;
    1ae6:	8c e8       	ldi	r24, 0x8C	; 140
    1ae8:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	TCE0.CTRLA = TC_CLKSEL_EVCH0_gc;
    1aec:	e0 e0       	ldi	r30, 0x00	; 0
    1aee:	fa e0       	ldi	r31, 0x0A	; 10
    1af0:	88 e0       	ldi	r24, 0x08	; 8
    1af2:	80 83       	st	Z, r24
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;
    1af4:	11 82       	std	Z+1, r1	; 0x01

	TCE0.PER =  FFSYNC_FULL_PERIOD;
    1af6:	81 e4       	ldi	r24, 0x41	; 65
    1af8:	9d e9       	ldi	r25, 0x9D	; 157
    1afa:	86 a3       	std	Z+38, r24	; 0x26
    1afc:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	86 83       	std	Z+6, r24	; 0x06
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc;	
    1b02:	17 82       	std	Z+7, r1	; 0x07
	TCE0.CNT = 0;
    1b04:	10 a2       	std	Z+32, r1	; 0x20
    1b06:	11 a2       	std	Z+33, r1	; 0x21
		TCE0.CCA = 0;
    1b08:	10 a6       	std	Z+40, r1	; 0x28
    1b0a:	11 a6       	std	Z+41, r1	; 0x29
		TCE0.CCB = 0;
    1b0c:	12 a6       	std	Z+42, r1	; 0x2a
    1b0e:	13 a6       	std	Z+43, r1	; 0x2b
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1b10:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b12:	f8 94       	cli
		tmp = malloc(size);
    1b14:	86 e0       	ldi	r24, 0x06	; 6
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 56 4c 	call	0x98ac	; 0x98ac <malloc>
    1b1c:	fc 01       	movw	r30, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b1e:	cf bf       	out	0x3f, r28	; 63
	
	obsStart = (ObsQueue*)myMalloc(sizeof(ObsQueue));
    1b20:	80 93 aa 24 	sts	0x24AA, r24	; 0x8024aa <obsStart>
    1b24:	90 93 ab 24 	sts	0x24AB, r25	; 0x8024ab <obsStart+0x1>
	obsStart->obs = 0;
    1b28:	10 82       	st	Z, r1
    1b2a:	11 82       	std	Z+1, r1	; 0x01
	obsStart->next = obsStart;
    1b2c:	82 83       	std	Z+2, r24	; 0x02
    1b2e:	93 83       	std	Z+3, r25	; 0x03
	obsStart->prev = obsStart;
    1b30:	84 83       	std	Z+4, r24	; 0x04
    1b32:	95 83       	std	Z+5, r25	; 0x05
}
    1b34:	cf 91       	pop	r28
    1b36:	08 95       	ret

00001b38 <__vector_47>:

ISR(TCE0_OVF_vect){
    1b38:	1f 92       	push	r1
    1b3a:	0f 92       	push	r0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	0f 92       	push	r0
    1b40:	11 24       	eor	r1, r1
    1b42:	0b b6       	in	r0, 0x3b	; 59
    1b44:	0f 92       	push	r0
    1b46:	af 92       	push	r10
    1b48:	bf 92       	push	r11
    1b4a:	cf 92       	push	r12
    1b4c:	df 92       	push	r13
    1b4e:	ef 92       	push	r14
    1b50:	ff 92       	push	r15
    1b52:	1f 93       	push	r17
    1b54:	2f 93       	push	r18
    1b56:	3f 93       	push	r19
    1b58:	4f 93       	push	r20
    1b5a:	5f 93       	push	r21
    1b5c:	6f 93       	push	r22
    1b5e:	7f 93       	push	r23
    1b60:	8f 93       	push	r24
    1b62:	9f 93       	push	r25
    1b64:	af 93       	push	r26
    1b66:	bf 93       	push	r27
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	ef 93       	push	r30
    1b6e:	ff 93       	push	r31
	uint32_t randomWait = (randShort()%32)*20; //between 0 and 640ms
    1b70:	0e 94 ef 24 	call	0x49de	; 0x49de <randShort>
    1b74:	ec 01       	movw	r28, r24
}

static void updateRTC(void){
	int16_t change;
	uint16_t remainder;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1b76:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b78:	f8 94       	cli
	{
		uint32_t currTime = getTime();
    1b7a:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1b7e:	6b 01       	movw	r12, r22
    1b80:	7c 01       	movw	r14, r24
		uint16_t theCount = currTime&0xFFFF;		
		remainder = (int16_t)(currTime%FFSYNC_FULL_PERIOD_MS);
    1b82:	21 e2       	ldi	r18, 0x21	; 33
    1b84:	34 e1       	ldi	r19, 0x14	; 20
    1b86:	40 e0       	ldi	r20, 0x00	; 0
    1b88:	50 e0       	ldi	r21, 0x00	; 0
    1b8a:	0e 94 12 4c 	call	0x9824	; 0x9824 <__udivmodsi4>
		//printf("%u.\r\n", remainder);
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
    1b8e:	61 31       	cpi	r22, 0x11	; 17
    1b90:	2a e0       	ldi	r18, 0x0A	; 10
    1b92:	72 07       	cpc	r23, r18
    1b94:	08 f4       	brcc	.+2      	; 0x1b98 <__vector_47+0x60>
    1b96:	69 c0       	rjmp	.+210    	; 0x1c6a <__vector_47+0x132>
			change = FFSYNC_FULL_PERIOD_MS-((int16_t)remainder);
    1b98:	21 e2       	ldi	r18, 0x21	; 33
    1b9a:	34 e1       	ldi	r19, 0x14	; 20
    1b9c:	26 1b       	sub	r18, r22
    1b9e:	37 0b       	sbc	r19, r23
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
    1ba0:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    1ba4:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    1ba8:	82 1b       	sub	r24, r18
    1baa:	93 0b       	sbc	r25, r19
    1bac:	8c 15       	cp	r24, r12
    1bae:	9d 05       	cpc	r25, r13
    1bb0:	48 f4       	brcc	.+18     	; 0x1bc4 <__vector_47+0x8c>
    1bb2:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <rtc_epoch>
    1bb6:	90 91 9a 24 	lds	r25, 0x249A	; 0x80249a <rtc_epoch+0x1>
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	80 93 99 24 	sts	0x2499, r24	; 0x802499 <rtc_epoch>
    1bc0:	90 93 9a 24 	sts	0x249A, r25	; 0x80249a <rtc_epoch+0x1>
		}else{
			change = -(int16_t)remainder;
			if(theCount<remainder) rtc_epoch--;
		}
		while(RTC.STATUS & RTC_SYNCBUSY_bm);
    1bc4:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    1bc8:	80 fd       	sbrc	r24, 0
    1bca:	fc cf       	rjmp	.-8      	; 0x1bc4 <__vector_47+0x8c>
		RTC.CNT =  (theCount+change);
    1bcc:	c2 0e       	add	r12, r18
    1bce:	d3 1e       	adc	r13, r19
    1bd0:	c0 92 08 04 	sts	0x0408, r12	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    1bd4:	d0 92 09 04 	sts	0x0409, r13	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
		RTC.COMP = (RTC.COMP+change);
    1bd8:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    1bdc:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
    1be0:	82 0f       	add	r24, r18
    1be2:	93 1f       	adc	r25, r19
    1be4:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    1be8:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bec:	1f bf       	out	0x3f, r17	; 63
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    1bee:	c9 01       	movw	r24, r18
    1bf0:	37 fd       	sbrc	r19, 7
    1bf2:	4d c0       	rjmp	.+154    	; 0x1c8e <__vector_47+0x156>
    1bf4:	81 39       	cpi	r24, 0x91	; 145
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	4c f4       	brge	.+18     	; 0x1c0c <__vector_47+0xd4>
		if(change>0) OSC.RC32KCAL++;
    1bfa:	12 16       	cp	r1, r18
    1bfc:	13 06       	cpc	r1, r19
    1bfe:	0c f0       	brlt	.+2      	; 0x1c02 <__vector_47+0xca>
    1c00:	4b c0       	rjmp	.+150    	; 0x1c98 <__vector_47+0x160>
    1c02:	80 91 54 00 	lds	r24, 0x0054	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    1c06:	8f 5f       	subi	r24, 0xFF	; 255
    1c08:	80 93 54 00 	sts	0x0054, r24	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>

ISR(TCE0_OVF_vect){
	uint32_t randomWait = (randShort()%32)*20; //between 0 and 640ms
	//sendPing( (void*)((uint16_t)(get_time()&0xFFFF)));
	updateRTC();
	scheduleTask(randomWait, (arg_func_t)sendPing, (void*)((uint16_t)(getTime()&0xFFFF)));
    1c0c:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1c10:	9b 01       	movw	r18, r22
    1c12:	ac 01       	movw	r20, r24
    1c14:	cf 71       	andi	r28, 0x1F	; 31
    1c16:	dd 27       	eor	r29, r29
    1c18:	64 e1       	ldi	r22, 0x14	; 20
    1c1a:	6c 9f       	mul	r22, r28
    1c1c:	c0 01       	movw	r24, r0
    1c1e:	6d 9f       	mul	r22, r29
    1c20:	90 0d       	add	r25, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	bc 01       	movw	r22, r24
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	47 ee       	ldi	r20, 0xE7	; 231
    1c2c:	5c e0       	ldi	r21, 0x0C	; 12
    1c2e:	0e 94 f7 35 	call	0x6bee	; 0x6bee <scheduleTask>
	//printf("ovf @ %lu\r\n",get_time());
}
    1c32:	ff 91       	pop	r31
    1c34:	ef 91       	pop	r30
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	bf 91       	pop	r27
    1c3c:	af 91       	pop	r26
    1c3e:	9f 91       	pop	r25
    1c40:	8f 91       	pop	r24
    1c42:	7f 91       	pop	r23
    1c44:	6f 91       	pop	r22
    1c46:	5f 91       	pop	r21
    1c48:	4f 91       	pop	r20
    1c4a:	3f 91       	pop	r19
    1c4c:	2f 91       	pop	r18
    1c4e:	1f 91       	pop	r17
    1c50:	ff 90       	pop	r15
    1c52:	ef 90       	pop	r14
    1c54:	df 90       	pop	r13
    1c56:	cf 90       	pop	r12
    1c58:	bf 90       	pop	r11
    1c5a:	af 90       	pop	r10
    1c5c:	0f 90       	pop	r0
    1c5e:	0b be       	out	0x3b, r0	; 59
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	0f 90       	pop	r0
    1c66:	1f 90       	pop	r1
    1c68:	18 95       	reti
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
			change = FFSYNC_FULL_PERIOD_MS-((int16_t)remainder);
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
		}else{
			change = -(int16_t)remainder;
    1c6a:	22 27       	eor	r18, r18
    1c6c:	33 27       	eor	r19, r19
    1c6e:	26 1b       	sub	r18, r22
    1c70:	37 0b       	sbc	r19, r23
			if(theCount<remainder) rtc_epoch--;
    1c72:	c6 16       	cp	r12, r22
    1c74:	d7 06       	cpc	r13, r23
    1c76:	08 f0       	brcs	.+2      	; 0x1c7a <__vector_47+0x142>
    1c78:	a5 cf       	rjmp	.-182    	; 0x1bc4 <__vector_47+0x8c>
    1c7a:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <rtc_epoch>
    1c7e:	90 91 9a 24 	lds	r25, 0x249A	; 0x80249a <rtc_epoch+0x1>
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	80 93 99 24 	sts	0x2499, r24	; 0x802499 <rtc_epoch>
    1c88:	90 93 9a 24 	sts	0x249A, r25	; 0x80249a <rtc_epoch+0x1>
    1c8c:	9b cf       	rjmp	.-202    	; 0x1bc4 <__vector_47+0x8c>
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    1c8e:	88 27       	eor	r24, r24
    1c90:	99 27       	eor	r25, r25
    1c92:	82 1b       	sub	r24, r18
    1c94:	93 0b       	sbc	r25, r19
    1c96:	ae cf       	rjmp	.-164    	; 0x1bf4 <__vector_47+0xbc>
		if(change>0) OSC.RC32KCAL++;
		else if(abs(change)<FFSYNC_MAX_DEVIATION) OSC.RC32KCAL--;
    1c98:	4d 97       	sbiw	r24, 0x1d	; 29
    1c9a:	0c f0       	brlt	.+2      	; 0x1c9e <__vector_47+0x166>
    1c9c:	b7 cf       	rjmp	.-146    	; 0x1c0c <__vector_47+0xd4>
    1c9e:	80 91 54 00 	lds	r24, 0x0054	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    1ca2:	81 50       	subi	r24, 0x01	; 1
    1ca4:	80 93 54 00 	sts	0x0054, r24	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    1ca8:	b1 cf       	rjmp	.-158    	; 0x1c0c <__vector_47+0xd4>

00001caa <waitForTWIReady>:
	uint8_t printed = 0;
	while(!result){
		if((printed = waitForTWIReady(startTime, callerDescr))){
			result = TWI_MasterWriteRead(addr, writeData, bytesToWrite, bytesToRead);
		}else{
			return 0;
    1caa:	bf 92       	push	r11
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	6b 01       	movw	r12, r22
    1cbe:	7c 01       	movw	r14, r24
    1cc0:	04 2f       	mov	r16, r20
    1cc2:	b5 2e       	mov	r11, r21
    1cc4:	10 e0       	ldi	r17, 0x00	; 0
    1cc6:	cb e3       	ldi	r28, 0x3B	; 59
    1cc8:	d5 e0       	ldi	r29, 0x05	; 5
    1cca:	1a c0       	rjmp	.+52     	; 0x1d00 <waitForTWIReady+0x56>
    1ccc:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8c 19       	sub	r24, r12
    1cd6:	9d 09       	sbc	r25, r13
    1cd8:	ae 09       	sbc	r26, r14
    1cda:	bf 09       	sbc	r27, r15
    1cdc:	89 3e       	cpi	r24, 0xE9	; 233
    1cde:	93 40       	sbci	r25, 0x03	; 3
    1ce0:	a1 05       	cpc	r26, r1
    1ce2:	b1 05       	cpc	r27, r1
    1ce4:	00 f5       	brcc	.+64     	; 0x1d26 <waitForTWIReady+0x7c>
    1ce6:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8c 19       	sub	r24, r12
    1cf0:	9d 09       	sbc	r25, r13
    1cf2:	ae 09       	sbc	r26, r14
    1cf4:	bf 09       	sbc	r27, r15
    1cf6:	85 36       	cpi	r24, 0x65	; 101
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	a1 05       	cpc	r26, r1
    1cfc:	b1 05       	cpc	r27, r1
    1cfe:	08 f5       	brcc	.+66     	; 0x1d42 <waitForTWIReady+0x98>
    1d00:	e0 91 c9 26 	lds	r30, 0x26C9	; 0x8026c9 <twi>
    1d04:	f0 91 ca 26 	lds	r31, 0x26CA	; 0x8026ca <twi+0x1>
    1d08:	87 89       	ldd	r24, Z+23	; 0x17
    1d0a:	81 11       	cpse	r24, r1
    1d0c:	df cf       	rjmp	.-66     	; 0x1ccc <waitForTWIReady+0x22>
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	81 0f       	add	r24, r17
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	df 90       	pop	r13
    1d20:	cf 90       	pop	r12
    1d22:	bf 90       	pop	r11
    1d24:	08 95       	ret
    1d26:	bf 92       	push	r11
    1d28:	0f 93       	push	r16
    1d2a:	82 e5       	ldi	r24, 0x52	; 82
    1d2c:	95 e0       	ldi	r25, 0x05	; 5
    1d2e:	9f 93       	push	r25
    1d30:	8f 93       	push	r24
    1d32:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	e8 cf       	rjmp	.-48     	; 0x1d12 <waitForTWIReady+0x68>
    1d42:	11 23       	and	r17, r17
    1d44:	31 f0       	breq	.+12     	; 0x1d52 <waitForTWIReady+0xa8>
    1d46:	8a e0       	ldi	r24, 0x0A	; 10
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    1d4e:	11 e0       	ldi	r17, 0x01	; 1
    1d50:	d7 cf       	rjmp	.-82     	; 0x1d00 <waitForTWIReady+0x56>
    1d52:	bf 92       	push	r11
    1d54:	0f 93       	push	r16
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	ef cf       	rjmp	.-34     	; 0x1d46 <waitForTWIReady+0x9c>

00001d68 <TWI_MasterWriteRead.part.0>:
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	e0 91 c9 26 	lds	r30, 0x26C9	; 0x8026c9 <twi>
    1d70:	f0 91 ca 26 	lds	r31, 0x26CA	; 0x8026ca <twi+0x1>
    1d74:	97 89       	ldd	r25, Z+23	; 0x17
    1d76:	91 11       	cpse	r25, r1
    1d78:	30 c0       	rjmp	.+96     	; 0x1dda <TWI_MasterWriteRead.part.0+0x72>
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	97 8b       	std	Z+23, r25	; 0x17
    1d7e:	10 8e       	std	Z+24, r1	; 0x18
    1d80:	88 0f       	add	r24, r24
    1d82:	82 83       	std	Z+2, r24	; 0x02
    1d84:	44 23       	and	r20, r20
    1d86:	59 f0       	breq	.+22     	; 0x1d9e <TWI_MasterWriteRead.part.0+0x36>
    1d88:	db 01       	movw	r26, r22
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	3d 91       	ld	r19, X+
    1d90:	ef 01       	movw	r28, r30
    1d92:	c8 0f       	add	r28, r24
    1d94:	d9 1f       	adc	r29, r25
    1d96:	3b 83       	std	Y+3, r19	; 0x03
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	84 17       	cp	r24, r20
    1d9c:	c0 f3       	brcs	.-16     	; 0x1d8e <TWI_MasterWriteRead.part.0+0x26>
    1d9e:	43 8b       	std	Z+19, r20	; 0x13
    1da0:	24 8b       	std	Z+20, r18	; 0x14
    1da2:	15 8a       	std	Z+21, r1	; 0x15
    1da4:	16 8a       	std	Z+22, r1	; 0x16
    1da6:	83 89       	ldd	r24, Z+19	; 0x13
    1da8:	81 11       	cpse	r24, r1
    1daa:	0d c0       	rjmp	.+26     	; 0x1dc6 <TWI_MasterWriteRead.part.0+0x5e>
    1dac:	84 89       	ldd	r24, Z+20	; 0x14
    1dae:	88 23       	and	r24, r24
    1db0:	01 f1       	breq	.+64     	; 0x1df2 <TWI_MasterWriteRead.part.0+0x8a>
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	81 60       	ori	r24, 0x01	; 1
    1db6:	01 90       	ld	r0, Z+
    1db8:	f0 81       	ld	r31, Z
    1dba:	e0 2d       	mov	r30, r0
    1dbc:	86 83       	std	Z+6, r24	; 0x06
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	08 95       	ret
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	8e 7f       	andi	r24, 0xFE	; 254
    1dca:	01 90       	ld	r0, Z+
    1dcc:	f0 81       	ld	r31, Z
    1dce:	e0 2d       	mov	r30, r0
    1dd0:	86 83       	std	Z+6, r24	; 0x06
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	08 95       	ret
    1dda:	86 e2       	ldi	r24, 0x26	; 38
    1ddc:	95 e0       	ldi	r25, 0x05	; 5
    1dde:	9f 93       	push	r25
    1de0:	8f 93       	push	r24
    1de2:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	08 95       	ret
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <i2cInit>:
    1dfa:	e0 e2       	ldi	r30, 0x20	; 32
    1dfc:	f6 e0       	ldi	r31, 0x06	; 6
    1dfe:	80 e2       	ldi	r24, 0x20	; 32
    1e00:	82 83       	std	Z+2, r24	; 0x02
    1e02:	85 8b       	std	Z+21, r24	; 0x15
    1e04:	83 e0       	ldi	r24, 0x03	; 3
    1e06:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    1e0a:	ac ea       	ldi	r26, 0xAC	; 172
    1e0c:	b4 e2       	ldi	r27, 0x24	; 36
    1e0e:	a0 93 c9 26 	sts	0x26C9, r26	; 0x8026c9 <twi>
    1e12:	b0 93 ca 26 	sts	0x26CA, r27	; 0x8026ca <twi+0x1>
    1e16:	e0 ea       	ldi	r30, 0xA0	; 160
    1e18:	f4 e0       	ldi	r31, 0x04	; 4
    1e1a:	ed 93       	st	X+, r30
    1e1c:	fc 93       	st	X, r31
    1e1e:	88 ef       	ldi	r24, 0xF8	; 248
    1e20:	81 83       	std	Z+1, r24	; 0x01
    1e22:	8b e9       	ldi	r24, 0x9B	; 155
    1e24:	85 83       	std	Z+5, r24	; 0x05
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	84 83       	std	Z+4, r24	; 0x04
    1e2a:	08 95       	ret

00001e2c <twiWriteWrapper>:
    1e2c:	9f 92       	push	r9
    1e2e:	af 92       	push	r10
    1e30:	bf 92       	push	r11
    1e32:	cf 92       	push	r12
    1e34:	df 92       	push	r13
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	98 2e       	mov	r9, r24
    1e44:	5b 01       	movw	r10, r22
    1e46:	d4 2f       	mov	r29, r20
    1e48:	89 01       	movw	r16, r18
    1e4a:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    1e4e:	6b 01       	movw	r12, r22
    1e50:	7c 01       	movw	r14, r24
    1e52:	a8 01       	movw	r20, r16
    1e54:	c7 01       	movw	r24, r14
    1e56:	b6 01       	movw	r22, r12
    1e58:	0e 94 55 0e 	call	0x1caa	; 0x1caa <waitForTWIReady>
    1e5c:	c8 2f       	mov	r28, r24
    1e5e:	88 23       	and	r24, r24
    1e60:	c1 f0       	breq	.+48     	; 0x1e92 <twiWriteWrapper+0x66>
    1e62:	d9 30       	cpi	r29, 0x09	; 9
    1e64:	b0 f7       	brcc	.-20     	; 0x1e52 <twiWriteWrapper+0x26>
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	4d 2f       	mov	r20, r29
    1e6a:	b5 01       	movw	r22, r10
    1e6c:	89 2d       	mov	r24, r9
    1e6e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <TWI_MasterWriteRead.part.0>
    1e72:	88 23       	and	r24, r24
    1e74:	71 f3       	breq	.-36     	; 0x1e52 <twiWriteWrapper+0x26>
    1e76:	8c 0f       	add	r24, r28
    1e78:	81 50       	subi	r24, 0x01	; 1
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	df 90       	pop	r13
    1e88:	cf 90       	pop	r12
    1e8a:	bf 90       	pop	r11
    1e8c:	af 90       	pop	r10
    1e8e:	9f 90       	pop	r9
    1e90:	08 95       	ret
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	f2 cf       	rjmp	.-28     	; 0x1e7a <twiWriteWrapper+0x4e>

00001e96 <__vector_46>:
	twi->result = result;
	twi->status = TWIM_STATUS_READY;
}

ISR(TWIE_TWIM_vect)
{
    1e96:	1f 92       	push	r1
    1e98:	0f 92       	push	r0
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	0f 92       	push	r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	0b b6       	in	r0, 0x3b	; 59
    1ea2:	0f 92       	push	r0
    1ea4:	2f 93       	push	r18
    1ea6:	8f 93       	push	r24
    1ea8:	9f 93       	push	r25
    1eaa:	af 93       	push	r26
    1eac:	bf 93       	push	r27
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	ef 93       	push	r30
    1eb4:	ff 93       	push	r31
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
static void TWI_MasterInterruptHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1eb6:	e0 91 c9 26 	lds	r30, 0x26C9	; 0x8026c9 <twi>
    1eba:	f0 91 ca 26 	lds	r31, 0x26CA	; 0x8026ca <twi+0x1>
    1ebe:	a0 81       	ld	r26, Z
    1ec0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ec2:	14 96       	adiw	r26, 0x04	; 4
    1ec4:	8c 91       	ld	r24, X
    1ec6:	14 97       	sbiw	r26, 0x04	; 4
	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    1ec8:	98 2f       	mov	r25, r24
    1eca:	9c 70       	andi	r25, 0x0C	; 12
    1ecc:	41 f4       	brne	.+16     	; 0x1ede <__vector_46+0x48>

		TWI_MasterArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    1ece:	86 fd       	sbrc	r24, 6
    1ed0:	24 c0       	rjmp	.+72     	; 0x1f1a <__vector_46+0x84>
		TWI_MasterWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    1ed2:	87 fd       	sbrc	r24, 7
    1ed4:	3d c0       	rjmp	.+122    	; 0x1f50 <__vector_46+0xba>
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1ed6:	86 e0       	ldi	r24, 0x06	; 6
    1ed8:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1eda:	17 8a       	std	Z+23, r1	; 0x17
}

ISR(TWIE_TWIM_vect)
{
	TWI_MasterInterruptHandler();
    1edc:	0b c0       	rjmp	.+22     	; 0x1ef4 <__vector_46+0x5e>
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
static void TWI_MasterArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1ede:	14 96       	adiw	r26, 0x04	; 4
    1ee0:	8c 91       	ld	r24, X
    1ee2:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    1ee4:	82 fd       	sbrc	r24, 2
    1ee6:	16 c0       	rjmp	.+44     	; 0x1f14 <__vector_46+0x7e>
		twi->result = TWIM_RESULT_BUS_ERROR;
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    1ee8:	93 e0       	ldi	r25, 0x03	; 3
    1eea:	90 8f       	std	Z+24, r25	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    1eec:	88 60       	ori	r24, 0x08	; 8
    1eee:	14 96       	adiw	r26, 0x04	; 4
    1ef0:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    1ef2:	17 8a       	std	Z+23, r1	; 0x17
}

ISR(TWIE_TWIM_vect)
{
	TWI_MasterInterruptHandler();
    1ef4:	ff 91       	pop	r31
    1ef6:	ef 91       	pop	r30
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	bf 91       	pop	r27
    1efe:	af 91       	pop	r26
    1f00:	9f 91       	pop	r25
    1f02:	8f 91       	pop	r24
    1f04:	2f 91       	pop	r18
    1f06:	0f 90       	pop	r0
    1f08:	0b be       	out	0x3b, r0	; 59
    1f0a:	0f 90       	pop	r0
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	0f 90       	pop	r0
    1f10:	1f 90       	pop	r1
    1f12:	18 95       	reti
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
		twi->result = TWIM_RESULT_BUS_ERROR;
    1f14:	94 e0       	ldi	r25, 0x04	; 4
    1f16:	90 8f       	std	Z+24, r25	; 0x18
    1f18:	e9 cf       	rjmp	.-46     	; 0x1eec <__vector_46+0x56>
 *  \param twi The TWI_Master_t struct instance.
 */
static void TWI_MasterWriteHandler()
{
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    1f1a:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
    1f1c:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    1f1e:	14 96       	adiw	r26, 0x04	; 4
    1f20:	8c 91       	ld	r24, X
    1f22:	14 97       	sbiw	r26, 0x04	; 4
    1f24:	84 fd       	sbrc	r24, 4
    1f26:	0d c0       	rjmp	.+26     	; 0x1f42 <__vector_46+0xac>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		twi->result = TWIM_RESULT_NACK_RECEIVED;
		twi->status = TWIM_STATUS_READY;
	}
	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    1f28:	85 89       	ldd	r24, Z+21	; 0x15
    1f2a:	89 17       	cp	r24, r25
    1f2c:	50 f1       	brcs	.+84     	; 0x1f82 <__vector_46+0xec>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    1f2e:	86 89       	ldd	r24, Z+22	; 0x16
    1f30:	82 17       	cp	r24, r18
    1f32:	d8 f1       	brcs	.+118    	; 0x1faa <__vector_46+0x114>
		twi->interface->MASTER.ADDR = readAddress;
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	13 96       	adiw	r26, 0x03	; 3
    1f38:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1f3e:	17 8a       	std	Z+23, r1	; 0x17
    1f40:	d9 cf       	rjmp	.-78     	; 0x1ef4 <__vector_46+0x5e>
	uint8_t bytesToWrite  = twi->bytesToWrite;
	uint8_t bytesToRead   = twi->bytesToRead;

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	13 96       	adiw	r26, 0x03	; 3
    1f46:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    1f48:	85 e0       	ldi	r24, 0x05	; 5
    1f4a:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
    1f4c:	17 8a       	std	Z+23, r1	; 0x17
    1f4e:	d2 cf       	rjmp	.-92     	; 0x1ef4 <__vector_46+0x5e>
 *  \param twi The TWI_Master_t struct instance.
 */
static void TWI_MasterReadHandler()
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    1f50:	86 89       	ldd	r24, Z+22	; 0x16
    1f52:	88 30       	cpi	r24, 0x08	; 8
    1f54:	08 f5       	brcc	.+66     	; 0x1f98 <__vector_46+0x102>
		uint8_t data = twi->interface->MASTER.DATA;
    1f56:	17 96       	adiw	r26, 0x07	; 7
    1f58:	8c 91       	ld	r24, X
    1f5a:	17 97       	sbiw	r26, 0x07	; 7
		twi->readData[twi->bytesRead] = data;
    1f5c:	96 89       	ldd	r25, Z+22	; 0x16
    1f5e:	ef 01       	movw	r28, r30
    1f60:	c9 0f       	add	r28, r25
    1f62:	d1 1d       	adc	r29, r1
    1f64:	8b 87       	std	Y+11, r24	; 0x0b
		twi->bytesRead++;
    1f66:	86 89       	ldd	r24, Z+22	; 0x16
    1f68:	8f 5f       	subi	r24, 0xFF	; 255
    1f6a:	86 8b       	std	Z+22, r24	; 0x16
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    1f6c:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    1f6e:	86 89       	ldd	r24, Z+22	; 0x16
    1f70:	89 17       	cp	r24, r25
    1f72:	00 f1       	brcs	.+64     	; 0x1fb4 <__vector_46+0x11e>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    1f74:	87 e0       	ldi	r24, 0x07	; 7
    1f76:	13 96       	adiw	r26, 0x03	; 3
    1f78:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1f7e:	17 8a       	std	Z+23, r1	; 0x17
    1f80:	b9 cf       	rjmp	.-142    	; 0x1ef4 <__vector_46+0x5e>
		twi->result = TWIM_RESULT_NACK_RECEIVED;
		twi->status = TWIM_STATUS_READY;
	}
	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
		uint8_t data = twi->writeData[twi->bytesWritten];
    1f82:	85 89       	ldd	r24, Z+21	; 0x15
    1f84:	ef 01       	movw	r28, r30
    1f86:	c8 0f       	add	r28, r24
    1f88:	d1 1d       	adc	r29, r1
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    1f8c:	17 96       	adiw	r26, 0x07	; 7
    1f8e:	8c 93       	st	X, r24
		++twi->bytesWritten;
    1f90:	85 89       	ldd	r24, Z+21	; 0x15
    1f92:	8f 5f       	subi	r24, 0xFF	; 255
    1f94:	85 8b       	std	Z+21, r24	; 0x15
    1f96:	ae cf       	rjmp	.-164    	; 0x1ef4 <__vector_46+0x5e>
		twi->bytesRead++;
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1f98:	83 e0       	ldi	r24, 0x03	; 3
    1f9a:	13 96       	adiw	r26, 0x03	; 3
    1f9c:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1f9e:	82 e0       	ldi	r24, 0x02	; 2
    1fa0:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1fa2:	17 8a       	std	Z+23, r1	; 0x17
    1fa4:	a0 81       	ld	r26, Z
    1fa6:	b1 81       	ldd	r27, Z+1	; 0x01
    1fa8:	e1 cf       	rjmp	.-62     	; 0x1f6c <__vector_46+0xd6>

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
		uint8_t readAddress = twi->address | 0x01;
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    1fae:	16 96       	adiw	r26, 0x06	; 6
    1fb0:	8c 93       	st	X, r24
    1fb2:	a0 cf       	rjmp	.-192    	; 0x1ef4 <__vector_46+0x5e>
	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	13 96       	adiw	r26, 0x03	; 3
    1fb8:	8c 93       	st	X, r24
    1fba:	9c cf       	rjmp	.-200    	; 0x1ef4 <__vector_46+0x5e>

00001fbc <irTransmitComplete>:
    send_msg(dirs, data, dataLength, 1);
	return 1;
}

uint8_t hpIrCmd(uint8_t dirs, char *data, uint8_t dataLength){
	return all_hp_ir_cmds(dirs, data, dataLength, 0);
    1fbc:	4f b7       	in	r20, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	e0 e0       	ldi	r30, 0x00	; 0
    1fc2:	fb e0       	ldi	r31, 0x0B	; 11
    1fc4:	31 81       	ldd	r19, Z+1	; 0x01
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	dc 01       	movw	r26, r24
    1fca:	ab 5c       	subi	r26, 0xCB	; 203
    1fcc:	be 4d       	sbci	r27, 0xDE	; 222
    1fce:	2c 91       	ld	r18, X
    1fd0:	20 95       	com	r18
    1fd2:	23 23       	and	r18, r19
    1fd4:	21 83       	std	Z+1, r18	; 0x01
    1fd6:	28 e3       	ldi	r18, 0x38	; 56
    1fd8:	28 9f       	mul	r18, r24
    1fda:	f0 01       	movw	r30, r0
    1fdc:	29 9f       	mul	r18, r25
    1fde:	f0 0d       	add	r31, r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	e9 5d       	subi	r30, 0xD9	; 217
    1fe4:	fa 4d       	sbci	r31, 0xDA	; 218
    1fe6:	17 aa       	std	Z+55, r1	; 0x37
    1fe8:	16 aa       	std	Z+54, r1	; 0x36
    1fea:	12 86       	std	Z+10, r1	; 0x0a
    1fec:	13 86       	std	Z+11, r1	; 0x0b
    1fee:	10 86       	std	Z+8, r1	; 0x08
    1ff0:	11 86       	std	Z+9, r1	; 0x09
    1ff2:	16 82       	std	Z+6, r1	; 0x06
    1ff4:	17 82       	std	Z+7, r1	; 0x07
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	ea 5f       	subi	r30, 0xFA	; 250
    1ffe:	ff 4d       	sbci	r31, 0xDF	; 223
    2000:	01 90       	ld	r0, Z+
    2002:	f0 81       	ld	r31, Z
    2004:	e0 2d       	mov	r30, r0
    2006:	81 81       	ldd	r24, Z+1	; 0x01
    2008:	80 64       	ori	r24, 0x40	; 64
    200a:	81 83       	std	Z+1, r24	; 0x01
    200c:	84 81       	ldd	r24, Z+4	; 0x04
    200e:	80 61       	ori	r24, 0x10	; 16
    2010:	84 83       	std	Z+4, r24	; 0x04
    2012:	4f bf       	out	0x3f, r20	; 63
    2014:	08 95       	ret

00002016 <handleCmdWrapper>:
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	0d b7       	in	r16, 0x3d	; 61
    2028:	1e b7       	in	r17, 0x3e	; 62
    202a:	80 91 55 23 	lds	r24, 0x2355	; 0x802355 <cmdLength>
    202e:	90 91 56 23 	lds	r25, 0x2356	; 0x802356 <cmdLength+0x1>
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	2d b7       	in	r18, 0x3d	; 61
    2036:	3e b7       	in	r19, 0x3e	; 62
    2038:	28 1b       	sub	r18, r24
    203a:	39 0b       	sbc	r19, r25
    203c:	2d bf       	out	0x3d, r18	; 61
    203e:	3e bf       	out	0x3e, r19	; 62
    2040:	8d b7       	in	r24, 0x3d	; 61
    2042:	9e b7       	in	r25, 0x3e	; 62
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	7c 01       	movw	r14, r24
    2048:	40 91 55 23 	lds	r20, 0x2355	; 0x802355 <cmdLength>
    204c:	50 91 56 23 	lds	r21, 0x2356	; 0x802356 <cmdLength+0x1>
    2050:	4f 5f       	subi	r20, 0xFF	; 255
    2052:	5f 4f       	sbci	r21, 0xFF	; 255
    2054:	65 e1       	ldi	r22, 0x15	; 21
    2056:	73 e2       	ldi	r23, 0x23	; 35
    2058:	0e 94 ae 4f 	call	0x9f5c	; 0x9f5c <memcpy>
    205c:	60 91 55 23 	lds	r22, 0x2355	; 0x802355 <cmdLength>
    2060:	70 91 56 23 	lds	r23, 0x2356	; 0x802356 <cmdLength+0x1>
    2064:	c7 01       	movw	r24, r14
    2066:	0e 94 36 39 	call	0x726c	; 0x726c <handleSerialCommand>
    206a:	8f b7       	in	r24, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	10 92 58 23 	sts	0x2358, r1	; 0x802358 <processingCmdFlag>
    2072:	8f bf       	out	0x3f, r24	; 63
    2074:	0d bf       	out	0x3d, r16	; 61
    2076:	1e bf       	out	0x3e, r17	; 62
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	ff 90       	pop	r15
    2082:	ef 90       	pop	r14
    2084:	08 95       	ret

00002086 <irTransmit>:
    2086:	8f 92       	push	r8
    2088:	9f 92       	push	r9
    208a:	af 92       	push	r10
    208c:	bf 92       	push	r11
    208e:	cf 92       	push	r12
    2090:	df 92       	push	r13
    2092:	ef 92       	push	r14
    2094:	ff 92       	push	r15
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
    209e:	c8 2f       	mov	r28, r24
    20a0:	d0 e0       	ldi	r29, 0x00	; 0
    20a2:	98 e3       	ldi	r25, 0x38	; 56
    20a4:	89 9f       	mul	r24, r25
    20a6:	d0 01       	movw	r26, r0
    20a8:	11 24       	eor	r1, r1
    20aa:	a9 5d       	subi	r26, 0xD9	; 217
    20ac:	ba 4d       	sbci	r27, 0xDA	; 218
    20ae:	1a 96       	adiw	r26, 0x0a	; 10
    20b0:	ed 91       	ld	r30, X+
    20b2:	fc 91       	ld	r31, X
    20b4:	1b 97       	sbiw	r26, 0x0b	; 11
    20b6:	e7 30       	cpi	r30, 0x07	; 7
    20b8:	f1 05       	cpc	r31, r1
    20ba:	08 f4       	brcc	.+2      	; 0x20be <irTransmit+0x38>
    20bc:	50 c0       	rjmp	.+160    	; 0x215e <irTransmit+0xd8>
    20be:	1a 96       	adiw	r26, 0x0a	; 10
    20c0:	8d 91       	ld	r24, X+
    20c2:	9c 91       	ld	r25, X
    20c4:	1b 97       	sbiw	r26, 0x0b	; 11
    20c6:	07 97       	sbiw	r24, 0x07	; 7
    20c8:	a8 0f       	add	r26, r24
    20ca:	b9 1f       	adc	r27, r25
    20cc:	1e 96       	adiw	r26, 0x0e	; 14
    20ce:	8c 91       	ld	r24, X
    20d0:	80 93 14 23 	sts	0x2314, r24	; 0x802314 <next_byte>
    20d4:	fe 01       	movw	r30, r28
    20d6:	ee 0f       	add	r30, r30
    20d8:	ff 1f       	adc	r31, r31
    20da:	ea 5f       	subi	r30, 0xFA	; 250
    20dc:	ff 4d       	sbci	r31, 0xDF	; 223
    20de:	a0 81       	ld	r26, Z
    20e0:	b1 81       	ldd	r27, Z+1	; 0x01
    20e2:	80 91 14 23 	lds	r24, 0x2314	; 0x802314 <next_byte>
    20e6:	8c 93       	st	X, r24
    20e8:	88 e3       	ldi	r24, 0x38	; 56
    20ea:	8c 9f       	mul	r24, r28
    20ec:	f0 01       	movw	r30, r0
    20ee:	8d 9f       	mul	r24, r29
    20f0:	f0 0d       	add	r31, r0
    20f2:	11 24       	eor	r1, r1
    20f4:	e9 5d       	subi	r30, 0xD9	; 217
    20f6:	fa 4d       	sbci	r31, 0xDA	; 218
    20f8:	82 85       	ldd	r24, Z+10	; 0x0a
    20fa:	93 85       	ldd	r25, Z+11	; 0x0b
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	82 87       	std	Z+10, r24	; 0x0a
    2100:	93 87       	std	Z+11, r25	; 0x0b
    2102:	22 85       	ldd	r18, Z+10	; 0x0a
    2104:	33 85       	ldd	r19, Z+11	; 0x0b
    2106:	86 a9       	ldd	r24, Z+54	; 0x36
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	07 96       	adiw	r24, 0x07	; 7
    210c:	28 17       	cp	r18, r24
    210e:	39 07       	cpc	r19, r25
    2110:	c8 f0       	brcs	.+50     	; 0x2144 <irTransmit+0xbe>
    2112:	14 82       	std	Z+4, r1	; 0x04
    2114:	15 82       	std	Z+5, r1	; 0x05
    2116:	16 82       	std	Z+6, r1	; 0x06
    2118:	17 82       	std	Z+7, r1	; 0x07
    211a:	10 86       	std	Z+8, r1	; 0x08
    211c:	11 86       	std	Z+9, r1	; 0x09
    211e:	12 86       	std	Z+10, r1	; 0x0a
    2120:	13 86       	std	Z+11, r1	; 0x0b
    2122:	14 86       	std	Z+12, r1	; 0x0c
    2124:	15 86       	std	Z+13, r1	; 0x0d
    2126:	16 aa       	std	Z+54, r1	; 0x36
    2128:	17 aa       	std	Z+55, r1	; 0x37
    212a:	14 96       	adiw	r26, 0x04	; 4
    212c:	8c 91       	ld	r24, X
    212e:	14 97       	sbiw	r26, 0x04	; 4
    2130:	80 61       	ori	r24, 0x10	; 16
    2132:	14 96       	adiw	r26, 0x04	; 4
    2134:	8c 93       	st	X, r24
    2136:	14 97       	sbiw	r26, 0x04	; 4
    2138:	13 96       	adiw	r26, 0x03	; 3
    213a:	8c 91       	ld	r24, X
    213c:	13 97       	sbiw	r26, 0x03	; 3
    213e:	8c 7f       	andi	r24, 0xFC	; 252
    2140:	13 96       	adiw	r26, 0x03	; 3
    2142:	8c 93       	st	X, r24
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	ff 90       	pop	r15
    214e:	ef 90       	pop	r14
    2150:	df 90       	pop	r13
    2152:	cf 90       	pop	r12
    2154:	bf 90       	pop	r11
    2156:	af 90       	pop	r10
    2158:	9f 90       	pop	r9
    215a:	8f 90       	pop	r8
    215c:	08 95       	ret
    215e:	88 27       	eor	r24, r24
    2160:	e2 50       	subi	r30, 0x02	; 2
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	8f 4f       	sbci	r24, 0xFF	; 255
    2166:	0c 94 34 4c 	jmp	0x9868	; 0x9868 <__tablejump2__>
    216a:	88 e3       	ldi	r24, 0x38	; 56
    216c:	8c 9f       	mul	r24, r28
    216e:	f0 01       	movw	r30, r0
    2170:	8d 9f       	mul	r24, r29
    2172:	f0 0d       	add	r31, r0
    2174:	11 24       	eor	r1, r1
    2176:	e9 5d       	subi	r30, 0xD9	; 217
    2178:	fa 4d       	sbci	r31, 0xDA	; 218
    217a:	80 85       	ldd	r24, Z+8	; 0x08
    217c:	91 85       	ldd	r25, Z+9	; 0x09
    217e:	90 93 14 23 	sts	0x2314, r25	; 0x802314 <next_byte>
    2182:	a8 cf       	rjmp	.-176    	; 0x20d4 <irTransmit+0x4e>
    2184:	88 e3       	ldi	r24, 0x38	; 56
    2186:	8c 9f       	mul	r24, r28
    2188:	80 01       	movw	r16, r0
    218a:	8d 9f       	mul	r24, r29
    218c:	10 0d       	add	r17, r0
    218e:	11 24       	eor	r1, r1
    2190:	09 5d       	subi	r16, 0xD9	; 217
    2192:	1a 4d       	sbci	r17, 0xDA	; 218
    2194:	f8 01       	movw	r30, r16
    2196:	87 a9       	ldd	r24, Z+55	; 0x37
    2198:	86 fd       	sbrc	r24, 6
    219a:	5c c0       	rjmp	.+184    	; 0x2254 <irTransmit+0x1ce>
    219c:	88 e3       	ldi	r24, 0x38	; 56
    219e:	8c 9f       	mul	r24, r28
    21a0:	f0 01       	movw	r30, r0
    21a2:	8d 9f       	mul	r24, r29
    21a4:	f0 0d       	add	r31, r0
    21a6:	11 24       	eor	r1, r1
    21a8:	e9 5d       	subi	r30, 0xD9	; 217
    21aa:	fa 4d       	sbci	r31, 0xDA	; 218
    21ac:	80 85       	ldd	r24, Z+8	; 0x08
    21ae:	91 85       	ldd	r25, Z+9	; 0x09
    21b0:	80 93 14 23 	sts	0x2314, r24	; 0x802314 <next_byte>
    21b4:	8f cf       	rjmp	.-226    	; 0x20d4 <irTransmit+0x4e>
    21b6:	88 e3       	ldi	r24, 0x38	; 56
    21b8:	8c 9f       	mul	r24, r28
    21ba:	f0 01       	movw	r30, r0
    21bc:	8d 9f       	mul	r24, r29
    21be:	f0 0d       	add	r31, r0
    21c0:	11 24       	eor	r1, r1
    21c2:	e9 5d       	subi	r30, 0xD9	; 217
    21c4:	fa 4d       	sbci	r31, 0xDA	; 218
    21c6:	86 81       	ldd	r24, Z+6	; 0x06
    21c8:	97 81       	ldd	r25, Z+7	; 0x07
    21ca:	80 93 14 23 	sts	0x2314, r24	; 0x802314 <next_byte>
    21ce:	82 cf       	rjmp	.-252    	; 0x20d4 <irTransmit+0x4e>
    21d0:	88 e3       	ldi	r24, 0x38	; 56
    21d2:	8c 9f       	mul	r24, r28
    21d4:	f0 01       	movw	r30, r0
    21d6:	8d 9f       	mul	r24, r29
    21d8:	f0 0d       	add	r31, r0
    21da:	11 24       	eor	r1, r1
    21dc:	e9 5d       	subi	r30, 0xD9	; 217
    21de:	fa 4d       	sbci	r31, 0xDA	; 218
    21e0:	86 81       	ldd	r24, Z+6	; 0x06
    21e2:	97 81       	ldd	r25, Z+7	; 0x07
    21e4:	90 93 14 23 	sts	0x2314, r25	; 0x802314 <next_byte>
    21e8:	75 cf       	rjmp	.-278    	; 0x20d4 <irTransmit+0x4e>
    21ea:	88 e3       	ldi	r24, 0x38	; 56
    21ec:	8c 9f       	mul	r24, r28
    21ee:	f0 01       	movw	r30, r0
    21f0:	8d 9f       	mul	r24, r29
    21f2:	f0 0d       	add	r31, r0
    21f4:	11 24       	eor	r1, r1
    21f6:	e9 5d       	subi	r30, 0xD9	; 217
    21f8:	fa 4d       	sbci	r31, 0xDA	; 218
    21fa:	84 81       	ldd	r24, Z+4	; 0x04
    21fc:	95 81       	ldd	r25, Z+5	; 0x05
    21fe:	80 93 14 23 	sts	0x2314, r24	; 0x802314 <next_byte>
    2202:	68 cf       	rjmp	.-304    	; 0x20d4 <irTransmit+0x4e>
    2204:	88 e3       	ldi	r24, 0x38	; 56
    2206:	8c 9f       	mul	r24, r28
    2208:	f0 01       	movw	r30, r0
    220a:	8d 9f       	mul	r24, r29
    220c:	f0 0d       	add	r31, r0
    220e:	11 24       	eor	r1, r1
    2210:	e9 5d       	subi	r30, 0xD9	; 217
    2212:	fa 4d       	sbci	r31, 0xDA	; 218
    2214:	84 81       	ldd	r24, Z+4	; 0x04
    2216:	95 81       	ldd	r25, Z+5	; 0x05
    2218:	90 93 14 23 	sts	0x2314, r25	; 0x802314 <next_byte>
    221c:	5b cf       	rjmp	.-330    	; 0x20d4 <irTransmit+0x4e>
    221e:	88 e3       	ldi	r24, 0x38	; 56
    2220:	8c 9f       	mul	r24, r28
    2222:	f0 01       	movw	r30, r0
    2224:	8d 9f       	mul	r24, r29
    2226:	f0 0d       	add	r31, r0
    2228:	11 24       	eor	r1, r1
    222a:	e9 5d       	subi	r30, 0xD9	; 217
    222c:	fa 4d       	sbci	r31, 0xDA	; 218
    222e:	86 a9       	ldd	r24, Z+54	; 0x36
    2230:	8f 73       	andi	r24, 0x3F	; 63
    2232:	80 93 14 23 	sts	0x2314, r24	; 0x802314 <next_byte>
    2236:	87 a9       	ldd	r24, Z+55	; 0x37
    2238:	90 91 14 23 	lds	r25, 0x2314	; 0x802314 <next_byte>
    223c:	80 78       	andi	r24, 0x80	; 128
    223e:	89 2b       	or	r24, r25
    2240:	80 93 14 23 	sts	0x2314, r24	; 0x802314 <next_byte>
    2244:	87 a9       	ldd	r24, Z+55	; 0x37
    2246:	90 91 14 23 	lds	r25, 0x2314	; 0x802314 <next_byte>
    224a:	80 74       	andi	r24, 0x40	; 64
    224c:	89 2b       	or	r24, r25
    224e:	80 93 14 23 	sts	0x2314, r24	; 0x802314 <next_byte>
    2252:	40 cf       	rjmp	.-384    	; 0x20d4 <irTransmit+0x4e>
    2254:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    2258:	f8 01       	movw	r30, r16
    225a:	c0 84       	ldd	r12, Z+8	; 0x08
    225c:	d1 84       	ldd	r13, Z+9	; 0x09
    225e:	4b 01       	movw	r8, r22
    2260:	5c 01       	movw	r10, r24
    2262:	aa 24       	eor	r10, r10
    2264:	bb 24       	eor	r11, r11
    2266:	e1 2c       	mov	r14, r1
    2268:	f1 2c       	mov	r15, r1
    226a:	8c 14       	cp	r8, r12
    226c:	9d 04       	cpc	r9, r13
    226e:	ae 04       	cpc	r10, r14
    2270:	bf 04       	cpc	r11, r15
    2272:	a8 f0       	brcs	.+42     	; 0x229e <irTransmit+0x218>
    2274:	20 85       	ldd	r18, Z+8	; 0x08
    2276:	31 85       	ldd	r19, Z+9	; 0x09
    2278:	62 1b       	sub	r22, r18
    227a:	73 0b       	sbc	r23, r19
    227c:	61 33       	cpi	r22, 0x31	; 49
    227e:	f5 e7       	ldi	r31, 0x75	; 117
    2280:	7f 07       	cpc	r23, r31
    2282:	10 f0       	brcs	.+4      	; 0x2288 <irTransmit+0x202>
    2284:	60 ef       	ldi	r22, 0xF0	; 240
    2286:	7f ef       	ldi	r23, 0xFF	; 255
    2288:	88 e3       	ldi	r24, 0x38	; 56
    228a:	8c 9f       	mul	r24, r28
    228c:	f0 01       	movw	r30, r0
    228e:	8d 9f       	mul	r24, r29
    2290:	f0 0d       	add	r31, r0
    2292:	11 24       	eor	r1, r1
    2294:	e9 5d       	subi	r30, 0xD9	; 217
    2296:	fa 4d       	sbci	r31, 0xDA	; 218
    2298:	60 87       	std	Z+8, r22	; 0x08
    229a:	71 87       	std	Z+9, r23	; 0x09
    229c:	7f cf       	rjmp	.-258    	; 0x219c <irTransmit+0x116>
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	f2 cf       	rjmp	.-28     	; 0x2288 <irTransmit+0x202>

000022a4 <irCommInit>:
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	94 e4       	ldi	r25, 0x44	; 68
    22aa:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    22ae:	84 e0       	ldi	r24, 0x04	; 4
    22b0:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    22b4:	90 93 82 06 	sts	0x0682, r25	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
    22b8:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    22bc:	8f b7       	in	r24, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	9f e3       	ldi	r25, 0x3F	; 63
    22c2:	90 93 a8 24 	sts	0x24A8, r25	; 0x8024a8 <hpIrBlock_bm>
    22c6:	8f bf       	out	0x3f, r24	; 63
    22c8:	c6 e0       	ldi	r28, 0x06	; 6
    22ca:	d0 e2       	ldi	r29, 0x20	; 32
    22cc:	62 e1       	ldi	r22, 0x12	; 18
    22ce:	70 e2       	ldi	r23, 0x20	; 32
    22d0:	de 01       	movw	r26, r28
    22d2:	48 e2       	ldi	r20, 0x28	; 40
    22d4:	33 e0       	ldi	r19, 0x03	; 3
    22d6:	20 e7       	ldi	r18, 0x70	; 112
    22d8:	92 e0       	ldi	r25, 0x02	; 2
    22da:	ed 91       	ld	r30, X+
    22dc:	fd 91       	ld	r31, X+
    22de:	43 83       	std	Z+3, r20	; 0x03
    22e0:	35 83       	std	Z+5, r19	; 0x05
    22e2:	26 83       	std	Z+6, r18	; 0x06
    22e4:	97 83       	std	Z+7, r25	; 0x07
    22e6:	84 81       	ldd	r24, Z+4	; 0x04
    22e8:	80 61       	ori	r24, 0x10	; 16
    22ea:	84 83       	std	Z+4, r24	; 0x04
    22ec:	84 81       	ldd	r24, Z+4	; 0x04
    22ee:	88 60       	ori	r24, 0x08	; 8
    22f0:	84 83       	std	Z+4, r24	; 0x04
    22f2:	6a 17       	cp	r22, r26
    22f4:	7b 07       	cpc	r23, r27
    22f6:	89 f7       	brne	.-30     	; 0x22da <irCommInit+0x36>
    22f8:	10 92 cb 26 	sts	0x26CB, r1	; 0x8026cb <cmdArrivalTime>
    22fc:	10 92 cc 26 	sts	0x26CC, r1	; 0x8026cc <cmdArrivalTime+0x1>
    2300:	10 92 cd 26 	sts	0x26CD, r1	; 0x8026cd <cmdArrivalTime+0x2>
    2304:	10 92 ce 26 	sts	0x26CE, r1	; 0x8026ce <cmdArrivalTime+0x3>
    2308:	10 92 24 25 	sts	0x2524, r1	; 0x802524 <numWaitingMsgs>
    230c:	10 92 8b 26 	sts	0x268B, r1	; 0x80268b <userFacingMessagesOvf>
    2310:	10 92 58 23 	sts	0x2358, r1	; 0x802358 <processingCmdFlag>
    2314:	10 92 57 23 	sts	0x2357, r1	; 0x802357 <processingFFsyncFlag>
    2318:	10 92 bd 26 	sts	0x26BD, r1	; 0x8026bd <incomingMsgHead>
    231c:	10 92 be 26 	sts	0x26BE, r1	; 0x8026be <incomingMsgHead+0x1>
    2320:	10 92 ce 24 	sts	0x24CE, r1	; 0x8024ce <memoryConsumedByBuffer>
    2324:	10 92 cf 24 	sts	0x24CF, r1	; 0x8024cf <memoryConsumedByBuffer+0x1>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	38 e3       	ldi	r19, 0x38	; 56
    232e:	38 9f       	mul	r19, r24
    2330:	f0 01       	movw	r30, r0
    2332:	39 9f       	mul	r19, r25
    2334:	f0 0d       	add	r31, r0
    2336:	11 24       	eor	r1, r1
    2338:	e9 5d       	subi	r30, 0xD9	; 217
    233a:	fa 4d       	sbci	r31, 0xDA	; 218
    233c:	14 82       	std	Z+4, r1	; 0x04
    233e:	15 82       	std	Z+5, r1	; 0x05
    2340:	16 82       	std	Z+6, r1	; 0x06
    2342:	17 82       	std	Z+7, r1	; 0x07
    2344:	10 86       	std	Z+8, r1	; 0x08
    2346:	11 86       	std	Z+9, r1	; 0x09
    2348:	12 86       	std	Z+10, r1	; 0x0a
    234a:	13 86       	std	Z+11, r1	; 0x0b
    234c:	14 86       	std	Z+12, r1	; 0x0c
    234e:	15 86       	std	Z+13, r1	; 0x0d
    2350:	16 aa       	std	Z+54, r1	; 0x36
    2352:	17 aa       	std	Z+55, r1	; 0x37
    2354:	e9 91       	ld	r30, Y+
    2356:	f9 91       	ld	r31, Y+
    2358:	24 81       	ldd	r18, Z+4	; 0x04
    235a:	20 61       	ori	r18, 0x10	; 16
    235c:	24 83       	std	Z+4, r18	; 0x04
    235e:	01 96       	adiw	r24, 0x01	; 1
    2360:	86 30       	cpi	r24, 0x06	; 6
    2362:	91 05       	cpc	r25, r1
    2364:	21 f7       	brne	.-56     	; 0x232e <irCommInit+0x8a>
    2366:	8f b7       	in	r24, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	10 92 a8 24 	sts	0x24A8, r1	; 0x8024a8 <hpIrBlock_bm>
    236e:	8f bf       	out	0x3f, r24	; 63
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	08 95       	ret

00002376 <send_msg>:
    2376:	2f 92       	push	r2
    2378:	3f 92       	push	r3
    237a:	4f 92       	push	r4
    237c:	5f 92       	push	r5
    237e:	6f 92       	push	r6
    2380:	7f 92       	push	r7
    2382:	8f 92       	push	r8
    2384:	9f 92       	push	r9
    2386:	af 92       	push	r10
    2388:	bf 92       	push	r11
    238a:	cf 92       	push	r12
    238c:	df 92       	push	r13
    238e:	ef 92       	push	r14
    2390:	ff 92       	push	r15
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	e8 2e       	mov	r14, r24
    239c:	4b 01       	movw	r8, r22
    239e:	34 2e       	mov	r3, r20
    23a0:	22 2e       	mov	r2, r18
    23a2:	88 e2       	ldi	r24, 0x28	; 40
    23a4:	84 17       	cp	r24, r20
    23a6:	08 f4       	brcc	.+2      	; 0x23aa <send_msg+0x34>
    23a8:	bf c0       	rjmp	.+382    	; 0x2528 <send_msg+0x1b2>
    23aa:	60 90 97 24 	lds	r6, 0x2497	; 0x802497 <droplet_ID>
    23ae:	70 90 98 24 	lds	r7, 0x2498	; 0x802498 <droplet_ID+0x1>
    23b2:	f1 2c       	mov	r15, r1
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	97 01       	movw	r18, r14
    23ba:	08 2e       	mov	r0, r24
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <send_msg+0x4c>
    23be:	35 95       	asr	r19
    23c0:	27 95       	ror	r18
    23c2:	0a 94       	dec	r0
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <send_msg+0x48>
    23c6:	20 fd       	sbrc	r18, 0
    23c8:	b8 c0       	rjmp	.+368    	; 0x253a <send_msg+0x1c4>
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	86 30       	cpi	r24, 0x06	; 6
    23ce:	91 05       	cpc	r25, r1
    23d0:	99 f7       	brne	.-26     	; 0x23b8 <send_msg+0x42>
    23d2:	e3 01       	movw	r28, r6
    23d4:	33 20       	and	r3, r3
    23d6:	19 f1       	breq	.+70     	; 0x241e <send_msg+0xa8>
    23d8:	f4 01       	movw	r30, r8
    23da:	2f ef       	ldi	r18, 0xFF	; 255
    23dc:	23 0d       	add	r18, r3
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	2f 5f       	subi	r18, 0xFF	; 255
    23e2:	3f 4f       	sbci	r19, 0xFF	; 255
    23e4:	28 0d       	add	r18, r8
    23e6:	39 1d       	adc	r19, r9
    23e8:	81 91       	ld	r24, Z+
    23ea:	c8 27       	eor	r28, r24
    23ec:	8c 2f       	mov	r24, r28
    23ee:	82 95       	swap	r24
    23f0:	8c 27       	eor	r24, r28
    23f2:	08 2e       	mov	r0, r24
    23f4:	86 95       	lsr	r24
    23f6:	86 95       	lsr	r24
    23f8:	80 25       	eor	r24, r0
    23fa:	08 2e       	mov	r0, r24
    23fc:	86 95       	lsr	r24
    23fe:	80 25       	eor	r24, r0
    2400:	87 70       	andi	r24, 0x07	; 7
    2402:	0c 2e       	mov	r0, r28
    2404:	cd 2f       	mov	r28, r29
    2406:	86 95       	lsr	r24
    2408:	07 94       	ror	r0
    240a:	87 95       	ror	r24
    240c:	d0 2d       	mov	r29, r0
    240e:	c8 27       	eor	r28, r24
    2410:	06 94       	lsr	r0
    2412:	87 95       	ror	r24
    2414:	d0 25       	eor	r29, r0
    2416:	c8 27       	eor	r28, r24
    2418:	e2 17       	cp	r30, r18
    241a:	f3 07       	cpc	r31, r19
    241c:	29 f7       	brne	.-54     	; 0x23e8 <send_msg+0x72>
    241e:	85 e3       	ldi	r24, 0x35	; 53
    2420:	a8 2e       	mov	r10, r24
    2422:	85 e2       	ldi	r24, 0x25	; 37
    2424:	b8 2e       	mov	r11, r24
    2426:	95 e3       	ldi	r25, 0x35	; 53
    2428:	c9 2e       	mov	r12, r25
    242a:	91 e2       	ldi	r25, 0x21	; 33
    242c:	d9 2e       	mov	r13, r25
    242e:	00 e0       	ldi	r16, 0x00	; 0
    2430:	10 e0       	ldi	r17, 0x00	; 0
    2432:	43 2c       	mov	r4, r3
    2434:	51 2c       	mov	r5, r1
    2436:	0b c0       	rjmp	.+22     	; 0x244e <send_msg+0xd8>
    2438:	0f 5f       	subi	r16, 0xFF	; 255
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	f8 e3       	ldi	r31, 0x38	; 56
    243e:	af 0e       	add	r10, r31
    2440:	b1 1c       	adc	r11, r1
    2442:	8f ef       	ldi	r24, 0xFF	; 255
    2444:	c8 1a       	sub	r12, r24
    2446:	d8 0a       	sbc	r13, r24
    2448:	06 30       	cpi	r16, 0x06	; 6
    244a:	11 05       	cpc	r17, r1
    244c:	41 f1       	breq	.+80     	; 0x249e <send_msg+0x128>
    244e:	c7 01       	movw	r24, r14
    2450:	00 2e       	mov	r0, r16
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <send_msg+0xe2>
    2454:	95 95       	asr	r25
    2456:	87 95       	ror	r24
    2458:	0a 94       	dec	r0
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <send_msg+0xde>
    245c:	80 ff       	sbrs	r24, 0
    245e:	ec cf       	rjmp	.-40     	; 0x2438 <send_msg+0xc2>
    2460:	88 e3       	ldi	r24, 0x38	; 56
    2462:	80 9f       	mul	r24, r16
    2464:	f0 01       	movw	r30, r0
    2466:	81 9f       	mul	r24, r17
    2468:	f0 0d       	add	r31, r0
    246a:	11 24       	eor	r1, r1
    246c:	e9 5d       	subi	r30, 0xD9	; 217
    246e:	fa 4d       	sbci	r31, 0xDA	; 218
    2470:	87 a9       	ldd	r24, Z+55	; 0x37
    2472:	80 62       	ori	r24, 0x20	; 32
    2474:	87 ab       	std	Z+55, r24	; 0x37
    2476:	36 aa       	std	Z+54, r3	; 0x36
    2478:	c4 83       	std	Z+4, r28	; 0x04
    247a:	d5 83       	std	Z+5, r29	; 0x05
    247c:	12 86       	std	Z+10, r1	; 0x0a
    247e:	13 86       	std	Z+11, r1	; 0x0b
    2480:	66 82       	std	Z+6, r6	; 0x06
    2482:	77 82       	std	Z+7, r7	; 0x07
    2484:	a2 01       	movw	r20, r4
    2486:	b4 01       	movw	r22, r8
    2488:	c5 01       	movw	r24, r10
    248a:	0e 94 ae 4f 	call	0x9f5c	; 0x9f5c <memcpy>
    248e:	90 91 01 0b 	lds	r25, 0x0B01	; 0x800b01 <__TEXT_REGION_LENGTH__+0x700b01>
    2492:	f6 01       	movw	r30, r12
    2494:	80 81       	ld	r24, Z
    2496:	89 2b       	or	r24, r25
    2498:	80 93 01 0b 	sts	0x0B01, r24	; 0x800b01 <__TEXT_REGION_LENGTH__+0x700b01>
    249c:	cd cf       	rjmp	.-102    	; 0x2438 <send_msg+0xc2>
    249e:	e6 e0       	ldi	r30, 0x06	; 6
    24a0:	f0 e2       	ldi	r31, 0x20	; 32
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	48 e3       	ldi	r20, 0x38	; 56
    24a8:	08 c0       	rjmp	.+16     	; 0x24ba <send_msg+0x144>
    24aa:	23 60       	ori	r18, 0x03	; 3
    24ac:	13 96       	adiw	r26, 0x03	; 3
    24ae:	2c 93       	st	X, r18
    24b0:	01 96       	adiw	r24, 0x01	; 1
    24b2:	32 96       	adiw	r30, 0x02	; 2
    24b4:	86 30       	cpi	r24, 0x06	; 6
    24b6:	91 05       	cpc	r25, r1
    24b8:	21 f1       	breq	.+72     	; 0x2502 <send_msg+0x18c>
    24ba:	97 01       	movw	r18, r14
    24bc:	08 2e       	mov	r0, r24
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <send_msg+0x14e>
    24c0:	35 95       	asr	r19
    24c2:	27 95       	ror	r18
    24c4:	0a 94       	dec	r0
    24c6:	e2 f7       	brpl	.-8      	; 0x24c0 <send_msg+0x14a>
    24c8:	20 ff       	sbrs	r18, 0
    24ca:	f2 cf       	rjmp	.-28     	; 0x24b0 <send_msg+0x13a>
    24cc:	48 9f       	mul	r20, r24
    24ce:	d0 01       	movw	r26, r0
    24d0:	49 9f       	mul	r20, r25
    24d2:	b0 0d       	add	r27, r0
    24d4:	11 24       	eor	r1, r1
    24d6:	a9 5d       	subi	r26, 0xD9	; 217
    24d8:	ba 4d       	sbci	r27, 0xDA	; 218
    24da:	1d 92       	st	X+, r1
    24dc:	1d 92       	st	X+, r1
    24de:	1d 92       	st	X+, r1
    24e0:	1c 92       	st	X, r1
    24e2:	13 97       	sbiw	r26, 0x03	; 3
    24e4:	a0 81       	ld	r26, Z
    24e6:	b1 81       	ldd	r27, Z+1	; 0x01
    24e8:	13 96       	adiw	r26, 0x03	; 3
    24ea:	2c 91       	ld	r18, X
    24ec:	13 97       	sbiw	r26, 0x03	; 3
    24ee:	21 10       	cpse	r2, r1
    24f0:	dc cf       	rjmp	.-72     	; 0x24aa <send_msg+0x134>
    24f2:	22 60       	ori	r18, 0x02	; 2
    24f4:	13 96       	adiw	r26, 0x03	; 3
    24f6:	2c 93       	st	X, r18
    24f8:	01 96       	adiw	r24, 0x01	; 1
    24fa:	32 96       	adiw	r30, 0x02	; 2
    24fc:	86 30       	cpi	r24, 0x06	; 6
    24fe:	91 05       	cpc	r25, r1
    2500:	e1 f6       	brne	.-72     	; 0x24ba <send_msg+0x144>
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	1f 91       	pop	r17
    2508:	0f 91       	pop	r16
    250a:	ff 90       	pop	r15
    250c:	ef 90       	pop	r14
    250e:	df 90       	pop	r13
    2510:	cf 90       	pop	r12
    2512:	bf 90       	pop	r11
    2514:	af 90       	pop	r10
    2516:	9f 90       	pop	r9
    2518:	8f 90       	pop	r8
    251a:	7f 90       	pop	r7
    251c:	6f 90       	pop	r6
    251e:	5f 90       	pop	r5
    2520:	4f 90       	pop	r4
    2522:	3f 90       	pop	r3
    2524:	2f 90       	pop	r2
    2526:	08 95       	ret
    2528:	8c e8       	ldi	r24, 0x8C	; 140
    252a:	96 e0       	ldi	r25, 0x06	; 6
    252c:	9f 93       	push	r25
    252e:	8f 93       	push	r24
    2530:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	38 cf       	rjmp	.-400    	; 0x23aa <send_msg+0x34>
    253a:	28 e3       	ldi	r18, 0x38	; 56
    253c:	28 9f       	mul	r18, r24
    253e:	f0 01       	movw	r30, r0
    2540:	29 9f       	mul	r18, r25
    2542:	f0 0d       	add	r31, r0
    2544:	11 24       	eor	r1, r1
    2546:	e9 5d       	subi	r30, 0xD9	; 217
    2548:	fa 4d       	sbci	r31, 0xDA	; 218
    254a:	87 a9       	ldd	r24, Z+55	; 0x37
    254c:	80 7c       	andi	r24, 0xC0	; 192
    254e:	e3 01       	movw	r28, r6
    2550:	c8 27       	eor	r28, r24
    2552:	8c 2f       	mov	r24, r28
    2554:	82 95       	swap	r24
    2556:	8c 27       	eor	r24, r28
    2558:	08 2e       	mov	r0, r24
    255a:	86 95       	lsr	r24
    255c:	86 95       	lsr	r24
    255e:	80 25       	eor	r24, r0
    2560:	08 2e       	mov	r0, r24
    2562:	86 95       	lsr	r24
    2564:	80 25       	eor	r24, r0
    2566:	87 70       	andi	r24, 0x07	; 7
    2568:	0c 2e       	mov	r0, r28
    256a:	cd 2f       	mov	r28, r29
    256c:	86 95       	lsr	r24
    256e:	07 94       	ror	r0
    2570:	87 95       	ror	r24
    2572:	d0 2d       	mov	r29, r0
    2574:	c8 27       	eor	r28, r24
    2576:	06 94       	lsr	r0
    2578:	87 95       	ror	r24
    257a:	d0 25       	eor	r29, r0
    257c:	c8 27       	eor	r28, r24
    257e:	87 a9       	ldd	r24, Z+55	; 0x37
    2580:	86 fd       	sbrc	r24, 6
    2582:	28 cf       	rjmp	.-432    	; 0x23d4 <send_msg+0x5e>
    2584:	80 85       	ldd	r24, Z+8	; 0x08
    2586:	91 85       	ldd	r25, Z+9	; 0x09
    2588:	c8 27       	eor	r28, r24
    258a:	8c 2f       	mov	r24, r28
    258c:	82 95       	swap	r24
    258e:	8c 27       	eor	r24, r28
    2590:	08 2e       	mov	r0, r24
    2592:	86 95       	lsr	r24
    2594:	86 95       	lsr	r24
    2596:	80 25       	eor	r24, r0
    2598:	08 2e       	mov	r0, r24
    259a:	86 95       	lsr	r24
    259c:	80 25       	eor	r24, r0
    259e:	87 70       	andi	r24, 0x07	; 7
    25a0:	0c 2e       	mov	r0, r28
    25a2:	cd 2f       	mov	r28, r29
    25a4:	86 95       	lsr	r24
    25a6:	07 94       	ror	r0
    25a8:	87 95       	ror	r24
    25aa:	d0 2d       	mov	r29, r0
    25ac:	c8 27       	eor	r28, r24
    25ae:	06 94       	lsr	r0
    25b0:	87 95       	ror	r24
    25b2:	d0 25       	eor	r29, r0
    25b4:	c8 27       	eor	r28, r24
    25b6:	0e cf       	rjmp	.-484    	; 0x23d4 <send_msg+0x5e>

000025b8 <waitForTransmission>:
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	78 e3       	ldi	r23, 0x38	; 56
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	60 e0       	ldi	r22, 0x00	; 0
    25c2:	ac 01       	movw	r20, r24
    25c4:	02 2e       	mov	r0, r18
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <waitForTransmission+0x14>
    25c8:	55 95       	asr	r21
    25ca:	47 95       	ror	r20
    25cc:	0a 94       	dec	r0
    25ce:	e2 f7       	brpl	.-8      	; 0x25c8 <waitForTransmission+0x10>
    25d0:	40 ff       	sbrs	r20, 0
    25d2:	0a c0       	rjmp	.+20     	; 0x25e8 <waitForTransmission+0x30>
    25d4:	72 9f       	mul	r23, r18
    25d6:	f0 01       	movw	r30, r0
    25d8:	73 9f       	mul	r23, r19
    25da:	f0 0d       	add	r31, r0
    25dc:	11 24       	eor	r1, r1
    25de:	e9 5d       	subi	r30, 0xD9	; 217
    25e0:	fa 4d       	sbci	r31, 0xDA	; 218
    25e2:	47 a9       	ldd	r20, Z+55	; 0x37
    25e4:	45 fd       	sbrc	r20, 5
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	2f 5f       	subi	r18, 0xFF	; 255
    25ea:	3f 4f       	sbci	r19, 0xFF	; 255
    25ec:	26 30       	cpi	r18, 0x06	; 6
    25ee:	31 05       	cpc	r19, r1
    25f0:	41 f7       	brne	.-48     	; 0x25c2 <waitForTransmission+0xa>
    25f2:	ef e1       	ldi	r30, 0x1F	; 31
    25f4:	f3 e0       	ldi	r31, 0x03	; 3
    25f6:	31 97       	sbiw	r30, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <waitForTransmission+0x3e>
    25fa:	00 c0       	rjmp	.+0      	; 0x25fc <waitForTransmission+0x44>
    25fc:	00 00       	nop
    25fe:	61 11       	cpse	r22, r1
    2600:	dd cf       	rjmp	.-70     	; 0x25bc <waitForTransmission+0x4>
    2602:	08 95       	ret

00002604 <irIsBusy>:
    2604:	4f 92       	push	r4
    2606:	5f 92       	push	r5
    2608:	6f 92       	push	r6
    260a:	7f 92       	push	r7
    260c:	8f 92       	push	r8
    260e:	9f 92       	push	r9
    2610:	af 92       	push	r10
    2612:	bf 92       	push	r11
    2614:	ff 92       	push	r15
    2616:	0f 93       	push	r16
    2618:	1f 93       	push	r17
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	c8 2f       	mov	r28, r24
    2620:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    2624:	20 91 a8 24 	lds	r18, 0x24A8	; 0x8024a8 <hpIrBlock_bm>
    2628:	2c 23       	and	r18, r28
    262a:	09 f0       	breq	.+2      	; 0x262e <irIsBusy+0x2a>
    262c:	59 c0       	rjmp	.+178    	; 0x26e0 <irIsBusy+0xdc>
    262e:	d0 e0       	ldi	r29, 0x00	; 0
    2630:	ac 2f       	mov	r26, r28
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	10 e0       	ldi	r17, 0x00	; 0
    263a:	00 e0       	ldi	r16, 0x00	; 0
    263c:	c0 e0       	ldi	r28, 0x00	; 0
    263e:	48 e3       	ldi	r20, 0x38	; 56
    2640:	f4 2e       	mov	r15, r20
    2642:	ad 01       	movw	r20, r26
    2644:	02 2e       	mov	r0, r18
    2646:	02 c0       	rjmp	.+4      	; 0x264c <irIsBusy+0x48>
    2648:	55 95       	asr	r21
    264a:	47 95       	ror	r20
    264c:	0a 94       	dec	r0
    264e:	e2 f7       	brpl	.-8      	; 0x2648 <irIsBusy+0x44>
    2650:	40 ff       	sbrs	r20, 0
    2652:	2f c0       	rjmp	.+94     	; 0x26b2 <irIsBusy+0xae>
    2654:	f2 9e       	mul	r15, r18
    2656:	f0 01       	movw	r30, r0
    2658:	f3 9e       	mul	r15, r19
    265a:	f0 0d       	add	r31, r0
    265c:	11 24       	eor	r1, r1
    265e:	e9 5d       	subi	r30, 0xD9	; 217
    2660:	fa 4d       	sbci	r31, 0xDA	; 218
    2662:	47 a9       	ldd	r20, Z+55	; 0x37
    2664:	46 ff       	sbrs	r20, 6
    2666:	03 c0       	rjmp	.+6      	; 0x266e <irIsBusy+0x6a>
    2668:	47 a9       	ldd	r20, Z+55	; 0x37
    266a:	47 fd       	sbrc	r20, 7
    266c:	3b c0       	rjmp	.+118    	; 0x26e4 <irIsBusy+0xe0>
    266e:	f2 9e       	mul	r15, r18
    2670:	f0 01       	movw	r30, r0
    2672:	f3 9e       	mul	r15, r19
    2674:	f0 0d       	add	r31, r0
    2676:	11 24       	eor	r1, r1
    2678:	e9 5d       	subi	r30, 0xD9	; 217
    267a:	fa 4d       	sbci	r31, 0xDA	; 218
    267c:	47 a9       	ldd	r20, Z+55	; 0x37
    267e:	45 fd       	sbrc	r20, 5
    2680:	c2 e0       	ldi	r28, 0x02	; 2
    2682:	f2 9e       	mul	r15, r18
    2684:	f0 01       	movw	r30, r0
    2686:	f3 9e       	mul	r15, r19
    2688:	f0 0d       	add	r31, r0
    268a:	11 24       	eor	r1, r1
    268c:	e9 5d       	subi	r30, 0xD9	; 217
    268e:	fa 4d       	sbci	r31, 0xDA	; 218
    2690:	80 80       	ld	r8, Z
    2692:	91 80       	ldd	r9, Z+1	; 0x01
    2694:	a2 80       	ldd	r10, Z+2	; 0x02
    2696:	b3 80       	ldd	r11, Z+3	; 0x03
    2698:	2b 01       	movw	r4, r22
    269a:	3c 01       	movw	r6, r24
    269c:	48 18       	sub	r4, r8
    269e:	59 08       	sbc	r5, r9
    26a0:	6a 08       	sbc	r6, r10
    26a2:	7b 08       	sbc	r7, r11
    26a4:	40 e1       	ldi	r20, 0x10	; 16
    26a6:	44 16       	cp	r4, r20
    26a8:	51 04       	cpc	r5, r1
    26aa:	61 04       	cpc	r6, r1
    26ac:	71 04       	cpc	r7, r1
    26ae:	08 f4       	brcc	.+2      	; 0x26b2 <irIsBusy+0xae>
    26b0:	01 e0       	ldi	r16, 0x01	; 1
    26b2:	2f 5f       	subi	r18, 0xFF	; 255
    26b4:	3f 4f       	sbci	r19, 0xFF	; 255
    26b6:	26 30       	cpi	r18, 0x06	; 6
    26b8:	31 05       	cpc	r19, r1
    26ba:	19 f6       	brne	.-122    	; 0x2642 <irIsBusy+0x3e>
    26bc:	80 2f       	mov	r24, r16
    26be:	81 2b       	or	r24, r17
    26c0:	8d 2b       	or	r24, r29
    26c2:	8c 2b       	or	r24, r28
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	ff 90       	pop	r15
    26ce:	bf 90       	pop	r11
    26d0:	af 90       	pop	r10
    26d2:	9f 90       	pop	r9
    26d4:	8f 90       	pop	r8
    26d6:	7f 90       	pop	r7
    26d8:	6f 90       	pop	r6
    26da:	5f 90       	pop	r5
    26dc:	4f 90       	pop	r4
    26de:	08 95       	ret
    26e0:	d8 e0       	ldi	r29, 0x08	; 8
    26e2:	a6 cf       	rjmp	.-180    	; 0x2630 <irIsBusy+0x2c>
    26e4:	14 e0       	ldi	r17, 0x04	; 4
    26e6:	c3 cf       	rjmp	.-122    	; 0x266e <irIsBusy+0x6a>

000026e8 <all_ir_sends>:
    26e8:	df 92       	push	r13
    26ea:	ef 92       	push	r14
    26ec:	ff 92       	push	r15
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	d8 2e       	mov	r13, r24
    26f8:	eb 01       	movw	r28, r22
    26fa:	14 2f       	mov	r17, r20
    26fc:	79 01       	movw	r14, r18
    26fe:	0e 94 02 13 	call	0x2604	; 0x2604 <irIsBusy>
    2702:	82 30       	cpi	r24, 0x02	; 2
    2704:	08 f4       	brcc	.+2      	; 0x2708 <all_ir_sends+0x20>
    2706:	5e c0       	rjmp	.+188    	; 0x27c4 <all_ir_sends+0xdc>
    2708:	1f 92       	push	r1
    270a:	8f 93       	push	r24
    270c:	84 e6       	ldi	r24, 0x64	; 100
    270e:	96 e0       	ldi	r25, 0x06	; 6
    2710:	9f 93       	push	r25
    2712:	8f 93       	push	r24
    2714:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	11 23       	and	r17, r17
    2722:	09 f4       	brne	.+2      	; 0x2726 <all_ir_sends+0x3e>
    2724:	42 c0       	rjmp	.+132    	; 0x27aa <all_ir_sends+0xc2>
    2726:	88 81       	ld	r24, Y
    2728:	80 52       	subi	r24, 0x20	; 32
    272a:	8f 35       	cpi	r24, 0x5F	; 95
    272c:	08 f0       	brcs	.+2      	; 0x2730 <all_ir_sends+0x48>
    272e:	8d c0       	rjmp	.+282    	; 0x284a <all_ir_sends+0x162>
    2730:	fe 01       	movw	r30, r28
    2732:	31 96       	adiw	r30, 0x01	; 1
    2734:	11 50       	subi	r17, 0x01	; 1
    2736:	21 2f       	mov	r18, r17
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	2f 5f       	subi	r18, 0xFF	; 255
    273c:	3f 4f       	sbci	r19, 0xFF	; 255
    273e:	2c 0f       	add	r18, r28
    2740:	3d 1f       	adc	r19, r29
    2742:	05 c0       	rjmp	.+10     	; 0x274e <all_ir_sends+0x66>
    2744:	81 91       	ld	r24, Z+
    2746:	80 52       	subi	r24, 0x20	; 32
    2748:	8f 35       	cpi	r24, 0x5F	; 95
    274a:	08 f0       	brcs	.+2      	; 0x274e <all_ir_sends+0x66>
    274c:	7c c0       	rjmp	.+248    	; 0x2846 <all_ir_sends+0x15e>
    274e:	e2 17       	cp	r30, r18
    2750:	f3 07       	cpc	r31, r19
    2752:	c1 f7       	brne	.-16     	; 0x2744 <all_ir_sends+0x5c>
    2754:	dd 24       	eor	r13, r13
    2756:	d3 94       	inc	r13
    2758:	01 2f       	mov	r16, r17
    275a:	10 e0       	ldi	r17, 0x00	; 0
    275c:	0f 5f       	subi	r16, 0xFF	; 255
    275e:	1f 4f       	sbci	r17, 0xFF	; 255
    2760:	0c 0f       	add	r16, r28
    2762:	1d 1f       	adc	r17, r29
    2764:	8e e2       	ldi	r24, 0x2E	; 46
    2766:	e8 2e       	mov	r14, r24
    2768:	81 e2       	ldi	r24, 0x21	; 33
    276a:	f8 2e       	mov	r15, r24
    276c:	12 c0       	rjmp	.+36     	; 0x2792 <all_ir_sends+0xaa>
    276e:	28 2f       	mov	r18, r24
    2770:	08 2e       	mov	r0, r24
    2772:	00 0c       	add	r0, r0
    2774:	33 0b       	sbc	r19, r19
    2776:	3f 93       	push	r19
    2778:	8f 93       	push	r24
    277a:	ff 92       	push	r15
    277c:	ef 92       	push	r14
    277e:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	21 96       	adiw	r28, 0x01	; 1
    278c:	c0 17       	cp	r28, r16
    278e:	d1 07       	cpc	r29, r17
    2790:	61 f0       	breq	.+24     	; 0x27aa <all_ir_sends+0xc2>
    2792:	88 81       	ld	r24, Y
    2794:	dd 20       	and	r13, r13
    2796:	59 f3       	breq	.-42     	; 0x276e <all_ir_sends+0x86>
    2798:	08 2e       	mov	r0, r24
    279a:	00 0c       	add	r0, r0
    279c:	99 0b       	sbc	r25, r25
    279e:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <putchar>
    27a2:	21 96       	adiw	r28, 0x01	; 1
    27a4:	c0 17       	cp	r28, r16
    27a6:	d1 07       	cpc	r29, r17
    27a8:	a1 f7       	brne	.-24     	; 0x2792 <all_ir_sends+0xaa>
    27aa:	8f eb       	ldi	r24, 0xBF	; 191
    27ac:	90 e2       	ldi	r25, 0x20	; 32
    27ae:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <puts>
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	df 90       	pop	r13
    27c2:	08 95       	ret
    27c4:	4d 2d       	mov	r20, r13
    27c6:	50 e0       	ldi	r21, 0x00	; 0
    27c8:	a6 e0       	ldi	r26, 0x06	; 6
    27ca:	b0 e2       	ldi	r27, 0x20	; 32
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	68 e3       	ldi	r22, 0x38	; 56
    27d2:	71 e0       	ldi	r23, 0x01	; 1
    27d4:	9a 01       	movw	r18, r20
    27d6:	08 2e       	mov	r0, r24
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <all_ir_sends+0xf6>
    27da:	35 95       	asr	r19
    27dc:	27 95       	ror	r18
    27de:	0a 94       	dec	r0
    27e0:	e2 f7       	brpl	.-8      	; 0x27da <all_ir_sends+0xf2>
    27e2:	20 ff       	sbrs	r18, 0
    27e4:	1c c0       	rjmp	.+56     	; 0x281e <all_ir_sends+0x136>
    27e6:	ed 91       	ld	r30, X+
    27e8:	fc 91       	ld	r31, X
    27ea:	11 97       	sbiw	r26, 0x01	; 1
    27ec:	24 81       	ldd	r18, Z+4	; 0x04
    27ee:	2f 7e       	andi	r18, 0xEF	; 239
    27f0:	24 83       	std	Z+4, r18	; 0x04
    27f2:	68 9f       	mul	r22, r24
    27f4:	f0 01       	movw	r30, r0
    27f6:	69 9f       	mul	r22, r25
    27f8:	f0 0d       	add	r31, r0
    27fa:	11 24       	eor	r1, r1
    27fc:	e9 5d       	subi	r30, 0xD9	; 217
    27fe:	fa 4d       	sbci	r31, 0xDA	; 218
    2800:	77 ab       	std	Z+55, r23	; 0x37
    2802:	00 23       	and	r16, r16
    2804:	19 f0       	breq	.+6      	; 0x280c <all_ir_sends+0x124>
    2806:	27 a9       	ldd	r18, Z+55	; 0x37
    2808:	20 68       	ori	r18, 0x80	; 128
    280a:	27 ab       	std	Z+55, r18	; 0x37
    280c:	68 9f       	mul	r22, r24
    280e:	f0 01       	movw	r30, r0
    2810:	69 9f       	mul	r22, r25
    2812:	f0 0d       	add	r31, r0
    2814:	11 24       	eor	r1, r1
    2816:	e9 5d       	subi	r30, 0xD9	; 217
    2818:	fa 4d       	sbci	r31, 0xDA	; 218
    281a:	e0 86       	std	Z+8, r14	; 0x08
    281c:	f1 86       	std	Z+9, r15	; 0x09
    281e:	01 96       	adiw	r24, 0x01	; 1
    2820:	12 96       	adiw	r26, 0x02	; 2
    2822:	86 30       	cpi	r24, 0x06	; 6
    2824:	91 05       	cpc	r25, r1
    2826:	b1 f6       	brne	.-84     	; 0x27d4 <all_ir_sends+0xec>
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	41 2f       	mov	r20, r17
    282c:	be 01       	movw	r22, r28
    282e:	8d 2d       	mov	r24, r13
    2830:	0e 94 bb 11 	call	0x2376	; 0x2376 <send_msg>
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	ff 90       	pop	r15
    2840:	ef 90       	pop	r14
    2842:	df 90       	pop	r13
    2844:	08 95       	ret
    2846:	d1 2c       	mov	r13, r1
    2848:	87 cf       	rjmp	.-242    	; 0x2758 <all_ir_sends+0x70>
    284a:	d1 2c       	mov	r13, r1
    284c:	11 50       	subi	r17, 0x01	; 1
    284e:	84 cf       	rjmp	.-248    	; 0x2758 <all_ir_sends+0x70>

00002850 <irTargetedCmd>:
    2850:	0f 93       	push	r16
    2852:	01 e0       	ldi	r16, 0x01	; 1
    2854:	0e 94 74 13 	call	0x26e8	; 0x26e8 <all_ir_sends>
    2858:	0f 91       	pop	r16
    285a:	08 95       	ret

0000285c <irCmd>:
    285c:	0f 93       	push	r16
    285e:	01 e0       	ldi	r16, 0x01	; 1
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	0e 94 74 13 	call	0x26e8	; 0x26e8 <all_ir_sends>
    2868:	0f 91       	pop	r16
    286a:	08 95       	ret

0000286c <irTargetedSend>:
    286c:	0f 93       	push	r16
    286e:	00 e0       	ldi	r16, 0x00	; 0
    2870:	0e 94 74 13 	call	0x26e8	; 0x26e8 <all_ir_sends>
    2874:	0f 91       	pop	r16
    2876:	08 95       	ret

00002878 <irSend>:
    2878:	0f 93       	push	r16
    287a:	00 e0       	ldi	r16, 0x00	; 0
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	0e 94 74 13 	call	0x26e8	; 0x26e8 <all_ir_sends>
    2884:	0f 91       	pop	r16
    2886:	08 95       	ret

00002888 <all_hp_ir_cmds>:
    2888:	af 92       	push	r10
    288a:	bf 92       	push	r11
    288c:	df 92       	push	r13
    288e:	ef 92       	push	r14
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	e8 2e       	mov	r14, r24
    2898:	5b 01       	movw	r10, r22
    289a:	14 2f       	mov	r17, r20
    289c:	e9 01       	movw	r28, r18
    289e:	df b6       	in	r13, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	0e 94 02 13 	call	0x2604	; 0x2604 <irIsBusy>
    28a6:	84 30       	cpi	r24, 0x04	; 4
    28a8:	e0 f5       	brcc	.+120    	; 0x2922 <all_hp_ir_cmds+0x9a>
    28aa:	10 34       	cpi	r17, 0x40	; 64
    28ac:	08 f0       	brcs	.+2      	; 0x28b0 <all_hp_ir_cmds+0x28>
    28ae:	10 54       	subi	r17, 0x40	; 64
    28b0:	4e 2d       	mov	r20, r14
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	a6 e0       	ldi	r26, 0x06	; 6
    28b6:	b0 e2       	ldi	r27, 0x20	; 32
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	78 e3       	ldi	r23, 0x38	; 56
    28be:	61 e8       	ldi	r22, 0x81	; 129
    28c0:	9a 01       	movw	r18, r20
    28c2:	08 2e       	mov	r0, r24
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <all_hp_ir_cmds+0x42>
    28c6:	35 95       	asr	r19
    28c8:	27 95       	ror	r18
    28ca:	0a 94       	dec	r0
    28cc:	e2 f7       	brpl	.-8      	; 0x28c6 <all_hp_ir_cmds+0x3e>
    28ce:	20 ff       	sbrs	r18, 0
    28d0:	13 c0       	rjmp	.+38     	; 0x28f8 <all_hp_ir_cmds+0x70>
    28d2:	ed 91       	ld	r30, X+
    28d4:	fc 91       	ld	r31, X
    28d6:	11 97       	sbiw	r26, 0x01	; 1
    28d8:	24 81       	ldd	r18, Z+4	; 0x04
    28da:	2f 7e       	andi	r18, 0xEF	; 239
    28dc:	24 83       	std	Z+4, r18	; 0x04
    28de:	78 9f       	mul	r23, r24
    28e0:	f0 01       	movw	r30, r0
    28e2:	79 9f       	mul	r23, r25
    28e4:	f0 0d       	add	r31, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	e9 5d       	subi	r30, 0xD9	; 217
    28ea:	fa 4d       	sbci	r31, 0xDA	; 218
    28ec:	67 ab       	std	Z+55, r22	; 0x37
    28ee:	27 a9       	ldd	r18, Z+55	; 0x37
    28f0:	20 64       	ori	r18, 0x40	; 64
    28f2:	27 ab       	std	Z+55, r18	; 0x37
    28f4:	c0 87       	std	Z+8, r28	; 0x08
    28f6:	d1 87       	std	Z+9, r29	; 0x09
    28f8:	01 96       	adiw	r24, 0x01	; 1
    28fa:	12 96       	adiw	r26, 0x02	; 2
    28fc:	86 30       	cpi	r24, 0x06	; 6
    28fe:	91 05       	cpc	r25, r1
    2900:	f9 f6       	brne	.-66     	; 0x28c0 <all_hp_ir_cmds+0x38>
    2902:	df be       	out	0x3f, r13	; 63
    2904:	21 e0       	ldi	r18, 0x01	; 1
    2906:	41 2f       	mov	r20, r17
    2908:	b5 01       	movw	r22, r10
    290a:	8e 2d       	mov	r24, r14
    290c:	0e 94 bb 11 	call	0x2376	; 0x2376 <send_msg>
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	1f 91       	pop	r17
    2918:	ef 90       	pop	r14
    291a:	df 90       	pop	r13
    291c:	bf 90       	pop	r11
    291e:	af 90       	pop	r10
    2920:	08 95       	ret
    2922:	df be       	out	0x3f, r13	; 63
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	1f 91       	pop	r17
    292c:	ef 90       	pop	r14
    292e:	df 90       	pop	r13
    2930:	bf 90       	pop	r11
    2932:	af 90       	pop	r10
    2934:	08 95       	ret

00002936 <hpIrTargetedCmd>:
}

uint8_t hpIrTargetedCmd(uint8_t dirs, char *data, uint8_t dataLength, id_t target){
	return all_hp_ir_cmds(dirs, data, dataLength, target);
    2936:	0c 94 44 14 	jmp	0x2888	; 0x2888 <all_hp_ir_cmds>

0000293a <irReceive>:
	clearIrBuffer(dir);
}


// To be called from interrupt handler only. Do not call.
static void irReceive(uint8_t dir){
    293a:	6f 92       	push	r6
    293c:	7f 92       	push	r7
    293e:	8f 92       	push	r8
    2940:	9f 92       	push	r9
    2942:	af 92       	push	r10
    2944:	bf 92       	push	r11
    2946:	cf 92       	push	r12
    2948:	df 92       	push	r13
    294a:	ef 92       	push	r14
    294c:	ff 92       	push	r15
    294e:	0f 93       	push	r16
    2950:	1f 93       	push	r17
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	d8 2e       	mov	r13, r24
	uint8_t in_byte = channel[dir]->DATA;				// Some data just came in
    2958:	c8 2f       	mov	r28, r24
    295a:	d0 e0       	ldi	r29, 0x00	; 0
    295c:	8e 01       	movw	r16, r28
    295e:	00 0f       	add	r16, r16
    2960:	11 1f       	adc	r17, r17
    2962:	98 01       	movw	r18, r16
    2964:	2a 5f       	subi	r18, 0xFA	; 250
    2966:	3f 4d       	sbci	r19, 0xDF	; 223
    2968:	79 01       	movw	r14, r18
    296a:	d9 01       	movw	r26, r18
    296c:	ed 91       	ld	r30, X+
    296e:	fc 91       	ld	r31, X
    2970:	c0 80       	ld	r12, Z
	#ifdef AUDIO_DROPLET
		//ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_HI_gc;
	#endif	
	
	uint32_t now = getTime();
    2972:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
    2976:	28 e3       	ldi	r18, 0x38	; 56
    2978:	2c 9f       	mul	r18, r28
    297a:	f0 01       	movw	r30, r0
    297c:	2d 9f       	mul	r18, r29
    297e:	f0 0d       	add	r31, r0
    2980:	11 24       	eor	r1, r1
    2982:	e9 5d       	subi	r30, 0xD9	; 217
    2984:	fa 4d       	sbci	r31, 0xDA	; 218
    2986:	80 80       	ld	r8, Z
    2988:	91 80       	ldd	r9, Z+1	; 0x01
    298a:	a2 80       	ldd	r10, Z+2	; 0x02
    298c:	b3 80       	ldd	r11, Z+3	; 0x03
    298e:	9b 01       	movw	r18, r22
    2990:	ac 01       	movw	r20, r24
    2992:	28 19       	sub	r18, r8
    2994:	39 09       	sbc	r19, r9
    2996:	4a 09       	sbc	r20, r10
    2998:	5b 09       	sbc	r21, r11
    299a:	49 01       	movw	r8, r18
    299c:	5a 01       	movw	r10, r20
    299e:	31 e1       	ldi	r19, 0x11	; 17
    29a0:	83 16       	cp	r8, r19
    29a2:	91 04       	cpc	r9, r1
    29a4:	a1 04       	cpc	r10, r1
    29a6:	b1 04       	cpc	r11, r1
    29a8:	90 f0       	brcs	.+36     	; 0x29ce <irReceive+0x94>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    29aa:	14 82       	std	Z+4, r1	; 0x04
    29ac:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    29ae:	16 82       	std	Z+6, r1	; 0x06
    29b0:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    29b2:	10 86       	std	Z+8, r1	; 0x08
    29b4:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    29b6:	12 86       	std	Z+10, r1	; 0x0a
    29b8:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    29ba:	14 86       	std	Z+12, r1	; 0x0c
    29bc:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    29be:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    29c0:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    29c2:	d7 01       	movw	r26, r14
    29c4:	ed 91       	ld	r30, X+
    29c6:	fc 91       	ld	r31, X
    29c8:	24 81       	ldd	r18, Z+4	; 0x04
    29ca:	20 61       	ori	r18, 0x10	; 16
    29cc:	24 83       	std	Z+4, r18	; 0x04
		//ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_HI_gc;
	#endif	
	
	uint32_t now = getTime();
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
	ir_rxtx[dir].last_byte = now;
    29ce:	28 e3       	ldi	r18, 0x38	; 56
    29d0:	2c 9f       	mul	r18, r28
    29d2:	d0 01       	movw	r26, r0
    29d4:	2d 9f       	mul	r18, r29
    29d6:	b0 0d       	add	r27, r0
    29d8:	11 24       	eor	r1, r1
    29da:	a9 5d       	subi	r26, 0xD9	; 217
    29dc:	ba 4d       	sbci	r27, 0xDA	; 218
    29de:	6d 93       	st	X+, r22
    29e0:	7d 93       	st	X+, r23
    29e2:	8d 93       	st	X+, r24
    29e4:	9c 93       	st	X, r25
    29e6:	13 97       	sbiw	r26, 0x03	; 3
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
    29e8:	1a 96       	adiw	r26, 0x0a	; 10
    29ea:	ed 91       	ld	r30, X+
    29ec:	fc 91       	ld	r31, X
    29ee:	1b 97       	sbiw	r26, 0x0b	; 11
    29f0:	e7 30       	cpi	r30, 0x07	; 7
    29f2:	f1 05       	cpc	r31, r1
    29f4:	08 f4       	brcc	.+2      	; 0x29f8 <irReceive+0xbe>
    29f6:	4b c0       	rjmp	.+150    	; 0x2a8e <irReceive+0x154>
										if(!(ir_rxtx[dir].status & IR_STATUS_TIMED_bm)){
											ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].calc_crc, ir_rxtx[dir].target_ID);
										}
										break;								
		default:
			ir_rxtx[dir].buf[ir_rxtx[dir].curr_pos-HEADER_LEN] = in_byte;
    29f8:	1a 96       	adiw	r26, 0x0a	; 10
    29fa:	ed 91       	ld	r30, X+
    29fc:	fc 91       	ld	r31, X
    29fe:	1b 97       	sbiw	r26, 0x0b	; 11
    2a00:	37 97       	sbiw	r30, 0x07	; 7
    2a02:	ea 0f       	add	r30, r26
    2a04:	fb 1f       	adc	r31, r27
    2a06:	c6 86       	std	Z+14, r12	; 0x0e
			ir_rxtx[dir].calc_crc = _crc16_update(ir_rxtx[dir].calc_crc, in_byte);
    2a08:	1c 96       	adiw	r26, 0x0c	; 12
    2a0a:	8d 91       	ld	r24, X+
    2a0c:	9c 91       	ld	r25, X
    2a0e:	1d 97       	sbiw	r26, 0x0d	; 13
    2a10:	8c 25       	eor	r24, r12
    2a12:	28 2f       	mov	r18, r24
    2a14:	22 95       	swap	r18
    2a16:	28 27       	eor	r18, r24
    2a18:	02 2e       	mov	r0, r18
    2a1a:	26 95       	lsr	r18
    2a1c:	26 95       	lsr	r18
    2a1e:	20 25       	eor	r18, r0
    2a20:	02 2e       	mov	r0, r18
    2a22:	26 95       	lsr	r18
    2a24:	20 25       	eor	r18, r0
    2a26:	27 70       	andi	r18, 0x07	; 7
    2a28:	08 2e       	mov	r0, r24
    2a2a:	89 2f       	mov	r24, r25
    2a2c:	26 95       	lsr	r18
    2a2e:	07 94       	ror	r0
    2a30:	27 95       	ror	r18
    2a32:	90 2d       	mov	r25, r0
    2a34:	82 27       	eor	r24, r18
    2a36:	06 94       	lsr	r0
    2a38:	27 95       	ror	r18
    2a3a:	90 25       	eor	r25, r0
    2a3c:	82 27       	eor	r24, r18
    2a3e:	1c 96       	adiw	r26, 0x0c	; 12
    2a40:	8d 93       	st	X+, r24
    2a42:	9c 93       	st	X, r25
    2a44:	1d 97       	sbiw	r26, 0x0d	; 13
	}
	ir_rxtx[dir].curr_pos++;
    2a46:	88 e3       	ldi	r24, 0x38	; 56
    2a48:	8c 9f       	mul	r24, r28
    2a4a:	f0 01       	movw	r30, r0
    2a4c:	8d 9f       	mul	r24, r29
    2a4e:	f0 0d       	add	r31, r0
    2a50:	11 24       	eor	r1, r1
    2a52:	e9 5d       	subi	r30, 0xD9	; 217
    2a54:	fa 4d       	sbci	r31, 0xDA	; 218
    2a56:	82 85       	ldd	r24, Z+10	; 0x0a
    2a58:	93 85       	ldd	r25, Z+11	; 0x0b
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	82 87       	std	Z+10, r24	; 0x0a
    2a5e:	93 87       	std	Z+11, r25	; 0x0b
	
	if(ir_rxtx[dir].curr_pos>=(ir_rxtx[dir].data_length+HEADER_LEN)){
    2a60:	22 85       	ldd	r18, Z+10	; 0x0a
    2a62:	33 85       	ldd	r19, Z+11	; 0x0b
    2a64:	86 a9       	ldd	r24, Z+54	; 0x36
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	07 96       	adiw	r24, 0x07	; 7
    2a6a:	28 17       	cp	r18, r24
    2a6c:	39 07       	cpc	r19, r25
    2a6e:	a8 f4       	brcc	.+42     	; 0x2a9a <irReceive+0x160>
		handleCompletedMsg(dir);
	}
}
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	1f 91       	pop	r17
    2a76:	0f 91       	pop	r16
    2a78:	ff 90       	pop	r15
    2a7a:	ef 90       	pop	r14
    2a7c:	df 90       	pop	r13
    2a7e:	cf 90       	pop	r12
    2a80:	bf 90       	pop	r11
    2a82:	af 90       	pop	r10
    2a84:	9f 90       	pop	r9
    2a86:	8f 90       	pop	r8
    2a88:	7f 90       	pop	r7
    2a8a:	6f 90       	pop	r6
    2a8c:	08 95       	ret
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
	ir_rxtx[dir].last_byte = now;
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
    2a8e:	88 27       	eor	r24, r24
    2a90:	eb 5f       	subi	r30, 0xFB	; 251
    2a92:	fe 4f       	sbci	r31, 0xFE	; 254
    2a94:	8f 4f       	sbci	r24, 0xFF	; 255
    2a96:	0c 94 34 4c 	jmp	0x9868	; 0x9868 <__tablejump2__>
		}
	}
}

static void handleCompletedMsg(uint8_t dir){
	ir_rxtx[dir].status |= ir_rxtx[dir].target_ID ? IR_STATUS_TARGETED_bm : 0;
    2a9a:	80 85       	ldd	r24, Z+8	; 0x08
    2a9c:	91 85       	ldd	r25, Z+9	; 0x09
    2a9e:	89 2b       	or	r24, r25
    2aa0:	09 f0       	breq	.+2      	; 0x2aa4 <irReceive+0x16a>
    2aa2:	4c c0       	rjmp	.+152    	; 0x2b3c <irReceive+0x202>
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	98 e3       	ldi	r25, 0x38	; 56
    2aa8:	9c 9f       	mul	r25, r28
    2aaa:	f0 01       	movw	r30, r0
    2aac:	9d 9f       	mul	r25, r29
    2aae:	f0 0d       	add	r31, r0
    2ab0:	11 24       	eor	r1, r1
    2ab2:	e9 5d       	subi	r30, 0xD9	; 217
    2ab4:	fa 4d       	sbci	r31, 0xDA	; 218
    2ab6:	97 a9       	ldd	r25, Z+55	; 0x37
    2ab8:	89 2b       	or	r24, r25
    2aba:	87 ab       	std	Z+55, r24	; 0x37
	//pre checks.
	const uint8_t crcMismatch = ir_rxtx[dir].calc_crc!=ir_rxtx[dir].data_crc;
    2abc:	24 85       	ldd	r18, Z+12	; 0x0c
    2abe:	35 85       	ldd	r19, Z+13	; 0x0d
    2ac0:	84 81       	ldd	r24, Z+4	; 0x04
    2ac2:	95 81       	ldd	r25, Z+5	; 0x05
	const uint8_t nullCrc	  = ir_rxtx[dir].calc_crc==0;
    2ac4:	64 85       	ldd	r22, Z+12	; 0x0c
    2ac6:	75 85       	ldd	r23, Z+13	; 0x0d
	const uint8_t selfSender  = ir_rxtx[dir].senderID == getDropletID();
    2ac8:	a6 80       	ldd	r10, Z+6	; 0x06
    2aca:	b7 80       	ldd	r11, Z+7	; 0x07
// Returns the number of ms elapsed since the last reset. (Defined in droplet_base_asm.s)
uint32_t getTime(void);

// Returns this Droplet's unique 16-bit identifier. 0 will never be an identifier.
inline id_t getDropletID(void){ 
	return droplet_ID;
    2acc:	40 91 97 24 	lds	r20, 0x2497	; 0x802497 <droplet_ID>
    2ad0:	50 91 98 24 	lds	r21, 0x2498	; 0x802498 <droplet_ID+0x1>
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
    2ad4:	f7 a8       	ldd	r15, Z+55	; 0x37
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
    2ad6:	bf 2d       	mov	r27, r15
    2ad8:	b0 74       	andi	r27, 0x40	; 64
    2ada:	cb 2e       	mov	r12, r27
    2adc:	f6 fc       	sbrc	r15, 6
    2ade:	d5 c0       	rjmp	.+426    	; 0x2c8a <irReceive+0x350>
    2ae0:	e0 84       	ldd	r14, Z+8	; 0x08
    2ae2:	f1 84       	ldd	r15, Z+9	; 0x09
    2ae4:	ef 28       	or	r14, r15
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <irReceive+0x1b0>
    2ae8:	d0 c0       	rjmp	.+416    	; 0x2c8a <irReceive+0x350>
    2aea:	e0 84       	ldd	r14, Z+8	; 0x08
    2aec:	f1 84       	ldd	r15, Z+9	; 0x09
    2aee:	e1 e0       	ldi	r30, 0x01	; 1
    2af0:	4e 15       	cp	r20, r14
    2af2:	5f 05       	cpc	r21, r15
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <irReceive+0x1be>
    2af6:	c9 c0       	rjmp	.+402    	; 0x2c8a <irReceive+0x350>
	
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
    2af8:	28 17       	cp	r18, r24
    2afa:	39 07       	cpc	r19, r25
    2afc:	09 f4       	brne	.+2      	; 0x2b00 <irReceive+0x1c6>
    2afe:	ca c0       	rjmp	.+404    	; 0x2c94 <irReceive+0x35a>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2b00:	88 e3       	ldi	r24, 0x38	; 56
    2b02:	8c 9f       	mul	r24, r28
    2b04:	f0 01       	movw	r30, r0
    2b06:	8d 9f       	mul	r24, r29
    2b08:	f0 0d       	add	r31, r0
    2b0a:	11 24       	eor	r1, r1
    2b0c:	e9 5d       	subi	r30, 0xD9	; 217
    2b0e:	fa 4d       	sbci	r31, 0xDA	; 218
    2b10:	14 82       	std	Z+4, r1	; 0x04
    2b12:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2b14:	16 82       	std	Z+6, r1	; 0x06
    2b16:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2b18:	10 86       	std	Z+8, r1	; 0x08
    2b1a:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2b1c:	12 86       	std	Z+10, r1	; 0x0a
    2b1e:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2b20:	14 86       	std	Z+12, r1	; 0x0c
    2b22:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2b24:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2b26:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2b28:	f8 01       	movw	r30, r16
    2b2a:	ea 5f       	subi	r30, 0xFA	; 250
    2b2c:	ff 4d       	sbci	r31, 0xDF	; 223
    2b2e:	01 90       	ld	r0, Z+
    2b30:	f0 81       	ld	r31, Z
    2b32:	e0 2d       	mov	r30, r0
    2b34:	84 81       	ldd	r24, Z+4	; 0x04
    2b36:	80 61       	ori	r24, 0x10	; 16
    2b38:	84 83       	std	Z+4, r24	; 0x04
	ir_rxtx[dir].curr_pos++;
	
	if(ir_rxtx[dir].curr_pos>=(ir_rxtx[dir].data_length+HEADER_LEN)){
		handleCompletedMsg(dir);
	}
}
    2b3a:	9a cf       	rjmp	.-204    	; 0x2a70 <irReceive+0x136>
		}
	}
}

static void handleCompletedMsg(uint8_t dir){
	ir_rxtx[dir].status |= ir_rxtx[dir].target_ID ? IR_STATUS_TARGETED_bm : 0;
    2b3c:	80 e1       	ldi	r24, 0x10	; 16
    2b3e:	b3 cf       	rjmp	.-154    	; 0x2aa6 <irReceive+0x16c>
										ir_rxtx[dir].status		   |= (in_byte&DATA_LEN_STATUS_BITS_bm);
										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].senderID, ir_rxtx[dir].status & IR_STATUS_CRC_BITS_bm);
										ir_rxtx[dir].data_length	= in_byte&DATA_LEN_VAL_bm;
										if(ir_rxtx[dir].data_length>IR_BUFFER_SIZE) ir_rxtx[dir].data_length=1; //basically, this will cause the message to get aborted.
																								break;
		case HEADER_POS_TARGET_ID_LOW:  ir_rxtx[dir].target_ID		= (uint16_t)in_byte;		break;
    2b40:	8c 2d       	mov	r24, r12
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	28 e3       	ldi	r18, 0x38	; 56
    2b46:	2c 9f       	mul	r18, r28
    2b48:	f0 01       	movw	r30, r0
    2b4a:	2d 9f       	mul	r18, r29
    2b4c:	f0 0d       	add	r31, r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	e9 5d       	subi	r30, 0xD9	; 217
    2b52:	fa 4d       	sbci	r31, 0xDA	; 218
    2b54:	80 87       	std	Z+8, r24	; 0x08
    2b56:	91 87       	std	Z+9, r25	; 0x09
    2b58:	76 cf       	rjmp	.-276    	; 0x2a46 <irReceive+0x10c>
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
		case HEADER_POS_SENDER_ID_LOW:	ir_rxtx[dir].senderID		= (uint16_t)in_byte;		break;
		case HEADER_POS_SENDER_ID_HIGH:	ir_rxtx[dir].senderID	   |= (((uint16_t)in_byte)<<8);	break;
		case HEADER_POS_CRC_LOW:		ir_rxtx[dir].data_crc		= (uint16_t)in_byte;		break;
    2b5a:	8c 2d       	mov	r24, r12
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	28 e3       	ldi	r18, 0x38	; 56
    2b60:	2c 9f       	mul	r18, r28
    2b62:	f0 01       	movw	r30, r0
    2b64:	2d 9f       	mul	r18, r29
    2b66:	f0 0d       	add	r31, r0
    2b68:	11 24       	eor	r1, r1
    2b6a:	e9 5d       	subi	r30, 0xD9	; 217
    2b6c:	fa 4d       	sbci	r31, 0xDA	; 218
    2b6e:	84 83       	std	Z+4, r24	; 0x04
    2b70:	95 83       	std	Z+5, r25	; 0x05
    2b72:	69 cf       	rjmp	.-302    	; 0x2a46 <irReceive+0x10c>
		case HEADER_POS_CRC_HIGH:		ir_rxtx[dir].data_crc	   |= (((uint16_t)in_byte)<<8); break;																								
    2b74:	88 e3       	ldi	r24, 0x38	; 56
    2b76:	8c 9f       	mul	r24, r28
    2b78:	f0 01       	movw	r30, r0
    2b7a:	8d 9f       	mul	r24, r29
    2b7c:	f0 0d       	add	r31, r0
    2b7e:	11 24       	eor	r1, r1
    2b80:	e9 5d       	subi	r30, 0xD9	; 217
    2b82:	fa 4d       	sbci	r31, 0xDA	; 218
    2b84:	84 81       	ldd	r24, Z+4	; 0x04
    2b86:	95 81       	ldd	r25, Z+5	; 0x05
    2b88:	9c 29       	or	r25, r12
    2b8a:	84 83       	std	Z+4, r24	; 0x04
    2b8c:	95 83       	std	Z+5, r25	; 0x05
    2b8e:	5b cf       	rjmp	.-330    	; 0x2a46 <irReceive+0x10c>
		case HEADER_POS_MSG_LENGTH:
										ir_rxtx[dir].status		   |= (in_byte&DATA_LEN_STATUS_BITS_bm);
    2b90:	88 e3       	ldi	r24, 0x38	; 56
    2b92:	8c 9f       	mul	r24, r28
    2b94:	f0 01       	movw	r30, r0
    2b96:	8d 9f       	mul	r24, r29
    2b98:	f0 0d       	add	r31, r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	e9 5d       	subi	r30, 0xD9	; 217
    2b9e:	fa 4d       	sbci	r31, 0xDA	; 218
    2ba0:	87 a9       	ldd	r24, Z+55	; 0x37
    2ba2:	9c 2d       	mov	r25, r12
    2ba4:	90 7c       	andi	r25, 0xC0	; 192
    2ba6:	89 2b       	or	r24, r25
    2ba8:	87 ab       	std	Z+55, r24	; 0x37
										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].senderID, ir_rxtx[dir].status & IR_STATUS_CRC_BITS_bm);
    2baa:	27 a9       	ldd	r18, Z+55	; 0x37
    2bac:	86 81       	ldd	r24, Z+6	; 0x06
    2bae:	97 81       	ldd	r25, Z+7	; 0x07
    2bb0:	20 7c       	andi	r18, 0xC0	; 192
    2bb2:	82 27       	eor	r24, r18
    2bb4:	28 2f       	mov	r18, r24
    2bb6:	22 95       	swap	r18
    2bb8:	28 27       	eor	r18, r24
    2bba:	02 2e       	mov	r0, r18
    2bbc:	26 95       	lsr	r18
    2bbe:	26 95       	lsr	r18
    2bc0:	20 25       	eor	r18, r0
    2bc2:	02 2e       	mov	r0, r18
    2bc4:	26 95       	lsr	r18
    2bc6:	20 25       	eor	r18, r0
    2bc8:	27 70       	andi	r18, 0x07	; 7
    2bca:	08 2e       	mov	r0, r24
    2bcc:	89 2f       	mov	r24, r25
    2bce:	26 95       	lsr	r18
    2bd0:	07 94       	ror	r0
    2bd2:	27 95       	ror	r18
    2bd4:	90 2d       	mov	r25, r0
    2bd6:	82 27       	eor	r24, r18
    2bd8:	06 94       	lsr	r0
    2bda:	27 95       	ror	r18
    2bdc:	90 25       	eor	r25, r0
    2bde:	82 27       	eor	r24, r18
    2be0:	84 87       	std	Z+12, r24	; 0x0c
    2be2:	95 87       	std	Z+13, r25	; 0x0d
										ir_rxtx[dir].data_length	= in_byte&DATA_LEN_VAL_bm;
    2be4:	8c 2d       	mov	r24, r12
    2be6:	8f 73       	andi	r24, 0x3F	; 63
    2be8:	86 ab       	std	Z+54, r24	; 0x36
										if(ir_rxtx[dir].data_length>IR_BUFFER_SIZE) ir_rxtx[dir].data_length=1; //basically, this will cause the message to get aborted.
    2bea:	86 a9       	ldd	r24, Z+54	; 0x36
    2bec:	89 32       	cpi	r24, 0x29	; 41
    2bee:	08 f4       	brcc	.+2      	; 0x2bf2 <irReceive+0x2b8>
    2bf0:	2a cf       	rjmp	.-428    	; 0x2a46 <irReceive+0x10c>
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	86 ab       	std	Z+54, r24	; 0x36
    2bf6:	27 cf       	rjmp	.-434    	; 0x2a46 <irReceive+0x10c>
																								break;
		case HEADER_POS_TARGET_ID_LOW:  ir_rxtx[dir].target_ID		= (uint16_t)in_byte;		break;
		case HEADER_POS_TARGET_ID_HIGH:
										ir_rxtx[dir].target_ID	   |= (((uint16_t)in_byte)<<8);
    2bf8:	88 e3       	ldi	r24, 0x38	; 56
    2bfa:	8c 9f       	mul	r24, r28
    2bfc:	f0 01       	movw	r30, r0
    2bfe:	8d 9f       	mul	r24, r29
    2c00:	f0 0d       	add	r31, r0
    2c02:	11 24       	eor	r1, r1
    2c04:	e9 5d       	subi	r30, 0xD9	; 217
    2c06:	fa 4d       	sbci	r31, 0xDA	; 218
    2c08:	80 85       	ldd	r24, Z+8	; 0x08
    2c0a:	91 85       	ldd	r25, Z+9	; 0x09
    2c0c:	9c 29       	or	r25, r12
    2c0e:	80 87       	std	Z+8, r24	; 0x08
    2c10:	91 87       	std	Z+9, r25	; 0x09
										if(!(ir_rxtx[dir].status & IR_STATUS_TIMED_bm)){
    2c12:	87 a9       	ldd	r24, Z+55	; 0x37
    2c14:	86 fd       	sbrc	r24, 6
    2c16:	17 cf       	rjmp	.-466    	; 0x2a46 <irReceive+0x10c>
											ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].calc_crc, ir_rxtx[dir].target_ID);
    2c18:	20 85       	ldd	r18, Z+8	; 0x08
    2c1a:	31 85       	ldd	r19, Z+9	; 0x09
    2c1c:	84 85       	ldd	r24, Z+12	; 0x0c
    2c1e:	95 85       	ldd	r25, Z+13	; 0x0d
    2c20:	82 27       	eor	r24, r18
    2c22:	28 2f       	mov	r18, r24
    2c24:	22 95       	swap	r18
    2c26:	28 27       	eor	r18, r24
    2c28:	02 2e       	mov	r0, r18
    2c2a:	26 95       	lsr	r18
    2c2c:	26 95       	lsr	r18
    2c2e:	20 25       	eor	r18, r0
    2c30:	02 2e       	mov	r0, r18
    2c32:	26 95       	lsr	r18
    2c34:	20 25       	eor	r18, r0
    2c36:	27 70       	andi	r18, 0x07	; 7
    2c38:	08 2e       	mov	r0, r24
    2c3a:	89 2f       	mov	r24, r25
    2c3c:	26 95       	lsr	r18
    2c3e:	07 94       	ror	r0
    2c40:	27 95       	ror	r18
    2c42:	90 2d       	mov	r25, r0
    2c44:	82 27       	eor	r24, r18
    2c46:	06 94       	lsr	r0
    2c48:	27 95       	ror	r18
    2c4a:	90 25       	eor	r25, r0
    2c4c:	82 27       	eor	r24, r18
    2c4e:	84 87       	std	Z+12, r24	; 0x0c
    2c50:	95 87       	std	Z+13, r25	; 0x0d
    2c52:	f9 ce       	rjmp	.-526    	; 0x2a46 <irReceive+0x10c>
	ir_rxtx[dir].last_byte = now;
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
		case HEADER_POS_SENDER_ID_LOW:	ir_rxtx[dir].senderID		= (uint16_t)in_byte;		break;
    2c54:	8c 2d       	mov	r24, r12
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	28 e3       	ldi	r18, 0x38	; 56
    2c5a:	2c 9f       	mul	r18, r28
    2c5c:	f0 01       	movw	r30, r0
    2c5e:	2d 9f       	mul	r18, r29
    2c60:	f0 0d       	add	r31, r0
    2c62:	11 24       	eor	r1, r1
    2c64:	e9 5d       	subi	r30, 0xD9	; 217
    2c66:	fa 4d       	sbci	r31, 0xDA	; 218
    2c68:	86 83       	std	Z+6, r24	; 0x06
    2c6a:	97 83       	std	Z+7, r25	; 0x07
    2c6c:	ec ce       	rjmp	.-552    	; 0x2a46 <irReceive+0x10c>
		case HEADER_POS_SENDER_ID_HIGH:	ir_rxtx[dir].senderID	   |= (((uint16_t)in_byte)<<8);	break;
    2c6e:	88 e3       	ldi	r24, 0x38	; 56
    2c70:	8c 9f       	mul	r24, r28
    2c72:	f0 01       	movw	r30, r0
    2c74:	8d 9f       	mul	r24, r29
    2c76:	f0 0d       	add	r31, r0
    2c78:	11 24       	eor	r1, r1
    2c7a:	e9 5d       	subi	r30, 0xD9	; 217
    2c7c:	fa 4d       	sbci	r31, 0xDA	; 218
    2c7e:	86 81       	ldd	r24, Z+6	; 0x06
    2c80:	97 81       	ldd	r25, Z+7	; 0x07
    2c82:	9c 29       	or	r25, r12
    2c84:	86 83       	std	Z+6, r24	; 0x06
    2c86:	97 83       	std	Z+7, r25	; 0x07
    2c88:	de ce       	rjmp	.-580    	; 0x2a46 <irReceive+0x10c>
	//pre checks.
	const uint8_t crcMismatch = ir_rxtx[dir].calc_crc!=ir_rxtx[dir].data_crc;
	const uint8_t nullCrc	  = ir_rxtx[dir].calc_crc==0;
	const uint8_t selfSender  = ir_rxtx[dir].senderID == getDropletID();
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
    2c8a:	e0 e0       	ldi	r30, 0x00	; 0
	
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
    2c8c:	28 17       	cp	r18, r24
    2c8e:	39 07       	cpc	r19, r25
    2c90:	09 f0       	breq	.+2      	; 0x2c94 <irReceive+0x35a>
    2c92:	36 cf       	rjmp	.-404    	; 0x2b00 <irReceive+0x1c6>
    2c94:	67 2b       	or	r22, r23
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <irReceive+0x360>
    2c98:	33 cf       	rjmp	.-410    	; 0x2b00 <irReceive+0x1c6>
    2c9a:	a4 16       	cp	r10, r20
    2c9c:	b5 06       	cpc	r11, r21
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <irReceive+0x368>
    2ca0:	2f cf       	rjmp	.-418    	; 0x2b00 <irReceive+0x1c6>
    2ca2:	e1 11       	cpse	r30, r1
    2ca4:	2d cf       	rjmp	.-422    	; 0x2b00 <irReceive+0x1c6>
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
    2ca6:	88 e3       	ldi	r24, 0x38	; 56
    2ca8:	8c 9f       	mul	r24, r28
    2caa:	b0 01       	movw	r22, r0
    2cac:	8d 9f       	mul	r24, r29
    2cae:	70 0d       	add	r23, r0
    2cb0:	11 24       	eor	r1, r1
    2cb2:	fb 01       	movw	r30, r22
    2cb4:	e9 5d       	subi	r30, 0xD9	; 217
    2cb6:	fa 4d       	sbci	r31, 0xDA	; 218
    2cb8:	7f 01       	movw	r14, r30
    2cba:	87 a9       	ldd	r24, Z+55	; 0x37
    2cbc:	87 fd       	sbrc	r24, 7
    2cbe:	a1 c0       	rjmp	.+322    	; 0x2e02 <irReceive+0x4c8>
		   delay_us(100);
	   } while (busy);
}

static void addMsgToMsgQueue(uint8_t dir){
	if(ir_rxtx[dir].data_length == 0){
    2cc0:	86 a9       	ldd	r24, Z+54	; 0x36
    2cc2:	88 23       	and	r24, r24
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <irReceive+0x38e>
    2cc6:	35 c2       	rjmp	.+1130   	; 0x3132 <irReceive+0x7f8>
		printf_P(PSTR("ERROR! Should NOT be adding 0-length message to queue.\r\n"));
	}else if(ir_rxtx[dir].data_length > IR_BUFFER_SIZE){
    2cc8:	86 a9       	ldd	r24, Z+54	; 0x36
    2cca:	89 32       	cpi	r24, 0x29	; 41
    2ccc:	08 f0       	brcs	.+2      	; 0x2cd0 <irReceive+0x396>
    2cce:	3a c2       	rjmp	.+1140   	; 0x3144 <irReceive+0x80a>
		printf_P(PSTR("ERROR! Should NOT be adding a message with length greater than buffer size to queue.\r\n"));
	}else if(memoryConsumedByBuffer > 500){
    2cd0:	80 91 ce 24 	lds	r24, 0x24CE	; 0x8024ce <memoryConsumedByBuffer>
    2cd4:	90 91 cf 24 	lds	r25, 0x24CF	; 0x8024cf <memoryConsumedByBuffer+0x1>
    2cd8:	85 3f       	cpi	r24, 0xF5	; 245
    2cda:	91 40       	sbci	r25, 0x01	; 1
    2cdc:	08 f0       	brcs	.+2      	; 0x2ce0 <irReceive+0x3a6>
    2cde:	3b c2       	rjmp	.+1142   	; 0x3156 <irReceive+0x81c>
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
	}else{
		volatile MsgNode* node = incomingMsgHead;
    2ce0:	c0 90 bd 26 	lds	r12, 0x26BD	; 0x8026bd <incomingMsgHead>
    2ce4:	d0 90 be 26 	lds	r13, 0x26BE	; 0x8026be <incomingMsgHead+0x1>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2ce8:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cea:	f8 94       	cli
			if(incomingMsgHead==NULL){
    2cec:	80 91 bd 26 	lds	r24, 0x26BD	; 0x8026bd <incomingMsgHead>
    2cf0:	90 91 be 26 	lds	r25, 0x26BE	; 0x8026be <incomingMsgHead+0x1>
    2cf4:	89 2b       	or	r24, r25
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <irReceive+0x3c0>
    2cf8:	75 c0       	rjmp	.+234    	; 0x2de4 <irReceive+0x4aa>
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
				node = (MsgNode*)incomingMsgHead;
			}else{
				while(node->next != NULL){
    2cfa:	d6 01       	movw	r26, r12
    2cfc:	1a 96       	adiw	r26, 0x0a	; 10
    2cfe:	8d 91       	ld	r24, X+
    2d00:	9c 91       	ld	r25, X
    2d02:	1b 97       	sbiw	r26, 0x0b	; 11
    2d04:	89 2b       	or	r24, r25
    2d06:	51 f0       	breq	.+20     	; 0x2d1c <irReceive+0x3e2>
					node = node->next;
    2d08:	d6 01       	movw	r26, r12
    2d0a:	1a 96       	adiw	r26, 0x0a	; 10
    2d0c:	cd 90       	ld	r12, X+
    2d0e:	dc 90       	ld	r13, X
    2d10:	1b 97       	sbiw	r26, 0x0b	; 11
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			if(incomingMsgHead==NULL){
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
				node = (MsgNode*)incomingMsgHead;
			}else{
				while(node->next != NULL){
    2d12:	f6 01       	movw	r30, r12
    2d14:	82 85       	ldd	r24, Z+10	; 0x0a
    2d16:	93 85       	ldd	r25, Z+11	; 0x0b
    2d18:	89 2b       	or	r24, r25
    2d1a:	b1 f7       	brne	.-20     	; 0x2d08 <irReceive+0x3ce>
					node = node->next;
				}
				node->next = (MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2d1c:	88 e3       	ldi	r24, 0x38	; 56
    2d1e:	8c 9f       	mul	r24, r28
    2d20:	f0 01       	movw	r30, r0
    2d22:	8d 9f       	mul	r24, r29
    2d24:	f0 0d       	add	r31, r0
    2d26:	11 24       	eor	r1, r1
    2d28:	e9 5d       	subi	r30, 0xD9	; 217
    2d2a:	fa 4d       	sbci	r31, 0xDA	; 218
    2d2c:	86 a9       	ldd	r24, Z+54	; 0x36
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2d2e:	ff b6       	in	r15, 0x3f	; 63
    2d30:	f8 94       	cli
		tmp = malloc(size);
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0d 96       	adiw	r24, 0x0d	; 13
    2d36:	0e 94 56 4c 	call	0x98ac	; 0x98ac <malloc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d3a:	ff be       	out	0x3f, r15	; 63
    2d3c:	d6 01       	movw	r26, r12
    2d3e:	1a 96       	adiw	r26, 0x0a	; 10
    2d40:	8d 93       	st	X+, r24
    2d42:	9c 93       	st	X, r25
    2d44:	1b 97       	sbiw	r26, 0x0b	; 11
				node = node->next;
    2d46:	1a 96       	adiw	r26, 0x0a	; 10
    2d48:	ed 90       	ld	r14, X+
    2d4a:	fc 90       	ld	r15, X
    2d4c:	1b 97       	sbiw	r26, 0x0b	; 11
			}
			char* dataAddr = ((char*)node + sizeof(MsgNode));
    2d4e:	47 01       	movw	r8, r14
    2d50:	bd e0       	ldi	r27, 0x0D	; 13
    2d52:	8b 0e       	add	r8, r27
    2d54:	91 1c       	adc	r9, r1
			memcpy(dataAddr, (const void*)ir_rxtx[dir].buf, ir_rxtx[dir].data_length);
    2d56:	88 e3       	ldi	r24, 0x38	; 56
    2d58:	8c 9f       	mul	r24, r28
    2d5a:	b0 01       	movw	r22, r0
    2d5c:	8d 9f       	mul	r24, r29
    2d5e:	70 0d       	add	r23, r0
    2d60:	11 24       	eor	r1, r1
    2d62:	fb 01       	movw	r30, r22
    2d64:	e9 5d       	subi	r30, 0xD9	; 217
    2d66:	fa 4d       	sbci	r31, 0xDA	; 218
    2d68:	6f 01       	movw	r12, r30
    2d6a:	46 a9       	ldd	r20, Z+54	; 0x36
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	6b 5c       	subi	r22, 0xCB	; 203
    2d70:	7a 4d       	sbci	r23, 0xDA	; 218
    2d72:	c4 01       	movw	r24, r8
    2d74:	0e 94 ae 4f 	call	0x9f5c	; 0x9f5c <memcpy>
			node->msg			= dataAddr;
    2d78:	d7 01       	movw	r26, r14
    2d7a:	18 96       	adiw	r26, 0x08	; 8
    2d7c:	8d 92       	st	X+, r8
    2d7e:	9c 92       	st	X, r9
    2d80:	19 97       	sbiw	r26, 0x09	; 9
			node->arrivalTime	= ir_rxtx[dir].last_byte;
    2d82:	f6 01       	movw	r30, r12
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	a2 81       	ldd	r26, Z+2	; 0x02
    2d8a:	b3 81       	ldd	r27, Z+3	; 0x03
    2d8c:	f7 01       	movw	r30, r14
    2d8e:	80 83       	st	Z, r24
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	a2 83       	std	Z+2, r26	; 0x02
    2d94:	b3 83       	std	Z+3, r27	; 0x03
			node->length		= ir_rxtx[dir].data_length;
    2d96:	d6 01       	movw	r26, r12
    2d98:	d6 96       	adiw	r26, 0x36	; 54
    2d9a:	8c 91       	ld	r24, X
    2d9c:	d6 97       	sbiw	r26, 0x36	; 54
    2d9e:	84 87       	std	Z+12, r24	; 0x0c
			node->senderID		= ir_rxtx[dir].senderID;
    2da0:	16 96       	adiw	r26, 0x06	; 6
    2da2:	8d 91       	ld	r24, X+
    2da4:	9c 91       	ld	r25, X
    2da6:	17 97       	sbiw	r26, 0x07	; 7
    2da8:	84 83       	std	Z+4, r24	; 0x04
    2daa:	95 83       	std	Z+5, r25	; 0x05
			node->crc			= ir_rxtx[dir].calc_crc;
    2dac:	1c 96       	adiw	r26, 0x0c	; 12
    2dae:	8d 91       	ld	r24, X+
    2db0:	9c 91       	ld	r25, X
    2db2:	1d 97       	sbiw	r26, 0x0d	; 13
    2db4:	86 83       	std	Z+6, r24	; 0x06
    2db6:	97 83       	std	Z+7, r25	; 0x07
			node->next			= NULL;
    2db8:	12 86       	std	Z+10, r1	; 0x0a
    2dba:	13 86       	std	Z+11, r1	; 0x0b
			memoryConsumedByBuffer += (sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2dbc:	d6 96       	adiw	r26, 0x36	; 54
    2dbe:	2c 91       	ld	r18, X
    2dc0:	80 91 ce 24 	lds	r24, 0x24CE	; 0x8024ce <memoryConsumedByBuffer>
    2dc4:	90 91 cf 24 	lds	r25, 0x24CF	; 0x8024cf <memoryConsumedByBuffer+0x1>
    2dc8:	0d 96       	adiw	r24, 0x0d	; 13
    2dca:	82 0f       	add	r24, r18
    2dcc:	91 1d       	adc	r25, r1
    2dce:	80 93 ce 24 	sts	0x24CE, r24	; 0x8024ce <memoryConsumedByBuffer>
    2dd2:	90 93 cf 24 	sts	0x24CF, r25	; 0x8024cf <memoryConsumedByBuffer+0x1>
			numWaitingMsgs++;
    2dd6:	80 91 24 25 	lds	r24, 0x2524	; 0x802524 <numWaitingMsgs>
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    2ddc:	80 93 24 25 	sts	0x2524, r24	; 0x802524 <numWaitingMsgs>
    2de0:	bf be       	out	0x3f, r11	; 63
    __asm__ volatile ("" ::: "memory");
    2de2:	8e ce       	rjmp	.-740    	; 0x2b00 <irReceive+0x1c6>
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
	}else{
		volatile MsgNode* node = incomingMsgHead;
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			if(incomingMsgHead==NULL){
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2de4:	f7 01       	movw	r30, r14
    2de6:	86 a9       	ldd	r24, Z+54	; 0x36
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2de8:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2dea:	f8 94       	cli
		tmp = malloc(size);
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	0d 96       	adiw	r24, 0x0d	; 13
    2df0:	0e 94 56 4c 	call	0x98ac	; 0x98ac <malloc>
    2df4:	7c 01       	movw	r14, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2df6:	df be       	out	0x3f, r13	; 63
    2df8:	80 93 bd 26 	sts	0x26BD, r24	; 0x8026bd <incomingMsgHead>
    2dfc:	90 93 be 26 	sts	0x26BE, r25	; 0x8026be <incomingMsgHead+0x1>
    2e00:	a6 cf       	rjmp	.-180    	; 0x2d4e <irReceive+0x414>
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
	
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
			if(notTimed){
    2e02:	cc 20       	and	r12, r12
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <irReceive+0x4ce>
    2e06:	0e c1       	rjmp	.+540    	; 0x3024 <irReceive+0x6ea>
				receivedIrCmd(dir);
			}else{
				switch(ir_rxtx[dir].data_length){
    2e08:	86 a9       	ldd	r24, Z+54	; 0x36
    2e0a:	88 23       	and	r24, r24
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <irReceive+0x4d6>
    2e0e:	6a c0       	rjmp	.+212    	; 0x2ee4 <irReceive+0x5aa>
    2e10:	81 30       	cpi	r24, 0x01	; 1
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <irReceive+0x4dc>
    2e14:	75 ce       	rjmp	.-790    	; 0x2b00 <irReceive+0x1c6>
					case 0: receivedIrSyncCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
					case 1: receivedRnbCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
    2e16:	c6 80       	ldd	r12, Z+6	; 0x06
    2e18:	d7 80       	ldd	r13, Z+7	; 0x07
    2e1a:	80 80       	ld	r8, Z
    2e1c:	91 80       	ldd	r9, Z+1	; 0x01
    2e1e:	a2 80       	ldd	r10, Z+2	; 0x02
    2e20:	b3 80       	ldd	r11, Z+3	; 0x03
    2e22:	e0 84       	ldd	r14, Z+8	; 0x08
    2e24:	f1 84       	ldd	r15, Z+9	; 0x09
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
	uint32_t rnbCmdSentTime = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2e26:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e28:	f8 94       	cli
		if(!processing_rnb_flag && (irIsBusy(ALL_DIRS)<8)){
    2e2a:	80 91 23 25 	lds	r24, 0x2523	; 0x802523 <processing_rnb_flag>
    2e2e:	81 11       	cpse	r24, r1
    2e30:	f4 c0       	rjmp	.+488    	; 0x301a <irReceive+0x6e0>
    2e32:	8f e3       	ldi	r24, 0x3F	; 63
    2e34:	0e 94 02 13 	call	0x2604	; 0x2604 <irIsBusy>
    2e38:	88 30       	cpi	r24, 0x08	; 8
    2e3a:	08 f0       	brcs	.+2      	; 0x2e3e <irReceive+0x504>
    2e3c:	ee c0       	rjmp	.+476    	; 0x301a <irReceive+0x6e0>
			if(delay!=0xFFFF){
    2e3e:	ff ef       	ldi	r31, 0xFF	; 255
    2e40:	ef 16       	cp	r14, r31
    2e42:	ff 06       	cpc	r15, r31
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <irReceive+0x50e>
    2e46:	e9 c0       	rjmp	.+466    	; 0x301a <irReceive+0x6e0>
				rnbCmdID = senderID;
    2e48:	c0 92 bf 26 	sts	0x26BF, r12	; 0x8026bf <rnbCmdID>
    2e4c:	d0 92 c0 26 	sts	0x26C0, r13	; 0x8026c0 <rnbCmdID+0x1>
				//printf("%04X: %hu\r\n", rnbCmdID, delay+5);			
				if(delay<5) delay = 20-delay;
    2e50:	25 e0       	ldi	r18, 0x05	; 5
    2e52:	e2 16       	cp	r14, r18
    2e54:	f1 04       	cpc	r15, r1
    2e56:	30 f4       	brcc	.+12     	; 0x2e64 <irReceive+0x52a>
    2e58:	84 e1       	ldi	r24, 0x14	; 20
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	ac 01       	movw	r20, r24
    2e5e:	4e 19       	sub	r20, r14
    2e60:	5f 09       	sbc	r21, r15
    2e62:	7a 01       	movw	r14, r20
				rnbCmdSentTime = last_byte-(delay+5);
    2e64:	55 e0       	ldi	r21, 0x05	; 5
    2e66:	e5 0e       	add	r14, r21
    2e68:	f1 1c       	adc	r15, r1
    2e6a:	8e 18       	sub	r8, r14
    2e6c:	9f 08       	sbc	r9, r15
    2e6e:	a1 08       	sbc	r10, r1
    2e70:	b1 08       	sbc	r11, r1
				processThisRNB = 1;
				processing_rnb_flag = 1;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	80 93 23 25 	sts	0x2523, r24	; 0x802523 <processing_rnb_flag>
				hpIrBlock_bm = 0x3F;
    2e78:	8f e3       	ldi	r24, 0x3F	; 63
    2e7a:	80 93 a8 24 	sts	0x24A8, r24	; 0x8024a8 <hpIrBlock_bm>
			if(delay!=0xFFFF){
				rnbCmdID = senderID;
				//printf("%04X: %hu\r\n", rnbCmdID, delay+5);			
				if(delay<5) delay = 20-delay;
				rnbCmdSentTime = last_byte-(delay+5);
				processThisRNB = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e80:	7f be       	out	0x3f, r7	; 63
				processing_rnb_flag = 1;
				hpIrBlock_bm = 0x3F;
			}
		}
	}
	if(processThisRNB){
    2e82:	88 23       	and	r24, r24
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <irReceive+0x54e>
    2e86:	3c ce       	rjmp	.-904    	; 0x2b00 <irReceive+0x1c6>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2e88:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e8a:	f8 94       	cli
    2e8c:	a6 e0       	ldi	r26, 0x06	; 6
    2e8e:	b0 e2       	ldi	r27, 0x20	; 32
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
    2e94:	48 e3       	ldi	r20, 0x38	; 56
    2e96:	07 c0       	rjmp	.+14     	; 0x2ea6 <irReceive+0x56c>
    2e98:	2f 5f       	subi	r18, 0xFF	; 255
    2e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9c:	12 96       	adiw	r26, 0x02	; 2
			}
		}
	}
	if(processThisRNB){
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t dir=0;dir<6;dir++){
    2e9e:	26 30       	cpi	r18, 0x06	; 6
    2ea0:	31 05       	cpc	r19, r1
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <irReceive+0x56c>
    2ea4:	31 c1       	rjmp	.+610    	; 0x3108 <irReceive+0x7ce>
				if(ir_rxtx[dir].senderID==senderID){
    2ea6:	42 9f       	mul	r20, r18
    2ea8:	f0 01       	movw	r30, r0
    2eaa:	43 9f       	mul	r20, r19
    2eac:	f0 0d       	add	r31, r0
    2eae:	11 24       	eor	r1, r1
    2eb0:	e9 5d       	subi	r30, 0xD9	; 217
    2eb2:	fa 4d       	sbci	r31, 0xDA	; 218
    2eb4:	86 81       	ldd	r24, Z+6	; 0x06
    2eb6:	97 81       	ldd	r25, Z+7	; 0x07
    2eb8:	c8 16       	cp	r12, r24
    2eba:	d9 06       	cpc	r13, r25
    2ebc:	69 f7       	brne	.-38     	; 0x2e98 <irReceive+0x55e>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2ebe:	14 82       	std	Z+4, r1	; 0x04
    2ec0:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2ec2:	16 82       	std	Z+6, r1	; 0x06
    2ec4:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2ec6:	10 86       	std	Z+8, r1	; 0x08
    2ec8:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2eca:	12 86       	std	Z+10, r1	; 0x0a
    2ecc:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2ece:	14 86       	std	Z+12, r1	; 0x0c
    2ed0:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2ed2:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2ed4:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2ed6:	ed 91       	ld	r30, X+
    2ed8:	fc 91       	ld	r31, X
    2eda:	11 97       	sbiw	r26, 0x01	; 1
    2edc:	84 81       	ldd	r24, Z+4	; 0x04
    2ede:	80 61       	ori	r24, 0x10	; 16
    2ee0:	84 83       	std	Z+4, r24	; 0x04
    2ee2:	da cf       	rjmp	.-76     	; 0x2e98 <irReceive+0x55e>
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
			if(notTimed){
				receivedIrCmd(dir);
			}else{
				switch(ir_rxtx[dir].data_length){
					case 0: receivedIrSyncCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
    2ee4:	c6 80       	ldd	r12, Z+6	; 0x06
    2ee6:	d7 80       	ldd	r13, Z+7	; 0x07
    2ee8:	80 80       	ld	r8, Z
    2eea:	91 80       	ldd	r9, Z+1	; 0x01
    2eec:	a2 80       	ldd	r10, Z+2	; 0x02
    2eee:	b3 80       	ldd	r11, Z+3	; 0x03
    2ef0:	e0 84       	ldd	r14, Z+8	; 0x08
    2ef2:	f1 84       	ldd	r15, Z+9	; 0x09
}

static void receivedIrSyncCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisFFSync = 0;
	uint16_t count;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2ef4:	9f b7       	in	r25, 0x3f	; 63
    2ef6:	f8 94       	cli
		if(!processingFFsyncFlag){
    2ef8:	80 91 57 23 	lds	r24, 0x2357	; 0x802357 <processingFFsyncFlag>
    2efc:	81 11       	cpse	r24, r1
    2efe:	fc c0       	rjmp	.+504    	; 0x30f8 <irReceive+0x7be>
			count = TCE0.CNT;
    2f00:	60 90 20 0a 	lds	r6, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    2f04:	70 90 21 0a 	lds	r7, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
			if(delay!=0xFFFF){
    2f08:	ff ef       	ldi	r31, 0xFF	; 255
    2f0a:	ef 16       	cp	r14, r31
    2f0c:	ff 06       	cpc	r15, r31
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <irReceive+0x5d8>
    2f10:	f3 c0       	rjmp	.+486    	; 0x30f8 <irReceive+0x7be>
				processThisFFSync = 1;
				processingFFsyncFlag = 1;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	80 93 57 23 	sts	0x2357, r24	; 0x802357 <processingFFsyncFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f18:	9f bf       	out	0x3f, r25	; 63
			}
		}
	}
	if(processThisFFSync){
    2f1a:	88 23       	and	r24, r24
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <irReceive+0x5e6>
    2f1e:	f0 cd       	rjmp	.-1056   	; 0x2b00 <irReceive+0x1c6>
		//printf("senderID: %04X\tdelay: %hu\r\n", ir_rxtx[dir].sender_ID, delay);
		delay = delay+5+(getTime()-last_byte); //The time is measured right before sending and is the last two bytes of the message. Our baud rate means that it takes 5ms to send two bytes.
    2f20:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    2f24:	97 01       	movw	r18, r14
    2f26:	2b 5f       	subi	r18, 0xFB	; 251
    2f28:	3f 4f       	sbci	r19, 0xFF	; 255
    2f2a:	28 19       	sub	r18, r8
    2f2c:	39 09       	sbc	r19, r9
    2f2e:	62 0f       	add	r22, r18
    2f30:	73 1f       	adc	r23, r19

ObsQueue* obsStart;

inline void updateFireflyCounter(volatile uint16_t count, volatile uint16_t delay){
	//printf("%u\r\n", delay);
	uint16_t theDelay = delay*FFSYNC_MS_CONVERSION_FACTOR;
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	0e 94 b3 48 	call	0x9166	; 0x9166 <__floatunsisf>
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a ef       	ldi	r20, 0xFA	; 250
    2f40:	50 e4       	ldi	r21, 0x40	; 64
    2f42:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    2f46:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
	uint16_t obs;
	ObsQueue* node;
	if(count<=theDelay){
    2f4a:	66 15       	cp	r22, r6
    2f4c:	77 05       	cpc	r23, r7
    2f4e:	08 f4       	brcc	.+2      	; 0x2f52 <irReceive+0x618>
    2f50:	0b c1       	rjmp	.+534    	; 0x3168 <irReceive+0x82e>
		obs = count + (FFSYNC_FULL_PERIOD-theDelay);
    2f52:	2f eb       	ldi	r18, 0xBF	; 191
    2f54:	62 1a       	sub	r6, r18
    2f56:	22 e6       	ldi	r18, 0x62	; 98
    2f58:	72 0a       	sbc	r7, r18
    2f5a:	66 1a       	sub	r6, r22
    2f5c:	77 0a       	sbc	r7, r23
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2f5e:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f60:	f8 94       	cli
		tmp = malloc(size);
    2f62:	86 e0       	ldi	r24, 0x06	; 6
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	0e 94 56 4c 	call	0x98ac	; 0x98ac <malloc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f6a:	ff be       	out	0x3f, r15	; 63
	}else{
		obs = count - theDelay;
	}
	node = (ObsQueue*)myMalloc(sizeof(ObsQueue));
	if(node==NULL){
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	41 f1       	breq	.+80     	; 0x2fc0 <irReceive+0x686>
		return;
	}
	ObsQueue* curr = obsStart->prev;
    2f70:	e0 91 aa 24 	lds	r30, 0x24AA	; 0x8024aa <obsStart>
    2f74:	f0 91 ab 24 	lds	r31, 0x24AB	; 0x8024ab <obsStart+0x1>
    2f78:	04 80       	ldd	r0, Z+4	; 0x04
    2f7a:	f5 81       	ldd	r31, Z+5	; 0x05
    2f7c:	e0 2d       	mov	r30, r0
	while(obs < curr->obs){
    2f7e:	20 81       	ld	r18, Z
    2f80:	31 81       	ldd	r19, Z+1	; 0x01
    2f82:	62 16       	cp	r6, r18
    2f84:	73 06       	cpc	r7, r19
    2f86:	40 f4       	brcc	.+16     	; 0x2f98 <irReceive+0x65e>
		curr = curr->prev;
    2f88:	04 80       	ldd	r0, Z+4	; 0x04
    2f8a:	f5 81       	ldd	r31, Z+5	; 0x05
    2f8c:	e0 2d       	mov	r30, r0
	node = (ObsQueue*)myMalloc(sizeof(ObsQueue));
	if(node==NULL){
		return;
	}
	ObsQueue* curr = obsStart->prev;
	while(obs < curr->obs){
    2f8e:	20 81       	ld	r18, Z
    2f90:	31 81       	ldd	r19, Z+1	; 0x01
    2f92:	62 16       	cp	r6, r18
    2f94:	73 06       	cpc	r7, r19
    2f96:	c0 f3       	brcs	.-16     	; 0x2f88 <irReceive+0x64e>
		curr = curr->prev;
	}
	(curr->next)->prev = node;
    2f98:	22 81       	ldd	r18, Z+2	; 0x02
    2f9a:	33 81       	ldd	r19, Z+3	; 0x03
    2f9c:	d9 01       	movw	r26, r18
    2f9e:	14 96       	adiw	r26, 0x04	; 4
    2fa0:	8d 93       	st	X+, r24
    2fa2:	9c 93       	st	X, r25
    2fa4:	15 97       	sbiw	r26, 0x05	; 5
	node->next = curr->next;
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	12 96       	adiw	r26, 0x02	; 2
    2faa:	2d 93       	st	X+, r18
    2fac:	3c 93       	st	X, r19
    2fae:	13 97       	sbiw	r26, 0x03	; 3
	node->prev = curr;
    2fb0:	14 96       	adiw	r26, 0x04	; 4
    2fb2:	ed 93       	st	X+, r30
    2fb4:	fc 93       	st	X, r31
    2fb6:	15 97       	sbiw	r26, 0x05	; 5
	curr->next = node;
    2fb8:	82 83       	std	Z+2, r24	; 0x02
    2fba:	93 83       	std	Z+3, r25	; 0x03
			
	node->obs = obs;
    2fbc:	6d 92       	st	X+, r6
    2fbe:	7c 92       	st	X, r7
		updateFireflyCounter(count, delay);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2fc0:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2fc2:	f8 94       	cli
    2fc4:	a6 e0       	ldi	r26, 0x06	; 6
    2fc6:	b0 e2       	ldi	r27, 0x20	; 32
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
    2fcc:	48 e3       	ldi	r20, 0x38	; 56
    2fce:	06 c0       	rjmp	.+12     	; 0x2fdc <irReceive+0x6a2>
    2fd0:	01 96       	adiw	r24, 0x01	; 1
    2fd2:	12 96       	adiw	r26, 0x02	; 2
	if(processThisFFSync){
		//printf("senderID: %04X\tdelay: %hu\r\n", ir_rxtx[dir].sender_ID, delay);
		delay = delay+5+(getTime()-last_byte); //The time is measured right before sending and is the last two bytes of the message. Our baud rate means that it takes 5ms to send two bytes.
		updateFireflyCounter(count, delay);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t dir=0;dir<6;dir++){
    2fd4:	86 30       	cpi	r24, 0x06	; 6
    2fd6:	91 05       	cpc	r25, r1
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <irReceive+0x6a2>
    2fda:	92 c0       	rjmp	.+292    	; 0x3100 <irReceive+0x7c6>
				if(ir_rxtx[dir].senderID==senderID){
    2fdc:	48 9f       	mul	r20, r24
    2fde:	f0 01       	movw	r30, r0
    2fe0:	49 9f       	mul	r20, r25
    2fe2:	f0 0d       	add	r31, r0
    2fe4:	11 24       	eor	r1, r1
    2fe6:	e9 5d       	subi	r30, 0xD9	; 217
    2fe8:	fa 4d       	sbci	r31, 0xDA	; 218
    2fea:	26 81       	ldd	r18, Z+6	; 0x06
    2fec:	37 81       	ldd	r19, Z+7	; 0x07
    2fee:	c2 16       	cp	r12, r18
    2ff0:	d3 06       	cpc	r13, r19
    2ff2:	71 f7       	brne	.-36     	; 0x2fd0 <irReceive+0x696>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2ff4:	14 82       	std	Z+4, r1	; 0x04
    2ff6:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2ff8:	16 82       	std	Z+6, r1	; 0x06
    2ffa:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2ffc:	10 86       	std	Z+8, r1	; 0x08
    2ffe:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    3000:	12 86       	std	Z+10, r1	; 0x0a
    3002:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    3004:	14 86       	std	Z+12, r1	; 0x0c
    3006:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    3008:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    300a:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    300c:	ed 91       	ld	r30, X+
    300e:	fc 91       	ld	r31, X
    3010:	11 97       	sbiw	r26, 0x01	; 1
    3012:	24 81       	ldd	r18, Z+4	; 0x04
    3014:	20 61       	ori	r18, 0x10	; 16
    3016:	24 83       	std	Z+4, r18	; 0x04
    3018:	db cf       	rjmp	.-74     	; 0x2fd0 <irReceive+0x696>
	//printf("F\r\n");
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
	uint32_t rnbCmdSentTime = 0;
    301a:	81 2c       	mov	r8, r1
    301c:	91 2c       	mov	r9, r1
    301e:	54 01       	movw	r10, r8
	}
	//printf("F\r\n");
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	2e cf       	rjmp	.-420    	; 0x2e80 <irReceive+0x546>
	}
}

static void receivedIrCmd(uint8_t dir){
	uint8_t processThisCommand = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3024:	cf b6       	in	r12, 0x3f	; 63
    3026:	f8 94       	cli
		if(!processingCmdFlag){
    3028:	80 91 58 23 	lds	r24, 0x2358	; 0x802358 <processingCmdFlag>
    302c:	81 11       	cpse	r24, r1
    302e:	66 c0       	rjmp	.+204    	; 0x30fc <irReceive+0x7c2>
			processThisCommand = 1;
			memcpy((void*)cmdBuffer, (char*)ir_rxtx[dir].buf, ir_rxtx[dir].data_length);
    3030:	46 a9       	ldd	r20, Z+54	; 0x36
    3032:	50 e0       	ldi	r21, 0x00	; 0
    3034:	6b 5c       	subi	r22, 0xCB	; 203
    3036:	7a 4d       	sbci	r23, 0xDA	; 218
    3038:	85 e1       	ldi	r24, 0x15	; 21
    303a:	93 e2       	ldi	r25, 0x23	; 35
    303c:	0e 94 ae 4f 	call	0x9f5c	; 0x9f5c <memcpy>
			cmdBuffer[ir_rxtx[dir].data_length]='\0';
    3040:	d7 01       	movw	r26, r14
    3042:	d6 96       	adiw	r26, 0x36	; 54
    3044:	ec 91       	ld	r30, X
    3046:	d6 97       	sbiw	r26, 0x36	; 54
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	eb 5e       	subi	r30, 0xEB	; 235
    304c:	fc 4d       	sbci	r31, 0xDC	; 220
    304e:	10 82       	st	Z, r1
			cmdLength = ir_rxtx[dir].data_length;
    3050:	d6 96       	adiw	r26, 0x36	; 54
    3052:	8c 91       	ld	r24, X
    3054:	d6 97       	sbiw	r26, 0x36	; 54
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	80 93 55 23 	sts	0x2355, r24	; 0x802355 <cmdLength>
    305c:	90 93 56 23 	sts	0x2356, r25	; 0x802356 <cmdLength+0x1>
			cmdArrivalTime = ir_rxtx[dir].last_byte;	//This is a 'global' value, referenced by other *.c files.
    3060:	8d 91       	ld	r24, X+
    3062:	9d 91       	ld	r25, X+
    3064:	0d 90       	ld	r0, X+
    3066:	bc 91       	ld	r27, X
    3068:	a0 2d       	mov	r26, r0
    306a:	80 93 cb 26 	sts	0x26CB, r24	; 0x8026cb <cmdArrivalTime>
    306e:	90 93 cc 26 	sts	0x26CC, r25	; 0x8026cc <cmdArrivalTime+0x1>
    3072:	a0 93 cd 26 	sts	0x26CD, r26	; 0x8026cd <cmdArrivalTime+0x2>
    3076:	b0 93 ce 26 	sts	0x26CE, r27	; 0x8026ce <cmdArrivalTime+0x3>
			cmdSenderId = ir_rxtx[dir].senderID;		//This is a 'global' value, referenced by other *.c files.
    307a:	f7 01       	movw	r30, r14
    307c:	86 81       	ldd	r24, Z+6	; 0x06
    307e:	97 81       	ldd	r25, Z+7	; 0x07
    3080:	80 93 25 25 	sts	0x2525, r24	; 0x802525 <cmdSenderId>
    3084:	90 93 26 25 	sts	0x2526, r25	; 0x802526 <cmdSenderId+0x1>
			cmdArrivalDir = dir;
    3088:	d0 92 c5 24 	sts	0x24C5, r13	; 0x8024c5 <cmdArrivalDir>
			processingCmdFlag = 1;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	80 93 58 23 	sts	0x2358, r24	; 0x802358 <processingCmdFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3092:	cf be       	out	0x3f, r12	; 63
		}
	}
	if(processThisCommand){
    3094:	88 23       	and	r24, r24
    3096:	09 f4       	brne	.+2      	; 0x309a <irReceive+0x760>
    3098:	33 cd       	rjmp	.-1434   	; 0x2b00 <irReceive+0x1c6>
		scheduleTask(5, handleCmdWrapper, NULL);
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	4b e0       	ldi	r20, 0x0B	; 11
    30a0:	50 e1       	ldi	r21, 0x10	; 16
    30a2:	65 e0       	ldi	r22, 0x05	; 5
    30a4:	70 e0       	ldi	r23, 0x00	; 0
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	0e 94 f7 35 	call	0x6bee	; 0x6bee <scheduleTask>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    30ae:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    30b0:	f8 94       	cli
    30b2:	a6 e0       	ldi	r26, 0x06	; 6
    30b4:	b0 e2       	ldi	r27, 0x20	; 32
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	90 e0       	ldi	r25, 0x00	; 0
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    30ba:	38 e3       	ldi	r19, 0x38	; 56
    30bc:	38 9f       	mul	r19, r24
    30be:	f0 01       	movw	r30, r0
    30c0:	39 9f       	mul	r19, r25
    30c2:	f0 0d       	add	r31, r0
    30c4:	11 24       	eor	r1, r1
    30c6:	e9 5d       	subi	r30, 0xD9	; 217
    30c8:	fa 4d       	sbci	r31, 0xDA	; 218
    30ca:	14 82       	std	Z+4, r1	; 0x04
    30cc:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    30ce:	16 82       	std	Z+6, r1	; 0x06
    30d0:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    30d2:	10 86       	std	Z+8, r1	; 0x08
    30d4:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    30d6:	12 86       	std	Z+10, r1	; 0x0a
    30d8:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    30da:	14 86       	std	Z+12, r1	; 0x0c
    30dc:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    30de:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    30e0:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    30e2:	ed 91       	ld	r30, X+
    30e4:	fd 91       	ld	r31, X+
    30e6:	24 81       	ldd	r18, Z+4	; 0x04
    30e8:	20 61       	ori	r18, 0x10	; 16
    30ea:	24 83       	std	Z+4, r18	; 0x04
    30ec:	01 96       	adiw	r24, 0x01	; 1
		}
	}
	if(processThisCommand){
		scheduleTask(5, handleCmdWrapper, NULL);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t other_dir=0;other_dir<6;other_dir++){
    30ee:	86 30       	cpi	r24, 0x06	; 6
    30f0:	91 05       	cpc	r25, r1
    30f2:	21 f7       	brne	.-56     	; 0x30bc <irReceive+0x782>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    30f4:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    30f6:	04 cd       	rjmp	.-1528   	; 0x2b00 <irReceive+0x1c6>
		}
	}
}

static void receivedIrSyncCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisFFSync = 0;
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	0e cf       	rjmp	.-484    	; 0x2f18 <irReceive+0x5de>
		handleCompletedMsg(dir);
	}
}

static void receivedIrCmd(uint8_t dir){
	uint8_t processThisCommand = 0;
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	c9 cf       	rjmp	.-110    	; 0x3092 <irReceive+0x758>
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
					clearIrBuffer(dir);
				}
			}
			processingFFsyncFlag = 0;
    3100:	10 92 57 23 	sts	0x2357, r1	; 0x802357 <processingFFsyncFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3104:	5f bf       	out	0x3f, r21	; 63
    __asm__ volatile ("" ::: "memory");
    3106:	fc cc       	rjmp	.-1544   	; 0x2b00 <irReceive+0x1c6>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3108:	5f bf       	out	0x3f, r21	; 63
				if(ir_rxtx[dir].senderID==senderID){
					clearIrBuffer(dir);
				}
			}
		}
		irRangeMeas(rnbCmdSentTime);	
    310a:	c5 01       	movw	r24, r10
    310c:	b4 01       	movw	r22, r8
    310e:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <irRangeMeas>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3112:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3114:	f8 94       	cli
			hpIrBlock_bm = 0;
    3116:	10 92 a8 24 	sts	0x24A8, r1	; 0x8024a8 <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    311a:	8f bf       	out	0x3f, r24	; 63
		}
		scheduleTask(10, useRnbData, NULL);
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	4a e8       	ldi	r20, 0x8A	; 138
    3122:	5b e2       	ldi	r21, 0x2B	; 43
    3124:	6a e0       	ldi	r22, 0x0A	; 10
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	0e 94 f7 35 	call	0x6bee	; 0x6bee <scheduleTask>
    3130:	e7 cc       	rjmp	.-1586   	; 0x2b00 <irReceive+0x1c6>
	   } while (busy);
}

static void addMsgToMsgQueue(uint8_t dir){
	if(ir_rxtx[dir].data_length == 0){
		printf_P(PSTR("ERROR! Should NOT be adding 0-length message to queue.\r\n"));
    3132:	8b e2       	ldi	r24, 0x2B	; 43
    3134:	96 e0       	ldi	r25, 0x06	; 6
    3136:	9f 93       	push	r25
    3138:	8f 93       	push	r24
    313a:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	de cc       	rjmp	.-1604   	; 0x2b00 <irReceive+0x1c6>
	}else if(ir_rxtx[dir].data_length > IR_BUFFER_SIZE){
		printf_P(PSTR("ERROR! Should NOT be adding a message with length greater than buffer size to queue.\r\n"));
    3144:	84 ed       	ldi	r24, 0xD4	; 212
    3146:	95 e0       	ldi	r25, 0x05	; 5
    3148:	9f 93       	push	r25
    314a:	8f 93       	push	r24
    314c:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	d5 cc       	rjmp	.-1622   	; 0x2b00 <irReceive+0x1c6>
	}else if(memoryConsumedByBuffer > 500){
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
    3156:	86 e6       	ldi	r24, 0x66	; 102
    3158:	95 e0       	ldi	r25, 0x05	; 5
    315a:	9f 93       	push	r25
    315c:	8f 93       	push	r24
    315e:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	cc cc       	rjmp	.-1640   	; 0x2b00 <irReceive+0x1c6>
	uint16_t obs;
	ObsQueue* node;
	if(count<=theDelay){
		obs = count + (FFSYNC_FULL_PERIOD-theDelay);
	}else{
		obs = count - theDelay;
    3168:	66 1a       	sub	r6, r22
    316a:	77 0a       	sbc	r7, r23
    316c:	f8 ce       	rjmp	.-528    	; 0x2f5e <irReceive+0x624>

0000316e <__vector_25>:
	}
	return receiving | transmitting | timed_cmd | hp_block;
}

// ISRs for IR channel 0
ISR( USARTC0_RXC_vect ) { irReceive(0); }
    316e:	1f 92       	push	r1
    3170:	0f 92       	push	r0
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	0f 92       	push	r0
    3176:	11 24       	eor	r1, r1
    3178:	0b b6       	in	r0, 0x3b	; 59
    317a:	0f 92       	push	r0
    317c:	2f 93       	push	r18
    317e:	3f 93       	push	r19
    3180:	4f 93       	push	r20
    3182:	5f 93       	push	r21
    3184:	6f 93       	push	r22
    3186:	7f 93       	push	r23
    3188:	8f 93       	push	r24
    318a:	9f 93       	push	r25
    318c:	af 93       	push	r26
    318e:	bf 93       	push	r27
    3190:	ef 93       	push	r30
    3192:	ff 93       	push	r31
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	0e 94 9d 14 	call	0x293a	; 0x293a <irReceive>
    319a:	ff 91       	pop	r31
    319c:	ef 91       	pop	r30
    319e:	bf 91       	pop	r27
    31a0:	af 91       	pop	r26
    31a2:	9f 91       	pop	r25
    31a4:	8f 91       	pop	r24
    31a6:	7f 91       	pop	r23
    31a8:	6f 91       	pop	r22
    31aa:	5f 91       	pop	r21
    31ac:	4f 91       	pop	r20
    31ae:	3f 91       	pop	r19
    31b0:	2f 91       	pop	r18
    31b2:	0f 90       	pop	r0
    31b4:	0b be       	out	0x3b, r0	; 59
    31b6:	0f 90       	pop	r0
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	0f 90       	pop	r0
    31bc:	1f 90       	pop	r1
    31be:	18 95       	reti

000031c0 <__vector_27>:
ISR( USARTC0_TXC_vect ) { irTransmitComplete(0); }
    31c0:	1f 92       	push	r1
    31c2:	0f 92       	push	r0
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	0f 92       	push	r0
    31c8:	11 24       	eor	r1, r1
    31ca:	0b b6       	in	r0, 0x3b	; 59
    31cc:	0f 92       	push	r0
    31ce:	2f 93       	push	r18
    31d0:	3f 93       	push	r19
    31d2:	4f 93       	push	r20
    31d4:	5f 93       	push	r21
    31d6:	6f 93       	push	r22
    31d8:	7f 93       	push	r23
    31da:	8f 93       	push	r24
    31dc:	9f 93       	push	r25
    31de:	af 93       	push	r26
    31e0:	bf 93       	push	r27
    31e2:	ef 93       	push	r30
    31e4:	ff 93       	push	r31
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <irTransmitComplete>
    31ec:	ff 91       	pop	r31
    31ee:	ef 91       	pop	r30
    31f0:	bf 91       	pop	r27
    31f2:	af 91       	pop	r26
    31f4:	9f 91       	pop	r25
    31f6:	8f 91       	pop	r24
    31f8:	7f 91       	pop	r23
    31fa:	6f 91       	pop	r22
    31fc:	5f 91       	pop	r21
    31fe:	4f 91       	pop	r20
    3200:	3f 91       	pop	r19
    3202:	2f 91       	pop	r18
    3204:	0f 90       	pop	r0
    3206:	0b be       	out	0x3b, r0	; 59
    3208:	0f 90       	pop	r0
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	0f 90       	pop	r0
    320e:	1f 90       	pop	r1
    3210:	18 95       	reti

00003212 <__vector_26>:
ISR( USARTC0_DRE_vect ) { irTransmit(0); }
    3212:	1f 92       	push	r1
    3214:	0f 92       	push	r0
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	0f 92       	push	r0
    321a:	11 24       	eor	r1, r1
    321c:	0b b6       	in	r0, 0x3b	; 59
    321e:	0f 92       	push	r0
    3220:	2f 93       	push	r18
    3222:	3f 93       	push	r19
    3224:	4f 93       	push	r20
    3226:	5f 93       	push	r21
    3228:	6f 93       	push	r22
    322a:	7f 93       	push	r23
    322c:	8f 93       	push	r24
    322e:	9f 93       	push	r25
    3230:	af 93       	push	r26
    3232:	bf 93       	push	r27
    3234:	ef 93       	push	r30
    3236:	ff 93       	push	r31
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	0e 94 43 10 	call	0x2086	; 0x2086 <irTransmit>
    323e:	ff 91       	pop	r31
    3240:	ef 91       	pop	r30
    3242:	bf 91       	pop	r27
    3244:	af 91       	pop	r26
    3246:	9f 91       	pop	r25
    3248:	8f 91       	pop	r24
    324a:	7f 91       	pop	r23
    324c:	6f 91       	pop	r22
    324e:	5f 91       	pop	r21
    3250:	4f 91       	pop	r20
    3252:	3f 91       	pop	r19
    3254:	2f 91       	pop	r18
    3256:	0f 90       	pop	r0
    3258:	0b be       	out	0x3b, r0	; 59
    325a:	0f 90       	pop	r0
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	0f 90       	pop	r0
    3260:	1f 90       	pop	r1
    3262:	18 95       	reti

00003264 <__vector_28>:

// ISRs for IR channel 1
ISR( USARTC1_RXC_vect ) { irReceive(1); }
    3264:	1f 92       	push	r1
    3266:	0f 92       	push	r0
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	0f 92       	push	r0
    326c:	11 24       	eor	r1, r1
    326e:	0b b6       	in	r0, 0x3b	; 59
    3270:	0f 92       	push	r0
    3272:	2f 93       	push	r18
    3274:	3f 93       	push	r19
    3276:	4f 93       	push	r20
    3278:	5f 93       	push	r21
    327a:	6f 93       	push	r22
    327c:	7f 93       	push	r23
    327e:	8f 93       	push	r24
    3280:	9f 93       	push	r25
    3282:	af 93       	push	r26
    3284:	bf 93       	push	r27
    3286:	ef 93       	push	r30
    3288:	ff 93       	push	r31
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	0e 94 9d 14 	call	0x293a	; 0x293a <irReceive>
    3290:	ff 91       	pop	r31
    3292:	ef 91       	pop	r30
    3294:	bf 91       	pop	r27
    3296:	af 91       	pop	r26
    3298:	9f 91       	pop	r25
    329a:	8f 91       	pop	r24
    329c:	7f 91       	pop	r23
    329e:	6f 91       	pop	r22
    32a0:	5f 91       	pop	r21
    32a2:	4f 91       	pop	r20
    32a4:	3f 91       	pop	r19
    32a6:	2f 91       	pop	r18
    32a8:	0f 90       	pop	r0
    32aa:	0b be       	out	0x3b, r0	; 59
    32ac:	0f 90       	pop	r0
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	0f 90       	pop	r0
    32b2:	1f 90       	pop	r1
    32b4:	18 95       	reti

000032b6 <__vector_30>:
ISR( USARTC1_TXC_vect ) { irTransmitComplete(1); }
    32b6:	1f 92       	push	r1
    32b8:	0f 92       	push	r0
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	0f 92       	push	r0
    32be:	11 24       	eor	r1, r1
    32c0:	0b b6       	in	r0, 0x3b	; 59
    32c2:	0f 92       	push	r0
    32c4:	2f 93       	push	r18
    32c6:	3f 93       	push	r19
    32c8:	4f 93       	push	r20
    32ca:	5f 93       	push	r21
    32cc:	6f 93       	push	r22
    32ce:	7f 93       	push	r23
    32d0:	8f 93       	push	r24
    32d2:	9f 93       	push	r25
    32d4:	af 93       	push	r26
    32d6:	bf 93       	push	r27
    32d8:	ef 93       	push	r30
    32da:	ff 93       	push	r31
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <irTransmitComplete>
    32e2:	ff 91       	pop	r31
    32e4:	ef 91       	pop	r30
    32e6:	bf 91       	pop	r27
    32e8:	af 91       	pop	r26
    32ea:	9f 91       	pop	r25
    32ec:	8f 91       	pop	r24
    32ee:	7f 91       	pop	r23
    32f0:	6f 91       	pop	r22
    32f2:	5f 91       	pop	r21
    32f4:	4f 91       	pop	r20
    32f6:	3f 91       	pop	r19
    32f8:	2f 91       	pop	r18
    32fa:	0f 90       	pop	r0
    32fc:	0b be       	out	0x3b, r0	; 59
    32fe:	0f 90       	pop	r0
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	0f 90       	pop	r0
    3304:	1f 90       	pop	r1
    3306:	18 95       	reti

00003308 <__vector_29>:
ISR( USARTC1_DRE_vect ) { irTransmit(1); }
    3308:	1f 92       	push	r1
    330a:	0f 92       	push	r0
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	0f 92       	push	r0
    3310:	11 24       	eor	r1, r1
    3312:	0b b6       	in	r0, 0x3b	; 59
    3314:	0f 92       	push	r0
    3316:	2f 93       	push	r18
    3318:	3f 93       	push	r19
    331a:	4f 93       	push	r20
    331c:	5f 93       	push	r21
    331e:	6f 93       	push	r22
    3320:	7f 93       	push	r23
    3322:	8f 93       	push	r24
    3324:	9f 93       	push	r25
    3326:	af 93       	push	r26
    3328:	bf 93       	push	r27
    332a:	ef 93       	push	r30
    332c:	ff 93       	push	r31
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	0e 94 43 10 	call	0x2086	; 0x2086 <irTransmit>
    3334:	ff 91       	pop	r31
    3336:	ef 91       	pop	r30
    3338:	bf 91       	pop	r27
    333a:	af 91       	pop	r26
    333c:	9f 91       	pop	r25
    333e:	8f 91       	pop	r24
    3340:	7f 91       	pop	r23
    3342:	6f 91       	pop	r22
    3344:	5f 91       	pop	r21
    3346:	4f 91       	pop	r20
    3348:	3f 91       	pop	r19
    334a:	2f 91       	pop	r18
    334c:	0f 90       	pop	r0
    334e:	0b be       	out	0x3b, r0	; 59
    3350:	0f 90       	pop	r0
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	0f 90       	pop	r0
    3356:	1f 90       	pop	r1
    3358:	18 95       	reti

0000335a <__vector_88>:

// ISRs for IR channel 2
ISR( USARTD0_RXC_vect ) { irReceive(2); }
    335a:	1f 92       	push	r1
    335c:	0f 92       	push	r0
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	0f 92       	push	r0
    3362:	11 24       	eor	r1, r1
    3364:	0b b6       	in	r0, 0x3b	; 59
    3366:	0f 92       	push	r0
    3368:	2f 93       	push	r18
    336a:	3f 93       	push	r19
    336c:	4f 93       	push	r20
    336e:	5f 93       	push	r21
    3370:	6f 93       	push	r22
    3372:	7f 93       	push	r23
    3374:	8f 93       	push	r24
    3376:	9f 93       	push	r25
    3378:	af 93       	push	r26
    337a:	bf 93       	push	r27
    337c:	ef 93       	push	r30
    337e:	ff 93       	push	r31
    3380:	82 e0       	ldi	r24, 0x02	; 2
    3382:	0e 94 9d 14 	call	0x293a	; 0x293a <irReceive>
    3386:	ff 91       	pop	r31
    3388:	ef 91       	pop	r30
    338a:	bf 91       	pop	r27
    338c:	af 91       	pop	r26
    338e:	9f 91       	pop	r25
    3390:	8f 91       	pop	r24
    3392:	7f 91       	pop	r23
    3394:	6f 91       	pop	r22
    3396:	5f 91       	pop	r21
    3398:	4f 91       	pop	r20
    339a:	3f 91       	pop	r19
    339c:	2f 91       	pop	r18
    339e:	0f 90       	pop	r0
    33a0:	0b be       	out	0x3b, r0	; 59
    33a2:	0f 90       	pop	r0
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	0f 90       	pop	r0
    33a8:	1f 90       	pop	r1
    33aa:	18 95       	reti

000033ac <__vector_90>:
ISR( USARTD0_TXC_vect ) { irTransmitComplete(2); }
    33ac:	1f 92       	push	r1
    33ae:	0f 92       	push	r0
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	0f 92       	push	r0
    33b4:	11 24       	eor	r1, r1
    33b6:	0b b6       	in	r0, 0x3b	; 59
    33b8:	0f 92       	push	r0
    33ba:	2f 93       	push	r18
    33bc:	3f 93       	push	r19
    33be:	4f 93       	push	r20
    33c0:	5f 93       	push	r21
    33c2:	6f 93       	push	r22
    33c4:	7f 93       	push	r23
    33c6:	8f 93       	push	r24
    33c8:	9f 93       	push	r25
    33ca:	af 93       	push	r26
    33cc:	bf 93       	push	r27
    33ce:	ef 93       	push	r30
    33d0:	ff 93       	push	r31
    33d2:	82 e0       	ldi	r24, 0x02	; 2
    33d4:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <irTransmitComplete>
    33d8:	ff 91       	pop	r31
    33da:	ef 91       	pop	r30
    33dc:	bf 91       	pop	r27
    33de:	af 91       	pop	r26
    33e0:	9f 91       	pop	r25
    33e2:	8f 91       	pop	r24
    33e4:	7f 91       	pop	r23
    33e6:	6f 91       	pop	r22
    33e8:	5f 91       	pop	r21
    33ea:	4f 91       	pop	r20
    33ec:	3f 91       	pop	r19
    33ee:	2f 91       	pop	r18
    33f0:	0f 90       	pop	r0
    33f2:	0b be       	out	0x3b, r0	; 59
    33f4:	0f 90       	pop	r0
    33f6:	0f be       	out	0x3f, r0	; 63
    33f8:	0f 90       	pop	r0
    33fa:	1f 90       	pop	r1
    33fc:	18 95       	reti

000033fe <__vector_89>:
ISR( USARTD0_DRE_vect ) { irTransmit(2); }
    33fe:	1f 92       	push	r1
    3400:	0f 92       	push	r0
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	0f 92       	push	r0
    3406:	11 24       	eor	r1, r1
    3408:	0b b6       	in	r0, 0x3b	; 59
    340a:	0f 92       	push	r0
    340c:	2f 93       	push	r18
    340e:	3f 93       	push	r19
    3410:	4f 93       	push	r20
    3412:	5f 93       	push	r21
    3414:	6f 93       	push	r22
    3416:	7f 93       	push	r23
    3418:	8f 93       	push	r24
    341a:	9f 93       	push	r25
    341c:	af 93       	push	r26
    341e:	bf 93       	push	r27
    3420:	ef 93       	push	r30
    3422:	ff 93       	push	r31
    3424:	82 e0       	ldi	r24, 0x02	; 2
    3426:	0e 94 43 10 	call	0x2086	; 0x2086 <irTransmit>
    342a:	ff 91       	pop	r31
    342c:	ef 91       	pop	r30
    342e:	bf 91       	pop	r27
    3430:	af 91       	pop	r26
    3432:	9f 91       	pop	r25
    3434:	8f 91       	pop	r24
    3436:	7f 91       	pop	r23
    3438:	6f 91       	pop	r22
    343a:	5f 91       	pop	r21
    343c:	4f 91       	pop	r20
    343e:	3f 91       	pop	r19
    3440:	2f 91       	pop	r18
    3442:	0f 90       	pop	r0
    3444:	0b be       	out	0x3b, r0	; 59
    3446:	0f 90       	pop	r0
    3448:	0f be       	out	0x3f, r0	; 63
    344a:	0f 90       	pop	r0
    344c:	1f 90       	pop	r1
    344e:	18 95       	reti

00003450 <__vector_58>:

// ISRs for IR channel 3
ISR( USARTE0_RXC_vect ) { irReceive(3); }
    3450:	1f 92       	push	r1
    3452:	0f 92       	push	r0
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	0f 92       	push	r0
    3458:	11 24       	eor	r1, r1
    345a:	0b b6       	in	r0, 0x3b	; 59
    345c:	0f 92       	push	r0
    345e:	2f 93       	push	r18
    3460:	3f 93       	push	r19
    3462:	4f 93       	push	r20
    3464:	5f 93       	push	r21
    3466:	6f 93       	push	r22
    3468:	7f 93       	push	r23
    346a:	8f 93       	push	r24
    346c:	9f 93       	push	r25
    346e:	af 93       	push	r26
    3470:	bf 93       	push	r27
    3472:	ef 93       	push	r30
    3474:	ff 93       	push	r31
    3476:	83 e0       	ldi	r24, 0x03	; 3
    3478:	0e 94 9d 14 	call	0x293a	; 0x293a <irReceive>
    347c:	ff 91       	pop	r31
    347e:	ef 91       	pop	r30
    3480:	bf 91       	pop	r27
    3482:	af 91       	pop	r26
    3484:	9f 91       	pop	r25
    3486:	8f 91       	pop	r24
    3488:	7f 91       	pop	r23
    348a:	6f 91       	pop	r22
    348c:	5f 91       	pop	r21
    348e:	4f 91       	pop	r20
    3490:	3f 91       	pop	r19
    3492:	2f 91       	pop	r18
    3494:	0f 90       	pop	r0
    3496:	0b be       	out	0x3b, r0	; 59
    3498:	0f 90       	pop	r0
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	0f 90       	pop	r0
    349e:	1f 90       	pop	r1
    34a0:	18 95       	reti

000034a2 <__vector_60>:
ISR( USARTE0_TXC_vect ) { irTransmitComplete(3); }
    34a2:	1f 92       	push	r1
    34a4:	0f 92       	push	r0
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	0f 92       	push	r0
    34aa:	11 24       	eor	r1, r1
    34ac:	0b b6       	in	r0, 0x3b	; 59
    34ae:	0f 92       	push	r0
    34b0:	2f 93       	push	r18
    34b2:	3f 93       	push	r19
    34b4:	4f 93       	push	r20
    34b6:	5f 93       	push	r21
    34b8:	6f 93       	push	r22
    34ba:	7f 93       	push	r23
    34bc:	8f 93       	push	r24
    34be:	9f 93       	push	r25
    34c0:	af 93       	push	r26
    34c2:	bf 93       	push	r27
    34c4:	ef 93       	push	r30
    34c6:	ff 93       	push	r31
    34c8:	83 e0       	ldi	r24, 0x03	; 3
    34ca:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <irTransmitComplete>
    34ce:	ff 91       	pop	r31
    34d0:	ef 91       	pop	r30
    34d2:	bf 91       	pop	r27
    34d4:	af 91       	pop	r26
    34d6:	9f 91       	pop	r25
    34d8:	8f 91       	pop	r24
    34da:	7f 91       	pop	r23
    34dc:	6f 91       	pop	r22
    34de:	5f 91       	pop	r21
    34e0:	4f 91       	pop	r20
    34e2:	3f 91       	pop	r19
    34e4:	2f 91       	pop	r18
    34e6:	0f 90       	pop	r0
    34e8:	0b be       	out	0x3b, r0	; 59
    34ea:	0f 90       	pop	r0
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	0f 90       	pop	r0
    34f0:	1f 90       	pop	r1
    34f2:	18 95       	reti

000034f4 <__vector_59>:
ISR( USARTE0_DRE_vect ) { irTransmit(3); }
    34f4:	1f 92       	push	r1
    34f6:	0f 92       	push	r0
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	0f 92       	push	r0
    34fc:	11 24       	eor	r1, r1
    34fe:	0b b6       	in	r0, 0x3b	; 59
    3500:	0f 92       	push	r0
    3502:	2f 93       	push	r18
    3504:	3f 93       	push	r19
    3506:	4f 93       	push	r20
    3508:	5f 93       	push	r21
    350a:	6f 93       	push	r22
    350c:	7f 93       	push	r23
    350e:	8f 93       	push	r24
    3510:	9f 93       	push	r25
    3512:	af 93       	push	r26
    3514:	bf 93       	push	r27
    3516:	ef 93       	push	r30
    3518:	ff 93       	push	r31
    351a:	83 e0       	ldi	r24, 0x03	; 3
    351c:	0e 94 43 10 	call	0x2086	; 0x2086 <irTransmit>
    3520:	ff 91       	pop	r31
    3522:	ef 91       	pop	r30
    3524:	bf 91       	pop	r27
    3526:	af 91       	pop	r26
    3528:	9f 91       	pop	r25
    352a:	8f 91       	pop	r24
    352c:	7f 91       	pop	r23
    352e:	6f 91       	pop	r22
    3530:	5f 91       	pop	r21
    3532:	4f 91       	pop	r20
    3534:	3f 91       	pop	r19
    3536:	2f 91       	pop	r18
    3538:	0f 90       	pop	r0
    353a:	0b be       	out	0x3b, r0	; 59
    353c:	0f 90       	pop	r0
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	0f 90       	pop	r0
    3542:	1f 90       	pop	r1
    3544:	18 95       	reti

00003546 <__vector_61>:

// ISRs for IR channel 4
ISR( USARTE1_RXC_vect ) { irReceive(4); }
    3546:	1f 92       	push	r1
    3548:	0f 92       	push	r0
    354a:	0f b6       	in	r0, 0x3f	; 63
    354c:	0f 92       	push	r0
    354e:	11 24       	eor	r1, r1
    3550:	0b b6       	in	r0, 0x3b	; 59
    3552:	0f 92       	push	r0
    3554:	2f 93       	push	r18
    3556:	3f 93       	push	r19
    3558:	4f 93       	push	r20
    355a:	5f 93       	push	r21
    355c:	6f 93       	push	r22
    355e:	7f 93       	push	r23
    3560:	8f 93       	push	r24
    3562:	9f 93       	push	r25
    3564:	af 93       	push	r26
    3566:	bf 93       	push	r27
    3568:	ef 93       	push	r30
    356a:	ff 93       	push	r31
    356c:	84 e0       	ldi	r24, 0x04	; 4
    356e:	0e 94 9d 14 	call	0x293a	; 0x293a <irReceive>
    3572:	ff 91       	pop	r31
    3574:	ef 91       	pop	r30
    3576:	bf 91       	pop	r27
    3578:	af 91       	pop	r26
    357a:	9f 91       	pop	r25
    357c:	8f 91       	pop	r24
    357e:	7f 91       	pop	r23
    3580:	6f 91       	pop	r22
    3582:	5f 91       	pop	r21
    3584:	4f 91       	pop	r20
    3586:	3f 91       	pop	r19
    3588:	2f 91       	pop	r18
    358a:	0f 90       	pop	r0
    358c:	0b be       	out	0x3b, r0	; 59
    358e:	0f 90       	pop	r0
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	0f 90       	pop	r0
    3594:	1f 90       	pop	r1
    3596:	18 95       	reti

00003598 <__vector_63>:
ISR( USARTE1_TXC_vect ) { irTransmitComplete(4); }
    3598:	1f 92       	push	r1
    359a:	0f 92       	push	r0
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	0f 92       	push	r0
    35a0:	11 24       	eor	r1, r1
    35a2:	0b b6       	in	r0, 0x3b	; 59
    35a4:	0f 92       	push	r0
    35a6:	2f 93       	push	r18
    35a8:	3f 93       	push	r19
    35aa:	4f 93       	push	r20
    35ac:	5f 93       	push	r21
    35ae:	6f 93       	push	r22
    35b0:	7f 93       	push	r23
    35b2:	8f 93       	push	r24
    35b4:	9f 93       	push	r25
    35b6:	af 93       	push	r26
    35b8:	bf 93       	push	r27
    35ba:	ef 93       	push	r30
    35bc:	ff 93       	push	r31
    35be:	84 e0       	ldi	r24, 0x04	; 4
    35c0:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <irTransmitComplete>
    35c4:	ff 91       	pop	r31
    35c6:	ef 91       	pop	r30
    35c8:	bf 91       	pop	r27
    35ca:	af 91       	pop	r26
    35cc:	9f 91       	pop	r25
    35ce:	8f 91       	pop	r24
    35d0:	7f 91       	pop	r23
    35d2:	6f 91       	pop	r22
    35d4:	5f 91       	pop	r21
    35d6:	4f 91       	pop	r20
    35d8:	3f 91       	pop	r19
    35da:	2f 91       	pop	r18
    35dc:	0f 90       	pop	r0
    35de:	0b be       	out	0x3b, r0	; 59
    35e0:	0f 90       	pop	r0
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	0f 90       	pop	r0
    35e6:	1f 90       	pop	r1
    35e8:	18 95       	reti

000035ea <__vector_62>:
ISR( USARTE1_DRE_vect ) { irTransmit(4); }
    35ea:	1f 92       	push	r1
    35ec:	0f 92       	push	r0
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	0f 92       	push	r0
    35f2:	11 24       	eor	r1, r1
    35f4:	0b b6       	in	r0, 0x3b	; 59
    35f6:	0f 92       	push	r0
    35f8:	2f 93       	push	r18
    35fa:	3f 93       	push	r19
    35fc:	4f 93       	push	r20
    35fe:	5f 93       	push	r21
    3600:	6f 93       	push	r22
    3602:	7f 93       	push	r23
    3604:	8f 93       	push	r24
    3606:	9f 93       	push	r25
    3608:	af 93       	push	r26
    360a:	bf 93       	push	r27
    360c:	ef 93       	push	r30
    360e:	ff 93       	push	r31
    3610:	84 e0       	ldi	r24, 0x04	; 4
    3612:	0e 94 43 10 	call	0x2086	; 0x2086 <irTransmit>
    3616:	ff 91       	pop	r31
    3618:	ef 91       	pop	r30
    361a:	bf 91       	pop	r27
    361c:	af 91       	pop	r26
    361e:	9f 91       	pop	r25
    3620:	8f 91       	pop	r24
    3622:	7f 91       	pop	r23
    3624:	6f 91       	pop	r22
    3626:	5f 91       	pop	r21
    3628:	4f 91       	pop	r20
    362a:	3f 91       	pop	r19
    362c:	2f 91       	pop	r18
    362e:	0f 90       	pop	r0
    3630:	0b be       	out	0x3b, r0	; 59
    3632:	0f 90       	pop	r0
    3634:	0f be       	out	0x3f, r0	; 63
    3636:	0f 90       	pop	r0
    3638:	1f 90       	pop	r1
    363a:	18 95       	reti

0000363c <__vector_119>:

// ISRs for IR channel 5
ISR( USARTF0_RXC_vect ) { irReceive(5); }
    363c:	1f 92       	push	r1
    363e:	0f 92       	push	r0
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	0f 92       	push	r0
    3644:	11 24       	eor	r1, r1
    3646:	0b b6       	in	r0, 0x3b	; 59
    3648:	0f 92       	push	r0
    364a:	2f 93       	push	r18
    364c:	3f 93       	push	r19
    364e:	4f 93       	push	r20
    3650:	5f 93       	push	r21
    3652:	6f 93       	push	r22
    3654:	7f 93       	push	r23
    3656:	8f 93       	push	r24
    3658:	9f 93       	push	r25
    365a:	af 93       	push	r26
    365c:	bf 93       	push	r27
    365e:	ef 93       	push	r30
    3660:	ff 93       	push	r31
    3662:	85 e0       	ldi	r24, 0x05	; 5
    3664:	0e 94 9d 14 	call	0x293a	; 0x293a <irReceive>
    3668:	ff 91       	pop	r31
    366a:	ef 91       	pop	r30
    366c:	bf 91       	pop	r27
    366e:	af 91       	pop	r26
    3670:	9f 91       	pop	r25
    3672:	8f 91       	pop	r24
    3674:	7f 91       	pop	r23
    3676:	6f 91       	pop	r22
    3678:	5f 91       	pop	r21
    367a:	4f 91       	pop	r20
    367c:	3f 91       	pop	r19
    367e:	2f 91       	pop	r18
    3680:	0f 90       	pop	r0
    3682:	0b be       	out	0x3b, r0	; 59
    3684:	0f 90       	pop	r0
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	0f 90       	pop	r0
    368a:	1f 90       	pop	r1
    368c:	18 95       	reti

0000368e <__vector_121>:
ISR( USARTF0_TXC_vect ) { irTransmitComplete(5); }
    368e:	1f 92       	push	r1
    3690:	0f 92       	push	r0
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	0f 92       	push	r0
    3696:	11 24       	eor	r1, r1
    3698:	0b b6       	in	r0, 0x3b	; 59
    369a:	0f 92       	push	r0
    369c:	2f 93       	push	r18
    369e:	3f 93       	push	r19
    36a0:	4f 93       	push	r20
    36a2:	5f 93       	push	r21
    36a4:	6f 93       	push	r22
    36a6:	7f 93       	push	r23
    36a8:	8f 93       	push	r24
    36aa:	9f 93       	push	r25
    36ac:	af 93       	push	r26
    36ae:	bf 93       	push	r27
    36b0:	ef 93       	push	r30
    36b2:	ff 93       	push	r31
    36b4:	85 e0       	ldi	r24, 0x05	; 5
    36b6:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <irTransmitComplete>
    36ba:	ff 91       	pop	r31
    36bc:	ef 91       	pop	r30
    36be:	bf 91       	pop	r27
    36c0:	af 91       	pop	r26
    36c2:	9f 91       	pop	r25
    36c4:	8f 91       	pop	r24
    36c6:	7f 91       	pop	r23
    36c8:	6f 91       	pop	r22
    36ca:	5f 91       	pop	r21
    36cc:	4f 91       	pop	r20
    36ce:	3f 91       	pop	r19
    36d0:	2f 91       	pop	r18
    36d2:	0f 90       	pop	r0
    36d4:	0b be       	out	0x3b, r0	; 59
    36d6:	0f 90       	pop	r0
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	0f 90       	pop	r0
    36dc:	1f 90       	pop	r1
    36de:	18 95       	reti

000036e0 <__vector_120>:
ISR( USARTF0_DRE_vect ) { irTransmit(5); }
    36e0:	1f 92       	push	r1
    36e2:	0f 92       	push	r0
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	0f 92       	push	r0
    36e8:	11 24       	eor	r1, r1
    36ea:	0b b6       	in	r0, 0x3b	; 59
    36ec:	0f 92       	push	r0
    36ee:	2f 93       	push	r18
    36f0:	3f 93       	push	r19
    36f2:	4f 93       	push	r20
    36f4:	5f 93       	push	r21
    36f6:	6f 93       	push	r22
    36f8:	7f 93       	push	r23
    36fa:	8f 93       	push	r24
    36fc:	9f 93       	push	r25
    36fe:	af 93       	push	r26
    3700:	bf 93       	push	r27
    3702:	ef 93       	push	r30
    3704:	ff 93       	push	r31
    3706:	85 e0       	ldi	r24, 0x05	; 5
    3708:	0e 94 43 10 	call	0x2086	; 0x2086 <irTransmit>
    370c:	ff 91       	pop	r31
    370e:	ef 91       	pop	r30
    3710:	bf 91       	pop	r27
    3712:	af 91       	pop	r26
    3714:	9f 91       	pop	r25
    3716:	8f 91       	pop	r24
    3718:	7f 91       	pop	r23
    371a:	6f 91       	pop	r22
    371c:	5f 91       	pop	r21
    371e:	4f 91       	pop	r20
    3720:	3f 91       	pop	r19
    3722:	2f 91       	pop	r18
    3724:	0f 90       	pop	r0
    3726:	0b be       	out	0x3b, r0	; 59
    3728:	0f 90       	pop	r0
    372a:	0f be       	out	0x3f, r0	; 63
    372c:	0f 90       	pop	r0
    372e:	1f 90       	pop	r1
    3730:	18 95       	reti

00003732 <irLedInit>:
static uint8_t tx_pins[6] = {PIN3_bm, PIN7_bm, PIN3_bm, PIN3_bm, PIN7_bm, PIN3_bm};
static PORT_t* uart_ch[6] = {&PORTC, &PORTC, &PORTD, &PORTE, &PORTE, &PORTF};
static uint8_t saved_usart_ctrlb_vals[6] = {0,0,0,0,0,0};

void irLedInit()
{
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
	/* Initialize carrier waves */
	PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;
    3736:	a0 ea       	ldi	r26, 0xA0	; 160
    3738:	b6 e0       	ldi	r27, 0x06	; 6
    373a:	93 ef       	ldi	r25, 0xF3	; 243
    373c:	11 96       	adiw	r26, 0x01	; 1
    373e:	9c 93       	st	X, r25
    3740:	11 97       	sbiw	r26, 0x01	; 1
	
	TCF2.CTRLE = TC2_BYTEM_SPLITMODE_gc;		// "split mode" puts this timer counter into "Type 2 mode"
    3742:	e0 e0       	ldi	r30, 0x00	; 0
    3744:	fb e0       	ldi	r31, 0x0B	; 11
    3746:	82 e0       	ldi	r24, 0x02	; 2
    3748:	84 83       	std	Z+4, r24	; 0x04
	TCF2.CTRLA |= TC2_CLKSEL_DIV4_gc;		// see CTRLA description in TC2 mode
    374a:	80 81       	ld	r24, Z
    374c:	83 60       	ori	r24, 0x03	; 3
    374e:	80 83       	st	Z, r24
	
	TCF2.HPER = 211; TCF2.LPER = 211; // 32MHz / (4 * 211) = 38kHz
    3750:	83 ed       	ldi	r24, 0xD3	; 211
    3752:	87 a3       	std	Z+39, r24	; 0x27
    3754:	86 a3       	std	Z+38, r24	; 0x26
	TCF2.HCMPA = 105; TCF2.HCMPB = 105; TCF2.HCMPC = 105; // 50% Duty Cycle
    3756:	89 e6       	ldi	r24, 0x69	; 105
    3758:	81 a7       	std	Z+41, r24	; 0x29
    375a:	83 a7       	std	Z+43, r24	; 0x2b
    375c:	85 a7       	std	Z+45, r24	; 0x2d
	TCF2.HCMPD = 105; TCF2.LCMPA = 105; TCF2.LCMPB = 105; // 50% Duty Cycle
    375e:	87 a7       	std	Z+47, r24	; 0x2f
    3760:	80 a7       	std	Z+40, r24	; 0x28
    3762:	82 a7       	std	Z+42, r24	; 0x2a
	TCF2.CTRLB = ALL_EMITTERS_CARWAV_bm;	// Set TC outputs on carrier wave pins (see CTRLA description in TC2 mode)
    3764:	91 83       	std	Z+1, r25	; 0x01

	// TX pins as outputs:
	PORTC.DIRSET = PIN3_bm | PIN7_bm;		// DIR 0,1
    3766:	c0 e4       	ldi	r28, 0x40	; 64
    3768:	d6 e0       	ldi	r29, 0x06	; 6
    376a:	98 e8       	ldi	r25, 0x88	; 136
    376c:	99 83       	std	Y+1, r25	; 0x01
	PORTD.DIRSET = PIN3_bm;					// DIR 2
    376e:	20 e6       	ldi	r18, 0x60	; 96
    3770:	36 e0       	ldi	r19, 0x06	; 6
    3772:	88 e0       	ldi	r24, 0x08	; 8
    3774:	f9 01       	movw	r30, r18
    3776:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN3_bm | PIN7_bm;		// DIR 3,4
    3778:	40 e8       	ldi	r20, 0x80	; 128
    377a:	56 e0       	ldi	r21, 0x06	; 6
    377c:	fa 01       	movw	r30, r20
    377e:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = PIN3_bm;					// DIR 5
    3780:	11 96       	adiw	r26, 0x01	; 1
    3782:	8c 93       	st	X, r24
    3784:	11 97       	sbiw	r26, 0x01	; 1
	
	PORTC.OUTCLR = (PIN3_bm | PIN7_bm);
    3786:	9e 83       	std	Y+6, r25	; 0x06
	PORTD.OUTCLR = PIN3_bm;
    3788:	f9 01       	movw	r30, r18
    378a:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = (PIN3_bm | PIN7_bm);
    378c:	fa 01       	movw	r30, r20
    378e:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = PIN3_bm;
    3790:	16 96       	adiw	r26, 0x06	; 6
    3792:	8c 93       	st	X, r24
    3794:	16 97       	sbiw	r26, 0x06	; 6
		
	// Invert the output pins:
	PORTC.PIN3CTRL = PORT_INVEN_bm;
    3796:	80 e4       	ldi	r24, 0x40	; 64
    3798:	8b 8b       	std	Y+19, r24	; 0x13
	PORTC.PIN7CTRL = PORT_INVEN_bm;
    379a:	8f 8b       	std	Y+23, r24	; 0x17
	PORTD.PIN3CTRL = PORT_INVEN_bm;
    379c:	f9 01       	movw	r30, r18
    379e:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN3CTRL = PORT_INVEN_bm;
    37a0:	fa 01       	movw	r30, r20
    37a2:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN7CTRL = PORT_INVEN_bm;
    37a4:	87 8b       	std	Z+23, r24	; 0x17
	PORTF.PIN3CTRL = PORT_INVEN_bm;
    37a6:	53 96       	adiw	r26, 0x13	; 19
    37a8:	8c 93       	st	X, r24
	
}
    37aa:	df 91       	pop	r29
    37ac:	cf 91       	pop	r28
    37ae:	08 95       	ret

000037b0 <irLedOn>:

void irLedOn(uint8_t direction)
{
    37b0:	cf 93       	push	r28
    37b2:	df 93       	push	r29
	//Turning on the light.
	saved_usart_ctrlb_vals[direction]	  = channel[direction]->CTRLB;	// record the current state of the USART
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	9c 01       	movw	r18, r24
    37b8:	22 0f       	add	r18, r18
    37ba:	33 1f       	adc	r19, r19
    37bc:	f9 01       	movw	r30, r18
    37be:	ea 5f       	subi	r30, 0xFA	; 250
    37c0:	ff 4d       	sbci	r31, 0xDF	; 223
    37c2:	a0 81       	ld	r26, Z
    37c4:	b1 81       	ldd	r27, Z+1	; 0x01
    37c6:	14 96       	adiw	r26, 0x04	; 4
    37c8:	4c 91       	ld	r20, X
    37ca:	14 97       	sbiw	r26, 0x04	; 4
    37cc:	fc 01       	movw	r30, r24
    37ce:	e7 5a       	subi	r30, 0xA7	; 167
    37d0:	fc 4d       	sbci	r31, 0xDC	; 220
    37d2:	40 83       	st	Z, r20
	TCF2.CTRLB			 &= ~carrier_wave_pins[direction];	// disable carrier wave output
    37d4:	e0 e0       	ldi	r30, 0x00	; 0
    37d6:	fb e0       	ldi	r31, 0x0B	; 11
    37d8:	41 81       	ldd	r20, Z+1	; 0x01
    37da:	ec 01       	movw	r28, r24
    37dc:	cc 5a       	subi	r28, 0xAC	; 172
    37de:	de 4d       	sbci	r29, 0xDE	; 222
    37e0:	58 81       	ld	r21, Y
    37e2:	65 2f       	mov	r22, r21
    37e4:	60 95       	com	r22
    37e6:	46 23       	and	r20, r22
    37e8:	41 83       	std	Z+1, r20	; 0x01
	PORTF.DIRSET		  =  carrier_wave_pins[direction];	// enable user output on this pin
    37ea:	e0 ea       	ldi	r30, 0xA0	; 160
    37ec:	f6 e0       	ldi	r31, 0x06	; 6
    37ee:	51 83       	std	Z+1, r21	; 0x01
	PORTF.OUT			 |=  carrier_wave_pins[direction];	// high signal on this pin
    37f0:	44 81       	ldd	r20, Z+4	; 0x04
    37f2:	45 2b       	or	r20, r21
    37f4:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB  	  =  0;					// disable USART
    37f6:	14 96       	adiw	r26, 0x04	; 4
    37f8:	1c 92       	st	X, r1
	uart_ch[direction]->DIRSET =  tx_pins[direction];			// enable user output on this pin
    37fa:	f9 01       	movw	r30, r18
    37fc:	ee 5b       	subi	r30, 0xBE	; 190
    37fe:	fe 4d       	sbci	r31, 0xDE	; 222
    3800:	01 90       	ld	r0, Z+
    3802:	f0 81       	ld	r31, Z
    3804:	e0 2d       	mov	r30, r0
    3806:	dc 01       	movw	r26, r24
    3808:	a2 5b       	subi	r26, 0xB2	; 178
    380a:	be 4d       	sbci	r27, 0xDE	; 222
    380c:	8c 91       	ld	r24, X
    380e:	81 83       	std	Z+1, r24	; 0x01
	uart_ch[direction]->OUT	 &= ~tx_pins[direction];			// low signal on TX pin (remember: these pins were inverted during init)
    3810:	94 81       	ldd	r25, Z+4	; 0x04
    3812:	80 95       	com	r24
    3814:	89 23       	and	r24, r25
    3816:	84 83       	std	Z+4, r24	; 0x04

}
    3818:	df 91       	pop	r29
    381a:	cf 91       	pop	r28
    381c:	08 95       	ret

0000381e <irLedOff>:

void irLedOff(uint8_t direction)
{
	//Turning off the light.
	uart_ch[direction]->OUT  |=  tx_pins[direction];			// high signal on TX pin (turns IR blast OFF)
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	9c 01       	movw	r18, r24
    3822:	22 0f       	add	r18, r18
    3824:	33 1f       	adc	r19, r19
    3826:	f9 01       	movw	r30, r18
    3828:	ee 5b       	subi	r30, 0xBE	; 190
    382a:	fe 4d       	sbci	r31, 0xDE	; 222
    382c:	01 90       	ld	r0, Z+
    382e:	f0 81       	ld	r31, Z
    3830:	e0 2d       	mov	r30, r0
    3832:	54 81       	ldd	r21, Z+4	; 0x04
    3834:	dc 01       	movw	r26, r24
    3836:	a2 5b       	subi	r26, 0xB2	; 178
    3838:	be 4d       	sbci	r27, 0xDE	; 222
    383a:	4c 91       	ld	r20, X
    383c:	45 2b       	or	r20, r21
    383e:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB	 =  saved_usart_ctrlb_vals[direction];	// re-enable USART (restore settings as it was before)
    3840:	f9 01       	movw	r30, r18
    3842:	ea 5f       	subi	r30, 0xFA	; 250
    3844:	ff 4d       	sbci	r31, 0xDF	; 223
    3846:	01 90       	ld	r0, Z+
    3848:	f0 81       	ld	r31, Z
    384a:	e0 2d       	mov	r30, r0
    384c:	dc 01       	movw	r26, r24
    384e:	a7 5a       	subi	r26, 0xA7	; 167
    3850:	bc 4d       	sbci	r27, 0xDC	; 220
    3852:	2c 91       	ld	r18, X
    3854:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT			&= ~carrier_wave_pins[direction];	// low signal on the carrier wave pin, just in casies.
    3856:	e0 ea       	ldi	r30, 0xA0	; 160
    3858:	f6 e0       	ldi	r31, 0x06	; 6
    385a:	24 81       	ldd	r18, Z+4	; 0x04
    385c:	dc 01       	movw	r26, r24
    385e:	ac 5a       	subi	r26, 0xAC	; 172
    3860:	be 4d       	sbci	r27, 0xDE	; 222
    3862:	3c 91       	ld	r19, X
    3864:	93 2f       	mov	r25, r19
    3866:	90 95       	com	r25
    3868:	92 23       	and	r25, r18
    386a:	94 83       	std	Z+4, r25	; 0x04
	TCF2.CTRLB			|=  carrier_wave_pins[direction];	// re-enable carrier wave output
    386c:	e0 e0       	ldi	r30, 0x00	; 0
    386e:	fb e0       	ldi	r31, 0x0B	; 11
    3870:	81 81       	ldd	r24, Z+1	; 0x01
    3872:	83 2b       	or	r24, r19
    3874:	81 83       	std	Z+1, r24	; 0x01
    3876:	08 95       	ret

00003878 <setAllirPowers>:
}

void setAllirPowers(volatile uint16_t power){
    3878:	1f 93       	push	r17
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
    3882:	2f 97       	sbiw	r28, 0x0f	; 15
    3884:	cd bf       	out	0x3d, r28	; 61
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	8e 87       	std	Y+14, r24	; 0x0e
    388a:	9f 87       	std	Y+15, r25	; 0x0f
	if(power>256) return;
    388c:	8e 85       	ldd	r24, Y+14	; 0x0e
    388e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3890:	81 30       	cpi	r24, 0x01	; 1
    3892:	91 40       	sbci	r25, 0x01	; 1
    3894:	68 f5       	brcc	.+90     	; 0x38f0 <setAllirPowers+0x78>
	if(curr_ir_power==power) return;
    3896:	8e 85       	ldd	r24, Y+14	; 0x0e
    3898:	9f 85       	ldd	r25, Y+15	; 0x0f
    389a:	20 91 cf 26 	lds	r18, 0x26CF	; 0x8026cf <curr_ir_power>
    389e:	30 91 d0 26 	lds	r19, 0x26D0	; 0x8026d0 <curr_ir_power+0x1>
    38a2:	28 17       	cp	r18, r24
    38a4:	39 07       	cpc	r19, r25
    38a6:	21 f1       	breq	.+72     	; 0x38f0 <setAllirPowers+0x78>
	uint8_t power_high = (power>>8);
    38a8:	2e 85       	ldd	r18, Y+14	; 0x0e
    38aa:	3f 85       	ldd	r19, Y+15	; 0x0f
	uint8_t power_low = (power&0xFF);
    38ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    38ae:	9f 85       	ldd	r25, Y+15	; 0x0f
	uint8_t write_buffer[6] = {power_high,power_low,0x10|power_high,power_low,0x60|power_high, power_low};
    38b0:	38 87       	std	Y+8, r19	; 0x08
    38b2:	89 87       	std	Y+9, r24	; 0x09
    38b4:	93 2f       	mov	r25, r19
    38b6:	90 61       	ori	r25, 0x10	; 16
    38b8:	9a 87       	std	Y+10, r25	; 0x0a
    38ba:	8b 87       	std	Y+11, r24	; 0x0b
    38bc:	93 2f       	mov	r25, r19
    38be:	90 66       	ori	r25, 0x60	; 96
    38c0:	9c 87       	std	Y+12, r25	; 0x0c
    38c2:	8d 87       	std	Y+13, r24	; 0x0d
	
	uint8_t aResult = 0;
	uint8_t bResult = 0;
	char callerDescr[7] = "Set IR\0";
    38c4:	87 e0       	ldi	r24, 0x07	; 7
    38c6:	eb e3       	ldi	r30, 0x3B	; 59
    38c8:	f1 e2       	ldi	r31, 0x21	; 33
    38ca:	de 01       	movw	r26, r28
    38cc:	11 96       	adiw	r26, 0x01	; 1
    38ce:	01 90       	ld	r0, Z+
    38d0:	0d 92       	st	X+, r0
    38d2:	8a 95       	dec	r24
    38d4:	e1 f7       	brne	.-8      	; 0x38ce <setAllirPowers+0x56>
	aResult = twiWriteWrapper(IR_POWER_ADDR_A, write_buffer, 6, callerDescr);
    38d6:	9e 01       	movw	r18, r28
    38d8:	2f 5f       	subi	r18, 0xFF	; 255
    38da:	3f 4f       	sbci	r19, 0xFF	; 255
    38dc:	46 e0       	ldi	r20, 0x06	; 6
    38de:	be 01       	movw	r22, r28
    38e0:	68 5f       	subi	r22, 0xF8	; 248
    38e2:	7f 4f       	sbci	r23, 0xFF	; 255
    38e4:	8c e2       	ldi	r24, 0x2C	; 44
    38e6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <twiWriteWrapper>
    38ea:	18 2f       	mov	r17, r24
	if(!aResult){
    38ec:	81 11       	cpse	r24, r1
    38ee:	07 c0       	rjmp	.+14     	; 0x38fe <setAllirPowers+0x86>
	
	if((aResult+bResult)>2){
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
	}
	curr_ir_power = power;
}
    38f0:	2f 96       	adiw	r28, 0x0f	; 15
    38f2:	cd bf       	out	0x3d, r28	; 61
    38f4:	de bf       	out	0x3e, r29	; 62
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	1f 91       	pop	r17
    38fc:	08 95       	ret
	char callerDescr[7] = "Set IR\0";
	aResult = twiWriteWrapper(IR_POWER_ADDR_A, write_buffer, 6, callerDescr);
	if(!aResult){
		return;
	}
	bResult = twiWriteWrapper(IR_POWER_ADDR_B, write_buffer, 6, callerDescr);
    38fe:	9e 01       	movw	r18, r28
    3900:	2f 5f       	subi	r18, 0xFF	; 255
    3902:	3f 4f       	sbci	r19, 0xFF	; 255
    3904:	46 e0       	ldi	r20, 0x06	; 6
    3906:	be 01       	movw	r22, r28
    3908:	68 5f       	subi	r22, 0xF8	; 248
    390a:	7f 4f       	sbci	r23, 0xFF	; 255
    390c:	8e e2       	ldi	r24, 0x2E	; 46
    390e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <twiWriteWrapper>
	if(!bResult){
    3912:	88 23       	and	r24, r24
    3914:	69 f3       	breq	.-38     	; 0x38f0 <setAllirPowers+0x78>
		return;
	}
	
	if((aResult+bResult)>2){
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	81 0f       	add	r24, r17
    391a:	91 1d       	adc	r25, r1
    391c:	02 97       	sbiw	r24, 0x02	; 2
    391e:	41 f0       	breq	.+16     	; 0x3930 <setAllirPowers+0xb8>
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
    3920:	85 eb       	ldi	r24, 0xB5	; 181
    3922:	96 e0       	ldi	r25, 0x06	; 6
    3924:	9f 93       	push	r25
    3926:	8f 93       	push	r24
    3928:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    392c:	0f 90       	pop	r0
    392e:	0f 90       	pop	r0
	}
	curr_ir_power = power;
    3930:	8e 85       	ldd	r24, Y+14	; 0x0e
    3932:	9f 85       	ldd	r25, Y+15	; 0x0f
    3934:	80 93 cf 26 	sts	0x26CF, r24	; 0x8026cf <curr_ir_power>
    3938:	90 93 d0 26 	sts	0x26D0, r25	; 0x8026d0 <curr_ir_power+0x1>
    393c:	d9 cf       	rjmp	.-78     	; 0x38f0 <setAllirPowers+0x78>

0000393e <irSensorInit>:
		
		//ADCA.EVCTRL = ADC_EVSEL_1234_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
		//ADCB.EVCTRL = ADC_EVSEL_567_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
	#else
		/* SET INPUT PINS AS INPUTS */
		IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    393e:	e0 e2       	ldi	r30, 0x20	; 32
    3940:	f6 e0       	ldi	r31, 0x06	; 6
    3942:	8c ef       	ldi	r24, 0xFC	; 252
    3944:	82 83       	std	Z+2, r24	; 0x02
		
		PORTB.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3946:	87 e0       	ldi	r24, 0x07	; 7
    3948:	85 8b       	std	Z+21, r24	; 0x15
		PORTB.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    394a:	86 8b       	std	Z+22, r24	; 0x16
		PORTB.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    394c:	87 8b       	std	Z+23, r24	; 0x17
		PORTB.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    394e:	84 8b       	std	Z+20, r24	; 0x14
		PORTB.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3950:	82 8b       	std	Z+18, r24	; 0x12
		PORTB.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3952:	83 8b       	std	Z+19, r24	; 0x13

		ADCB.REFCTRL = ADC_REFSEL_AREFA_gc;
    3954:	e0 e4       	ldi	r30, 0x40	; 64
    3956:	f2 e0       	ldi	r31, 0x02	; 2
    3958:	90 e2       	ldi	r25, 0x20	; 32
    395a:	92 83       	std	Z+2, r25	; 0x02
		ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; //12bit resolution, and sets it to signed mode.
    395c:	90 e1       	ldi	r25, 0x10	; 16
    395e:	91 83       	std	Z+1, r25	; 0x01
		ADCB.PRESCALER = ADC_PRESCALER_DIV512_gc;
    3960:	84 83       	std	Z+4, r24	; 0x04
		ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN2_bm;	// differential input. requires signed mode (see sec. 28.6 in manual)
    3962:	83 e1       	ldi	r24, 0x13	; 19
    3964:	80 a3       	std	Z+32, r24	; 0x20
		ADCB.CH0.MUXCTRL = ADC_CH_MUXNEG_INTGND_MODE4_gc;	// use VREF_IN for the negative input (0.54 V)
    3966:	84 e0       	ldi	r24, 0x04	; 4
    3968:	81 a3       	std	Z+33, r24	; 0x21
		ADCB.CALL = PRODSIGNATURES_ADCBCAL0;
    396a:	84 b5       	in	r24, 0x24	; 36
    396c:	84 87       	std	Z+12, r24	; 0x0c
		ADCB.CALH = PRODSIGNATURES_ADCBCAL1;
    396e:	85 b5       	in	r24, 0x25	; 37
    3970:	85 87       	std	Z+13, r24	; 0x0d
		ADCB.CTRLA = ADC_ENABLE_bm;
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	80 83       	st	Z, r24
	#endif
	
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir]=0;
    3976:	ef e5       	ldi	r30, 0x5F	; 95
    3978:	f3 e2       	ldi	r31, 0x23	; 35
    397a:	10 82       	st	Z, r1
    397c:	11 82       	std	Z+1, r1	; 0x01
    397e:	12 82       	std	Z+2, r1	; 0x02
    3980:	13 82       	std	Z+3, r1	; 0x03
    3982:	14 82       	std	Z+4, r1	; 0x04
    3984:	15 82       	std	Z+5, r1	; 0x05
    3986:	16 82       	std	Z+6, r1	; 0x06
    3988:	17 82       	std	Z+7, r1	; 0x07
    398a:	10 86       	std	Z+8, r1	; 0x08
    398c:	11 86       	std	Z+9, r1	; 0x09
    398e:	12 86       	std	Z+10, r1	; 0x0a
    3990:	13 86       	std	Z+11, r1	; 0x0b
	}
	scheduleTask(1000,initIrBaselines,NULL);
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	42 e9       	ldi	r20, 0x92	; 146
    3998:	5d e1       	ldi	r21, 0x1D	; 29
    399a:	68 ee       	ldi	r22, 0xE8	; 232
    399c:	73 e0       	ldi	r23, 0x03	; 3
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	0e 94 f7 35 	call	0x6bee	; 0x6bee <scheduleTask>
	schedulePeriodicTask(5407, updateIrBaselines, NULL);
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	47 e9       	ldi	r20, 0x97	; 151
    39ac:	5d e1       	ldi	r21, 0x1D	; 29
    39ae:	6f e1       	ldi	r22, 0x1F	; 31
    39b0:	75 e1       	ldi	r23, 0x15	; 21
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 94 30 36 	call	0x6c60	; 0x6c60 <schedulePeriodicTask>
    39ba:	08 95       	ret

000039bc <getIrSensors>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		hpIrBlock_bm = 0;
	}
}

void getIrSensors(int16_t* output_arr, uint8_t meas_per_ch){			
    39bc:	2f 92       	push	r2
    39be:	3f 92       	push	r3
    39c0:	4f 92       	push	r4
    39c2:	5f 92       	push	r5
    39c4:	6f 92       	push	r6
    39c6:	7f 92       	push	r7
    39c8:	8f 92       	push	r8
    39ca:	9f 92       	push	r9
    39cc:	af 92       	push	r10
    39ce:	bf 92       	push	r11
    39d0:	cf 92       	push	r12
    39d2:	df 92       	push	r13
    39d4:	ef 92       	push	r14
    39d6:	ff 92       	push	r15
    39d8:	0f 93       	push	r16
    39da:	1f 93       	push	r17
    39dc:	cf 93       	push	r28
    39de:	df 93       	push	r29
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62
    39e4:	36 2e       	mov	r3, r22
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    39e6:	4d b6       	in	r4, 0x3d	; 61
    39e8:	5e b6       	in	r5, 0x3e	; 62
		hpIrBlock_bm = 0;
	}
}

void getIrSensors(int16_t* output_arr, uint8_t meas_per_ch){			
	int16_t meas[6][meas_per_ch];	
    39ea:	06 2f       	mov	r16, r22
    39ec:	10 e0       	ldi	r17, 0x00	; 0
    39ee:	00 0f       	add	r16, r16
    39f0:	11 1f       	adc	r17, r17
    39f2:	2d b7       	in	r18, 0x3d	; 61
    39f4:	3e b7       	in	r19, 0x3e	; 62
    39f6:	4c e0       	ldi	r20, 0x0C	; 12
    39f8:	64 9f       	mul	r22, r20
    39fa:	20 19       	sub	r18, r0
    39fc:	31 09       	sbc	r19, r1
    39fe:	11 24       	eor	r1, r1
    3a00:	2d bf       	out	0x3d, r18	; 61
    3a02:	3e bf       	out	0x3e, r19	; 62
    3a04:	ed b7       	in	r30, 0x3d	; 61
    3a06:	fe b7       	in	r31, 0x3e	; 62
    3a08:	31 96       	adiw	r30, 0x01	; 1
    3a0a:	4f 01       	movw	r8, r30
    3a0c:	ab e5       	ldi	r26, 0x5B	; 91
    3a0e:	b1 e2       	ldi	r27, 0x21	; 33
    3a10:	af 01       	movw	r20, r30
    3a12:	68 e2       	ldi	r22, 0x28	; 40
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
					meas[dir][meas_count] = ADCB.CH0RES;
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    3a14:	ee 24       	eor	r14, r14
    3a16:	e3 94       	inc	r14
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    3a18:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
    3a1c:	37 70       	andi	r19, 0x07	; 7
    3a1e:	30 93 61 02 	sts	0x0261, r19	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
    3a22:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
    3a26:	26 2b       	or	r18, r22
    3a28:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    3a2c:	33 20       	and	r3, r3
    3a2e:	c9 f0       	breq	.+50     	; 0x3a62 <getIrSensors+0xa6>
    3a30:	fa 01       	movw	r30, r20
    3a32:	30 e0       	ldi	r19, 0x00	; 0
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    3a34:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3a36:	f8 94       	cli
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
    3a38:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>
    3a3c:	20 68       	ori	r18, 0x80	; 128
    3a3e:	20 93 60 02 	sts	0x0260, r18	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
    3a42:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    3a46:	22 23       	and	r18, r18
    3a48:	e1 f3       	breq	.-8      	; 0x3a42 <getIrSensors+0x86>
					meas[dir][meas_count] = ADCB.CH0RES;
    3a4a:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <__TEXT_REGION_LENGTH__+0x700250>
    3a4e:	70 91 51 02 	lds	r23, 0x0251	; 0x800251 <__TEXT_REGION_LENGTH__+0x700251>
    3a52:	61 93       	st	Z+, r22
    3a54:	71 93       	st	Z+, r23
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    3a56:	e0 92 63 02 	sts	0x0263, r14	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3a5a:	ff be       	out	0x3f, r15	; 63
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    3a5c:	3f 5f       	subi	r19, 0xFF	; 255
    3a5e:	33 12       	cpse	r3, r19
    3a60:	e9 cf       	rjmp	.-46     	; 0x3a34 <getIrSensors+0x78>
    3a62:	40 0f       	add	r20, r16
    3a64:	51 1f       	adc	r21, r17
					ir_sense_channels[dir]->INTFLAGS=1;
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
    3a66:	f1 e2       	ldi	r31, 0x21	; 33
    3a68:	a0 36       	cpi	r26, 0x60	; 96
    3a6a:	bf 07       	cpc	r27, r31
    3a6c:	11 f0       	breq	.+4      	; 0x3a72 <getIrSensors+0xb6>
    3a6e:	6d 91       	ld	r22, X+
    3a70:	d3 cf       	rjmp	.-90     	; 0x3a18 <getIrSensors+0x5c>
    3a72:	54 01       	movw	r10, r8
    3a74:	24 e0       	ldi	r18, 0x04	; 4
    3a76:	a2 0e       	add	r10, r18
    3a78:	b1 1c       	adc	r11, r1
    3a7a:	2f e5       	ldi	r18, 0x5F	; 95
    3a7c:	62 2e       	mov	r6, r18
    3a7e:	23 e2       	ldi	r18, 0x23	; 35
    3a80:	72 2e       	mov	r7, r18
    3a82:	7c 01       	movw	r14, r24
    3a84:	c1 2c       	mov	r12, r1
    3a86:	d1 2c       	mov	r13, r1
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++){
		if(meas_per_ch>2){
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
    3a88:	3e ef       	ldi	r19, 0xFE	; 254
    3a8a:	23 2e       	mov	r2, r19
    3a8c:	23 0c       	add	r2, r3
    3a8e:	21 c0       	rjmp	.+66     	; 0x3ad2 <getIrSensors+0x116>
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
    3a90:	f2 e0       	ldi	r31, 0x02	; 2
    3a92:	3f 16       	cp	r3, r31
    3a94:	09 f4       	brne	.+2      	; 0x3a98 <getIrSensors+0xdc>
    3a96:	42 c0       	rjmp	.+132    	; 0x3b1c <getIrSensors+0x160>
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
		else
			output_arr[dir] = meas[dir][0];
    3a98:	0c 9d       	mul	r16, r12
    3a9a:	f0 01       	movw	r30, r0
    3a9c:	0d 9d       	mul	r16, r13
    3a9e:	f0 0d       	add	r31, r0
    3aa0:	1c 9d       	mul	r17, r12
    3aa2:	f0 0d       	add	r31, r0
    3aa4:	11 24       	eor	r1, r1
    3aa6:	e8 0d       	add	r30, r8
    3aa8:	f9 1d       	adc	r31, r9
    3aaa:	80 81       	ld	r24, Z
    3aac:	91 81       	ldd	r25, Z+1	; 0x01
    3aae:	f7 01       	movw	r30, r14
    3ab0:	80 83       	st	Z, r24
    3ab2:	91 83       	std	Z+1, r25	; 0x01
    3ab4:	ff ef       	ldi	r31, 0xFF	; 255
    3ab6:	cf 1a       	sub	r12, r31
    3ab8:	df 0a       	sbc	r13, r31
    3aba:	a0 0e       	add	r10, r16
    3abc:	b1 1e       	adc	r11, r17
    3abe:	22 e0       	ldi	r18, 0x02	; 2
    3ac0:	62 0e       	add	r6, r18
    3ac2:	71 1c       	adc	r7, r1
    3ac4:	32 e0       	ldi	r19, 0x02	; 2
    3ac6:	e3 0e       	add	r14, r19
    3ac8:	f1 1c       	adc	r15, r1
			}			
		}
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++){
    3aca:	46 e0       	ldi	r20, 0x06	; 6
    3acc:	c4 16       	cp	r12, r20
    3ace:	d1 04       	cpc	r13, r1
    3ad0:	81 f0       	breq	.+32     	; 0x3af2 <getIrSensors+0x136>
		if(meas_per_ch>2){
    3ad2:	32 e0       	ldi	r19, 0x02	; 2
    3ad4:	33 15       	cp	r19, r3
    3ad6:	e0 f6       	brcc	.-72     	; 0x3a90 <getIrSensors+0xd4>
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
    3ad8:	62 2d       	mov	r22, r2
    3ada:	c5 01       	movw	r24, r10
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    3adc:	0e 94 79 31 	call	0x62f2	; 0x62f2 <measFindMedian>
    3ae0:	f3 01       	movw	r30, r6
    3ae2:	20 81       	ld	r18, Z
    3ae4:	31 81       	ldd	r19, Z+1	; 0x01
    3ae6:	82 1b       	sub	r24, r18
    3ae8:	93 0b       	sbc	r25, r19
    3aea:	f7 01       	movw	r30, r14
    3aec:	80 83       	st	Z, r24
    3aee:	91 83       	std	Z+1, r25	; 0x01
    3af0:	e1 cf       	rjmp	.-62     	; 0x3ab4 <getIrSensors+0xf8>
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    3af2:	4d be       	out	0x3d, r4	; 61
    3af4:	5e be       	out	0x3e, r5	; 62
    3af6:	df 91       	pop	r29
    3af8:	cf 91       	pop	r28
    3afa:	1f 91       	pop	r17
    3afc:	0f 91       	pop	r16
    3afe:	ff 90       	pop	r15
    3b00:	ef 90       	pop	r14
    3b02:	df 90       	pop	r13
    3b04:	cf 90       	pop	r12
    3b06:	bf 90       	pop	r11
    3b08:	af 90       	pop	r10
    3b0a:	9f 90       	pop	r9
    3b0c:	8f 90       	pop	r8
    3b0e:	7f 90       	pop	r7
    3b10:	6f 90       	pop	r6
    3b12:	5f 90       	pop	r5
    3b14:	4f 90       	pop	r4
    3b16:	3f 90       	pop	r3
    3b18:	2f 90       	pop	r2
    3b1a:	08 95       	ret
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    3b1c:	61 e0       	ldi	r22, 0x01	; 1
    3b1e:	c5 01       	movw	r24, r10
    3b20:	02 97       	sbiw	r24, 0x02	; 2
    3b22:	dc cf       	rjmp	.-72     	; 0x3adc <getIrSensors+0x120>

00003b24 <initIrBaselines>:
	scheduleTask(1000,initIrBaselines,NULL);
	schedulePeriodicTask(5407, updateIrBaselines, NULL);
}

void initIrBaselines(){
	getIrSensors(ir_sense_baseline, 13);
    3b24:	6d e0       	ldi	r22, 0x0D	; 13
    3b26:	8f e5       	ldi	r24, 0x5F	; 95
    3b28:	93 e2       	ldi	r25, 0x23	; 35
    3b2a:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <getIrSensors>

00003b2e <updateIrBaselines>:
}

void updateIrBaselines(){
    3b2e:	ef 92       	push	r14
    3b30:	ff 92       	push	r15
    3b32:	0f 93       	push	r16
    3b34:	1f 93       	push	r17
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	2c 97       	sbiw	r28, 0x0c	; 12
    3b40:	cd bf       	out	0x3d, r28	; 61
    3b42:	de bf       	out	0x3e, r29	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3b44:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3b46:	f8 94       	cli
		if(irIsBusy(ALL_DIRS)){
    3b48:	8f e3       	ldi	r24, 0x3F	; 63
    3b4a:	0e 94 02 13 	call	0x2604	; 0x2604 <irIsBusy>
    3b4e:	81 11       	cpse	r24, r1
    3b50:	35 c0       	rjmp	.+106    	; 0x3bbc <updateIrBaselines+0x8e>
			return;
		}
		hpIrBlock_bm=0x3F;
    3b52:	8f e3       	ldi	r24, 0x3F	; 63
    3b54:	80 93 a8 24 	sts	0x24A8, r24	; 0x8024a8 <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3b58:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    3b5a:	8e 01       	movw	r16, r28
    3b5c:	0f 5f       	subi	r16, 0xFF	; 255
    3b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b60:	3f e5       	ldi	r19, 0x5F	; 95
    3b62:	e3 2e       	mov	r14, r19
    3b64:	33 e2       	ldi	r19, 0x23	; 35
    3b66:	f3 2e       	mov	r15, r19
    3b68:	f7 01       	movw	r30, r14
    3b6a:	d8 01       	movw	r26, r16
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
    3b6c:	80 81       	ld	r24, Z
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	8d 93       	st	X+, r24
    3b72:	9d 93       	st	X+, r25
		ir_sense_baseline[dir] = 0;
    3b74:	11 92       	st	Z+, r1
    3b76:	11 92       	st	Z+, r1
			return;
		}
		hpIrBlock_bm=0x3F;
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
    3b78:	83 e2       	ldi	r24, 0x23	; 35
    3b7a:	eb 36       	cpi	r30, 0x6B	; 107
    3b7c:	f8 07       	cpc	r31, r24
    3b7e:	b1 f7       	brne	.-20     	; 0x3b6c <updateIrBaselines+0x3e>
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	getIrSensors(ir_sense_baseline, 13);
    3b80:	6d e0       	ldi	r22, 0x0D	; 13
    3b82:	8f e5       	ldi	r24, 0x5F	; 95
    3b84:	93 e2       	ldi	r25, 0x23	; 35
    3b86:	0e 94 de 1c 	call	0x39bc	; 0x39bc <getIrSensors>
    3b8a:	0b c0       	rjmp	.+22     	; 0x3ba2 <updateIrBaselines+0x74>
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    3b8c:	95 95       	asr	r25
    3b8e:	87 95       	ror	r24
    3b90:	f7 01       	movw	r30, r14
    3b92:	81 93       	st	Z+, r24
    3b94:	91 93       	st	Z+, r25
    3b96:	7f 01       	movw	r14, r30
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	getIrSensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
    3b98:	fb e6       	ldi	r31, 0x6B	; 107
    3b9a:	ef 16       	cp	r14, r31
    3b9c:	f3 e2       	ldi	r31, 0x23	; 35
    3b9e:	ff 06       	cpc	r15, r31
    3ba0:	c1 f0       	breq	.+48     	; 0x3bd2 <updateIrBaselines+0xa4>
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    3ba2:	f8 01       	movw	r30, r16
    3ba4:	21 91       	ld	r18, Z+
    3ba6:	31 91       	ld	r19, Z+
    3ba8:	8f 01       	movw	r16, r30
    3baa:	f7 01       	movw	r30, r14
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	82 0f       	add	r24, r18
    3bb2:	93 1f       	adc	r25, r19
    3bb4:	97 ff       	sbrs	r25, 7
    3bb6:	ea cf       	rjmp	.-44     	; 0x3b8c <updateIrBaselines+0x5e>
    3bb8:	01 96       	adiw	r24, 0x01	; 1
    3bba:	e8 cf       	rjmp	.-48     	; 0x3b8c <updateIrBaselines+0x5e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3bbc:	1f bf       	out	0x3f, r17	; 63
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		hpIrBlock_bm = 0;
	}
}
    3bbe:	2c 96       	adiw	r28, 0x0c	; 12
    3bc0:	cd bf       	out	0x3d, r28	; 61
    3bc2:	de bf       	out	0x3e, r29	; 62
    3bc4:	df 91       	pop	r29
    3bc6:	cf 91       	pop	r28
    3bc8:	1f 91       	pop	r17
    3bca:	0f 91       	pop	r16
    3bcc:	ff 90       	pop	r15
    3bce:	ef 90       	pop	r14
    3bd0:	08 95       	ret
	}
	getIrSensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3bd2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3bd4:	f8 94       	cli
		hpIrBlock_bm = 0;
    3bd6:	10 92 a8 24 	sts	0x24A8, r1	; 0x8024a8 <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3bda:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    3bdc:	f0 cf       	rjmp	.-32     	; 0x3bbe <updateIrBaselines+0x90>

00003bde <checkCollisionValues>:
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
	}
	return dirs;
}

void checkCollisionValues(int16_t meas[6]){
    3bde:	bf 92       	push	r11
    3be0:	cf 92       	push	r12
    3be2:	df 92       	push	r13
    3be4:	ef 92       	push	r14
    3be6:	ff 92       	push	r15
    3be8:	0f 93       	push	r16
    3bea:	1f 93       	push	r17
    3bec:	cf 93       	push	r28
    3bee:	df 93       	push	r29
    3bf0:	cd b7       	in	r28, 0x3d	; 61
    3bf2:	de b7       	in	r29, 0x3e	; 62
    3bf4:	68 97       	sbiw	r28, 0x18	; 24
    3bf6:	cd bf       	out	0x3d, r28	; 61
    3bf8:	de bf       	out	0x3e, r29	; 62
    3bfa:	b8 2e       	mov	r11, r24
    3bfc:	09 2f       	mov	r16, r25
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	//uint8_t dirs=0;
	if(irIsBusy(ALL_DIRS)){
    3bfe:	8f e3       	ldi	r24, 0x3F	; 63
    3c00:	0e 94 02 13 	call	0x2604	; 0x2604 <irIsBusy>
    3c04:	81 11       	cpse	r24, r1
    3c06:	66 c0       	rjmp	.+204    	; 0x3cd4 <checkCollisionValues+0xf6>
		printf_P(PSTR("IR Hardware busy. Can't check collisions.\r\n"));
		return;
	}
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
    3c08:	81 e0       	ldi	r24, 0x01	; 1
    3c0a:	80 93 5e 25 	sts	0x255E, r24	; 0x80255e <ir_rxtx+0x37>
    3c0e:	80 93 96 25 	sts	0x2596, r24	; 0x802596 <ir_rxtx+0x6f>
    3c12:	80 93 ce 25 	sts	0x25CE, r24	; 0x8025ce <ir_rxtx+0xa7>
    3c16:	80 93 06 26 	sts	0x2606, r24	; 0x802606 <ir_rxtx+0xdf>
    3c1a:	80 93 3e 26 	sts	0x263E, r24	; 0x80263e <ir_rxtx+0x117>
    3c1e:	80 93 76 26 	sts	0x2676, r24	; 0x802676 <ir_rxtx+0x14f>

void irLedInit(void);
void setAllirPowers(uint16_t power);
void irLedOn(uint8_t direction);
void irLedOff(uint8_t direction);
inline uint16_t getAllirPowers(void){ return curr_ir_power; }
    3c22:	c0 90 cf 26 	lds	r12, 0x26CF	; 0x8026cf <curr_ir_power>
    3c26:	d0 90 d0 26 	lds	r13, 0x26D0	; 0x8026d0 <curr_ir_power+0x1>
	uint16_t curr_power = getAllirPowers();
	setAllirPowers(256);
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	91 e0       	ldi	r25, 0x01	; 1
    3c2e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <setAllirPowers>
	getIrSensors(baseline_meas, 5);
    3c32:	7e 01       	movw	r14, r28
    3c34:	8d e0       	ldi	r24, 0x0D	; 13
    3c36:	e8 0e       	add	r14, r24
    3c38:	f1 1c       	adc	r15, r1
    3c3a:	65 e0       	ldi	r22, 0x05	; 5
    3c3c:	c7 01       	movw	r24, r14
    3c3e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <getIrSensors>
	//printf("Coll    base: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", baseline_meas[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOn(i);
    3c42:	10 e0       	ldi	r17, 0x00	; 0
    3c44:	81 2f       	mov	r24, r17
    3c46:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <irLedOn>
    3c4a:	1f 5f       	subi	r17, 0xFF	; 255
    3c4c:	16 30       	cpi	r17, 0x06	; 6
    3c4e:	d1 f7       	brne	.-12     	; 0x3c44 <checkCollisionValues+0x66>
    3c50:	af ec       	ldi	r26, 0xCF	; 207
    3c52:	b7 e0       	ldi	r27, 0x07	; 7
    3c54:	11 97       	sbiw	r26, 0x01	; 1
    3c56:	f1 f7       	brne	.-4      	; 0x3c54 <checkCollisionValues+0x76>
    3c58:	00 c0       	rjmp	.+0      	; 0x3c5a <checkCollisionValues+0x7c>
    3c5a:	00 00       	nop
	delay_us(250);	
	getIrSensors(measured_vals, 5);
    3c5c:	65 e0       	ldi	r22, 0x05	; 5
    3c5e:	ce 01       	movw	r24, r28
    3c60:	01 96       	adiw	r24, 0x01	; 1
    3c62:	0e 94 de 1c 	call	0x39bc	; 0x39bc <getIrSensors>
	//printf("Coll results: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", measured_vals[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOff(i);
    3c66:	10 e0       	ldi	r17, 0x00	; 0
    3c68:	81 2f       	mov	r24, r17
    3c6a:	0e 94 0f 1c 	call	0x381e	; 0x381e <irLedOff>
    3c6e:	1f 5f       	subi	r17, 0xFF	; 255
    3c70:	16 30       	cpi	r17, 0x06	; 6
    3c72:	d1 f7       	brne	.-12     	; 0x3c68 <checkCollisionValues+0x8a>
    3c74:	fe 01       	movw	r30, r28
    3c76:	31 96       	adiw	r30, 0x01	; 1
    3c78:	97 01       	movw	r18, r14
    3c7a:	6b 2d       	mov	r22, r11
    3c7c:	70 2f       	mov	r23, r16
	for(uint8_t i=0;i<6;i++){
		meas[i] = (measured_vals[i]-baseline_meas[i]);
    3c7e:	81 91       	ld	r24, Z+
    3c80:	91 91       	ld	r25, Z+
    3c82:	d9 01       	movw	r26, r18
    3c84:	4d 91       	ld	r20, X+
    3c86:	5d 91       	ld	r21, X+
    3c88:	9d 01       	movw	r18, r26
    3c8a:	84 1b       	sub	r24, r20
    3c8c:	95 0b       	sbc	r25, r21
    3c8e:	db 01       	movw	r26, r22
    3c90:	8d 93       	st	X+, r24
    3c92:	9d 93       	st	X+, r25
    3c94:	bd 01       	movw	r22, r26
	getIrSensors(measured_vals, 5);
	//printf("Coll results: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", measured_vals[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOff(i);
	for(uint8_t i=0;i<6;i++){
    3c96:	ee 15       	cp	r30, r14
    3c98:	ff 05       	cpc	r31, r15
    3c9a:	89 f7       	brne	.-30     	; 0x3c7e <checkCollisionValues+0xa0>
		meas[i] = (measured_vals[i]-baseline_meas[i]);
	}
	setAllirPowers(curr_power);
    3c9c:	c6 01       	movw	r24, r12
    3c9e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <setAllirPowers>
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = 0;		
    3ca2:	10 92 5e 25 	sts	0x255E, r1	; 0x80255e <ir_rxtx+0x37>
    3ca6:	10 92 96 25 	sts	0x2596, r1	; 0x802596 <ir_rxtx+0x6f>
    3caa:	10 92 ce 25 	sts	0x25CE, r1	; 0x8025ce <ir_rxtx+0xa7>
    3cae:	10 92 06 26 	sts	0x2606, r1	; 0x802606 <ir_rxtx+0xdf>
    3cb2:	10 92 3e 26 	sts	0x263E, r1	; 0x80263e <ir_rxtx+0x117>
    3cb6:	10 92 76 26 	sts	0x2676, r1	; 0x802676 <ir_rxtx+0x14f>
    3cba:	68 96       	adiw	r28, 0x18	; 24
    3cbc:	cd bf       	out	0x3d, r28	; 61
    3cbe:	de bf       	out	0x3e, r29	; 62
    3cc0:	df 91       	pop	r29
    3cc2:	cf 91       	pop	r28
    3cc4:	1f 91       	pop	r17
    3cc6:	0f 91       	pop	r16
    3cc8:	ff 90       	pop	r15
    3cca:	ef 90       	pop	r14
    3ccc:	df 90       	pop	r13
    3cce:	cf 90       	pop	r12
    3cd0:	bf 90       	pop	r11
    3cd2:	08 95       	ret
void checkCollisionValues(int16_t meas[6]){
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	//uint8_t dirs=0;
	if(irIsBusy(ALL_DIRS)){
		printf_P(PSTR("IR Hardware busy. Can't check collisions.\r\n"));
    3cd4:	8a ee       	ldi	r24, 0xEA	; 234
    3cd6:	96 e0       	ldi	r25, 0x06	; 6
    3cd8:	9f 93       	push	r25
    3cda:	8f 93       	push	r24
    3cdc:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
		return;
    3ce0:	0f 90       	pop	r0
    3ce2:	0f 90       	pop	r0
    3ce4:	ea cf       	rjmp	.-44     	; 0x3cba <checkCollisionValues+0xdc>

00003ce6 <checkCollisions>:
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}

uint8_t checkCollisions(){
    3ce6:	cf 93       	push	r28
    3ce8:	df 93       	push	r29
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
    3cee:	2c 97       	sbiw	r28, 0x0c	; 12
    3cf0:	cd bf       	out	0x3d, r28	; 61
    3cf2:	de bf       	out	0x3e, r29	; 62
	int16_t meas[6];
	uint8_t dirs = 0;
	checkCollisionValues(meas);
    3cf4:	ce 01       	movw	r24, r28
    3cf6:	01 96       	adiw	r24, 0x01	; 1
    3cf8:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <checkCollisionValues>
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	31 96       	adiw	r30, 0x01	; 1
    3d00:	af e5       	ldi	r26, 0x5F	; 95
    3d02:	b3 e2       	ldi	r27, 0x23	; 35
    3d04:	40 e0       	ldi	r20, 0x00	; 0
    3d06:	50 e0       	ldi	r21, 0x00	; 0
	//printf("\r\n");	
}

uint8_t checkCollisions(){
	int16_t meas[6];
	uint8_t dirs = 0;
    3d08:	80 e0       	ldi	r24, 0x00	; 0
	checkCollisionValues(meas);
	for(uint8_t i=0;i<6;i++){
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
    3d0a:	61 91       	ld	r22, Z+
    3d0c:	71 91       	ld	r23, Z+
    3d0e:	2d 91       	ld	r18, X+
    3d10:	3d 91       	ld	r19, X+
    3d12:	62 0f       	add	r22, r18
    3d14:	73 1f       	adc	r23, r19
    3d16:	21 e0       	ldi	r18, 0x01	; 1
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	6f 3f       	cpi	r22, 0xFF	; 255
    3d1c:	77 40       	sbci	r23, 0x07	; 7
    3d1e:	14 f4       	brge	.+4      	; 0x3d24 <checkCollisions+0x3e>
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	04 2e       	mov	r0, r20
    3d26:	01 c0       	rjmp	.+2      	; 0x3d2a <checkCollisions+0x44>
    3d28:	22 0f       	add	r18, r18
    3d2a:	0a 94       	dec	r0
    3d2c:	ea f7       	brpl	.-6      	; 0x3d28 <checkCollisions+0x42>
    3d2e:	82 2b       	or	r24, r18
    3d30:	4f 5f       	subi	r20, 0xFF	; 255
    3d32:	5f 4f       	sbci	r21, 0xFF	; 255

uint8_t checkCollisions(){
	int16_t meas[6];
	uint8_t dirs = 0;
	checkCollisionValues(meas);
	for(uint8_t i=0;i<6;i++){
    3d34:	46 30       	cpi	r20, 0x06	; 6
    3d36:	51 05       	cpc	r21, r1
    3d38:	41 f7       	brne	.-48     	; 0x3d0a <checkCollisions+0x24>
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
	}
	return dirs;
}
    3d3a:	2c 96       	adiw	r28, 0x0c	; 12
    3d3c:	cd bf       	out	0x3d, r28	; 61
    3d3e:	de bf       	out	0x3e, r29	; 62
    3d40:	df 91       	pop	r29
    3d42:	cf 91       	pop	r28
    3d44:	08 95       	ret

00003d46 <localizationInit>:
//static const Matrix xyMeasCovarClose  = {{100, 2, 0.5}, {2, 100, 0.75}, {0.5, 0.75, 0.05}};
//static const Matrix xyMeasCovarMed = {{500, 100, -4}, {100, 500, -0.5}, {-4, -0.5, 0.2}};
//static const Matrix xyMeasCovarFar = {{8000, -1000, -0.25}, {-1000, 8000, -10}, {-0.25, -10, 1}};

void localizationInit(){
	myPos.x = UNDF;
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	90 e8       	ldi	r25, 0x80	; 128
    3d4a:	80 93 c3 26 	sts	0x26C3, r24	; 0x8026c3 <myPos>
    3d4e:	90 93 c4 26 	sts	0x26C4, r25	; 0x8026c4 <myPos+0x1>
	myPos.y = UNDF;
    3d52:	80 93 c5 26 	sts	0x26C5, r24	; 0x8026c5 <myPos+0x2>
    3d56:	90 93 c6 26 	sts	0x26C6, r25	; 0x8026c6 <myPos+0x3>
	myPos.o = UNDF;
    3d5a:	80 93 c7 26 	sts	0x26C7, r24	; 0x8026c7 <myPos+0x4>
    3d5e:	90 93 c8 26 	sts	0x26C8, r25	; 0x8026c8 <myPos+0x5>
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
    3d62:	10 92 9b 24 	sts	0x249B, r1	; 0x80249b <myPosCovar>
    3d66:	10 92 9c 24 	sts	0x249C, r1	; 0x80249c <myPosCovar+0x1>
    3d6a:	10 92 9d 24 	sts	0x249D, r1	; 0x80249d <myPosCovar+0x2>
    3d6e:	10 92 9e 24 	sts	0x249E, r1	; 0x80249e <myPosCovar+0x3>
    3d72:	10 92 9f 24 	sts	0x249F, r1	; 0x80249f <myPosCovar+0x4>
    3d76:	10 92 a0 24 	sts	0x24A0, r1	; 0x8024a0 <myPosCovar+0x5>
    3d7a:	10 92 a1 24 	sts	0x24A1, r1	; 0x8024a1 <myPosCovar+0x6>
    3d7e:	10 92 a2 24 	sts	0x24A2, r1	; 0x8024a2 <myPosCovar+0x7>
    3d82:	10 92 a3 24 	sts	0x24A3, r1	; 0x8024a3 <myPosCovar+0x8>
    3d86:	10 92 a4 24 	sts	0x24A4, r1	; 0x8024a4 <myPosCovar+0x9>
    3d8a:	10 92 a5 24 	sts	0x24A5, r1	; 0x8024a5 <myPosCovar+0xa>
    3d8e:	10 92 a6 24 	sts	0x24A6, r1	; 0x8024a6 <myPosCovar+0xb>
	}
	seedFlag = 0;
    3d92:	10 92 22 25 	sts	0x2522, r1	; 0x802522 <seedFlag>
    3d96:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <droplet_ID>
    3d9a:	90 91 98 24 	lds	r25, 0x2498	; 0x802498 <droplet_ID+0x1>
	for(uint8_t i=0;i<NUM_SEEDS;i++){
		if(getDropletID()==SEED_IDS[i]){
    3d9e:	86 36       	cpi	r24, 0x66	; 102
    3da0:	2c e6       	ldi	r18, 0x6C	; 108
    3da2:	92 07       	cpc	r25, r18
    3da4:	e1 f1       	breq	.+120    	; 0x3e1e <localizationInit+0xd8>
    3da6:	81 3d       	cpi	r24, 0xD1	; 209
    3da8:	2c ec       	ldi	r18, 0xCC	; 204
    3daa:	92 07       	cpc	r25, r18
    3dac:	d1 f1       	breq	.+116    	; 0x3e22 <localizationInit+0xdc>
    3dae:	81 36       	cpi	r24, 0x61	; 97
    3db0:	23 e1       	ldi	r18, 0x13	; 19
    3db2:	92 07       	cpc	r25, r18
    3db4:	c1 f1       	breq	.+112    	; 0x3e26 <localizationInit+0xe0>
    3db6:	01 96       	adiw	r24, 0x01	; 1
    3db8:	09 f0       	breq	.+2      	; 0x3dbc <localizationInit+0x76>
    3dba:	08 95       	ret
	myPos.o = UNDF;
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
	}
	seedFlag = 0;
	for(uint8_t i=0;i<NUM_SEEDS;i++){
    3dbc:	83 e0       	ldi	r24, 0x03	; 3
		if(getDropletID()==SEED_IDS[i]){
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
			seedFlag = 1;
    3dc0:	21 e0       	ldi	r18, 0x01	; 1
    3dc2:	20 93 22 25 	sts	0x2522, r18	; 0x802522 <seedFlag>
			myPos.x = SEED_POS[i].x;
    3dc6:	fc 01       	movw	r30, r24
    3dc8:	ee 0f       	add	r30, r30
    3dca:	ff 1f       	adc	r31, r31
    3dcc:	e8 0f       	add	r30, r24
    3dce:	f9 1f       	adc	r31, r25
    3dd0:	ee 0f       	add	r30, r30
    3dd2:	ff 1f       	adc	r31, r31
    3dd4:	e0 5a       	subi	r30, 0xA0	; 160
    3dd6:	fe 4d       	sbci	r31, 0xDE	; 222
    3dd8:	80 81       	ld	r24, Z
    3dda:	91 81       	ldd	r25, Z+1	; 0x01
    3ddc:	80 93 c3 26 	sts	0x26C3, r24	; 0x8026c3 <myPos>
    3de0:	90 93 c4 26 	sts	0x26C4, r25	; 0x8026c4 <myPos+0x1>
			myPos.y = SEED_POS[i].y;
    3de4:	82 81       	ldd	r24, Z+2	; 0x02
    3de6:	93 81       	ldd	r25, Z+3	; 0x03
    3de8:	80 93 c5 26 	sts	0x26C5, r24	; 0x8026c5 <myPos+0x2>
    3dec:	90 93 c6 26 	sts	0x26C6, r25	; 0x8026c6 <myPos+0x3>
			myPos.o = SEED_POS[i].o;
    3df0:	84 81       	ldd	r24, Z+4	; 0x04
    3df2:	95 81       	ldd	r25, Z+5	; 0x05
    3df4:	80 93 c7 26 	sts	0x26C7, r24	; 0x8026c7 <myPos+0x4>
    3df8:	90 93 c8 26 	sts	0x26C8, r25	; 0x8026c8 <myPos+0x5>
			myPosCovar[0].u = 1; //the actual value used will be this*8
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	80 93 9b 24 	sts	0x249B, r24	; 0x80249b <myPosCovar>
    3e04:	90 93 9c 24 	sts	0x249C, r25	; 0x80249c <myPosCovar+0x1>
			myPosCovar[3].u = 1; //the actual value used will be this*8
    3e08:	80 93 a1 24 	sts	0x24A1, r24	; 0x8024a1 <myPosCovar+0x6>
    3e0c:	90 93 a2 24 	sts	0x24A2, r25	; 0x8024a2 <myPosCovar+0x7>
			myPosCovar[5].u = 16; //the actual value used will be this/256
    3e10:	80 e1       	ldi	r24, 0x10	; 16
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	80 93 a5 24 	sts	0x24A5, r24	; 0x8024a5 <myPosCovar+0xa>
    3e18:	90 93 a6 24 	sts	0x24A6, r25	; 0x8024a6 <myPosCovar+0xb>
    3e1c:	08 95       	ret
	myPos.o = UNDF;
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
	}
	seedFlag = 0;
	for(uint8_t i=0;i<NUM_SEEDS;i++){
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	ce cf       	rjmp	.-100    	; 0x3dbe <localizationInit+0x78>
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	cc cf       	rjmp	.-104    	; 0x3dbe <localizationInit+0x78>
    3e26:	82 e0       	ldi	r24, 0x02	; 2
    3e28:	ca cf       	rjmp	.-108    	; 0x3dbe <localizationInit+0x78>

00003e2a <stopMove>:
		printf("\r\n");
	}
	printf("\r\n");
}
void broadcastMotorAdjusts()
{
    3e2a:	e0 e0       	ldi	r30, 0x00	; 0
    3e2c:	f8 e0       	ldi	r31, 0x08	; 8
    3e2e:	81 81       	ldd	r24, Z+1	; 0x01
    3e30:	8f 7c       	andi	r24, 0xCF	; 207
    3e32:	81 83       	std	Z+1, r24	; 0x01
    3e34:	10 82       	st	Z, r1
    3e36:	e0 e4       	ldi	r30, 0x40	; 64
    3e38:	f8 e0       	ldi	r31, 0x08	; 8
    3e3a:	81 81       	ldd	r24, Z+1	; 0x01
    3e3c:	8f 7c       	andi	r24, 0xCF	; 207
    3e3e:	81 83       	std	Z+1, r24	; 0x01
    3e40:	10 82       	st	Z, r1
    3e42:	e0 e0       	ldi	r30, 0x00	; 0
    3e44:	f9 e0       	ldi	r31, 0x09	; 9
    3e46:	81 81       	ldd	r24, Z+1	; 0x01
    3e48:	8f 7c       	andi	r24, 0xCF	; 207
    3e4a:	81 83       	std	Z+1, r24	; 0x01
    3e4c:	10 82       	st	Z, r1
    3e4e:	83 e3       	ldi	r24, 0x33	; 51
    3e50:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    3e54:	83 e0       	ldi	r24, 0x03	; 3
    3e56:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    3e5a:	10 92 71 23 	sts	0x2371, r1	; 0x802371 <motor_status>
    3e5e:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <current_motor_task>
    3e62:	90 91 70 23 	lds	r25, 0x2370	; 0x802370 <current_motor_task+0x1>
    3e66:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <removeTask>
    3e6a:	10 92 6f 23 	sts	0x236F, r1	; 0x80236f <current_motor_task>
    3e6e:	10 92 70 23 	sts	0x2370, r1	; 0x802370 <current_motor_task+0x1>
    3e72:	08 95       	ret

00003e74 <moveSteps>:
    3e74:	8f 92       	push	r8
    3e76:	9f 92       	push	r9
    3e78:	af 92       	push	r10
    3e7a:	bf 92       	push	r11
    3e7c:	cf 92       	push	r12
    3e7e:	df 92       	push	r13
    3e80:	ef 92       	push	r14
    3e82:	ff 92       	push	r15
    3e84:	0f 93       	push	r16
    3e86:	1f 93       	push	r17
    3e88:	cf 93       	push	r28
    3e8a:	df 93       	push	r29
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    3e90:	29 97       	sbiw	r28, 0x09	; 9
    3e92:	cd bf       	out	0x3d, r28	; 61
    3e94:	de bf       	out	0x3e, r29	; 62
    3e96:	6b 01       	movw	r12, r22
    3e98:	90 91 71 23 	lds	r25, 0x2371	; 0x802371 <motor_status>
    3e9c:	97 fd       	sbrc	r25, 7
    3e9e:	1b c1       	rjmp	.+566    	; 0x40d6 <__stack+0xd7>
    3ea0:	98 2f       	mov	r25, r24
    3ea2:	97 70       	andi	r25, 0x07	; 7
    3ea4:	90 68       	ori	r25, 0x80	; 128
    3ea6:	90 93 71 23 	sts	0x2371, r25	; 0x802371 <motor_status>
    3eaa:	60 91 6d 23 	lds	r22, 0x236D	; 0x80236d <motor_on_time>
    3eae:	70 91 6e 23 	lds	r23, 0x236E	; 0x80236e <motor_on_time+0x1>
    3eb2:	66 0f       	add	r22, r22
    3eb4:	77 1f       	adc	r23, r23
    3eb6:	62 95       	swap	r22
    3eb8:	72 95       	swap	r23
    3eba:	70 7f       	andi	r23, 0xF0	; 240
    3ebc:	76 27       	eor	r23, r22
    3ebe:	60 7f       	andi	r22, 0xF0	; 240
    3ec0:	76 27       	eor	r23, r22
    3ec2:	a0 90 6b 23 	lds	r10, 0x236B	; 0x80236b <motor_off_time>
    3ec6:	b0 90 6c 23 	lds	r11, 0x236C	; 0x80236c <motor_off_time+0x1>
    3eca:	aa 0c       	add	r10, r10
    3ecc:	bb 1c       	adc	r11, r11
    3ece:	a2 94       	swap	r10
    3ed0:	b2 94       	swap	r11
    3ed2:	40 ef       	ldi	r20, 0xF0	; 240
    3ed4:	b4 22       	and	r11, r20
    3ed6:	ba 24       	eor	r11, r10
    3ed8:	a4 22       	and	r10, r20
    3eda:	ba 24       	eor	r11, r10
    3edc:	96 e0       	ldi	r25, 0x06	; 6
    3ede:	89 9f       	mul	r24, r25
    3ee0:	f0 01       	movw	r30, r0
    3ee2:	11 24       	eor	r1, r1
    3ee4:	df 01       	movw	r26, r30
    3ee6:	a4 57       	subi	r26, 0x74	; 116
    3ee8:	b9 4d       	sbci	r27, 0xD9	; 217
    3eea:	4d 01       	movw	r8, r26
    3eec:	de 01       	movw	r26, r28
    3eee:	11 96       	adiw	r26, 0x01	; 1
    3ef0:	7e 01       	movw	r14, r28
    3ef2:	e7 e0       	ldi	r30, 0x07	; 7
    3ef4:	ee 0e       	add	r14, r30
    3ef6:	f1 1c       	adc	r15, r1
    3ef8:	c7 01       	movw	r24, r14
    3efa:	00 e0       	ldi	r16, 0x00	; 0
    3efc:	10 e0       	ldi	r17, 0x00	; 0
    3efe:	f4 01       	movw	r30, r8
    3f00:	21 91       	ld	r18, Z+
    3f02:	31 91       	ld	r19, Z+
    3f04:	4f 01       	movw	r8, r30
    3f06:	21 15       	cp	r18, r1
    3f08:	31 05       	cpc	r19, r1
    3f0a:	09 f0       	breq	.+2      	; 0x3f0e <moveSteps+0x9a>
    3f0c:	66 c0       	rjmp	.+204    	; 0x3fda <moveSteps+0x166>
    3f0e:	1d 92       	st	X+, r1
    3f10:	1c 92       	st	X, r1
    3f12:	11 97       	sbiw	r26, 0x01	; 1
    3f14:	fc 01       	movw	r30, r24
    3f16:	10 82       	st	Z, r1
    3f18:	12 96       	adiw	r26, 0x02	; 2
    3f1a:	01 96       	adiw	r24, 0x01	; 1
    3f1c:	ae 15       	cp	r26, r14
    3f1e:	bf 05       	cpc	r27, r15
    3f20:	71 f7       	brne	.-36     	; 0x3efe <moveSteps+0x8a>
    3f22:	00 93 26 09 	sts	0x0926, r16	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    3f26:	10 93 27 09 	sts	0x0927, r17	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    3f2a:	00 93 66 08 	sts	0x0866, r16	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    3f2e:	10 93 67 08 	sts	0x0867, r17	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    3f32:	00 93 26 08 	sts	0x0826, r16	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    3f36:	10 93 27 08 	sts	0x0827, r17	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    3f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f3e:	e0 93 2a 08 	sts	0x082A, r30	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
    3f42:	f0 93 2b 08 	sts	0x082B, r31	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
    3f46:	e0 93 28 08 	sts	0x0828, r30	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3f4a:	f0 93 29 08 	sts	0x0829, r31	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    3f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f50:	9c 81       	ldd	r25, Y+4	; 0x04
    3f52:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <__TEXT_REGION_LENGTH__+0x70086a>
    3f56:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <__TEXT_REGION_LENGTH__+0x70086b>
    3f5a:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    3f5e:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    3f62:	8d 81       	ldd	r24, Y+5	; 0x05
    3f64:	9e 81       	ldd	r25, Y+6	; 0x06
    3f66:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3f6a:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    3f6e:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    3f72:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    3f76:	80 90 6b 23 	lds	r8, 0x236B	; 0x80236b <motor_off_time>
    3f7a:	90 90 6c 23 	lds	r9, 0x236C	; 0x80236c <motor_off_time+0x1>
    3f7e:	88 0c       	add	r8, r8
    3f80:	99 1c       	adc	r9, r9
    3f82:	82 94       	swap	r8
    3f84:	92 94       	swap	r9
    3f86:	50 ef       	ldi	r21, 0xF0	; 240
    3f88:	95 22       	and	r9, r21
    3f8a:	98 24       	eor	r9, r8
    3f8c:	85 22       	and	r8, r21
    3f8e:	98 24       	eor	r9, r8
    3f90:	5e 01       	movw	r10, r28
    3f92:	83 e0       	ldi	r24, 0x03	; 3
    3f94:	a8 0e       	add	r10, r24
    3f96:	b1 1c       	adc	r11, r1
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	40 e0       	ldi	r20, 0x00	; 0
    3f9e:	30 97       	sbiw	r30, 0x00	; 0
    3fa0:	a1 f0       	breq	.+40     	; 0x3fca <moveSteps+0x156>
    3fa2:	c8 01       	movw	r24, r16
    3fa4:	82 1b       	sub	r24, r18
    3fa6:	93 0b       	sbc	r25, r19
    3fa8:	b8 01       	movw	r22, r16
    3faa:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <__udivmodhi4>
    3fae:	41 30       	cpi	r20, 0x01	; 1
    3fb0:	09 f4       	brne	.+2      	; 0x3fb4 <moveSteps+0x140>
    3fb2:	a9 c0       	rjmp	.+338    	; 0x4106 <__stack+0x107>
    3fb4:	42 30       	cpi	r20, 0x02	; 2
    3fb6:	09 f4       	brne	.+2      	; 0x3fba <moveSteps+0x146>
    3fb8:	92 c0       	rjmp	.+292    	; 0x40de <__stack+0xdf>
    3fba:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    3fbe:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    3fc2:	2e 0f       	add	r18, r30
    3fc4:	3f 1f       	adc	r19, r31
    3fc6:	28 0d       	add	r18, r8
    3fc8:	39 1d       	adc	r19, r9
    3fca:	4f 5f       	subi	r20, 0xFF	; 255
    3fcc:	43 30       	cpi	r20, 0x03	; 3
    3fce:	c9 f0       	breq	.+50     	; 0x4002 <__stack+0x3>
    3fd0:	d5 01       	movw	r26, r10
    3fd2:	ed 91       	ld	r30, X+
    3fd4:	fd 91       	ld	r31, X+
    3fd6:	5d 01       	movw	r10, r26
    3fd8:	e2 cf       	rjmp	.-60     	; 0x3f9e <moveSteps+0x12a>
    3fda:	a9 01       	movw	r20, r18
    3fdc:	37 fd       	sbrc	r19, 7
    3fde:	8e c0       	rjmp	.+284    	; 0x40fc <__stack+0xfd>
    3fe0:	46 0f       	add	r20, r22
    3fe2:	57 1f       	adc	r21, r23
    3fe4:	4d 93       	st	X+, r20
    3fe6:	5c 93       	st	X, r21
    3fe8:	11 97       	sbiw	r26, 0x01	; 1
    3fea:	23 2f       	mov	r18, r19
    3fec:	22 0f       	add	r18, r18
    3fee:	22 0b       	sbc	r18, r18
    3ff0:	22 0f       	add	r18, r18
    3ff2:	2f 5f       	subi	r18, 0xFF	; 255
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	20 83       	st	Z, r18
    3ff8:	0a 0d       	add	r16, r10
    3ffa:	1b 1d       	adc	r17, r11
    3ffc:	04 0f       	add	r16, r20
    3ffe:	15 1f       	adc	r17, r21
    4000:	8b cf       	rjmp	.-234    	; 0x3f18 <moveSteps+0xa4>
    4002:	02 17       	cp	r16, r18
    4004:	13 07       	cpc	r17, r19
    4006:	81 f0       	breq	.+32     	; 0x4028 <__stack+0x29>
    4008:	1f 93       	push	r17
    400a:	0f 93       	push	r16
    400c:	3f 93       	push	r19
    400e:	2f 93       	push	r18
    4010:	85 ef       	ldi	r24, 0xF5	; 245
    4012:	97 e0       	ldi	r25, 0x07	; 7
    4014:	9f 93       	push	r25
    4016:	8f 93       	push	r24
    4018:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    401c:	0f 90       	pop	r0
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	0f 90       	pop	r0
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	80 e0       	ldi	r24, 0x00	; 0
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	47 e0       	ldi	r20, 0x07	; 7
    402e:	38 2f       	mov	r19, r24
    4030:	f7 01       	movw	r30, r14
    4032:	21 91       	ld	r18, Z+
    4034:	7f 01       	movw	r14, r30
    4036:	01 96       	adiw	r24, 0x01	; 1
    4038:	27 fd       	sbrc	r18, 7
    403a:	13 c0       	rjmp	.+38     	; 0x4062 <__stack+0x63>
    403c:	22 23       	and	r18, r18
    403e:	01 f1       	breq	.+64     	; 0x4080 <__stack+0x81>
    4040:	31 30       	cpi	r19, 0x01	; 1
    4042:	09 f4       	brne	.+2      	; 0x4046 <__stack+0x47>
    4044:	65 c0       	rjmp	.+202    	; 0x4110 <__stack+0x111>
    4046:	32 30       	cpi	r19, 0x02	; 2
    4048:	09 f0       	breq	.+2      	; 0x404c <__stack+0x4d>
    404a:	4e c0       	rjmp	.+156    	; 0x40e8 <__stack+0xe9>
    404c:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    4050:	80 62       	ori	r24, 0x20	; 32
    4052:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    4056:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <__TEXT_REGION_LENGTH__+0x700902>
    405a:	87 e0       	ldi	r24, 0x07	; 7
    405c:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
    4060:	11 c0       	rjmp	.+34     	; 0x4084 <__stack+0x85>
    4062:	31 30       	cpi	r19, 0x01	; 1
    4064:	09 f4       	brne	.+2      	; 0x4068 <__stack+0x69>
    4066:	72 c0       	rjmp	.+228    	; 0x414c <__stack+0x14d>
    4068:	32 30       	cpi	r19, 0x02	; 2
    406a:	09 f4       	brne	.+2      	; 0x406e <__stack+0x6f>
    406c:	5b c0       	rjmp	.+182    	; 0x4124 <__stack+0x125>
    406e:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    4072:	20 61       	ori	r18, 0x10	; 16
    4074:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    4078:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    407c:	40 93 00 08 	sts	0x0800, r20	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    4080:	83 30       	cpi	r24, 0x03	; 3
    4082:	a9 f6       	brne	.-86     	; 0x402e <__stack+0x2f>
    4084:	98 01       	movw	r18, r16
    4086:	d6 01       	movw	r26, r12
    4088:	0e 94 3c 4c 	call	0x9878	; 0x9878 <__umulhisi3>
    408c:	25 e0       	ldi	r18, 0x05	; 5
    408e:	96 95       	lsr	r25
    4090:	87 95       	ror	r24
    4092:	77 95       	ror	r23
    4094:	67 95       	ror	r22
    4096:	2a 95       	dec	r18
    4098:	d1 f7       	brne	.-12     	; 0x408e <__stack+0x8f>
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	45 e1       	ldi	r20, 0x15	; 21
    40a0:	5f e1       	ldi	r21, 0x1F	; 31
    40a2:	0e 94 f7 35 	call	0x6bee	; 0x6bee <scheduleTask>
    40a6:	80 93 6f 23 	sts	0x236F, r24	; 0x80236f <current_motor_task>
    40aa:	90 93 70 23 	sts	0x2370, r25	; 0x802370 <current_motor_task+0x1>
    40ae:	89 2b       	or	r24, r25
    40b0:	09 f4       	brne	.+2      	; 0x40b4 <__stack+0xb5>
    40b2:	43 c0       	rjmp	.+134    	; 0x413a <__stack+0x13b>
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	29 96       	adiw	r28, 0x09	; 9
    40b8:	cd bf       	out	0x3d, r28	; 61
    40ba:	de bf       	out	0x3e, r29	; 62
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	1f 91       	pop	r17
    40c2:	0f 91       	pop	r16
    40c4:	ff 90       	pop	r15
    40c6:	ef 90       	pop	r14
    40c8:	df 90       	pop	r13
    40ca:	cf 90       	pop	r12
    40cc:	bf 90       	pop	r11
    40ce:	af 90       	pop	r10
    40d0:	9f 90       	pop	r9
    40d2:	8f 90       	pop	r8
    40d4:	08 95       	ret
    40d6:	80 91 71 23 	lds	r24, 0x2371	; 0x802371 <motor_status>
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	ec cf       	rjmp	.-40     	; 0x40b6 <__stack+0xb7>
    40de:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <__TEXT_REGION_LENGTH__+0x700920>
    40e2:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <__TEXT_REGION_LENGTH__+0x700921>
    40e6:	6d cf       	rjmp	.-294    	; 0x3fc2 <moveSteps+0x14e>
    40e8:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    40ec:	20 62       	ori	r18, 0x20	; 32
    40ee:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    40f2:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    40f6:	40 93 00 08 	sts	0x0800, r20	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    40fa:	c2 cf       	rjmp	.-124    	; 0x4080 <__stack+0x81>
    40fc:	44 27       	eor	r20, r20
    40fe:	55 27       	eor	r21, r21
    4100:	42 1b       	sub	r20, r18
    4102:	53 0b       	sbc	r21, r19
    4104:	6d cf       	rjmp	.-294    	; 0x3fe0 <moveSteps+0x16c>
    4106:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    410a:	90 93 61 08 	sts	0x0861, r25	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    410e:	59 cf       	rjmp	.-334    	; 0x3fc2 <moveSteps+0x14e>
    4110:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    4114:	20 62       	ori	r18, 0x20	; 32
    4116:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    411a:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    411e:	40 93 40 08 	sts	0x0840, r20	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    4122:	85 cf       	rjmp	.-246    	; 0x402e <__stack+0x2f>
    4124:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    4128:	80 61       	ori	r24, 0x10	; 16
    412a:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    412e:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <__TEXT_REGION_LENGTH__+0x700902>
    4132:	87 e0       	ldi	r24, 0x07	; 7
    4134:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
    4138:	a5 cf       	rjmp	.-182    	; 0x4084 <__stack+0x85>
    413a:	8b ec       	ldi	r24, 0xCB	; 203
    413c:	97 e0       	ldi	r25, 0x07	; 7
    413e:	9f 93       	push	r25
    4140:	8f 93       	push	r24
    4142:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    4146:	0f 90       	pop	r0
    4148:	0f 90       	pop	r0
    414a:	b4 cf       	rjmp	.-152    	; 0x40b4 <__stack+0xb5>
    414c:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    4150:	20 61       	ori	r18, 0x10	; 16
    4152:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    4156:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    415a:	40 93 40 08 	sts	0x0840, r20	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    415e:	67 cf       	rjmp	.-306    	; 0x402e <__stack+0x2f>

00004160 <walk>:
    4160:	cf 92       	push	r12
    4162:	df 92       	push	r13
    4164:	ef 92       	push	r14
    4166:	ff 92       	push	r15
    4168:	0f 93       	push	r16
    416a:	1f 93       	push	r17
    416c:	cf 93       	push	r28
    416e:	df 93       	push	r29
    4170:	18 2f       	mov	r17, r24
    4172:	eb 01       	movw	r28, r22
    4174:	e8 2f       	mov	r30, r24
    4176:	f0 e0       	ldi	r31, 0x00	; 0
    4178:	ee 0f       	add	r30, r30
    417a:	ff 1f       	adc	r31, r31
    417c:	ef 52       	subi	r30, 0x2F	; 47
    417e:	fb 4d       	sbci	r31, 0xDB	; 219
    4180:	60 81       	ld	r22, Z
    4182:	71 81       	ldd	r23, Z+1	; 0x01
    4184:	67 3e       	cpi	r22, 0xE7	; 231
    4186:	83 e0       	ldi	r24, 0x03	; 3
    4188:	78 07       	cpc	r23, r24
    418a:	2c f4       	brge	.+10     	; 0x4196 <walk+0x36>
    418c:	68 31       	cpi	r22, 0x18	; 24
    418e:	9c ef       	ldi	r25, 0xFC	; 252
    4190:	79 07       	cpc	r23, r25
    4192:	0c f0       	brlt	.+2      	; 0x4196 <walk+0x36>
    4194:	43 c0       	rjmp	.+134    	; 0x421c <walk+0xbc>
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0e 94 b3 48 	call	0x9166	; 0x9166 <__floatunsisf>
    419e:	20 e0       	ldi	r18, 0x00	; 0
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	4a e7       	ldi	r20, 0x7A	; 122
    41a4:	54 e4       	ldi	r21, 0x44	; 68
    41a6:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    41aa:	6b 01       	movw	r12, r22
    41ac:	7c 01       	movw	r14, r24
    41ae:	be 01       	movw	r22, r28
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	0e 94 b3 48 	call	0x9166	; 0x9166 <__floatunsisf>
    41b8:	a7 01       	movw	r20, r14
    41ba:	96 01       	movw	r18, r12
    41bc:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    41c0:	6b 01       	movw	r12, r22
    41c2:	7c 01       	movw	r14, r24
    41c4:	8a e0       	ldi	r24, 0x0A	; 10
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    41cc:	c7 01       	movw	r24, r14
    41ce:	b6 01       	movw	r22, r12
    41d0:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    41d4:	f6 2e       	mov	r15, r22
    41d6:	07 2f       	mov	r16, r23
    41d8:	7f 93       	push	r23
    41da:	6f 93       	push	r22
    41dc:	df 93       	push	r29
    41de:	cf 93       	push	r28
    41e0:	1f 92       	push	r1
    41e2:	1f 93       	push	r17
    41e4:	83 e5       	ldi	r24, 0x53	; 83
    41e6:	97 e0       	ldi	r25, 0x07	; 7
    41e8:	9f 93       	push	r25
    41ea:	8f 93       	push	r24
    41ec:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    41f0:	8a e0       	ldi	r24, 0x0A	; 10
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    41f8:	8d b7       	in	r24, 0x3d	; 61
    41fa:	9e b7       	in	r25, 0x3e	; 62
    41fc:	08 96       	adiw	r24, 0x08	; 8
    41fe:	8d bf       	out	0x3d, r24	; 61
    4200:	9e bf       	out	0x3e, r25	; 62
    4202:	6f 2d       	mov	r22, r15
    4204:	70 2f       	mov	r23, r16
    4206:	81 2f       	mov	r24, r17
    4208:	df 91       	pop	r29
    420a:	cf 91       	pop	r28
    420c:	1f 91       	pop	r17
    420e:	0f 91       	pop	r16
    4210:	ff 90       	pop	r15
    4212:	ef 90       	pop	r14
    4214:	df 90       	pop	r13
    4216:	cf 90       	pop	r12
    4218:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <moveSteps>
    421c:	81 e9       	ldi	r24, 0x91	; 145
    421e:	97 e0       	ldi	r25, 0x07	; 7
    4220:	9f 93       	push	r25
    4222:	8f 93       	push	r24
    4224:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	16 30       	cpi	r17, 0x06	; 6
    422e:	48 f4       	brcc	.+18     	; 0x4242 <walk+0xe2>
    4230:	8a e9       	ldi	r24, 0x9A	; 154
    4232:	c8 2e       	mov	r12, r24
    4234:	89 e9       	ldi	r24, 0x99	; 153
    4236:	d8 2e       	mov	r13, r24
    4238:	89 e1       	ldi	r24, 0x19	; 25
    423a:	e8 2e       	mov	r14, r24
    423c:	8f e3       	ldi	r24, 0x3F	; 63
    423e:	f8 2e       	mov	r15, r24
    4240:	b6 cf       	rjmp	.-148    	; 0x41ae <walk+0x4e>
    4242:	c1 2c       	mov	r12, r1
    4244:	d1 2c       	mov	r13, r1
    4246:	e1 2c       	mov	r14, r1
    4248:	90 e4       	ldi	r25, 0x40	; 64
    424a:	f9 2e       	mov	r15, r25
    424c:	b0 cf       	rjmp	.-160    	; 0x41ae <walk+0x4e>

0000424e <setMMperKilostep>:
    424e:	e8 2f       	mov	r30, r24
    4250:	f0 e0       	ldi	r31, 0x00	; 0
    4252:	ee 0f       	add	r30, r30
    4254:	ff 1f       	adc	r31, r31
    4256:	ef 52       	subi	r30, 0x2F	; 47
    4258:	fb 4d       	sbci	r31, 0xDB	; 219
    425a:	60 83       	st	Z, r22
    425c:	71 83       	std	Z+1, r23	; 0x01
    425e:	08 95       	ret

00004260 <readMotorSettings>:
    4260:	df 92       	push	r13
    4262:	ef 92       	push	r14
    4264:	ff 92       	push	r15
    4266:	0f 93       	push	r16
    4268:	1f 93       	push	r17
    426a:	cf 93       	push	r28
    426c:	df 93       	push	r29
    426e:	50 e1       	ldi	r21, 0x10	; 16
    4270:	e5 2e       	mov	r14, r21
    4272:	f1 2c       	mov	r15, r1
    4274:	87 01       	movw	r16, r14
    4276:	04 58       	subi	r16, 0x84	; 132
    4278:	19 4d       	sbci	r17, 0xD9	; 217
    427a:	e7 01       	movw	r28, r14
    427c:	26 96       	adiw	r28, 0x06	; 6
    427e:	c7 01       	movw	r24, r14
    4280:	0e 94 1d 0c 	call	0x183a	; 0x183a <EEPROM_read_byte>
    4284:	d8 2e       	mov	r13, r24
    4286:	c7 01       	movw	r24, r14
    4288:	01 96       	adiw	r24, 0x01	; 1
    428a:	0e 94 1d 0c 	call	0x183a	; 0x183a <EEPROM_read_byte>
    428e:	2d 2d       	mov	r18, r13
    4290:	30 e0       	ldi	r19, 0x00	; 0
    4292:	32 2f       	mov	r19, r18
    4294:	22 27       	eor	r18, r18
    4296:	28 2b       	or	r18, r24
    4298:	f8 01       	movw	r30, r16
    429a:	21 93       	st	Z+, r18
    429c:	31 93       	st	Z+, r19
    429e:	8f 01       	movw	r16, r30
    42a0:	f2 e0       	ldi	r31, 0x02	; 2
    42a2:	ef 0e       	add	r14, r31
    42a4:	f1 1c       	adc	r15, r1
    42a6:	ec 16       	cp	r14, r28
    42a8:	fd 06       	cpc	r15, r29
    42aa:	49 f7       	brne	.-46     	; 0x427e <readMotorSettings+0x1e>
    42ac:	7e 01       	movw	r14, r28
    42ae:	c0 34       	cpi	r28, 0x40	; 64
    42b0:	d1 05       	cpc	r29, r1
    42b2:	01 f7       	brne	.-64     	; 0x4274 <readMotorSettings+0x14>
    42b4:	21 ed       	ldi	r18, 0xD1	; 209
    42b6:	e2 2e       	mov	r14, r18
    42b8:	24 e2       	ldi	r18, 0x24	; 36
    42ba:	f2 2e       	mov	r15, r18
    42bc:	ce 01       	movw	r24, r28
    42be:	0e 94 1d 0c 	call	0x183a	; 0x183a <EEPROM_read_byte>
    42c2:	18 2f       	mov	r17, r24
    42c4:	ce 01       	movw	r24, r28
    42c6:	01 96       	adiw	r24, 0x01	; 1
    42c8:	0e 94 1d 0c 	call	0x183a	; 0x183a <EEPROM_read_byte>
    42cc:	21 2f       	mov	r18, r17
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	32 2f       	mov	r19, r18
    42d2:	22 27       	eor	r18, r18
    42d4:	28 2b       	or	r18, r24
    42d6:	f7 01       	movw	r30, r14
    42d8:	21 93       	st	Z+, r18
    42da:	31 93       	st	Z+, r19
    42dc:	7f 01       	movw	r14, r30
    42de:	22 96       	adiw	r28, 0x02	; 2
    42e0:	c0 35       	cpi	r28, 0x50	; 80
    42e2:	d1 05       	cpc	r29, r1
    42e4:	59 f7       	brne	.-42     	; 0x42bc <readMotorSettings+0x5c>
    42e6:	df 91       	pop	r29
    42e8:	cf 91       	pop	r28
    42ea:	1f 91       	pop	r17
    42ec:	0f 91       	pop	r16
    42ee:	ff 90       	pop	r15
    42f0:	ef 90       	pop	r14
    42f2:	df 90       	pop	r13
    42f4:	08 95       	ret

000042f6 <motorInit>:
    42f6:	cf 93       	push	r28
    42f8:	df 93       	push	r29
    42fa:	e0 e4       	ldi	r30, 0x40	; 64
    42fc:	f6 e0       	ldi	r31, 0x06	; 6
    42fe:	83 e3       	ldi	r24, 0x33	; 51
    4300:	81 83       	std	Z+1, r24	; 0x01
    4302:	a0 e6       	ldi	r26, 0x60	; 96
    4304:	b6 e0       	ldi	r27, 0x06	; 6
    4306:	83 e0       	ldi	r24, 0x03	; 3
    4308:	11 96       	adiw	r26, 0x01	; 1
    430a:	8c 93       	st	X, r24
    430c:	11 97       	sbiw	r26, 0x01	; 1
    430e:	c0 e0       	ldi	r28, 0x00	; 0
    4310:	d8 e0       	ldi	r29, 0x08	; 8
    4312:	18 82       	st	Y, r1
    4314:	89 83       	std	Y+1, r24	; 0x01
    4316:	c0 e4       	ldi	r28, 0x40	; 64
    4318:	d8 e0       	ldi	r29, 0x08	; 8
    431a:	18 82       	st	Y, r1
    431c:	89 83       	std	Y+1, r24	; 0x01
    431e:	c0 e0       	ldi	r28, 0x00	; 0
    4320:	d9 e0       	ldi	r29, 0x09	; 9
    4322:	18 82       	st	Y, r1
    4324:	89 83       	std	Y+1, r24	; 0x01
    4326:	90 e4       	ldi	r25, 0x40	; 64
    4328:	90 8b       	std	Z+16, r25	; 0x10
    432a:	91 8b       	std	Z+17, r25	; 0x11
    432c:	94 8b       	std	Z+20, r25	; 0x14
    432e:	95 8b       	std	Z+21, r25	; 0x15
    4330:	50 96       	adiw	r26, 0x10	; 16
    4332:	9c 93       	st	X, r25
    4334:	50 97       	sbiw	r26, 0x10	; 16
    4336:	51 96       	adiw	r26, 0x11	; 17
    4338:	9c 93       	st	X, r25
    433a:	51 97       	sbiw	r26, 0x11	; 17
    433c:	86 83       	std	Z+6, r24	; 0x06
    433e:	90 e3       	ldi	r25, 0x30	; 48
    4340:	96 83       	std	Z+6, r25	; 0x06
    4342:	16 96       	adiw	r26, 0x06	; 6
    4344:	8c 93       	st	X, r24
    4346:	10 92 71 23 	sts	0x2371, r1	; 0x802371 <motor_status>
    434a:	84 e1       	ldi	r24, 0x14	; 20
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	80 93 6d 23 	sts	0x236D, r24	; 0x80236d <motor_on_time>
    4352:	90 93 6e 23 	sts	0x236E, r25	; 0x80236e <motor_on_time+0x1>
    4356:	88 e2       	ldi	r24, 0x28	; 40
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	80 93 6b 23 	sts	0x236B, r24	; 0x80236b <motor_off_time>
    435e:	90 93 6c 23 	sts	0x236C, r25	; 0x80236c <motor_off_time+0x1>
    4362:	df 91       	pop	r29
    4364:	cf 91       	pop	r28
    4366:	0c 94 30 21 	jmp	0x4260	; 0x4260 <readMotorSettings>

0000436a <writeMotorSettings>:
    436a:	df 92       	push	r13
    436c:	ef 92       	push	r14
    436e:	ff 92       	push	r15
    4370:	0f 93       	push	r16
    4372:	1f 93       	push	r17
    4374:	cf 93       	push	r28
    4376:	df 93       	push	r29
    4378:	c0 e1       	ldi	r28, 0x10	; 16
    437a:	d0 e0       	ldi	r29, 0x00	; 0
    437c:	8e 01       	movw	r16, r28
    437e:	04 58       	subi	r16, 0x84	; 132
    4380:	19 4d       	sbci	r17, 0xD9	; 217
    4382:	7e 01       	movw	r14, r28
    4384:	86 e0       	ldi	r24, 0x06	; 6
    4386:	e8 0e       	add	r14, r24
    4388:	f1 1c       	adc	r15, r1
    438a:	f8 01       	movw	r30, r16
    438c:	d0 80       	ld	r13, Z
    438e:	61 81       	ldd	r22, Z+1	; 0x01
    4390:	0e 5f       	subi	r16, 0xFE	; 254
    4392:	1f 4f       	sbci	r17, 0xFF	; 255
    4394:	ce 01       	movw	r24, r28
    4396:	0e 94 36 0c 	call	0x186c	; 0x186c <EEPROM_write_byte>
    439a:	6d 2d       	mov	r22, r13
    439c:	ce 01       	movw	r24, r28
    439e:	01 96       	adiw	r24, 0x01	; 1
    43a0:	0e 94 36 0c 	call	0x186c	; 0x186c <EEPROM_write_byte>
    43a4:	22 96       	adiw	r28, 0x02	; 2
    43a6:	ce 15       	cp	r28, r14
    43a8:	df 05       	cpc	r29, r15
    43aa:	79 f7       	brne	.-34     	; 0x438a <writeMotorSettings+0x20>
    43ac:	e7 01       	movw	r28, r14
    43ae:	f0 e4       	ldi	r31, 0x40	; 64
    43b0:	ef 16       	cp	r14, r31
    43b2:	f1 04       	cpc	r15, r1
    43b4:	19 f7       	brne	.-58     	; 0x437c <writeMotorSettings+0x12>
    43b6:	c1 ed       	ldi	r28, 0xD1	; 209
    43b8:	d4 e2       	ldi	r29, 0x24	; 36
    43ba:	18 81       	ld	r17, Y
    43bc:	69 81       	ldd	r22, Y+1	; 0x01
    43be:	22 96       	adiw	r28, 0x02	; 2
    43c0:	c7 01       	movw	r24, r14
    43c2:	0e 94 36 0c 	call	0x186c	; 0x186c <EEPROM_write_byte>
    43c6:	61 2f       	mov	r22, r17
    43c8:	c7 01       	movw	r24, r14
    43ca:	01 96       	adiw	r24, 0x01	; 1
    43cc:	0e 94 36 0c 	call	0x186c	; 0x186c <EEPROM_write_byte>
    43d0:	e2 e0       	ldi	r30, 0x02	; 2
    43d2:	ee 0e       	add	r14, r30
    43d4:	f1 1c       	adc	r15, r1
    43d6:	f0 e5       	ldi	r31, 0x50	; 80
    43d8:	ef 16       	cp	r14, r31
    43da:	f1 04       	cpc	r15, r1
    43dc:	71 f7       	brne	.-36     	; 0x43ba <writeMotorSettings+0x50>
    43de:	df 91       	pop	r29
    43e0:	cf 91       	pop	r28
    43e2:	1f 91       	pop	r17
    43e4:	0f 91       	pop	r16
    43e6:	ff 90       	pop	r15
    43e8:	ef 90       	pop	r14
    43ea:	df 90       	pop	r13
    43ec:	08 95       	ret

000043ee <printMotorValues>:
    43ee:	8f 92       	push	r8
    43f0:	9f 92       	push	r9
    43f2:	af 92       	push	r10
    43f4:	bf 92       	push	r11
    43f6:	cf 92       	push	r12
    43f8:	df 92       	push	r13
    43fa:	ef 92       	push	r14
    43fc:	ff 92       	push	r15
    43fe:	1f 93       	push	r17
    4400:	cf 93       	push	r28
    4402:	df 93       	push	r29
    4404:	84 e4       	ldi	r24, 0x44	; 68
    4406:	97 e0       	ldi	r25, 0x07	; 7
    4408:	9f 93       	push	r25
    440a:	8f 93       	push	r24
    440c:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    4410:	8c e8       	ldi	r24, 0x8C	; 140
    4412:	a8 2e       	mov	r10, r24
    4414:	86 e2       	ldi	r24, 0x26	; 38
    4416:	b8 2e       	mov	r11, r24
    4418:	0f 90       	pop	r0
    441a:	0f 90       	pop	r0
    441c:	c1 2c       	mov	r12, r1
    441e:	d1 2c       	mov	r13, r1
    4420:	99 e3       	ldi	r25, 0x39	; 57
    4422:	89 2e       	mov	r8, r25
    4424:	97 e0       	ldi	r25, 0x07	; 7
    4426:	99 2e       	mov	r9, r25
    4428:	28 e7       	ldi	r18, 0x78	; 120
    442a:	e2 2e       	mov	r14, r18
    442c:	21 e2       	ldi	r18, 0x21	; 33
    442e:	f2 2e       	mov	r15, r18
    4430:	df 92       	push	r13
    4432:	cf 92       	push	r12
    4434:	9f 92       	push	r9
    4436:	8f 92       	push	r8
    4438:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    443c:	0f 90       	pop	r0
    443e:	0f 90       	pop	r0
    4440:	0f 90       	pop	r0
    4442:	0f 90       	pop	r0
    4444:	e5 01       	movw	r28, r10
    4446:	13 e0       	ldi	r17, 0x03	; 3
    4448:	88 81       	ld	r24, Y
    444a:	99 81       	ldd	r25, Y+1	; 0x01
    444c:	22 96       	adiw	r28, 0x02	; 2
    444e:	9f 93       	push	r25
    4450:	8f 93       	push	r24
    4452:	ff 92       	push	r15
    4454:	ef 92       	push	r14
    4456:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    445a:	11 50       	subi	r17, 0x01	; 1
    445c:	0f 90       	pop	r0
    445e:	0f 90       	pop	r0
    4460:	0f 90       	pop	r0
    4462:	0f 90       	pop	r0
    4464:	89 f7       	brne	.-30     	; 0x4448 <printMotorValues+0x5a>
    4466:	8f eb       	ldi	r24, 0xBF	; 191
    4468:	90 e2       	ldi	r25, 0x20	; 32
    446a:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <puts>
    446e:	8f ef       	ldi	r24, 0xFF	; 255
    4470:	c8 1a       	sub	r12, r24
    4472:	d8 0a       	sbc	r13, r24
    4474:	86 e0       	ldi	r24, 0x06	; 6
    4476:	a8 0e       	add	r10, r24
    4478:	b1 1c       	adc	r11, r1
    447a:	88 e0       	ldi	r24, 0x08	; 8
    447c:	c8 16       	cp	r12, r24
    447e:	d1 04       	cpc	r13, r1
    4480:	b9 f6       	brne	.-82     	; 0x4430 <printMotorValues+0x42>
    4482:	8f eb       	ldi	r24, 0xBF	; 191
    4484:	90 e2       	ldi	r25, 0x20	; 32
    4486:	df 91       	pop	r29
    4488:	cf 91       	pop	r28
    448a:	1f 91       	pop	r17
    448c:	ff 90       	pop	r15
    448e:	ef 90       	pop	r14
    4490:	df 90       	pop	r13
    4492:	cf 90       	pop	r12
    4494:	bf 90       	pop	r11
    4496:	af 90       	pop	r10
    4498:	9f 90       	pop	r9
    449a:	8f 90       	pop	r8
    449c:	0c 94 db 50 	jmp	0xa1b6	; 0xa1b6 <puts>

000044a0 <printDistPerStep>:
	// TODO: Deprecated?
}

void printDistPerStep()
{
    44a0:	ef 92       	push	r14
    44a2:	ff 92       	push	r15
    44a4:	0f 93       	push	r16
    44a6:	1f 93       	push	r17
    44a8:	cf 93       	push	r28
    44aa:	df 93       	push	r29
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
    44ac:	80 e2       	ldi	r24, 0x20	; 32
    44ae:	97 e0       	ldi	r25, 0x07	; 7
    44b0:	9f 93       	push	r25
    44b2:	8f 93       	push	r24
    44b4:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    44b8:	01 ed       	ldi	r16, 0xD1	; 209
    44ba:	14 e2       	ldi	r17, 0x24	; 36
    44bc:	0f 90       	pop	r0
    44be:	0f 90       	pop	r0
    44c0:	c0 e0       	ldi	r28, 0x00	; 0
    44c2:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t direction = 0 ; direction<8; direction++)
	{
		printf_P(PSTR("\t%hu\t%u\r\n"), direction, mmPerKilostep[direction]);	
    44c4:	86 e1       	ldi	r24, 0x16	; 22
    44c6:	e8 2e       	mov	r14, r24
    44c8:	87 e0       	ldi	r24, 0x07	; 7
    44ca:	f8 2e       	mov	r15, r24
    44cc:	f8 01       	movw	r30, r16
    44ce:	80 81       	ld	r24, Z
    44d0:	91 81       	ldd	r25, Z+1	; 0x01
    44d2:	0e 5f       	subi	r16, 0xFE	; 254
    44d4:	1f 4f       	sbci	r17, 0xFF	; 255
    44d6:	9f 93       	push	r25
    44d8:	8f 93       	push	r24
    44da:	df 93       	push	r29
    44dc:	cf 93       	push	r28
    44de:	ff 92       	push	r15
    44e0:	ef 92       	push	r14
    44e2:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    44e6:	21 96       	adiw	r28, 0x01	; 1
}

void printDistPerStep()
{
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
	for(uint8_t direction = 0 ; direction<8; direction++)
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	0f 90       	pop	r0
    44f2:	0f 90       	pop	r0
    44f4:	c8 30       	cpi	r28, 0x08	; 8
    44f6:	d1 05       	cpc	r29, r1
    44f8:	49 f7       	brne	.-46     	; 0x44cc <printDistPerStep+0x2c>
	{
		printf_P(PSTR("\t%hu\t%u\r\n"), direction, mmPerKilostep[direction]);	
	}
}
    44fa:	df 91       	pop	r29
    44fc:	cf 91       	pop	r28
    44fe:	1f 91       	pop	r17
    4500:	0f 91       	pop	r16
    4502:	ff 90       	pop	r15
    4504:	ef 90       	pop	r14
    4506:	08 95       	ret

00004508 <nvm_flash_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    4508:	da 01       	movw	r26, r20
    450a:	a9 01       	movw	r20, r18
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    450c:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    4510:	37 fd       	sbrc	r19, 7
    4512:	fc cf       	rjmp	.-8      	; 0x450c <nvm_flash_read_buffer+0x4>
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    4514:	41 15       	cp	r20, r1
    4516:	51 05       	cpc	r21, r1
    4518:	69 f0       	breq	.+26     	; 0x4534 <nvm_flash_read_buffer+0x2c>
    451a:	4a 0f       	add	r20, r26
    451c:	5b 1f       	adc	r21, r27
 *
 * \param addr Byte address to load
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr){
	return pgm_read_byte_far(addr);
    451e:	8b bf       	out	0x3b, r24	; 59
    4520:	fb 01       	movw	r30, r22
    4522:	37 91       	elpm	r19, Z+
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
    4524:	3d 93       	st	X+, r19
		buf=(uint8_t*)buf+1;
		opt_address++;
    4526:	6f 5f       	subi	r22, 0xFF	; 255
    4528:	7f 4f       	sbci	r23, 0xFF	; 255
    452a:	8f 4f       	sbci	r24, 0xFF	; 255
    452c:	9f 4f       	sbci	r25, 0xFF	; 255
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    452e:	a4 17       	cp	r26, r20
    4530:	b5 07       	cpc	r27, r21
    4532:	a9 f7       	brne	.-22     	; 0x451e <nvm_flash_read_buffer+0x16>
    4534:	08 95       	ret

00004536 <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    4536:	4f 92       	push	r4
    4538:	5f 92       	push	r5
    453a:	6f 92       	push	r6
    453c:	7f 92       	push	r7
    453e:	8f 92       	push	r8
    4540:	9f 92       	push	r9
    4542:	af 92       	push	r10
    4544:	bf 92       	push	r11
    4546:	cf 92       	push	r12
    4548:	df 92       	push	r13
    454a:	ef 92       	push	r14
    454c:	ff 92       	push	r15
    454e:	0f 93       	push	r16
    4550:	1f 93       	push	r17
    4552:	cf 93       	push	r28
    4554:	df 93       	push	r29
    4556:	00 d0       	rcall	.+0      	; 0x4558 <nvm_flash_erase_and_write_buffer+0x22>
    4558:	00 d0       	rcall	.+0      	; 0x455a <nvm_flash_erase_and_write_buffer+0x24>
    455a:	cd b7       	in	r28, 0x3d	; 61
    455c:	de b7       	in	r29, 0x3e	; 62
    455e:	2b 01       	movw	r4, r22
    4560:	3c 01       	movw	r6, r24
    4562:	6a 01       	movw	r12, r20
    4564:	79 01       	movw	r14, r18
    4566:	90 2e       	mov	r9, r16
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    4568:	dc 01       	movw	r26, r24
    456a:	cb 01       	movw	r24, r22
    456c:	88 27       	eor	r24, r24
    456e:	9e 7f       	andi	r25, 0xFE	; 254
    4570:	89 83       	std	Y+1, r24	; 0x01
    4572:	9a 83       	std	Y+2, r25	; 0x02
    4574:	ab 83       	std	Y+3, r26	; 0x03
    4576:	bc 83       	std	Y+4, r27	; 0x04

	// For each page
	while ( len ) {
    4578:	23 2b       	or	r18, r19
    457a:	09 f4       	brne	.+2      	; 0x457e <nvm_flash_erase_and_write_buffer+0x48>
    457c:	87 c0       	rjmp	.+270    	; 0x468c <nvm_flash_erase_and_write_buffer+0x156>
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    457e:	aa 24       	eor	r10, r10
    4580:	aa 94       	dec	r10
    4582:	ba 2c       	mov	r11, r10
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    4584:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    4588:	87 fd       	sbrc	r24, 7
    458a:	fc cf       	rjmp	.-8      	; 0x4584 <nvm_flash_erase_and_write_buffer+0x4e>
    458c:	00 e0       	ldi	r16, 0x00	; 0
    458e:	11 e0       	ldi	r17, 0x01	; 1
    4590:	81 2c       	mov	r8, r1
    4592:	41 c0       	rjmp	.+130    	; 0x4616 <nvm_flash_erase_and_write_buffer+0xe0>

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    4594:	89 81       	ldd	r24, Y+1	; 0x01
    4596:	9a 81       	ldd	r25, Y+2	; 0x02
    4598:	ab 81       	ldd	r26, Y+3	; 0x03
    459a:	bc 81       	ldd	r27, Y+4	; 0x04
 *
 * \param addr Byte address to load (last bit is ignored)
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr){
	return pgm_read_word_far(addr);
    459c:	ab bf       	out	0x3b, r26	; 59
    459e:	fc 01       	movw	r30, r24
    45a0:	87 91       	elpm	r24, Z+
    45a2:	96 91       	elpm	r25, Z
    45a4:	8d 83       	std	Y+5, r24	; 0x05
    45a6:	9e 83       	std	Y+6, r25	; 0x06
				if (w_value!=0xFFFF) {
    45a8:	8d 81       	ldd	r24, Y+5	; 0x05
    45aa:	9e 81       	ldd	r25, Y+6	; 0x06
    45ac:	01 96       	adiw	r24, 0x01	; 1
    45ae:	11 f0       	breq	.+4      	; 0x45b4 <nvm_flash_erase_and_write_buffer+0x7e>
					b_flag_erase = true; // The page is not empty
    45b0:	88 24       	eor	r8, r8
    45b2:	83 94       	inc	r8
			}else{
				w_value = 0xFFFF;
			}

			// Update flash buffer
			if (len) {
    45b4:	e1 14       	cp	r14, r1
    45b6:	f1 04       	cpc	r15, r1
    45b8:	c1 f0       	breq	.+48     	; 0x45ea <nvm_flash_erase_and_write_buffer+0xb4>
				if (opt_address == page_address) {
    45ba:	89 81       	ldd	r24, Y+1	; 0x01
    45bc:	9a 81       	ldd	r25, Y+2	; 0x02
    45be:	ab 81       	ldd	r26, Y+3	; 0x03
    45c0:	bc 81       	ldd	r27, Y+4	; 0x04
    45c2:	84 15       	cp	r24, r4
    45c4:	95 05       	cpc	r25, r5
    45c6:	a6 05       	cpc	r26, r6
    45c8:	b7 05       	cpc	r27, r7
    45ca:	c9 f1       	breq	.+114    	; 0x463e <nvm_flash_erase_and_write_buffer+0x108>
					LSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
				if (opt_address == (page_address+1)) {
    45cc:	89 81       	ldd	r24, Y+1	; 0x01
    45ce:	9a 81       	ldd	r25, Y+2	; 0x02
    45d0:	ab 81       	ldd	r26, Y+3	; 0x03
    45d2:	bc 81       	ldd	r27, Y+4	; 0x04
    45d4:	ac 01       	movw	r20, r24
    45d6:	bd 01       	movw	r22, r26
    45d8:	4f 5f       	subi	r20, 0xFF	; 255
    45da:	5f 4f       	sbci	r21, 0xFF	; 255
    45dc:	6f 4f       	sbci	r22, 0xFF	; 255
    45de:	7f 4f       	sbci	r23, 0xFF	; 255
    45e0:	44 15       	cp	r20, r4
    45e2:	55 05       	cpc	r21, r5
    45e4:	66 05       	cpc	r22, r6
    45e6:	77 05       	cpc	r23, r7
    45e8:	d9 f0       	breq	.+54     	; 0x4620 <nvm_flash_erase_and_write_buffer+0xea>
					MSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    45ea:	4d 81       	ldd	r20, Y+5	; 0x05
    45ec:	5e 81       	ldd	r21, Y+6	; 0x06
    45ee:	69 81       	ldd	r22, Y+1	; 0x01
    45f0:	7a 81       	ldd	r23, Y+2	; 0x02
    45f2:	8b 81       	ldd	r24, Y+3	; 0x03
    45f4:	9c 81       	ldd	r25, Y+4	; 0x04
    45f6:	0f 94 0f 00 	call	0x2001e	; 0x2001e <nvm_flash_load_word_to_buffer>
			page_address+=2;
    45fa:	89 81       	ldd	r24, Y+1	; 0x01
    45fc:	9a 81       	ldd	r25, Y+2	; 0x02
    45fe:	ab 81       	ldd	r26, Y+3	; 0x03
    4600:	bc 81       	ldd	r27, Y+4	; 0x04
    4602:	02 96       	adiw	r24, 0x02	; 2
    4604:	a1 1d       	adc	r26, r1
    4606:	b1 1d       	adc	r27, r1
    4608:	89 83       	std	Y+1, r24	; 0x01
    460a:	9a 83       	std	Y+2, r25	; 0x02
    460c:	ab 83       	std	Y+3, r26	; 0x03
    460e:	bc 83       	std	Y+4, r27	; 0x04
    4610:	01 50       	subi	r16, 0x01	; 1
    4612:	11 09       	sbc	r17, r1
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    4614:	29 f1       	breq	.+74     	; 0x4660 <nvm_flash_erase_and_write_buffer+0x12a>
			if (b_blank_check) {
    4616:	91 10       	cpse	r9, r1
    4618:	bd cf       	rjmp	.-134    	; 0x4594 <nvm_flash_erase_and_write_buffer+0x5e>
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    461a:	ad 82       	std	Y+5, r10	; 0x05
    461c:	be 82       	std	Y+6, r11	; 0x06
    461e:	ca cf       	rjmp	.-108    	; 0x45b4 <nvm_flash_erase_and_write_buffer+0x7e>
			}
			if (len) {
				if (opt_address == (page_address+1)) {
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    4620:	f1 e0       	ldi	r31, 0x01	; 1
    4622:	ef 1a       	sub	r14, r31
    4624:	f1 08       	sbc	r15, r1
					opt_address++;
    4626:	2c 01       	movw	r4, r24
    4628:	3d 01       	movw	r6, r26
    462a:	22 e0       	ldi	r18, 0x02	; 2
    462c:	42 0e       	add	r4, r18
    462e:	51 1c       	adc	r5, r1
    4630:	61 1c       	adc	r6, r1
    4632:	71 1c       	adc	r7, r1
					MSB(w_value)=*(uint8_t*)buf;
    4634:	f6 01       	movw	r30, r12
    4636:	81 91       	ld	r24, Z+
    4638:	6f 01       	movw	r12, r30
    463a:	8e 83       	std	Y+6, r24	; 0x06
    463c:	d6 cf       	rjmp	.-84     	; 0x45ea <nvm_flash_erase_and_write_buffer+0xb4>
			// Update flash buffer
			if (len) {
				if (opt_address == page_address) {
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    463e:	81 e0       	ldi	r24, 0x01	; 1
    4640:	e8 1a       	sub	r14, r24
    4642:	f1 08       	sbc	r15, r1
					opt_address++;
    4644:	ef ef       	ldi	r30, 0xFF	; 255
    4646:	4e 1a       	sub	r4, r30
    4648:	5e 0a       	sbc	r5, r30
    464a:	6e 0a       	sbc	r6, r30
    464c:	7e 0a       	sbc	r7, r30
					LSB(w_value)=*(uint8_t*)buf;
    464e:	f6 01       	movw	r30, r12
    4650:	81 91       	ld	r24, Z+
    4652:	6f 01       	movw	r12, r30
    4654:	8d 83       	std	Y+5, r24	; 0x05
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    4656:	e1 14       	cp	r14, r1
    4658:	f1 04       	cpc	r15, r1
    465a:	09 f0       	breq	.+2      	; 0x465e <nvm_flash_erase_and_write_buffer+0x128>
    465c:	b7 cf       	rjmp	.-146    	; 0x45cc <nvm_flash_erase_and_write_buffer+0x96>
    465e:	c5 cf       	rjmp	.-118    	; 0x45ea <nvm_flash_erase_and_write_buffer+0xb4>
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
    4660:	09 81       	ldd	r16, Y+1	; 0x01
    4662:	1a 81       	ldd	r17, Y+2	; 0x02
    4664:	2b 81       	ldd	r18, Y+3	; 0x03
    4666:	3c 81       	ldd	r19, Y+4	; 0x04
    4668:	c9 01       	movw	r24, r18
    466a:	b8 01       	movw	r22, r16
    466c:	72 50       	subi	r23, 0x02	; 2
    466e:	81 09       	sbc	r24, r1
    4670:	91 09       	sbc	r25, r1
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    4672:	88 20       	and	r8, r8
    4674:	19 f1       	breq	.+70     	; 0x46bc <nvm_flash_erase_and_write_buffer+0x186>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    4676:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    467a:	27 fd       	sbrc	r18, 7
    467c:	fc cf       	rjmp	.-8      	; 0x4676 <nvm_flash_erase_and_write_buffer+0x140>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    467e:	45 e2       	ldi	r20, 0x25	; 37
    4680:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    4684:	e1 14       	cp	r14, r1
    4686:	f1 04       	cpc	r15, r1
    4688:	09 f0       	breq	.+2      	; 0x468c <nvm_flash_erase_and_write_buffer+0x156>
    468a:	7c cf       	rjmp	.-264    	; 0x4584 <nvm_flash_erase_and_write_buffer+0x4e>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
	printf("End of NVM eraseWrite.\r\n");
    468c:	8c e7       	ldi	r24, 0x7C	; 124
    468e:	91 e2       	ldi	r25, 0x21	; 33
    4690:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <puts>
    4694:	26 96       	adiw	r28, 0x06	; 6
    4696:	cd bf       	out	0x3d, r28	; 61
    4698:	de bf       	out	0x3e, r29	; 62
    469a:	df 91       	pop	r29
    469c:	cf 91       	pop	r28
    469e:	1f 91       	pop	r17
    46a0:	0f 91       	pop	r16
    46a2:	ff 90       	pop	r15
    46a4:	ef 90       	pop	r14
    46a6:	df 90       	pop	r13
    46a8:	cf 90       	pop	r12
    46aa:	bf 90       	pop	r11
    46ac:	af 90       	pop	r10
    46ae:	9f 90       	pop	r9
    46b0:	8f 90       	pop	r8
    46b2:	7f 90       	pop	r7
    46b4:	6f 90       	pop	r6
    46b6:	5f 90       	pop	r5
    46b8:	4f 90       	pop	r4
    46ba:	08 95       	ret
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    46bc:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    46c0:	27 fd       	sbrc	r18, 7
    46c2:	fc cf       	rjmp	.-8      	; 0x46bc <nvm_flash_erase_and_write_buffer+0x186>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    46c4:	44 e2       	ldi	r20, 0x24	; 36
    46c6:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    46ca:	e1 14       	cp	r14, r1
    46cc:	f1 04       	cpc	r15, r1
    46ce:	09 f0       	breq	.+2      	; 0x46d2 <nvm_flash_erase_and_write_buffer+0x19c>
    46d0:	59 cf       	rjmp	.-334    	; 0x4584 <nvm_flash_erase_and_write_buffer+0x4e>
    46d2:	dc cf       	rjmp	.-72     	; 0x468c <nvm_flash_erase_and_write_buffer+0x156>

000046d4 <pc_comm_putchar>:
				
	serial_in_index = temp_index;
}

static int pc_comm_putchar(char c, FILE *stream __attribute__ ((unused))){
	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
    46d4:	90 91 b1 09 	lds	r25, 0x09B1	; 0x8009b1 <__TEXT_REGION_LENGTH__+0x7009b1>
    46d8:	95 ff       	sbrs	r25, 5
    46da:	fc cf       	rjmp	.-8      	; 0x46d4 <pc_comm_putchar>
	PC_USART.DATA = c;
    46dc:	80 93 b0 09 	sts	0x09B0, r24	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	return 1;
}
    46e0:	81 e0       	ldi	r24, 0x01	; 1
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	08 95       	ret

000046e6 <pcCommInit>:
static int pc_comm_putchar(char c, FILE *stream);
static void handle_up_arrow(void);
static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);

void pcCommInit(){
	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
    46e6:	e0 e6       	ldi	r30, 0x60	; 96
    46e8:	f6 e0       	ldi	r31, 0x06	; 6
    46ea:	80 e8       	ldi	r24, 0x80	; 128
    46ec:	81 83       	std	Z+1, r24	; 0x01
	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
    46ee:	80 e4       	ldi	r24, 0x40	; 64
    46f0:	82 83       	std	Z+2, r24	; 0x02

	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
    46f2:	e0 eb       	ldi	r30, 0xB0	; 176
    46f4:	f9 e0       	ldi	r31, 0x09	; 9
    46f6:	83 e0       	ldi	r24, 0x03	; 3
    46f8:	85 83       	std	Z+5, r24	; 0x05

	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
    46fa:	87 e1       	ldi	r24, 0x17	; 23
    46fc:	86 83       	std	Z+6, r24	; 0x06
	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
    46fe:	84 ea       	ldi	r24, 0xA4	; 164
    4700:	87 83       	std	Z+7, r24	; 0x07

	PC_USART.CTRLB |= USART_RXEN_bm;
    4702:	84 81       	ldd	r24, Z+4	; 0x04
    4704:	80 61       	ori	r24, 0x10	; 16
    4706:	84 83       	std	Z+4, r24	; 0x04
	PC_USART.CTRLB |= USART_TXEN_bm;
    4708:	84 81       	ldd	r24, Z+4	; 0x04
    470a:	88 60       	ori	r24, 0x08	; 8
    470c:	84 83       	std	Z+4, r24	; 0x04

	stdout = &mystdout;
    470e:	82 e1       	ldi	r24, 0x12	; 18
    4710:	90 e2       	ldi	r25, 0x20	; 32
    4712:	80 93 df 28 	sts	0x28DF, r24	; 0x8028df <__iob+0x2>
    4716:	90 93 e0 28 	sts	0x28E0, r25	; 0x8028e0 <__iob+0x3>
	serial_in_index = 0;
    471a:	10 92 72 23 	sts	0x2372, r1	; 0x802372 <serial_in_index>
    471e:	10 92 73 23 	sts	0x2373, r1	; 0x802373 <serial_in_index+0x1>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
    4722:	80 e2       	ldi	r24, 0x20	; 32
    4724:	83 83       	std	Z+3, r24	; 0x03
	printf("\n");
    4726:	8a e0       	ldi	r24, 0x0A	; 10
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	0c 94 d5 50 	jmp	0xa1aa	; 0xa1aa <putchar>

0000472e <__vector_91>:
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    472e:	1f 92       	push	r1
    4730:	0f 92       	push	r0
    4732:	0f b6       	in	r0, 0x3f	; 63
    4734:	0f 92       	push	r0
    4736:	11 24       	eor	r1, r1
    4738:	0b b6       	in	r0, 0x3b	; 59
    473a:	0f 92       	push	r0
    473c:	2f 93       	push	r18
    473e:	3f 93       	push	r19
    4740:	4f 93       	push	r20
    4742:	5f 93       	push	r21
    4744:	6f 93       	push	r22
    4746:	7f 93       	push	r23
    4748:	8f 93       	push	r24
    474a:	9f 93       	push	r25
    474c:	af 93       	push	r26
    474e:	bf 93       	push	r27
    4750:	cf 93       	push	r28
    4752:	ef 93       	push	r30
    4754:	ff 93       	push	r31

static void handle_serial_input(void){
	char data = PC_USART.DATA;
    4756:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	if(escaped_arrow==1){
    475a:	90 91 74 23 	lds	r25, 0x2374	; 0x802374 <escaped_arrow>
    475e:	91 30       	cpi	r25, 0x01	; 1
    4760:	09 f4       	brne	.+2      	; 0x4764 <__vector_91+0x36>
    4762:	47 c0       	rjmp	.+142    	; 0x47f2 <__vector_91+0xc4>
		if(data == 65){
			handle_up_arrow();
		}
		escaped_arrow=0;
	}else if(escaped){
    4764:	90 91 75 23 	lds	r25, 0x2375	; 0x802375 <escaped>
    4768:	91 11       	cpse	r25, r1
    476a:	28 c0       	rjmp	.+80     	; 0x47bc <__vector_91+0x8e>
		if(data == 91){
			escaped_arrow=1;	
		}
		escaped=0;
	}else if(data == '\r' || data == '\n'){ //We got the newline character.
    476c:	8d 30       	cpi	r24, 0x0D	; 13
    476e:	09 f4       	brne	.+2      	; 0x4772 <__vector_91+0x44>
    4770:	59 c0       	rjmp	.+178    	; 0x4824 <__vector_91+0xf6>
    4772:	8a 30       	cpi	r24, 0x0A	; 10
    4774:	09 f4       	brne	.+2      	; 0x4778 <__vector_91+0x4a>
    4776:	56 c0       	rjmp	.+172    	; 0x4824 <__vector_91+0xf6>
		printf("\r\n");
		serial_in_buffer[serial_in_index]='\0';
		handleSerialCommand(serial_in_buffer,serial_in_index);
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
    4778:	88 30       	cpi	r24, 0x08	; 8
    477a:	09 f4       	brne	.+2      	; 0x477e <__vector_91+0x50>
    477c:	3f c0       	rjmp	.+126    	; 0x47fc <__vector_91+0xce>
		if(serial_in_index > 0) serial_in_index--;
		printf("\b \b");
	}else if(data == 27){ //escape pressed.
    477e:	8b 31       	cpi	r24, 0x1B	; 27
    4780:	09 f4       	brne	.+2      	; 0x4784 <__vector_91+0x56>
    4782:	88 c0       	rjmp	.+272    	; 0x4894 <__vector_91+0x166>
		escaped = 1;
	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
    4784:	20 91 72 23 	lds	r18, 0x2372	; 0x802372 <serial_in_index>
    4788:	30 91 73 23 	lds	r19, 0x2373	; 0x802373 <serial_in_index+0x1>
    478c:	20 34       	cpi	r18, 0x40	; 64
    478e:	31 05       	cpc	r19, r1
    4790:	09 f4       	brne	.+2      	; 0x4794 <__vector_91+0x66>
    4792:	84 c0       	rjmp	.+264    	; 0x489c <__vector_91+0x16e>
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFER_SIZE);
		serial_in_index = 0;
	}else{ //Everything is fine. Add the character to the buffer.
		serial_in_buffer[serial_in_index] = data;
    4794:	f9 01       	movw	r30, r18
    4796:	ea 58       	subi	r30, 0x8A	; 138
    4798:	fc 4d       	sbci	r31, 0xDC	; 220
    479a:	80 83       	st	Z, r24
		//printf("Got char '%c'\r\n",data);
		serial_in_index++;
    479c:	2f 5f       	subi	r18, 0xFF	; 255
    479e:	3f 4f       	sbci	r19, 0xFF	; 255
    47a0:	20 93 72 23 	sts	0x2372, r18	; 0x802372 <serial_in_index>
    47a4:	30 93 73 23 	sts	0x2373, r19	; 0x802373 <serial_in_index+0x1>
		putchar(data);
    47a8:	60 91 df 28 	lds	r22, 0x28DF	; 0x8028df <__iob+0x2>
    47ac:	70 91 e0 28 	lds	r23, 0x28E0	; 0x8028e0 <__iob+0x3>
    47b0:	08 2e       	mov	r0, r24
    47b2:	00 0c       	add	r0, r0
    47b4:	99 0b       	sbc	r25, r25
    47b6:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    47ba:	07 c0       	rjmp	.+14     	; 0x47ca <__vector_91+0x9c>
		if(data == 65){
			handle_up_arrow();
		}
		escaped_arrow=0;
	}else if(escaped){
		if(data == 91){
    47bc:	8b 35       	cpi	r24, 0x5B	; 91
    47be:	19 f4       	brne	.+6      	; 0x47c6 <__vector_91+0x98>
			escaped_arrow=1;	
    47c0:	81 e0       	ldi	r24, 0x01	; 1
    47c2:	80 93 74 23 	sts	0x2374, r24	; 0x802374 <escaped_arrow>
		}
		escaped=0;
    47c6:	10 92 75 23 	sts	0x2375, r1	; 0x802375 <escaped>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    47ca:	ff 91       	pop	r31
    47cc:	ef 91       	pop	r30
    47ce:	cf 91       	pop	r28
    47d0:	bf 91       	pop	r27
    47d2:	af 91       	pop	r26
    47d4:	9f 91       	pop	r25
    47d6:	8f 91       	pop	r24
    47d8:	7f 91       	pop	r23
    47da:	6f 91       	pop	r22
    47dc:	5f 91       	pop	r21
    47de:	4f 91       	pop	r20
    47e0:	3f 91       	pop	r19
    47e2:	2f 91       	pop	r18
    47e4:	0f 90       	pop	r0
    47e6:	0b be       	out	0x3b, r0	; 59
    47e8:	0f 90       	pop	r0
    47ea:	0f be       	out	0x3f, r0	; 63
    47ec:	0f 90       	pop	r0
    47ee:	1f 90       	pop	r1
    47f0:	18 95       	reti

static void handle_serial_input(void){
	char data = PC_USART.DATA;
	if(escaped_arrow==1){
		if(data == 65){
    47f2:	81 34       	cpi	r24, 0x41	; 65
    47f4:	61 f1       	breq	.+88     	; 0x484e <__vector_91+0x120>
			handle_up_arrow();
		}
		escaped_arrow=0;
    47f6:	10 92 74 23 	sts	0x2374, r1	; 0x802374 <escaped_arrow>
    47fa:	e7 cf       	rjmp	.-50     	; 0x47ca <__vector_91+0x9c>
		printf("\r\n");
		serial_in_buffer[serial_in_index]='\0';
		handleSerialCommand(serial_in_buffer,serial_in_index);
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
		if(serial_in_index > 0) serial_in_index--;
    47fc:	80 91 72 23 	lds	r24, 0x2372	; 0x802372 <serial_in_index>
    4800:	90 91 73 23 	lds	r25, 0x2373	; 0x802373 <serial_in_index+0x1>
    4804:	00 97       	sbiw	r24, 0x00	; 0
    4806:	29 f0       	breq	.+10     	; 0x4812 <__vector_91+0xe4>
    4808:	01 97       	sbiw	r24, 0x01	; 1
    480a:	80 93 72 23 	sts	0x2372, r24	; 0x802372 <serial_in_index>
    480e:	90 93 73 23 	sts	0x2373, r25	; 0x802373 <serial_in_index+0x1>
		printf("\b \b");
    4812:	84 e9       	ldi	r24, 0x94	; 148
    4814:	91 e2       	ldi	r25, 0x21	; 33
    4816:	9f 93       	push	r25
    4818:	8f 93       	push	r24
    481a:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    481e:	0f 90       	pop	r0
    4820:	0f 90       	pop	r0
    4822:	d3 cf       	rjmp	.-90     	; 0x47ca <__vector_91+0x9c>
		if(data == 91){
			escaped_arrow=1;	
		}
		escaped=0;
	}else if(data == '\r' || data == '\n'){ //We got the newline character.
		printf("\r\n");
    4824:	8f eb       	ldi	r24, 0xBF	; 191
    4826:	90 e2       	ldi	r25, 0x20	; 32
    4828:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <puts>
		serial_in_buffer[serial_in_index]='\0';
    482c:	60 91 72 23 	lds	r22, 0x2372	; 0x802372 <serial_in_index>
    4830:	70 91 73 23 	lds	r23, 0x2373	; 0x802373 <serial_in_index+0x1>
    4834:	fb 01       	movw	r30, r22
    4836:	ea 58       	subi	r30, 0x8A	; 138
    4838:	fc 4d       	sbci	r31, 0xDC	; 220
    483a:	10 82       	st	Z, r1
		handleSerialCommand(serial_in_buffer,serial_in_index);
    483c:	86 e7       	ldi	r24, 0x76	; 118
    483e:	93 e2       	ldi	r25, 0x23	; 35
    4840:	0e 94 36 39 	call	0x726c	; 0x726c <handleSerialCommand>
		serial_in_index = 0;
    4844:	10 92 72 23 	sts	0x2372, r1	; 0x802372 <serial_in_index>
    4848:	10 92 73 23 	sts	0x2373, r1	; 0x802373 <serial_in_index+0x1>
    484c:	be cf       	rjmp	.-132    	; 0x47ca <__vector_91+0x9c>
		putchar(data);
	}
}

static void handle_up_arrow(void){
	uint8_t temp_index = serial_in_index;
    484e:	80 91 72 23 	lds	r24, 0x2372	; 0x802372 <serial_in_index>
    4852:	90 91 73 23 	lds	r25, 0x2373	; 0x802373 <serial_in_index+0x1>
    4856:	c8 2f       	mov	r28, r24
			
	while(serial_in_buffer[temp_index] != '\0'){
    4858:	99 27       	eor	r25, r25
    485a:	fc 01       	movw	r30, r24
    485c:	ea 58       	subi	r30, 0x8A	; 138
    485e:	fc 4d       	sbci	r31, 0xDC	; 220
    4860:	80 81       	ld	r24, Z
    4862:	88 23       	and	r24, r24
    4864:	69 f1       	breq	.+90     	; 0x48c0 <__vector_91+0x192>
		putchar(serial_in_buffer[temp_index]);
    4866:	60 91 df 28 	lds	r22, 0x28DF	; 0x8028df <__iob+0x2>
    486a:	70 91 e0 28 	lds	r23, 0x28E0	; 0x8028e0 <__iob+0x3>
    486e:	08 2e       	mov	r0, r24
    4870:	00 0c       	add	r0, r0
    4872:	99 0b       	sbc	r25, r25
    4874:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
		temp_index++;
    4878:	cf 5f       	subi	r28, 0xFF	; 255
}

static void handle_up_arrow(void){
	uint8_t temp_index = serial_in_index;
			
	while(serial_in_buffer[temp_index] != '\0'){
    487a:	2c 2f       	mov	r18, r28
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	f9 01       	movw	r30, r18
    4880:	ea 58       	subi	r30, 0x8A	; 138
    4882:	fc 4d       	sbci	r31, 0xDC	; 220
    4884:	80 81       	ld	r24, Z
    4886:	81 11       	cpse	r24, r1
    4888:	ee cf       	rjmp	.-36     	; 0x4866 <__vector_91+0x138>
		putchar(serial_in_buffer[temp_index]);
		temp_index++;
	}
				
	serial_in_index = temp_index;
    488a:	20 93 72 23 	sts	0x2372, r18	; 0x802372 <serial_in_index>
    488e:	30 93 73 23 	sts	0x2373, r19	; 0x802373 <serial_in_index+0x1>
    4892:	b1 cf       	rjmp	.-158    	; 0x47f6 <__vector_91+0xc8>
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
		if(serial_in_index > 0) serial_in_index--;
		printf("\b \b");
	}else if(data == 27){ //escape pressed.
		escaped = 1;
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	80 93 75 23 	sts	0x2375, r24	; 0x802375 <escaped>
    489a:	97 cf       	rjmp	.-210    	; 0x47ca <__vector_91+0x9c>
	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFER_SIZE);
    489c:	1f 92       	push	r1
    489e:	80 e4       	ldi	r24, 0x40	; 64
    48a0:	8f 93       	push	r24
    48a2:	8f e2       	ldi	r24, 0x2F	; 47
    48a4:	98 e0       	ldi	r25, 0x08	; 8
    48a6:	9f 93       	push	r25
    48a8:	8f 93       	push	r24
    48aa:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
		serial_in_index = 0;
    48ae:	10 92 72 23 	sts	0x2372, r1	; 0x802372 <serial_in_index>
    48b2:	10 92 73 23 	sts	0x2373, r1	; 0x802373 <serial_in_index+0x1>
    48b6:	0f 90       	pop	r0
    48b8:	0f 90       	pop	r0
    48ba:	0f 90       	pop	r0
    48bc:	0f 90       	pop	r0
    48be:	85 cf       	rjmp	.-246    	; 0x47ca <__vector_91+0x9c>
    48c0:	2c 2f       	mov	r18, r28
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	e2 cf       	rjmp	.-60     	; 0x488a <__vector_91+0x15c>

000048c6 <powerInit>:
	legMonitorInit();
}

void capMonitorInit()
{
	PORTB.DIRCLR = PIN0_bm | PIN1_bm;
    48c6:	83 e0       	ldi	r24, 0x03	; 3
    48c8:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
	
	ACB.AC0CTRL = AC_ENABLE_bm;
    48cc:	e0 e9       	ldi	r30, 0x90	; 144
    48ce:	f3 e0       	ldi	r31, 0x03	; 3
    48d0:	81 e0       	ldi	r24, 0x01	; 1
    48d2:	80 83       	st	Z, r24
	ACB.AC1CTRL = AC_ENABLE_bm;
    48d4:	81 83       	std	Z+1, r24	; 0x01
	
	ACB.AC0MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc; //Changed the muxneg from bandgap
    48d6:	88 e0       	ldi	r24, 0x08	; 8
    48d8:	82 83       	std	Z+2, r24	; 0x02
	ACB.AC1MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc;
    48da:	83 83       	std	Z+3, r24	; 0x03
	
	ACB.WINCTRL = AC_WEN_bm;
    48dc:	90 e1       	ldi	r25, 0x10	; 16
    48de:	96 83       	std	Z+6, r25	; 0x06
}

void legMonitorInit()
{
	PORTA.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm;
    48e0:	e0 e0       	ldi	r30, 0x00	; 0
    48e2:	f6 e0       	ldi	r31, 0x06	; 6
    48e4:	8f e1       	ldi	r24, 0x1F	; 31
    48e6:	82 83       	std	Z+2, r24	; 0x02
	
	PORTA.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    48e8:	87 e0       	ldi	r24, 0x07	; 7
    48ea:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    48ec:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    48ee:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    48f0:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    48f2:	84 8b       	std	Z+20, r24	; 0x14
	
	ACA.WINCTRL = AC_WEN_bm;					// Enable window mode
    48f4:	e0 e8       	ldi	r30, 0x80	; 128
    48f6:	f3 e0       	ldi	r31, 0x03	; 3
    48f8:	96 83       	std	Z+6, r25	; 0x06
	
	ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN2_gc;	// PA0 is VREF_HI
    48fa:	92 83       	std	Z+2, r25	; 0x02
	ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN2_gc;	// PA1 is VREF_LO
    48fc:	81 e1       	ldi	r24, 0x11	; 17
    48fe:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.AC0CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    4900:	89 e0       	ldi	r24, 0x09	; 9
    4902:	80 83       	st	Z, r24
	ACA.AC1CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    4904:	81 83       	std	Z+1, r24	; 0x01
    4906:	08 95       	ret

00004908 <randomInit>:
    // Setting this bit will reset the AES crypto module to its initial status on the next positive edge of
    // the peripheral clock. All registers, pointers, and memories in the module are set to their initial
    // value. When written to one, the bit stays high for one clock cycle before it is reset to zero by
    // hardware. (p. 320)

	AES.CTRL = AES_RESET_bm;
    4908:	80 e2       	ldi	r24, 0x20	; 32
    490a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    // After encryption/decryption is done, the last subkey can be read sequentially, byte-by-byte,
    // through the KEY register.
    // Loading the initial data to the KEY register should be done after setting the appropriate AES
    // mode and direction. (p. 322)

	AES.KEY = PRODSIGNATURES_LOTNUM0;
    490e:	88 b1       	in	r24, 0x08	; 8
    4910:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM1;
    4914:	89 b1       	in	r24, 0x09	; 9
    4916:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM2;
    491a:	8a b1       	in	r24, 0x0a	; 10
    491c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM3;
    4920:	8b b1       	in	r24, 0x0b	; 11
    4922:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = PRODSIGNATURES_LOTNUM4;
    4926:	8c b1       	in	r24, 0x0c	; 12
    4928:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM5;
    492c:	8d b1       	in	r24, 0x0d	; 13
    492e:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_WAFNUM;
    4932:	80 b3       	in	r24, 0x10	; 16
    4934:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDX0;
    4938:	82 b3       	in	r24, 0x12	; 18
    493a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = PRODSIGNATURES_COORDX1;
    493e:	83 b3       	in	r24, 0x13	; 19
    4940:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDY0;
    4944:	84 b3       	in	r24, 0x14	; 20
    4946:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDY1;
    494a:	85 b3       	in	r24, 0x15	; 21
    494c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCA.CH0.RESL;
    4950:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    4954:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = ADCA.CH1.RESL;
    4958:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    495c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCA.CH2.RESL;
    4960:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    4964:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCB.CH0.RESL;
    4968:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    496c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCB.CH1.RESL;
    4970:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    4974:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	r_round = 1;
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	80 93 b8 23 	sts	0x23B8, r24	; 0x8023b8 <r_round>
    497e:	80 e1       	ldi	r24, 0x10	; 16
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
		AES.STATE = r_round;
    4980:	91 e0       	ldi	r25, 0x01	; 1
    4982:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    4986:	81 50       	subi	r24, 0x01	; 1
    // After encryption/decryption is done, the ciphertext/plaintext can be read sequentially, byte-by-byte,
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
    4988:	e1 f7       	brne	.-8      	; 0x4982 <randomInit+0x7a>
    // Setting this bit starts the encryption/decryption procedure, and this bit remains set while the
    // encryption/decryption is ongoing. Writing this bit to zero will stop/abort any ongoing encryption/
    // decryption process. This bit is automatically cleared if the SRIF or the ERROR flags in
    // STATUS are set. (p. 320)

	AES.CTRL = AES_START_bm | AES_XOR_bm;
    498a:	84 e8       	ldi	r24, 0x84	; 132
    498c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>

	r_position = 0;
    4990:	10 92 b7 23 	sts	0x23B7, r1	; 0x8023b7 <r_position>
	randNormHasSaved = 0;
    4994:	10 92 b6 23 	sts	0x23B6, r1	; 0x8023b6 <randNormHasSaved>
    4998:	08 95       	ret

0000499a <randByte>:
}

uint8_t randByte(){
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    499a:	90 91 b7 23 	lds	r25, 0x23B7	; 0x8023b7 <r_position>
    499e:	99 23       	and	r25, r25
    49a0:	a1 f0       	breq	.+40     	; 0x49ca <randByte+0x30>
	r = AES.STATE;
    49a2:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    49a6:	9f 5f       	subi	r25, 0xFF	; 255
    49a8:	90 93 b7 23 	sts	0x23B7, r25	; 0x8023b7 <r_position>
	if (r_position > 15){
    49ac:	90 31       	cpi	r25, 0x10	; 16
    49ae:	b0 f0       	brcs	.+44     	; 0x49dc <randByte+0x42>
    49b0:	20 91 b8 23 	lds	r18, 0x23B8	; 0x8023b8 <r_round>
    49b4:	90 e1       	ldi	r25, 0x10	; 16
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
    49b6:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    49ba:	91 50       	subi	r25, 0x01	; 1
    49bc:	e1 f7       	brne	.-8      	; 0x49b6 <randByte+0x1c>
		AES.CTRL = AES_START_bm | AES_XOR_bm;
    49be:	94 e8       	ldi	r25, 0x84	; 132
    49c0:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
		r_position = 0;
    49c4:	10 92 b7 23 	sts	0x23B7, r1	; 0x8023b7 <r_position>
    49c8:	08 95       	ret
	randNormHasSaved = 0;
}

uint8_t randByte(){
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    49ca:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    49ce:	80 ff       	sbrs	r24, 0
    49d0:	fc cf       	rjmp	.-8      	; 0x49ca <randByte+0x30>
	r = AES.STATE;
    49d2:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    49d6:	91 e0       	ldi	r25, 0x01	; 1
    49d8:	90 93 b7 23 	sts	0x23B7, r25	; 0x8023b7 <r_position>
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
		AES.CTRL = AES_START_bm | AES_XOR_bm;
		r_position = 0;
	}
	return r;
}
    49dc:	08 95       	ret

000049de <randShort>:

uint16_t randShort(){
    49de:	cf 93       	push	r28
	return ((uint16_t)randByte()<<8)|((uint16_t)randByte());
    49e0:	0e 94 cd 24 	call	0x499a	; 0x499a <randByte>
    49e4:	c8 2f       	mov	r28, r24
    49e6:	0e 94 cd 24 	call	0x499a	; 0x499a <randByte>
    49ea:	2c 2f       	mov	r18, r28
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	32 2f       	mov	r19, r18
    49f0:	22 27       	eor	r18, r18
}
    49f2:	a9 01       	movw	r20, r18
    49f4:	48 2b       	or	r20, r24
    49f6:	ca 01       	movw	r24, r20
    49f8:	cf 91       	pop	r28
    49fa:	08 95       	ret

000049fc <magicRangeFunc>:
	}
	setAllirPowers(prevPower);
}


static float magicRangeFunc(float a){
    49fc:	cf 92       	push	r12
    49fe:	df 92       	push	r13
    4a00:	ef 92       	push	r14
    4a02:	ff 92       	push	r15
    4a04:	6b 01       	movw	r12, r22
    4a06:	7c 01       	movw	r14, r24
	if(a<=0){
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	a9 01       	movw	r20, r18
    4a0e:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__cmpsf2>
    4a12:	18 16       	cp	r1, r24
    4a14:	7c f5       	brge	.+94     	; 0x4a74 <magicRangeFunc+0x78>
		return NAN;
		}else{
		float result = -24.3675811184*(0.0259969683 + powf(a, -0.5));
    4a16:	20 e0       	ldi	r18, 0x00	; 0
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	40 e0       	ldi	r20, 0x00	; 0
    4a1c:	5f eb       	ldi	r21, 0xBF	; 191
    4a1e:	c7 01       	movw	r24, r14
    4a20:	b6 01       	movw	r22, r12
    4a22:	0e 94 65 4b 	call	0x96ca	; 0x96ca <pow>
		result = 1 + exp(result);
    4a26:	28 e9       	ldi	r18, 0x98	; 152
    4a28:	37 ef       	ldi	r19, 0xF7	; 247
    4a2a:	44 ed       	ldi	r20, 0xD4	; 212
    4a2c:	5c e3       	ldi	r21, 0x3C	; 60
    4a2e:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    4a32:	2e ec       	ldi	r18, 0xCE	; 206
    4a34:	30 ef       	ldi	r19, 0xF0	; 240
    4a36:	42 ec       	ldi	r20, 0xC2	; 194
    4a38:	51 ec       	ldi	r21, 0xC1	; 193
    4a3a:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4a3e:	0e 94 4b 48 	call	0x9096	; 0x9096 <exp>
		result = (778.0270114700/result) - 528.0270114700;
    4a42:	20 e0       	ldi	r18, 0x00	; 0
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	40 e8       	ldi	r20, 0x80	; 128
    4a48:	5f e3       	ldi	r21, 0x3F	; 63
    4a4a:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    4a4e:	9b 01       	movw	r18, r22
    4a50:	ac 01       	movw	r20, r24
    4a52:	6b eb       	ldi	r22, 0xBB	; 187
    4a54:	71 e8       	ldi	r23, 0x81	; 129
    4a56:	82 e4       	ldi	r24, 0x42	; 66
    4a58:	94 e4       	ldi	r25, 0x44	; 68
    4a5a:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    4a5e:	2b eb       	ldi	r18, 0xBB	; 187
    4a60:	31 e0       	ldi	r19, 0x01	; 1
    4a62:	44 e0       	ldi	r20, 0x04	; 4
    4a64:	54 e4       	ldi	r21, 0x44	; 68
    4a66:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
		return result;
	}
}
    4a6a:	ff 90       	pop	r15
    4a6c:	ef 90       	pop	r14
    4a6e:	df 90       	pop	r13
    4a70:	cf 90       	pop	r12
    4a72:	08 95       	ret
}


static float magicRangeFunc(float a){
	if(a<=0){
		return NAN;
    4a74:	60 e0       	ldi	r22, 0x00	; 0
    4a76:	70 e0       	ldi	r23, 0x00	; 0
    4a78:	80 ec       	ldi	r24, 0xC0	; 192
    4a7a:	9f e7       	ldi	r25, 0x7F	; 127
		float result = -24.3675811184*(0.0259969683 + powf(a, -0.5));
		result = 1 + exp(result);
		result = (778.0270114700/result) - 528.0270114700;
		return result;
	}
}
    4a7c:	ff 90       	pop	r15
    4a7e:	ef 90       	pop	r14
    4a80:	df 90       	pop	r13
    4a82:	cf 90       	pop	r12
    4a84:	08 95       	ret

00004a86 <rangeAlgsInit>:
//static float invMagicRangeFunc(float r);

//static void print_brightMeas(void);
												
void rangeAlgsInit(){
	sensorHealthHistory = 0;
    4a86:	10 92 01 24 	sts	0x2401, r1	; 0x802401 <sensorHealthHistory>
    4a8a:	10 92 02 24 	sts	0x2402, r1	; 0x802402 <sensorHealthHistory+0x1>
    4a8e:	10 92 03 24 	sts	0x2403, r1	; 0x802403 <sensorHealthHistory+0x2>
    4a92:	10 92 04 24 	sts	0x2404, r1	; 0x802404 <sensorHealthHistory+0x3>
    4a96:	e9 eb       	ldi	r30, 0xB9	; 185
    4a98:	f3 e2       	ldi	r31, 0x23	; 35
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	94 e2       	ldi	r25, 0x24	; 36
	for(uint8_t i=0 ; i<6 ;i++){
		for(uint8_t j=0 ; j<6 ; j++){
			brightMeas[i][j] = 0;
    4a9e:	10 82       	st	Z, r1
    4aa0:	11 82       	std	Z+1, r1	; 0x01
    4aa2:	12 82       	std	Z+2, r1	; 0x02
    4aa4:	13 82       	std	Z+3, r1	; 0x03
    4aa6:	14 82       	std	Z+4, r1	; 0x04
    4aa8:	15 82       	std	Z+5, r1	; 0x05
    4aaa:	16 82       	std	Z+6, r1	; 0x06
    4aac:	17 82       	std	Z+7, r1	; 0x07
    4aae:	10 86       	std	Z+8, r1	; 0x08
    4ab0:	11 86       	std	Z+9, r1	; 0x09
    4ab2:	12 86       	std	Z+10, r1	; 0x0a
    4ab4:	13 86       	std	Z+11, r1	; 0x0b
    4ab6:	3c 96       	adiw	r30, 0x0c	; 12

//static void print_brightMeas(void);
												
void rangeAlgsInit(){
	sensorHealthHistory = 0;
	for(uint8_t i=0 ; i<6 ;i++){
    4ab8:	8e 17       	cp	r24, r30
    4aba:	9f 07       	cpc	r25, r31
    4abc:	81 f7       	brne	.-32     	; 0x4a9e <rangeAlgsInit+0x18>
		for(uint8_t j=0 ; j<6 ; j++){
			brightMeas[i][j] = 0;
		}
	}
	rnbCmdID=0;
    4abe:	10 92 bf 26 	sts	0x26BF, r1	; 0x8026bf <rnbCmdID>
    4ac2:	10 92 c0 26 	sts	0x26C0, r1	; 0x8026c0 <rnbCmdID+0x1>
	processing_rnb_flag=0;
    4ac6:	10 92 23 25 	sts	0x2523, r1	; 0x802523 <processing_rnb_flag>
    4aca:	08 95       	ret

00004acc <calculate_range>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		processing_rnb_flag=0;
	}
}

float calculate_range(float iRange, float bearing, float heading){
    4acc:	2f 92       	push	r2
    4ace:	3f 92       	push	r3
    4ad0:	4f 92       	push	r4
    4ad2:	5f 92       	push	r5
    4ad4:	6f 92       	push	r6
    4ad6:	7f 92       	push	r7
    4ad8:	8f 92       	push	r8
    4ada:	9f 92       	push	r9
    4adc:	af 92       	push	r10
    4ade:	bf 92       	push	r11
    4ae0:	cf 92       	push	r12
    4ae2:	df 92       	push	r13
    4ae4:	ef 92       	push	r14
    4ae6:	ff 92       	push	r15
    4ae8:	0f 93       	push	r16
    4aea:	1f 93       	push	r17
    4aec:	cf 93       	push	r28
    4aee:	df 93       	push	r29
    4af0:	cd b7       	in	r28, 0x3d	; 61
    4af2:	de b7       	in	r29, 0x3e	; 62
    4af4:	cc 54       	subi	r28, 0x4C	; 76
    4af6:	d1 09       	sbc	r29, r1
    4af8:	cd bf       	out	0x3d, r28	; 61
    4afa:	de bf       	out	0x3e, r29	; 62
    4afc:	4b 01       	movw	r8, r22
    4afe:	5c 01       	movw	r10, r24
    4b00:	29 01       	movw	r4, r18
    4b02:	3a 01       	movw	r6, r20
    4b04:	67 01       	movw	r12, r14
    4b06:	78 01       	movw	r14, r16
	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
    4b08:	ca 01       	movw	r24, r20
    4b0a:	b9 01       	movw	r22, r18
    4b0c:	0e 94 b5 4b 	call	0x976a	; 0x976a <sin>
    4b10:	9b 01       	movw	r18, r22
    4b12:	ac 01       	movw	r20, r24
    4b14:	c5 01       	movw	r24, r10
    4b16:	b4 01       	movw	r22, r8
    4b18:	90 58       	subi	r25, 0x80	; 128
    4b1a:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4b1e:	29 96       	adiw	r28, 0x09	; 9
    4b20:	6c af       	std	Y+60, r22	; 0x3c
    4b22:	7d af       	std	Y+61, r23	; 0x3d
    4b24:	8e af       	std	Y+62, r24	; 0x3e
    4b26:	9f af       	std	Y+63, r25	; 0x3f
    4b28:	29 97       	sbiw	r28, 0x09	; 9
    4b2a:	c3 01       	movw	r24, r6
    4b2c:	b2 01       	movw	r22, r4
    4b2e:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <cos>
    4b32:	9b 01       	movw	r18, r22
    4b34:	ac 01       	movw	r20, r24
    4b36:	c5 01       	movw	r24, r10
    4b38:	b4 01       	movw	r22, r8
    4b3a:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4b3e:	2d 96       	adiw	r28, 0x0d	; 13
    4b40:	6c af       	std	Y+60, r22	; 0x3c
    4b42:	7d af       	std	Y+61, r23	; 0x3d
    4b44:	8e af       	std	Y+62, r24	; 0x3e
    4b46:	9f af       	std	Y+63, r25	; 0x3f
    4b48:	2d 97       	sbiw	r28, 0x0d	; 13
    4b4a:	c7 01       	movw	r24, r14
    4b4c:	b6 01       	movw	r22, r12
    4b4e:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <cos>
    4b52:	4b 01       	movw	r8, r22
    4b54:	5c 01       	movw	r10, r24
    4b56:	c7 01       	movw	r24, r14
    4b58:	b6 01       	movw	r22, r12
    4b5a:	0e 94 b5 4b 	call	0x976a	; 0x976a <sin>
    4b5e:	6b ab       	std	Y+51, r22	; 0x33
    4b60:	7c ab       	std	Y+52, r23	; 0x34
    4b62:	8d ab       	std	Y+53, r24	; 0x35
    4b64:	9e ab       	std	Y+54, r25	; 0x36
    4b66:	8e 01       	movw	r16, r28
    4b68:	0f 5f       	subi	r16, 0xFF	; 255
    4b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b6c:	38 ec       	ldi	r19, 0xC8	; 200
    4b6e:	23 2e       	mov	r2, r19
    4b70:	31 e2       	ldi	r19, 0x21	; 33
    4b72:	33 2e       	mov	r3, r19
    4b74:	ce 01       	movw	r24, r28
    4b76:	c1 96       	adiw	r24, 0x31	; 49
    4b78:	89 ab       	std	Y+49, r24	; 0x31
    4b7a:	9a ab       	std	Y+50, r25	; 0x32
    4b7c:	44 ea       	ldi	r20, 0xA4	; 164
    4b7e:	44 2e       	mov	r4, r20
    4b80:	4b e6       	ldi	r20, 0x6B	; 107
    4b82:	54 2e       	mov	r5, r20
    4b84:	48 e9       	ldi	r20, 0x98	; 152
    4b86:	64 2e       	mov	r6, r20
    4b88:	41 e4       	ldi	r20, 0x41	; 65
    4b8a:	74 2e       	mov	r7, r20
    4b8c:	c1 2c       	mov	r12, r1
    4b8e:	d1 2c       	mov	r13, r1
    4b90:	50 e3       	ldi	r21, 0x30	; 48
    4b92:	e5 2e       	mov	r14, r21
    4b94:	51 e4       	ldi	r21, 0x41	; 65
    4b96:	f5 2e       	mov	r15, r21
    4b98:	0c c0       	rjmp	.+24     	; 0x4bb2 <calculate_range+0xe6>
    4b9a:	d1 01       	movw	r26, r2
    4b9c:	cd 90       	ld	r12, X+
    4b9e:	dd 90       	ld	r13, X+
    4ba0:	ed 90       	ld	r14, X+
    4ba2:	fc 90       	ld	r15, X
    4ba4:	13 97       	sbiw	r26, 0x03	; 3
    4ba6:	14 96       	adiw	r26, 0x04	; 4
    4ba8:	4d 90       	ld	r4, X+
    4baa:	5d 90       	ld	r5, X+
    4bac:	6d 90       	ld	r6, X+
    4bae:	7c 90       	ld	r7, X
    4bb0:	17 97       	sbiw	r26, 0x07	; 7
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
		txHats[i][0] = hats[i][0]*cos(heading) - hats[i][1]*sin(heading);
    4bb2:	a5 01       	movw	r20, r10
    4bb4:	94 01       	movw	r18, r8
    4bb6:	c7 01       	movw	r24, r14
    4bb8:	b6 01       	movw	r22, r12
    4bba:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4bbe:	6f ab       	std	Y+55, r22	; 0x37
    4bc0:	78 af       	std	Y+56, r23	; 0x38
    4bc2:	89 af       	std	Y+57, r24	; 0x39
    4bc4:	9a af       	std	Y+58, r25	; 0x3a
    4bc6:	2b a9       	ldd	r18, Y+51	; 0x33
    4bc8:	3c a9       	ldd	r19, Y+52	; 0x34
    4bca:	4d a9       	ldd	r20, Y+53	; 0x35
    4bcc:	5e a9       	ldd	r21, Y+54	; 0x36
    4bce:	c3 01       	movw	r24, r6
    4bd0:	b2 01       	movw	r22, r4
    4bd2:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4bd6:	9b 01       	movw	r18, r22
    4bd8:	ac 01       	movw	r20, r24
    4bda:	6f a9       	ldd	r22, Y+55	; 0x37
    4bdc:	78 ad       	ldd	r23, Y+56	; 0x38
    4bde:	89 ad       	ldd	r24, Y+57	; 0x39
    4be0:	9a ad       	ldd	r25, Y+58	; 0x3a
    4be2:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    4be6:	d8 01       	movw	r26, r16
    4be8:	6d 93       	st	X+, r22
    4bea:	7d 93       	st	X+, r23
    4bec:	8d 93       	st	X+, r24
    4bee:	9c 93       	st	X, r25
    4bf0:	13 97       	sbiw	r26, 0x03	; 3
		txHats[i][1] = hats[i][0]*sin(heading) + hats[i][1]*cos(heading);
    4bf2:	2b a9       	ldd	r18, Y+51	; 0x33
    4bf4:	3c a9       	ldd	r19, Y+52	; 0x34
    4bf6:	4d a9       	ldd	r20, Y+53	; 0x35
    4bf8:	5e a9       	ldd	r21, Y+54	; 0x36
    4bfa:	c7 01       	movw	r24, r14
    4bfc:	b6 01       	movw	r22, r12
    4bfe:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4c02:	6b 01       	movw	r12, r22
    4c04:	7c 01       	movw	r14, r24
    4c06:	a3 01       	movw	r20, r6
    4c08:	92 01       	movw	r18, r4
    4c0a:	c5 01       	movw	r24, r10
    4c0c:	b4 01       	movw	r22, r8
    4c0e:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4c12:	9b 01       	movw	r18, r22
    4c14:	ac 01       	movw	r20, r24
    4c16:	c7 01       	movw	r24, r14
    4c18:	b6 01       	movw	r22, r12
    4c1a:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    4c1e:	f8 01       	movw	r30, r16
    4c20:	64 83       	std	Z+4, r22	; 0x04
    4c22:	75 83       	std	Z+5, r23	; 0x05
    4c24:	86 83       	std	Z+6, r24	; 0x06
    4c26:	97 83       	std	Z+7, r25	; 0x07
    4c28:	08 5f       	subi	r16, 0xF8	; 248
    4c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c2c:	f8 e0       	ldi	r31, 0x08	; 8
    4c2e:	2f 0e       	add	r2, r31
    4c30:	31 1c       	adc	r3, r1
}

float calculate_range(float iRange, float bearing, float heading){
	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
    4c32:	89 a9       	ldd	r24, Y+49	; 0x31
    4c34:	9a a9       	ldd	r25, Y+50	; 0x32
    4c36:	08 17       	cp	r16, r24
    4c38:	19 07       	cpc	r17, r25
    4c3a:	09 f0       	breq	.+2      	; 0x4c3e <calculate_range+0x172>
    4c3c:	ae cf       	rjmp	.-164    	; 0x4b9a <calculate_range+0xce>
    4c3e:	a9 eb       	ldi	r26, 0xB9	; 185
    4c40:	b3 e2       	ldi	r27, 0x23	; 35
    4c42:	25 96       	adiw	r28, 0x05	; 5
    4c44:	ae af       	std	Y+62, r26	; 0x3e
    4c46:	bf af       	std	Y+63, r27	; 0x3f
    4c48:	25 97       	sbiw	r28, 0x05	; 5
    4c4a:	84 ea       	ldi	r24, 0xA4	; 164
    4c4c:	9b e6       	ldi	r25, 0x6B	; 107
    4c4e:	a8 e9       	ldi	r26, 0x98	; 152
    4c50:	b1 e4       	ldi	r27, 0x41	; 65
    4c52:	8b af       	std	Y+59, r24	; 0x3b
    4c54:	9c af       	std	Y+60, r25	; 0x3c
    4c56:	ad af       	std	Y+61, r26	; 0x3d
    4c58:	be af       	std	Y+62, r27	; 0x3e
    4c5a:	41 2c       	mov	r4, r1
    4c5c:	51 2c       	mov	r5, r1
    4c5e:	90 e3       	ldi	r25, 0x30	; 48
    4c60:	69 2e       	mov	r6, r25
    4c62:	91 e4       	ldi	r25, 0x41	; 65
    4c64:	79 2e       	mov	r7, r25
    4c66:	31 2c       	mov	r3, r1
    4c68:	23 96       	adiw	r28, 0x03	; 3
    4c6a:	1c ae       	std	Y+60, r1	; 0x3c
    4c6c:	1d ae       	std	Y+61, r1	; 0x3d
    4c6e:	1e ae       	std	Y+62, r1	; 0x3e
    4c70:	1f ae       	std	Y+63, r1	; 0x3f
    4c72:	23 97       	sbiw	r28, 0x03	; 3
	float total = 0;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    4c74:	2b ea       	ldi	r18, 0xAB	; 171
    4c76:	22 2e       	mov	r2, r18
    4c78:	77 c0       	rjmp	.+238    	; 0x4d68 <calculate_range+0x29c>
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
    4c7a:	25 96       	adiw	r28, 0x05	; 5
    4c7c:	ee ad       	ldd	r30, Y+62	; 0x3e
    4c7e:	ff ad       	ldd	r31, Y+63	; 0x3f
    4c80:	25 97       	sbiw	r28, 0x05	; 5
    4c82:	01 91       	ld	r16, Z+
    4c84:	11 91       	ld	r17, Z+
    4c86:	25 96       	adiw	r28, 0x05	; 5
    4c88:	ee af       	std	Y+62, r30	; 0x3e
    4c8a:	ff af       	std	Y+63, r31	; 0x3f
    4c8c:	25 97       	sbiw	r28, 0x05	; 5
    4c8e:	a3 01       	movw	r20, r6
    4c90:	92 01       	movw	r18, r4
    4c92:	c5 01       	movw	r24, r10
    4c94:	b4 01       	movw	r22, r8
    4c96:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4c9a:	4b 01       	movw	r8, r22
    4c9c:	5c 01       	movw	r10, r24
    4c9e:	2b a9       	ldd	r18, Y+51	; 0x33
    4ca0:	3c a9       	ldd	r19, Y+52	; 0x34
    4ca2:	4d a9       	ldd	r20, Y+53	; 0x35
    4ca4:	5e a9       	ldd	r21, Y+54	; 0x36
    4ca6:	ca 01       	movw	r24, r20
    4ca8:	b9 01       	movw	r22, r18
    4caa:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4cae:	2b 01       	movw	r4, r22
    4cb0:	3c 01       	movw	r6, r24
    4cb2:	a7 01       	movw	r20, r14
    4cb4:	96 01       	movw	r18, r12
    4cb6:	c7 01       	movw	r24, r14
    4cb8:	b6 01       	movw	r22, r12
    4cba:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4cbe:	9b 01       	movw	r18, r22
    4cc0:	ac 01       	movw	r20, r24
    4cc2:	c3 01       	movw	r24, r6
    4cc4:	b2 01       	movw	r22, r4
    4cc6:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    4cca:	20 e0       	ldi	r18, 0x00	; 0
    4ccc:	30 e0       	ldi	r19, 0x00	; 0
    4cce:	42 ef       	ldi	r20, 0xF2	; 242
    4cd0:	53 e4       	ldi	r21, 0x43	; 67
    4cd2:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4cd6:	9b 01       	movw	r18, r22
    4cd8:	ac 01       	movw	r20, r24
    4cda:	c5 01       	movw	r24, r10
    4cdc:	b4 01       	movw	r22, r8
    4cde:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    4ce2:	6b 01       	movw	r12, r22
    4ce4:	7c 01       	movw	r14, r24
    4ce6:	b8 01       	movw	r22, r16
    4ce8:	11 0f       	add	r17, r17
    4cea:	88 0b       	sbc	r24, r24
    4cec:	99 0b       	sbc	r25, r25
    4cee:	0e 94 b5 48 	call	0x916a	; 0x916a <__floatsisf>
    4cf2:	9b 01       	movw	r18, r22
    4cf4:	ac 01       	movw	r20, r24
    4cf6:	c7 01       	movw	r24, r14
    4cf8:	b6 01       	movw	r22, r12
    4cfa:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4cfe:	9b 01       	movw	r18, r22
    4d00:	ac 01       	movw	r20, r24
    4d02:	23 96       	adiw	r28, 0x03	; 3
    4d04:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d06:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d08:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d0c:	23 97       	sbiw	r28, 0x03	; 3
    4d0e:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    4d12:	23 96       	adiw	r28, 0x03	; 3
    4d14:	6c af       	std	Y+60, r22	; 0x3c
    4d16:	7d af       	std	Y+61, r23	; 0x3d
    4d18:	8e af       	std	Y+62, r24	; 0x3e
    4d1a:	9f af       	std	Y+63, r25	; 0x3f
    4d1c:	23 97       	sbiw	r28, 0x03	; 3
	float rijMagSq;
	float alphaDotP, betaDotP;
	float cosAcosB;
	float total = 0;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    4d1e:	33 94       	inc	r3
    4d20:	f4 e2       	ldi	r31, 0x24	; 36
    4d22:	3f 16       	cp	r3, r31
    4d24:	09 f4       	brne	.+2      	; 0x4d28 <calculate_range+0x25c>
    4d26:	a3 c0       	rjmp	.+326    	; 0x4e6e <calculate_range+0x3a2>
    4d28:	32 9c       	mul	r3, r2
    4d2a:	81 2d       	mov	r24, r1
    4d2c:	11 24       	eor	r1, r1
    4d2e:	86 95       	lsr	r24
    4d30:	86 95       	lsr	r24
    4d32:	98 2f       	mov	r25, r24
    4d34:	99 0f       	add	r25, r25
    4d36:	89 0f       	add	r24, r25
    4d38:	88 0f       	add	r24, r24
    4d3a:	e3 2d       	mov	r30, r3
    4d3c:	e8 1b       	sub	r30, r24
    4d3e:	f0 e0       	ldi	r31, 0x00	; 0
    4d40:	ee 0f       	add	r30, r30
    4d42:	ff 1f       	adc	r31, r31
    4d44:	ee 0f       	add	r30, r30
    4d46:	ff 1f       	adc	r31, r31
    4d48:	ee 0f       	add	r30, r30
    4d4a:	ff 1f       	adc	r31, r31
    4d4c:	e8 53       	subi	r30, 0x38	; 56
    4d4e:	fe 4d       	sbci	r31, 0xDE	; 222
    4d50:	40 80       	ld	r4, Z
    4d52:	51 80       	ldd	r5, Z+1	; 0x01
    4d54:	62 80       	ldd	r6, Z+2	; 0x02
    4d56:	73 80       	ldd	r7, Z+3	; 0x03
    4d58:	84 81       	ldd	r24, Z+4	; 0x04
    4d5a:	95 81       	ldd	r25, Z+5	; 0x05
    4d5c:	a6 81       	ldd	r26, Z+6	; 0x06
    4d5e:	b7 81       	ldd	r27, Z+7	; 0x07
    4d60:	8b af       	std	Y+59, r24	; 0x3b
    4d62:	9c af       	std	Y+60, r25	; 0x3c
    4d64:	ad af       	std	Y+61, r26	; 0x3d
    4d66:	be af       	std	Y+62, r27	; 0x3e
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    4d68:	32 9c       	mul	r3, r2
    4d6a:	81 2d       	mov	r24, r1
    4d6c:	11 24       	eor	r1, r1
    4d6e:	86 95       	lsr	r24
    4d70:	86 95       	lsr	r24
    4d72:	01 e0       	ldi	r16, 0x01	; 1
    4d74:	10 e0       	ldi	r17, 0x00	; 0
    4d76:	0c 0f       	add	r16, r28
    4d78:	1d 1f       	adc	r17, r29
    4d7a:	b8 e0       	ldi	r27, 0x08	; 8
    4d7c:	8b 9f       	mul	r24, r27
    4d7e:	00 0d       	add	r16, r0
    4d80:	11 1d       	adc	r17, r1
    4d82:	11 24       	eor	r1, r1
    4d84:	f8 01       	movw	r30, r16
    4d86:	80 80       	ld	r8, Z
    4d88:	91 80       	ldd	r9, Z+1	; 0x01
    4d8a:	a2 80       	ldd	r10, Z+2	; 0x02
    4d8c:	b3 80       	ldd	r11, Z+3	; 0x03
    4d8e:	a5 01       	movw	r20, r10
    4d90:	94 01       	movw	r18, r8
    4d92:	29 96       	adiw	r28, 0x09	; 9
    4d94:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d96:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d98:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d9c:	29 97       	sbiw	r28, 0x09	; 9
    4d9e:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    4da2:	a3 01       	movw	r20, r6
    4da4:	92 01       	movw	r18, r4
    4da6:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    4daa:	6b ab       	std	Y+51, r22	; 0x33
    4dac:	7c ab       	std	Y+52, r23	; 0x34
    4dae:	8d ab       	std	Y+53, r24	; 0x35
    4db0:	9e ab       	std	Y+54, r25	; 0x36
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
    4db2:	d8 01       	movw	r26, r16
    4db4:	14 96       	adiw	r26, 0x04	; 4
    4db6:	8d 91       	ld	r24, X+
    4db8:	9d 91       	ld	r25, X+
    4dba:	0d 90       	ld	r0, X+
    4dbc:	bc 91       	ld	r27, X
    4dbe:	a0 2d       	mov	r26, r0
    4dc0:	8f ab       	std	Y+55, r24	; 0x37
    4dc2:	98 af       	std	Y+56, r25	; 0x38
    4dc4:	a9 af       	std	Y+57, r26	; 0x39
    4dc6:	ba af       	std	Y+58, r27	; 0x3a
    4dc8:	9c 01       	movw	r18, r24
    4dca:	ad 01       	movw	r20, r26
    4dcc:	2d 96       	adiw	r28, 0x0d	; 13
    4dce:	6c ad       	ldd	r22, Y+60	; 0x3c
    4dd0:	7d ad       	ldd	r23, Y+61	; 0x3d
    4dd2:	8e ad       	ldd	r24, Y+62	; 0x3e
    4dd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dd6:	2d 97       	sbiw	r28, 0x0d	; 13
    4dd8:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    4ddc:	2b ad       	ldd	r18, Y+59	; 0x3b
    4dde:	3c ad       	ldd	r19, Y+60	; 0x3c
    4de0:	4d ad       	ldd	r20, Y+61	; 0x3d
    4de2:	5e ad       	ldd	r21, Y+62	; 0x3e
    4de4:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    4de8:	6b 01       	movw	r12, r22
    4dea:	7c 01       	movw	r14, r24
		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
    4dec:	a3 01       	movw	r20, r6
    4dee:	92 01       	movw	r18, r4
    4df0:	6b a9       	ldd	r22, Y+51	; 0x33
    4df2:	7c a9       	ldd	r23, Y+52	; 0x34
    4df4:	8d a9       	ldd	r24, Y+53	; 0x35
    4df6:	9e a9       	ldd	r25, Y+54	; 0x36
    4df8:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4dfc:	2b 01       	movw	r4, r22
    4dfe:	3c 01       	movw	r6, r24
    4e00:	2b ad       	ldd	r18, Y+59	; 0x3b
    4e02:	3c ad       	ldd	r19, Y+60	; 0x3c
    4e04:	4d ad       	ldd	r20, Y+61	; 0x3d
    4e06:	5e ad       	ldd	r21, Y+62	; 0x3e
    4e08:	c7 01       	movw	r24, r14
    4e0a:	b6 01       	movw	r22, r12
    4e0c:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4e10:	9b 01       	movw	r18, r22
    4e12:	ac 01       	movw	r20, r24
    4e14:	c3 01       	movw	r24, r6
    4e16:	b2 01       	movw	r22, r4
    4e18:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    4e1c:	2b 01       	movw	r4, r22
    4e1e:	3c 01       	movw	r6, r24
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
    4e20:	6b a9       	ldd	r22, Y+51	; 0x33
    4e22:	7c a9       	ldd	r23, Y+52	; 0x34
    4e24:	8d a9       	ldd	r24, Y+53	; 0x35
    4e26:	9e a9       	ldd	r25, Y+54	; 0x36
    4e28:	90 58       	subi	r25, 0x80	; 128
    4e2a:	a5 01       	movw	r20, r10
    4e2c:	94 01       	movw	r18, r8
    4e2e:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4e32:	4b 01       	movw	r8, r22
    4e34:	5c 01       	movw	r10, r24
    4e36:	c7 01       	movw	r24, r14
    4e38:	b6 01       	movw	r22, r12
    4e3a:	90 58       	subi	r25, 0x80	; 128
    4e3c:	2f a9       	ldd	r18, Y+55	; 0x37
    4e3e:	38 ad       	ldd	r19, Y+56	; 0x38
    4e40:	49 ad       	ldd	r20, Y+57	; 0x39
    4e42:	5a ad       	ldd	r21, Y+58	; 0x3a
    4e44:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4e48:	9b 01       	movw	r18, r22
    4e4a:	ac 01       	movw	r20, r24
    4e4c:	c5 01       	movw	r24, r10
    4e4e:	b4 01       	movw	r22, r8
    4e50:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    4e54:	4b 01       	movw	r8, r22
    4e56:	5c 01       	movw	r10, r24
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	a9 01       	movw	r20, r18
    4e5e:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__cmpsf2>
    4e62:	87 ff       	sbrs	r24, 7
    4e64:	0a cf       	rjmp	.-492    	; 0x4c7a <calculate_range+0x1ae>
    4e66:	81 2c       	mov	r8, r1
    4e68:	91 2c       	mov	r9, r1
    4e6a:	54 01       	movw	r10, r8
    4e6c:	06 cf       	rjmp	.-500    	; 0x4c7a <calculate_range+0x1ae>
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
	}

	return magicRangeFunc(total);
    4e6e:	23 96       	adiw	r28, 0x03	; 3
    4e70:	6c ad       	ldd	r22, Y+60	; 0x3c
    4e72:	7d ad       	ldd	r23, Y+61	; 0x3d
    4e74:	8e ad       	ldd	r24, Y+62	; 0x3e
    4e76:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e78:	23 97       	sbiw	r28, 0x03	; 3
}
    4e7a:	c4 5b       	subi	r28, 0xB4	; 180
    4e7c:	df 4f       	sbci	r29, 0xFF	; 255
    4e7e:	cd bf       	out	0x3d, r28	; 61
    4e80:	de bf       	out	0x3e, r29	; 62
    4e82:	df 91       	pop	r29
    4e84:	cf 91       	pop	r28
    4e86:	1f 91       	pop	r17
    4e88:	0f 91       	pop	r16
    4e8a:	ff 90       	pop	r15
    4e8c:	ef 90       	pop	r14
    4e8e:	df 90       	pop	r13
    4e90:	cf 90       	pop	r12
    4e92:	bf 90       	pop	r11
    4e94:	af 90       	pop	r10
    4e96:	9f 90       	pop	r9
    4e98:	8f 90       	pop	r8
    4e9a:	7f 90       	pop	r7
    4e9c:	6f 90       	pop	r6
    4e9e:	5f 90       	pop	r5
    4ea0:	4f 90       	pop	r4
    4ea2:	3f 90       	pop	r3
    4ea4:	2f 90       	pop	r2
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
	}

	return magicRangeFunc(total);
    4ea6:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <magicRangeFunc>

00004eaa <calculate_error>:
}

float calculate_error(float r, float b, float h){
    4eaa:	2f 92       	push	r2
    4eac:	3f 92       	push	r3
    4eae:	4f 92       	push	r4
    4eb0:	5f 92       	push	r5
    4eb2:	6f 92       	push	r6
    4eb4:	7f 92       	push	r7
    4eb6:	8f 92       	push	r8
    4eb8:	9f 92       	push	r9
    4eba:	af 92       	push	r10
    4ebc:	bf 92       	push	r11
    4ebe:	cf 92       	push	r12
    4ec0:	df 92       	push	r13
    4ec2:	ef 92       	push	r14
    4ec4:	ff 92       	push	r15
    4ec6:	0f 93       	push	r16
    4ec8:	1f 93       	push	r17
    4eca:	cf 93       	push	r28
    4ecc:	df 93       	push	r29
    4ece:	cd b7       	in	r28, 0x3d	; 61
    4ed0:	de b7       	in	r29, 0x3e	; 62
    4ed2:	cc 5e       	subi	r28, 0xEC	; 236
    4ed4:	d1 09       	sbc	r29, r1
    4ed6:	cd bf       	out	0x3d, r28	; 61
    4ed8:	de bf       	out	0x3e, r29	; 62
    4eda:	4b 01       	movw	r8, r22
    4edc:	5c 01       	movw	r10, r24
    4ede:	29 01       	movw	r4, r18
    4ee0:	3a 01       	movw	r6, r20
    4ee2:	67 01       	movw	r12, r14
    4ee4:	78 01       	movw	r14, r16
	r = r<46 ? 46 : r;
    4ee6:	20 e0       	ldi	r18, 0x00	; 0
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	48 e3       	ldi	r20, 0x38	; 56
    4eec:	52 e4       	ldi	r21, 0x42	; 66
    4eee:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__cmpsf2>
    4ef2:	87 fd       	sbrc	r24, 7
    4ef4:	df c2       	rjmp	.+1470   	; 0x54b4 <calculate_error+0x60a>
    4ef6:	d5 01       	movw	r26, r10
    4ef8:	c4 01       	movw	r24, r8
    4efa:	b0 58       	subi	r27, 0x80	; 128
    4efc:	cd 53       	subi	r28, 0x3D	; 61
    4efe:	df 4f       	sbci	r29, 0xFF	; 255
    4f00:	88 83       	st	Y, r24
    4f02:	99 83       	std	Y+1, r25	; 0x01
    4f04:	aa 83       	std	Y+2, r26	; 0x02
    4f06:	bb 83       	std	Y+3, r27	; 0x03
    4f08:	c3 5c       	subi	r28, 0xC3	; 195
    4f0a:	d0 40       	sbci	r29, 0x00	; 0
	float bigR[2] = {-r*sin(b), r*cos(b)};
    4f0c:	c3 01       	movw	r24, r6
    4f0e:	b2 01       	movw	r22, r4
    4f10:	0e 94 b5 4b 	call	0x976a	; 0x976a <sin>
    4f14:	cd 53       	subi	r28, 0x3D	; 61
    4f16:	df 4f       	sbci	r29, 0xFF	; 255
    4f18:	28 81       	ld	r18, Y
    4f1a:	39 81       	ldd	r19, Y+1	; 0x01
    4f1c:	4a 81       	ldd	r20, Y+2	; 0x02
    4f1e:	5b 81       	ldd	r21, Y+3	; 0x03
    4f20:	c3 5c       	subi	r28, 0xC3	; 195
    4f22:	d0 40       	sbci	r29, 0x00	; 0
    4f24:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4f28:	cd 51       	subi	r28, 0x1D	; 29
    4f2a:	df 4f       	sbci	r29, 0xFF	; 255
    4f2c:	68 83       	st	Y, r22
    4f2e:	79 83       	std	Y+1, r23	; 0x01
    4f30:	8a 83       	std	Y+2, r24	; 0x02
    4f32:	9b 83       	std	Y+3, r25	; 0x03
    4f34:	c3 5e       	subi	r28, 0xE3	; 227
    4f36:	d0 40       	sbci	r29, 0x00	; 0
    4f38:	c3 01       	movw	r24, r6
    4f3a:	b2 01       	movw	r22, r4
    4f3c:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <cos>
    4f40:	9b 01       	movw	r18, r22
    4f42:	ac 01       	movw	r20, r24
    4f44:	c5 01       	movw	r24, r10
    4f46:	b4 01       	movw	r22, r8
    4f48:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4f4c:	c9 51       	subi	r28, 0x19	; 25
    4f4e:	df 4f       	sbci	r29, 0xFF	; 255
    4f50:	68 83       	st	Y, r22
    4f52:	79 83       	std	Y+1, r23	; 0x01
    4f54:	8a 83       	std	Y+2, r24	; 0x02
    4f56:	9b 83       	std	Y+3, r25	; 0x03
    4f58:	c7 5e       	subi	r28, 0xE7	; 231
    4f5a:	d0 40       	sbci	r29, 0x00	; 0
    4f5c:	c7 01       	movw	r24, r14
    4f5e:	b6 01       	movw	r22, r12
    4f60:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <cos>
    4f64:	cd 53       	subi	r28, 0x3D	; 61
    4f66:	df 4f       	sbci	r29, 0xFF	; 255
    4f68:	68 83       	st	Y, r22
    4f6a:	79 83       	std	Y+1, r23	; 0x01
    4f6c:	8a 83       	std	Y+2, r24	; 0x02
    4f6e:	9b 83       	std	Y+3, r25	; 0x03
    4f70:	c3 5c       	subi	r28, 0xC3	; 195
    4f72:	d0 40       	sbci	r29, 0x00	; 0
    4f74:	c7 01       	movw	r24, r14
    4f76:	b6 01       	movw	r22, r12
    4f78:	0e 94 b5 4b 	call	0x976a	; 0x976a <sin>
    4f7c:	2b 01       	movw	r4, r22
    4f7e:	3c 01       	movw	r6, r24
    4f80:	de 01       	movw	r26, r28
    4f82:	af 56       	subi	r26, 0x6F	; 111
    4f84:	bf 4f       	sbci	r27, 0xFF	; 255
    4f86:	cf 53       	subi	r28, 0x3F	; 63
    4f88:	df 4f       	sbci	r29, 0xFF	; 255
    4f8a:	a8 83       	st	Y, r26
    4f8c:	b9 83       	std	Y+1, r27	; 0x01
    4f8e:	c1 5c       	subi	r28, 0xC1	; 193
    4f90:	d0 40       	sbci	r29, 0x00	; 0
    4f92:	8d 01       	movw	r16, r26
    4f94:	38 ec       	ldi	r19, 0xC8	; 200
    4f96:	23 2e       	mov	r2, r19
    4f98:	31 e2       	ldi	r19, 0x21	; 33
    4f9a:	33 2e       	mov	r3, r19
    4f9c:	fd 01       	movw	r30, r26
    4f9e:	f0 96       	adiw	r30, 0x30	; 48
    4fa0:	c5 53       	subi	r28, 0x35	; 53
    4fa2:	df 4f       	sbci	r29, 0xFF	; 255
    4fa4:	e8 83       	st	Y, r30
    4fa6:	f9 83       	std	Y+1, r31	; 0x01
    4fa8:	cb 5c       	subi	r28, 0xCB	; 203
    4faa:	d0 40       	sbci	r29, 0x00	; 0
    4fac:	44 ea       	ldi	r20, 0xA4	; 164
    4fae:	84 2e       	mov	r8, r20
    4fb0:	4b e6       	ldi	r20, 0x6B	; 107
    4fb2:	94 2e       	mov	r9, r20
    4fb4:	48 e9       	ldi	r20, 0x98	; 152
    4fb6:	a4 2e       	mov	r10, r20
    4fb8:	41 e4       	ldi	r20, 0x41	; 65
    4fba:	b4 2e       	mov	r11, r20
    4fbc:	c1 2c       	mov	r12, r1
    4fbe:	d1 2c       	mov	r13, r1
    4fc0:	50 e3       	ldi	r21, 0x30	; 48
    4fc2:	e5 2e       	mov	r14, r21
    4fc4:	51 e4       	ldi	r21, 0x41	; 65
    4fc6:	f5 2e       	mov	r15, r21
    4fc8:	0c c0       	rjmp	.+24     	; 0x4fe2 <calculate_error+0x138>
    4fca:	d1 01       	movw	r26, r2
    4fcc:	cd 90       	ld	r12, X+
    4fce:	dd 90       	ld	r13, X+
    4fd0:	ed 90       	ld	r14, X+
    4fd2:	fc 90       	ld	r15, X
    4fd4:	13 97       	sbiw	r26, 0x03	; 3
    4fd6:	14 96       	adiw	r26, 0x04	; 4
    4fd8:	8d 90       	ld	r8, X+
    4fda:	9d 90       	ld	r9, X+
    4fdc:	ad 90       	ld	r10, X+
    4fde:	bc 90       	ld	r11, X
    4fe0:	17 97       	sbiw	r26, 0x07	; 7
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
		txHats[i][0] = hats[i][0]*cos(h) - hats[i][1]*sin(h);
    4fe2:	cd 53       	subi	r28, 0x3D	; 61
    4fe4:	df 4f       	sbci	r29, 0xFF	; 255
    4fe6:	28 81       	ld	r18, Y
    4fe8:	39 81       	ldd	r19, Y+1	; 0x01
    4fea:	4a 81       	ldd	r20, Y+2	; 0x02
    4fec:	5b 81       	ldd	r21, Y+3	; 0x03
    4fee:	c3 5c       	subi	r28, 0xC3	; 195
    4ff0:	d0 40       	sbci	r29, 0x00	; 0
    4ff2:	c7 01       	movw	r24, r14
    4ff4:	b6 01       	movw	r22, r12
    4ff6:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    4ffa:	c9 53       	subi	r28, 0x39	; 57
    4ffc:	df 4f       	sbci	r29, 0xFF	; 255
    4ffe:	68 83       	st	Y, r22
    5000:	79 83       	std	Y+1, r23	; 0x01
    5002:	8a 83       	std	Y+2, r24	; 0x02
    5004:	9b 83       	std	Y+3, r25	; 0x03
    5006:	c7 5c       	subi	r28, 0xC7	; 199
    5008:	d0 40       	sbci	r29, 0x00	; 0
    500a:	a3 01       	movw	r20, r6
    500c:	92 01       	movw	r18, r4
    500e:	c5 01       	movw	r24, r10
    5010:	b4 01       	movw	r22, r8
    5012:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5016:	9b 01       	movw	r18, r22
    5018:	ac 01       	movw	r20, r24
    501a:	c9 53       	subi	r28, 0x39	; 57
    501c:	df 4f       	sbci	r29, 0xFF	; 255
    501e:	68 81       	ld	r22, Y
    5020:	79 81       	ldd	r23, Y+1	; 0x01
    5022:	8a 81       	ldd	r24, Y+2	; 0x02
    5024:	9b 81       	ldd	r25, Y+3	; 0x03
    5026:	c7 5c       	subi	r28, 0xC7	; 199
    5028:	d0 40       	sbci	r29, 0x00	; 0
    502a:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    502e:	d8 01       	movw	r26, r16
    5030:	6d 93       	st	X+, r22
    5032:	7d 93       	st	X+, r23
    5034:	8d 93       	st	X+, r24
    5036:	9c 93       	st	X, r25
    5038:	13 97       	sbiw	r26, 0x03	; 3
		txHats[i][1] = hats[i][0]*sin(h) + hats[i][1]*cos(h);
    503a:	a3 01       	movw	r20, r6
    503c:	92 01       	movw	r18, r4
    503e:	c7 01       	movw	r24, r14
    5040:	b6 01       	movw	r22, r12
    5042:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5046:	6b 01       	movw	r12, r22
    5048:	7c 01       	movw	r14, r24
    504a:	a5 01       	movw	r20, r10
    504c:	94 01       	movw	r18, r8
    504e:	cd 53       	subi	r28, 0x3D	; 61
    5050:	df 4f       	sbci	r29, 0xFF	; 255
    5052:	68 81       	ld	r22, Y
    5054:	79 81       	ldd	r23, Y+1	; 0x01
    5056:	8a 81       	ldd	r24, Y+2	; 0x02
    5058:	9b 81       	ldd	r25, Y+3	; 0x03
    505a:	c3 5c       	subi	r28, 0xC3	; 195
    505c:	d0 40       	sbci	r29, 0x00	; 0
    505e:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5062:	9b 01       	movw	r18, r22
    5064:	ac 01       	movw	r20, r24
    5066:	c7 01       	movw	r24, r14
    5068:	b6 01       	movw	r22, r12
    506a:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    506e:	f8 01       	movw	r30, r16
    5070:	64 83       	std	Z+4, r22	; 0x04
    5072:	75 83       	std	Z+5, r23	; 0x05
    5074:	86 83       	std	Z+6, r24	; 0x06
    5076:	97 83       	std	Z+7, r25	; 0x07
    5078:	08 5f       	subi	r16, 0xF8	; 248
    507a:	1f 4f       	sbci	r17, 0xFF	; 255
    507c:	f8 e0       	ldi	r31, 0x08	; 8
    507e:	2f 0e       	add	r2, r31
    5080:	31 1c       	adc	r3, r1

float calculate_error(float r, float b, float h){
	r = r<46 ? 46 : r;
	float bigR[2] = {-r*sin(b), r*cos(b)};
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
    5082:	c5 53       	subi	r28, 0x35	; 53
    5084:	df 4f       	sbci	r29, 0xFF	; 255
    5086:	88 81       	ld	r24, Y
    5088:	99 81       	ldd	r25, Y+1	; 0x01
    508a:	cb 5c       	subi	r28, 0xCB	; 203
    508c:	d0 40       	sbci	r29, 0x00	; 0
    508e:	08 17       	cp	r16, r24
    5090:	19 07       	cpc	r17, r25
    5092:	09 f0       	breq	.+2      	; 0x5096 <calculate_error+0x1ec>
    5094:	9a cf       	rjmp	.-204    	; 0x4fca <calculate_error+0x120>
    5096:	a9 eb       	ldi	r26, 0xB9	; 185
    5098:	b3 e2       	ldi	r27, 0x23	; 35
    509a:	c5 51       	subi	r28, 0x15	; 21
    509c:	df 4f       	sbci	r29, 0xFF	; 255
    509e:	a8 83       	st	Y, r26
    50a0:	b9 83       	std	Y+1, r27	; 0x01
    50a2:	cb 5e       	subi	r28, 0xEB	; 235
    50a4:	d0 40       	sbci	r29, 0x00	; 0
    50a6:	fe 01       	movw	r30, r28
    50a8:	31 96       	adiw	r30, 0x01	; 1
    50aa:	1f 01       	movw	r2, r30
    50ac:	c3 52       	subi	r28, 0x23	; 35
    50ae:	df 4f       	sbci	r29, 0xFF	; 255
    50b0:	e8 83       	st	Y, r30
    50b2:	f9 83       	std	Y+1, r31	; 0x01
    50b4:	cd 5d       	subi	r28, 0xDD	; 221
    50b6:	d0 40       	sbci	r29, 0x00	; 0
    50b8:	c5 52       	subi	r28, 0x25	; 37
    50ba:	df 4f       	sbci	r29, 0xFF	; 255
    50bc:	a8 83       	st	Y, r26
    50be:	b9 83       	std	Y+1, r27	; 0x01
    50c0:	cb 5d       	subi	r28, 0xDB	; 219
    50c2:	d0 40       	sbci	r29, 0x00	; 0
    50c4:	84 ea       	ldi	r24, 0xA4	; 164
    50c6:	9b e6       	ldi	r25, 0x6B	; 107
    50c8:	a8 e9       	ldi	r26, 0x98	; 152
    50ca:	b1 e4       	ldi	r27, 0x41	; 65
    50cc:	c9 52       	subi	r28, 0x29	; 41
    50ce:	df 4f       	sbci	r29, 0xFF	; 255
    50d0:	88 83       	st	Y, r24
    50d2:	99 83       	std	Y+1, r25	; 0x01
    50d4:	aa 83       	std	Y+2, r26	; 0x02
    50d6:	bb 83       	std	Y+3, r27	; 0x03
    50d8:	c7 5d       	subi	r28, 0xD7	; 215
    50da:	d0 40       	sbci	r29, 0x00	; 0
    50dc:	41 2c       	mov	r4, r1
    50de:	51 2c       	mov	r5, r1
    50e0:	20 e3       	ldi	r18, 0x30	; 48
    50e2:	62 2e       	mov	r6, r18
    50e4:	21 e4       	ldi	r18, 0x41	; 65
    50e6:	72 2e       	mov	r7, r18
    50e8:	10 e0       	ldi	r17, 0x00	; 0
    50ea:	c5 53       	subi	r28, 0x35	; 53
    50ec:	df 4f       	sbci	r29, 0xFF	; 255
    50ee:	18 82       	st	Y, r1
    50f0:	19 82       	std	Y+1, r1	; 0x01
    50f2:	1a 82       	std	Y+2, r1	; 0x02
    50f4:	1b 82       	std	Y+3, r1	; 0x03
    50f6:	cb 5c       	subi	r28, 0xCB	; 203
    50f8:	d0 40       	sbci	r29, 0x00	; 0
    50fa:	c9 53       	subi	r28, 0x39	; 57
    50fc:	df 4f       	sbci	r29, 0xFF	; 255
    50fe:	18 82       	st	Y, r1
    5100:	19 82       	std	Y+1, r1	; 0x01
    5102:	1a 82       	std	Y+2, r1	; 0x02
    5104:	1b 82       	std	Y+3, r1	; 0x03
    5106:	c7 5c       	subi	r28, 0xC7	; 199
    5108:	d0 40       	sbci	r29, 0x00	; 0
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    510a:	0b ea       	ldi	r16, 0xAB	; 171
    510c:	c1 c0       	rjmp	.+386    	; 0x5290 <calculate_error+0x3e6>
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];

		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
    510e:	cd 53       	subi	r28, 0x3D	; 61
    5110:	df 4f       	sbci	r29, 0xFF	; 255
    5112:	68 81       	ld	r22, Y
    5114:	79 81       	ldd	r23, Y+1	; 0x01
    5116:	8a 81       	ldd	r24, Y+2	; 0x02
    5118:	9b 81       	ldd	r25, Y+3	; 0x03
    511a:	c3 5c       	subi	r28, 0xC3	; 195
    511c:	d0 40       	sbci	r29, 0x00	; 0
    511e:	90 58       	subi	r25, 0x80	; 128
    5120:	c1 53       	subi	r28, 0x31	; 49
    5122:	df 4f       	sbci	r29, 0xFF	; 255
    5124:	28 81       	ld	r18, Y
    5126:	39 81       	ldd	r19, Y+1	; 0x01
    5128:	4a 81       	ldd	r20, Y+2	; 0x02
    512a:	5b 81       	ldd	r21, Y+3	; 0x03
    512c:	cf 5c       	subi	r28, 0xCF	; 207
    512e:	d0 40       	sbci	r29, 0x00	; 0
    5130:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5134:	2b 01       	movw	r4, r22
    5136:	3c 01       	movw	r6, r24
    5138:	c7 01       	movw	r24, r14
    513a:	b6 01       	movw	r22, r12
    513c:	90 58       	subi	r25, 0x80	; 128
    513e:	cd 52       	subi	r28, 0x2D	; 45
    5140:	df 4f       	sbci	r29, 0xFF	; 255
    5142:	28 81       	ld	r18, Y
    5144:	39 81       	ldd	r19, Y+1	; 0x01
    5146:	4a 81       	ldd	r20, Y+2	; 0x02
    5148:	5b 81       	ldd	r21, Y+3	; 0x03
    514a:	c3 5d       	subi	r28, 0xD3	; 211
    514c:	d0 40       	sbci	r29, 0x00	; 0
    514e:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5152:	9b 01       	movw	r18, r22
    5154:	ac 01       	movw	r20, r24
    5156:	c3 01       	movw	r24, r6
    5158:	b2 01       	movw	r22, r4
    515a:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    515e:	6b 01       	movw	r12, r22
    5160:	7c 01       	movw	r14, r24
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	a9 01       	movw	r20, r18
    5168:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__cmpsf2>
    516c:	87 fd       	sbrc	r24, 7
    516e:	3b c1       	rjmp	.+630    	; 0x53e6 <calculate_error+0x53c>

		measTotal += fast_bm[i];
    5170:	c5 52       	subi	r28, 0x25	; 37
    5172:	df 4f       	sbci	r29, 0xFF	; 255
    5174:	e8 81       	ld	r30, Y
    5176:	f9 81       	ldd	r31, Y+1	; 0x01
    5178:	cb 5d       	subi	r28, 0xDB	; 219
    517a:	d0 40       	sbci	r29, 0x00	; 0
    517c:	61 91       	ld	r22, Z+
    517e:	71 91       	ld	r23, Z+
    5180:	c5 52       	subi	r28, 0x25	; 37
    5182:	df 4f       	sbci	r29, 0xFF	; 255
    5184:	e8 83       	st	Y, r30
    5186:	f9 83       	std	Y+1, r31	; 0x01
    5188:	cb 5d       	subi	r28, 0xDB	; 219
    518a:	d0 40       	sbci	r29, 0x00	; 0
    518c:	07 2e       	mov	r0, r23
    518e:	00 0c       	add	r0, r0
    5190:	88 0b       	sbc	r24, r24
    5192:	99 0b       	sbc	r25, r25
    5194:	0e 94 b5 48 	call	0x916a	; 0x916a <__floatsisf>
    5198:	9b 01       	movw	r18, r22
    519a:	ac 01       	movw	r20, r24
    519c:	c9 53       	subi	r28, 0x39	; 57
    519e:	df 4f       	sbci	r29, 0xFF	; 255
    51a0:	68 81       	ld	r22, Y
    51a2:	79 81       	ldd	r23, Y+1	; 0x01
    51a4:	8a 81       	ldd	r24, Y+2	; 0x02
    51a6:	9b 81       	ldd	r25, Y+3	; 0x03
    51a8:	c7 5c       	subi	r28, 0xC7	; 199
    51aa:	d0 40       	sbci	r29, 0x00	; 0
    51ac:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    51b0:	c9 53       	subi	r28, 0x39	; 57
    51b2:	df 4f       	sbci	r29, 0xFF	; 255
    51b4:	68 83       	st	Y, r22
    51b6:	79 83       	std	Y+1, r23	; 0x01
    51b8:	8a 83       	std	Y+2, r24	; 0x02
    51ba:	9b 83       	std	Y+3, r25	; 0x03
    51bc:	c7 5c       	subi	r28, 0xC7	; 199
    51be:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
    51c0:	a7 01       	movw	r20, r14
    51c2:	96 01       	movw	r18, r12
    51c4:	c5 01       	movw	r24, r10
    51c6:	b4 01       	movw	r22, r8
    51c8:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    51cc:	6b 01       	movw	r12, r22
    51ce:	7c 01       	movw	r14, r24
    51d0:	20 e0       	ldi	r18, 0x00	; 0
    51d2:	30 e0       	ldi	r19, 0x00	; 0
    51d4:	42 ef       	ldi	r20, 0xF2	; 242
    51d6:	53 e4       	ldi	r21, 0x43	; 67
    51d8:	c1 52       	subi	r28, 0x21	; 33
    51da:	df 4f       	sbci	r29, 0xFF	; 255
    51dc:	68 81       	ld	r22, Y
    51de:	79 81       	ldd	r23, Y+1	; 0x01
    51e0:	8a 81       	ldd	r24, Y+2	; 0x02
    51e2:	9b 81       	ldd	r25, Y+3	; 0x03
    51e4:	cf 5d       	subi	r28, 0xDF	; 223
    51e6:	d0 40       	sbci	r29, 0x00	; 0
    51e8:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    51ec:	9b 01       	movw	r18, r22
    51ee:	ac 01       	movw	r20, r24
    51f0:	c7 01       	movw	r24, r14
    51f2:	b6 01       	movw	r22, r12
    51f4:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    51f8:	9b 01       	movw	r18, r22
    51fa:	ac 01       	movw	r20, r24
    51fc:	c3 52       	subi	r28, 0x23	; 35
    51fe:	df 4f       	sbci	r29, 0xFF	; 255
    5200:	a8 81       	ld	r26, Y
    5202:	b9 81       	ldd	r27, Y+1	; 0x01
    5204:	cd 5d       	subi	r28, 0xDD	; 221
    5206:	d0 40       	sbci	r29, 0x00	; 0
    5208:	6d 93       	st	X+, r22
    520a:	7d 93       	st	X+, r23
    520c:	8d 93       	st	X+, r24
    520e:	9d 93       	st	X+, r25
    5210:	c3 52       	subi	r28, 0x23	; 35
    5212:	df 4f       	sbci	r29, 0xFF	; 255
    5214:	a8 83       	st	Y, r26
    5216:	b9 83       	std	Y+1, r27	; 0x01
    5218:	cd 5d       	subi	r28, 0xDD	; 221
    521a:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosBTotal += cosAcosB[i];
    521c:	c5 53       	subi	r28, 0x35	; 53
    521e:	df 4f       	sbci	r29, 0xFF	; 255
    5220:	68 81       	ld	r22, Y
    5222:	79 81       	ldd	r23, Y+1	; 0x01
    5224:	8a 81       	ldd	r24, Y+2	; 0x02
    5226:	9b 81       	ldd	r25, Y+3	; 0x03
    5228:	cb 5c       	subi	r28, 0xCB	; 203
    522a:	d0 40       	sbci	r29, 0x00	; 0
    522c:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    5230:	c5 53       	subi	r28, 0x35	; 53
    5232:	df 4f       	sbci	r29, 0xFF	; 255
    5234:	68 83       	st	Y, r22
    5236:	79 83       	std	Y+1, r23	; 0x01
    5238:	8a 83       	std	Y+2, r24	; 0x02
    523a:	9b 83       	std	Y+3, r25	; 0x03
    523c:	cb 5c       	subi	r28, 0xCB	; 203
    523e:	d0 40       	sbci	r29, 0x00	; 0
	float measTotal = 0;
	float cosAcosBTotal = 0;
	float cosAcosBmat[6][6];
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    5240:	1f 5f       	subi	r17, 0xFF	; 255
    5242:	14 32       	cpi	r17, 0x24	; 36
    5244:	09 f4       	brne	.+2      	; 0x5248 <calculate_error+0x39e>
    5246:	d3 c0       	rjmp	.+422    	; 0x53ee <calculate_error+0x544>
    5248:	10 9f       	mul	r17, r16
    524a:	81 2d       	mov	r24, r1
    524c:	11 24       	eor	r1, r1
    524e:	86 95       	lsr	r24
    5250:	86 95       	lsr	r24
    5252:	98 2f       	mov	r25, r24
    5254:	99 0f       	add	r25, r25
    5256:	89 0f       	add	r24, r25
    5258:	88 0f       	add	r24, r24
    525a:	e1 2f       	mov	r30, r17
    525c:	e8 1b       	sub	r30, r24
    525e:	f0 e0       	ldi	r31, 0x00	; 0
    5260:	ee 0f       	add	r30, r30
    5262:	ff 1f       	adc	r31, r31
    5264:	ee 0f       	add	r30, r30
    5266:	ff 1f       	adc	r31, r31
    5268:	ee 0f       	add	r30, r30
    526a:	ff 1f       	adc	r31, r31
    526c:	e8 53       	subi	r30, 0x38	; 56
    526e:	fe 4d       	sbci	r31, 0xDE	; 222
    5270:	40 80       	ld	r4, Z
    5272:	51 80       	ldd	r5, Z+1	; 0x01
    5274:	62 80       	ldd	r6, Z+2	; 0x02
    5276:	73 80       	ldd	r7, Z+3	; 0x03
    5278:	84 81       	ldd	r24, Z+4	; 0x04
    527a:	95 81       	ldd	r25, Z+5	; 0x05
    527c:	a6 81       	ldd	r26, Z+6	; 0x06
    527e:	b7 81       	ldd	r27, Z+7	; 0x07
    5280:	c9 52       	subi	r28, 0x29	; 41
    5282:	df 4f       	sbci	r29, 0xFF	; 255
    5284:	88 83       	st	Y, r24
    5286:	99 83       	std	Y+1, r25	; 0x01
    5288:	aa 83       	std	Y+2, r26	; 0x02
    528a:	bb 83       	std	Y+3, r27	; 0x03
    528c:	c7 5d       	subi	r28, 0xD7	; 215
    528e:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    5290:	10 9f       	mul	r17, r16
    5292:	81 2d       	mov	r24, r1
    5294:	11 24       	eor	r1, r1
    5296:	86 95       	lsr	r24
    5298:	86 95       	lsr	r24
    529a:	91 e9       	ldi	r25, 0x91	; 145
    529c:	e9 2e       	mov	r14, r25
    529e:	f1 2c       	mov	r15, r1
    52a0:	ec 0e       	add	r14, r28
    52a2:	fd 1e       	adc	r15, r29
    52a4:	b8 e0       	ldi	r27, 0x08	; 8
    52a6:	8b 9f       	mul	r24, r27
    52a8:	e0 0c       	add	r14, r0
    52aa:	f1 1c       	adc	r15, r1
    52ac:	11 24       	eor	r1, r1
    52ae:	d7 01       	movw	r26, r14
    52b0:	8d 91       	ld	r24, X+
    52b2:	9d 91       	ld	r25, X+
    52b4:	0d 90       	ld	r0, X+
    52b6:	bc 91       	ld	r27, X
    52b8:	a0 2d       	mov	r26, r0
    52ba:	c1 53       	subi	r28, 0x31	; 49
    52bc:	df 4f       	sbci	r29, 0xFF	; 255
    52be:	88 83       	st	Y, r24
    52c0:	99 83       	std	Y+1, r25	; 0x01
    52c2:	aa 83       	std	Y+2, r26	; 0x02
    52c4:	bb 83       	std	Y+3, r27	; 0x03
    52c6:	cf 5c       	subi	r28, 0xCF	; 207
    52c8:	d0 40       	sbci	r29, 0x00	; 0
    52ca:	9c 01       	movw	r18, r24
    52cc:	ad 01       	movw	r20, r26
    52ce:	cd 51       	subi	r28, 0x1D	; 29
    52d0:	df 4f       	sbci	r29, 0xFF	; 255
    52d2:	68 81       	ld	r22, Y
    52d4:	79 81       	ldd	r23, Y+1	; 0x01
    52d6:	8a 81       	ldd	r24, Y+2	; 0x02
    52d8:	9b 81       	ldd	r25, Y+3	; 0x03
    52da:	c3 5e       	subi	r28, 0xE3	; 227
    52dc:	d0 40       	sbci	r29, 0x00	; 0
    52de:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    52e2:	a3 01       	movw	r20, r6
    52e4:	92 01       	movw	r18, r4
    52e6:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    52ea:	cd 53       	subi	r28, 0x3D	; 61
    52ec:	df 4f       	sbci	r29, 0xFF	; 255
    52ee:	68 83       	st	Y, r22
    52f0:	79 83       	std	Y+1, r23	; 0x01
    52f2:	8a 83       	std	Y+2, r24	; 0x02
    52f4:	9b 83       	std	Y+3, r25	; 0x03
    52f6:	c3 5c       	subi	r28, 0xC3	; 195
    52f8:	d0 40       	sbci	r29, 0x00	; 0
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
    52fa:	d7 01       	movw	r26, r14
    52fc:	14 96       	adiw	r26, 0x04	; 4
    52fe:	8d 91       	ld	r24, X+
    5300:	9d 91       	ld	r25, X+
    5302:	0d 90       	ld	r0, X+
    5304:	bc 91       	ld	r27, X
    5306:	a0 2d       	mov	r26, r0
    5308:	cd 52       	subi	r28, 0x2D	; 45
    530a:	df 4f       	sbci	r29, 0xFF	; 255
    530c:	88 83       	st	Y, r24
    530e:	99 83       	std	Y+1, r25	; 0x01
    5310:	aa 83       	std	Y+2, r26	; 0x02
    5312:	bb 83       	std	Y+3, r27	; 0x03
    5314:	c3 5d       	subi	r28, 0xD3	; 211
    5316:	d0 40       	sbci	r29, 0x00	; 0
    5318:	9c 01       	movw	r18, r24
    531a:	ad 01       	movw	r20, r26
    531c:	c9 51       	subi	r28, 0x19	; 25
    531e:	df 4f       	sbci	r29, 0xFF	; 255
    5320:	68 81       	ld	r22, Y
    5322:	79 81       	ldd	r23, Y+1	; 0x01
    5324:	8a 81       	ldd	r24, Y+2	; 0x02
    5326:	9b 81       	ldd	r25, Y+3	; 0x03
    5328:	c7 5e       	subi	r28, 0xE7	; 231
    532a:	d0 40       	sbci	r29, 0x00	; 0
    532c:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    5330:	c9 52       	subi	r28, 0x29	; 41
    5332:	df 4f       	sbci	r29, 0xFF	; 255
    5334:	28 81       	ld	r18, Y
    5336:	39 81       	ldd	r19, Y+1	; 0x01
    5338:	4a 81       	ldd	r20, Y+2	; 0x02
    533a:	5b 81       	ldd	r21, Y+3	; 0x03
    533c:	c7 5d       	subi	r28, 0xD7	; 215
    533e:	d0 40       	sbci	r29, 0x00	; 0
    5340:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    5344:	6b 01       	movw	r12, r22
    5346:	7c 01       	movw	r14, r24
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
    5348:	cd 53       	subi	r28, 0x3D	; 61
    534a:	df 4f       	sbci	r29, 0xFF	; 255
    534c:	28 81       	ld	r18, Y
    534e:	39 81       	ldd	r19, Y+1	; 0x01
    5350:	4a 81       	ldd	r20, Y+2	; 0x02
    5352:	5b 81       	ldd	r21, Y+3	; 0x03
    5354:	c3 5c       	subi	r28, 0xC3	; 195
    5356:	d0 40       	sbci	r29, 0x00	; 0
    5358:	ca 01       	movw	r24, r20
    535a:	b9 01       	movw	r22, r18
    535c:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5360:	4b 01       	movw	r8, r22
    5362:	5c 01       	movw	r10, r24
    5364:	a7 01       	movw	r20, r14
    5366:	96 01       	movw	r18, r12
    5368:	c7 01       	movw	r24, r14
    536a:	b6 01       	movw	r22, r12
    536c:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5370:	9b 01       	movw	r18, r22
    5372:	ac 01       	movw	r20, r24
    5374:	c5 01       	movw	r24, r10
    5376:	b4 01       	movw	r22, r8
    5378:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    537c:	c1 52       	subi	r28, 0x21	; 33
    537e:	df 4f       	sbci	r29, 0xFF	; 255
    5380:	68 83       	st	Y, r22
    5382:	79 83       	std	Y+1, r23	; 0x01
    5384:	8a 83       	std	Y+2, r24	; 0x02
    5386:	9b 83       	std	Y+3, r25	; 0x03
    5388:	cf 5d       	subi	r28, 0xDF	; 223
    538a:	d0 40       	sbci	r29, 0x00	; 0

		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
    538c:	a3 01       	movw	r20, r6
    538e:	92 01       	movw	r18, r4
    5390:	cd 53       	subi	r28, 0x3D	; 61
    5392:	df 4f       	sbci	r29, 0xFF	; 255
    5394:	68 81       	ld	r22, Y
    5396:	79 81       	ldd	r23, Y+1	; 0x01
    5398:	8a 81       	ldd	r24, Y+2	; 0x02
    539a:	9b 81       	ldd	r25, Y+3	; 0x03
    539c:	c3 5c       	subi	r28, 0xC3	; 195
    539e:	d0 40       	sbci	r29, 0x00	; 0
    53a0:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    53a4:	4b 01       	movw	r8, r22
    53a6:	5c 01       	movw	r10, r24
    53a8:	c9 52       	subi	r28, 0x29	; 41
    53aa:	df 4f       	sbci	r29, 0xFF	; 255
    53ac:	28 81       	ld	r18, Y
    53ae:	39 81       	ldd	r19, Y+1	; 0x01
    53b0:	4a 81       	ldd	r20, Y+2	; 0x02
    53b2:	5b 81       	ldd	r21, Y+3	; 0x03
    53b4:	c7 5d       	subi	r28, 0xD7	; 215
    53b6:	d0 40       	sbci	r29, 0x00	; 0
    53b8:	c7 01       	movw	r24, r14
    53ba:	b6 01       	movw	r22, r12
    53bc:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    53c0:	9b 01       	movw	r18, r22
    53c2:	ac 01       	movw	r20, r24
    53c4:	c5 01       	movw	r24, r10
    53c6:	b4 01       	movw	r22, r8
    53c8:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    53cc:	4b 01       	movw	r8, r22
    53ce:	5c 01       	movw	r10, r24
		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	30 e0       	ldi	r19, 0x00	; 0
    53d4:	a9 01       	movw	r20, r18
    53d6:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__cmpsf2>
    53da:	87 ff       	sbrs	r24, 7
    53dc:	98 ce       	rjmp	.-720    	; 0x510e <calculate_error+0x264>
    53de:	81 2c       	mov	r8, r1
    53e0:	91 2c       	mov	r9, r1
    53e2:	54 01       	movw	r10, r8
    53e4:	94 ce       	rjmp	.-728    	; 0x510e <calculate_error+0x264>
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    53e6:	c1 2c       	mov	r12, r1
    53e8:	d1 2c       	mov	r13, r1
    53ea:	76 01       	movw	r14, r12
    53ec:	c1 ce       	rjmp	.-638    	; 0x5170 <calculate_error+0x2c6>
	float measTotal = 0;
	float cosAcosBTotal = 0;
	float cosAcosBmat[6][6];
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    53ee:	c1 2c       	mov	r12, r1
    53f0:	d1 2c       	mov	r13, r1
    53f2:	76 01       	movw	r14, r12
    53f4:	c5 51       	subi	r28, 0x15	; 21
    53f6:	df 4f       	sbci	r29, 0xFF	; 255
    53f8:	08 81       	ld	r16, Y
    53fa:	19 81       	ldd	r17, Y+1	; 0x01
    53fc:	cb 5e       	subi	r28, 0xEB	; 235
    53fe:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
		cosAcosBTotal += cosAcosB[i];
	}
	float conf = 0;
	for(uint8_t i=0;i<36;i++){
		conf += fabsf( (fast_bm[i]/measTotal) - (cosAcosB[i]/cosAcosBTotal) );
    5400:	d8 01       	movw	r26, r16
    5402:	6d 91       	ld	r22, X+
    5404:	7d 91       	ld	r23, X+
    5406:	8d 01       	movw	r16, r26
    5408:	f1 01       	movw	r30, r2
    540a:	41 90       	ld	r4, Z+
    540c:	51 90       	ld	r5, Z+
    540e:	61 90       	ld	r6, Z+
    5410:	71 90       	ld	r7, Z+
    5412:	1f 01       	movw	r2, r30
    5414:	07 2e       	mov	r0, r23
    5416:	00 0c       	add	r0, r0
    5418:	88 0b       	sbc	r24, r24
    541a:	99 0b       	sbc	r25, r25
    541c:	0e 94 b5 48 	call	0x916a	; 0x916a <__floatsisf>
    5420:	c9 53       	subi	r28, 0x39	; 57
    5422:	df 4f       	sbci	r29, 0xFF	; 255
    5424:	28 81       	ld	r18, Y
    5426:	39 81       	ldd	r19, Y+1	; 0x01
    5428:	4a 81       	ldd	r20, Y+2	; 0x02
    542a:	5b 81       	ldd	r21, Y+3	; 0x03
    542c:	c7 5c       	subi	r28, 0xC7	; 199
    542e:	d0 40       	sbci	r29, 0x00	; 0
    5430:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    5434:	4b 01       	movw	r8, r22
    5436:	5c 01       	movw	r10, r24
    5438:	c5 53       	subi	r28, 0x35	; 53
    543a:	df 4f       	sbci	r29, 0xFF	; 255
    543c:	28 81       	ld	r18, Y
    543e:	39 81       	ldd	r19, Y+1	; 0x01
    5440:	4a 81       	ldd	r20, Y+2	; 0x02
    5442:	5b 81       	ldd	r21, Y+3	; 0x03
    5444:	cb 5c       	subi	r28, 0xCB	; 203
    5446:	d0 40       	sbci	r29, 0x00	; 0
    5448:	c3 01       	movw	r24, r6
    544a:	b2 01       	movw	r22, r4
    544c:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    5450:	9b 01       	movw	r18, r22
    5452:	ac 01       	movw	r20, r24
    5454:	c5 01       	movw	r24, r10
    5456:	b4 01       	movw	r22, r8
    5458:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    545c:	9b 01       	movw	r18, r22
    545e:	ac 01       	movw	r20, r24
    5460:	5f 77       	andi	r21, 0x7F	; 127
    5462:	c7 01       	movw	r24, r14
    5464:	b6 01       	movw	r22, r12
    5466:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    546a:	6b 01       	movw	r12, r22
    546c:	7c 01       	movw	r14, r24
		measTotal += fast_bm[i];
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
		cosAcosBTotal += cosAcosB[i];
	}
	float conf = 0;
	for(uint8_t i=0;i<36;i++){
    546e:	cf 53       	subi	r28, 0x3F	; 63
    5470:	df 4f       	sbci	r29, 0xFF	; 255
    5472:	88 81       	ld	r24, Y
    5474:	99 81       	ldd	r25, Y+1	; 0x01
    5476:	c1 5c       	subi	r28, 0xC1	; 193
    5478:	d0 40       	sbci	r29, 0x00	; 0
    547a:	82 15       	cp	r24, r2
    547c:	93 05       	cpc	r25, r3
    547e:	09 f0       	breq	.+2      	; 0x5482 <calculate_error+0x5d8>
    5480:	bf cf       	rjmp	.-130    	; 0x5400 <calculate_error+0x556>
		//printf("}");
		//if(e<5) printf(",");
	//}
	//printf("}},\r\n");
	return conf;
}
    5482:	c7 01       	movw	r24, r14
    5484:	b6 01       	movw	r22, r12
    5486:	c4 51       	subi	r28, 0x14	; 20
    5488:	df 4f       	sbci	r29, 0xFF	; 255
    548a:	cd bf       	out	0x3d, r28	; 61
    548c:	de bf       	out	0x3e, r29	; 62
    548e:	df 91       	pop	r29
    5490:	cf 91       	pop	r28
    5492:	1f 91       	pop	r17
    5494:	0f 91       	pop	r16
    5496:	ff 90       	pop	r15
    5498:	ef 90       	pop	r14
    549a:	df 90       	pop	r13
    549c:	cf 90       	pop	r12
    549e:	bf 90       	pop	r11
    54a0:	af 90       	pop	r10
    54a2:	9f 90       	pop	r9
    54a4:	8f 90       	pop	r8
    54a6:	7f 90       	pop	r7
    54a8:	6f 90       	pop	r6
    54aa:	5f 90       	pop	r5
    54ac:	4f 90       	pop	r4
    54ae:	3f 90       	pop	r3
    54b0:	2f 90       	pop	r2
    54b2:	08 95       	ret
    54b4:	80 e0       	ldi	r24, 0x00	; 0
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	a8 e3       	ldi	r26, 0x38	; 56
    54ba:	b2 ec       	ldi	r27, 0xC2	; 194
    54bc:	cd 53       	subi	r28, 0x3D	; 61
    54be:	df 4f       	sbci	r29, 0xFF	; 255
    54c0:	88 83       	st	Y, r24
    54c2:	99 83       	std	Y+1, r25	; 0x01
    54c4:	aa 83       	std	Y+2, r26	; 0x02
    54c6:	bb 83       	std	Y+3, r27	; 0x03
    54c8:	c3 5c       	subi	r28, 0xC3	; 195
    54ca:	d0 40       	sbci	r29, 0x00	; 0

	return magicRangeFunc(total);
}

float calculate_error(float r, float b, float h){
	r = r<46 ? 46 : r;
    54cc:	81 2c       	mov	r8, r1
    54ce:	91 2c       	mov	r9, r1
    54d0:	68 e3       	ldi	r22, 0x38	; 56
    54d2:	a6 2e       	mov	r10, r22
    54d4:	62 e4       	ldi	r22, 0x42	; 66
    54d6:	b6 2e       	mov	r11, r22
    54d8:	19 cd       	rjmp	.-1486   	; 0x4f0c <calculate_error+0x62>

000054da <calculate_bearing_and_heading>:
	//}
	//printf("}},\r\n");
	return conf;
}

void calculate_bearing_and_heading(float* bearing, float* heading){
    54da:	2f 92       	push	r2
    54dc:	3f 92       	push	r3
    54de:	4f 92       	push	r4
    54e0:	5f 92       	push	r5
    54e2:	6f 92       	push	r6
    54e4:	7f 92       	push	r7
    54e6:	8f 92       	push	r8
    54e8:	9f 92       	push	r9
    54ea:	af 92       	push	r10
    54ec:	bf 92       	push	r11
    54ee:	cf 92       	push	r12
    54f0:	df 92       	push	r13
    54f2:	ef 92       	push	r14
    54f4:	ff 92       	push	r15
    54f6:	0f 93       	push	r16
    54f8:	1f 93       	push	r17
    54fa:	cf 93       	push	r28
    54fc:	df 93       	push	r29
    54fe:	cd b7       	in	r28, 0x3d	; 61
    5500:	de b7       	in	r29, 0x3e	; 62
    5502:	6c 97       	sbiw	r28, 0x1c	; 28
    5504:	cd bf       	out	0x3d, r28	; 61
    5506:	de bf       	out	0x3e, r29	; 62
    5508:	89 8f       	std	Y+25, r24	; 0x19
    550a:	9a 8f       	std	Y+26, r25	; 0x1a
    550c:	6b 8f       	std	Y+27, r22	; 0x1b
    550e:	7c 8f       	std	Y+28, r23	; 0x1c
    5510:	29 eb       	ldi	r18, 0xB9	; 185
    5512:	22 2e       	mov	r2, r18
    5514:	23 e2       	ldi	r18, 0x23	; 35
    5516:	32 2e       	mov	r3, r18
    5518:	87 ed       	ldi	r24, 0xD7	; 215
    551a:	93 eb       	ldi	r25, 0xB3	; 179
    551c:	ad e5       	ldi	r26, 0x5D	; 93
    551e:	bf e3       	ldi	r27, 0x3F	; 63
    5520:	8d 8b       	std	Y+21, r24	; 0x15
    5522:	9e 8b       	std	Y+22, r25	; 0x16
    5524:	af 8b       	std	Y+23, r26	; 0x17
    5526:	b8 8f       	std	Y+24, r27	; 0x18
    5528:	80 e0       	ldi	r24, 0x00	; 0
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	a0 e0       	ldi	r26, 0x00	; 0
    552e:	bf eb       	ldi	r27, 0xBF	; 191
    5530:	89 8b       	std	Y+17, r24	; 0x11
    5532:	9a 8b       	std	Y+18, r25	; 0x12
    5534:	ab 8b       	std	Y+19, r26	; 0x13
    5536:	bc 8b       	std	Y+20, r27	; 0x14
    5538:	80 e0       	ldi	r24, 0x00	; 0
    553a:	90 e0       	ldi	r25, 0x00	; 0
    553c:	a0 e8       	ldi	r26, 0x80	; 128
    553e:	bf eb       	ldi	r27, 0xBF	; 191
    5540:	8d 87       	std	Y+13, r24	; 0x0d
    5542:	9e 87       	std	Y+14, r25	; 0x0e
    5544:	af 87       	std	Y+15, r26	; 0x0f
    5546:	b8 8b       	std	Y+16, r27	; 0x10
    5548:	19 86       	std	Y+9, r1	; 0x09
    554a:	1a 86       	std	Y+10, r1	; 0x0a
    554c:	1b 86       	std	Y+11, r1	; 0x0b
    554e:	1c 86       	std	Y+12, r1	; 0x0c
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
    5550:	10 e0       	ldi	r17, 0x00	; 0
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;
    5552:	41 2c       	mov	r4, r1
    5554:	51 2c       	mov	r5, r1
    5556:	32 01       	movw	r6, r4
void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
    5558:	53 01       	movw	r10, r6
    555a:	42 01       	movw	r8, r4

void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
    555c:	4d 82       	std	Y+5, r4	; 0x05
    555e:	5e 82       	std	Y+6, r5	; 0x06
    5560:	6f 82       	std	Y+7, r6	; 0x07
    5562:	78 86       	std	Y+8, r7	; 0x08
}

void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
    5564:	49 82       	std	Y+1, r4	; 0x01
    5566:	5a 82       	std	Y+2, r5	; 0x02
    5568:	6b 82       	std	Y+3, r6	; 0x03
    556a:	7c 82       	std	Y+4, r7	; 0x04
    556c:	0b ea       	ldi	r16, 0xAB	; 171
    556e:	49 c0       	rjmp	.+146    	; 0x5602 <calculate_bearing_and_heading+0x128>
    5570:	10 9f       	mul	r17, r16
    5572:	81 2d       	mov	r24, r1
    5574:	11 24       	eor	r1, r1
    5576:	86 95       	lsr	r24
    5578:	86 95       	lsr	r24
    557a:	98 2f       	mov	r25, r24
    557c:	99 0f       	add	r25, r25
    557e:	98 0f       	add	r25, r24
    5580:	99 0f       	add	r25, r25
    5582:	21 2f       	mov	r18, r17
    5584:	29 1b       	sub	r18, r25
    5586:	30 e0       	ldi	r19, 0x00	; 0
    5588:	e6 e0       	ldi	r30, 0x06	; 6
    558a:	f0 e0       	ldi	r31, 0x00	; 0
    558c:	e8 1b       	sub	r30, r24
    558e:	f1 09       	sbc	r31, r1
    5590:	cf 01       	movw	r24, r30
    5592:	82 0f       	add	r24, r18
    5594:	93 1f       	adc	r25, r19
    5596:	66 e0       	ldi	r22, 0x06	; 6
    5598:	70 e0       	ldi	r23, 0x00	; 0
    559a:	0e 94 fe 4b 	call	0x97fc	; 0x97fc <__divmodhi4>
    559e:	fc 01       	movw	r30, r24
    55a0:	ee 0f       	add	r30, r30
    55a2:	ff 1f       	adc	r31, r31
    55a4:	ee 0f       	add	r30, r30
    55a6:	ff 1f       	adc	r31, r31
    55a8:	ee 0f       	add	r30, r30
    55aa:	ff 1f       	adc	r31, r31
    55ac:	e8 56       	subi	r30, 0x68	; 104
    55ae:	fe 4d       	sbci	r31, 0xDE	; 222
    55b0:	84 81       	ldd	r24, Z+4	; 0x04
    55b2:	95 81       	ldd	r25, Z+5	; 0x05
    55b4:	a6 81       	ldd	r26, Z+6	; 0x06
    55b6:	b7 81       	ldd	r27, Z+7	; 0x07
    55b8:	89 87       	std	Y+9, r24	; 0x09
    55ba:	9a 87       	std	Y+10, r25	; 0x0a
    55bc:	ab 87       	std	Y+11, r26	; 0x0b
    55be:	bc 87       	std	Y+12, r27	; 0x0c
    55c0:	80 81       	ld	r24, Z
    55c2:	91 81       	ldd	r25, Z+1	; 0x01
    55c4:	a2 81       	ldd	r26, Z+2	; 0x02
    55c6:	b3 81       	ldd	r27, Z+3	; 0x03
    55c8:	8d 87       	std	Y+13, r24	; 0x0d
    55ca:	9e 87       	std	Y+14, r25	; 0x0e
    55cc:	af 87       	std	Y+15, r26	; 0x0f
    55ce:	b8 8b       	std	Y+16, r27	; 0x10
    55d0:	22 0f       	add	r18, r18
    55d2:	33 1f       	adc	r19, r19
    55d4:	22 0f       	add	r18, r18
    55d6:	33 1f       	adc	r19, r19
    55d8:	22 0f       	add	r18, r18
    55da:	33 1f       	adc	r19, r19
    55dc:	f9 01       	movw	r30, r18
    55de:	e8 50       	subi	r30, 0x08	; 8
    55e0:	fe 4d       	sbci	r31, 0xDE	; 222
    55e2:	84 81       	ldd	r24, Z+4	; 0x04
    55e4:	95 81       	ldd	r25, Z+5	; 0x05
    55e6:	a6 81       	ldd	r26, Z+6	; 0x06
    55e8:	b7 81       	ldd	r27, Z+7	; 0x07
    55ea:	89 8b       	std	Y+17, r24	; 0x11
    55ec:	9a 8b       	std	Y+18, r25	; 0x12
    55ee:	ab 8b       	std	Y+19, r26	; 0x13
    55f0:	bc 8b       	std	Y+20, r27	; 0x14
    55f2:	80 81       	ld	r24, Z
    55f4:	91 81       	ldd	r25, Z+1	; 0x01
    55f6:	a2 81       	ldd	r26, Z+2	; 0x02
    55f8:	b3 81       	ldd	r27, Z+3	; 0x03
    55fa:	8d 8b       	std	Y+21, r24	; 0x15
    55fc:	9e 8b       	std	Y+22, r25	; 0x16
    55fe:	af 8b       	std	Y+23, r26	; 0x17
    5600:	b8 8f       	std	Y+24, r27	; 0x18
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
		
		bearingX+=fast_bm[i]*getCosBearingBasis(i/6,i%6);
    5602:	d1 01       	movw	r26, r2
    5604:	6d 91       	ld	r22, X+
    5606:	7d 91       	ld	r23, X+
    5608:	1d 01       	movw	r2, r26
    560a:	07 2e       	mov	r0, r23
    560c:	00 0c       	add	r0, r0
    560e:	88 0b       	sbc	r24, r24
    5610:	99 0b       	sbc	r25, r25
    5612:	0e 94 b5 48 	call	0x916a	; 0x916a <__floatsisf>
    5616:	6b 01       	movw	r12, r22
    5618:	7c 01       	movw	r14, r24
    561a:	2d 89       	ldd	r18, Y+21	; 0x15
    561c:	3e 89       	ldd	r19, Y+22	; 0x16
    561e:	4f 89       	ldd	r20, Y+23	; 0x17
    5620:	58 8d       	ldd	r21, Y+24	; 0x18
    5622:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5626:	9b 01       	movw	r18, r22
    5628:	ac 01       	movw	r20, r24
    562a:	69 81       	ldd	r22, Y+1	; 0x01
    562c:	7a 81       	ldd	r23, Y+2	; 0x02
    562e:	8b 81       	ldd	r24, Y+3	; 0x03
    5630:	9c 81       	ldd	r25, Y+4	; 0x04
    5632:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    5636:	69 83       	std	Y+1, r22	; 0x01
    5638:	7a 83       	std	Y+2, r23	; 0x02
    563a:	8b 83       	std	Y+3, r24	; 0x03
    563c:	9c 83       	std	Y+4, r25	; 0x04
		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
    563e:	29 89       	ldd	r18, Y+17	; 0x11
    5640:	3a 89       	ldd	r19, Y+18	; 0x12
    5642:	4b 89       	ldd	r20, Y+19	; 0x13
    5644:	5c 89       	ldd	r21, Y+20	; 0x14
    5646:	c7 01       	movw	r24, r14
    5648:	b6 01       	movw	r22, r12
    564a:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    564e:	9b 01       	movw	r18, r22
    5650:	ac 01       	movw	r20, r24
    5652:	6d 81       	ldd	r22, Y+5	; 0x05
    5654:	7e 81       	ldd	r23, Y+6	; 0x06
    5656:	8f 81       	ldd	r24, Y+7	; 0x07
    5658:	98 85       	ldd	r25, Y+8	; 0x08
    565a:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    565e:	6d 83       	std	Y+5, r22	; 0x05
    5660:	7e 83       	std	Y+6, r23	; 0x06
    5662:	8f 83       	std	Y+7, r24	; 0x07
    5664:	98 87       	std	Y+8, r25	; 0x08
		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
    5666:	2d 85       	ldd	r18, Y+13	; 0x0d
    5668:	3e 85       	ldd	r19, Y+14	; 0x0e
    566a:	4f 85       	ldd	r20, Y+15	; 0x0f
    566c:	58 89       	ldd	r21, Y+16	; 0x10
    566e:	c7 01       	movw	r24, r14
    5670:	b6 01       	movw	r22, r12
    5672:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5676:	9b 01       	movw	r18, r22
    5678:	ac 01       	movw	r20, r24
    567a:	c5 01       	movw	r24, r10
    567c:	b4 01       	movw	r22, r8
    567e:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    5682:	4b 01       	movw	r8, r22
    5684:	5c 01       	movw	r10, r24
		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
    5686:	29 85       	ldd	r18, Y+9	; 0x09
    5688:	3a 85       	ldd	r19, Y+10	; 0x0a
    568a:	4b 85       	ldd	r20, Y+11	; 0x0b
    568c:	5c 85       	ldd	r21, Y+12	; 0x0c
    568e:	c7 01       	movw	r24, r14
    5690:	b6 01       	movw	r22, r12
    5692:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5696:	9b 01       	movw	r18, r22
    5698:	ac 01       	movw	r20, r24
    569a:	c3 01       	movw	r24, r6
    569c:	b2 01       	movw	r22, r4
    569e:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    56a2:	2b 01       	movw	r4, r22
    56a4:	3c 01       	movw	r6, r24
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
    56a6:	1f 5f       	subi	r17, 0xFF	; 255
    56a8:	14 32       	cpi	r17, 0x24	; 36
    56aa:	09 f0       	breq	.+2      	; 0x56ae <calculate_bearing_and_heading+0x1d4>
    56ac:	61 cf       	rjmp	.-318    	; 0x5570 <calculate_bearing_and_heading+0x96>
		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
	}
	
	*bearing = atan2f(bearingY, bearingX);	
    56ae:	29 81       	ldd	r18, Y+1	; 0x01
    56b0:	3a 81       	ldd	r19, Y+2	; 0x02
    56b2:	4b 81       	ldd	r20, Y+3	; 0x03
    56b4:	5c 81       	ldd	r21, Y+4	; 0x04
    56b6:	6d 81       	ldd	r22, Y+5	; 0x05
    56b8:	7e 81       	ldd	r23, Y+6	; 0x06
    56ba:	8f 81       	ldd	r24, Y+7	; 0x07
    56bc:	98 85       	ldd	r25, Y+8	; 0x08
    56be:	0e 94 68 47 	call	0x8ed0	; 0x8ed0 <atan2>
    56c2:	a9 8d       	ldd	r26, Y+25	; 0x19
    56c4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    56c6:	6d 93       	st	X+, r22
    56c8:	7d 93       	st	X+, r23
    56ca:	8d 93       	st	X+, r24
    56cc:	9c 93       	st	X, r25
    56ce:	13 97       	sbiw	r26, 0x03	; 3
	*heading = atan2f(headingY, headingX);
    56d0:	a5 01       	movw	r20, r10
    56d2:	94 01       	movw	r18, r8
    56d4:	c3 01       	movw	r24, r6
    56d6:	b2 01       	movw	r22, r4
    56d8:	0e 94 68 47 	call	0x8ed0	; 0x8ed0 <atan2>
    56dc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    56de:	fc 8d       	ldd	r31, Y+28	; 0x1c
    56e0:	60 83       	st	Z, r22
    56e2:	71 83       	std	Z+1, r23	; 0x01
    56e4:	82 83       	std	Z+2, r24	; 0x02
    56e6:	93 83       	std	Z+3, r25	; 0x03
}
    56e8:	6c 96       	adiw	r28, 0x1c	; 28
    56ea:	cd bf       	out	0x3d, r28	; 61
    56ec:	de bf       	out	0x3e, r29	; 62
    56ee:	df 91       	pop	r29
    56f0:	cf 91       	pop	r28
    56f2:	1f 91       	pop	r17
    56f4:	0f 91       	pop	r16
    56f6:	ff 90       	pop	r15
    56f8:	ef 90       	pop	r14
    56fa:	df 90       	pop	r13
    56fc:	cf 90       	pop	r12
    56fe:	bf 90       	pop	r11
    5700:	af 90       	pop	r10
    5702:	9f 90       	pop	r9
    5704:	8f 90       	pop	r8
    5706:	7f 90       	pop	r7
    5708:	6f 90       	pop	r6
    570a:	5f 90       	pop	r5
    570c:	4f 90       	pop	r4
    570e:	3f 90       	pop	r3
    5710:	2f 90       	pop	r2
    5712:	08 95       	ret

00005714 <useRnbData>:
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
	}
}

void useRnbData(){
    5714:	2f 92       	push	r2
    5716:	3f 92       	push	r3
    5718:	4f 92       	push	r4
    571a:	5f 92       	push	r5
    571c:	6f 92       	push	r6
    571e:	7f 92       	push	r7
    5720:	8f 92       	push	r8
    5722:	9f 92       	push	r9
    5724:	af 92       	push	r10
    5726:	bf 92       	push	r11
    5728:	cf 92       	push	r12
    572a:	df 92       	push	r13
    572c:	ef 92       	push	r14
    572e:	ff 92       	push	r15
    5730:	0f 93       	push	r16
    5732:	1f 93       	push	r17
    5734:	cf 93       	push	r28
    5736:	df 93       	push	r29
    5738:	cd b7       	in	r28, 0x3d	; 61
    573a:	de b7       	in	r29, 0x3e	; 62
    573c:	2c 97       	sbiw	r28, 0x0c	; 12
    573e:	cd bf       	out	0x3d, r28	; 61
    5740:	de bf       	out	0x3e, r29	; 62
    5742:	a9 eb       	ldi	r26, 0xB9	; 185
    5744:	b3 e2       	ldi	r27, 0x23	; 35
    5746:	01 e0       	ldi	r16, 0x01	; 1
    5748:	14 e2       	ldi	r17, 0x24	; 36
	*heading = atan2f(headingY, headingX);
}

static int16_t processBrightMeas(void){
	int16_t val;
	int16_t valSum=0;
    574a:	c1 2c       	mov	r12, r1
    574c:	d1 2c       	mov	r13, r1
	uint8_t allColZeroCheck = 0b00111111;
    574e:	6f e3       	ldi	r22, 0x3F	; 63
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
	}
}

void useRnbData(){
    5750:	fd 01       	movw	r30, r26
    5752:	20 e0       	ldi	r18, 0x00	; 0
    5754:	30 e0       	ldi	r19, 0x00	; 0
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
			val = brightMeas[e][s];
    5756:	41 91       	ld	r20, Z+
    5758:	51 91       	ld	r21, Z+
			allColZeroCheck &= ~((!!val)<<s);	
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	41 15       	cp	r20, r1
    5760:	51 05       	cpc	r21, r1
    5762:	11 f4       	brne	.+4      	; 0x5768 <useRnbData+0x54>
    5764:	80 e0       	ldi	r24, 0x00	; 0
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	02 2e       	mov	r0, r18
    576a:	01 c0       	rjmp	.+2      	; 0x576e <useRnbData+0x5a>
    576c:	88 0f       	add	r24, r24
    576e:	0a 94       	dec	r0
    5770:	ea f7       	brpl	.-6      	; 0x576c <useRnbData+0x58>
    5772:	80 95       	com	r24
    5774:	68 23       	and	r22, r24
			//val=val*(val>0);
			brightMeas[e][s] = val;
			valSum+=val;	
    5776:	c4 0e       	add	r12, r20
    5778:	d5 1e       	adc	r13, r21
    577a:	2f 5f       	subi	r18, 0xFF	; 255
    577c:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t val;
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
    577e:	26 30       	cpi	r18, 0x06	; 6
    5780:	31 05       	cpc	r19, r1
    5782:	49 f7       	brne	.-46     	; 0x5756 <useRnbData+0x42>
    5784:	1c 96       	adiw	r26, 0x0c	; 12
static int16_t processBrightMeas(void){
	int16_t val;
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
    5786:	0a 17       	cp	r16, r26
    5788:	1b 07       	cpc	r17, r27
    578a:	11 f7       	brne	.-60     	; 0x5750 <useRnbData+0x3c>
    578c:	e6 2e       	mov	r14, r22
    578e:	f1 2c       	mov	r15, r1
    5790:	81 2c       	mov	r8, r1
    5792:	91 2c       	mov	r9, r1
    5794:	a1 2c       	mov	r10, r1
    5796:	b1 2c       	mov	r11, r1
    5798:	e0 e0       	ldi	r30, 0x00	; 0
    579a:	40 91 01 24 	lds	r20, 0x2401	; 0x802401 <sensorHealthHistory>
    579e:	50 91 02 24 	lds	r21, 0x2402	; 0x802402 <sensorHealthHistory+0x1>
    57a2:	60 91 03 24 	lds	r22, 0x2403	; 0x802403 <sensorHealthHistory+0x2>
    57a6:	70 91 04 24 	lds	r23, 0x2404	; 0x802404 <sensorHealthHistory+0x3>
	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
    57aa:	0f e0       	ldi	r16, 0x0F	; 15
    57ac:	10 e0       	ldi	r17, 0x00	; 0
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
    57ae:	66 24       	eor	r6, r6
    57b0:	63 94       	inc	r6
    57b2:	71 2c       	mov	r7, r1
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
    57b4:	22 e7       	ldi	r18, 0x72	; 114
    57b6:	22 2e       	mov	r2, r18
    57b8:	28 e0       	ldi	r18, 0x08	; 8
    57ba:	32 2e       	mov	r3, r18
    57bc:	34 c0       	rjmp	.+104    	; 0x5826 <useRnbData+0x112>
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
    57be:	c3 01       	movw	r24, r6
    57c0:	08 2c       	mov	r0, r8
    57c2:	02 c0       	rjmp	.+4      	; 0x57c8 <useRnbData+0xb4>
    57c4:	88 0f       	add	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	0a 94       	dec	r0
    57ca:	e2 f7       	brpl	.-8      	; 0x57c4 <useRnbData+0xb0>
    57cc:	09 2e       	mov	r0, r25
    57ce:	00 0c       	add	r0, r0
    57d0:	aa 0b       	sbc	r26, r26
    57d2:	bb 0b       	sbc	r27, r27
    57d4:	84 0f       	add	r24, r20
    57d6:	95 1f       	adc	r25, r21
    57d8:	a6 1f       	adc	r26, r22
    57da:	b7 1f       	adc	r27, r23
    57dc:	ac 01       	movw	r20, r24
    57de:	bd 01       	movw	r22, r26
    57e0:	80 93 01 24 	sts	0x2401, r24	; 0x802401 <sensorHealthHistory>
    57e4:	90 93 02 24 	sts	0x2402, r25	; 0x802402 <sensorHealthHistory+0x1>
    57e8:	a0 93 03 24 	sts	0x2403, r26	; 0x802403 <sensorHealthHistory+0x2>
    57ec:	b0 93 04 24 	sts	0x2404, r27	; 0x802404 <sensorHealthHistory+0x3>
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
    57f0:	05 2c       	mov	r0, r5
    57f2:	04 c0       	rjmp	.+8      	; 0x57fc <useRnbData+0xe8>
    57f4:	b6 95       	lsr	r27
    57f6:	a7 95       	ror	r26
    57f8:	97 95       	ror	r25
    57fa:	87 95       	ror	r24
    57fc:	0a 94       	dec	r0
    57fe:	d2 f7       	brpl	.-12     	; 0x57f4 <useRnbData+0xe0>
    5800:	8f 70       	andi	r24, 0x0F	; 15
    5802:	99 27       	eor	r25, r25
    5804:	aa 27       	eor	r26, r26
    5806:	bb 27       	eor	r27, r27
    5808:	0f 97       	sbiw	r24, 0x0f	; 15
    580a:	a1 05       	cpc	r26, r1
    580c:	b1 05       	cpc	r27, r1
    580e:	09 f4       	brne	.+2      	; 0x5812 <useRnbData+0xfe>
    5810:	8f c1       	rjmp	.+798    	; 0x5b30 <useRnbData+0x41c>
    5812:	8f ef       	ldi	r24, 0xFF	; 255
    5814:	a8 1a       	sub	r10, r24
    5816:	b8 0a       	sbc	r11, r24
    5818:	94 e0       	ldi	r25, 0x04	; 4
    581a:	89 0e       	add	r8, r25
    581c:	91 1c       	adc	r9, r1
			valSum+=val;	
		}
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
    581e:	a6 e0       	ldi	r26, 0x06	; 6
    5820:	aa 16       	cp	r10, r26
    5822:	b1 04       	cpc	r11, r1
    5824:	39 f1       	breq	.+78     	; 0x5874 <useRnbData+0x160>
		if(allColZeroCheck&(1<<i)){
    5826:	95 01       	movw	r18, r10
    5828:	c7 01       	movw	r24, r14
    582a:	0a 2c       	mov	r0, r10
    582c:	02 c0       	rjmp	.+4      	; 0x5832 <useRnbData+0x11e>
    582e:	95 95       	asr	r25
    5830:	87 95       	ror	r24
    5832:	0a 94       	dec	r0
    5834:	e2 f7       	brpl	.-8      	; 0x582e <useRnbData+0x11a>
			sensorHealthHistory+=(1<<(4*i));
    5836:	58 2c       	mov	r5, r8
		}
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
    5838:	80 fd       	sbrc	r24, 0
    583a:	c1 cf       	rjmp	.-126    	; 0x57be <useRnbData+0xaa>
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
    583c:	c8 01       	movw	r24, r16
    583e:	08 2c       	mov	r0, r8
    5840:	02 c0       	rjmp	.+4      	; 0x5846 <useRnbData+0x132>
    5842:	88 0f       	add	r24, r24
    5844:	99 1f       	adc	r25, r25
    5846:	0a 94       	dec	r0
    5848:	e2 f7       	brpl	.-8      	; 0x5842 <useRnbData+0x12e>
    584a:	80 95       	com	r24
    584c:	90 95       	com	r25
    584e:	09 2e       	mov	r0, r25
    5850:	00 0c       	add	r0, r0
    5852:	aa 0b       	sbc	r26, r26
    5854:	bb 0b       	sbc	r27, r27
    5856:	84 23       	and	r24, r20
    5858:	95 23       	and	r25, r21
    585a:	a6 23       	and	r26, r22
    585c:	b7 23       	and	r27, r23
    585e:	ac 01       	movw	r20, r24
    5860:	bd 01       	movw	r22, r26
    5862:	80 93 01 24 	sts	0x2401, r24	; 0x802401 <sensorHealthHistory>
    5866:	90 93 02 24 	sts	0x2402, r25	; 0x802402 <sensorHealthHistory+0x1>
    586a:	a0 93 03 24 	sts	0x2403, r26	; 0x802403 <sensorHealthHistory+0x2>
    586e:	b0 93 04 24 	sts	0x2404, r27	; 0x802404 <sensorHealthHistory+0x3>
    5872:	be cf       	rjmp	.-132    	; 0x57f0 <useRnbData+0xdc>
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
			sensorHealthHistory&=~(0xF<<(4*i));
			problem = 1;
		}		
	}
	if(problem){
    5874:	ee 23       	and	r30, r30
    5876:	09 f4       	brne	.+2      	; 0x587a <useRnbData+0x166>
    5878:	57 c0       	rjmp	.+174    	; 0x5928 <useRnbData+0x214>
void setRGB(uint8_t r, uint8_t g, uint8_t b);
void setHSV(uint16_t h, uint8_t s, uint8_t v);
void hsvToRGB(uint16_t h, uint8_t s, uint8_t v, uint8_t* r, uint8_t* g, uint8_t* b);

inline void warningLightSequence(void){
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    587a:	44 e6       	ldi	r20, 0x64	; 100
    587c:	64 e6       	ldi	r22, 0x64	; 100
    587e:	80 e0       	ldi	r24, 0x00	; 0
    5880:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    5884:	8c e2       	ldi	r24, 0x2C	; 44
    5886:	91 e0       	ldi	r25, 0x01	; 1
    5888:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    588c:	44 e6       	ldi	r20, 0x64	; 100
    588e:	60 e0       	ldi	r22, 0x00	; 0
    5890:	84 e6       	ldi	r24, 0x64	; 100
    5892:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    5896:	8c e2       	ldi	r24, 0x2C	; 44
    5898:	91 e0       	ldi	r25, 0x01	; 1
    589a:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    589e:	40 e0       	ldi	r20, 0x00	; 0
    58a0:	64 e6       	ldi	r22, 0x64	; 100
    58a2:	84 e6       	ldi	r24, 0x64	; 100
    58a4:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    58a8:	8c e2       	ldi	r24, 0x2C	; 44
    58aa:	91 e0       	ldi	r25, 0x01	; 1
    58ac:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    58b0:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <ledOff>
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    58b4:	44 e6       	ldi	r20, 0x64	; 100
    58b6:	64 e6       	ldi	r22, 0x64	; 100
    58b8:	80 e0       	ldi	r24, 0x00	; 0
    58ba:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    58be:	8c e2       	ldi	r24, 0x2C	; 44
    58c0:	91 e0       	ldi	r25, 0x01	; 1
    58c2:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    58c6:	44 e6       	ldi	r20, 0x64	; 100
    58c8:	60 e0       	ldi	r22, 0x00	; 0
    58ca:	84 e6       	ldi	r24, 0x64	; 100
    58cc:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    58d0:	8c e2       	ldi	r24, 0x2C	; 44
    58d2:	91 e0       	ldi	r25, 0x01	; 1
    58d4:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    58d8:	40 e0       	ldi	r20, 0x00	; 0
    58da:	64 e6       	ldi	r22, 0x64	; 100
    58dc:	84 e6       	ldi	r24, 0x64	; 100
    58de:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    58e2:	8c e2       	ldi	r24, 0x2C	; 44
    58e4:	91 e0       	ldi	r25, 0x01	; 1
    58e6:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    58ea:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <ledOff>
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    58ee:	44 e6       	ldi	r20, 0x64	; 100
    58f0:	64 e6       	ldi	r22, 0x64	; 100
    58f2:	80 e0       	ldi	r24, 0x00	; 0
    58f4:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    58f8:	8c e2       	ldi	r24, 0x2C	; 44
    58fa:	91 e0       	ldi	r25, 0x01	; 1
    58fc:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    5900:	44 e6       	ldi	r20, 0x64	; 100
    5902:	60 e0       	ldi	r22, 0x00	; 0
    5904:	84 e6       	ldi	r24, 0x64	; 100
    5906:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    590a:	8c e2       	ldi	r24, 0x2C	; 44
    590c:	91 e0       	ldi	r25, 0x01	; 1
    590e:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    5912:	40 e0       	ldi	r20, 0x00	; 0
    5914:	64 e6       	ldi	r22, 0x64	; 100
    5916:	84 e6       	ldi	r24, 0x64	; 100
    5918:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    591c:	8c e2       	ldi	r24, 0x2C	; 44
    591e:	91 e0       	ldi	r25, 0x01	; 1
    5920:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    5924:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <ledOff>
	//uint32_t start = get_time();
	int16_t matrixSum = processBrightMeas();
	//if(rand_byte()%2) broadcastBrightMeas();
	float bearing, heading;
	float error;
	calculate_bearing_and_heading(&bearing, &heading);
    5928:	be 01       	movw	r22, r28
    592a:	6f 5f       	subi	r22, 0xFF	; 255
    592c:	7f 4f       	sbci	r23, 0xFF	; 255
    592e:	ce 01       	movw	r24, r28
    5930:	05 96       	adiw	r24, 0x05	; 5
    5932:	0e 94 6d 2a 	call	0x54da	; 0x54da <calculate_bearing_and_heading>
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
    5936:	b6 01       	movw	r22, r12
    5938:	dd 0c       	add	r13, r13
    593a:	88 0b       	sbc	r24, r24
    593c:	99 0b       	sbc	r25, r25
    593e:	0e 94 b5 48 	call	0x916a	; 0x916a <__floatsisf>
    5942:	20 e2       	ldi	r18, 0x20	; 32
    5944:	3b eb       	ldi	r19, 0xBB	; 187
    5946:	44 e0       	ldi	r20, 0x04	; 4
    5948:	50 e4       	ldi	r21, 0x40	; 64
    594a:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    594e:	0e 94 fe 24 	call	0x49fc	; 0x49fc <magicRangeFunc>
    5952:	4b 01       	movw	r8, r22
    5954:	5c 01       	movw	r10, r24
	if(initialRange!=0&&!isnanf(initialRange)){	
    5956:	20 e0       	ldi	r18, 0x00	; 0
    5958:	30 e0       	ldi	r19, 0x00	; 0
    595a:	a9 01       	movw	r20, r18
    595c:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__cmpsf2>
    5960:	88 23       	and	r24, r24
    5962:	09 f4       	brne	.+2      	; 0x5966 <useRnbData+0x252>
    5964:	ca c0       	rjmp	.+404    	; 0x5afa <useRnbData+0x3e6>
    5966:	a5 01       	movw	r20, r10
    5968:	94 01       	movw	r18, r8
    596a:	c5 01       	movw	r24, r10
    596c:	b4 01       	movw	r22, r8
    596e:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__unordsf2>
    5972:	81 11       	cpse	r24, r1
    5974:	c2 c0       	rjmp	.+388    	; 0x5afa <useRnbData+0x3e6>
		float range = calculate_range(initialRange, bearing, heading);
    5976:	89 81       	ldd	r24, Y+1	; 0x01
    5978:	9a 81       	ldd	r25, Y+2	; 0x02
    597a:	ab 81       	ldd	r26, Y+3	; 0x03
    597c:	bc 81       	ldd	r27, Y+4	; 0x04
    597e:	89 87       	std	Y+9, r24	; 0x09
    5980:	9a 87       	std	Y+10, r25	; 0x0a
    5982:	ab 87       	std	Y+11, r26	; 0x0b
    5984:	bc 87       	std	Y+12, r27	; 0x0c
    5986:	4d 80       	ldd	r4, Y+5	; 0x05
    5988:	5e 80       	ldd	r5, Y+6	; 0x06
    598a:	6f 80       	ldd	r6, Y+7	; 0x07
    598c:	78 84       	ldd	r7, Y+8	; 0x08
    598e:	7c 01       	movw	r14, r24
    5990:	8d 01       	movw	r16, r26
    5992:	a3 01       	movw	r20, r6
    5994:	92 01       	movw	r18, r4
    5996:	c5 01       	movw	r24, r10
    5998:	b4 01       	movw	r22, r8
    599a:	0e 94 66 25 	call	0x4acc	; 0x4acc <calculate_range>
    599e:	4b 01       	movw	r8, r22
    59a0:	5c 01       	movw	r10, r24
		if(!isnanf(range)){
    59a2:	9b 01       	movw	r18, r22
    59a4:	ac 01       	movw	r20, r24
    59a6:	0e 94 c1 4b 	call	0x9782	; 0x9782 <__unordsf2>
    59aa:	81 11       	cpse	r24, r1
    59ac:	a6 c0       	rjmp	.+332    	; 0x5afa <useRnbData+0x3e6>
			if(range<2*DROPLET_RADIUS) range=46;
    59ae:	20 e0       	ldi	r18, 0x00	; 0
    59b0:	30 e0       	ldi	r19, 0x00	; 0
    59b2:	40 e3       	ldi	r20, 0x30	; 48
    59b4:	52 e4       	ldi	r21, 0x42	; 66
    59b6:	c5 01       	movw	r24, r10
    59b8:	b4 01       	movw	r22, r8
    59ba:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__cmpsf2>
    59be:	87 fd       	sbrc	r24, 7
    59c0:	e3 c0       	rjmp	.+454    	; 0x5b88 <useRnbData+0x474>
			error = calculate_error(range, bearing, heading);
    59c2:	a3 01       	movw	r20, r6
    59c4:	92 01       	movw	r18, r4
    59c6:	c5 01       	movw	r24, r10
    59c8:	b4 01       	movw	r22, r8
    59ca:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <calculate_error>
    59ce:	6b 01       	movw	r12, r22
    59d0:	7c 01       	movw	r14, r24
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    59d2:	20 e0       	ldi	r18, 0x00	; 0
    59d4:	30 e0       	ldi	r19, 0x00	; 0
    59d6:	4c ed       	ldi	r20, 0xDC	; 220
    59d8:	52 e4       	ldi	r21, 0x42	; 66
    59da:	c5 01       	movw	r24, r10
    59dc:	b4 01       	movw	r22, r8
    59de:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__cmpsf2>
    59e2:	87 fd       	sbrc	r24, 7
    59e4:	1e c1       	rjmp	.+572    	; 0x5c22 <useRnbData+0x50e>
    59e6:	20 e0       	ldi	r18, 0x00	; 0
    59e8:	30 e0       	ldi	r19, 0x00	; 0
    59ea:	48 e4       	ldi	r20, 0x48	; 72
    59ec:	53 e4       	ldi	r21, 0x43	; 67
    59ee:	c5 01       	movw	r24, r10
    59f0:	b4 01       	movw	r22, r8
    59f2:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__cmpsf2>
    59f6:	87 fd       	sbrc	r24, 7
    59f8:	e4 c0       	rjmp	.+456    	; 0x5bc2 <useRnbData+0x4ae>
    59fa:	20 e0       	ldi	r18, 0x00	; 0
    59fc:	30 e0       	ldi	r19, 0x00	; 0
    59fe:	48 e4       	ldi	r20, 0x48	; 72
    5a00:	53 e4       	ldi	r21, 0x43	; 67
    5a02:	c5 01       	movw	r24, r10
    5a04:	b4 01       	movw	r22, r8
    5a06:	0e 94 2d 4a 	call	0x945a	; 0x945a <__gesf2>
    5a0a:	18 16       	cp	r1, r24
    5a0c:	0c f4       	brge	.+2      	; 0x5a10 <useRnbData+0x2fc>
    5a0e:	75 c0       	rjmp	.+234    	; 0x5afa <useRnbData+0x3e6>
				return;
			}else{
				//printf("\r\n");
			}
			
			last_good_rnb.id = rnbCmdID;
    5a10:	80 91 bf 26 	lds	r24, 0x26BF	; 0x8026bf <rnbCmdID>
    5a14:	90 91 c0 26 	lds	r25, 0x26C0	; 0x8026c0 <rnbCmdID+0x1>
    5a18:	80 93 cc 24 	sts	0x24CC, r24	; 0x8024cc <last_good_rnb+0x6>
    5a1c:	90 93 cd 24 	sts	0x24CD, r25	; 0x8024cd <last_good_rnb+0x7>
			last_good_rnb.range		= (uint16_t)(range);
    5a20:	c5 01       	movw	r24, r10
    5a22:	b4 01       	movw	r22, r8
    5a24:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    5a28:	60 93 c6 24 	sts	0x24C6, r22	; 0x8024c6 <last_good_rnb>
    5a2c:	70 93 c7 24 	sts	0x24C7, r23	; 0x8024c7 <last_good_rnb+0x1>
inline int16_t prettyAngleDeg(int16_t angle){
	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
}

inline float prettyAngle(float angle){
	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) + M_PI );
    5a30:	20 e0       	ldi	r18, 0x00	; 0
    5a32:	30 e0       	ldi	r19, 0x00	; 0
    5a34:	a9 01       	movw	r20, r18
    5a36:	c3 01       	movw	r24, r6
    5a38:	b2 01       	movw	r22, r4
    5a3a:	0e 94 2d 4a 	call	0x945a	; 0x945a <__gesf2>
    5a3e:	2b ed       	ldi	r18, 0xDB	; 219
    5a40:	3f e0       	ldi	r19, 0x0F	; 15
    5a42:	49 e4       	ldi	r20, 0x49	; 73
    5a44:	50 e4       	ldi	r21, 0x40	; 64
    5a46:	87 fd       	sbrc	r24, 7
    5a48:	c8 c0       	rjmp	.+400    	; 0x5bda <useRnbData+0x4c6>
    5a4a:	c3 01       	movw	r24, r6
    5a4c:	b2 01       	movw	r22, r4
    5a4e:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    5a52:	2b ed       	ldi	r18, 0xDB	; 219
    5a54:	3f e0       	ldi	r19, 0x0F	; 15
    5a56:	49 ec       	ldi	r20, 0xC9	; 201
    5a58:	50 e4       	ldi	r21, 0x40	; 64
    5a5a:	0e 94 fb 48 	call	0x91f6	; 0x91f6 <fmod>
    5a5e:	2b ed       	ldi	r18, 0xDB	; 219
    5a60:	3f e0       	ldi	r19, 0x0F	; 15
    5a62:	49 e4       	ldi	r20, 0x49	; 73
    5a64:	50 e4       	ldi	r21, 0x40	; 64
    5a66:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
			last_good_rnb.bearing	= (int16_t)radToDeg(bearing);
    5a6a:	2b ed       	ldi	r18, 0xDB	; 219
    5a6c:	3f e0       	ldi	r19, 0x0F	; 15
    5a6e:	49 e4       	ldi	r20, 0x49	; 73
    5a70:	50 e4       	ldi	r21, 0x40	; 64
    5a72:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    5a76:	20 e0       	ldi	r18, 0x00	; 0
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	44 e3       	ldi	r20, 0x34	; 52
    5a7c:	53 e4       	ldi	r21, 0x43	; 67
    5a7e:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5a82:	0e 94 7d 48 	call	0x90fa	; 0x90fa <__fixsfsi>
    5a86:	60 93 c8 24 	sts	0x24C8, r22	; 0x8024c8 <last_good_rnb+0x2>
    5a8a:	70 93 c9 24 	sts	0x24C9, r23	; 0x8024c9 <last_good_rnb+0x3>
    5a8e:	20 e0       	ldi	r18, 0x00	; 0
    5a90:	30 e0       	ldi	r19, 0x00	; 0
    5a92:	a9 01       	movw	r20, r18
    5a94:	69 85       	ldd	r22, Y+9	; 0x09
    5a96:	7a 85       	ldd	r23, Y+10	; 0x0a
    5a98:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a9c:	0e 94 2d 4a 	call	0x945a	; 0x945a <__gesf2>
    5aa0:	2b ed       	ldi	r18, 0xDB	; 219
    5aa2:	3f e0       	ldi	r19, 0x0F	; 15
    5aa4:	49 e4       	ldi	r20, 0x49	; 73
    5aa6:	50 e4       	ldi	r21, 0x40	; 64
    5aa8:	87 fd       	sbrc	r24, 7
    5aaa:	a8 c0       	rjmp	.+336    	; 0x5bfc <useRnbData+0x4e8>
    5aac:	69 85       	ldd	r22, Y+9	; 0x09
    5aae:	7a 85       	ldd	r23, Y+10	; 0x0a
    5ab0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ab2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ab4:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    5ab8:	2b ed       	ldi	r18, 0xDB	; 219
    5aba:	3f e0       	ldi	r19, 0x0F	; 15
    5abc:	49 ec       	ldi	r20, 0xC9	; 201
    5abe:	50 e4       	ldi	r21, 0x40	; 64
    5ac0:	0e 94 fb 48 	call	0x91f6	; 0x91f6 <fmod>
    5ac4:	2b ed       	ldi	r18, 0xDB	; 219
    5ac6:	3f e0       	ldi	r19, 0x0F	; 15
    5ac8:	49 e4       	ldi	r20, 0x49	; 73
    5aca:	50 e4       	ldi	r21, 0x40	; 64
    5acc:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
			last_good_rnb.heading	= (int16_t)radToDeg(heading);
    5ad0:	2b ed       	ldi	r18, 0xDB	; 219
    5ad2:	3f e0       	ldi	r19, 0x0F	; 15
    5ad4:	49 e4       	ldi	r20, 0x49	; 73
    5ad6:	50 e4       	ldi	r21, 0x40	; 64
    5ad8:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    5adc:	20 e0       	ldi	r18, 0x00	; 0
    5ade:	30 e0       	ldi	r19, 0x00	; 0
    5ae0:	44 e3       	ldi	r20, 0x34	; 52
    5ae2:	53 e4       	ldi	r21, 0x43	; 67
    5ae4:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    5ae8:	0e 94 7d 48 	call	0x90fa	; 0x90fa <__fixsfsi>
    5aec:	60 93 ca 24 	sts	0x24CA, r22	; 0x8024ca <last_good_rnb+0x4>
    5af0:	70 93 cb 24 	sts	0x24CB, r23	; 0x8024cb <last_good_rnb+0x5>
			//print_brightMeas();
			rnb_updated=1;
    5af4:	81 e0       	ldi	r24, 0x01	; 1
    5af6:	80 93 d0 24 	sts	0x24D0, r24	; 0x8024d0 <rnb_updated>
		}
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5afa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5afc:	f8 94       	cli
		processing_rnb_flag=0;
    5afe:	10 92 23 25 	sts	0x2523, r1	; 0x802523 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5b02:	8f bf       	out	0x3f, r24	; 63
	}
}
    5b04:	2c 96       	adiw	r28, 0x0c	; 12
    5b06:	cd bf       	out	0x3d, r28	; 61
    5b08:	de bf       	out	0x3e, r29	; 62
    5b0a:	df 91       	pop	r29
    5b0c:	cf 91       	pop	r28
    5b0e:	1f 91       	pop	r17
    5b10:	0f 91       	pop	r16
    5b12:	ff 90       	pop	r15
    5b14:	ef 90       	pop	r14
    5b16:	df 90       	pop	r13
    5b18:	cf 90       	pop	r12
    5b1a:	bf 90       	pop	r11
    5b1c:	af 90       	pop	r10
    5b1e:	9f 90       	pop	r9
    5b20:	8f 90       	pop	r8
    5b22:	7f 90       	pop	r7
    5b24:	6f 90       	pop	r6
    5b26:	5f 90       	pop	r5
    5b28:	4f 90       	pop	r4
    5b2a:	3f 90       	pop	r3
    5b2c:	2f 90       	pop	r2
    5b2e:	08 95       	ret
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
    5b30:	3f 93       	push	r19
    5b32:	2f 93       	push	r18
    5b34:	3f 92       	push	r3
    5b36:	2f 92       	push	r2
    5b38:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
			sensorHealthHistory&=~(0xF<<(4*i));
    5b3c:	c8 01       	movw	r24, r16
    5b3e:	02 c0       	rjmp	.+4      	; 0x5b44 <useRnbData+0x430>
    5b40:	88 0f       	add	r24, r24
    5b42:	99 1f       	adc	r25, r25
    5b44:	5a 94       	dec	r5
    5b46:	e2 f7       	brpl	.-8      	; 0x5b40 <useRnbData+0x42c>
    5b48:	80 95       	com	r24
    5b4a:	90 95       	com	r25
    5b4c:	09 2e       	mov	r0, r25
    5b4e:	00 0c       	add	r0, r0
    5b50:	aa 0b       	sbc	r26, r26
    5b52:	bb 0b       	sbc	r27, r27
    5b54:	40 91 01 24 	lds	r20, 0x2401	; 0x802401 <sensorHealthHistory>
    5b58:	50 91 02 24 	lds	r21, 0x2402	; 0x802402 <sensorHealthHistory+0x1>
    5b5c:	60 91 03 24 	lds	r22, 0x2403	; 0x802403 <sensorHealthHistory+0x2>
    5b60:	70 91 04 24 	lds	r23, 0x2404	; 0x802404 <sensorHealthHistory+0x3>
    5b64:	48 23       	and	r20, r24
    5b66:	59 23       	and	r21, r25
    5b68:	6a 23       	and	r22, r26
    5b6a:	7b 23       	and	r23, r27
    5b6c:	40 93 01 24 	sts	0x2401, r20	; 0x802401 <sensorHealthHistory>
    5b70:	50 93 02 24 	sts	0x2402, r21	; 0x802402 <sensorHealthHistory+0x1>
    5b74:	60 93 03 24 	sts	0x2403, r22	; 0x802403 <sensorHealthHistory+0x2>
    5b78:	70 93 04 24 	sts	0x2404, r23	; 0x802404 <sensorHealthHistory+0x3>
    5b7c:	0f 90       	pop	r0
    5b7e:	0f 90       	pop	r0
    5b80:	0f 90       	pop	r0
    5b82:	0f 90       	pop	r0
			problem = 1;
    5b84:	e1 e0       	ldi	r30, 0x01	; 1
    5b86:	45 ce       	rjmp	.-886    	; 0x5812 <useRnbData+0xfe>
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
	if(initialRange!=0&&!isnanf(initialRange)){	
		float range = calculate_range(initialRange, bearing, heading);
		if(!isnanf(range)){
			if(range<2*DROPLET_RADIUS) range=46;
			error = calculate_error(range, bearing, heading);
    5b88:	e9 84       	ldd	r14, Y+9	; 0x09
    5b8a:	fa 84       	ldd	r15, Y+10	; 0x0a
    5b8c:	0b 85       	ldd	r16, Y+11	; 0x0b
    5b8e:	1c 85       	ldd	r17, Y+12	; 0x0c
    5b90:	a3 01       	movw	r20, r6
    5b92:	92 01       	movw	r18, r4
    5b94:	60 e0       	ldi	r22, 0x00	; 0
    5b96:	70 e0       	ldi	r23, 0x00	; 0
    5b98:	88 e3       	ldi	r24, 0x38	; 56
    5b9a:	92 e4       	ldi	r25, 0x42	; 66
    5b9c:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <calculate_error>
    5ba0:	6b 01       	movw	r12, r22
    5ba2:	7c 01       	movw	r14, r24
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    5ba4:	20 e0       	ldi	r18, 0x00	; 0
    5ba6:	30 e0       	ldi	r19, 0x00	; 0
    5ba8:	40 e8       	ldi	r20, 0x80	; 128
    5baa:	5f e3       	ldi	r21, 0x3F	; 63
    5bac:	0e 94 2d 4a 	call	0x945a	; 0x945a <__gesf2>
    5bb0:	18 16       	cp	r1, r24
    5bb2:	0c f4       	brge	.+2      	; 0x5bb6 <useRnbData+0x4a2>
    5bb4:	a2 cf       	rjmp	.-188    	; 0x5afa <useRnbData+0x3e6>
	calculate_bearing_and_heading(&bearing, &heading);
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
	if(initialRange!=0&&!isnanf(initialRange)){	
		float range = calculate_range(initialRange, bearing, heading);
		if(!isnanf(range)){
			if(range<2*DROPLET_RADIUS) range=46;
    5bb6:	81 2c       	mov	r8, r1
    5bb8:	91 2c       	mov	r9, r1
    5bba:	88 e3       	ldi	r24, 0x38	; 56
    5bbc:	a8 2e       	mov	r10, r24
    5bbe:	82 e4       	ldi	r24, 0x42	; 66
    5bc0:	b8 2e       	mov	r11, r24
			error = calculate_error(range, bearing, heading);
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    5bc2:	20 e0       	ldi	r18, 0x00	; 0
    5bc4:	30 e0       	ldi	r19, 0x00	; 0
    5bc6:	40 ec       	ldi	r20, 0xC0	; 192
    5bc8:	5f e3       	ldi	r21, 0x3F	; 63
    5bca:	c7 01       	movw	r24, r14
    5bcc:	b6 01       	movw	r22, r12
    5bce:	0e 94 2d 4a 	call	0x945a	; 0x945a <__gesf2>
    5bd2:	18 16       	cp	r1, r24
    5bd4:	0c f0       	brlt	.+2      	; 0x5bd8 <useRnbData+0x4c4>
    5bd6:	11 cf       	rjmp	.-478    	; 0x59fa <useRnbData+0x2e6>
    5bd8:	90 cf       	rjmp	.-224    	; 0x5afa <useRnbData+0x3e6>
    5bda:	c3 01       	movw	r24, r6
    5bdc:	b2 01       	movw	r22, r4
    5bde:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    5be2:	2b ed       	ldi	r18, 0xDB	; 219
    5be4:	3f e0       	ldi	r19, 0x0F	; 15
    5be6:	49 ec       	ldi	r20, 0xC9	; 201
    5be8:	50 e4       	ldi	r21, 0x40	; 64
    5bea:	0e 94 fb 48 	call	0x91f6	; 0x91f6 <fmod>
    5bee:	2b ed       	ldi	r18, 0xDB	; 219
    5bf0:	3f e0       	ldi	r19, 0x0F	; 15
    5bf2:	49 e4       	ldi	r20, 0x49	; 73
    5bf4:	50 e4       	ldi	r21, 0x40	; 64
    5bf6:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    5bfa:	37 cf       	rjmp	.-402    	; 0x5a6a <useRnbData+0x356>
    5bfc:	69 85       	ldd	r22, Y+9	; 0x09
    5bfe:	7a 85       	ldd	r23, Y+10	; 0x0a
    5c00:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c02:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c04:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    5c08:	2b ed       	ldi	r18, 0xDB	; 219
    5c0a:	3f e0       	ldi	r19, 0x0F	; 15
    5c0c:	49 ec       	ldi	r20, 0xC9	; 201
    5c0e:	50 e4       	ldi	r21, 0x40	; 64
    5c10:	0e 94 fb 48 	call	0x91f6	; 0x91f6 <fmod>
    5c14:	2b ed       	ldi	r18, 0xDB	; 219
    5c16:	3f e0       	ldi	r19, 0x0F	; 15
    5c18:	49 e4       	ldi	r20, 0x49	; 73
    5c1a:	50 e4       	ldi	r21, 0x40	; 64
    5c1c:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    5c20:	57 cf       	rjmp	.-338    	; 0x5ad0 <useRnbData+0x3bc>
    5c22:	20 e0       	ldi	r18, 0x00	; 0
    5c24:	30 e0       	ldi	r19, 0x00	; 0
    5c26:	40 e8       	ldi	r20, 0x80	; 128
    5c28:	5f e3       	ldi	r21, 0x3F	; 63
    5c2a:	c7 01       	movw	r24, r14
    5c2c:	b6 01       	movw	r22, r12
    5c2e:	0e 94 2d 4a 	call	0x945a	; 0x945a <__gesf2>
    5c32:	18 16       	cp	r1, r24
    5c34:	0c f0       	brlt	.+2      	; 0x5c38 <useRnbData+0x524>
    5c36:	d7 ce       	rjmp	.-594    	; 0x59e6 <useRnbData+0x2d2>
    5c38:	60 cf       	rjmp	.-320    	; 0x5afa <useRnbData+0x3e6>

00005c3a <irRangeMeas>:
		warningLightSequence();
	}	
	return valSum;
}

void irRangeMeas(uint32_t rnbCmdSentTime){
    5c3a:	cf 92       	push	r12
    5c3c:	df 92       	push	r13
    5c3e:	ef 92       	push	r14
    5c40:	ff 92       	push	r15
    5c42:	1f 93       	push	r17
    5c44:	cf 93       	push	r28
    5c46:	df 93       	push	r29
    5c48:	28 e0       	ldi	r18, 0x08	; 8
    5c4a:	c2 2e       	mov	r12, r18
    5c4c:	d1 2c       	mov	r13, r1
    5c4e:	e1 2c       	mov	r14, r1
    5c50:	f1 2c       	mov	r15, r1
    5c52:	c6 1a       	sub	r12, r22
    5c54:	d7 0a       	sbc	r13, r23
    5c56:	e8 0a       	sbc	r14, r24
    5c58:	f9 0a       	sbc	r15, r25
	//int32_t times[16] = {0};
	//times[0] = get_time();
	while((getTime()-rnbCmdSentTime+8)<POST_BROADCAST_DELAY);
    5c5a:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5c5e:	dc 01       	movw	r26, r24
    5c60:	cb 01       	movw	r24, r22
    5c62:	8c 0d       	add	r24, r12
    5c64:	9d 1d       	adc	r25, r13
    5c66:	ae 1d       	adc	r26, r14
    5c68:	bf 1d       	adc	r27, r15
    5c6a:	4e 97       	sbiw	r24, 0x1e	; 30
    5c6c:	a1 05       	cpc	r26, r1
    5c6e:	b1 05       	cpc	r27, r1
    5c70:	a0 f3       	brcs	.-24     	; 0x5c5a <irRangeMeas+0x20>
	//times[1] = get_time();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    5c72:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5c74:	f8 94       	cli
		uint32_t pre_sync_op = getTime();
    5c76:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5c7a:	6b 01       	movw	r12, r22
    5c7c:	7c 01       	movw	r14, r24
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
    5c7e:	06 c0       	rjmp	.+12     	; 0x5c8c <irRangeMeas+0x52>
    5c80:	8f e9       	ldi	r24, 0x9F	; 159
    5c82:	9f e0       	ldi	r25, 0x0F	; 15
    5c84:	01 97       	sbiw	r24, 0x01	; 1
    5c86:	f1 f7       	brne	.-4      	; 0x5c84 <irRangeMeas+0x4a>
    5c88:	00 c0       	rjmp	.+0      	; 0x5c8a <irRangeMeas+0x50>
    5c8a:	00 00       	nop
    5c8c:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5c90:	dc 01       	movw	r26, r24
    5c92:	cb 01       	movw	r24, r22
    5c94:	8c 19       	sub	r24, r12
    5c96:	9d 09       	sbc	r25, r13
    5c98:	ae 09       	sbc	r26, r14
    5c9a:	bf 09       	sbc	r27, r15
    5c9c:	02 97       	sbiw	r24, 0x02	; 2
    5c9e:	a1 05       	cpc	r26, r1
    5ca0:	b1 05       	cpc	r27, r1
    5ca2:	70 f3       	brcs	.-36     	; 0x5c80 <irRangeMeas+0x46>
    5ca4:	c9 eb       	ldi	r28, 0xB9	; 185
    5ca6:	d3 e2       	ldi	r29, 0x23	; 35
		//times[2] = get_time();
		for(uint8_t emitter_dir = 0; emitter_dir < 6; emitter_dir++){
			pre_sync_op = getTime();
    5ca8:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5cac:	6b 01       	movw	r12, r22
    5cae:	7c 01       	movw	r14, r24
			//times[2*emitter_dir+3] = pre_sync_op;
			while((getTime() - pre_sync_op) < (TIME_FOR_GET_IR_VALS-TIME_FOR_IR_MEAS)/2) delay_us(500);
    5cb0:	06 c0       	rjmp	.+12     	; 0x5cbe <irRangeMeas+0x84>
    5cb2:	8f e9       	ldi	r24, 0x9F	; 159
    5cb4:	9f e0       	ldi	r25, 0x0F	; 15
    5cb6:	01 97       	sbiw	r24, 0x01	; 1
    5cb8:	f1 f7       	brne	.-4      	; 0x5cb6 <irRangeMeas+0x7c>
    5cba:	00 c0       	rjmp	.+0      	; 0x5cbc <irRangeMeas+0x82>
    5cbc:	00 00       	nop
    5cbe:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5cc2:	dc 01       	movw	r26, r24
    5cc4:	cb 01       	movw	r24, r22
    5cc6:	8c 19       	sub	r24, r12
    5cc8:	9d 09       	sbc	r25, r13
    5cca:	ae 09       	sbc	r26, r14
    5ccc:	bf 09       	sbc	r27, r15
    5cce:	02 97       	sbiw	r24, 0x02	; 2
    5cd0:	a1 05       	cpc	r26, r1
    5cd2:	b1 05       	cpc	r27, r1
    5cd4:	70 f3       	brcs	.-36     	; 0x5cb2 <irRangeMeas+0x78>
			getIrSensors(brightMeas[emitter_dir] , 9); //11
    5cd6:	69 e0       	ldi	r22, 0x09	; 9
    5cd8:	ce 01       	movw	r24, r28
    5cda:	0e 94 de 1c 	call	0x39bc	; 0x39bc <getIrSensors>
			//times[2*emitter_dir+4] = get_time();			
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);		
    5cde:	06 c0       	rjmp	.+12     	; 0x5cec <irRangeMeas+0xb2>
    5ce0:	8f e9       	ldi	r24, 0x9F	; 159
    5ce2:	9f e0       	ldi	r25, 0x0F	; 15
    5ce4:	01 97       	sbiw	r24, 0x01	; 1
    5ce6:	f1 f7       	brne	.-4      	; 0x5ce4 <irRangeMeas+0xaa>
    5ce8:	00 c0       	rjmp	.+0      	; 0x5cea <irRangeMeas+0xb0>
    5cea:	00 00       	nop
    5cec:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5cf0:	dc 01       	movw	r26, r24
    5cf2:	cb 01       	movw	r24, r22
    5cf4:	8c 19       	sub	r24, r12
    5cf6:	9d 09       	sbc	r25, r13
    5cf8:	ae 09       	sbc	r26, r14
    5cfa:	bf 09       	sbc	r27, r15
    5cfc:	40 97       	sbiw	r24, 0x10	; 16
    5cfe:	a1 05       	cpc	r26, r1
    5d00:	b1 05       	cpc	r27, r1
    5d02:	70 f3       	brcs	.-36     	; 0x5ce0 <irRangeMeas+0xa6>
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
    5d04:	8a e0       	ldi	r24, 0x0A	; 10
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    5d0c:	2c 96       	adiw	r28, 0x0c	; 12
	//times[1] = get_time();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
		uint32_t pre_sync_op = getTime();
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
		//times[2] = get_time();
		for(uint8_t emitter_dir = 0; emitter_dir < 6; emitter_dir++){
    5d0e:	94 e2       	ldi	r25, 0x24	; 36
    5d10:	c1 30       	cpi	r28, 0x01	; 1
    5d12:	d9 07       	cpc	r29, r25
    5d14:	49 f6       	brne	.-110    	; 0x5ca8 <irRangeMeas+0x6e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5d16:	1f bf       	out	0x3f, r17	; 63
			//times[2*emitter_dir+4] = get_time();			
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);		
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
}
    5d18:	df 91       	pop	r29
    5d1a:	cf 91       	pop	r28
    5d1c:	1f 91       	pop	r17
    5d1e:	ff 90       	pop	r15
    5d20:	ef 90       	pop	r14
    5d22:	df 90       	pop	r13
    5d24:	cf 90       	pop	r12
    5d26:	08 95       	ret

00005d28 <irRangeBlast>:

void irRangeBlast(uint32_t rnbCmdSentTime, uint8_t power __attribute__ ((unused))){
    5d28:	cf 92       	push	r12
    5d2a:	df 92       	push	r13
    5d2c:	ef 92       	push	r14
    5d2e:	ff 92       	push	r15
    5d30:	0f 93       	push	r16
    5d32:	1f 93       	push	r17
    5d34:	cf 93       	push	r28
    5d36:	df 93       	push	r29
    5d38:	6b 01       	movw	r12, r22
    5d3a:	7c 01       	movw	r14, r24
	//int32_t times[16] = {0};
	//times[0] = get_time();
	while((getTime() - rnbCmdSentTime) < POST_BROADCAST_DELAY) delay_us(500);
    5d3c:	06 c0       	rjmp	.+12     	; 0x5d4a <irRangeBlast+0x22>
    5d3e:	8f e9       	ldi	r24, 0x9F	; 159
    5d40:	9f e0       	ldi	r25, 0x0F	; 15
    5d42:	01 97       	sbiw	r24, 0x01	; 1
    5d44:	f1 f7       	brne	.-4      	; 0x5d42 <irRangeBlast+0x1a>
    5d46:	00 c0       	rjmp	.+0      	; 0x5d48 <irRangeBlast+0x20>
    5d48:	00 00       	nop
    5d4a:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5d4e:	dc 01       	movw	r26, r24
    5d50:	cb 01       	movw	r24, r22
    5d52:	8c 19       	sub	r24, r12
    5d54:	9d 09       	sbc	r25, r13
    5d56:	ae 09       	sbc	r26, r14
    5d58:	bf 09       	sbc	r27, r15
    5d5a:	4e 97       	sbiw	r24, 0x1e	; 30
    5d5c:	a1 05       	cpc	r26, r1
    5d5e:	b1 05       	cpc	r27, r1
    5d60:	70 f3       	brcs	.-36     	; 0x5d3e <irRangeBlast+0x16>
	//times[1] = get_time();
	uint32_t pre_sync_op = getTime();
    5d62:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5d66:	6b 01       	movw	r12, r22
    5d68:	7c 01       	movw	r14, r24
	uint16_t prevPower = curr_ir_power;
    5d6a:	c0 91 cf 26 	lds	r28, 0x26CF	; 0x8026cf <curr_ir_power>
    5d6e:	d0 91 d0 26 	lds	r29, 0x26D0	; 0x8026d0 <curr_ir_power+0x1>
	setAllirPowers(256);	
    5d72:	80 e0       	ldi	r24, 0x00	; 0
    5d74:	91 e0       	ldi	r25, 0x01	; 1
    5d76:	0e 94 3c 1c 	call	0x3878	; 0x3878 <setAllirPowers>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    5d7a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5d7c:	f8 94       	cli
    5d7e:	06 c0       	rjmp	.+12     	; 0x5d8c <irRangeBlast+0x64>
    5d80:	8f e9       	ldi	r24, 0x9F	; 159
    5d82:	9f e0       	ldi	r25, 0x0F	; 15
    5d84:	01 97       	sbiw	r24, 0x01	; 1
    5d86:	f1 f7       	brne	.-4      	; 0x5d84 <irRangeBlast+0x5c>
    5d88:	00 c0       	rjmp	.+0      	; 0x5d8a <irRangeBlast+0x62>
    5d8a:	00 00       	nop
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
    5d8c:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5d90:	dc 01       	movw	r26, r24
    5d92:	cb 01       	movw	r24, r22
    5d94:	8c 19       	sub	r24, r12
    5d96:	9d 09       	sbc	r25, r13
    5d98:	ae 09       	sbc	r26, r14
    5d9a:	bf 09       	sbc	r27, r15
    5d9c:	02 97       	sbiw	r24, 0x02	; 2
    5d9e:	a1 05       	cpc	r26, r1
    5da0:	b1 05       	cpc	r27, r1
    5da2:	70 f3       	brcs	.-36     	; 0x5d80 <irRangeBlast+0x58>
    5da4:	00 e0       	ldi	r16, 0x00	; 0
		//times[2] = get_time();
		for(uint8_t dir = 0; dir < 6; dir++){
			pre_sync_op = getTime();
    5da6:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5daa:	6b 01       	movw	r12, r22
    5dac:	7c 01       	movw	r14, r24
			//set_red_led(255);
			//times[2*dir+3] = pre_sync_op;			
			irLedOn(dir);
    5dae:	80 2f       	mov	r24, r16
    5db0:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <irLedOn>
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);
    5db4:	06 c0       	rjmp	.+12     	; 0x5dc2 <irRangeBlast+0x9a>
    5db6:	8f e9       	ldi	r24, 0x9F	; 159
    5db8:	9f e0       	ldi	r25, 0x0F	; 15
    5dba:	01 97       	sbiw	r24, 0x01	; 1
    5dbc:	f1 f7       	brne	.-4      	; 0x5dba <irRangeBlast+0x92>
    5dbe:	00 c0       	rjmp	.+0      	; 0x5dc0 <irRangeBlast+0x98>
    5dc0:	00 00       	nop
    5dc2:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5dc6:	dc 01       	movw	r26, r24
    5dc8:	cb 01       	movw	r24, r22
    5dca:	8c 19       	sub	r24, r12
    5dcc:	9d 09       	sbc	r25, r13
    5dce:	ae 09       	sbc	r26, r14
    5dd0:	bf 09       	sbc	r27, r15
    5dd2:	40 97       	sbiw	r24, 0x10	; 16
    5dd4:	a1 05       	cpc	r26, r1
    5dd6:	b1 05       	cpc	r27, r1
    5dd8:	70 f3       	brcs	.-36     	; 0x5db6 <irRangeBlast+0x8e>
			irLedOff(dir);
    5dda:	80 2f       	mov	r24, r16
    5ddc:	0e 94 0f 1c 	call	0x381e	; 0x381e <irLedOff>
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
    5de0:	8a e0       	ldi	r24, 0x0A	; 10
    5de2:	90 e0       	ldi	r25, 0x00	; 0
    5de4:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
	uint16_t prevPower = curr_ir_power;
	setAllirPowers(256);	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
		//times[2] = get_time();
		for(uint8_t dir = 0; dir < 6; dir++){
    5de8:	0f 5f       	subi	r16, 0xFF	; 255
    5dea:	06 30       	cpi	r16, 0x06	; 6
    5dec:	e1 f6       	brne	.-72     	; 0x5da6 <irRangeBlast+0x7e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5dee:	1f bf       	out	0x3f, r17	; 63
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
	setAllirPowers(prevPower);
    5df0:	ce 01       	movw	r24, r28
}
    5df2:	df 91       	pop	r29
    5df4:	cf 91       	pop	r28
    5df6:	1f 91       	pop	r17
    5df8:	0f 91       	pop	r16
    5dfa:	ff 90       	pop	r15
    5dfc:	ef 90       	pop	r14
    5dfe:	df 90       	pop	r13
    5e00:	cf 90       	pop	r12
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
	setAllirPowers(prevPower);
    5e02:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <setAllirPowers>

00005e06 <broadcastRnbData>:
	rnbCmdID=0;
	processing_rnb_flag=0;
}

//TODO: handle variable power.
void broadcastRnbData(){
    5e06:	cf 92       	push	r12
    5e08:	df 92       	push	r13
    5e0a:	ef 92       	push	r14
    5e0c:	ff 92       	push	r15
    5e0e:	1f 93       	push	r17
    5e10:	cf 93       	push	r28
    5e12:	df 93       	push	r29
    5e14:	1f 92       	push	r1
    5e16:	cd b7       	in	r28, 0x3d	; 61
    5e18:	de b7       	in	r29, 0x3e	; 62
	uint8_t power = 255;
	uint8_t goAhead = 0;
	uint8_t result = 0;
	uint8_t irStatus = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5e1a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5e1c:	f8 94       	cli
		irStatus = irIsBusy(ALL_DIRS);
    5e1e:	8f e3       	ldi	r24, 0x3F	; 63
    5e20:	0e 94 02 13 	call	0x2604	; 0x2604 <irIsBusy>
		if(!processing_rnb_flag){
    5e24:	90 91 23 25 	lds	r25, 0x2523	; 0x802523 <processing_rnb_flag>
    5e28:	91 11       	cpse	r25, r1
    5e2a:	22 c0       	rjmp	.+68     	; 0x5e70 <broadcastRnbData+0x6a>
			processing_rnb_flag = 1;
    5e2c:	91 e0       	ldi	r25, 0x01	; 1
    5e2e:	90 93 23 25 	sts	0x2523, r25	; 0x802523 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5e32:	1f bf       	out	0x3f, r17	; 63
			goAhead = 1;
		}
	}
	if(goAhead){
    5e34:	91 11       	cpse	r25, r1
    5e36:	20 c0       	rjmp	.+64     	; 0x5e78 <broadcastRnbData+0x72>
		}
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			processing_rnb_flag = 0;
		}
	}else{
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
    5e38:	90 91 23 25 	lds	r25, 0x2523	; 0x802523 <processing_rnb_flag>
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
    5e3c:	40 e4       	ldi	r20, 0x40	; 64
    5e3e:	94 9f       	mul	r25, r20
    5e40:	90 01       	movw	r18, r0
    5e42:	11 24       	eor	r1, r1
    5e44:	28 2b       	or	r18, r24
    5e46:	1f 92       	push	r1
    5e48:	2f 93       	push	r18
    5e4a:	89 ea       	ldi	r24, 0xA9	; 169
    5e4c:	98 e0       	ldi	r25, 0x08	; 8
    5e4e:	9f 93       	push	r25
    5e50:	8f 93       	push	r24
    5e52:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    5e56:	0f 90       	pop	r0
    5e58:	0f 90       	pop	r0
    5e5a:	0f 90       	pop	r0
    5e5c:	0f 90       	pop	r0
	}
}
    5e5e:	0f 90       	pop	r0
    5e60:	df 91       	pop	r29
    5e62:	cf 91       	pop	r28
    5e64:	1f 91       	pop	r17
    5e66:	ff 90       	pop	r15
    5e68:	ef 90       	pop	r14
    5e6a:	df 90       	pop	r13
    5e6c:	cf 90       	pop	r12
    5e6e:	08 95       	ret
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	1f bf       	out	0x3f, r17	; 63
		if(!processing_rnb_flag){
			processing_rnb_flag = 1;
			goAhead = 1;
		}
	}
	if(goAhead){
    5e74:	99 23       	and	r25, r25
    5e76:	01 f3       	breq	.-64     	; 0x5e38 <broadcastRnbData+0x32>
		uint32_t rnbCmdSentTime = getTime();
    5e78:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    5e7c:	6b 01       	movw	r12, r22
    5e7e:	7c 01       	movw	r14, r24
		char c = 'r';
    5e80:	82 e7       	ldi	r24, 0x72	; 114
    5e82:	89 83       	std	Y+1, r24	; 0x01
		result = hpIrTargetedCmd(ALL_DIRS, &c, 65, (uint16_t)(rnbCmdSentTime&0xFFFF));
    5e84:	96 01       	movw	r18, r12
    5e86:	41 e4       	ldi	r20, 0x41	; 65
    5e88:	be 01       	movw	r22, r28
    5e8a:	6f 5f       	subi	r22, 0xFF	; 255
    5e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e8e:	8f e3       	ldi	r24, 0x3F	; 63
    5e90:	0e 94 9b 14 	call	0x2936	; 0x2936 <hpIrTargetedCmd>
		if(result){
    5e94:	88 23       	and	r24, r24
    5e96:	81 f0       	breq	.+32     	; 0x5eb8 <broadcastRnbData+0xb2>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5e98:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5e9a:	f8 94       	cli
				hpIrBlock_bm = 0x3F;
    5e9c:	9f e3       	ldi	r25, 0x3F	; 63
    5e9e:	90 93 a8 24 	sts	0x24A8, r25	; 0x8024a8 <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5ea2:	8f bf       	out	0x3f, r24	; 63
			}		
			irRangeBlast(rnbCmdSentTime, power);
    5ea4:	4f ef       	ldi	r20, 0xFF	; 255
    5ea6:	c7 01       	movw	r24, r14
    5ea8:	b6 01       	movw	r22, r12
    5eaa:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <irRangeBlast>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5eae:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5eb0:	f8 94       	cli
				hpIrBlock_bm = 0;
    5eb2:	10 92 a8 24 	sts	0x24A8, r1	; 0x8024a8 <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5eb6:	8f bf       	out	0x3f, r24	; 63
			}
			//printf("rnb_b\r\n");
		}
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5eb8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5eba:	f8 94       	cli
			processing_rnb_flag = 0;
    5ebc:	10 92 23 25 	sts	0x2523, r1	; 0x802523 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5ec0:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    5ec2:	cd cf       	rjmp	.-102    	; 0x5e5e <broadcastRnbData+0x58>

00005ec4 <rgbLEDinit>:
#include "rgb_led.h"

void rgbLEDinit()
{
	// LED Pins as output
	PORTE.DIRSET = LED_R_PIN_bm | LED_G_PIN_bm;
    5ec4:	80 e3       	ldi	r24, 0x30	; 48
    5ec6:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	PORTD.DIRSET = LED_B_PIN_bm;
    5eca:	80 e1       	ldi	r24, 0x10	; 16
    5ecc:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	
	//-------RED&GREEN--------
	TCE1.PER = 255;							
    5ed0:	e0 e4       	ldi	r30, 0x40	; 64
    5ed2:	fa e0       	ldi	r31, 0x0A	; 10
    5ed4:	2f ef       	ldi	r18, 0xFF	; 255
    5ed6:	30 e0       	ldi	r19, 0x00	; 0
    5ed8:	26 a3       	std	Z+38, r18	; 0x26
    5eda:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.CCA = 0;							
    5edc:	10 a6       	std	Z+40, r1	; 0x28
    5ede:	11 a6       	std	Z+41, r1	; 0x29
	TCE1.CCB = 0;							
    5ee0:	12 a6       	std	Z+42, r1	; 0x2a
    5ee2:	13 a6       	std	Z+43, r1	; 0x2b
	TCE1.CTRLA = TC_CLKSEL_DIV64_gc;		
    5ee4:	85 e0       	ldi	r24, 0x05	; 5
    5ee6:	80 83       	st	Z, r24
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm | TC1_CCAEN_bm;
    5ee8:	93 e3       	ldi	r25, 0x33	; 51
    5eea:	91 83       	std	Z+1, r25	; 0x01
	
	//---------BLUE-----------
	
	TCD1.PER = 255;
    5eec:	e0 e4       	ldi	r30, 0x40	; 64
    5eee:	f9 e0       	ldi	r31, 0x09	; 9
    5ef0:	26 a3       	std	Z+38, r18	; 0x26
    5ef2:	37 a3       	std	Z+39, r19	; 0x27
	TCD1.CCA = 0;
    5ef4:	10 a6       	std	Z+40, r1	; 0x28
    5ef6:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CTRLA = TC_CLKSEL_DIV64_gc;
    5ef8:	80 83       	st	Z, r24
	TCD1.CTRLB = TC_WGMODE_SS_gc | TC1_CCAEN_bm;	
    5efa:	83 e1       	ldi	r24, 0x13	; 19
    5efc:	81 83       	std	Z+1, r24	; 0x01
    5efe:	08 95       	ret

00005f00 <ledOff>:
}

void ledOff()
{ 
	TCE1.CCABUF = 0;
    5f00:	e0 e4       	ldi	r30, 0x40	; 64
    5f02:	fa e0       	ldi	r31, 0x0A	; 10
    5f04:	10 ae       	std	Z+56, r1	; 0x38
    5f06:	11 ae       	std	Z+57, r1	; 0x39
	TCE1.CCBBUF = 0;
    5f08:	12 ae       	std	Z+58, r1	; 0x3a
    5f0a:	13 ae       	std	Z+59, r1	; 0x3b
	TCD1.CCABUF = 0;	
    5f0c:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    5f10:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    5f14:	08 95       	ret

00005f16 <setRGB>:

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	e0 e4       	ldi	r30, 0x40	; 64
    5f1a:	fa e0       	ldi	r31, 0x0A	; 10
    5f1c:	82 af       	std	Z+58, r24	; 0x3a
    5f1e:	93 af       	std	Z+59, r25	; 0x3b

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    5f20:	70 e0       	ldi	r23, 0x00	; 0
    5f22:	60 af       	std	Z+56, r22	; 0x38
    5f24:	71 af       	std	Z+57, r23	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    5f26:	50 e0       	ldi	r21, 0x00	; 0
    5f28:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    5f2c:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    5f30:	08 95       	ret

00005f32 <hsvToRGB>:
	setRGB(r,g,b);
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
    5f32:	2f 92       	push	r2
    5f34:	3f 92       	push	r3
    5f36:	4f 92       	push	r4
    5f38:	5f 92       	push	r5
    5f3a:	6f 92       	push	r6
    5f3c:	7f 92       	push	r7
    5f3e:	8f 92       	push	r8
    5f40:	9f 92       	push	r9
    5f42:	af 92       	push	r10
    5f44:	bf 92       	push	r11
    5f46:	cf 92       	push	r12
    5f48:	df 92       	push	r13
    5f4a:	ef 92       	push	r14
    5f4c:	ff 92       	push	r15
    5f4e:	0f 93       	push	r16
    5f50:	1f 93       	push	r17
    5f52:	cf 93       	push	r28
    5f54:	df 93       	push	r29
    5f56:	cd b7       	in	r28, 0x3d	; 61
    5f58:	de b7       	in	r29, 0x3e	; 62
    5f5a:	2c 97       	sbiw	r28, 0x0c	; 12
    5f5c:	cd bf       	out	0x3d, r28	; 61
    5f5e:	de bf       	out	0x3e, r29	; 62
    5f60:	8b 83       	std	Y+3, r24	; 0x03
    5f62:	9c 83       	std	Y+4, r25	; 0x04
    5f64:	b4 2e       	mov	r11, r20
    5f66:	19 01       	movw	r2, r18
    5f68:	e9 82       	std	Y+1, r14	; 0x01
    5f6a:	fa 82       	std	Y+2, r15	; 0x02
	float h = (hue%360)*1.0;
	float s = (1.0*saturation)/255.0;
    5f6c:	70 e0       	ldi	r23, 0x00	; 0
    5f6e:	80 e0       	ldi	r24, 0x00	; 0
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	0e 94 b5 48 	call	0x916a	; 0x916a <__floatsisf>
    5f76:	20 e0       	ldi	r18, 0x00	; 0
    5f78:	30 e0       	ldi	r19, 0x00	; 0
    5f7a:	4f e7       	ldi	r20, 0x7F	; 127
    5f7c:	53 e4       	ldi	r21, 0x43	; 67
    5f7e:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    5f82:	6b 01       	movw	r12, r22
    5f84:	7c 01       	movw	r14, r24
	float v = (1.0*val)/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (fabsf(s)<0.00001){
    5f86:	9f 77       	andi	r25, 0x7F	; 127
    5f88:	2c ea       	ldi	r18, 0xAC	; 172
    5f8a:	35 ec       	ldi	r19, 0xC5	; 197
    5f8c:	47 e2       	ldi	r20, 0x27	; 39
    5f8e:	57 e3       	ldi	r21, 0x37	; 55
    5f90:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <__cmpsf2>
    5f94:	87 fd       	sbrc	r24, 7
    5f96:	f0 c0       	rjmp	.+480    	; 0x6178 <hsvToRGB+0x246>
//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
	float s = (1.0*saturation)/255.0;
	float v = (1.0*val)/255.0;
    5f98:	6b 2d       	mov	r22, r11
    5f9a:	70 e0       	ldi	r23, 0x00	; 0
    5f9c:	80 e0       	ldi	r24, 0x00	; 0
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	0e 94 b5 48 	call	0x916a	; 0x916a <__floatsisf>
    5fa4:	20 e0       	ldi	r18, 0x00	; 0
    5fa6:	30 e0       	ldi	r19, 0x00	; 0
    5fa8:	4f e7       	ldi	r20, 0x7F	; 127
    5faa:	53 e4       	ldi	r21, 0x43	; 67
    5fac:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    5fb0:	4b 01       	movw	r8, r22
    5fb2:	5c 01       	movw	r10, r24
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
    5fb4:	2b 81       	ldd	r18, Y+3	; 0x03
    5fb6:	3c 81       	ldd	r19, Y+4	; 0x04
    5fb8:	a3 e8       	ldi	r26, 0x83	; 131
    5fba:	bd e2       	ldi	r27, 0x2D	; 45
    5fbc:	0e 94 3c 4c 	call	0x9878	; 0x9878 <__umulhisi3>
    5fc0:	00 24       	eor	r0, r0
    5fc2:	88 0f       	add	r24, r24
    5fc4:	99 1f       	adc	r25, r25
    5fc6:	00 1c       	adc	r0, r0
    5fc8:	88 0f       	add	r24, r24
    5fca:	99 1f       	adc	r25, r25
    5fcc:	00 1c       	adc	r0, r0
    5fce:	89 2f       	mov	r24, r25
    5fd0:	90 2d       	mov	r25, r0
    5fd2:	48 e6       	ldi	r20, 0x68	; 104
    5fd4:	51 e0       	ldi	r21, 0x01	; 1
    5fd6:	84 9f       	mul	r24, r20
    5fd8:	90 01       	movw	r18, r0
    5fda:	85 9f       	mul	r24, r21
    5fdc:	30 0d       	add	r19, r0
    5fde:	94 9f       	mul	r25, r20
    5fe0:	30 0d       	add	r19, r0
    5fe2:	11 24       	eor	r1, r1
    5fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    5fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    5fe8:	82 1b       	sub	r24, r18
    5fea:	93 0b       	sbc	r25, r19
    5fec:	8b 83       	std	Y+3, r24	; 0x03
    5fee:	9c 83       	std	Y+4, r25	; 0x04
    5ff0:	bc 01       	movw	r22, r24
    5ff2:	80 e0       	ldi	r24, 0x00	; 0
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	0e 94 b3 48 	call	0x9166	; 0x9166 <__floatunsisf>
	if (fabsf(s)<0.00001){
		*red = *green = *blue = val;
		return;
	}
	
	h = h / 60.0;
    5ffa:	20 e0       	ldi	r18, 0x00	; 0
    5ffc:	30 e0       	ldi	r19, 0x00	; 0
    5ffe:	40 e7       	ldi	r20, 0x70	; 112
    6000:	52 e4       	ldi	r21, 0x42	; 66
    6002:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <__divsf3>
    6006:	2b 01       	movw	r4, r22
    6008:	3c 01       	movw	r6, r24
	uint8_t i = (uint8_t)h;
    600a:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    600e:	6b 87       	std	Y+11, r22	; 0x0b
	f = h - i;
    6010:	70 e0       	ldi	r23, 0x00	; 0
    6012:	80 e0       	ldi	r24, 0x00	; 0
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	0e 94 b5 48 	call	0x916a	; 0x916a <__floatsisf>
    601a:	9b 01       	movw	r18, r22
    601c:	ac 01       	movw	r20, r24
    601e:	c3 01       	movw	r24, r6
    6020:	b2 01       	movw	r22, r4
    6022:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    6026:	2b 01       	movw	r4, r22
    6028:	3c 01       	movw	r6, r24
	
	p = v*(1.0-s);
    602a:	a7 01       	movw	r20, r14
    602c:	96 01       	movw	r18, r12
    602e:	60 e0       	ldi	r22, 0x00	; 0
    6030:	70 e0       	ldi	r23, 0x00	; 0
    6032:	80 e8       	ldi	r24, 0x80	; 128
    6034:	9f e3       	ldi	r25, 0x3F	; 63
    6036:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    603a:	a5 01       	movw	r20, r10
    603c:	94 01       	movw	r18, r8
    603e:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    6042:	6b 83       	std	Y+3, r22	; 0x03
    6044:	7c 83       	std	Y+4, r23	; 0x04
    6046:	8d 83       	std	Y+5, r24	; 0x05
    6048:	9e 83       	std	Y+6, r25	; 0x06
	q = v*(1.0-s*f);
    604a:	a3 01       	movw	r20, r6
    604c:	92 01       	movw	r18, r4
    604e:	c7 01       	movw	r24, r14
    6050:	b6 01       	movw	r22, r12
    6052:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    6056:	9b 01       	movw	r18, r22
    6058:	ac 01       	movw	r20, r24
    605a:	60 e0       	ldi	r22, 0x00	; 0
    605c:	70 e0       	ldi	r23, 0x00	; 0
    605e:	80 e8       	ldi	r24, 0x80	; 128
    6060:	9f e3       	ldi	r25, 0x3F	; 63
    6062:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    6066:	a5 01       	movw	r20, r10
    6068:	94 01       	movw	r18, r8
    606a:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    606e:	6f 83       	std	Y+7, r22	; 0x07
    6070:	78 87       	std	Y+8, r23	; 0x08
    6072:	89 87       	std	Y+9, r24	; 0x09
    6074:	9a 87       	std	Y+10, r25	; 0x0a
	t = v*(1.0-s*(1-f));
    6076:	a3 01       	movw	r20, r6
    6078:	92 01       	movw	r18, r4
    607a:	60 e0       	ldi	r22, 0x00	; 0
    607c:	70 e0       	ldi	r23, 0x00	; 0
    607e:	80 e8       	ldi	r24, 0x80	; 128
    6080:	9f e3       	ldi	r25, 0x3F	; 63
    6082:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    6086:	a7 01       	movw	r20, r14
    6088:	96 01       	movw	r18, r12
    608a:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    608e:	9b 01       	movw	r18, r22
    6090:	ac 01       	movw	r20, r24
    6092:	60 e0       	ldi	r22, 0x00	; 0
    6094:	70 e0       	ldi	r23, 0x00	; 0
    6096:	80 e8       	ldi	r24, 0x80	; 128
    6098:	9f e3       	ldi	r25, 0x3F	; 63
    609a:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <__subsf3>
    609e:	a5 01       	movw	r20, r10
    60a0:	94 01       	movw	r18, r8
    60a2:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    60a6:	6b 01       	movw	r12, r22
    60a8:	7c 01       	movw	r14, r24
	
	switch(i)
    60aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    60ac:	92 30       	cpi	r25, 0x02	; 2
    60ae:	09 f4       	brne	.+2      	; 0x60b2 <hsvToRGB+0x180>
    60b0:	de c0       	rjmp	.+444    	; 0x626e <hsvToRGB+0x33c>
    60b2:	70 f1       	brcs	.+92     	; 0x6110 <hsvToRGB+0x1de>
    60b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    60b6:	e4 30       	cpi	r30, 0x04	; 4
    60b8:	09 f4       	brne	.+2      	; 0x60bc <hsvToRGB+0x18a>
    60ba:	c7 c0       	rjmp	.+398    	; 0x624a <hsvToRGB+0x318>
    60bc:	08 f4       	brcc	.+2      	; 0x60c0 <hsvToRGB+0x18e>
    60be:	9c c0       	rjmp	.+312    	; 0x61f8 <hsvToRGB+0x2c6>
    60c0:	e5 30       	cpi	r30, 0x05	; 5
    60c2:	09 f0       	breq	.+2      	; 0x60c6 <hsvToRGB+0x194>
    60c4:	be c0       	rjmp	.+380    	; 0x6242 <hsvToRGB+0x310>
    60c6:	20 e0       	ldi	r18, 0x00	; 0
    60c8:	30 e0       	ldi	r19, 0x00	; 0
    60ca:	4f e7       	ldi	r20, 0x7F	; 127
    60cc:	53 e4       	ldi	r21, 0x43	; 67
    60ce:	c5 01       	movw	r24, r10
    60d0:	b4 01       	movw	r22, r8
    60d2:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    60d6:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    60da:	6c 87       	std	Y+12, r22	; 0x0c
    60dc:	20 e0       	ldi	r18, 0x00	; 0
    60de:	30 e0       	ldi	r19, 0x00	; 0
    60e0:	4f e7       	ldi	r20, 0x7F	; 127
    60e2:	53 e4       	ldi	r21, 0x43	; 67
    60e4:	6f 81       	ldd	r22, Y+7	; 0x07
    60e6:	78 85       	ldd	r23, Y+8	; 0x08
    60e8:	89 85       	ldd	r24, Y+9	; 0x09
    60ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    60ec:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    60f0:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    60f4:	6b 87       	std	Y+11, r22	; 0x0b
    60f6:	20 e0       	ldi	r18, 0x00	; 0
    60f8:	30 e0       	ldi	r19, 0x00	; 0
    60fa:	4f e7       	ldi	r20, 0x7F	; 127
    60fc:	53 e4       	ldi	r21, 0x43	; 67
    60fe:	6b 81       	ldd	r22, Y+3	; 0x03
    6100:	7c 81       	ldd	r23, Y+4	; 0x04
    6102:	8d 81       	ldd	r24, Y+5	; 0x05
    6104:	9e 81       	ldd	r25, Y+6	; 0x06
    6106:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    610a:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
			break;
		case 5:
			r = v;
			g = p;
			b = q;
			break;
    610e:	2a c0       	rjmp	.+84     	; 0x6164 <hsvToRGB+0x232>
	
	p = v*(1.0-s);
	q = v*(1.0-s*f);
	t = v*(1.0-s*(1-f));
	
	switch(i)
    6110:	99 23       	and	r25, r25
    6112:	09 f4       	brne	.+2      	; 0x6116 <hsvToRGB+0x1e4>
    6114:	4e c0       	rjmp	.+156    	; 0x61b2 <hsvToRGB+0x280>
    6116:	91 30       	cpi	r25, 0x01	; 1
    6118:	09 f0       	breq	.+2      	; 0x611c <hsvToRGB+0x1ea>
    611a:	93 c0       	rjmp	.+294    	; 0x6242 <hsvToRGB+0x310>
    611c:	20 e0       	ldi	r18, 0x00	; 0
    611e:	30 e0       	ldi	r19, 0x00	; 0
    6120:	4f e7       	ldi	r20, 0x7F	; 127
    6122:	53 e4       	ldi	r21, 0x43	; 67
    6124:	6f 81       	ldd	r22, Y+7	; 0x07
    6126:	78 85       	ldd	r23, Y+8	; 0x08
    6128:	89 85       	ldd	r24, Y+9	; 0x09
    612a:	9a 85       	ldd	r25, Y+10	; 0x0a
    612c:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    6130:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    6134:	6c 87       	std	Y+12, r22	; 0x0c
    6136:	20 e0       	ldi	r18, 0x00	; 0
    6138:	30 e0       	ldi	r19, 0x00	; 0
    613a:	4f e7       	ldi	r20, 0x7F	; 127
    613c:	53 e4       	ldi	r21, 0x43	; 67
    613e:	6b 81       	ldd	r22, Y+3	; 0x03
    6140:	7c 81       	ldd	r23, Y+4	; 0x04
    6142:	8d 81       	ldd	r24, Y+5	; 0x05
    6144:	9e 81       	ldd	r25, Y+6	; 0x06
    6146:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    614a:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    614e:	6b 87       	std	Y+11, r22	; 0x0b
    6150:	20 e0       	ldi	r18, 0x00	; 0
    6152:	30 e0       	ldi	r19, 0x00	; 0
    6154:	4f e7       	ldi	r20, 0x7F	; 127
    6156:	53 e4       	ldi	r21, 0x43	; 67
    6158:	c5 01       	movw	r24, r10
    615a:	b4 01       	movw	r22, r8
    615c:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    6160:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
			break;
		default:
			//printf("SHOULD NEVER SEE THIS. i: %hhu",i);
			break;
	}
	*red = (uint8_t)(r*255);
    6164:	2c 85       	ldd	r18, Y+12	; 0x0c
    6166:	f1 01       	movw	r30, r2
    6168:	20 83       	st	Z, r18
	*blue = (uint8_t)(b*255);
    616a:	2b 85       	ldd	r18, Y+11	; 0x0b
    616c:	e9 81       	ldd	r30, Y+1	; 0x01
    616e:	fa 81       	ldd	r31, Y+2	; 0x02
    6170:	20 83       	st	Z, r18
	*green = (uint8_t)(g*255);
    6172:	f8 01       	movw	r30, r16
    6174:	60 83       	st	Z, r22
    6176:	07 c0       	rjmp	.+14     	; 0x6186 <hsvToRGB+0x254>
	float v = (1.0*val)/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (fabsf(s)<0.00001){
		*red = *green = *blue = val;
    6178:	e9 81       	ldd	r30, Y+1	; 0x01
    617a:	fa 81       	ldd	r31, Y+2	; 0x02
    617c:	b0 82       	st	Z, r11
    617e:	f8 01       	movw	r30, r16
    6180:	b0 82       	st	Z, r11
    6182:	f1 01       	movw	r30, r2
    6184:	b0 82       	st	Z, r11
			break;
	}
	*red = (uint8_t)(r*255);
	*blue = (uint8_t)(b*255);
	*green = (uint8_t)(g*255);
    6186:	2c 96       	adiw	r28, 0x0c	; 12
    6188:	cd bf       	out	0x3d, r28	; 61
    618a:	de bf       	out	0x3e, r29	; 62
    618c:	df 91       	pop	r29
    618e:	cf 91       	pop	r28
    6190:	1f 91       	pop	r17
    6192:	0f 91       	pop	r16
    6194:	ff 90       	pop	r15
    6196:	ef 90       	pop	r14
    6198:	df 90       	pop	r13
    619a:	cf 90       	pop	r12
    619c:	bf 90       	pop	r11
    619e:	af 90       	pop	r10
    61a0:	9f 90       	pop	r9
    61a2:	8f 90       	pop	r8
    61a4:	7f 90       	pop	r7
    61a6:	6f 90       	pop	r6
    61a8:	5f 90       	pop	r5
    61aa:	4f 90       	pop	r4
    61ac:	3f 90       	pop	r3
    61ae:	2f 90       	pop	r2
    61b0:	08 95       	ret
    61b2:	20 e0       	ldi	r18, 0x00	; 0
    61b4:	30 e0       	ldi	r19, 0x00	; 0
    61b6:	4f e7       	ldi	r20, 0x7F	; 127
    61b8:	53 e4       	ldi	r21, 0x43	; 67
    61ba:	c5 01       	movw	r24, r10
    61bc:	b4 01       	movw	r22, r8
    61be:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    61c2:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    61c6:	6c 87       	std	Y+12, r22	; 0x0c
    61c8:	20 e0       	ldi	r18, 0x00	; 0
    61ca:	30 e0       	ldi	r19, 0x00	; 0
    61cc:	4f e7       	ldi	r20, 0x7F	; 127
    61ce:	53 e4       	ldi	r21, 0x43	; 67
    61d0:	6b 81       	ldd	r22, Y+3	; 0x03
    61d2:	7c 81       	ldd	r23, Y+4	; 0x04
    61d4:	8d 81       	ldd	r24, Y+5	; 0x05
    61d6:	9e 81       	ldd	r25, Y+6	; 0x06
    61d8:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    61dc:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    61e0:	6b 87       	std	Y+11, r22	; 0x0b
    61e2:	20 e0       	ldi	r18, 0x00	; 0
    61e4:	30 e0       	ldi	r19, 0x00	; 0
    61e6:	4f e7       	ldi	r20, 0x7F	; 127
    61e8:	53 e4       	ldi	r21, 0x43	; 67
    61ea:	c7 01       	movw	r24, r14
    61ec:	b6 01       	movw	r22, r12
    61ee:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    61f2:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
	{
		case 0:
			r = v;
			g = t;
			b = p;
			break;
    61f6:	b6 cf       	rjmp	.-148    	; 0x6164 <hsvToRGB+0x232>
    61f8:	20 e0       	ldi	r18, 0x00	; 0
    61fa:	30 e0       	ldi	r19, 0x00	; 0
    61fc:	4f e7       	ldi	r20, 0x7F	; 127
    61fe:	53 e4       	ldi	r21, 0x43	; 67
    6200:	6b 81       	ldd	r22, Y+3	; 0x03
    6202:	7c 81       	ldd	r23, Y+4	; 0x04
    6204:	8d 81       	ldd	r24, Y+5	; 0x05
    6206:	9e 81       	ldd	r25, Y+6	; 0x06
    6208:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    620c:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    6210:	6c 87       	std	Y+12, r22	; 0x0c
    6212:	20 e0       	ldi	r18, 0x00	; 0
    6214:	30 e0       	ldi	r19, 0x00	; 0
    6216:	4f e7       	ldi	r20, 0x7F	; 127
    6218:	53 e4       	ldi	r21, 0x43	; 67
    621a:	c5 01       	movw	r24, r10
    621c:	b4 01       	movw	r22, r8
    621e:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    6222:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    6226:	6b 87       	std	Y+11, r22	; 0x0b
    6228:	20 e0       	ldi	r18, 0x00	; 0
    622a:	30 e0       	ldi	r19, 0x00	; 0
    622c:	4f e7       	ldi	r20, 0x7F	; 127
    622e:	53 e4       	ldi	r21, 0x43	; 67
    6230:	6f 81       	ldd	r22, Y+7	; 0x07
    6232:	78 85       	ldd	r23, Y+8	; 0x08
    6234:	89 85       	ldd	r24, Y+9	; 0x09
    6236:	9a 85       	ldd	r25, Y+10	; 0x0a
    6238:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    623c:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
			break;
		case 3:
			r = p;
			g = q;
			b = v;
			break;
    6240:	91 cf       	rjmp	.-222    	; 0x6164 <hsvToRGB+0x232>
	
	p = v*(1.0-s);
	q = v*(1.0-s*f);
	t = v*(1.0-s*(1-f));
	
	switch(i)
    6242:	60 e0       	ldi	r22, 0x00	; 0
    6244:	1b 86       	std	Y+11, r1	; 0x0b
    6246:	1c 86       	std	Y+12, r1	; 0x0c
    6248:	8d cf       	rjmp	.-230    	; 0x6164 <hsvToRGB+0x232>
    624a:	20 e0       	ldi	r18, 0x00	; 0
    624c:	30 e0       	ldi	r19, 0x00	; 0
    624e:	4f e7       	ldi	r20, 0x7F	; 127
    6250:	53 e4       	ldi	r21, 0x43	; 67
    6252:	c7 01       	movw	r24, r14
    6254:	b6 01       	movw	r22, r12
    6256:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    625a:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    625e:	6c 87       	std	Y+12, r22	; 0x0c
    6260:	20 e0       	ldi	r18, 0x00	; 0
    6262:	30 e0       	ldi	r19, 0x00	; 0
    6264:	4f e7       	ldi	r20, 0x7F	; 127
    6266:	53 e4       	ldi	r21, 0x43	; 67
    6268:	c5 01       	movw	r24, r10
    626a:	b4 01       	movw	r22, r8
    626c:	3f cf       	rjmp	.-386    	; 0x60ec <hsvToRGB+0x1ba>
    626e:	20 e0       	ldi	r18, 0x00	; 0
    6270:	30 e0       	ldi	r19, 0x00	; 0
    6272:	4f e7       	ldi	r20, 0x7F	; 127
    6274:	53 e4       	ldi	r21, 0x43	; 67
    6276:	6b 81       	ldd	r22, Y+3	; 0x03
    6278:	7c 81       	ldd	r23, Y+4	; 0x04
    627a:	8d 81       	ldd	r24, Y+5	; 0x05
    627c:	9e 81       	ldd	r25, Y+6	; 0x06
    627e:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    6282:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    6286:	6c 87       	std	Y+12, r22	; 0x0c
    6288:	20 e0       	ldi	r18, 0x00	; 0
    628a:	30 e0       	ldi	r19, 0x00	; 0
    628c:	4f e7       	ldi	r20, 0x7F	; 127
    628e:	53 e4       	ldi	r21, 0x43	; 67
    6290:	c7 01       	movw	r24, r14
    6292:	b6 01       	movw	r22, r12
    6294:	58 cf       	rjmp	.-336    	; 0x6146 <hsvToRGB+0x214>

00006296 <setHSV>:
Hue should be between 0 and 360 (though it gets modulo'd with 360, so should be okay)
Saturation and value can be between 0 and 255, where 255 is brightest/most saturated,
and 0 is dimmest/least saturated.
*/
void setHSV(uint16_t h, uint8_t s, uint8_t v)
{
    6296:	ef 92       	push	r14
    6298:	ff 92       	push	r15
    629a:	0f 93       	push	r16
    629c:	1f 93       	push	r17
    629e:	cf 93       	push	r28
    62a0:	df 93       	push	r29
    62a2:	00 d0       	rcall	.+0      	; 0x62a4 <setHSV+0xe>
    62a4:	cd b7       	in	r28, 0x3d	; 61
    62a6:	de b7       	in	r29, 0x3e	; 62
	uint8_t r,g,b;
	hsvToRGB(h,s,v,&r,&g,&b);
    62a8:	9e 01       	movw	r18, r28
    62aa:	2f 5f       	subi	r18, 0xFF	; 255
    62ac:	3f 4f       	sbci	r19, 0xFF	; 255
    62ae:	79 01       	movw	r14, r18
    62b0:	8e 01       	movw	r16, r28
    62b2:	0e 5f       	subi	r16, 0xFE	; 254
    62b4:	1f 4f       	sbci	r17, 0xFF	; 255
    62b6:	2e 5f       	subi	r18, 0xFE	; 254
    62b8:	3f 4f       	sbci	r19, 0xFF	; 255
    62ba:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <hsvToRGB>
	setRGB(r,g,b);
    62be:	89 81       	ldd	r24, Y+1	; 0x01
    62c0:	2a 81       	ldd	r18, Y+2	; 0x02

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    62c2:	4b 81       	ldd	r20, Y+3	; 0x03
    62c4:	50 e0       	ldi	r21, 0x00	; 0
    62c6:	e0 e4       	ldi	r30, 0x40	; 64
    62c8:	fa e0       	ldi	r31, 0x0A	; 10
    62ca:	42 af       	std	Z+58, r20	; 0x3a
    62cc:	53 af       	std	Z+59, r21	; 0x3b

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	20 af       	std	Z+56, r18	; 0x38
    62d2:	31 af       	std	Z+57, r19	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    62d4:	90 e0       	ldi	r25, 0x00	; 0
    62d6:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    62da:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
}
    62de:	23 96       	adiw	r28, 0x03	; 3
    62e0:	cd bf       	out	0x3d, r28	; 61
    62e2:	de bf       	out	0x3e, r29	; 62
    62e4:	df 91       	pop	r29
    62e6:	cf 91       	pop	r28
    62e8:	1f 91       	pop	r17
    62ea:	0f 91       	pop	r16
    62ec:	ff 90       	pop	r15
    62ee:	ef 90       	pop	r14
    62f0:	08 95       	ret

000062f2 <measFindMedian>:
	#endif
}

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
    62f2:	cf 93       	push	r28
    62f4:	df 93       	push	r29
    62f6:	ec 01       	movw	r28, r24
	if(arr_len==1) return meas[0];
    62f8:	61 30       	cpi	r22, 0x01	; 1
    62fa:	09 f4       	brne	.+2      	; 0x62fe <measFindMedian+0xc>
    62fc:	48 c0       	rjmp	.+144    	; 0x638e <measFindMedian+0x9c>
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    62fe:	62 30       	cpi	r22, 0x02	; 2
    6300:	09 f4       	brne	.+2      	; 0x6304 <measFindMedian+0x12>
    6302:	4a c0       	rjmp	.+148    	; 0x6398 <measFindMedian+0xa6>
	
	for(uint8_t i=0; i<arr_len ; i++){
    6304:	66 23       	and	r22, r22
    6306:	79 f1       	breq	.+94     	; 0x6366 <measFindMedian+0x74>
    6308:	de 01       	movw	r26, r28
    630a:	80 e0       	ldi	r24, 0x00	; 0
		for(uint8_t j=i+1 ; j<arr_len ; j++){
    630c:	8f 5f       	subi	r24, 0xFF	; 255
    630e:	68 17       	cp	r22, r24
    6310:	d9 f0       	breq	.+54     	; 0x6348 <measFindMedian+0x56>
    6312:	98 2f       	mov	r25, r24
			if(meas[j] < meas[i]){
    6314:	e9 2f       	mov	r30, r25
    6316:	f0 e0       	ldi	r31, 0x00	; 0
    6318:	ee 0f       	add	r30, r30
    631a:	ff 1f       	adc	r31, r31
    631c:	ec 0f       	add	r30, r28
    631e:	fd 1f       	adc	r31, r29
    6320:	40 81       	ld	r20, Z
    6322:	51 81       	ldd	r21, Z+1	; 0x01
    6324:	2d 91       	ld	r18, X+
    6326:	3c 91       	ld	r19, X
    6328:	11 97       	sbiw	r26, 0x01	; 1
    632a:	42 17       	cp	r20, r18
    632c:	53 07       	cpc	r21, r19
    632e:	2c f4       	brge	.+10     	; 0x633a <measFindMedian+0x48>
				int16_t temp = meas[i];
				meas[i] = meas[j];
    6330:	4d 93       	st	X+, r20
    6332:	5c 93       	st	X, r21
    6334:	11 97       	sbiw	r26, 0x01	; 1
				meas[j] = temp;
    6336:	20 83       	st	Z, r18
    6338:	31 83       	std	Z+1, r19	; 0x01
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++){
		for(uint8_t j=i+1 ; j<arr_len ; j++){
    633a:	9f 5f       	subi	r25, 0xFF	; 255
    633c:	69 13       	cpse	r22, r25
    633e:	ea cf       	rjmp	.-44     	; 0x6314 <measFindMedian+0x22>
    6340:	12 96       	adiw	r26, 0x02	; 2
    6342:	8f 5f       	subi	r24, 0xFF	; 255
    6344:	68 13       	cpse	r22, r24
    6346:	e5 cf       	rjmp	.-54     	; 0x6312 <measFindMedian+0x20>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    6348:	60 ff       	sbrs	r22, 0
    634a:	0d c0       	rjmp	.+26     	; 0x6366 <measFindMedian+0x74>
	else return meas[arr_len/2];
    634c:	66 95       	lsr	r22
    634e:	26 2f       	mov	r18, r22
    6350:	30 e0       	ldi	r19, 0x00	; 0
    6352:	22 0f       	add	r18, r18
    6354:	33 1f       	adc	r19, r19
    6356:	fe 01       	movw	r30, r28
    6358:	e2 0f       	add	r30, r18
    635a:	f3 1f       	adc	r31, r19
    635c:	80 81       	ld	r24, Z
    635e:	91 81       	ldd	r25, Z+1	; 0x01
    6360:	df 91       	pop	r29
    6362:	cf 91       	pop	r28
    6364:	08 95       	ret
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    6366:	66 95       	lsr	r22
    6368:	fe 01       	movw	r30, r28
    636a:	e6 0f       	add	r30, r22
    636c:	f1 1d       	adc	r31, r1
    636e:	e6 0f       	add	r30, r22
    6370:	f1 1d       	adc	r31, r1
    6372:	32 97       	sbiw	r30, 0x02	; 2
    6374:	22 81       	ldd	r18, Z+2	; 0x02
    6376:	33 81       	ldd	r19, Z+3	; 0x03
    6378:	80 81       	ld	r24, Z
    637a:	91 81       	ldd	r25, Z+1	; 0x01
    637c:	82 0f       	add	r24, r18
    637e:	93 1f       	adc	r25, r19
    6380:	97 fd       	sbrc	r25, 7
    6382:	12 c0       	rjmp	.+36     	; 0x63a8 <measFindMedian+0xb6>
    6384:	95 95       	asr	r25
    6386:	87 95       	ror	r24
	else return meas[arr_len/2];
    6388:	df 91       	pop	r29
    638a:	cf 91       	pop	r28
    638c:	08 95       	ret
}

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
    638e:	88 81       	ld	r24, Y
    6390:	99 81       	ldd	r25, Y+1	; 0x01
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
	else return meas[arr_len/2];
    6392:	df 91       	pop	r29
    6394:	cf 91       	pop	r28
    6396:	08 95       	ret

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    6398:	28 81       	ld	r18, Y
    639a:	39 81       	ldd	r19, Y+1	; 0x01
    639c:	8a 81       	ldd	r24, Y+2	; 0x02
    639e:	9b 81       	ldd	r25, Y+3	; 0x03
    63a0:	82 0f       	add	r24, r18
    63a2:	93 1f       	adc	r25, r19
    63a4:	97 ff       	sbrs	r25, 7
    63a6:	ee cf       	rjmp	.-36     	; 0x6384 <measFindMedian+0x92>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    63a8:	01 96       	adiw	r24, 0x01	; 1
    63aa:	ec cf       	rjmp	.-40     	; 0x6384 <measFindMedian+0x92>

000063ac <getRedSensor>:
	#endif		
}

#ifndef AUDIO_DROPLET

int16_t getRedSensor(){
    63ac:	cf 93       	push	r28
    63ae:	df 93       	push	r29
    63b0:	cd b7       	in	r28, 0x3d	; 61
    63b2:	de b7       	in	r29, 0x3e	; 62
    63b4:	2a 97       	sbiw	r28, 0x0a	; 10
    63b6:	cd bf       	out	0x3d, r28	; 61
    63b8:	de bf       	out	0x3e, r29	; 62
    63ba:	fe 01       	movw	r30, r28
    63bc:	31 96       	adiw	r30, 0x01	; 1
    63be:	ae 01       	movw	r20, r28
    63c0:	45 5f       	subi	r20, 0xF5	; 245
    63c2:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    63c4:	31 e0       	ldi	r19, 0x01	; 1
int16_t getRedSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    63c6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
    63ca:	80 68       	ori	r24, 0x80	; 128
    63cc:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
    63d0:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
    63d4:	88 23       	and	r24, r24
    63d6:	e1 f3       	breq	.-8      	; 0x63d0 <getRedSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
    63d8:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    63dc:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    63e0:	90 e0       	ldi	r25, 0x00	; 0
    63e2:	92 2b       	or	r25, r18
    63e4:	95 95       	asr	r25
    63e6:	87 95       	ror	r24
    63e8:	95 95       	asr	r25
    63ea:	87 95       	ror	r24
    63ec:	95 95       	asr	r25
    63ee:	87 95       	ror	r24
    63f0:	95 95       	asr	r25
    63f2:	87 95       	ror	r24
    63f4:	81 93       	st	Z+, r24
    63f6:	91 93       	st	Z+, r25
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    63f8:	30 93 23 02 	sts	0x0223, r19	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>

int16_t getRedSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
    63fc:	e4 17       	cp	r30, r20
    63fe:	f5 07       	cpc	r31, r21
    6400:	11 f7       	brne	.-60     	; 0x63c6 <getRedSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
		//printf("%6d ", meas[meas_count]);
	}
	//printf("\r\n");
	red_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    6402:	63 e0       	ldi	r22, 0x03	; 3
    6404:	ce 01       	movw	r24, r28
    6406:	05 96       	adiw	r24, 0x05	; 5
    6408:	0e 94 79 31 	call	0x62f2	; 0x62f2 <measFindMedian>
	return red_val;
}
    640c:	2a 96       	adiw	r28, 0x0a	; 10
    640e:	cd bf       	out	0x3d, r28	; 61
    6410:	de bf       	out	0x3e, r29	; 62
    6412:	df 91       	pop	r29
    6414:	cf 91       	pop	r28
    6416:	08 95       	ret

00006418 <getGreenSensor>:

int16_t getGreenSensor(){
    6418:	cf 93       	push	r28
    641a:	df 93       	push	r29
    641c:	cd b7       	in	r28, 0x3d	; 61
    641e:	de b7       	in	r29, 0x3e	; 62
    6420:	2a 97       	sbiw	r28, 0x0a	; 10
    6422:	cd bf       	out	0x3d, r28	; 61
    6424:	de bf       	out	0x3e, r29	; 62
    6426:	fe 01       	movw	r30, r28
    6428:	31 96       	adiw	r30, 0x01	; 1
    642a:	ae 01       	movw	r20, r28
    642c:	45 5f       	subi	r20, 0xF5	; 245
    642e:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
    6430:	31 e0       	ldi	r19, 0x01	; 1
int16_t getGreenSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    6432:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
    6436:	80 68       	ori	r24, 0x80	; 128
    6438:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
    643c:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>
    6440:	88 23       	and	r24, r24
    6442:	e1 f3       	breq	.-8      	; 0x643c <getGreenSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
    6444:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    6448:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    644c:	90 e0       	ldi	r25, 0x00	; 0
    644e:	92 2b       	or	r25, r18
    6450:	95 95       	asr	r25
    6452:	87 95       	ror	r24
    6454:	95 95       	asr	r25
    6456:	87 95       	ror	r24
    6458:	95 95       	asr	r25
    645a:	87 95       	ror	r24
    645c:	95 95       	asr	r25
    645e:	87 95       	ror	r24
    6460:	81 93       	st	Z+, r24
    6462:	91 93       	st	Z+, r25
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
    6464:	30 93 2b 02 	sts	0x022B, r19	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>

int16_t getGreenSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
    6468:	e4 17       	cp	r30, r20
    646a:	f5 07       	cpc	r31, r21
    646c:	11 f7       	brne	.-60     	; 0x6432 <getGreenSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
		//printf("%6d ", meas[meas_count]);
	}
	//printf("\r\n");
	green_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    646e:	63 e0       	ldi	r22, 0x03	; 3
    6470:	ce 01       	movw	r24, r28
    6472:	05 96       	adiw	r24, 0x05	; 5
    6474:	0e 94 79 31 	call	0x62f2	; 0x62f2 <measFindMedian>

	return green_val;
}
    6478:	2a 96       	adiw	r28, 0x0a	; 10
    647a:	cd bf       	out	0x3d, r28	; 61
    647c:	de bf       	out	0x3e, r29	; 62
    647e:	df 91       	pop	r29
    6480:	cf 91       	pop	r28
    6482:	08 95       	ret

00006484 <getBlueSensor>:

int16_t getBlueSensor(){
    6484:	cf 93       	push	r28
    6486:	df 93       	push	r29
    6488:	cd b7       	in	r28, 0x3d	; 61
    648a:	de b7       	in	r29, 0x3e	; 62
    648c:	2a 97       	sbiw	r28, 0x0a	; 10
    648e:	cd bf       	out	0x3d, r28	; 61
    6490:	de bf       	out	0x3e, r29	; 62
    6492:	fe 01       	movw	r30, r28
    6494:	31 96       	adiw	r30, 0x01	; 1
    6496:	ae 01       	movw	r20, r28
    6498:	45 5f       	subi	r20, 0xF5	; 245
    649a:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    649c:	31 e0       	ldi	r19, 0x01	; 1
int16_t getBlueSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    649e:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
    64a2:	80 68       	ori	r24, 0x80	; 128
    64a4:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
    64a8:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>
    64ac:	88 23       	and	r24, r24
    64ae:	e1 f3       	breq	.-8      	; 0x64a8 <getBlueSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
    64b0:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    64b4:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    64b8:	90 e0       	ldi	r25, 0x00	; 0
    64ba:	92 2b       	or	r25, r18
    64bc:	95 95       	asr	r25
    64be:	87 95       	ror	r24
    64c0:	95 95       	asr	r25
    64c2:	87 95       	ror	r24
    64c4:	95 95       	asr	r25
    64c6:	87 95       	ror	r24
    64c8:	95 95       	asr	r25
    64ca:	87 95       	ror	r24
    64cc:	81 93       	st	Z+, r24
    64ce:	91 93       	st	Z+, r25
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    64d0:	30 93 33 02 	sts	0x0233, r19	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>

int16_t getBlueSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
    64d4:	e4 17       	cp	r30, r20
    64d6:	f5 07       	cpc	r31, r21
    64d8:	11 f7       	brne	.-60     	; 0x649e <getBlueSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
		//printf("%6d ", meas[meas_count]);
	}		
	//printf("\r\n");
	blue_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    64da:	63 e0       	ldi	r22, 0x03	; 3
    64dc:	ce 01       	movw	r24, r28
    64de:	05 96       	adiw	r24, 0x05	; 5
    64e0:	0e 94 79 31 	call	0x62f2	; 0x62f2 <measFindMedian>
		
	return blue_val;
}
    64e4:	2a 96       	adiw	r28, 0x0a	; 10
    64e6:	cd bf       	out	0x3d, r28	; 61
    64e8:	de bf       	out	0x3e, r29	; 62
    64ea:	df 91       	pop	r29
    64ec:	cf 91       	pop	r28
    64ee:	08 95       	ret

000064f0 <rgbSensorInit>:
	uint32_t i;
	float f;
} u;

void rgbSensorInit()
{
    64f0:	cf 93       	push	r28
		result = twiWriteWrapper(RGB_SENSE_ADDR, &(power_on_sequence[4]), 2, callerDescr);
		if(!result)	printf_P(RGB_SENSE_POWERON_FAILURE,3);
		result = twiWriteWrapper(RGB_SENSE_ADDR, &(power_on_sequence[6]), 2, callerDescr);
		if(!result)	printf_P(RGB_SENSE_POWERON_FAILURE,4);
	#else		
		RGB_SENSOR_PORT.DIRCLR = RGB_SENSOR_R_PIN_bm | RGB_SENSOR_G_PIN_bm | RGB_SENSOR_B_PIN_bm;
    64f2:	80 ee       	ldi	r24, 0xE0	; 224
    64f4:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>

		ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    64f8:	80 e2       	ldi	r24, 0x20	; 32
    64fa:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
		ADCA.CTRLB = ADC_RESOLUTION_LEFT12BIT_gc | ADC_CONMODE_bm;
    64fe:	86 e1       	ldi	r24, 0x16	; 22
    6500:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc;
    6504:	86 e0       	ldi	r24, 0x06	; 6
    6506:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
		/* When differential input is used, signed mode must be used. (sec. 28.6 of Manual) */

		ADCA.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    650a:	83 e0       	ldi	r24, 0x03	; 3
    650c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		ADCA.CH1.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    6510:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
		ADCA.CH2.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_2X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    6514:	87 e0       	ldi	r24, 0x07	; 7
    6516:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
	
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Red sensor on ADC A channel 0
    651a:	8c e2       	ldi	r24, 0x2C	; 44
    651c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
		ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN6_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Green sensor on ADC A channel 1
    6520:	84 e3       	ldi	r24, 0x34	; 52
    6522:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <__TEXT_REGION_LENGTH__+0x700229>
		ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Blue sensor on ADC A channel 2
    6526:	8c e3       	ldi	r24, 0x3C	; 60
    6528:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__TEXT_REGION_LENGTH__+0x700231>
	
		ADCA.CALL = PRODSIGNATURES_ADCACAL0;
    652c:	80 b5       	in	r24, 0x20	; 32
    652e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
		ADCA.CALH = PRODSIGNATURES_ADCACAL1;
    6532:	81 b5       	in	r24, 0x21	; 33
    6534:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>

		ADCA.CTRLA = ADC_ENABLE_bm;
    6538:	81 e0       	ldi	r24, 0x01	; 1
    653a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
    653e:	8f e8       	ldi	r24, 0x8F	; 143
    6540:	91 e0       	ldi	r25, 0x01	; 1
    6542:	01 97       	sbiw	r24, 0x01	; 1
    6544:	f1 f7       	brne	.-4      	; 0x6542 <rgbSensorInit+0x52>
    6546:	00 c0       	rjmp	.+0      	; 0x6548 <rgbSensorInit+0x58>
    6548:	00 00       	nop
	
		//read_color_settings();
	
		delay_us(50);
		const int8_t num_samples = 3;
		getRedSensor(); getBlueSensor(); getGreenSensor();
    654a:	0e 94 d6 31 	call	0x63ac	; 0x63ac <getRedSensor>
    654e:	0e 94 42 32 	call	0x6484	; 0x6484 <getBlueSensor>
    6552:	0e 94 0c 32 	call	0x6418	; 0x6418 <getGreenSensor>
		delayMS(10);
    6556:	8a e0       	ldi	r24, 0x0A	; 10
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    655e:	c0 e0       	ldi	r28, 0x00	; 0
		int16_t r_avg=0, g_avg=0, b_avg=0;
		for(uint8_t i=0; i<num_samples; i++)
		{
			r_avg+=getRedSensor();
    6560:	0e 94 d6 31 	call	0x63ac	; 0x63ac <getRedSensor>
			g_avg+=getGreenSensor();
    6564:	0e 94 0c 32 	call	0x6418	; 0x6418 <getGreenSensor>
			b_avg+=getBlueSensor();
    6568:	0e 94 42 32 	call	0x6484	; 0x6484 <getBlueSensor>
			delayMS(10);
    656c:	8a e0       	ldi	r24, 0x0A	; 10
    656e:	90 e0       	ldi	r25, 0x00	; 0
    6570:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
		delay_us(50);
		const int8_t num_samples = 3;
		getRedSensor(); getBlueSensor(); getGreenSensor();
		delayMS(10);
		int16_t r_avg=0, g_avg=0, b_avg=0;
		for(uint8_t i=0; i<num_samples; i++)
    6574:	cf 5f       	subi	r28, 0xFF	; 255
    6576:	c3 30       	cpi	r28, 0x03	; 3
    6578:	99 f7       	brne	.-26     	; 0x6560 <rgbSensorInit+0x70>
		}
		r_baseline= r_avg/num_samples;
		g_baseline= g_avg/num_samples;
		b_baseline= b_avg/num_samples;
		//printf("Baselines:\r\n%3d  %3d  %3d\r\n", r_baseline, g_baseline, b_baseline);
		r_baseline = 0;
    657a:	10 92 09 24 	sts	0x2409, r1	; 0x802409 <r_baseline>
    657e:	10 92 0a 24 	sts	0x240A, r1	; 0x80240a <r_baseline+0x1>
		g_baseline = 0;
    6582:	10 92 07 24 	sts	0x2407, r1	; 0x802407 <g_baseline>
    6586:	10 92 08 24 	sts	0x2408, r1	; 0x802408 <g_baseline+0x1>
		b_baseline = 0;	
    658a:	10 92 05 24 	sts	0x2405, r1	; 0x802405 <b_baseline>
    658e:	10 92 06 24 	sts	0x2406, r1	; 0x802406 <b_baseline+0x1>
	#endif		
}
    6592:	cf 91       	pop	r28
    6594:	08 95       	ret

00006596 <getRGB>:

#endif


void getRGB(int16_t *r, int16_t *g, int16_t *b)
{
    6596:	af 92       	push	r10
    6598:	bf 92       	push	r11
    659a:	cf 92       	push	r12
    659c:	df 92       	push	r13
    659e:	ef 92       	push	r14
    65a0:	ff 92       	push	r15
    65a2:	0f 93       	push	r16
    65a4:	1f 93       	push	r17
    65a6:	cf 93       	push	r28
    65a8:	df 93       	push	r29
    65aa:	5c 01       	movw	r10, r24
    65ac:	6b 01       	movw	r12, r22
    65ae:	7a 01       	movw	r14, r20
		}
		else printf_P(PSTR("Read failed.\r\n"));
	#else
		int16_t rTemp,gTemp,bTemp;
	
		rTemp = getRedSensor();
    65b0:	0e 94 d6 31 	call	0x63ac	; 0x63ac <getRedSensor>
    65b4:	8c 01       	movw	r16, r24
		gTemp = getGreenSensor();
    65b6:	0e 94 0c 32 	call	0x6418	; 0x6418 <getGreenSensor>
    65ba:	ec 01       	movw	r28, r24
		bTemp = getBlueSensor();		
    65bc:	0e 94 42 32 	call	0x6484	; 0x6484 <getBlueSensor>
		rTemp = rTemp - r_baseline;
    65c0:	20 91 09 24 	lds	r18, 0x2409	; 0x802409 <r_baseline>
    65c4:	30 91 0a 24 	lds	r19, 0x240A	; 0x80240a <r_baseline+0x1>
    65c8:	02 1b       	sub	r16, r18
    65ca:	13 0b       	sbc	r17, r19
		gTemp = gTemp - g_baseline;
    65cc:	20 91 07 24 	lds	r18, 0x2407	; 0x802407 <g_baseline>
    65d0:	30 91 08 24 	lds	r19, 0x2408	; 0x802408 <g_baseline+0x1>
    65d4:	c2 1b       	sub	r28, r18
    65d6:	d3 0b       	sbc	r29, r19
		bTemp = bTemp - b_baseline;
    65d8:	20 91 05 24 	lds	r18, 0x2405	; 0x802405 <b_baseline>
    65dc:	30 91 06 24 	lds	r19, 0x2406	; 0x802406 <b_baseline+0x1>
    65e0:	82 1b       	sub	r24, r18
    65e2:	93 0b       	sbc	r25, r19
		//if(rTemp<0)	rTemp=0;
		//if(gTemp<0)	gTemp=0;
		//if(bTemp<0)	bTemp=0;
		if(r!=NULL) *r = rTemp;
    65e4:	a1 14       	cp	r10, r1
    65e6:	b1 04       	cpc	r11, r1
    65e8:	19 f0       	breq	.+6      	; 0x65f0 <getRGB+0x5a>
    65ea:	f5 01       	movw	r30, r10
    65ec:	00 83       	st	Z, r16
    65ee:	11 83       	std	Z+1, r17	; 0x01
		if(g!=NULL) *g = gTemp;
    65f0:	c1 14       	cp	r12, r1
    65f2:	d1 04       	cpc	r13, r1
    65f4:	19 f0       	breq	.+6      	; 0x65fc <getRGB+0x66>
    65f6:	f6 01       	movw	r30, r12
    65f8:	c0 83       	st	Z, r28
    65fa:	d1 83       	std	Z+1, r29	; 0x01
		if(b!=NULL) *b = bTemp;
    65fc:	e1 14       	cp	r14, r1
    65fe:	f1 04       	cpc	r15, r1
    6600:	19 f0       	breq	.+6      	; 0x6608 <getRGB+0x72>
    6602:	f7 01       	movw	r30, r14
    6604:	80 83       	st	Z, r24
    6606:	91 83       	std	Z+1, r25	; 0x01
	#endif
}
    6608:	df 91       	pop	r29
    660a:	cf 91       	pop	r28
    660c:	1f 91       	pop	r17
    660e:	0f 91       	pop	r16
    6610:	ff 90       	pop	r15
    6612:	ef 90       	pop	r14
    6614:	df 90       	pop	r13
    6616:	cf 90       	pop	r12
    6618:	bf 90       	pop	r11
    661a:	af 90       	pop	r10
    661c:	08 95       	ret

0000661e <scheduler_free>:
	
	return (volatile Task_t*)0xFFFF;

}

static void scheduler_free(volatile Task_t* tgt){
    661e:	cf 93       	push	r28
    6620:	df 93       	push	r29
    6622:	ec 01       	movw	r28, r24
	if((tgt<task_storage_arr)||(tgt>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS])))){
    6624:	84 e2       	ldi	r24, 0x24	; 36
    6626:	cb 30       	cpi	r28, 0x0B	; 11
    6628:	d8 07       	cpc	r29, r24
    662a:	28 f0       	brcs	.+10     	; 0x6636 <scheduler_free+0x18>
    662c:	84 e2       	ldi	r24, 0x24	; 36
    662e:	c7 39       	cpi	r28, 0x97	; 151
    6630:	d8 07       	cpc	r29, r24
    6632:	b1 f0       	breq	.+44     	; 0x6660 <scheduler_free+0x42>
    6634:	a8 f0       	brcs	.+42     	; 0x6660 <scheduler_free+0x42>
		printf_P(PSTR("ERROR: In scheduler_free, tgt (%X) was outside valid Task* range.\r\n"),tgt);
    6636:	df 93       	push	r29
    6638:	cf 93       	push	r28
    663a:	8a ed       	ldi	r24, 0xDA	; 218
    663c:	9b e0       	ldi	r25, 0x0B	; 11
    663e:	9f 93       	push	r25
    6640:	8f 93       	push	r24
    6642:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
		setRGB(0,0,255);
    6646:	4f ef       	ldi	r20, 0xFF	; 255
    6648:	60 e0       	ldi	r22, 0x00	; 0
    664a:	80 e0       	ldi	r24, 0x00	; 0
    664c:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
		delayMS(60000);
    6650:	80 e6       	ldi	r24, 0x60	; 96
    6652:	9a ee       	ldi	r25, 0xEA	; 234
    6654:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    6658:	0f 90       	pop	r0
    665a:	0f 90       	pop	r0
    665c:	0f 90       	pop	r0
    665e:	0f 90       	pop	r0
	}
	tgt->arg = 0;
    6660:	1a 86       	std	Y+10, r1	; 0x0a
    6662:	1b 86       	std	Y+11, r1	; 0x0b
	tgt->period = 0;
    6664:	1c 82       	std	Y+4, r1	; 0x04
    6666:	1d 82       	std	Y+5, r1	; 0x05
    6668:	1e 82       	std	Y+6, r1	; 0x06
    666a:	1f 82       	std	Y+7, r1	; 0x07
	(tgt->func).noarg_func = ((void (*)(void))NULL);
    666c:	18 86       	std	Y+8, r1	; 0x08
    666e:	19 86       	std	Y+9, r1	; 0x09
	tgt->scheduled_time = 0;
    6670:	18 82       	st	Y, r1
    6672:	19 82       	std	Y+1, r1	; 0x01
    6674:	1a 82       	std	Y+2, r1	; 0x02
    6676:	1b 82       	std	Y+3, r1	; 0x03
	tgt->next = NULL;
    6678:	1c 86       	std	Y+12, r1	; 0x0c
    667a:	1d 86       	std	Y+13, r1	; 0x0d
}
    667c:	df 91       	pop	r29
    667e:	cf 91       	pop	r28
    6680:	08 95       	ret

00006682 <schedulerInit>:

void schedulerInit(){
    6682:	0f 93       	push	r16
    6684:	1f 93       	push	r17
    6686:	cf 93       	push	r28
    6688:	df 93       	push	r29
	task_list = NULL;
    668a:	10 92 c1 26 	sts	0x26C1, r1	; 0x8026c1 <task_list>
    668e:	10 92 c2 26 	sts	0x26C2, r1	; 0x8026c2 <task_list+0x1>
	num_tasks = 0;
    6692:	10 92 a9 24 	sts	0x24A9, r1	; 0x8024a9 <num_tasks>
	task_executing = 0;
    6696:	10 92 bc 26 	sts	0x26BC, r1	; 0x8026bc <task_executing>
    669a:	cb e0       	ldi	r28, 0x0B	; 11
    669c:	d4 e2       	ldi	r29, 0x24	; 36
    669e:	07 e9       	ldi	r16, 0x97	; 151
    66a0:	14 e2       	ldi	r17, 0x24	; 36
	for(uint8_t i=0; i<MAX_NUM_SCHEDULED_TASKS; i++) scheduler_free(&task_storage_arr[i]);
    66a2:	ce 01       	movw	r24, r28
    66a4:	0e 94 0f 33 	call	0x661e	; 0x661e <scheduler_free>
    66a8:	2e 96       	adiw	r28, 0x0e	; 14
    66aa:	0c 17       	cp	r16, r28
    66ac:	1d 07       	cpc	r17, r29
    66ae:	c9 f7       	brne	.-14     	; 0x66a2 <schedulerInit+0x20>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){  // Disable interrupts during initialization
    66b0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    66b2:	f8 94       	cli
		// Set up real-time clock
		rtc_epoch = 0;
    66b4:	10 92 99 24 	sts	0x2499, r1	; 0x802499 <rtc_epoch>
    66b8:	10 92 9a 24 	sts	0x249A, r1	; 0x80249a <rtc_epoch+0x1>
		CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    66bc:	85 e0       	ldi	r24, 0x05	; 5
    66be:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
		RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;		// High level overflow interrupt to increment the epoch counter
    66c2:	83 e0       	ldi	r24, 0x03	; 3
    66c4:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    66c8:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    66cc:	80 fd       	sbrc	r24, 0
    66ce:	fc cf       	rjmp	.-8      	; 0x66c8 <schedulerInit+0x46>
		RTC.PER = 0xFFFF;
    66d0:	2f ef       	ldi	r18, 0xFF	; 255
    66d2:	3f ef       	ldi	r19, 0xFF	; 255
    66d4:	20 93 0a 04 	sts	0x040A, r18	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    66d8:	30 93 0b 04 	sts	0x040B, r19	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    66dc:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    66e0:	80 fd       	sbrc	r24, 0
    66e2:	fc cf       	rjmp	.-8      	; 0x66dc <schedulerInit+0x5a>
		RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    66e4:	81 e0       	ldi	r24, 0x01	; 1
    66e6:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    66ea:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    66ee:	80 fd       	sbrc	r24, 0
    66f0:	fc cf       	rjmp	.-8      	; 0x66ea <schedulerInit+0x68>
		RTC.CNT = 0;
    66f2:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    66f6:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    66fa:	9f bf       	out	0x3f, r25	; 63
	}
}
    66fc:	df 91       	pop	r29
    66fe:	cf 91       	pop	r28
    6700:	1f 91       	pop	r17
    6702:	0f 91       	pop	r16
    6704:	08 95       	ret

00006706 <taskListCleanup>:

//This function checks for errors or inconsistencies in the task list, and attempts to correct them.
void taskListCleanup(){
    6706:	cf 92       	push	r12
    6708:	df 92       	push	r13
    670a:	ef 92       	push	r14
    670c:	ff 92       	push	r15
    670e:	0f 93       	push	r16
    6710:	1f 93       	push	r17
    6712:	cf 93       	push	r28
    6714:	df 93       	push	r29
	printf_P(PSTR("\tAttempting to restore task_list.\r\n\tIf you only see this message rarely, don't worry too much.\r\n"));
    6716:	89 e7       	ldi	r24, 0x79	; 121
    6718:	9b e0       	ldi	r25, 0x0B	; 11
    671a:	9f 93       	push	r25
    671c:	8f 93       	push	r24
    671e:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
	volatile Task_t* cur_task = task_list;
    6722:	c0 91 c1 26 	lds	r28, 0x26C1	; 0x8026c1 <task_list>
    6726:	d0 91 c2 26 	lds	r29, 0x26C2	; 0x8026c2 <task_list+0x1>
	//volatile Task_t* prev_task;
	uint32_t nextTime = getTime()+500;
    672a:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    672e:	ab 01       	movw	r20, r22
    6730:	bc 01       	movw	r22, r24
    6732:	4c 50       	subi	r20, 0x0C	; 12
    6734:	5e 4f       	sbci	r21, 0xFE	; 254
    6736:	6f 4f       	sbci	r22, 0xFF	; 255
    6738:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    673a:	ef b7       	in	r30, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    673c:	f8 94       	cli
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    673e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6742:	8b 7f       	andi	r24, 0xFB	; 251
    6744:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		while (cur_task != NULL){
    6748:	0f 90       	pop	r0
    674a:	0f 90       	pop	r0
    674c:	20 97       	sbiw	r28, 0x00	; 0
    674e:	99 f1       	breq	.+102    	; 0x67b6 <taskListCleanup+0xb0>
			cur_task->scheduled_time = nextTime;
    6750:	48 83       	st	Y, r20
    6752:	59 83       	std	Y+1, r21	; 0x01
    6754:	6a 83       	std	Y+2, r22	; 0x02
    6756:	7b 83       	std	Y+3, r23	; 0x03
			if(first){
				if (cur_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    6758:	c8 80       	ld	r12, Y
    675a:	d9 80       	ldd	r13, Y+1	; 0x01
    675c:	ea 80       	ldd	r14, Y+2	; 0x02
    675e:	fb 80       	ldd	r15, Y+3	; 0x03
    6760:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <rtc_epoch>
    6764:	90 91 9a 24 	lds	r25, 0x249A	; 0x80249a <rtc_epoch+0x1>
    6768:	00 91 0a 04 	lds	r16, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    676c:	10 91 0b 04 	lds	r17, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    6770:	a0 e0       	ldi	r26, 0x00	; 0
    6772:	b0 e0       	ldi	r27, 0x00	; 0
    6774:	dc 01       	movw	r26, r24
    6776:	99 27       	eor	r25, r25
    6778:	88 27       	eor	r24, r24
    677a:	20 e0       	ldi	r18, 0x00	; 0
    677c:	30 e0       	ldi	r19, 0x00	; 0
    677e:	80 2b       	or	r24, r16
    6780:	91 2b       	or	r25, r17
    6782:	a2 2b       	or	r26, r18
    6784:	b3 2b       	or	r27, r19
    6786:	8c 15       	cp	r24, r12
    6788:	9d 05       	cpc	r25, r13
    678a:	ae 05       	cpc	r26, r14
    678c:	bf 05       	cpc	r27, r15
    678e:	e8 f4       	brcc	.+58     	; 0x67ca <taskListCleanup+0xc4>
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
					RTC.COMP = ((uint16_t)(cur_task->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    6790:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6794:	8b 7f       	andi	r24, 0xFB	; 251
    6796:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    679a:	04 c0       	rjmp	.+8      	; 0x67a4 <taskListCleanup+0x9e>
	uint32_t nextTime = getTime()+500;
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
			cur_task->scheduled_time = nextTime;
    679c:	48 83       	st	Y, r20
    679e:	59 83       	std	Y+1, r21	; 0x01
    67a0:	6a 83       	std	Y+2, r22	; 0x02
    67a2:	7b 83       	std	Y+3, r23	; 0x03
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
				}
				first = 0;
			}
			nextTime += 500;
    67a4:	4c 50       	subi	r20, 0x0C	; 12
    67a6:	5e 4f       	sbci	r21, 0xFE	; 254
    67a8:	6f 4f       	sbci	r22, 0xFF	; 255
    67aa:	7f 4f       	sbci	r23, 0xFF	; 255
			cur_task = cur_task->next;
    67ac:	0c 84       	ldd	r0, Y+12	; 0x0c
    67ae:	dd 85       	ldd	r29, Y+13	; 0x0d
    67b0:	c0 2d       	mov	r28, r0
	//volatile Task_t* prev_task;
	uint32_t nextTime = getTime()+500;
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
    67b2:	20 97       	sbiw	r28, 0x00	; 0
    67b4:	99 f7       	brne	.-26     	; 0x679c <taskListCleanup+0x96>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    67b6:	ef bf       	out	0x3f, r30	; 63
			}
			nextTime += 500;
			cur_task = cur_task->next;
		}
	}
}
    67b8:	df 91       	pop	r29
    67ba:	cf 91       	pop	r28
    67bc:	1f 91       	pop	r17
    67be:	0f 91       	pop	r16
    67c0:	ff 90       	pop	r15
    67c2:	ef 90       	pop	r14
    67c4:	df 90       	pop	r13
    67c6:	cf 90       	pop	r12
    67c8:	08 95       	ret
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
			cur_task->scheduled_time = nextTime;
			if(first){
				if (cur_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    67ca:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    67ce:	80 fd       	sbrc	r24, 0
    67d0:	fc cf       	rjmp	.-8      	; 0x67ca <taskListCleanup+0xc4>
					RTC.COMP = ((uint16_t)(cur_task->scheduled_time))|0x8;
    67d2:	88 81       	ld	r24, Y
    67d4:	99 81       	ldd	r25, Y+1	; 0x01
    67d6:	aa 81       	ldd	r26, Y+2	; 0x02
    67d8:	bb 81       	ldd	r27, Y+3	; 0x03
    67da:	88 60       	ori	r24, 0x08	; 8
    67dc:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    67e0:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    67e4:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    67e8:	84 60       	ori	r24, 0x04	; 4
    67ea:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    67ee:	da cf       	rjmp	.-76     	; 0x67a4 <taskListCleanup+0x9e>

000067f0 <removeTask>:
		//task_list_checkup();
	}
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
    67f0:	cf 93       	push	r28
    67f2:	dc 01       	movw	r26, r24
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
    67f4:	84 e2       	ldi	r24, 0x24	; 36
    67f6:	ab 30       	cpi	r26, 0x0B	; 11
    67f8:	b8 07       	cpc	r27, r24
    67fa:	90 f1       	brcs	.+100    	; 0x6860 <removeTask+0x70>
    67fc:	84 e2       	ldi	r24, 0x24	; 36
    67fe:	a9 38       	cpi	r26, 0x89	; 137
    6800:	b8 07       	cpc	r27, r24
    6802:	09 f0       	breq	.+2      	; 0x6806 <removeTask+0x16>
    6804:	68 f5       	brcc	.+90     	; 0x6860 <removeTask+0x70>
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
		return;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6806:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6808:	f8 94       	cli
		if(task==NULL){
    680a:	10 97       	sbiw	r26, 0x00	; 0
    680c:	31 f1       	breq	.+76     	; 0x685a <removeTask+0x6a>
			continue;
		}
		if(task_list==task)	{
    680e:	e0 91 c1 26 	lds	r30, 0x26C1	; 0x8026c1 <task_list>
    6812:	f0 91 c2 26 	lds	r31, 0x26C2	; 0x8026c2 <task_list+0x1>
    6816:	ae 17       	cp	r26, r30
    6818:	bf 07       	cpc	r27, r31
    681a:	49 f4       	brne	.+18     	; 0x682e <removeTask+0x3e>
    681c:	26 c0       	rjmp	.+76     	; 0x686a <removeTask+0x7a>
			task_list=task->next;
			num_tasks--;
		}else{
			volatile Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    681e:	24 85       	ldd	r18, Z+12	; 0x0c
    6820:	35 85       	ldd	r19, Z+13	; 0x0d
    6822:	a2 17       	cp	r26, r18
    6824:	b3 07       	cpc	r27, r19
    6826:	39 f0       	breq	.+14     	; 0x6836 <removeTask+0x46>
    6828:	04 84       	ldd	r0, Z+12	; 0x0c
    682a:	f5 85       	ldd	r31, Z+13	; 0x0d
    682c:	e0 2d       	mov	r30, r0
    682e:	24 85       	ldd	r18, Z+12	; 0x0c
    6830:	35 85       	ldd	r19, Z+13	; 0x0d
    6832:	23 2b       	or	r18, r19
    6834:	a1 f7       	brne	.-24     	; 0x681e <removeTask+0x2e>
			if (tmp_task->next != NULL){
    6836:	24 85       	ldd	r18, Z+12	; 0x0c
    6838:	35 85       	ldd	r19, Z+13	; 0x0d
    683a:	23 2b       	or	r18, r19
    683c:	59 f0       	breq	.+22     	; 0x6854 <removeTask+0x64>
				tmp_task->next = task->next;
    683e:	1c 96       	adiw	r26, 0x0c	; 12
    6840:	2d 91       	ld	r18, X+
    6842:	3c 91       	ld	r19, X
    6844:	1d 97       	sbiw	r26, 0x0d	; 13
    6846:	24 87       	std	Z+12, r18	; 0x0c
    6848:	35 87       	std	Z+13, r19	; 0x0d
				num_tasks--;
    684a:	20 91 a9 24 	lds	r18, 0x24A9	; 0x8024a9 <num_tasks>
    684e:	21 50       	subi	r18, 0x01	; 1
    6850:	20 93 a9 24 	sts	0x24A9, r18	; 0x8024a9 <num_tasks>
    6854:	cd 01       	movw	r24, r26
			}
		}
		scheduler_free(task);		
    6856:	0e 94 0f 33 	call	0x661e	; 0x661e <scheduler_free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    685a:	cf bf       	out	0x3f, r28	; 63
	}
}
    685c:	cf 91       	pop	r28
    685e:	08 95       	ret
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    6860:	88 e2       	ldi	r24, 0x28	; 40
    6862:	92 e2       	ldi	r25, 0x22	; 34
				num_tasks--;
			}
		}
		scheduler_free(task);		
	}
}
    6864:	cf 91       	pop	r28
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    6866:	0c 94 db 50 	jmp	0xa1b6	; 0xa1b6 <puts>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		if(task==NULL){
			continue;
		}
		if(task_list==task)	{
			task_list=task->next;
    686a:	1c 96       	adiw	r26, 0x0c	; 12
    686c:	2d 91       	ld	r18, X+
    686e:	3c 91       	ld	r19, X
    6870:	1d 97       	sbiw	r26, 0x0d	; 13
    6872:	20 93 c1 26 	sts	0x26C1, r18	; 0x8026c1 <task_list>
    6876:	30 93 c2 26 	sts	0x26C2, r19	; 0x8026c2 <task_list+0x1>
			num_tasks--;
    687a:	20 91 a9 24 	lds	r18, 0x24A9	; 0x8024a9 <num_tasks>
    687e:	21 50       	subi	r18, 0x01	; 1
    6880:	20 93 a9 24 	sts	0x24A9, r18	; 0x8024a9 <num_tasks>
    6884:	e7 cf       	rjmp	.-50     	; 0x6854 <removeTask+0x64>

00006886 <printTaskQueue>:
		}
		scheduler_free(task);		
	}
}

void printTaskQueue(){
    6886:	bf 92       	push	r11
    6888:	cf 92       	push	r12
    688a:	df 92       	push	r13
    688c:	ef 92       	push	r14
    688e:	ff 92       	push	r15
    6890:	0f 93       	push	r16
    6892:	1f 93       	push	r17
    6894:	cf 93       	push	r28
    6896:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){  // Disable interrupts during printing
    6898:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    689a:	f8 94       	cli
		volatile Task_t* cur_task = task_list;
    689c:	c0 91 c1 26 	lds	r28, 0x26C1	; 0x8026c1 <task_list>
    68a0:	d0 91 c2 26 	lds	r29, 0x26C2	; 0x8026c2 <task_list+0x1>
		
		printf_P(PSTR("Task Queue (%hu tasks, %hu executing):\r\n"), num_tasks, task_executing);
    68a4:	90 91 bc 26 	lds	r25, 0x26BC	; 0x8026bc <task_executing>
    68a8:	80 91 a9 24 	lds	r24, 0x24A9	; 0x8024a9 <num_tasks>
    68ac:	1f 92       	push	r1
    68ae:	9f 93       	push	r25
    68b0:	1f 92       	push	r1
    68b2:	8f 93       	push	r24
    68b4:	87 ef       	ldi	r24, 0xF7	; 247
    68b6:	99 e0       	ldi	r25, 0x09	; 9
    68b8:	9f 93       	push	r25
    68ba:	8f 93       	push	r24
    68bc:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL){
    68c0:	0f 90       	pop	r0
    68c2:	0f 90       	pop	r0
    68c4:	0f 90       	pop	r0
    68c6:	0f 90       	pop	r0
    68c8:	0f 90       	pop	r0
    68ca:	0f 90       	pop	r0
    68cc:	20 97       	sbiw	r28, 0x00	; 0
    68ce:	a1 f1       	breq	.+104    	; 0x6938 <printTaskQueue+0xb2>
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_func, cur_task->scheduled_time, cur_task->period, getTime());
    68d0:	09 eb       	ldi	r16, 0xB9	; 185
    68d2:	19 e0       	ldi	r17, 0x09	; 9
    68d4:	05 c0       	rjmp	.+10     	; 0x68e0 <printTaskQueue+0x5a>
			if(cur_task==cur_task->next) break;
			cur_task = cur_task->next;
    68d6:	0c 84       	ldd	r0, Y+12	; 0x0c
    68d8:	dd 85       	ldd	r29, Y+13	; 0x0d
    68da:	c0 2d       	mov	r28, r0
		volatile Task_t* cur_task = task_list;
		
		printf_P(PSTR("Task Queue (%hu tasks, %hu executing):\r\n"), num_tasks, task_executing);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL){
    68dc:	20 97       	sbiw	r28, 0x00	; 0
    68de:	61 f1       	breq	.+88     	; 0x6938 <printTaskQueue+0xb2>
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_func, cur_task->scheduled_time, cur_task->period, getTime());
    68e0:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    68e4:	fb 01       	movw	r30, r22
    68e6:	cc 80       	ldd	r12, Y+4	; 0x04
    68e8:	dd 80       	ldd	r13, Y+5	; 0x05
    68ea:	ee 80       	ldd	r14, Y+6	; 0x06
    68ec:	ff 80       	ldd	r15, Y+7	; 0x07
    68ee:	48 81       	ld	r20, Y
    68f0:	59 81       	ldd	r21, Y+1	; 0x01
    68f2:	6a 81       	ldd	r22, Y+2	; 0x02
    68f4:	7b 81       	ldd	r23, Y+3	; 0x03
    68f6:	28 85       	ldd	r18, Y+8	; 0x08
    68f8:	39 85       	ldd	r19, Y+9	; 0x09
    68fa:	9f 93       	push	r25
    68fc:	8f 93       	push	r24
    68fe:	ff 93       	push	r31
    6900:	ef 93       	push	r30
    6902:	ff 92       	push	r15
    6904:	ef 92       	push	r14
    6906:	df 92       	push	r13
    6908:	cf 92       	push	r12
    690a:	7f 93       	push	r23
    690c:	6f 93       	push	r22
    690e:	5f 93       	push	r21
    6910:	4f 93       	push	r20
    6912:	3f 93       	push	r19
    6914:	2f 93       	push	r18
    6916:	df 93       	push	r29
    6918:	cf 93       	push	r28
    691a:	1f 93       	push	r17
    691c:	0f 93       	push	r16
    691e:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
			if(cur_task==cur_task->next) break;
    6922:	8c 85       	ldd	r24, Y+12	; 0x0c
    6924:	9d 85       	ldd	r25, Y+13	; 0x0d
    6926:	2d b7       	in	r18, 0x3d	; 61
    6928:	3e b7       	in	r19, 0x3e	; 62
    692a:	2e 5e       	subi	r18, 0xEE	; 238
    692c:	3f 4f       	sbci	r19, 0xFF	; 255
    692e:	2d bf       	out	0x3d, r18	; 61
    6930:	3e bf       	out	0x3e, r19	; 62
    6932:	8c 17       	cp	r24, r28
    6934:	9d 07       	cpc	r25, r29
    6936:	79 f6       	brne	.-98     	; 0x68d6 <printTaskQueue+0x50>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6938:	bf be       	out	0x3f, r11	; 63
			cur_task = cur_task->next;
		}
	}
}
    693a:	df 91       	pop	r29
    693c:	cf 91       	pop	r28
    693e:	1f 91       	pop	r17
    6940:	0f 91       	pop	r16
    6942:	ff 90       	pop	r15
    6944:	ef 90       	pop	r14
    6946:	df 90       	pop	r13
    6948:	cf 90       	pop	r12
    694a:	bf 90       	pop	r11
    694c:	08 95       	ret

0000694e <add_task_to_list>:
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
}

static void add_task_to_list(volatile Task_t* task){
    694e:	8f 92       	push	r8
    6950:	9f 92       	push	r9
    6952:	af 92       	push	r10
    6954:	bf 92       	push	r11
    6956:	ff 92       	push	r15
    6958:	0f 93       	push	r16
    695a:	1f 93       	push	r17
    695c:	cf 93       	push	r28
    695e:	df 93       	push	r29
    6960:	dc 01       	movw	r26, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6962:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6964:	f8 94       	cli
		// Find the new task's proper spot in the list of tasks
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
    6966:	e0 91 c1 26 	lds	r30, 0x26C1	; 0x8026c1 <task_list>
    696a:	f0 91 c2 26 	lds	r31, 0x26C2	; 0x8026c2 <task_list+0x1>
    696e:	1c 96       	adiw	r26, 0x0c	; 12
    6970:	ed 93       	st	X+, r30
    6972:	fc 93       	st	X, r31
    6974:	1d 97       	sbiw	r26, 0x0d	; 13
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
    6976:	30 97       	sbiw	r30, 0x00	; 0
    6978:	09 f4       	brne	.+2      	; 0x697c <add_task_to_list+0x2e>
    697a:	48 c0       	rjmp	.+144    	; 0x6a0c <add_task_to_list+0xbe>
    697c:	0d 91       	ld	r16, X+
    697e:	1d 91       	ld	r17, X+
    6980:	2d 91       	ld	r18, X+
    6982:	3c 91       	ld	r19, X
    6984:	13 97       	sbiw	r26, 0x03	; 3
    6986:	40 81       	ld	r20, Z
    6988:	51 81       	ldd	r21, Z+1	; 0x01
    698a:	62 81       	ldd	r22, Z+2	; 0x02
    698c:	73 81       	ldd	r23, Z+3	; 0x03
    698e:	40 17       	cp	r20, r16
    6990:	51 07       	cpc	r21, r17
    6992:	62 07       	cpc	r22, r18
    6994:	73 07       	cpc	r23, r19
    6996:	d0 f5       	brcc	.+116    	; 0x6a0c <add_task_to_list+0xbe>
			}
		}else{
			// If the new task is not the next to be executed, iterate through the task_list,
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
    6998:	84 85       	ldd	r24, Z+12	; 0x0c
    699a:	95 85       	ldd	r25, Z+13	; 0x0d
    699c:	89 2b       	or	r24, r25
    699e:	71 f4       	brne	.+28     	; 0x69bc <add_task_to_list+0x6e>
    69a0:	1d c0       	rjmp	.+58     	; 0x69dc <add_task_to_list+0x8e>
				if(tmp_task_ptr->next==tmp_task_ptr){
    69a2:	84 85       	ldd	r24, Z+12	; 0x0c
    69a4:	95 85       	ldd	r25, Z+13	; 0x0d
    69a6:	8e 17       	cp	r24, r30
    69a8:	9f 07       	cpc	r25, r31
    69aa:	09 f4       	brne	.+2      	; 0x69ae <add_task_to_list+0x60>
    69ac:	6e c0       	rjmp	.+220    	; 0x6a8a <add_task_to_list+0x13c>
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_func, task->scheduled_time, task->period, getTime());
					printTaskQueue();
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
    69ae:	04 84       	ldd	r0, Z+12	; 0x0c
    69b0:	f5 85       	ldd	r31, Z+13	; 0x0d
    69b2:	e0 2d       	mov	r30, r0
			}
		}else{
			// If the new task is not the next to be executed, iterate through the task_list,
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
    69b4:	24 85       	ldd	r18, Z+12	; 0x0c
    69b6:	35 85       	ldd	r19, Z+13	; 0x0d
    69b8:	23 2b       	or	r18, r19
    69ba:	81 f0       	breq	.+32     	; 0x69dc <add_task_to_list+0x8e>
    69bc:	0d 91       	ld	r16, X+
    69be:	1d 91       	ld	r17, X+
    69c0:	2d 91       	ld	r18, X+
    69c2:	3c 91       	ld	r19, X
    69c4:	13 97       	sbiw	r26, 0x03	; 3
    69c6:	c4 85       	ldd	r28, Z+12	; 0x0c
    69c8:	d5 85       	ldd	r29, Z+13	; 0x0d
    69ca:	48 81       	ld	r20, Y
    69cc:	59 81       	ldd	r21, Y+1	; 0x01
    69ce:	6a 81       	ldd	r22, Y+2	; 0x02
    69d0:	7b 81       	ldd	r23, Y+3	; 0x03
    69d2:	40 17       	cp	r20, r16
    69d4:	51 07       	cpc	r21, r17
    69d6:	62 07       	cpc	r22, r18
    69d8:	73 07       	cpc	r23, r19
    69da:	18 f3       	brcs	.-58     	; 0x69a2 <add_task_to_list+0x54>
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
			}
			//set_rgb(r, g, b);
			task->next = tmp_task_ptr->next;
    69dc:	84 85       	ldd	r24, Z+12	; 0x0c
    69de:	95 85       	ldd	r25, Z+13	; 0x0d
    69e0:	1c 96       	adiw	r26, 0x0c	; 12
    69e2:	8d 93       	st	X+, r24
    69e4:	9c 93       	st	X, r25
    69e6:	1d 97       	sbiw	r26, 0x0d	; 13
			tmp_task_ptr->next = task;
    69e8:	a4 87       	std	Z+12, r26	; 0x0c
    69ea:	b5 87       	std	Z+13, r27	; 0x0d
			//while (RTC.STATUS & RTC_SYNCBUSY_bm);
			//RTC.COMP = RTC.CNT+5;
			//RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		//}

		num_tasks++;
    69ec:	80 91 a9 24 	lds	r24, 0x24A9	; 0x8024a9 <num_tasks>
    69f0:	8f 5f       	subi	r24, 0xFF	; 255
    69f2:	80 93 a9 24 	sts	0x24A9, r24	; 0x8024a9 <num_tasks>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    69f6:	ff be       	out	0x3f, r15	; 63
		
		//task_list_checkup();
	}
}
    69f8:	df 91       	pop	r29
    69fa:	cf 91       	pop	r28
    69fc:	1f 91       	pop	r17
    69fe:	0f 91       	pop	r16
    6a00:	ff 90       	pop	r15
    6a02:	bf 90       	pop	r11
    6a04:	af 90       	pop	r10
    6a06:	9f 90       	pop	r9
    6a08:	8f 90       	pop	r8
    6a0a:	08 95       	ret
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
			task_list = task;
    6a0c:	a0 93 c1 26 	sts	0x26C1, r26	; 0x8026c1 <task_list>
    6a10:	b0 93 c2 26 	sts	0x26C2, r27	; 0x8026c2 <task_list+0x1>
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0){			
    6a14:	80 91 bc 26 	lds	r24, 0x26BC	; 0x8026bc <task_executing>
    6a18:	81 11       	cpse	r24, r1
    6a1a:	e8 cf       	rjmp	.-48     	; 0x69ec <add_task_to_list+0x9e>
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    6a1c:	8d 90       	ld	r8, X+
    6a1e:	9d 90       	ld	r9, X+
    6a20:	ad 90       	ld	r10, X+
    6a22:	bc 90       	ld	r11, X
    6a24:	13 97       	sbiw	r26, 0x03	; 3
    6a26:	40 91 99 24 	lds	r20, 0x2499	; 0x802499 <rtc_epoch>
    6a2a:	50 91 9a 24 	lds	r21, 0x249A	; 0x80249a <rtc_epoch+0x1>
    6a2e:	00 91 0a 04 	lds	r16, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    6a32:	10 91 0b 04 	lds	r17, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    6a36:	60 e0       	ldi	r22, 0x00	; 0
    6a38:	70 e0       	ldi	r23, 0x00	; 0
    6a3a:	ba 01       	movw	r22, r20
    6a3c:	55 27       	eor	r21, r21
    6a3e:	44 27       	eor	r20, r20
    6a40:	20 e0       	ldi	r18, 0x00	; 0
    6a42:	30 e0       	ldi	r19, 0x00	; 0
    6a44:	40 2b       	or	r20, r16
    6a46:	51 2b       	or	r21, r17
    6a48:	62 2b       	or	r22, r18
    6a4a:	73 2b       	or	r23, r19
    6a4c:	48 15       	cp	r20, r8
    6a4e:	59 05       	cpc	r21, r9
    6a50:	6a 05       	cpc	r22, r10
    6a52:	7b 05       	cpc	r23, r11
    6a54:	30 f4       	brcc	.+12     	; 0x6a62 <add_task_to_list+0x114>
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;					
    6a56:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6a5a:	8b 7f       	andi	r24, 0xFB	; 251
    6a5c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6a60:	c5 cf       	rjmp	.-118    	; 0x69ec <add_task_to_list+0x9e>
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
			task_list = task;
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0){			
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6a62:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6a66:	80 fd       	sbrc	r24, 0
    6a68:	fc cf       	rjmp	.-8      	; 0x6a62 <add_task_to_list+0x114>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    6a6a:	8d 91       	ld	r24, X+
    6a6c:	9d 91       	ld	r25, X+
    6a6e:	0d 90       	ld	r0, X+
    6a70:	bc 91       	ld	r27, X
    6a72:	a0 2d       	mov	r26, r0
    6a74:	88 60       	ori	r24, 0x08	; 8
    6a76:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    6a7a:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    6a7e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6a82:	84 60       	ori	r24, 0x04	; 4
    6a84:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6a88:	b1 cf       	rjmp	.-158    	; 0x69ec <add_task_to_list+0x9e>
    6a8a:	ed 01       	movw	r28, r26
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
				if(tmp_task_ptr->next==tmp_task_ptr){
					//set_rgb(255, 50, 0);
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
    6a8c:	81 e6       	ldi	r24, 0x61	; 97
    6a8e:	9a e0       	ldi	r25, 0x0A	; 10
    6a90:	9f 93       	push	r25
    6a92:	8f 93       	push	r24
    6a94:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_func, task->scheduled_time, task->period, getTime());
    6a98:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    6a9c:	db 01       	movw	r26, r22
    6a9e:	0c 81       	ldd	r16, Y+4	; 0x04
    6aa0:	1d 81       	ldd	r17, Y+5	; 0x05
    6aa2:	2e 81       	ldd	r18, Y+6	; 0x06
    6aa4:	3f 81       	ldd	r19, Y+7	; 0x07
    6aa6:	48 81       	ld	r20, Y
    6aa8:	59 81       	ldd	r21, Y+1	; 0x01
    6aaa:	6a 81       	ldd	r22, Y+2	; 0x02
    6aac:	7b 81       	ldd	r23, Y+3	; 0x03
    6aae:	e8 85       	ldd	r30, Y+8	; 0x08
    6ab0:	f9 85       	ldd	r31, Y+9	; 0x09
    6ab2:	9f 93       	push	r25
    6ab4:	8f 93       	push	r24
    6ab6:	bf 93       	push	r27
    6ab8:	af 93       	push	r26
    6aba:	3f 93       	push	r19
    6abc:	2f 93       	push	r18
    6abe:	1f 93       	push	r17
    6ac0:	0f 93       	push	r16
    6ac2:	7f 93       	push	r23
    6ac4:	6f 93       	push	r22
    6ac6:	5f 93       	push	r21
    6ac8:	4f 93       	push	r20
    6aca:	ff 93       	push	r31
    6acc:	ef 93       	push	r30
    6ace:	df 93       	push	r29
    6ad0:	cf 93       	push	r28
    6ad2:	80 e2       	ldi	r24, 0x20	; 32
    6ad4:	9a e0       	ldi	r25, 0x0A	; 10
    6ad6:	9f 93       	push	r25
    6ad8:	8f 93       	push	r24
    6ada:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
					printTaskQueue();
    6ade:	0e 94 43 34 	call	0x6886	; 0x6886 <printTaskQueue>
    6ae2:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    6ae4:	8d b7       	in	r24, 0x3d	; 61
    6ae6:	9e b7       	in	r25, 0x3e	; 62
    6ae8:	44 96       	adiw	r24, 0x14	; 20
    6aea:	8d bf       	out	0x3d, r24	; 61
    6aec:	9e bf       	out	0x3e, r25	; 62
    6aee:	84 cf       	rjmp	.-248    	; 0x69f8 <add_task_to_list+0xaa>

00006af0 <schedule_task_absolute_time>:
	volatile Task_t* new_task = schedule_task_absolute_time(time, function, arg);
	new_task->period = period;
	return new_task;
}

volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
    6af0:	9f 92       	push	r9
    6af2:	af 92       	push	r10
    6af4:	bf 92       	push	r11
    6af6:	cf 92       	push	r12
    6af8:	df 92       	push	r13
    6afa:	ef 92       	push	r14
    6afc:	ff 92       	push	r15
    6afe:	0f 93       	push	r16
    6b00:	1f 93       	push	r17
    6b02:	cf 93       	push	r28
    6b04:	df 93       	push	r29
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6b06:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6b08:	f8 94       	cli
static volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg);
static void add_task_to_list(volatile Task_t* task);
static int8_t run_tasks(void);

static volatile Task_t* scheduler_malloc(void){
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
    6b0a:	e0 91 a9 24 	lds	r30, 0x24A9	; 0x8024a9 <num_tasks>
    6b0e:	ea 30       	cpi	r30, 0x0A	; 10
    6b10:	08 f0       	brcs	.+2      	; 0x6b14 <schedule_task_absolute_time+0x24>
    6b12:	69 c0       	rjmp	.+210    	; 0x6be6 <schedule_task_absolute_time+0xf6>
    6b14:	89 01       	movw	r16, r18
    6b16:	5a 01       	movw	r10, r20
    6b18:	6b 01       	movw	r12, r22
    6b1a:	7c 01       	movw	r14, r24
    6b1c:	80 e0       	ldi	r24, 0x00	; 0
    6b1e:	90 e0       	ldi	r25, 0x00	; 0

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
		//This code assumes that all tasks will have non-null function pointers.
		if((task_storage_arr[tmp].func.noarg_func) == NULL){
    6b20:	9c 01       	movw	r18, r24
    6b22:	22 0f       	add	r18, r18
    6b24:	33 1f       	adc	r19, r19
    6b26:	f9 01       	movw	r30, r18
    6b28:	ee 0f       	add	r30, r30
    6b2a:	ff 1f       	adc	r31, r31
    6b2c:	ee 0f       	add	r30, r30
    6b2e:	ff 1f       	adc	r31, r31
    6b30:	ee 0f       	add	r30, r30
    6b32:	ff 1f       	adc	r31, r31
    6b34:	e2 1b       	sub	r30, r18
    6b36:	f3 0b       	sbc	r31, r19
    6b38:	e5 5f       	subi	r30, 0xF5	; 245
    6b3a:	fb 4d       	sbci	r31, 0xDB	; 219
    6b3c:	20 85       	ldd	r18, Z+8	; 0x08
    6b3e:	31 85       	ldd	r19, Z+9	; 0x09
    6b40:	23 2b       	or	r18, r19
    6b42:	59 f1       	breq	.+86     	; 0x6b9a <schedule_task_absolute_time+0xaa>
    6b44:	01 96       	adiw	r24, 0x01	; 1
static int8_t run_tasks(void);

static volatile Task_t* scheduler_malloc(void){
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
    6b46:	8a 30       	cpi	r24, 0x0A	; 10
    6b48:	91 05       	cpc	r25, r1
    6b4a:	51 f7       	brne	.-44     	; 0x6b20 <schedule_task_absolute_time+0x30>
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
    6b4c:	81 e1       	ldi	r24, 0x11	; 17
    6b4e:	9b e0       	ldi	r25, 0x0B	; 11
    6b50:	9f 93       	push	r25
    6b52:	8f 93       	push	r24
    6b54:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
			taskListCleanup();
    6b58:	0e 94 83 33 	call	0x6706	; 0x6706 <taskListCleanup>
    6b5c:	0f 90       	pop	r0
    6b5e:	0f 90       	pop	r0
    6b60:	cf ef       	ldi	r28, 0xFF	; 255
    6b62:	df ef       	ldi	r29, 0xFF	; 255
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
			}else if(time < getTime()){
			printf_P(PSTR("ERROR: Task scheduled for a time in the past.\r\n"));
		}
		new_task->scheduled_time = time;
    6b64:	c8 82       	st	Y, r12
    6b66:	d9 82       	std	Y+1, r13	; 0x01
    6b68:	ea 82       	std	Y+2, r14	; 0x02
    6b6a:	fb 82       	std	Y+3, r15	; 0x03
		new_task->arg = arg;
    6b6c:	0a 87       	std	Y+10, r16	; 0x0a
    6b6e:	1b 87       	std	Y+11, r17	; 0x0b
		new_task->func = function;
    6b70:	a8 86       	std	Y+8, r10	; 0x08
    6b72:	b9 86       	std	Y+9, r11	; 0x09
		new_task->next = NULL;
    6b74:	1c 86       	std	Y+12, r1	; 0x0c
    6b76:	1d 86       	std	Y+13, r1	; 0x0d
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6b78:	9f be       	out	0x3f, r9	; 63
	}
	add_task_to_list(new_task);
    6b7a:	ce 01       	movw	r24, r28
    6b7c:	0e 94 a7 34 	call	0x694e	; 0x694e <add_task_to_list>
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
    6b80:	ce 01       	movw	r24, r28
}
    6b82:	df 91       	pop	r29
    6b84:	cf 91       	pop	r28
    6b86:	1f 91       	pop	r17
    6b88:	0f 91       	pop	r16
    6b8a:	ff 90       	pop	r15
    6b8c:	ef 90       	pop	r14
    6b8e:	df 90       	pop	r13
    6b90:	cf 90       	pop	r12
    6b92:	bf 90       	pop	r11
    6b94:	af 90       	pop	r10
    6b96:	9f 90       	pop	r9
    6b98:	08 95       	ret
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
		//This code assumes that all tasks will have non-null function pointers.
		if((task_storage_arr[tmp].func.noarg_func) == NULL){
			return &(task_storage_arr[tmp]);
    6b9a:	ef 01       	movw	r28, r30
volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
    6b9c:	ef 3f       	cpi	r30, 0xFF	; 255
    6b9e:	8f ef       	ldi	r24, 0xFF	; 255
    6ba0:	f8 07       	cpc	r31, r24
    6ba2:	a1 f2       	breq	.-88     	; 0x6b4c <schedule_task_absolute_time+0x5c>
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
			taskListCleanup();
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
    6ba4:	84 e2       	ldi	r24, 0x24	; 36
    6ba6:	eb 30       	cpi	r30, 0x0B	; 11
    6ba8:	f8 07       	cpc	r31, r24
    6baa:	a0 f0       	brcs	.+40     	; 0x6bd4 <schedule_task_absolute_time+0xe4>
    6bac:	e9 58       	subi	r30, 0x89	; 137
    6bae:	f4 42       	sbci	r31, 0x24	; 36
    6bb0:	09 f0       	breq	.+2      	; 0x6bb4 <schedule_task_absolute_time+0xc4>
    6bb2:	80 f4       	brcc	.+32     	; 0x6bd4 <schedule_task_absolute_time+0xe4>
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
			}else if(time < getTime()){
    6bb4:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    6bb8:	c6 16       	cp	r12, r22
    6bba:	d7 06       	cpc	r13, r23
    6bbc:	e8 06       	cpc	r14, r24
    6bbe:	f9 06       	cpc	r15, r25
    6bc0:	88 f6       	brcc	.-94     	; 0x6b64 <schedule_task_absolute_time+0x74>
			printf_P(PSTR("ERROR: Task scheduled for a time in the past.\r\n"));
    6bc2:	88 e8       	ldi	r24, 0x88	; 136
    6bc4:	9a e0       	ldi	r25, 0x0A	; 10
    6bc6:	9f 93       	push	r25
    6bc8:	8f 93       	push	r24
    6bca:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    6bce:	0f 90       	pop	r0
    6bd0:	0f 90       	pop	r0
    6bd2:	c8 cf       	rjmp	.-112    	; 0x6b64 <schedule_task_absolute_time+0x74>
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
			taskListCleanup();
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
    6bd4:	88 eb       	ldi	r24, 0xB8	; 184
    6bd6:	9a e0       	ldi	r25, 0x0A	; 10
    6bd8:	9f 93       	push	r25
    6bda:	8f 93       	push	r24
    6bdc:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    6be0:	0f 90       	pop	r0
    6be2:	0f 90       	pop	r0
    6be4:	bf cf       	rjmp	.-130    	; 0x6b64 <schedule_task_absolute_time+0x74>
    6be6:	9f be       	out	0x3f, r9	; 63

volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
    6be8:	80 e0       	ldi	r24, 0x00	; 0
    6bea:	90 e0       	ldi	r25, 0x00	; 0
    6bec:	ca cf       	rjmp	.-108    	; 0x6b82 <schedule_task_absolute_time+0x92>

00006bee <scheduleTask>:

// Adds a new task to the task queue
// time is number of milliseconds until function is executed
// function is a function pointer to execute
// arg is the argument to supply to function
volatile Task_t* scheduleTask(uint32_t time, FlexFunction function, void* arg){
    6bee:	8f 92       	push	r8
    6bf0:	9f 92       	push	r9
    6bf2:	af 92       	push	r10
    6bf4:	bf 92       	push	r11
    6bf6:	cf 92       	push	r12
    6bf8:	df 92       	push	r13
    6bfa:	ef 92       	push	r14
    6bfc:	ff 92       	push	r15
    6bfe:	0f 93       	push	r16
    6c00:	1f 93       	push	r17
    6c02:	cf 93       	push	r28
    6c04:	df 93       	push	r29
    6c06:	6b 01       	movw	r12, r22
    6c08:	7c 01       	movw	r14, r24
    6c0a:	ea 01       	movw	r28, r20
    6c0c:	89 01       	movw	r16, r18
	time = (time<MIN_TASK_TIME_IN_FUTURE) ? MIN_TASK_TIME_IN_FUTURE : time;
	volatile Task_t* new_task = schedule_task_absolute_time(getTime()+time, function, arg);
    6c0e:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    6c12:	46 01       	movw	r8, r12
    6c14:	57 01       	movw	r10, r14
    6c16:	2a e0       	ldi	r18, 0x0A	; 10
    6c18:	82 16       	cp	r8, r18
    6c1a:	91 04       	cpc	r9, r1
    6c1c:	a1 04       	cpc	r10, r1
    6c1e:	b1 04       	cpc	r11, r1
    6c20:	28 f4       	brcc	.+10     	; 0x6c2c <scheduleTask+0x3e>
    6c22:	2a e0       	ldi	r18, 0x0A	; 10
    6c24:	82 2e       	mov	r8, r18
    6c26:	91 2c       	mov	r9, r1
    6c28:	a1 2c       	mov	r10, r1
    6c2a:	b1 2c       	mov	r11, r1
    6c2c:	68 0d       	add	r22, r8
    6c2e:	79 1d       	adc	r23, r9
    6c30:	8a 1d       	adc	r24, r10
    6c32:	9b 1d       	adc	r25, r11
    6c34:	98 01       	movw	r18, r16
    6c36:	ae 01       	movw	r20, r28
    6c38:	0e 94 78 35 	call	0x6af0	; 0x6af0 <schedule_task_absolute_time>
	new_task->period = 0;
    6c3c:	fc 01       	movw	r30, r24
    6c3e:	14 82       	std	Z+4, r1	; 0x04
    6c40:	15 82       	std	Z+5, r1	; 0x05
    6c42:	16 82       	std	Z+6, r1	; 0x06
    6c44:	17 82       	std	Z+7, r1	; 0x07
	return new_task;
}
    6c46:	df 91       	pop	r29
    6c48:	cf 91       	pop	r28
    6c4a:	1f 91       	pop	r17
    6c4c:	0f 91       	pop	r16
    6c4e:	ff 90       	pop	r15
    6c50:	ef 90       	pop	r14
    6c52:	df 90       	pop	r13
    6c54:	cf 90       	pop	r12
    6c56:	bf 90       	pop	r11
    6c58:	af 90       	pop	r10
    6c5a:	9f 90       	pop	r9
    6c5c:	8f 90       	pop	r8
    6c5e:	08 95       	ret

00006c60 <schedulePeriodicTask>:

volatile Task_t* schedulePeriodicTask(uint32_t period, FlexFunction function, void* arg){
    6c60:	cf 92       	push	r12
    6c62:	df 92       	push	r13
    6c64:	ef 92       	push	r14
    6c66:	ff 92       	push	r15
    6c68:	0f 93       	push	r16
    6c6a:	1f 93       	push	r17
    6c6c:	cf 93       	push	r28
    6c6e:	df 93       	push	r29
    6c70:	ea 01       	movw	r28, r20
    6c72:	89 01       	movw	r16, r18
	period = (period<MIN_TASK_TIME_IN_FUTURE) ? MIN_TASK_TIME_IN_FUTURE : period;
    6c74:	6b 01       	movw	r12, r22
    6c76:	7c 01       	movw	r14, r24
    6c78:	8a e0       	ldi	r24, 0x0A	; 10
    6c7a:	c8 16       	cp	r12, r24
    6c7c:	d1 04       	cpc	r13, r1
    6c7e:	e1 04       	cpc	r14, r1
    6c80:	f1 04       	cpc	r15, r1
    6c82:	28 f4       	brcc	.+10     	; 0x6c8e <schedulePeriodicTask+0x2e>
    6c84:	8a e0       	ldi	r24, 0x0A	; 10
    6c86:	c8 2e       	mov	r12, r24
    6c88:	d1 2c       	mov	r13, r1
    6c8a:	e1 2c       	mov	r14, r1
    6c8c:	f1 2c       	mov	r15, r1
	uint32_t time = ((getTime()/period)+1)*period;
    6c8e:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
	volatile Task_t* new_task = schedule_task_absolute_time(time, function, arg);
    6c92:	a7 01       	movw	r20, r14
    6c94:	96 01       	movw	r18, r12
    6c96:	0e 94 12 4c 	call	0x9824	; 0x9824 <__udivmodsi4>
    6c9a:	2f 5f       	subi	r18, 0xFF	; 255
    6c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c9e:	4f 4f       	sbci	r20, 0xFF	; 255
    6ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    6ca2:	c7 01       	movw	r24, r14
    6ca4:	b6 01       	movw	r22, r12
    6ca6:	0e 94 da 4b 	call	0x97b4	; 0x97b4 <__mulsi3>
    6caa:	98 01       	movw	r18, r16
    6cac:	ae 01       	movw	r20, r28
    6cae:	0e 94 78 35 	call	0x6af0	; 0x6af0 <schedule_task_absolute_time>
	new_task->period = period;
    6cb2:	fc 01       	movw	r30, r24
    6cb4:	c4 82       	std	Z+4, r12	; 0x04
    6cb6:	d5 82       	std	Z+5, r13	; 0x05
    6cb8:	e6 82       	std	Z+6, r14	; 0x06
    6cba:	f7 82       	std	Z+7, r15	; 0x07
	return new_task;
}
    6cbc:	df 91       	pop	r29
    6cbe:	cf 91       	pop	r28
    6cc0:	1f 91       	pop	r17
    6cc2:	0f 91       	pop	r16
    6cc4:	ff 90       	pop	r15
    6cc6:	ef 90       	pop	r14
    6cc8:	df 90       	pop	r13
    6cca:	cf 90       	pop	r12
    6ccc:	08 95       	ret

00006cce <__vector_11>:
		}
	}
	return 0;
}

ISR(RTC_COMP_vect){
    6cce:	1f 92       	push	r1
    6cd0:	0f 92       	push	r0
    6cd2:	0f b6       	in	r0, 0x3f	; 63
    6cd4:	0f 92       	push	r0
    6cd6:	11 24       	eor	r1, r1
    6cd8:	0b b6       	in	r0, 0x3b	; 59
    6cda:	0f 92       	push	r0
    6cdc:	4f 92       	push	r4
    6cde:	5f 92       	push	r5
    6ce0:	6f 92       	push	r6
    6ce2:	7f 92       	push	r7
    6ce4:	8f 92       	push	r8
    6ce6:	9f 92       	push	r9
    6ce8:	af 92       	push	r10
    6cea:	bf 92       	push	r11
    6cec:	cf 92       	push	r12
    6cee:	df 92       	push	r13
    6cf0:	ef 92       	push	r14
    6cf2:	ff 92       	push	r15
    6cf4:	0f 93       	push	r16
    6cf6:	1f 93       	push	r17
    6cf8:	2f 93       	push	r18
    6cfa:	3f 93       	push	r19
    6cfc:	4f 93       	push	r20
    6cfe:	5f 93       	push	r21
    6d00:	6f 93       	push	r22
    6d02:	7f 93       	push	r23
    6d04:	8f 93       	push	r24
    6d06:	9f 93       	push	r25
    6d08:	af 93       	push	r26
    6d0a:	bf 93       	push	r27
    6d0c:	cf 93       	push	r28
    6d0e:	df 93       	push	r29
    6d10:	ef 93       	push	r30
    6d12:	ff 93       	push	r31
	SAVE_CONTEXT();	
    6d14:	0f 92       	push	r0
    6d16:	0f b6       	in	r0, 0x3f	; 63
    6d18:	f8 94       	cli
    6d1a:	0f 92       	push	r0
    6d1c:	1f 92       	push	r1
    6d1e:	11 24       	eor	r1, r1
    6d20:	2f 92       	push	r2
    6d22:	3f 92       	push	r3
    6d24:	4f 92       	push	r4
    6d26:	5f 92       	push	r5
    6d28:	6f 92       	push	r6
    6d2a:	7f 92       	push	r7
    6d2c:	8f 92       	push	r8
    6d2e:	9f 92       	push	r9
    6d30:	af 92       	push	r10
    6d32:	bf 92       	push	r11
    6d34:	cf 92       	push	r12
    6d36:	df 92       	push	r13
    6d38:	ef 92       	push	r14
    6d3a:	ff 92       	push	r15
    6d3c:	0f 93       	push	r16
    6d3e:	1f 93       	push	r17
    6d40:	2f 93       	push	r18
    6d42:	3f 93       	push	r19
    6d44:	4f 93       	push	r20
    6d46:	5f 93       	push	r21
    6d48:	6f 93       	push	r22
    6d4a:	7f 93       	push	r23
    6d4c:	8f 93       	push	r24
    6d4e:	9f 93       	push	r25
    6d50:	af 93       	push	r26
    6d52:	bf 93       	push	r27
    6d54:	cf 93       	push	r28
    6d56:	df 93       	push	r29
    6d58:	ef 93       	push	r30
    6d5a:	ff 93       	push	r31
	task_executing=1;
    6d5c:	81 e0       	ldi	r24, 0x01	; 1
    6d5e:	80 93 bc 26 	sts	0x26BC, r24	; 0x8026bc <task_executing>

// TO BE CALLED FROM INTERRUPT HANDLER ONLY
// DO NOT CALL
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
    6d62:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6d64:	f8 94       	cli
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    6d66:	30 e8       	ldi	r19, 0x80	; 128
    6d68:	c3 2e       	mov	r12, r19
    6d6a:	39 e0       	ldi	r19, 0x09	; 9
    6d6c:	d3 2e       	mov	r13, r19
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    6d6e:	4e e7       	ldi	r20, 0x7E	; 126
    6d70:	e4 2e       	mov	r14, r20
    6d72:	42 e2       	ldi	r20, 0x22	; 34
    6d74:	f4 2e       	mov	r15, r20
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    6d76:	58 e0       	ldi	r21, 0x08	; 8
    6d78:	a5 2e       	mov	r10, r21
    6d7a:	59 e0       	ldi	r21, 0x09	; 9
    6d7c:	b5 2e       	mov	r11, r21
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
    6d7e:	e0 91 c1 26 	lds	r30, 0x26C1	; 0x8026c1 <task_list>
    6d82:	f0 91 c2 26 	lds	r31, 0x26C2	; 0x8026c2 <task_list+0x1>
    6d86:	30 97       	sbiw	r30, 0x00	; 0
    6d88:	09 f4       	brne	.+2      	; 0x6d8c <__vector_11+0xbe>
    6d8a:	2c c1       	rjmp	.+600    	; 0x6fe4 <__vector_11+0x316>
    6d8c:	40 80       	ld	r4, Z
    6d8e:	51 80       	ldd	r5, Z+1	; 0x01
    6d90:	62 80       	ldd	r6, Z+2	; 0x02
    6d92:	73 80       	ldd	r7, Z+3	; 0x03
    6d94:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    6d98:	dc 01       	movw	r26, r24
    6d9a:	cb 01       	movw	r24, r22
    6d9c:	02 96       	adiw	r24, 0x02	; 2
    6d9e:	a1 1d       	adc	r26, r1
    6da0:	b1 1d       	adc	r27, r1
    6da2:	84 15       	cp	r24, r4
    6da4:	95 05       	cpc	r25, r5
    6da6:	a6 05       	cpc	r26, r6
    6da8:	b7 05       	cpc	r27, r7
    6daa:	08 f4       	brcc	.+2      	; 0x6dae <__vector_11+0xe0>
    6dac:	f8 c0       	rjmp	.+496    	; 0x6f9e <__vector_11+0x2d0>
    6dae:	0b e0       	ldi	r16, 0x0B	; 11
    6db0:	14 e2       	ldi	r17, 0x24	; 36
    6db2:	c0 e0       	ldi	r28, 0x00	; 0
    6db4:	d0 e0       	ldi	r29, 0x00	; 0
    6db6:	81 2c       	mov	r8, r1
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
    6db8:	ce 01       	movw	r24, r28
    6dba:	88 0f       	add	r24, r24
    6dbc:	99 1f       	adc	r25, r25
    6dbe:	fc 01       	movw	r30, r24
    6dc0:	ee 0f       	add	r30, r30
    6dc2:	ff 1f       	adc	r31, r31
    6dc4:	ee 0f       	add	r30, r30
    6dc6:	ff 1f       	adc	r31, r31
    6dc8:	ee 0f       	add	r30, r30
    6dca:	ff 1f       	adc	r31, r31
    6dcc:	e8 1b       	sub	r30, r24
    6dce:	f9 0b       	sbc	r31, r25
    6dd0:	e5 5f       	subi	r30, 0xF5	; 245
    6dd2:	fb 4d       	sbci	r31, 0xDB	; 219
    6dd4:	80 85       	ldd	r24, Z+8	; 0x08
    6dd6:	91 85       	ldd	r25, Z+9	; 0x09
    6dd8:	89 2b       	or	r24, r25
    6dda:	09 f1       	breq	.+66     	; 0x6e1e <__vector_11+0x150>
					num_slots_used++;
    6ddc:	83 94       	inc	r8
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    6dde:	84 85       	ldd	r24, Z+12	; 0x0c
    6de0:	95 85       	ldd	r25, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
    6de2:	00 97       	sbiw	r24, 0x00	; 0
    6de4:	e1 f0       	breq	.+56     	; 0x6e1e <__vector_11+0x150>
    6de6:	24 e2       	ldi	r18, 0x24	; 36
    6de8:	8b 30       	cpi	r24, 0x0B	; 11
    6dea:	92 07       	cpc	r25, r18
    6dec:	20 f0       	brcs	.+8      	; 0x6df6 <__vector_11+0x128>
    6dee:	89 58       	subi	r24, 0x89	; 137
    6df0:	94 42       	sbci	r25, 0x24	; 36
    6df2:	a9 f0       	breq	.+42     	; 0x6e1e <__vector_11+0x150>
    6df4:	a0 f0       	brcs	.+40     	; 0x6e1e <__vector_11+0x150>
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    6df6:	df 92       	push	r13
    6df8:	cf 92       	push	r12
    6dfa:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    6dfe:	1f 93       	push	r17
    6e00:	0f 93       	push	r16
    6e02:	ff 92       	push	r15
    6e04:	ef 92       	push	r14
    6e06:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
						delayMS(10);
    6e0a:	8a e0       	ldi	r24, 0x0A	; 10
    6e0c:	90 e0       	ldi	r25, 0x00	; 0
    6e0e:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    6e12:	0f 90       	pop	r0
    6e14:	0f 90       	pop	r0
    6e16:	0f 90       	pop	r0
    6e18:	0f 90       	pop	r0
    6e1a:	0f 90       	pop	r0
    6e1c:	0f 90       	pop	r0
    6e1e:	21 96       	adiw	r28, 0x01	; 1
    6e20:	02 5f       	subi	r16, 0xF2	; 242
    6e22:	1f 4f       	sbci	r17, 0xFF	; 255
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
    6e24:	ca 30       	cpi	r28, 0x0A	; 10
    6e26:	d1 05       	cpc	r29, r1
    6e28:	39 f6       	brne	.-114    	; 0x6db8 <__vector_11+0xea>
						delayMS(10);
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
    6e2a:	80 91 a9 24 	lds	r24, 0x24A9	; 0x8024a9 <num_tasks>
    6e2e:	88 11       	cpse	r24, r8
    6e30:	39 c1       	rjmp	.+626    	; 0x70a4 <__vector_11+0x3d6>
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
				return -1;
			}
			cur_task = task_list;
    6e32:	c0 91 c1 26 	lds	r28, 0x26C1	; 0x8026c1 <task_list>
    6e36:	d0 91 c2 26 	lds	r29, 0x26C2	; 0x8026c2 <task_list+0x1>
			task_list = cur_task->next;
    6e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    6e3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    6e3e:	80 93 c1 26 	sts	0x26C1, r24	; 0x8026c1 <task_list>
    6e42:	90 93 c2 26 	sts	0x26C2, r25	; 0x8026c2 <task_list+0x1>

			if(cur_task->arg==NULL){
    6e46:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e48:	9b 85       	ldd	r25, Y+11	; 0x0b
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
    6e4a:	1f b7       	in	r17, 0x3f	; 63
				return -1;
			}
			cur_task = task_list;
			task_list = cur_task->next;

			if(cur_task->arg==NULL){
    6e4c:	89 2b       	or	r24, r25
    6e4e:	09 f4       	brne	.+2      	; 0x6e52 <__vector_11+0x184>
    6e50:	8f c0       	rjmp	.+286    	; 0x6f70 <__vector_11+0x2a2>

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    6e52:	78 94       	sei
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).noarg_func(); // run the task
				}
			}else{
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).arg_function(cur_task->arg); // run the task
    6e54:	e8 85       	ldd	r30, Y+8	; 0x08
    6e56:	f9 85       	ldd	r31, Y+9	; 0x09
    6e58:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    6e5c:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6e5e:	1f bf       	out	0x3f, r17	; 63
				}
			}
			
			if(cur_task->period>0){
    6e60:	8c 81       	ldd	r24, Y+4	; 0x04
    6e62:	9d 81       	ldd	r25, Y+5	; 0x05
    6e64:	ae 81       	ldd	r26, Y+6	; 0x06
    6e66:	bf 81       	ldd	r27, Y+7	; 0x07
    6e68:	89 2b       	or	r24, r25
    6e6a:	8a 2b       	or	r24, r26
    6e6c:	8b 2b       	or	r24, r27
    6e6e:	09 f4       	brne	.+2      	; 0x6e72 <__vector_11+0x1a4>
    6e70:	8d c0       	rjmp	.+282    	; 0x6f8c <__vector_11+0x2be>
				uint32_t nextTime = (((cur_task->scheduled_time)/(cur_task->period))+1)*(cur_task->period);
    6e72:	68 81       	ld	r22, Y
    6e74:	79 81       	ldd	r23, Y+1	; 0x01
    6e76:	8a 81       	ldd	r24, Y+2	; 0x02
    6e78:	9b 81       	ldd	r25, Y+3	; 0x03
    6e7a:	2c 81       	ldd	r18, Y+4	; 0x04
    6e7c:	3d 81       	ldd	r19, Y+5	; 0x05
    6e7e:	4e 81       	ldd	r20, Y+6	; 0x06
    6e80:	5f 81       	ldd	r21, Y+7	; 0x07
    6e82:	4c 80       	ldd	r4, Y+4	; 0x04
    6e84:	5d 80       	ldd	r5, Y+5	; 0x05
    6e86:	6e 80       	ldd	r6, Y+6	; 0x06
    6e88:	7f 80       	ldd	r7, Y+7	; 0x07
    6e8a:	0e 94 12 4c 	call	0x9824	; 0x9824 <__udivmodsi4>
    6e8e:	2f 5f       	subi	r18, 0xFF	; 255
    6e90:	3f 4f       	sbci	r19, 0xFF	; 255
    6e92:	4f 4f       	sbci	r20, 0xFF	; 255
    6e94:	5f 4f       	sbci	r21, 0xFF	; 255
    6e96:	c3 01       	movw	r24, r6
    6e98:	b2 01       	movw	r22, r4
    6e9a:	0e 94 da 4b 	call	0x97b4	; 0x97b4 <__mulsi3>
				cur_task->scheduled_time = nextTime;
    6e9e:	68 83       	st	Y, r22
    6ea0:	79 83       	std	Y+1, r23	; 0x01
    6ea2:	8a 83       	std	Y+2, r24	; 0x02
    6ea4:	9b 83       	std	Y+3, r25	; 0x03
				cur_task->next=NULL;
    6ea6:	1c 86       	std	Y+12, r1	; 0x0c
    6ea8:	1d 86       	std	Y+13, r1	; 0x0d
				num_tasks--;
    6eaa:	80 91 a9 24 	lds	r24, 0x24A9	; 0x8024a9 <num_tasks>
    6eae:	81 50       	subi	r24, 0x01	; 1
    6eb0:	80 93 a9 24 	sts	0x24A9, r24	; 0x8024a9 <num_tasks>
				add_task_to_list(cur_task);
    6eb4:	ce 01       	movw	r24, r28
    6eb6:	0e 94 a7 34 	call	0x694e	; 0x694e <add_task_to_list>
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
    6eba:	c0 e0       	ldi	r28, 0x00	; 0
    6ebc:	d0 e0       	ldi	r29, 0x00	; 0
    6ebe:	10 e0       	ldi	r17, 0x00	; 0
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
    6ec0:	ce 01       	movw	r24, r28
    6ec2:	88 0f       	add	r24, r24
    6ec4:	99 1f       	adc	r25, r25
    6ec6:	fc 01       	movw	r30, r24
    6ec8:	ee 0f       	add	r30, r30
    6eca:	ff 1f       	adc	r31, r31
    6ecc:	ee 0f       	add	r30, r30
    6ece:	ff 1f       	adc	r31, r31
    6ed0:	ee 0f       	add	r30, r30
    6ed2:	ff 1f       	adc	r31, r31
    6ed4:	e8 1b       	sub	r30, r24
    6ed6:	f9 0b       	sbc	r31, r25
    6ed8:	e5 5f       	subi	r30, 0xF5	; 245
    6eda:	fb 4d       	sbci	r31, 0xDB	; 219
    6edc:	20 85       	ldd	r18, Z+8	; 0x08
    6ede:	31 85       	ldd	r19, Z+9	; 0x09
    6ee0:	23 2b       	or	r18, r19
    6ee2:	99 f1       	breq	.+102    	; 0x6f4a <__vector_11+0x27c>
					num_slots_used++;
    6ee4:	1f 5f       	subi	r17, 0xFF	; 255
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    6ee6:	24 85       	ldd	r18, Z+12	; 0x0c
    6ee8:	35 85       	ldd	r19, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
    6eea:	21 15       	cp	r18, r1
    6eec:	31 05       	cpc	r19, r1
    6eee:	69 f1       	breq	.+90     	; 0x6f4a <__vector_11+0x27c>
    6ef0:	44 e2       	ldi	r20, 0x24	; 36
    6ef2:	2b 30       	cpi	r18, 0x0B	; 11
    6ef4:	34 07       	cpc	r19, r20
    6ef6:	20 f0       	brcs	.+8      	; 0x6f00 <__vector_11+0x232>
    6ef8:	29 58       	subi	r18, 0x89	; 137
    6efa:	34 42       	sbci	r19, 0x24	; 36
    6efc:	31 f1       	breq	.+76     	; 0x6f4a <__vector_11+0x27c>
    6efe:	28 f1       	brcs	.+74     	; 0x6f4a <__vector_11+0x27c>
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    6f00:	fc 01       	movw	r30, r24
    6f02:	ee 0f       	add	r30, r30
    6f04:	ff 1f       	adc	r31, r31
    6f06:	ee 0f       	add	r30, r30
    6f08:	ff 1f       	adc	r31, r31
    6f0a:	ee 0f       	add	r30, r30
    6f0c:	ff 1f       	adc	r31, r31
    6f0e:	e8 1b       	sub	r30, r24
    6f10:	f9 0b       	sbc	r31, r25
    6f12:	e5 5f       	subi	r30, 0xF5	; 245
    6f14:	fb 4d       	sbci	r31, 0xDB	; 219
    6f16:	8d b7       	in	r24, 0x3d	; 61
    6f18:	9e b7       	in	r25, 0x3e	; 62
    6f1a:	0e 97       	sbiw	r24, 0x0e	; 14
    6f1c:	8d bf       	out	0x3d, r24	; 61
    6f1e:	9e bf       	out	0x3e, r25	; 62
    6f20:	ad b7       	in	r26, 0x3d	; 61
    6f22:	be b7       	in	r27, 0x3e	; 62
    6f24:	11 96       	adiw	r26, 0x01	; 1
    6f26:	8e e0       	ldi	r24, 0x0E	; 14
    6f28:	01 90       	ld	r0, Z+
    6f2a:	0d 92       	st	X+, r0
    6f2c:	8a 95       	dec	r24
    6f2e:	e1 f7       	brne	.-8      	; 0x6f28 <__vector_11+0x25a>
    6f30:	bf 92       	push	r11
    6f32:	af 92       	push	r10
    6f34:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
						delayMS(10);
    6f38:	8a e0       	ldi	r24, 0x0A	; 10
    6f3a:	90 e0       	ldi	r25, 0x00	; 0
    6f3c:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    6f40:	8d b7       	in	r24, 0x3d	; 61
    6f42:	9e b7       	in	r25, 0x3e	; 62
    6f44:	40 96       	adiw	r24, 0x10	; 16
    6f46:	8d bf       	out	0x3d, r24	; 61
    6f48:	9e bf       	out	0x3e, r25	; 62
    6f4a:	21 96       	adiw	r28, 0x01	; 1
				cur_task = NULL;
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
    6f4c:	ca 30       	cpi	r28, 0x0A	; 10
    6f4e:	d1 05       	cpc	r29, r1
    6f50:	09 f0       	breq	.+2      	; 0x6f54 <__vector_11+0x286>
    6f52:	b6 cf       	rjmp	.-148    	; 0x6ec0 <__vector_11+0x1f2>
						delayMS(10);
					}
				}
			}
			//printf_P(PSTR("\tReturned %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
    6f54:	80 91 a9 24 	lds	r24, 0x24A9	; 0x8024a9 <num_tasks>
    6f58:	81 17       	cp	r24, r17
    6f5a:	09 f4       	brne	.+2      	; 0x6f5e <__vector_11+0x290>
    6f5c:	10 cf       	rjmp	.-480    	; 0x6d7e <__vector_11+0xb0>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
    6f5e:	8a ec       	ldi	r24, 0xCA	; 202
    6f60:	98 e0       	ldi	r25, 0x08	; 8
    6f62:	9f 93       	push	r25
    6f64:	8f 93       	push	r24
    6f66:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    6f6a:	0f 90       	pop	r0
    6f6c:	0f 90       	pop	r0
    6f6e:	3f c0       	rjmp	.+126    	; 0x6fee <__vector_11+0x320>

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    6f70:	78 94       	sei
			cur_task = task_list;
			task_list = cur_task->next;

			if(cur_task->arg==NULL){
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).noarg_func(); // run the task
    6f72:	e8 85       	ldd	r30, Y+8	; 0x08
    6f74:	f9 85       	ldd	r31, Y+9	; 0x09
    6f76:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6f78:	1f bf       	out	0x3f, r17	; 63
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).arg_function(cur_task->arg); // run the task
				}
			}
			
			if(cur_task->period>0){
    6f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    6f7c:	9d 81       	ldd	r25, Y+5	; 0x05
    6f7e:	ae 81       	ldd	r26, Y+6	; 0x06
    6f80:	bf 81       	ldd	r27, Y+7	; 0x07
    6f82:	89 2b       	or	r24, r25
    6f84:	8a 2b       	or	r24, r26
    6f86:	8b 2b       	or	r24, r27
    6f88:	09 f0       	breq	.+2      	; 0x6f8c <__vector_11+0x2be>
    6f8a:	73 cf       	rjmp	.-282    	; 0x6e72 <__vector_11+0x1a4>
				cur_task->scheduled_time = nextTime;
				cur_task->next=NULL;
				num_tasks--;
				add_task_to_list(cur_task);
			}else{
				scheduler_free(cur_task);
    6f8c:	ce 01       	movw	r24, r28
    6f8e:	0e 94 0f 33 	call	0x661e	; 0x661e <scheduler_free>
				cur_task = NULL;
				num_tasks--;
    6f92:	80 91 a9 24 	lds	r24, 0x24A9	; 0x8024a9 <num_tasks>
    6f96:	81 50       	subi	r24, 0x01	; 1
    6f98:	80 93 a9 24 	sts	0x24A9, r24	; 0x8024a9 <num_tasks>
    6f9c:	8e cf       	rjmp	.-228    	; 0x6eba <__vector_11+0x1ec>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
				return -1;
			}
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    6f9e:	e0 91 c1 26 	lds	r30, 0x26C1	; 0x8026c1 <task_list>
    6fa2:	f0 91 c2 26 	lds	r31, 0x26C2	; 0x8026c2 <task_list+0x1>
    6fa6:	30 97       	sbiw	r30, 0x00	; 0
    6fa8:	e9 f0       	breq	.+58     	; 0x6fe4 <__vector_11+0x316>
    6faa:	00 81       	ld	r16, Z
    6fac:	11 81       	ldd	r17, Z+1	; 0x01
    6fae:	22 81       	ldd	r18, Z+2	; 0x02
    6fb0:	33 81       	ldd	r19, Z+3	; 0x03
    6fb2:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <rtc_epoch>
    6fb6:	90 91 9a 24 	lds	r25, 0x249A	; 0x80249a <rtc_epoch+0x1>
    6fba:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    6fbe:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    6fc2:	a0 e0       	ldi	r26, 0x00	; 0
    6fc4:	b0 e0       	ldi	r27, 0x00	; 0
    6fc6:	dc 01       	movw	r26, r24
    6fc8:	99 27       	eor	r25, r25
    6fca:	88 27       	eor	r24, r24
    6fcc:	60 e0       	ldi	r22, 0x00	; 0
    6fce:	70 e0       	ldi	r23, 0x00	; 0
    6fd0:	84 2b       	or	r24, r20
    6fd2:	95 2b       	or	r25, r21
    6fd4:	a6 2b       	or	r26, r22
    6fd6:	b7 2b       	or	r27, r23
    6fd8:	80 17       	cp	r24, r16
    6fda:	91 07       	cpc	r25, r17
    6fdc:	a2 07       	cpc	r26, r18
    6fde:	b3 07       	cpc	r27, r19
    6fe0:	08 f0       	brcs	.+2      	; 0x6fe4 <__vector_11+0x316>
    6fe2:	4d c0       	rjmp	.+154    	; 0x707e <__vector_11+0x3b0>
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		}else{
			RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    6fe4:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6fe8:	8b 7f       	andi	r24, 0xFB	; 251
    6fea:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6fee:	9f be       	out	0x3f, r9	; 63

ISR(RTC_COMP_vect){
	SAVE_CONTEXT();	
	task_executing=1;
	/*int8_t result =*/ run_tasks();
	task_executing=0;
    6ff0:	10 92 bc 26 	sts	0x26BC, r1	; 0x8026bc <task_executing>
	//if(result<0)
		//task_list_cleanup();		
	RESTORE_CONTEXT();	
    6ff4:	ff 91       	pop	r31
    6ff6:	ef 91       	pop	r30
    6ff8:	df 91       	pop	r29
    6ffa:	cf 91       	pop	r28
    6ffc:	bf 91       	pop	r27
    6ffe:	af 91       	pop	r26
    7000:	9f 91       	pop	r25
    7002:	8f 91       	pop	r24
    7004:	7f 91       	pop	r23
    7006:	6f 91       	pop	r22
    7008:	5f 91       	pop	r21
    700a:	4f 91       	pop	r20
    700c:	3f 91       	pop	r19
    700e:	2f 91       	pop	r18
    7010:	1f 91       	pop	r17
    7012:	0f 91       	pop	r16
    7014:	ff 90       	pop	r15
    7016:	ef 90       	pop	r14
    7018:	df 90       	pop	r13
    701a:	cf 90       	pop	r12
    701c:	bf 90       	pop	r11
    701e:	af 90       	pop	r10
    7020:	9f 90       	pop	r9
    7022:	8f 90       	pop	r8
    7024:	7f 90       	pop	r7
    7026:	6f 90       	pop	r6
    7028:	5f 90       	pop	r5
    702a:	4f 90       	pop	r4
    702c:	3f 90       	pop	r3
    702e:	2f 90       	pop	r2
    7030:	1f 90       	pop	r1
    7032:	0f 90       	pop	r0
    7034:	0f be       	out	0x3f, r0	; 63
    7036:	0f 90       	pop	r0
}
    7038:	ff 91       	pop	r31
    703a:	ef 91       	pop	r30
    703c:	df 91       	pop	r29
    703e:	cf 91       	pop	r28
    7040:	bf 91       	pop	r27
    7042:	af 91       	pop	r26
    7044:	9f 91       	pop	r25
    7046:	8f 91       	pop	r24
    7048:	7f 91       	pop	r23
    704a:	6f 91       	pop	r22
    704c:	5f 91       	pop	r21
    704e:	4f 91       	pop	r20
    7050:	3f 91       	pop	r19
    7052:	2f 91       	pop	r18
    7054:	1f 91       	pop	r17
    7056:	0f 91       	pop	r16
    7058:	ff 90       	pop	r15
    705a:	ef 90       	pop	r14
    705c:	df 90       	pop	r13
    705e:	cf 90       	pop	r12
    7060:	bf 90       	pop	r11
    7062:	af 90       	pop	r10
    7064:	9f 90       	pop	r9
    7066:	8f 90       	pop	r8
    7068:	7f 90       	pop	r7
    706a:	6f 90       	pop	r6
    706c:	5f 90       	pop	r5
    706e:	4f 90       	pop	r4
    7070:	0f 90       	pop	r0
    7072:	0b be       	out	0x3b, r0	; 59
    7074:	0f 90       	pop	r0
    7076:	0f be       	out	0x3f, r0	; 63
    7078:	0f 90       	pop	r0
    707a:	1f 90       	pop	r1
    707c:	18 95       	reti
				return -1;
			}
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
    707e:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    7082:	80 fd       	sbrc	r24, 0
    7084:	fc cf       	rjmp	.-8      	; 0x707e <__vector_11+0x3b0>
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    7086:	80 81       	ld	r24, Z
    7088:	91 81       	ldd	r25, Z+1	; 0x01
    708a:	a2 81       	ldd	r26, Z+2	; 0x02
    708c:	b3 81       	ldd	r27, Z+3	; 0x03
    708e:	88 60       	ori	r24, 0x08	; 8
    7090:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    7094:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    7098:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    709c:	84 60       	ori	r24, 0x04	; 4
    709e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    70a2:	a5 cf       	rjmp	.-182    	; 0x6fee <__vector_11+0x320>
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
    70a4:	85 e4       	ldi	r24, 0x45	; 69
    70a6:	99 e0       	ldi	r25, 0x09	; 9
    70a8:	9f 93       	push	r25
    70aa:	8f 93       	push	r24
    70ac:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    70b0:	0f 90       	pop	r0
    70b2:	0f 90       	pop	r0
    70b4:	9c cf       	rjmp	.-200    	; 0x6fee <__vector_11+0x320>

000070b6 <__vector_10>:
	RESTORE_CONTEXT();	
}

// Increment rtc_epoch on RTC overflow
// Must be atomic so no reads of get_time() occur between RTC overflow and updating of epoch
ISR( RTC_OVF_vect ){
    70b6:	1f 92       	push	r1
    70b8:	0f 92       	push	r0
    70ba:	0f b6       	in	r0, 0x3f	; 63
    70bc:	0f 92       	push	r0
    70be:	11 24       	eor	r1, r1
    70c0:	0b b6       	in	r0, 0x3b	; 59
    70c2:	0f 92       	push	r0
    70c4:	cf 92       	push	r12
    70c6:	df 92       	push	r13
    70c8:	ef 92       	push	r14
    70ca:	ff 92       	push	r15
    70cc:	0f 93       	push	r16
    70ce:	1f 93       	push	r17
    70d0:	2f 93       	push	r18
    70d2:	3f 93       	push	r19
    70d4:	4f 93       	push	r20
    70d6:	5f 93       	push	r21
    70d8:	6f 93       	push	r22
    70da:	7f 93       	push	r23
    70dc:	8f 93       	push	r24
    70de:	9f 93       	push	r25
    70e0:	af 93       	push	r26
    70e2:	bf 93       	push	r27
    70e4:	cf 93       	push	r28
    70e6:	ef 93       	push	r30
    70e8:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
    70ea:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    70ec:	f8 94       	cli
		rtc_epoch++;
    70ee:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <rtc_epoch>
    70f2:	90 91 9a 24 	lds	r25, 0x249A	; 0x80249a <rtc_epoch+0x1>
    70f6:	01 96       	adiw	r24, 0x01	; 1
    70f8:	80 93 99 24 	sts	0x2499, r24	; 0x802499 <rtc_epoch>
    70fc:	90 93 9a 24 	sts	0x249A, r25	; 0x80249a <rtc_epoch+0x1>
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    7100:	e0 91 c1 26 	lds	r30, 0x26C1	; 0x8026c1 <task_list>
    7104:	f0 91 c2 26 	lds	r31, 0x26C2	; 0x8026c2 <task_list+0x1>
    7108:	30 97       	sbiw	r30, 0x00	; 0
    710a:	e1 f1       	breq	.+120    	; 0x7184 <__vector_10+0xce>
    710c:	00 81       	ld	r16, Z
    710e:	11 81       	ldd	r17, Z+1	; 0x01
    7110:	22 81       	ldd	r18, Z+2	; 0x02
    7112:	33 81       	ldd	r19, Z+3	; 0x03
    7114:	80 91 99 24 	lds	r24, 0x2499	; 0x802499 <rtc_epoch>
    7118:	90 91 9a 24 	lds	r25, 0x249A	; 0x80249a <rtc_epoch+0x1>
    711c:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    7120:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    7124:	a0 e0       	ldi	r26, 0x00	; 0
    7126:	b0 e0       	ldi	r27, 0x00	; 0
    7128:	dc 01       	movw	r26, r24
    712a:	99 27       	eor	r25, r25
    712c:	88 27       	eor	r24, r24
    712e:	60 e0       	ldi	r22, 0x00	; 0
    7130:	70 e0       	ldi	r23, 0x00	; 0
    7132:	84 2b       	or	r24, r20
    7134:	95 2b       	or	r25, r21
    7136:	a6 2b       	or	r26, r22
    7138:	b7 2b       	or	r27, r23
    713a:	08 17       	cp	r16, r24
    713c:	19 07       	cpc	r17, r25
    713e:	2a 07       	cpc	r18, r26
    7140:	3b 07       	cpc	r19, r27
    7142:	00 f5       	brcc	.+64     	; 0x7184 <__vector_10+0xce>
			if(!task_executing){
    7144:	80 91 bc 26 	lds	r24, 0x26BC	; 0x8026bc <task_executing>
    7148:	88 23       	and	r24, r24
    714a:	09 f4       	brne	.+2      	; 0x714e <__vector_10+0x98>
    714c:	3f c0       	rjmp	.+126    	; 0x71cc <__vector_10+0x116>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    714e:	cf bf       	out	0x3f, r28	; 63
			}
		}else{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, getTime());
		}
	}
    7150:	ff 91       	pop	r31
    7152:	ef 91       	pop	r30
    7154:	cf 91       	pop	r28
    7156:	bf 91       	pop	r27
    7158:	af 91       	pop	r26
    715a:	9f 91       	pop	r25
    715c:	8f 91       	pop	r24
    715e:	7f 91       	pop	r23
    7160:	6f 91       	pop	r22
    7162:	5f 91       	pop	r21
    7164:	4f 91       	pop	r20
    7166:	3f 91       	pop	r19
    7168:	2f 91       	pop	r18
    716a:	1f 91       	pop	r17
    716c:	0f 91       	pop	r16
    716e:	ff 90       	pop	r15
    7170:	ef 90       	pop	r14
    7172:	df 90       	pop	r13
    7174:	cf 90       	pop	r12
    7176:	0f 90       	pop	r0
    7178:	0b be       	out	0x3b, r0	; 59
    717a:	0f 90       	pop	r0
    717c:	0f be       	out	0x3f, r0	; 63
    717e:	0f 90       	pop	r0
    7180:	1f 90       	pop	r1
    7182:	18 95       	reti
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}
			}
		}else{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, getTime());
    7184:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    7188:	36 2f       	mov	r19, r22
    718a:	e7 2f       	mov	r30, r23
    718c:	a0 91 c1 26 	lds	r26, 0x26C1	; 0x8026c1 <task_list>
    7190:	b0 91 c2 26 	lds	r27, 0x26C2	; 0x8026c2 <task_list+0x1>
    7194:	4d 91       	ld	r20, X+
    7196:	5d 91       	ld	r21, X+
    7198:	6d 91       	ld	r22, X+
    719a:	7c 91       	ld	r23, X
    719c:	20 91 bc 26 	lds	r18, 0x26BC	; 0x8026bc <task_executing>
    71a0:	9f 93       	push	r25
    71a2:	8f 93       	push	r24
    71a4:	ef 93       	push	r30
    71a6:	3f 93       	push	r19
    71a8:	7f 93       	push	r23
    71aa:	6f 93       	push	r22
    71ac:	5f 93       	push	r21
    71ae:	4f 93       	push	r20
    71b0:	1f 92       	push	r1
    71b2:	2f 93       	push	r18
    71b4:	84 e8       	ldi	r24, 0x84	; 132
    71b6:	92 e2       	ldi	r25, 0x22	; 34
    71b8:	9f 93       	push	r25
    71ba:	8f 93       	push	r24
    71bc:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    71c0:	8d b7       	in	r24, 0x3d	; 61
    71c2:	9e b7       	in	r25, 0x3e	; 62
    71c4:	0c 96       	adiw	r24, 0x0c	; 12
    71c6:	8d bf       	out	0x3d, r24	; 61
    71c8:	9e bf       	out	0x3e, r25	; 62
    71ca:	c1 cf       	rjmp	.-126    	; 0x714e <__vector_10+0x98>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		rtc_epoch++;
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
			if(!task_executing){
				if(task_list->scheduled_time < getTime()){
    71cc:	c0 80       	ld	r12, Z
    71ce:	d1 80       	ldd	r13, Z+1	; 0x01
    71d0:	e2 80       	ldd	r14, Z+2	; 0x02
    71d2:	f3 80       	ldd	r15, Z+3	; 0x03
    71d4:	0e 94 36 08 	call	0x106c	; 0x106c <getTime>
    71d8:	c6 16       	cp	r12, r22
    71da:	d7 06       	cpc	r13, r23
    71dc:	e8 06       	cpc	r14, r24
    71de:	f9 06       	cpc	r15, r25
    71e0:	08 f4       	brcc	.+2      	; 0x71e4 <__vector_10+0x12e>
    71e2:	b5 cf       	rjmp	.-150    	; 0x714e <__vector_10+0x98>
					//printf("In overflow, tasks need to have been executed!\r\n");
					//print_task_queue();
				}else{		
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    71e4:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    71e8:	80 fd       	sbrc	r24, 0
    71ea:	fc cf       	rjmp	.-8      	; 0x71e4 <__vector_10+0x12e>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    71ec:	e0 91 c1 26 	lds	r30, 0x26C1	; 0x8026c1 <task_list>
    71f0:	f0 91 c2 26 	lds	r31, 0x26C2	; 0x8026c2 <task_list+0x1>
    71f4:	80 81       	ld	r24, Z
    71f6:	91 81       	ldd	r25, Z+1	; 0x01
    71f8:	a2 81       	ldd	r26, Z+2	; 0x02
    71fa:	b3 81       	ldd	r27, Z+3	; 0x03
    71fc:	88 60       	ori	r24, 0x08	; 8
    71fe:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    7202:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    7206:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    720a:	84 60       	ori	r24, 0x04	; 4
    720c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    7210:	9e cf       	rjmp	.-196    	; 0x714e <__vector_10+0x98>

00007212 <sendID>:
 */
static void handle_reset(void){
	dropletReboot();
}

void sendID(){
    7212:	0f 93       	push	r16
    7214:	1f 93       	push	r17
    7216:	cf 93       	push	r28
    7218:	df 93       	push	r29
    721a:	cd b7       	in	r28, 0x3d	; 61
    721c:	de b7       	in	r29, 0x3e	; 62
    721e:	25 97       	sbiw	r28, 0x05	; 5
    7220:	cd bf       	out	0x3d, r28	; 61
    7222:	de bf       	out	0x3e, r29	; 62
	char msg[5];
	sprintf(msg, "%04X", getDropletID());
    7224:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <droplet_ID+0x1>
    7228:	8f 93       	push	r24
    722a:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <droplet_ID>
    722e:	8f 93       	push	r24
    7230:	85 ee       	ldi	r24, 0xE5	; 229
    7232:	92 e2       	ldi	r25, 0x22	; 34
    7234:	9f 93       	push	r25
    7236:	8f 93       	push	r24
    7238:	8e 01       	movw	r16, r28
    723a:	0f 5f       	subi	r16, 0xFF	; 255
    723c:	1f 4f       	sbci	r17, 0xFF	; 255
    723e:	1f 93       	push	r17
    7240:	0f 93       	push	r16
    7242:	0e 94 0b 51 	call	0xa216	; 0xa216 <sprintf>
	irSend(ALL_DIRS, msg, 4);
    7246:	44 e0       	ldi	r20, 0x04	; 4
    7248:	b8 01       	movw	r22, r16
    724a:	8f e3       	ldi	r24, 0x3F	; 63
    724c:	0e 94 3c 14 	call	0x2878	; 0x2878 <irSend>
}
    7250:	0f 90       	pop	r0
    7252:	0f 90       	pop	r0
    7254:	0f 90       	pop	r0
    7256:	0f 90       	pop	r0
    7258:	0f 90       	pop	r0
    725a:	0f 90       	pop	r0
    725c:	25 96       	adiw	r28, 0x05	; 5
    725e:	cd bf       	out	0x3d, r28	; 61
    7260:	de bf       	out	0x3e, r29	; 62
    7262:	df 91       	pop	r29
    7264:	cf 91       	pop	r28
    7266:	1f 91       	pop	r17
    7268:	0f 91       	pop	r16
    726a:	08 95       	ret

0000726c <handleSerialCommand>:
/*
 * This is where incoming commands are interpreted. The actual command is the string inside the PSTR function.
 * For example, move_steps, walk, or get_rgb. If the command matches the string, the function on the same line
 * will get called. See individual functions for further documentation on that command's syntax.
 */
void handleSerialCommand(char* command, uint16_t command_length){
    726c:	2f 92       	push	r2
    726e:	3f 92       	push	r3
    7270:	4f 92       	push	r4
    7272:	5f 92       	push	r5
    7274:	6f 92       	push	r6
    7276:	7f 92       	push	r7
    7278:	8f 92       	push	r8
    727a:	9f 92       	push	r9
    727c:	af 92       	push	r10
    727e:	bf 92       	push	r11
    7280:	cf 92       	push	r12
    7282:	df 92       	push	r13
    7284:	ef 92       	push	r14
    7286:	ff 92       	push	r15
    7288:	0f 93       	push	r16
    728a:	1f 93       	push	r17
    728c:	cf 93       	push	r28
    728e:	df 93       	push	r29
    7290:	cd b7       	in	r28, 0x3d	; 61
    7292:	de b7       	in	r29, 0x3e	; 62
    7294:	c7 5a       	subi	r28, 0xA7	; 167
    7296:	d1 09       	sbc	r29, r1
    7298:	cd bf       	out	0x3d, r28	; 61
    729a:	de bf       	out	0x3e, r29	; 62
    729c:	dc 01       	movw	r26, r24
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
    729e:	9c 91       	ld	r25, X
    72a0:	91 11       	cpse	r25, r1
    72a2:	17 c0       	rjmp	.+46     	; 0x72d2 <handleSerialCommand+0x66>
		}else if(userHandleCommand){ //First, make sure the function is defined
			if(!userHandleCommand(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
		}
		else printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}
    72a4:	c9 55       	subi	r28, 0x59	; 89
    72a6:	df 4f       	sbci	r29, 0xFF	; 255
    72a8:	cd bf       	out	0x3d, r28	; 61
    72aa:	de bf       	out	0x3e, r29	; 62
    72ac:	df 91       	pop	r29
    72ae:	cf 91       	pop	r28
    72b0:	1f 91       	pop	r17
    72b2:	0f 91       	pop	r16
    72b4:	ff 90       	pop	r15
    72b6:	ef 90       	pop	r14
    72b8:	df 90       	pop	r13
    72ba:	cf 90       	pop	r12
    72bc:	bf 90       	pop	r11
    72be:	af 90       	pop	r10
    72c0:	9f 90       	pop	r9
    72c2:	8f 90       	pop	r8
    72c4:	7f 90       	pop	r7
    72c6:	6f 90       	pop	r6
    72c8:	5f 90       	pop	r5
    72ca:	4f 90       	pop	r4
    72cc:	3f 90       	pop	r3
    72ce:	2f 90       	pop	r2
    72d0:	08 95       	ret

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    72d2:	61 15       	cp	r22, r1
    72d4:	71 05       	cpc	r23, r1
    72d6:	09 f4       	brne	.+2      	; 0x72da <handleSerialCommand+0x6e>
    72d8:	f9 c1       	rjmp	.+1010   	; 0x76cc <handleSerialCommand+0x460>
    72da:	fd 01       	movw	r30, r26
    72dc:	31 96       	adiw	r30, 0x01	; 1
    72de:	6a 0f       	add	r22, r26
    72e0:	7b 1f       	adc	r23, r27
    72e2:	20 e0       	ldi	r18, 0x00	; 0
    72e4:	30 e0       	ldi	r19, 0x00	; 0
    72e6:	81 e0       	ldi	r24, 0x01	; 1
    72e8:	8e 01       	movw	r16, r28
    72ea:	0f 5b       	subi	r16, 0xBF	; 191
    72ec:	1f 4f       	sbci	r17, 0xFF	; 255
    72ee:	12 c0       	rjmp	.+36     	; 0x7314 <handleSerialCommand+0xa8>
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
			writing_word_boole = 0;
		}else{
			if(writing_word_boole==1){
    72f0:	81 30       	cpi	r24, 0x01	; 1
    72f2:	09 f4       	brne	.+2      	; 0x72f6 <handleSerialCommand+0x8a>
    72f4:	ca c0       	rjmp	.+404    	; 0x748a <handleSerialCommand+0x21e>
				command_word[write_index] = command[i];
			}else{
				command_args[write_index] = command[i];
    72f6:	a1 e0       	ldi	r26, 0x01	; 1
    72f8:	b0 e0       	ldi	r27, 0x00	; 0
    72fa:	ac 0f       	add	r26, r28
    72fc:	bd 1f       	adc	r27, r29
    72fe:	a2 0f       	add	r26, r18
    7300:	b3 1f       	adc	r27, r19
    7302:	9c 93       	st	X, r25
			}
			write_index++;
    7304:	2f 5f       	subi	r18, 0xFF	; 255
    7306:	3f 4f       	sbci	r19, 0xFF	; 255

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    7308:	6e 17       	cp	r22, r30
    730a:	7f 07       	cpc	r23, r31
    730c:	89 f0       	breq	.+34     	; 0x7330 <handleSerialCommand+0xc4>
		if(command[i]=='\0'){
    730e:	91 91       	ld	r25, Z+
    7310:	99 23       	and	r25, r25
    7312:	71 f0       	breq	.+28     	; 0x7330 <handleSerialCommand+0xc4>
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
    7314:	90 32       	cpi	r25, 0x20	; 32
    7316:	61 f7       	brne	.-40     	; 0x72f0 <handleSerialCommand+0x84>
    7318:	81 30       	cpi	r24, 0x01	; 1
    731a:	69 f7       	brne	.-38     	; 0x72f6 <handleSerialCommand+0x8a>
			command_word[write_index]='\0';
    731c:	d8 01       	movw	r26, r16
    731e:	a2 0f       	add	r26, r18
    7320:	b3 1f       	adc	r27, r19
    7322:	1c 92       	st	X, r1
			write_index = 0;
			writing_word_boole = 0;
    7324:	80 e0       	ldi	r24, 0x00	; 0
	for(uint16_t i=0 ; i<command_length ; i++){
		if(command[i]=='\0'){
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
    7326:	20 e0       	ldi	r18, 0x00	; 0
    7328:	30 e0       	ldi	r19, 0x00	; 0

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    732a:	6e 17       	cp	r22, r30
    732c:	7f 07       	cpc	r23, r31
    732e:	79 f7       	brne	.-34     	; 0x730e <handleSerialCommand+0xa2>
				command_args[write_index] = command[i];
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
    7330:	81 30       	cpi	r24, 0x01	; 1
    7332:	09 f4       	brne	.+2      	; 0x7336 <handleSerialCommand+0xca>
    7334:	72 c1       	rjmp	.+740    	; 0x761a <handleSerialCommand+0x3ae>
		command_word[write_index] = '\0';
		command_args[0] = '\0';
	}else{
		command_args[write_index] = '\0';
    7336:	fe 01       	movw	r30, r28
    7338:	e2 0f       	add	r30, r18
    733a:	f3 1f       	adc	r31, r19
    733c:	11 82       	std	Z+1, r1	; 0x01
void handleSerialCommand(char* command, uint16_t command_length){
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
		char command_word[SRL_BUFFER_SIZE];
		char command_args[SRL_BUFFER_SIZE];
		get_command_word_and_args(command,command_length,command_word,command_args);
			 if(strcmp_P(command_word,PSTR("move_steps"))==0)			handle_move_steps(command_args);
    733e:	6c ea       	ldi	r22, 0xAC	; 172
    7340:	7f e0       	ldi	r23, 0x0F	; 15
    7342:	c8 01       	movw	r24, r16
    7344:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7348:	89 2b       	or	r24, r25
    734a:	09 f4       	brne	.+2      	; 0x734e <handleSerialCommand+0xe2>
    734c:	c3 c0       	rjmp	.+390    	; 0x74d4 <handleSerialCommand+0x268>
		else if(strcmp_P(command_word,PSTR("walk"))==0)					handle_walk(command_args);
    734e:	67 ea       	ldi	r22, 0xA7	; 167
    7350:	7f e0       	ldi	r23, 0x0F	; 15
    7352:	c8 01       	movw	r24, r16
    7354:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7358:	89 2b       	or	r24, r25
    735a:	09 f4       	brne	.+2      	; 0x735e <handleSerialCommand+0xf2>
    735c:	9b c0       	rjmp	.+310    	; 0x7494 <handleSerialCommand+0x228>
		else if(strcmp_P(command_word,PSTR("get_rgb"))==0)				handle_get_rgb();
    735e:	6f e9       	ldi	r22, 0x9F	; 159
    7360:	7f e0       	ldi	r23, 0x0F	; 15
    7362:	c8 01       	movw	r24, r16
    7364:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7368:	89 2b       	or	r24, r25
    736a:	09 f4       	brne	.+2      	; 0x736e <handleSerialCommand+0x102>
    736c:	e8 c0       	rjmp	.+464    	; 0x753e <handleSerialCommand+0x2d2>
		else if(strcmp_P(command_word,PSTR("set_ir"))==0)				handle_set_ir(command_args);
    736e:	68 e9       	ldi	r22, 0x98	; 152
    7370:	7f e0       	ldi	r23, 0x0F	; 15
    7372:	c8 01       	movw	r24, r16
    7374:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7378:	89 2b       	or	r24, r25
    737a:	09 f4       	brne	.+2      	; 0x737e <handleSerialCommand+0x112>
    737c:	54 c1       	rjmp	.+680    	; 0x7626 <handleSerialCommand+0x3ba>
		else if(strcmp_P(command_word,PSTR("coll"))==0)					handle_check_collisions();
    737e:	63 e9       	ldi	r22, 0x93	; 147
    7380:	7f e0       	ldi	r23, 0x0F	; 15
    7382:	c8 01       	movw	r24, r16
    7384:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7388:	89 2b       	or	r24, r25
    738a:	09 f4       	brne	.+2      	; 0x738e <handleSerialCommand+0x122>
    738c:	67 c1       	rjmp	.+718    	; 0x765c <handleSerialCommand+0x3f0>
		else if(strcmp_P(command_word,PSTR("stop_walk"))==0)			handle_stop_walk();
    738e:	69 e8       	ldi	r22, 0x89	; 137
    7390:	7f e0       	ldi	r23, 0x0F	; 15
    7392:	c8 01       	movw	r24, r16
    7394:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7398:	89 2b       	or	r24, r25
    739a:	09 f4       	brne	.+2      	; 0x739e <handleSerialCommand+0x132>
    739c:	94 c1       	rjmp	.+808    	; 0x76c6 <handleSerialCommand+0x45a>
		else if(strcmp_P(command_word,PSTR("set_motors"))==0)			handle_set_motors(command_args);
    739e:	6e e7       	ldi	r22, 0x7E	; 126
    73a0:	7f e0       	ldi	r23, 0x0F	; 15
    73a2:	c8 01       	movw	r24, r16
    73a4:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    73a8:	89 2b       	or	r24, r25
    73aa:	09 f4       	brne	.+2      	; 0x73ae <handleSerialCommand+0x142>
    73ac:	00 c1       	rjmp	.+512    	; 0x75ae <handleSerialCommand+0x342>
		else if(strcmp_P(command_word,PSTR("adj_motors"))==0)			handle_adjust_motors(command_args);
    73ae:	63 e7       	ldi	r22, 0x73	; 115
    73b0:	7f e0       	ldi	r23, 0x0F	; 15
    73b2:	c8 01       	movw	r24, r16
    73b4:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    73b8:	89 2b       	or	r24, r25
    73ba:	09 f4       	brne	.+2      	; 0x73be <handleSerialCommand+0x152>
    73bc:	8c c1       	rjmp	.+792    	; 0x76d6 <handleSerialCommand+0x46a>
		else if(strcmp_P(command_word,PSTR("set_dist_per_step"))==0)	handle_set_mm_per_kilostep(command_args);
    73be:	61 e6       	ldi	r22, 0x61	; 97
    73c0:	7f e0       	ldi	r23, 0x0F	; 15
    73c2:	c8 01       	movw	r24, r16
    73c4:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    73c8:	89 2b       	or	r24, r25
    73ca:	09 f4       	brne	.+2      	; 0x73ce <handleSerialCommand+0x162>
    73cc:	ba c1       	rjmp	.+884    	; 0x7742 <handleSerialCommand+0x4d6>
		else if(strcmp_P(command_word,PSTR("rnb_b"))==0)				handle_rnb_broadcast();
    73ce:	6b e5       	ldi	r22, 0x5B	; 91
    73d0:	7f e0       	ldi	r23, 0x0F	; 15
    73d2:	c8 01       	movw	r24, r16
    73d4:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    73d8:	89 2b       	or	r24, r25
    73da:	09 f4       	brne	.+2      	; 0x73de <handleSerialCommand+0x172>
    73dc:	25 c2       	rjmp	.+1098   	; 0x7828 <handleSerialCommand+0x5bc>
		else if(strcmp_P(command_word,PSTR("set_led"))==0)				handle_set_led(command_args);
    73de:	63 e5       	ldi	r22, 0x53	; 83
    73e0:	7f e0       	ldi	r23, 0x0F	; 15
    73e2:	c8 01       	movw	r24, r16
    73e4:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    73e8:	89 2b       	or	r24, r25
    73ea:	09 f4       	brne	.+2      	; 0x73ee <handleSerialCommand+0x182>
    73ec:	a4 c2       	rjmp	.+1352   	; 0x7936 <handleSerialCommand+0x6ca>
		else if(strcmp_P(command_word,PSTR("get_id"))==0)				handle_get_id();
    73ee:	6c e4       	ldi	r22, 0x4C	; 76
    73f0:	7f e0       	ldi	r23, 0x0F	; 15
    73f2:	c8 01       	movw	r24, r16
    73f4:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    73f8:	89 2b       	or	r24, r25
    73fa:	09 f4       	brne	.+2      	; 0x73fe <handleSerialCommand+0x192>
    73fc:	ea c2       	rjmp	.+1492   	; 0x79d2 <handleSerialCommand+0x766>
		else if(strcmp_P(command_word,PSTR("broadcast_id"))==0)			handle_broadcast_id();
    73fe:	6f e3       	ldi	r22, 0x3F	; 63
    7400:	7f e0       	ldi	r23, 0x0F	; 15
    7402:	c8 01       	movw	r24, r16
    7404:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7408:	89 2b       	or	r24, r25
    740a:	09 f4       	brne	.+2      	; 0x740e <handleSerialCommand+0x1a2>
    740c:	f3 c2       	rjmp	.+1510   	; 0x79f4 <handleSerialCommand+0x788>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
    740e:	6b e3       	ldi	r22, 0x3B	; 59
    7410:	7f e0       	ldi	r23, 0x0F	; 15
    7412:	c8 01       	movw	r24, r16
    7414:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7418:	89 2b       	or	r24, r25
    741a:	09 f4       	brne	.+2      	; 0x741e <handleSerialCommand+0x1b2>
    741c:	f6 c2       	rjmp	.+1516   	; 0x7a0a <handleSerialCommand+0x79e>
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
    741e:	63 e3       	ldi	r22, 0x33	; 51
    7420:	7f e0       	ldi	r23, 0x0F	; 15
    7422:	c8 01       	movw	r24, r16
    7424:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7428:	89 2b       	or	r24, r25
    742a:	09 f4       	brne	.+2      	; 0x742e <handleSerialCommand+0x1c2>
    742c:	42 c3       	rjmp	.+1668   	; 0x7ab2 <handleSerialCommand+0x846>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
    742e:	6f e2       	ldi	r22, 0x2F	; 47
    7430:	7f e0       	ldi	r23, 0x0F	; 15
    7432:	c8 01       	movw	r24, r16
    7434:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7438:	89 2b       	or	r24, r25
    743a:	09 f4       	brne	.+2      	; 0x743e <handleSerialCommand+0x1d2>
    743c:	59 c4       	rjmp	.+2226   	; 0x7cf0 <handleSerialCommand+0xa84>
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
    743e:	67 e2       	ldi	r22, 0x27	; 39
    7440:	7f e0       	ldi	r23, 0x0F	; 15
    7442:	c8 01       	movw	r24, r16
    7444:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7448:	89 2b       	or	r24, r25
    744a:	09 f4       	brne	.+2      	; 0x744e <handleSerialCommand+0x1e2>
    744c:	3c c4       	rjmp	.+2168   	; 0x7cc6 <handleSerialCommand+0xa5a>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
    744e:	63 e2       	ldi	r22, 0x23	; 35
    7450:	7f e0       	ldi	r23, 0x0F	; 15
    7452:	c8 01       	movw	r24, r16
    7454:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7458:	89 2b       	or	r24, r25
    745a:	09 f4       	brne	.+2      	; 0x745e <handleSerialCommand+0x1f2>
    745c:	00 c4       	rjmp	.+2048   	; 0x7c5e <handleSerialCommand+0x9f2>
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
    745e:	6d e1       	ldi	r22, 0x1D	; 29
    7460:	7f e0       	ldi	r23, 0x0F	; 15
    7462:	c8 01       	movw	r24, r16
    7464:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7468:	89 2b       	or	r24, r25
    746a:	09 f4       	brne	.+2      	; 0x746e <handleSerialCommand+0x202>
    746c:	f5 c3       	rjmp	.+2026   	; 0x7c58 <handleSerialCommand+0x9ec>
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
    746e:	67 e1       	ldi	r22, 0x17	; 23
    7470:	7f e0       	ldi	r23, 0x0F	; 15
    7472:	c8 01       	movw	r24, r16
    7474:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7478:	89 2b       	or	r24, r25
    747a:	09 f0       	breq	.+2      	; 0x747e <handleSerialCommand+0x212>
    747c:	b9 c3       	rjmp	.+1906   	; 0x7bf0 <handleSerialCommand+0x984>

/**
 * \brief Resets the Droplet's program counter and clears all low-level system buffers.
 */
inline void dropletReboot(void){
	CPU_CCP=CCP_IOREG_gc;
    747e:	88 ed       	ldi	r24, 0xD8	; 216
    7480:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
    7482:	81 e0       	ldi	r24, 0x01	; 1
    7484:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    7488:	0d cf       	rjmp	.-486    	; 0x72a4 <handleSerialCommand+0x38>
			command_word[write_index]='\0';
			write_index = 0;
			writing_word_boole = 0;
		}else{
			if(writing_word_boole==1){
				command_word[write_index] = command[i];
    748a:	d8 01       	movw	r26, r16
    748c:	a2 0f       	add	r26, r18
    748e:	b3 1f       	adc	r27, r19
    7490:	9c 93       	st	X, r25
    7492:	38 cf       	rjmp	.-400    	; 0x7304 <handleSerialCommand+0x98>
 * Format:
 *     walk <dir> <distance>
 * Calls the walk function with arguments as described above.
 */
static void handle_walk(char* command_args){	
	const char delim[2] = " ";
    7494:	80 e2       	ldi	r24, 0x20	; 32
    7496:	90 e0       	ldi	r25, 0x00	; 0
    7498:	cf 57       	subi	r28, 0x7F	; 127
    749a:	df 4f       	sbci	r29, 0xFF	; 255
    749c:	88 83       	st	Y, r24
    749e:	99 83       	std	Y+1, r25	; 0x01
    74a0:	c1 58       	subi	r28, 0x81	; 129
    74a2:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    74a4:	be 01       	movw	r22, r28
    74a6:	6f 57       	subi	r22, 0x7F	; 127
    74a8:	7f 4f       	sbci	r23, 0xFF	; 255
    74aa:	ce 01       	movw	r24, r28
    74ac:	01 96       	adiw	r24, 0x01	; 1
    74ae:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	uint8_t direction = token[0]-'0';
    74b2:	fc 01       	movw	r30, r24
    74b4:	10 81       	ld	r17, Z
    74b6:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    74b8:	be 01       	movw	r22, r28
    74ba:	6f 57       	subi	r22, 0x7F	; 127
    74bc:	7f 4f       	sbci	r23, 0xFF	; 255
    74be:	80 e0       	ldi	r24, 0x00	; 0
    74c0:	90 e0       	ldi	r25, 0x00	; 0
    74c2:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	uint16_t distance_mm = (uint16_t)atoi(token);
    74c6:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
	
	walk(direction, distance_mm);
    74ca:	bc 01       	movw	r22, r24
    74cc:	81 2f       	mov	r24, r17
    74ce:	0e 94 b0 20 	call	0x4160	; 0x4160 <walk>
    74d2:	e8 ce       	rjmp	.-560    	; 0x72a4 <handleSerialCommand+0x38>
 * Format:
 *     move_steps <dir> <num_steps>
 * Calls the move_steps function with arguments as described above.
 */
static void handle_move_steps(char* command_args){
	const char delim[2] = " ";
    74d4:	80 e2       	ldi	r24, 0x20	; 32
    74d6:	90 e0       	ldi	r25, 0x00	; 0
    74d8:	cf 57       	subi	r28, 0x7F	; 127
    74da:	df 4f       	sbci	r29, 0xFF	; 255
    74dc:	88 83       	st	Y, r24
    74de:	99 83       	std	Y+1, r25	; 0x01
    74e0:	c1 58       	subi	r28, 0x81	; 129
    74e2:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    74e4:	be 01       	movw	r22, r28
    74e6:	6f 57       	subi	r22, 0x7F	; 127
    74e8:	7f 4f       	sbci	r23, 0xFF	; 255
    74ea:	ce 01       	movw	r24, r28
    74ec:	01 96       	adiw	r24, 0x01	; 1
    74ee:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	uint8_t direction = token[0]-'0';
    74f2:	fc 01       	movw	r30, r24
    74f4:	f0 80       	ld	r15, Z

	token = strtok(NULL,delim);
    74f6:	be 01       	movw	r22, r28
    74f8:	6f 57       	subi	r22, 0x7F	; 127
    74fa:	7f 4f       	sbci	r23, 0xFF	; 255
    74fc:	80 e0       	ldi	r24, 0x00	; 0
    74fe:	90 e0       	ldi	r25, 0x00	; 0
    7500:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	uint16_t num_steps = (uint16_t)atoi(token);
    7504:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    7508:	8c 01       	movw	r16, r24
	if (num_steps > 0){	
    750a:	00 97       	sbiw	r24, 0x00	; 0
    750c:	09 f4       	brne	.+2      	; 0x7510 <handleSerialCommand+0x2a4>
    750e:	ca ce       	rjmp	.-620    	; 0x72a4 <handleSerialCommand+0x38>
 */
static void handle_move_steps(char* command_args){
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	uint8_t direction = token[0]-'0';
    7510:	f0 ed       	ldi	r31, 0xD0	; 208
    7512:	ff 0e       	add	r15, r31

	token = strtok(NULL,delim);
	uint16_t num_steps = (uint16_t)atoi(token);
	if (num_steps > 0){	
		printf_P(PSTR("walk direction %hu, num_steps %u\r\n"), direction, num_steps);	
    7514:	1f 93       	push	r17
    7516:	8f 93       	push	r24
    7518:	1f 92       	push	r1
    751a:	ff 92       	push	r15
    751c:	8a ec       	ldi	r24, 0xCA	; 202
    751e:	9e e0       	ldi	r25, 0x0E	; 14
    7520:	9f 93       	push	r25
    7522:	8f 93       	push	r24
    7524:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
		moveSteps(direction, num_steps);
    7528:	b8 01       	movw	r22, r16
    752a:	8f 2d       	mov	r24, r15
    752c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <moveSteps>
    7530:	0f 90       	pop	r0
    7532:	0f 90       	pop	r0
    7534:	0f 90       	pop	r0
    7536:	0f 90       	pop	r0
    7538:	0f 90       	pop	r0
    753a:	0f 90       	pop	r0
    753c:	b3 ce       	rjmp	.-666    	; 0x72a4 <handleSerialCommand+0x38>
 * No arguments.
 * Prints the sensed colors, as reported by get_rgb.
 */
static void handle_get_rgb(void){
	int16_t r, g, b;
	getRGB(&r, &g, &b);
    753e:	ae 01       	movw	r20, r28
    7540:	4f 57       	subi	r20, 0x7F	; 127
    7542:	5f 4f       	sbci	r21, 0xFF	; 255
    7544:	be 01       	movw	r22, r28
    7546:	6f 55       	subi	r22, 0x5F	; 95
    7548:	7f 4f       	sbci	r23, 0xFF	; 255
    754a:	ce 01       	movw	r24, r28
    754c:	8a 55       	subi	r24, 0x5A	; 90
    754e:	9f 4f       	sbci	r25, 0xFF	; 255
    7550:	0e 94 cb 32 	call	0x6596	; 0x6596 <getRGB>
	printf_P(PSTR("r: %hu, g: %hu, b: %hu\r\n"), r, g, b);
    7554:	ce 57       	subi	r28, 0x7E	; 126
    7556:	df 4f       	sbci	r29, 0xFF	; 255
    7558:	88 81       	ld	r24, Y
    755a:	c2 58       	subi	r28, 0x82	; 130
    755c:	d0 40       	sbci	r29, 0x00	; 0
    755e:	8f 93       	push	r24
    7560:	cf 57       	subi	r28, 0x7F	; 127
    7562:	df 4f       	sbci	r29, 0xFF	; 255
    7564:	88 81       	ld	r24, Y
    7566:	c1 58       	subi	r28, 0x81	; 129
    7568:	d0 40       	sbci	r29, 0x00	; 0
    756a:	8f 93       	push	r24
    756c:	ce 55       	subi	r28, 0x5E	; 94
    756e:	df 4f       	sbci	r29, 0xFF	; 255
    7570:	88 81       	ld	r24, Y
    7572:	c2 5a       	subi	r28, 0xA2	; 162
    7574:	d0 40       	sbci	r29, 0x00	; 0
    7576:	8f 93       	push	r24
    7578:	cf 55       	subi	r28, 0x5F	; 95
    757a:	df 4f       	sbci	r29, 0xFF	; 255
    757c:	88 81       	ld	r24, Y
    757e:	c1 5a       	subi	r28, 0xA1	; 161
    7580:	d0 40       	sbci	r29, 0x00	; 0
    7582:	8f 93       	push	r24
    7584:	c9 55       	subi	r28, 0x59	; 89
    7586:	df 4f       	sbci	r29, 0xFF	; 255
    7588:	88 81       	ld	r24, Y
    758a:	c7 5a       	subi	r28, 0xA7	; 167
    758c:	d0 40       	sbci	r29, 0x00	; 0
    758e:	8f 93       	push	r24
    7590:	ca 55       	subi	r28, 0x5A	; 90
    7592:	df 4f       	sbci	r29, 0xFF	; 255
    7594:	88 81       	ld	r24, Y
    7596:	c6 5a       	subi	r28, 0xA6	; 166
    7598:	d0 40       	sbci	r29, 0x00	; 0
    759a:	8f 93       	push	r24
    759c:	81 eb       	ldi	r24, 0xB1	; 177
    759e:	9e e0       	ldi	r25, 0x0E	; 14
    75a0:	9f 93       	push	r25
    75a2:	8f 93       	push	r24
    75a4:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    75a8:	cd bf       	out	0x3d, r28	; 61
    75aa:	de bf       	out	0x3e, r29	; 62
    75ac:	7b ce       	rjmp	.-778    	; 0x72a4 <handleSerialCommand+0x38>
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    75ae:	60 90 7a 0a 	lds	r6, 0x0A7A	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    75b2:	70 90 7b 0a 	lds	r7, 0x0A7B	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    75b6:	a0 90 78 0a 	lds	r10, 0x0A78	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    75ba:	b0 90 79 0a 	lds	r11, 0x0A79	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    75be:	80 90 78 09 	lds	r8, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    75c2:	90 90 79 09 	lds	r9, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
 * how long it spins for.
 * Note that Audio Droplets don't have a motor 0, so <mot0val> should always be 0 for them.
 */
static void handle_set_motors(char* command_args){	
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
    75c6:	4f ef       	ldi	r20, 0xFF	; 255
    75c8:	60 e0       	ldi	r22, 0x00	; 0
    75ca:	80 e0       	ldi	r24, 0x00	; 0
    75cc:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
	const char delim[2] = " ";
    75d0:	8e 01       	movw	r16, r28
    75d2:	0f 57       	subi	r16, 0x7F	; 127
    75d4:	1f 4f       	sbci	r17, 0xFF	; 255
    75d6:	80 e2       	ldi	r24, 0x20	; 32
    75d8:	90 e0       	ldi	r25, 0x00	; 0
    75da:	f8 01       	movw	r30, r16
    75dc:	80 83       	st	Z, r24
    75de:	91 83       	std	Z+1, r25	; 0x01
	
	char* token = strtok(command_args,delim);
    75e0:	b8 01       	movw	r22, r16
    75e2:	ce 01       	movw	r24, r28
    75e4:	01 96       	adiw	r24, 0x01	; 1
    75e6:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    75ea:	00 97       	sbiw	r24, 0x00	; 0
    75ec:	09 f4       	brne	.+2      	; 0x75f0 <handleSerialCommand+0x384>
    75ee:	ca c2       	rjmp	.+1428   	; 0x7b84 <handleSerialCommand+0x918>
	uint8_t direction = atoi(token);
    75f0:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    75f4:	7c 01       	movw	r14, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}
    75f6:	f7 e0       	ldi	r31, 0x07	; 7
    75f8:	f8 17       	cp	r31, r24
    75fa:	08 f0       	brcs	.+2      	; 0x75fe <handleSerialCommand+0x392>
    75fc:	c2 c0       	rjmp	.+388    	; 0x7782 <handleSerialCommand+0x516>
    75fe:	ff 24       	eor	r15, r15
    7600:	ff 92       	push	r15
    7602:	ef 92       	push	r14
    7604:	81 e7       	ldi	r24, 0x71	; 113
    7606:	9e e0       	ldi	r25, 0x0E	; 14
    7608:	9f 93       	push	r25
    760a:	8f 93       	push	r24
    760c:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7610:	0f 90       	pop	r0
    7612:	0f 90       	pop	r0
    7614:	0f 90       	pop	r0
    7616:	0f 90       	pop	r0
    7618:	45 ce       	rjmp	.-886    	; 0x72a4 <handleSerialCommand+0x38>
    761a:	f8 01       	movw	r30, r16
    761c:	e2 0f       	add	r30, r18
    761e:	f3 1f       	adc	r31, r19
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
		command_word[write_index] = '\0';
    7620:	10 82       	st	Z, r1
		command_args[0] = '\0';
    7622:	19 82       	std	Y+1, r1	; 0x01
    7624:	8c ce       	rjmp	.-744    	; 0x733e <handleSerialCommand+0xd2>
 * Format:
 *     set_ir <power>
 * Calls the set_all_ir_powers function with arguments as described above.
 */
static void handle_set_ir(char* command_args){
	const char delim[2] = " ";
    7626:	80 e2       	ldi	r24, 0x20	; 32
    7628:	90 e0       	ldi	r25, 0x00	; 0
    762a:	cf 57       	subi	r28, 0x7F	; 127
    762c:	df 4f       	sbci	r29, 0xFF	; 255
    762e:	88 83       	st	Y, r24
    7630:	99 83       	std	Y+1, r25	; 0x01
    7632:	c1 58       	subi	r28, 0x81	; 129
    7634:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    7636:	be 01       	movw	r22, r28
    7638:	6f 57       	subi	r22, 0x7F	; 127
    763a:	7f 4f       	sbci	r23, 0xFF	; 255
    763c:	ce 01       	movw	r24, r28
    763e:	01 96       	adiw	r24, 0x01	; 1
    7640:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	uint16_t ir_val = (uint16_t)atoi(token);
    7644:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>

	scheduleTask(10, (arg_func_t)setAllirPowers, (void*)ir_val);
    7648:	9c 01       	movw	r18, r24
    764a:	4c e3       	ldi	r20, 0x3C	; 60
    764c:	5c e1       	ldi	r21, 0x1C	; 28
    764e:	6a e0       	ldi	r22, 0x0A	; 10
    7650:	70 e0       	ldi	r23, 0x00	; 0
    7652:	80 e0       	ldi	r24, 0x00	; 0
    7654:	90 e0       	ldi	r25, 0x00	; 0
    7656:	0e 94 f7 35 	call	0x6bee	; 0x6bee <scheduleTask>
    765a:	24 ce       	rjmp	.-952    	; 0x72a4 <handleSerialCommand+0x38>
/*
 * No arguments.
 * Prints each direction in which a collision was detected, or None.
 */
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
    765c:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <checkCollisions>
    7660:	e8 2e       	mov	r14, r24
    7662:	f1 2c       	mov	r15, r1
    7664:	00 e0       	ldi	r16, 0x00	; 0
    7666:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t found=0;
    7668:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
			printf("%hu",i);
    766a:	ab ef       	ldi	r26, 0xFB	; 251
    766c:	ca 2e       	mov	r12, r26
    766e:	a2 e2       	ldi	r26, 0x22	; 34
    7670:	da 2e       	mov	r13, r26
    7672:	05 c0       	rjmp	.+10     	; 0x767e <handleSerialCommand+0x412>
    7674:	0f 5f       	subi	r16, 0xFF	; 255
    7676:	1f 4f       	sbci	r17, 0xFF	; 255
 * Prints each direction in which a collision was detected, or None.
 */
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
    7678:	06 30       	cpi	r16, 0x06	; 6
    767a:	11 05       	cpc	r17, r1
    767c:	a9 f0       	breq	.+42     	; 0x76a8 <handleSerialCommand+0x43c>
		if(dirs&(1<<i)){
    767e:	c7 01       	movw	r24, r14
    7680:	00 2e       	mov	r0, r16
    7682:	02 c0       	rjmp	.+4      	; 0x7688 <handleSerialCommand+0x41c>
    7684:	95 95       	asr	r25
    7686:	87 95       	ror	r24
    7688:	0a 94       	dec	r0
    768a:	e2 f7       	brpl	.-8      	; 0x7684 <handleSerialCommand+0x418>
    768c:	80 ff       	sbrs	r24, 0
    768e:	f2 cf       	rjmp	.-28     	; 0x7674 <handleSerialCommand+0x408>
			found=1;
			printf("%hu",i);
    7690:	1f 93       	push	r17
    7692:	0f 93       	push	r16
    7694:	df 92       	push	r13
    7696:	cf 92       	push	r12
    7698:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    769c:	0f 90       	pop	r0
    769e:	0f 90       	pop	r0
    76a0:	0f 90       	pop	r0
    76a2:	0f 90       	pop	r0
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
    76a4:	21 e0       	ldi	r18, 0x01	; 1
    76a6:	e6 cf       	rjmp	.-52     	; 0x7674 <handleSerialCommand+0x408>
			printf("%hu",i);
		}
	}
	if(!found) printf("None");
    76a8:	21 11       	cpse	r18, r1
    76aa:	08 c0       	rjmp	.+16     	; 0x76bc <handleSerialCommand+0x450>
    76ac:	8f ef       	ldi	r24, 0xFF	; 255
    76ae:	92 e2       	ldi	r25, 0x22	; 34
    76b0:	9f 93       	push	r25
    76b2:	8f 93       	push	r24
    76b4:	0e 94 99 50 	call	0xa132	; 0xa132 <printf>
    76b8:	0f 90       	pop	r0
    76ba:	0f 90       	pop	r0
	printf("\r\n");
    76bc:	8f eb       	ldi	r24, 0xBF	; 191
    76be:	90 e2       	ldi	r25, 0x20	; 32
    76c0:	0e 94 db 50 	call	0xa1b6	; 0xa1b6 <puts>
    76c4:	ef cd       	rjmp	.-1058   	; 0x72a4 <handleSerialCommand+0x38>
/*
 * No arguments.
 * Calls the stop_move function; the droplet stops moving.
 */
static void handle_stop_walk(void){
	stopMove();
    76c6:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <stopMove>
    76ca:	ec cd       	rjmp	.-1064   	; 0x72a4 <handleSerialCommand+0x38>

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    76cc:	8e 01       	movw	r16, r28
    76ce:	0f 5b       	subi	r16, 0xBF	; 191
    76d0:	1f 4f       	sbci	r17, 0xFF	; 255
    76d2:	f8 01       	movw	r30, r16
    76d4:	a5 cf       	rjmp	.-182    	; 0x7620 <handleSerialCommand+0x3b4>
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    76d6:	40 90 7a 0a 	lds	r4, 0x0A7A	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    76da:	50 90 7b 0a 	lds	r5, 0x0A7B	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    76de:	60 90 78 0a 	lds	r6, 0x0A78	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    76e2:	70 90 79 0a 	lds	r7, 0x0A79	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    76e6:	80 90 78 09 	lds	r8, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    76ea:	90 90 79 09 	lds	r9, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
 * Same as set_motors, described above, except that the motor settings currently stored in volatile 
 * memory are changed by the indicated values.
 */
static void handle_adjust_motors(char* command_args){
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
    76ee:	4f ef       	ldi	r20, 0xFF	; 255
    76f0:	60 e0       	ldi	r22, 0x00	; 0
    76f2:	80 e0       	ldi	r24, 0x00	; 0
    76f4:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
	const char delim[2] = " ";
    76f8:	8e 01       	movw	r16, r28
    76fa:	0f 57       	subi	r16, 0x7F	; 127
    76fc:	1f 4f       	sbci	r17, 0xFF	; 255
    76fe:	80 e2       	ldi	r24, 0x20	; 32
    7700:	90 e0       	ldi	r25, 0x00	; 0
    7702:	f8 01       	movw	r30, r16
    7704:	80 83       	st	Z, r24
    7706:	91 83       	std	Z+1, r25	; 0x01
	
	char* token = strtok(command_args,delim);
    7708:	b8 01       	movw	r22, r16
    770a:	ce 01       	movw	r24, r28
    770c:	01 96       	adiw	r24, 0x01	; 1
    770e:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    7712:	00 97       	sbiw	r24, 0x00	; 0
    7714:	09 f4       	brne	.+2      	; 0x7718 <handleSerialCommand+0x4ac>
    7716:	3f c2       	rjmp	.+1150   	; 0x7b96 <handleSerialCommand+0x92a>
	uint8_t direction = atoi(token);
    7718:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    771c:	7c 01       	movw	r14, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}
    771e:	f7 e0       	ldi	r31, 0x07	; 7
    7720:	f8 17       	cp	r31, r24
    7722:	08 f0       	brcs	.+2      	; 0x7726 <handleSerialCommand+0x4ba>
    7724:	8c c0       	rjmp	.+280    	; 0x783e <handleSerialCommand+0x5d2>
    7726:	ff 24       	eor	r15, r15
    7728:	ff 92       	push	r15
    772a:	ef 92       	push	r14
    772c:	84 e8       	ldi	r24, 0x84	; 132
    772e:	9d e0       	ldi	r25, 0x0D	; 13
    7730:	9f 93       	push	r25
    7732:	8f 93       	push	r24
    7734:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7738:	0f 90       	pop	r0
    773a:	0f 90       	pop	r0
    773c:	0f 90       	pop	r0
    773e:	0f 90       	pop	r0
    7740:	b1 cd       	rjmp	.-1182   	; 0x72a4 <handleSerialCommand+0x38>
 * Adjusts the (volatile-memory-copy) walking distance settings for <dir>; the value should
 * be the distance in mm that the robot travels per thousand steps taken. For spinning
 * directions (6 & 7), the distance is in degrees.
 */
static void handle_set_mm_per_kilostep(char* command_args){
	const char delim[2] = " ";
    7742:	80 e2       	ldi	r24, 0x20	; 32
    7744:	90 e0       	ldi	r25, 0x00	; 0
    7746:	cf 57       	subi	r28, 0x7F	; 127
    7748:	df 4f       	sbci	r29, 0xFF	; 255
    774a:	88 83       	st	Y, r24
    774c:	99 83       	std	Y+1, r25	; 0x01
    774e:	c1 58       	subi	r28, 0x81	; 129
    7750:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    7752:	be 01       	movw	r22, r28
    7754:	6f 57       	subi	r22, 0x7F	; 127
    7756:	7f 4f       	sbci	r23, 0xFF	; 255
    7758:	ce 01       	movw	r24, r28
    775a:	01 96       	adiw	r24, 0x01	; 1
    775c:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	uint8_t direction = token[0]-'0';
    7760:	fc 01       	movw	r30, r24
    7762:	10 81       	ld	r17, Z
    7764:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    7766:	be 01       	movw	r22, r28
    7768:	6f 57       	subi	r22, 0x7F	; 127
    776a:	7f 4f       	sbci	r23, 0xFF	; 255
    776c:	80 e0       	ldi	r24, 0x00	; 0
    776e:	90 e0       	ldi	r25, 0x00	; 0
    7770:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	uint16_t mm_per_kilostep = atoi(token);
    7774:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>

	setMMperKilostep(direction, mm_per_kilostep);
    7778:	bc 01       	movw	r22, r24
    777a:	81 2f       	mov	r24, r17
    777c:	0e 94 27 21 	call	0x424e	; 0x424e <setMMperKilostep>
    7780:	91 cd       	rjmp	.-1246   	; 0x72a4 <handleSerialCommand+0x38>
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
    7782:	b8 01       	movw	r22, r16
    7784:	80 e0       	ldi	r24, 0x00	; 0
    7786:	90 e0       	ldi	r25, 0x00	; 0
    7788:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    778c:	00 97       	sbiw	r24, 0x00	; 0
    778e:	09 f4       	brne	.+2      	; 0x7792 <handleSerialCommand+0x526>
    7790:	e6 c1       	rjmp	.+972    	; 0x7b5e <handleSerialCommand+0x8f2>
    7792:	ff 24       	eor	r15, r15
	motorAdjusts[direction][0] = atoi(token);
    7794:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    7798:	97 01       	movw	r18, r14
    779a:	22 0f       	add	r18, r18
    779c:	33 1f       	adc	r19, r19
    779e:	2e 0d       	add	r18, r14
    77a0:	3f 1d       	adc	r19, r15
    77a2:	22 0f       	add	r18, r18
    77a4:	33 1f       	adc	r19, r19
    77a6:	a9 01       	movw	r20, r18
    77a8:	44 57       	subi	r20, 0x74	; 116
    77aa:	59 4d       	sbci	r21, 0xD9	; 217
    77ac:	6a 01       	movw	r12, r20
    77ae:	fa 01       	movw	r30, r20
    77b0:	80 83       	st	Z, r24
    77b2:	91 83       	std	Z+1, r25	; 0x01
	
	token = strtok(NULL,delim);
    77b4:	b8 01       	movw	r22, r16
    77b6:	80 e0       	ldi	r24, 0x00	; 0
    77b8:	90 e0       	ldi	r25, 0x00	; 0
    77ba:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    77be:	00 97       	sbiw	r24, 0x00	; 0
    77c0:	09 f4       	brne	.+2      	; 0x77c4 <handleSerialCommand+0x558>
    77c2:	c4 c1       	rjmp	.+904    	; 0x7b4c <handleSerialCommand+0x8e0>
	motorAdjusts[direction][1] = atoi(token);
    77c4:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    77c8:	26 01       	movw	r4, r12
    77ca:	f2 e0       	ldi	r31, 0x02	; 2
    77cc:	4f 0e       	add	r4, r31
    77ce:	51 1c       	adc	r5, r1
    77d0:	f6 01       	movw	r30, r12
    77d2:	82 83       	std	Z+2, r24	; 0x02
    77d4:	93 83       	std	Z+3, r25	; 0x03
	
	token = strtok(NULL,delim);
    77d6:	b8 01       	movw	r22, r16
    77d8:	80 e0       	ldi	r24, 0x00	; 0
    77da:	90 e0       	ldi	r25, 0x00	; 0
    77dc:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    77e0:	00 97       	sbiw	r24, 0x00	; 0
    77e2:	09 f4       	brne	.+2      	; 0x77e6 <handleSerialCommand+0x57a>
    77e4:	e1 c1       	rjmp	.+962    	; 0x7ba8 <handleSerialCommand+0x93c>
	motorAdjusts[direction][2] = atoi(token);	
    77e6:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    77ea:	f6 01       	movw	r30, r12
    77ec:	84 83       	std	Z+4, r24	; 0x04
    77ee:	95 83       	std	Z+5, r25	; 0x05

	printf_P(PSTR("Got set_motors command. direction: %hu, vals: (%d, %d, %d)\r\n"), direction, motorAdjusts[direction][0], motorAdjusts[direction][1], motorAdjusts[direction][2]);
    77f0:	9f 93       	push	r25
    77f2:	8f 93       	push	r24
    77f4:	f2 01       	movw	r30, r4
    77f6:	81 81       	ldd	r24, Z+1	; 0x01
    77f8:	8f 93       	push	r24
    77fa:	f6 01       	movw	r30, r12
    77fc:	82 81       	ldd	r24, Z+2	; 0x02
    77fe:	8f 93       	push	r24
    7800:	81 81       	ldd	r24, Z+1	; 0x01
    7802:	8f 93       	push	r24
    7804:	80 81       	ld	r24, Z
    7806:	8f 93       	push	r24
    7808:	ff 92       	push	r15
    780a:	ef 92       	push	r14
    780c:	84 ec       	ldi	r24, 0xC4	; 196
    780e:	9d e0       	ldi	r25, 0x0D	; 13
    7810:	9f 93       	push	r25
    7812:	8f 93       	push	r24
    7814:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
	setRGB(r,g,b);
    7818:	48 2d       	mov	r20, r8
    781a:	6a 2d       	mov	r22, r10
    781c:	86 2d       	mov	r24, r6
    781e:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    7822:	cd bf       	out	0x3d, r28	; 61
    7824:	de bf       	out	0x3e, r29	; 62
    7826:	3e cd       	rjmp	.-1412   	; 0x72a4 <handleSerialCommand+0x38>
/*
 * No arguments.
 * Calls broadcast_rnb_data.
 */
static void handle_rnb_broadcast(void){
	scheduleTask(5,broadcastRnbData,NULL);
    7828:	20 e0       	ldi	r18, 0x00	; 0
    782a:	30 e0       	ldi	r19, 0x00	; 0
    782c:	43 e0       	ldi	r20, 0x03	; 3
    782e:	5f e2       	ldi	r21, 0x2F	; 47
    7830:	65 e0       	ldi	r22, 0x05	; 5
    7832:	70 e0       	ldi	r23, 0x00	; 0
    7834:	80 e0       	ldi	r24, 0x00	; 0
    7836:	90 e0       	ldi	r25, 0x00	; 0
    7838:	0e 94 f7 35 	call	0x6bee	; 0x6bee <scheduleTask>
    783c:	33 cd       	rjmp	.-1434   	; 0x72a4 <handleSerialCommand+0x38>
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
    783e:	b8 01       	movw	r22, r16
    7840:	80 e0       	ldi	r24, 0x00	; 0
    7842:	90 e0       	ldi	r25, 0x00	; 0
    7844:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    7848:	00 97       	sbiw	r24, 0x00	; 0
    784a:	09 f4       	brne	.+2      	; 0x784e <handleSerialCommand+0x5e2>
    784c:	bf c1       	rjmp	.+894    	; 0x7bcc <handleSerialCommand+0x960>
    784e:	ff 24       	eor	r15, r15
	if(motorAdjusts[direction][0]>=0)
    7850:	67 01       	movw	r12, r14
    7852:	cc 0c       	add	r12, r12
    7854:	dd 1c       	adc	r13, r13
    7856:	96 01       	movw	r18, r12
    7858:	2e 0d       	add	r18, r14
    785a:	3f 1d       	adc	r19, r15
    785c:	22 0f       	add	r18, r18
    785e:	33 1f       	adc	r19, r19
    7860:	a9 01       	movw	r20, r18
    7862:	44 57       	subi	r20, 0x74	; 116
    7864:	59 4d       	sbci	r21, 0xD9	; 217
    7866:	1a 01       	movw	r2, r20
    7868:	fa 01       	movw	r30, r20
    786a:	a0 80       	ld	r10, Z
    786c:	b1 80       	ldd	r11, Z+1	; 0x01
    786e:	b7 fc       	sbrc	r11, 7
    7870:	fb c0       	rjmp	.+502    	; 0x7a68 <handleSerialCommand+0x7fc>
		motorAdjusts[direction][0]+= atoi(token);
    7872:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    7876:	8a 0d       	add	r24, r10
    7878:	9b 1d       	adc	r25, r11
    787a:	f1 01       	movw	r30, r2
    787c:	80 83       	st	Z, r24
    787e:	91 83       	std	Z+1, r25	; 0x01
	else
		motorAdjusts[direction][0]-= atoi(token);
	
	token = strtok(NULL,delim);
    7880:	b8 01       	movw	r22, r16
    7882:	80 e0       	ldi	r24, 0x00	; 0
    7884:	90 e0       	ldi	r25, 0x00	; 0
    7886:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    788a:	00 97       	sbiw	r24, 0x00	; 0
    788c:	09 f4       	brne	.+2      	; 0x7890 <handleSerialCommand+0x624>
    788e:	95 c1       	rjmp	.+810    	; 0x7bba <handleSerialCommand+0x94e>
	if(motorAdjusts[direction][1]>=0)
    7890:	96 01       	movw	r18, r12
    7892:	2e 0d       	add	r18, r14
    7894:	3f 1d       	adc	r19, r15
    7896:	22 0f       	add	r18, r18
    7898:	33 1f       	adc	r19, r19
    789a:	a9 01       	movw	r20, r18
    789c:	44 57       	subi	r20, 0x74	; 116
    789e:	59 4d       	sbci	r21, 0xD9	; 217
    78a0:	1a 01       	movw	r2, r20
    78a2:	fa 01       	movw	r30, r20
    78a4:	a2 80       	ldd	r10, Z+2	; 0x02
    78a6:	b3 80       	ldd	r11, Z+3	; 0x03
    78a8:	b7 fc       	sbrc	r11, 7
    78aa:	d6 c0       	rjmp	.+428    	; 0x7a58 <handleSerialCommand+0x7ec>
	motorAdjusts[direction][1]+= atoi(token);
    78ac:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    78b0:	8a 0d       	add	r24, r10
    78b2:	9b 1d       	adc	r25, r11
    78b4:	f1 01       	movw	r30, r2
    78b6:	82 83       	std	Z+2, r24	; 0x02
    78b8:	93 83       	std	Z+3, r25	; 0x03
	else
	motorAdjusts[direction][1]-= atoi(token);
	
	token = strtok(NULL,delim);
    78ba:	b8 01       	movw	r22, r16
    78bc:	80 e0       	ldi	r24, 0x00	; 0
    78be:	90 e0       	ldi	r25, 0x00	; 0
    78c0:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    78c4:	00 97       	sbiw	r24, 0x00	; 0
    78c6:	09 f4       	brne	.+2      	; 0x78ca <handleSerialCommand+0x65e>
    78c8:	8a c1       	rjmp	.+788    	; 0x7bde <handleSerialCommand+0x972>
	if(motorAdjusts[direction][2]>=0)
    78ca:	96 01       	movw	r18, r12
    78cc:	2e 0d       	add	r18, r14
    78ce:	3f 1d       	adc	r19, r15
    78d0:	22 0f       	add	r18, r18
    78d2:	33 1f       	adc	r19, r19
    78d4:	a9 01       	movw	r20, r18
    78d6:	44 57       	subi	r20, 0x74	; 116
    78d8:	59 4d       	sbci	r21, 0xD9	; 217
    78da:	5a 01       	movw	r10, r20
    78dc:	fa 01       	movw	r30, r20
    78de:	04 81       	ldd	r16, Z+4	; 0x04
    78e0:	15 81       	ldd	r17, Z+5	; 0x05
    78e2:	17 fd       	sbrc	r17, 7
    78e4:	45 c1       	rjmp	.+650    	; 0x7b70 <handleSerialCommand+0x904>
	motorAdjusts[direction][2]+= atoi(token);
    78e6:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    78ea:	80 0f       	add	r24, r16
    78ec:	91 1f       	adc	r25, r17
    78ee:	f5 01       	movw	r30, r10
    78f0:	84 83       	std	Z+4, r24	; 0x04
    78f2:	95 83       	std	Z+5, r25	; 0x05
	else
	motorAdjusts[direction][2]-= atoi(token);

	printf_P(PSTR("Got adjust_motors command. direction: %hu, New Settings: (%d, %d, %d)\r\n"), direction, motorAdjusts[direction][0], motorAdjusts[direction][1], motorAdjusts[direction][2]);
    78f4:	9f 93       	push	r25
    78f6:	8f 93       	push	r24
    78f8:	f6 01       	movw	r30, r12
    78fa:	ee 0d       	add	r30, r14
    78fc:	ff 1d       	adc	r31, r15
    78fe:	ee 0f       	add	r30, r30
    7900:	ff 1f       	adc	r31, r31
    7902:	e4 57       	subi	r30, 0x74	; 116
    7904:	f9 4d       	sbci	r31, 0xD9	; 217
    7906:	83 81       	ldd	r24, Z+3	; 0x03
    7908:	8f 93       	push	r24
    790a:	82 81       	ldd	r24, Z+2	; 0x02
    790c:	8f 93       	push	r24
    790e:	81 81       	ldd	r24, Z+1	; 0x01
    7910:	8f 93       	push	r24
    7912:	80 81       	ld	r24, Z
    7914:	8f 93       	push	r24
    7916:	ff 92       	push	r15
    7918:	ef 92       	push	r14
    791a:	8c ec       	ldi	r24, 0xCC	; 204
    791c:	9c e0       	ldi	r25, 0x0C	; 12
    791e:	9f 93       	push	r25
    7920:	8f 93       	push	r24
    7922:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
	setRGB(r,g,b);
    7926:	48 2d       	mov	r20, r8
    7928:	66 2d       	mov	r22, r6
    792a:	84 2d       	mov	r24, r4
    792c:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <setRGB>
    7930:	cd bf       	out	0x3d, r28	; 61
    7932:	de bf       	out	0x3e, r29	; 62
    7934:	b7 cc       	rjmp	.-1682   	; 0x72a4 <handleSerialCommand+0x38>
 *     set_led r 255           //Full red without effecting green or blue.
 *     set_led br 127 64       //Half-strength blue, quarter-strength red. (order is flexible)
 *     set_led hsv 0 255 255   //Set to fully saturated and bright hue 0 (red).
 */
static void handle_set_led(char* command_args){
	const char delim[2] = " ";
    7936:	8e 01       	movw	r16, r28
    7938:	0f 57       	subi	r16, 0x7F	; 127
    793a:	1f 4f       	sbci	r17, 0xFF	; 255
    793c:	80 e2       	ldi	r24, 0x20	; 32
    793e:	90 e0       	ldi	r25, 0x00	; 0
    7940:	f8 01       	movw	r30, r16
    7942:	80 83       	st	Z, r24
    7944:	91 83       	std	Z+1, r25	; 0x01
	char* token;	
	char* colors = strtok(command_args,delim);
    7946:	b8 01       	movw	r22, r16
    7948:	ce 01       	movw	r24, r28
    794a:	01 96       	adiw	r24, 0x01	; 1
    794c:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
    7950:	7c 01       	movw	r14, r24
	int length = strlen(colors);
    7952:	fc 01       	movw	r30, r24
    7954:	01 90       	ld	r0, Z+
    7956:	00 20       	and	r0, r0
    7958:	e9 f7       	brne	.-6      	; 0x7954 <handleSerialCommand+0x6e8>
    795a:	31 97       	sbiw	r30, 0x01	; 1
    795c:	6f 01       	movw	r12, r30
    795e:	c8 1a       	sub	r12, r24
    7960:	d9 0a       	sbc	r13, r25

	if(strcmp(colors,"hsv")==0){
    7962:	64 e0       	ldi	r22, 0x04	; 4
    7964:	73 e2       	ldi	r23, 0x23	; 35
    7966:	0e 94 b7 4f 	call	0x9f6e	; 0x9f6e <strcmp>
    796a:	89 2b       	or	r24, r25
    796c:	09 f4       	brne	.+2      	; 0x7970 <handleSerialCommand+0x704>
    796e:	84 c0       	rjmp	.+264    	; 0x7a78 <handleSerialCommand+0x80c>
		sVal = atoi(token);
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		setHSV(hVal,sVal,vVal);
	}else{
		for(int i=0 ; i < length ; i++){
    7970:	1c 14       	cp	r1, r12
    7972:	1d 04       	cpc	r1, r13
    7974:	0c f0       	brlt	.+2      	; 0x7978 <handleSerialCommand+0x70c>
    7976:	96 cc       	rjmp	.-1748   	; 0x72a4 <handleSerialCommand+0x38>
    7978:	ce 0c       	add	r12, r14
    797a:	df 1c       	adc	r13, r15
    797c:	10 c0       	rjmp	.+32     	; 0x799e <handleSerialCommand+0x732>
			token = strtok(NULL,delim);
			if(colors[i]=='r'){
				setRedLED(atoi(token));
			}else if(colors[i]=='g'){
    797e:	27 36       	cpi	r18, 0x67	; 103
    7980:	01 f1       	breq	.+64     	; 0x79c2 <handleSerialCommand+0x756>
				setGreenLED(atoi(token));
			}else if(colors[i]=='b'){
    7982:	22 36       	cpi	r18, 0x62	; 98
    7984:	09 f0       	breq	.+2      	; 0x7988 <handleSerialCommand+0x71c>
    7986:	8e cc       	rjmp	.-1764   	; 0x72a4 <handleSerialCommand+0x38>
				setBlueLED(atoi(token));
    7988:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    798c:	99 27       	eor	r25, r25
    798e:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    7992:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
		sVal = atoi(token);
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		setHSV(hVal,sVal,vVal);
	}else{
		for(int i=0 ; i < length ; i++){
    7996:	ec 14       	cp	r14, r12
    7998:	fd 04       	cpc	r15, r13
    799a:	09 f4       	brne	.+2      	; 0x799e <handleSerialCommand+0x732>
    799c:	83 cc       	rjmp	.-1786   	; 0x72a4 <handleSerialCommand+0x38>
			token = strtok(NULL,delim);
    799e:	b8 01       	movw	r22, r16
    79a0:	80 e0       	ldi	r24, 0x00	; 0
    79a2:	90 e0       	ldi	r25, 0x00	; 0
    79a4:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
			if(colors[i]=='r'){
    79a8:	f7 01       	movw	r30, r14
    79aa:	21 91       	ld	r18, Z+
    79ac:	7f 01       	movw	r14, r30
    79ae:	22 37       	cpi	r18, 0x72	; 114
    79b0:	31 f7       	brne	.-52     	; 0x797e <handleSerialCommand+0x712>
				setRedLED(atoi(token));
    79b2:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    79b6:	99 27       	eor	r25, r25
    79b8:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    79bc:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
    79c0:	ea cf       	rjmp	.-44     	; 0x7996 <handleSerialCommand+0x72a>
			}else if(colors[i]=='g'){
				setGreenLED(atoi(token));
    79c2:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    79c6:	99 27       	eor	r25, r25
    79c8:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    79cc:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
    79d0:	e2 cf       	rjmp	.-60     	; 0x7996 <handleSerialCommand+0x72a>
/*
 * No arguments.
 * prints this Droplet's ID.
 */
static void handle_get_id(void){
	printf_P(PSTR("My ID is: %04X\r\n"),getDropletID());
    79d2:	80 91 98 24 	lds	r24, 0x2498	; 0x802498 <droplet_ID+0x1>
    79d6:	8f 93       	push	r24
    79d8:	80 91 97 24 	lds	r24, 0x2497	; 0x802497 <droplet_ID>
    79dc:	8f 93       	push	r24
    79de:	8b eb       	ldi	r24, 0xBB	; 187
    79e0:	9c e0       	ldi	r25, 0x0C	; 12
    79e2:	9f 93       	push	r25
    79e4:	8f 93       	push	r24
    79e6:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    79ea:	0f 90       	pop	r0
    79ec:	0f 90       	pop	r0
    79ee:	0f 90       	pop	r0
    79f0:	0f 90       	pop	r0
    79f2:	58 cc       	rjmp	.-1872   	; 0x72a4 <handleSerialCommand+0x38>
/*
 * No arguments.
 * Broadcasts the four-character readable form of this Droplet's ID.
 */
static void handle_broadcast_id(void){
	scheduleTask(5, sendID, NULL);
    79f4:	20 e0       	ldi	r18, 0x00	; 0
    79f6:	30 e0       	ldi	r19, 0x00	; 0
    79f8:	49 e0       	ldi	r20, 0x09	; 9
    79fa:	59 e3       	ldi	r21, 0x39	; 57
    79fc:	65 e0       	ldi	r22, 0x05	; 5
    79fe:	70 e0       	ldi	r23, 0x00	; 0
    7a00:	80 e0       	ldi	r24, 0x00	; 0
    7a02:	90 e0       	ldi	r25, 0x00	; 0
    7a04:	0e 94 f7 35 	call	0x6bee	; 0x6bee <scheduleTask>
    7a08:	4d cc       	rjmp	.-1894   	; 0x72a4 <handleSerialCommand+0x38>
 * Example:
 *     cmd reset
 *     All receiving Droplets will act as if they had 'reset' typed to them over the terminal, and reset.
 */
static void handle_cmd(char* command_args){
	printf_P(PSTR("Broadcasting command: \"%s\", of length %i.\r\n"), (uint8_t*)command_args, strlen(command_args));
    7a0a:	8e 01       	movw	r16, r28
    7a0c:	0f 5f       	subi	r16, 0xFF	; 255
    7a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    7a10:	f8 01       	movw	r30, r16
    7a12:	01 90       	ld	r0, Z+
    7a14:	00 20       	and	r0, r0
    7a16:	e9 f7       	brne	.-6      	; 0x7a12 <handleSerialCommand+0x7a6>
    7a18:	31 97       	sbiw	r30, 0x01	; 1
    7a1a:	e0 1b       	sub	r30, r16
    7a1c:	f1 0b       	sbc	r31, r17
    7a1e:	ff 93       	push	r31
    7a20:	ef 93       	push	r30
    7a22:	1f 93       	push	r17
    7a24:	0f 93       	push	r16
    7a26:	8f e8       	ldi	r24, 0x8F	; 143
    7a28:	9c e0       	ldi	r25, 0x0C	; 12
    7a2a:	9f 93       	push	r25
    7a2c:	8f 93       	push	r24
    7a2e:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
	irCmd(ALL_DIRS, command_args,strlen(command_args));
    7a32:	f8 01       	movw	r30, r16
    7a34:	01 90       	ld	r0, Z+
    7a36:	00 20       	and	r0, r0
    7a38:	e9 f7       	brne	.-6      	; 0x7a34 <handleSerialCommand+0x7c8>
    7a3a:	31 97       	sbiw	r30, 0x01	; 1
    7a3c:	af 01       	movw	r20, r30
    7a3e:	40 1b       	sub	r20, r16
    7a40:	51 0b       	sbc	r21, r17
    7a42:	b8 01       	movw	r22, r16
    7a44:	8f e3       	ldi	r24, 0x3F	; 63
    7a46:	0e 94 2e 14 	call	0x285c	; 0x285c <irCmd>
    7a4a:	0f 90       	pop	r0
    7a4c:	0f 90       	pop	r0
    7a4e:	0f 90       	pop	r0
    7a50:	0f 90       	pop	r0
    7a52:	0f 90       	pop	r0
    7a54:	0f 90       	pop	r0
    7a56:	26 cc       	rjmp	.-1972   	; 0x72a4 <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
	if(motorAdjusts[direction][1]>=0)
	motorAdjusts[direction][1]+= atoi(token);
	else
	motorAdjusts[direction][1]-= atoi(token);
    7a58:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    7a5c:	a8 1a       	sub	r10, r24
    7a5e:	b9 0a       	sbc	r11, r25
    7a60:	f1 01       	movw	r30, r2
    7a62:	a2 82       	std	Z+2, r10	; 0x02
    7a64:	b3 82       	std	Z+3, r11	; 0x03
    7a66:	29 cf       	rjmp	.-430    	; 0x78ba <handleSerialCommand+0x64e>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
	if(motorAdjusts[direction][0]>=0)
		motorAdjusts[direction][0]+= atoi(token);
	else
		motorAdjusts[direction][0]-= atoi(token);
    7a68:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    7a6c:	a8 1a       	sub	r10, r24
    7a6e:	b9 0a       	sbc	r11, r25
    7a70:	f1 01       	movw	r30, r2
    7a72:	a0 82       	st	Z, r10
    7a74:	b1 82       	std	Z+1, r11	; 0x01
    7a76:	04 cf       	rjmp	.-504    	; 0x7880 <handleSerialCommand+0x614>
	int length = strlen(colors);

	if(strcmp(colors,"hsv")==0){
		uint16_t hVal;
		uint8_t sVal, vVal;
		token = strtok(NULL,delim);
    7a78:	b8 01       	movw	r22, r16
    7a7a:	80 e0       	ldi	r24, 0x00	; 0
    7a7c:	90 e0       	ldi	r25, 0x00	; 0
    7a7e:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
		hVal = atoi(token);
    7a82:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    7a86:	7c 01       	movw	r14, r24
		token = strtok(NULL,delim);
    7a88:	b8 01       	movw	r22, r16
    7a8a:	80 e0       	ldi	r24, 0x00	; 0
    7a8c:	90 e0       	ldi	r25, 0x00	; 0
    7a8e:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
		sVal = atoi(token);
    7a92:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    7a96:	d8 2e       	mov	r13, r24
		token = strtok(NULL,delim);	
    7a98:	b8 01       	movw	r22, r16
    7a9a:	80 e0       	ldi	r24, 0x00	; 0
    7a9c:	90 e0       	ldi	r25, 0x00	; 0
    7a9e:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <strtok>
		vVal = atoi(token);
    7aa2:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
		setHSV(hVal,sVal,vVal);
    7aa6:	48 2f       	mov	r20, r24
    7aa8:	6d 2d       	mov	r22, r13
    7aaa:	c7 01       	movw	r24, r14
    7aac:	0e 94 4b 31 	call	0x6296	; 0x6296 <setHSV>
    7ab0:	f9 cb       	rjmp	.-2062   	; 0x72a4 <handleSerialCommand+0x38>
 *     tgt_cmd af6a reset
 *     The Droplet with ID 0xAF6A will act as if it had 'reset' typed to it over the terminal, and reset. Other
 *     Droplets will do nothing.)
 */
static void handle_targeted_cmd(char* command_args){
	uint8_t loc = strcspn(command_args, " ");
    7ab2:	63 e3       	ldi	r22, 0x33	; 51
    7ab4:	71 e2       	ldi	r23, 0x21	; 33
    7ab6:	ce 01       	movw	r24, r28
    7ab8:	01 96       	adiw	r24, 0x01	; 1
    7aba:	0e 94 c7 4f 	call	0x9f8e	; 0x9f8e <strcspn>
    7abe:	8c 01       	movw	r16, r24
    7ac0:	11 27       	eor	r17, r17
	char targetString[5];
	char cmdString[32];
	
	strncpy(targetString, command_args, loc);
    7ac2:	a8 01       	movw	r20, r16
    7ac4:	be 01       	movw	r22, r28
    7ac6:	6f 5f       	subi	r22, 0xFF	; 255
    7ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    7aca:	ce 01       	movw	r24, r28
    7acc:	8f 55       	subi	r24, 0x5F	; 95
    7ace:	9f 4f       	sbci	r25, 0xFF	; 255
    7ad0:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <strncpy>
	strcpy(cmdString, command_args+loc+1);
    7ad4:	b8 01       	movw	r22, r16
    7ad6:	6f 5f       	subi	r22, 0xFF	; 255
    7ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    7ada:	21 e0       	ldi	r18, 0x01	; 1
    7adc:	30 e0       	ldi	r19, 0x00	; 0
    7ade:	2c 0f       	add	r18, r28
    7ae0:	3d 1f       	adc	r19, r29
    7ae2:	62 0f       	add	r22, r18
    7ae4:	73 1f       	adc	r23, r19
    7ae6:	8e 01       	movw	r16, r28
    7ae8:	0f 57       	subi	r16, 0x7F	; 127
    7aea:	1f 4f       	sbci	r17, 0xFF	; 255
    7aec:	c8 01       	movw	r24, r16
    7aee:	0e 94 c0 4f 	call	0x9f80	; 0x9f80 <strcpy>
	
	uint16_t target = strtoul(targetString, NULL, 16);
    7af2:	40 e1       	ldi	r20, 0x10	; 16
    7af4:	50 e0       	ldi	r21, 0x00	; 0
    7af6:	60 e0       	ldi	r22, 0x00	; 0
    7af8:	70 e0       	ldi	r23, 0x00	; 0
    7afa:	ce 01       	movw	r24, r28
    7afc:	8f 55       	subi	r24, 0x5F	; 95
    7afe:	9f 4f       	sbci	r25, 0xFF	; 255
    7b00:	0e 94 77 4d 	call	0x9aee	; 0x9aee <strtoul>
    7b04:	7b 01       	movw	r14, r22
	printf_P(PSTR("Broadcasting command to %04X: \"%s\", of length %i.\r\n"), target, (uint8_t*)cmdString, strlen(cmdString));
    7b06:	f8 01       	movw	r30, r16
    7b08:	01 90       	ld	r0, Z+
    7b0a:	00 20       	and	r0, r0
    7b0c:	e9 f7       	brne	.-6      	; 0x7b08 <handleSerialCommand+0x89c>
    7b0e:	31 97       	sbiw	r30, 0x01	; 1
    7b10:	e0 1b       	sub	r30, r16
    7b12:	f1 0b       	sbc	r31, r17
    7b14:	ff 93       	push	r31
    7b16:	ef 93       	push	r30
    7b18:	1f 93       	push	r17
    7b1a:	0f 93       	push	r16
    7b1c:	ff 92       	push	r15
    7b1e:	6f 93       	push	r22
    7b20:	8b e5       	ldi	r24, 0x5B	; 91
    7b22:	9c e0       	ldi	r25, 0x0C	; 12
    7b24:	9f 93       	push	r25
    7b26:	8f 93       	push	r24
    7b28:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
	irTargetedCmd(ALL_DIRS, cmdString,strlen(cmdString), target);
    7b2c:	f8 01       	movw	r30, r16
    7b2e:	01 90       	ld	r0, Z+
    7b30:	00 20       	and	r0, r0
    7b32:	e9 f7       	brne	.-6      	; 0x7b2e <handleSerialCommand+0x8c2>
    7b34:	31 97       	sbiw	r30, 0x01	; 1
    7b36:	af 01       	movw	r20, r30
    7b38:	40 1b       	sub	r20, r16
    7b3a:	51 0b       	sbc	r21, r17
    7b3c:	97 01       	movw	r18, r14
    7b3e:	b8 01       	movw	r22, r16
    7b40:	8f e3       	ldi	r24, 0x3F	; 63
    7b42:	0e 94 28 14 	call	0x2850	; 0x2850 <irTargetedCmd>
    7b46:	cd bf       	out	0x3d, r28	; 61
    7b48:	de bf       	out	0x3e, r29	; 62
    7b4a:	ac cb       	rjmp	.-2216   	; 0x72a4 <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
	motorAdjusts[direction][0] = atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7b4c:	86 e2       	ldi	r24, 0x26	; 38
    7b4e:	9e e0       	ldi	r25, 0x0E	; 14
    7b50:	9f 93       	push	r25
    7b52:	8f 93       	push	r24
    7b54:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7b58:	0f 90       	pop	r0
    7b5a:	0f 90       	pop	r0
    7b5c:	a3 cb       	rjmp	.-2234   	; 0x72a4 <handleSerialCommand+0x38>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    7b5e:	8c e4       	ldi	r24, 0x4C	; 76
    7b60:	9e e0       	ldi	r25, 0x0E	; 14
    7b62:	9f 93       	push	r25
    7b64:	8f 93       	push	r24
    7b66:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7b6a:	0f 90       	pop	r0
    7b6c:	0f 90       	pop	r0
    7b6e:	9a cb       	rjmp	.-2252   	; 0x72a4 <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
	if(motorAdjusts[direction][2]>=0)
	motorAdjusts[direction][2]+= atoi(token);
	else
	motorAdjusts[direction][2]-= atoi(token);
    7b70:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    7b74:	98 01       	movw	r18, r16
    7b76:	28 1b       	sub	r18, r24
    7b78:	39 0b       	sbc	r19, r25
    7b7a:	c9 01       	movw	r24, r18
    7b7c:	f5 01       	movw	r30, r10
    7b7e:	24 83       	std	Z+4, r18	; 0x04
    7b80:	35 83       	std	Z+5, r19	; 0x05
    7b82:	b8 ce       	rjmp	.-656    	; 0x78f4 <handleSerialCommand+0x688>
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    7b84:	8c e8       	ldi	r24, 0x8C	; 140
    7b86:	9e e0       	ldi	r25, 0x0E	; 14
    7b88:	9f 93       	push	r25
    7b8a:	8f 93       	push	r24
    7b8c:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7b90:	0f 90       	pop	r0
    7b92:	0f 90       	pop	r0
    7b94:	87 cb       	rjmp	.-2290   	; 0x72a4 <handleSerialCommand+0x38>
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    7b96:	8f e9       	ldi	r24, 0x9F	; 159
    7b98:	9d e0       	ldi	r25, 0x0D	; 13
    7b9a:	9f 93       	push	r25
    7b9c:	8f 93       	push	r24
    7b9e:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7ba2:	0f 90       	pop	r0
    7ba4:	0f 90       	pop	r0
    7ba6:	7e cb       	rjmp	.-2308   	; 0x72a4 <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
	motorAdjusts[direction][1] = atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    7ba8:	81 e0       	ldi	r24, 0x01	; 1
    7baa:	9e e0       	ldi	r25, 0x0E	; 14
    7bac:	9f 93       	push	r25
    7bae:	8f 93       	push	r24
    7bb0:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7bb4:	0f 90       	pop	r0
    7bb6:	0f 90       	pop	r0
    7bb8:	75 cb       	rjmp	.-2326   	; 0x72a4 <handleSerialCommand+0x38>
		motorAdjusts[direction][0]+= atoi(token);
	else
		motorAdjusts[direction][0]-= atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7bba:	89 e3       	ldi	r24, 0x39	; 57
    7bbc:	9d e0       	ldi	r25, 0x0D	; 13
    7bbe:	9f 93       	push	r25
    7bc0:	8f 93       	push	r24
    7bc2:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7bc6:	0f 90       	pop	r0
    7bc8:	0f 90       	pop	r0
    7bca:	6c cb       	rjmp	.-2344   	; 0x72a4 <handleSerialCommand+0x38>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    7bcc:	8f e5       	ldi	r24, 0x5F	; 95
    7bce:	9d e0       	ldi	r25, 0x0D	; 13
    7bd0:	9f 93       	push	r25
    7bd2:	8f 93       	push	r24
    7bd4:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7bd8:	0f 90       	pop	r0
    7bda:	0f 90       	pop	r0
    7bdc:	63 cb       	rjmp	.-2362   	; 0x72a4 <handleSerialCommand+0x38>
	motorAdjusts[direction][1]+= atoi(token);
	else
	motorAdjusts[direction][1]-= atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    7bde:	84 e1       	ldi	r24, 0x14	; 20
    7be0:	9d e0       	ldi	r25, 0x0D	; 13
    7be2:	9f 93       	push	r25
    7be4:	8f 93       	push	r24
    7be6:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7bea:	0f 90       	pop	r0
    7bec:	0f 90       	pop	r0
    7bee:	5a cb       	rjmp	.-2380   	; 0x72a4 <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
    7bf0:	62 e0       	ldi	r22, 0x02	; 2
    7bf2:	7f e0       	ldi	r23, 0x0F	; 15
    7bf4:	c8 01       	movw	r24, r16
    7bf6:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7bfa:	89 2b       	or	r24, r25
    7bfc:	09 f4       	brne	.+2      	; 0x7c00 <handleSerialCommand+0x994>
    7bfe:	f8 c0       	rjmp	.+496    	; 0x7df0 <handleSerialCommand+0xb84>
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
    7c00:	6d ee       	ldi	r22, 0xED	; 237
    7c02:	7e e0       	ldi	r23, 0x0E	; 14
    7c04:	c8 01       	movw	r24, r16
    7c06:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <strcmp_P>
    7c0a:	89 2b       	or	r24, r25
    7c0c:	09 f4       	brne	.+2      	; 0x7c10 <handleSerialCommand+0x9a4>
    7c0e:	eb c0       	rjmp	.+470    	; 0x7de6 <handleSerialCommand+0xb7a>
																		printMotorValues();
																		printDistPerStep();																	
		}else if(command_word[0] == 'S'){
    7c10:	f8 01       	movw	r30, r16
    7c12:	80 81       	ld	r24, Z
    7c14:	83 35       	cpi	r24, 0x53	; 83
    7c16:	09 f4       	brne	.+2      	; 0x7c1a <handleSerialCommand+0x9ae>
    7c18:	dc c0       	rjmp	.+440    	; 0x7dd2 <handleSerialCommand+0xb66>
			str12++;
			number_of_hex = atoi(str12);
			reprogramming=1;
			
			//delayMS(20000);
		}else if(command_word[0] == 'R' && command_word[1] == 0){
    7c1a:	82 35       	cpi	r24, 0x52	; 82
    7c1c:	09 f4       	brne	.+2      	; 0x7c20 <handleSerialCommand+0x9b4>
    7c1e:	b5 c0       	rjmp	.+362    	; 0x7d8a <handleSerialCommand+0xb1e>
			strcat(initial_msg, "S");
			strcat(initial_msg, command_args);
			int length = strlen(initial_msg);
			irCmd(ALL_DIRS, initial_msg, length);
			
		}else if(command_word[0] == 'M' && command_word[1] == 0){
    7c20:	8d 34       	cpi	r24, 0x4D	; 77
    7c22:	09 f4       	brne	.+2      	; 0x7c26 <handleSerialCommand+0x9ba>
    7c24:	83 c0       	rjmp	.+262    	; 0x7d2c <handleSerialCommand+0xac0>
			
			strcpy(dataHEX, command_args);
			scheduleTask(100, send_hex, NULL );
			delayMS(500);
			
		}else if(userHandleCommand){ //First, make sure the function is defined
    7c26:	80 e0       	ldi	r24, 0x00	; 0
    7c28:	90 e0       	ldi	r25, 0x00	; 0
    7c2a:	89 2b       	or	r24, r25
    7c2c:	41 f0       	breq	.+16     	; 0x7c3e <handleSerialCommand+0x9d2>
			if(!userHandleCommand(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
    7c2e:	be 01       	movw	r22, r28
    7c30:	6f 5f       	subi	r22, 0xFF	; 255
    7c32:	7f 4f       	sbci	r23, 0xFF	; 255
    7c34:	c8 01       	movw	r24, r16
    7c36:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    7c3a:	81 11       	cpse	r24, r1
    7c3c:	33 cb       	rjmp	.-2458   	; 0x72a4 <handleSerialCommand+0x38>
    7c3e:	1f 93       	push	r17
    7c40:	0f 93       	push	r16
    7c42:	87 eb       	ldi	r24, 0xB7	; 183
    7c44:	9f e0       	ldi	r25, 0x0F	; 15
    7c46:	9f 93       	push	r25
    7c48:	8f 93       	push	r24
    7c4a:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7c4e:	0f 90       	pop	r0
    7c50:	0f 90       	pop	r0
    7c52:	0f 90       	pop	r0
    7c54:	0f 90       	pop	r0
		}
		else printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}
    7c56:	26 cb       	rjmp	.-2484   	; 0x72a4 <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
    7c58:	0e 94 43 34 	call	0x6886	; 0x6886 <printTaskQueue>
    7c5c:	23 cb       	rjmp	.-2490   	; 0x72a4 <handleSerialCommand+0x38>
 * Behaves the same as the 'msg' command, described above, except the message is broadcast
 * to a specific Droplet with <ID>, and will be ignored by other Droplets. Also, this function
 * does not have a default message.
 */
static void handle_target(char* command_args){
	uint8_t loc = strcspn(command_args, " ");
    7c5e:	63 e3       	ldi	r22, 0x33	; 51
    7c60:	71 e2       	ldi	r23, 0x21	; 33
    7c62:	ce 01       	movw	r24, r28
    7c64:	01 96       	adiw	r24, 0x01	; 1
    7c66:	0e 94 c7 4f 	call	0x9f8e	; 0x9f8e <strcspn>
    7c6a:	8c 01       	movw	r16, r24
    7c6c:	11 27       	eor	r17, r17
	char targetString[5];
	char msgString[32];
	
	strncpy(targetString, command_args, loc);
    7c6e:	a8 01       	movw	r20, r16
    7c70:	be 01       	movw	r22, r28
    7c72:	6f 5f       	subi	r22, 0xFF	; 255
    7c74:	7f 4f       	sbci	r23, 0xFF	; 255
    7c76:	ce 01       	movw	r24, r28
    7c78:	8f 55       	subi	r24, 0x5F	; 95
    7c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    7c7c:	0e 94 d6 4f 	call	0x9fac	; 0x9fac <strncpy>
	strcpy(msgString, command_args+loc);
    7c80:	61 e0       	ldi	r22, 0x01	; 1
    7c82:	70 e0       	ldi	r23, 0x00	; 0
    7c84:	6c 0f       	add	r22, r28
    7c86:	7d 1f       	adc	r23, r29
    7c88:	60 0f       	add	r22, r16
    7c8a:	71 1f       	adc	r23, r17
    7c8c:	8e 01       	movw	r16, r28
    7c8e:	0f 57       	subi	r16, 0x7F	; 127
    7c90:	1f 4f       	sbci	r17, 0xFF	; 255
    7c92:	c8 01       	movw	r24, r16
    7c94:	0e 94 c0 4f 	call	0x9f80	; 0x9f80 <strcpy>
	
	
	uint16_t target = strtoul(targetString, NULL, 16);
    7c98:	40 e1       	ldi	r20, 0x10	; 16
    7c9a:	50 e0       	ldi	r21, 0x00	; 0
    7c9c:	60 e0       	ldi	r22, 0x00	; 0
    7c9e:	70 e0       	ldi	r23, 0x00	; 0
    7ca0:	ce 01       	movw	r24, r28
    7ca2:	8f 55       	subi	r24, 0x5F	; 95
    7ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ca6:	0e 94 77 4d 	call	0x9aee	; 0x9aee <strtoul>
	
	//printf("Target: %04X\r\n",target);
	irTargetedSend(ALL_DIRS, msgString,strlen(msgString), target);
    7caa:	f8 01       	movw	r30, r16
    7cac:	01 90       	ld	r0, Z+
    7cae:	00 20       	and	r0, r0
    7cb0:	e9 f7       	brne	.-6      	; 0x7cac <handleSerialCommand+0xa40>
    7cb2:	31 97       	sbiw	r30, 0x01	; 1
    7cb4:	af 01       	movw	r20, r30
    7cb6:	40 1b       	sub	r20, r16
    7cb8:	51 0b       	sbc	r21, r17
    7cba:	9b 01       	movw	r18, r22
    7cbc:	b8 01       	movw	r22, r16
    7cbe:	8f e3       	ldi	r24, 0x3F	; 63
    7cc0:	0e 94 36 14 	call	0x286c	; 0x286c <irTargetedSend>
    7cc4:	ef ca       	rjmp	.-2594   	; 0x72a4 <handleSerialCommand+0x38>
 *     msg_tst <dir_mask>
 *     <dir_mask>: A direction mask indicating which direction(s) to send the message in.
 * Sends a simple test message in the indicated directions.
 */
static void handle_msg_test(char* command_args){
	uint8_t dir_mask = atoi(command_args);
    7cc6:	ce 01       	movw	r24, r28
    7cc8:	01 96       	adiw	r24, 0x01	; 1
    7cca:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
	char msg[16] = "Unique New York.";
    7cce:	90 e1       	ldi	r25, 0x10	; 16
    7cd0:	ea ee       	ldi	r30, 0xEA	; 234
    7cd2:	f2 e2       	ldi	r31, 0x22	; 34
    7cd4:	de 01       	movw	r26, r28
    7cd6:	af 57       	subi	r26, 0x7F	; 127
    7cd8:	bf 4f       	sbci	r27, 0xFF	; 255
    7cda:	01 90       	ld	r0, Z+
    7cdc:	0d 92       	st	X+, r0
    7cde:	9a 95       	dec	r25
    7ce0:	e1 f7       	brne	.-8      	; 0x7cda <handleSerialCommand+0xa6e>
	
	irSend(dir_mask, msg,16);
    7ce2:	40 e1       	ldi	r20, 0x10	; 16
    7ce4:	be 01       	movw	r22, r28
    7ce6:	6f 57       	subi	r22, 0x7F	; 127
    7ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    7cea:	0e 94 3c 14 	call	0x2878	; 0x2878 <irSend>
    7cee:	da ca       	rjmp	.-2636   	; 0x72a4 <handleSerialCommand+0x38>
 *
 * <MSG> will be treated as a string and broadcast over IR.
 * If <MSG> is not present, a simple test string will be broadcast instead.
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
    7cf0:	89 81       	ldd	r24, Y+1	; 0x01
    7cf2:	88 23       	and	r24, r24
    7cf4:	09 f4       	brne	.+2      	; 0x7cf8 <handleSerialCommand+0xa8c>
    7cf6:	46 c0       	rjmp	.+140    	; 0x7d84 <handleSerialCommand+0xb18>
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
    7cf8:	fe 01       	movw	r30, r28
    7cfa:	31 96       	adiw	r30, 0x01	; 1
    7cfc:	df 01       	movw	r26, r30
    7cfe:	0d 90       	ld	r0, X+
    7d00:	00 20       	and	r0, r0
    7d02:	e9 f7       	brne	.-6      	; 0x7cfe <handleSerialCommand+0xa92>
    7d04:	11 97       	sbiw	r26, 0x01	; 1
    7d06:	cd 01       	movw	r24, r26
    7d08:	8e 1b       	sub	r24, r30
    7d0a:	9f 0b       	sbc	r25, r31
    7d0c:	89 32       	cpi	r24, 0x29	; 41
    7d0e:	91 05       	cpc	r25, r1
    7d10:	38 f5       	brcc	.+78     	; 0x7d60 <handleSerialCommand+0xaf4>
    7d12:	bf 01       	movw	r22, r30
		printf_P(PSTR("Message length was %z chars, which exceeds the maximum of %u"), strlen(command_args), IR_BUFFER_SIZE);
		return;
	}
	irSend(ALL_DIRS, command_args,strlen(command_args));
    7d14:	fb 01       	movw	r30, r22
    7d16:	01 90       	ld	r0, Z+
    7d18:	00 20       	and	r0, r0
    7d1a:	e9 f7       	brne	.-6      	; 0x7d16 <handleSerialCommand+0xaaa>
    7d1c:	31 97       	sbiw	r30, 0x01	; 1
    7d1e:	af 01       	movw	r20, r30
    7d20:	46 1b       	sub	r20, r22
    7d22:	57 0b       	sbc	r21, r23
    7d24:	8f e3       	ldi	r24, 0x3F	; 63
    7d26:	0e 94 3c 14 	call	0x2878	; 0x2878 <irSend>
    7d2a:	bc ca       	rjmp	.-2696   	; 0x72a4 <handleSerialCommand+0x38>
			strcat(initial_msg, "S");
			strcat(initial_msg, command_args);
			int length = strlen(initial_msg);
			irCmd(ALL_DIRS, initial_msg, length);
			
		}else if(command_word[0] == 'M' && command_word[1] == 0){
    7d2c:	f8 01       	movw	r30, r16
    7d2e:	81 81       	ldd	r24, Z+1	; 0x01
    7d30:	81 11       	cpse	r24, r1
    7d32:	79 cf       	rjmp	.-270    	; 0x7c26 <handleSerialCommand+0x9ba>
			
			strcpy(dataHEX, command_args);
    7d34:	be 01       	movw	r22, r28
    7d36:	6f 5f       	subi	r22, 0xFF	; 255
    7d38:	7f 4f       	sbci	r23, 0xFF	; 255
    7d3a:	82 ee       	ldi	r24, 0xE2	; 226
    7d3c:	94 e2       	ldi	r25, 0x24	; 36
    7d3e:	0e 94 c0 4f 	call	0x9f80	; 0x9f80 <strcpy>
			scheduleTask(100, send_hex, NULL );
    7d42:	20 e0       	ldi	r18, 0x00	; 0
    7d44:	30 e0       	ldi	r19, 0x00	; 0
    7d46:	4a ef       	ldi	r20, 0xFA	; 250
    7d48:	59 e0       	ldi	r21, 0x09	; 9
    7d4a:	64 e6       	ldi	r22, 0x64	; 100
    7d4c:	70 e0       	ldi	r23, 0x00	; 0
    7d4e:	80 e0       	ldi	r24, 0x00	; 0
    7d50:	90 e0       	ldi	r25, 0x00	; 0
    7d52:	0e 94 f7 35 	call	0x6bee	; 0x6bee <scheduleTask>
			delayMS(500);
    7d56:	84 ef       	ldi	r24, 0xF4	; 244
    7d58:	91 e0       	ldi	r25, 0x01	; 1
    7d5a:	0e 94 44 08 	call	0x1088	; 0x1088 <delayMS>
    7d5e:	a2 ca       	rjmp	.-2748   	; 0x72a4 <handleSerialCommand+0x38>
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
		printf_P(PSTR("Message length was %z chars, which exceeds the maximum of %u"), strlen(command_args), IR_BUFFER_SIZE);
    7d60:	1f 92       	push	r1
    7d62:	28 e2       	ldi	r18, 0x28	; 40
    7d64:	2f 93       	push	r18
    7d66:	9f 93       	push	r25
    7d68:	8f 93       	push	r24
    7d6a:	8e e1       	ldi	r24, 0x1E	; 30
    7d6c:	9c e0       	ldi	r25, 0x0C	; 12
    7d6e:	9f 93       	push	r25
    7d70:	8f 93       	push	r24
    7d72:	0e 94 ad 50 	call	0xa15a	; 0xa15a <printf_P>
    7d76:	0f 90       	pop	r0
    7d78:	0f 90       	pop	r0
    7d7a:	0f 90       	pop	r0
    7d7c:	0f 90       	pop	r0
    7d7e:	0f 90       	pop	r0
    7d80:	0f 90       	pop	r0
    7d82:	90 ca       	rjmp	.-2784   	; 0x72a4 <handleSerialCommand+0x38>
 * <MSG> will be treated as a string and broadcast over IR.
 * If <MSG> is not present, a simple test string will be broadcast instead.
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
    7d84:	6a ee       	ldi	r22, 0xEA	; 234
    7d86:	72 e2       	ldi	r23, 0x22	; 34
    7d88:	c5 cf       	rjmp	.-118    	; 0x7d14 <handleSerialCommand+0xaa8>
			str12++;
			number_of_hex = atoi(str12);
			reprogramming=1;
			
			//delayMS(20000);
		}else if(command_word[0] == 'R' && command_word[1] == 0){
    7d8a:	f8 01       	movw	r30, r16
    7d8c:	81 81       	ldd	r24, Z+1	; 0x01
    7d8e:	81 11       	cpse	r24, r1
    7d90:	4a cf       	rjmp	.-364    	; 0x7c26 <handleSerialCommand+0x9ba>
			
			strcat(initial_msg, "S");
    7d92:	07 e7       	ldi	r16, 0x77	; 119
    7d94:	16 e2       	ldi	r17, 0x26	; 38
    7d96:	f8 01       	movw	r30, r16
    7d98:	01 90       	ld	r0, Z+
    7d9a:	00 20       	and	r0, r0
    7d9c:	e9 f7       	brne	.-6      	; 0x7d98 <handleSerialCommand+0xb2c>
    7d9e:	31 97       	sbiw	r30, 0x01	; 1
    7da0:	cf 01       	movw	r24, r30
    7da2:	87 57       	subi	r24, 0x77	; 119
    7da4:	96 42       	sbci	r25, 0x26	; 38
    7da6:	23 e5       	ldi	r18, 0x53	; 83
    7da8:	20 83       	st	Z, r18
			strcat(initial_msg, command_args);
    7daa:	be 01       	movw	r22, r28
    7dac:	6f 5f       	subi	r22, 0xFF	; 255
    7dae:	7f 4f       	sbci	r23, 0xFF	; 255
    7db0:	88 58       	subi	r24, 0x88	; 136
    7db2:	99 4d       	sbci	r25, 0xD9	; 217
    7db4:	0e 94 c0 4f 	call	0x9f80	; 0x9f80 <strcpy>
			int length = strlen(initial_msg);
    7db8:	f8 01       	movw	r30, r16
    7dba:	01 90       	ld	r0, Z+
    7dbc:	00 20       	and	r0, r0
    7dbe:	e9 f7       	brne	.-6      	; 0x7dba <handleSerialCommand+0xb4e>
    7dc0:	31 97       	sbiw	r30, 0x01	; 1
    7dc2:	af 01       	movw	r20, r30
    7dc4:	47 57       	subi	r20, 0x77	; 119
    7dc6:	56 42       	sbci	r21, 0x26	; 38
			irCmd(ALL_DIRS, initial_msg, length);
    7dc8:	b8 01       	movw	r22, r16
    7dca:	8f e3       	ldi	r24, 0x3F	; 63
    7dcc:	0e 94 2e 14 	call	0x285c	; 0x285c <irCmd>
			str12++;
			number_of_hex = atoi(str12);
			reprogramming=1;
			
			//delayMS(20000);
		}else if(command_word[0] == 'R' && command_word[1] == 0){
    7dd0:	69 ca       	rjmp	.-2862   	; 0x72a4 <handleSerialCommand+0x38>
		}else if(command_word[0] == 'S'){
			
			char *str12;
			str12 = command_word;
			str12++;
			number_of_hex = atoi(str12);
    7dd2:	c8 01       	movw	r24, r16
    7dd4:	01 96       	adiw	r24, 0x01	; 1
    7dd6:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <atoi>
    7dda:	80 93 e1 24 	sts	0x24E1, r24	; 0x8024e1 <number_of_hex>
			reprogramming=1;
    7dde:	81 e0       	ldi	r24, 0x01	; 1
    7de0:	80 93 a7 24 	sts	0x24A7, r24	; 0x8024a7 <reprogramming>
    7de4:	5f ca       	rjmp	.-2882   	; 0x72a4 <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
																		printMotorValues();
    7de6:	0e 94 f7 21 	call	0x43ee	; 0x43ee <printMotorValues>
																		printDistPerStep();																	
    7dea:	0e 94 50 22 	call	0x44a0	; 0x44a0 <printDistPerStep>
    7dee:	5a ca       	rjmp	.-2892   	; 0x72a4 <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
    7df0:	0e 94 b5 21 	call	0x436a	; 0x436a <writeMotorSettings>
    7df4:	57 ca       	rjmp	.-2898   	; 0x72a4 <handleSerialCommand+0x38>

00007df6 <vfprintf>:
    7df6:	2f 92       	push	r2
    7df8:	3f 92       	push	r3
    7dfa:	4f 92       	push	r4
    7dfc:	5f 92       	push	r5
    7dfe:	6f 92       	push	r6
    7e00:	7f 92       	push	r7
    7e02:	8f 92       	push	r8
    7e04:	9f 92       	push	r9
    7e06:	af 92       	push	r10
    7e08:	bf 92       	push	r11
    7e0a:	cf 92       	push	r12
    7e0c:	df 92       	push	r13
    7e0e:	ef 92       	push	r14
    7e10:	ff 92       	push	r15
    7e12:	0f 93       	push	r16
    7e14:	1f 93       	push	r17
    7e16:	cf 93       	push	r28
    7e18:	df 93       	push	r29
    7e1a:	cd b7       	in	r28, 0x3d	; 61
    7e1c:	de b7       	in	r29, 0x3e	; 62
    7e1e:	60 97       	sbiw	r28, 0x10	; 16
    7e20:	cd bf       	out	0x3d, r28	; 61
    7e22:	de bf       	out	0x3e, r29	; 62
    7e24:	7c 01       	movw	r14, r24
    7e26:	1b 01       	movw	r2, r22
    7e28:	6a 01       	movw	r12, r20
    7e2a:	fc 01       	movw	r30, r24
    7e2c:	16 82       	std	Z+6, r1	; 0x06
    7e2e:	17 82       	std	Z+7, r1	; 0x07
    7e30:	83 81       	ldd	r24, Z+3	; 0x03
    7e32:	81 ff       	sbrs	r24, 1
    7e34:	44 c3       	rjmp	.+1672   	; 0x84be <vfprintf+0x6c8>
    7e36:	9e 01       	movw	r18, r28
    7e38:	2f 5f       	subi	r18, 0xFF	; 255
    7e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    7e3c:	39 01       	movw	r6, r18
    7e3e:	f7 01       	movw	r30, r14
    7e40:	93 81       	ldd	r25, Z+3	; 0x03
    7e42:	f1 01       	movw	r30, r2
    7e44:	93 fd       	sbrc	r25, 3
    7e46:	85 91       	lpm	r24, Z+
    7e48:	93 ff       	sbrs	r25, 3
    7e4a:	81 91       	ld	r24, Z+
    7e4c:	1f 01       	movw	r2, r30
    7e4e:	88 23       	and	r24, r24
    7e50:	09 f4       	brne	.+2      	; 0x7e54 <vfprintf+0x5e>
    7e52:	31 c3       	rjmp	.+1634   	; 0x84b6 <vfprintf+0x6c0>
    7e54:	85 32       	cpi	r24, 0x25	; 37
    7e56:	39 f4       	brne	.+14     	; 0x7e66 <vfprintf+0x70>
    7e58:	93 fd       	sbrc	r25, 3
    7e5a:	85 91       	lpm	r24, Z+
    7e5c:	93 ff       	sbrs	r25, 3
    7e5e:	81 91       	ld	r24, Z+
    7e60:	1f 01       	movw	r2, r30
    7e62:	85 32       	cpi	r24, 0x25	; 37
    7e64:	39 f4       	brne	.+14     	; 0x7e74 <vfprintf+0x7e>
    7e66:	b7 01       	movw	r22, r14
    7e68:	90 e0       	ldi	r25, 0x00	; 0
    7e6a:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    7e6e:	56 01       	movw	r10, r12
    7e70:	65 01       	movw	r12, r10
    7e72:	e5 cf       	rjmp	.-54     	; 0x7e3e <vfprintf+0x48>
    7e74:	10 e0       	ldi	r17, 0x00	; 0
    7e76:	51 2c       	mov	r5, r1
    7e78:	91 2c       	mov	r9, r1
    7e7a:	ff e1       	ldi	r31, 0x1F	; 31
    7e7c:	f9 15       	cp	r31, r9
    7e7e:	d8 f0       	brcs	.+54     	; 0x7eb6 <vfprintf+0xc0>
    7e80:	8b 32       	cpi	r24, 0x2B	; 43
    7e82:	79 f0       	breq	.+30     	; 0x7ea2 <vfprintf+0xac>
    7e84:	38 f4       	brcc	.+14     	; 0x7e94 <vfprintf+0x9e>
    7e86:	80 32       	cpi	r24, 0x20	; 32
    7e88:	79 f0       	breq	.+30     	; 0x7ea8 <vfprintf+0xb2>
    7e8a:	83 32       	cpi	r24, 0x23	; 35
    7e8c:	a1 f4       	brne	.+40     	; 0x7eb6 <vfprintf+0xc0>
    7e8e:	f9 2d       	mov	r31, r9
    7e90:	f0 61       	ori	r31, 0x10	; 16
    7e92:	2e c0       	rjmp	.+92     	; 0x7ef0 <vfprintf+0xfa>
    7e94:	8d 32       	cpi	r24, 0x2D	; 45
    7e96:	61 f0       	breq	.+24     	; 0x7eb0 <vfprintf+0xba>
    7e98:	80 33       	cpi	r24, 0x30	; 48
    7e9a:	69 f4       	brne	.+26     	; 0x7eb6 <vfprintf+0xc0>
    7e9c:	29 2d       	mov	r18, r9
    7e9e:	21 60       	ori	r18, 0x01	; 1
    7ea0:	2d c0       	rjmp	.+90     	; 0x7efc <vfprintf+0x106>
    7ea2:	39 2d       	mov	r19, r9
    7ea4:	32 60       	ori	r19, 0x02	; 2
    7ea6:	93 2e       	mov	r9, r19
    7ea8:	89 2d       	mov	r24, r9
    7eaa:	84 60       	ori	r24, 0x04	; 4
    7eac:	98 2e       	mov	r9, r24
    7eae:	2a c0       	rjmp	.+84     	; 0x7f04 <vfprintf+0x10e>
    7eb0:	e9 2d       	mov	r30, r9
    7eb2:	e8 60       	ori	r30, 0x08	; 8
    7eb4:	15 c0       	rjmp	.+42     	; 0x7ee0 <vfprintf+0xea>
    7eb6:	97 fc       	sbrc	r9, 7
    7eb8:	2d c0       	rjmp	.+90     	; 0x7f14 <vfprintf+0x11e>
    7eba:	20 ed       	ldi	r18, 0xD0	; 208
    7ebc:	28 0f       	add	r18, r24
    7ebe:	2a 30       	cpi	r18, 0x0A	; 10
    7ec0:	88 f4       	brcc	.+34     	; 0x7ee4 <vfprintf+0xee>
    7ec2:	96 fe       	sbrs	r9, 6
    7ec4:	06 c0       	rjmp	.+12     	; 0x7ed2 <vfprintf+0xdc>
    7ec6:	3a e0       	ldi	r19, 0x0A	; 10
    7ec8:	13 9f       	mul	r17, r19
    7eca:	20 0d       	add	r18, r0
    7ecc:	11 24       	eor	r1, r1
    7ece:	12 2f       	mov	r17, r18
    7ed0:	19 c0       	rjmp	.+50     	; 0x7f04 <vfprintf+0x10e>
    7ed2:	8a e0       	ldi	r24, 0x0A	; 10
    7ed4:	58 9e       	mul	r5, r24
    7ed6:	20 0d       	add	r18, r0
    7ed8:	11 24       	eor	r1, r1
    7eda:	52 2e       	mov	r5, r18
    7edc:	e9 2d       	mov	r30, r9
    7ede:	e0 62       	ori	r30, 0x20	; 32
    7ee0:	9e 2e       	mov	r9, r30
    7ee2:	10 c0       	rjmp	.+32     	; 0x7f04 <vfprintf+0x10e>
    7ee4:	8e 32       	cpi	r24, 0x2E	; 46
    7ee6:	31 f4       	brne	.+12     	; 0x7ef4 <vfprintf+0xfe>
    7ee8:	96 fc       	sbrc	r9, 6
    7eea:	e5 c2       	rjmp	.+1482   	; 0x84b6 <vfprintf+0x6c0>
    7eec:	f9 2d       	mov	r31, r9
    7eee:	f0 64       	ori	r31, 0x40	; 64
    7ef0:	9f 2e       	mov	r9, r31
    7ef2:	08 c0       	rjmp	.+16     	; 0x7f04 <vfprintf+0x10e>
    7ef4:	8c 36       	cpi	r24, 0x6C	; 108
    7ef6:	21 f4       	brne	.+8      	; 0x7f00 <vfprintf+0x10a>
    7ef8:	29 2d       	mov	r18, r9
    7efa:	20 68       	ori	r18, 0x80	; 128
    7efc:	92 2e       	mov	r9, r18
    7efe:	02 c0       	rjmp	.+4      	; 0x7f04 <vfprintf+0x10e>
    7f00:	88 36       	cpi	r24, 0x68	; 104
    7f02:	41 f4       	brne	.+16     	; 0x7f14 <vfprintf+0x11e>
    7f04:	f1 01       	movw	r30, r2
    7f06:	93 fd       	sbrc	r25, 3
    7f08:	85 91       	lpm	r24, Z+
    7f0a:	93 ff       	sbrs	r25, 3
    7f0c:	81 91       	ld	r24, Z+
    7f0e:	1f 01       	movw	r2, r30
    7f10:	81 11       	cpse	r24, r1
    7f12:	b3 cf       	rjmp	.-154    	; 0x7e7a <vfprintf+0x84>
    7f14:	9b eb       	ldi	r25, 0xBB	; 187
    7f16:	98 0f       	add	r25, r24
    7f18:	93 30       	cpi	r25, 0x03	; 3
    7f1a:	20 f4       	brcc	.+8      	; 0x7f24 <vfprintf+0x12e>
    7f1c:	99 2d       	mov	r25, r9
    7f1e:	90 61       	ori	r25, 0x10	; 16
    7f20:	80 5e       	subi	r24, 0xE0	; 224
    7f22:	07 c0       	rjmp	.+14     	; 0x7f32 <vfprintf+0x13c>
    7f24:	9b e9       	ldi	r25, 0x9B	; 155
    7f26:	98 0f       	add	r25, r24
    7f28:	93 30       	cpi	r25, 0x03	; 3
    7f2a:	08 f0       	brcs	.+2      	; 0x7f2e <vfprintf+0x138>
    7f2c:	66 c1       	rjmp	.+716    	; 0x81fa <vfprintf+0x404>
    7f2e:	99 2d       	mov	r25, r9
    7f30:	9f 7e       	andi	r25, 0xEF	; 239
    7f32:	96 ff       	sbrs	r25, 6
    7f34:	16 e0       	ldi	r17, 0x06	; 6
    7f36:	9f 73       	andi	r25, 0x3F	; 63
    7f38:	99 2e       	mov	r9, r25
    7f3a:	85 36       	cpi	r24, 0x65	; 101
    7f3c:	19 f4       	brne	.+6      	; 0x7f44 <vfprintf+0x14e>
    7f3e:	90 64       	ori	r25, 0x40	; 64
    7f40:	99 2e       	mov	r9, r25
    7f42:	08 c0       	rjmp	.+16     	; 0x7f54 <vfprintf+0x15e>
    7f44:	86 36       	cpi	r24, 0x66	; 102
    7f46:	21 f4       	brne	.+8      	; 0x7f50 <vfprintf+0x15a>
    7f48:	39 2f       	mov	r19, r25
    7f4a:	30 68       	ori	r19, 0x80	; 128
    7f4c:	93 2e       	mov	r9, r19
    7f4e:	02 c0       	rjmp	.+4      	; 0x7f54 <vfprintf+0x15e>
    7f50:	11 11       	cpse	r17, r1
    7f52:	11 50       	subi	r17, 0x01	; 1
    7f54:	97 fe       	sbrs	r9, 7
    7f56:	07 c0       	rjmp	.+14     	; 0x7f66 <vfprintf+0x170>
    7f58:	1c 33       	cpi	r17, 0x3C	; 60
    7f5a:	50 f4       	brcc	.+20     	; 0x7f70 <vfprintf+0x17a>
    7f5c:	44 24       	eor	r4, r4
    7f5e:	43 94       	inc	r4
    7f60:	41 0e       	add	r4, r17
    7f62:	27 e0       	ldi	r18, 0x07	; 7
    7f64:	0b c0       	rjmp	.+22     	; 0x7f7c <vfprintf+0x186>
    7f66:	18 30       	cpi	r17, 0x08	; 8
    7f68:	38 f0       	brcs	.+14     	; 0x7f78 <vfprintf+0x182>
    7f6a:	27 e0       	ldi	r18, 0x07	; 7
    7f6c:	17 e0       	ldi	r17, 0x07	; 7
    7f6e:	05 c0       	rjmp	.+10     	; 0x7f7a <vfprintf+0x184>
    7f70:	27 e0       	ldi	r18, 0x07	; 7
    7f72:	9c e3       	ldi	r25, 0x3C	; 60
    7f74:	49 2e       	mov	r4, r25
    7f76:	02 c0       	rjmp	.+4      	; 0x7f7c <vfprintf+0x186>
    7f78:	21 2f       	mov	r18, r17
    7f7a:	41 2c       	mov	r4, r1
    7f7c:	56 01       	movw	r10, r12
    7f7e:	84 e0       	ldi	r24, 0x04	; 4
    7f80:	a8 0e       	add	r10, r24
    7f82:	b1 1c       	adc	r11, r1
    7f84:	f6 01       	movw	r30, r12
    7f86:	60 81       	ld	r22, Z
    7f88:	71 81       	ldd	r23, Z+1	; 0x01
    7f8a:	82 81       	ldd	r24, Z+2	; 0x02
    7f8c:	93 81       	ldd	r25, Z+3	; 0x03
    7f8e:	04 2d       	mov	r16, r4
    7f90:	a3 01       	movw	r20, r6
    7f92:	0e 94 a2 4e 	call	0x9d44	; 0x9d44 <__ftoa_engine>
    7f96:	6c 01       	movw	r12, r24
    7f98:	f9 81       	ldd	r31, Y+1	; 0x01
    7f9a:	fc 87       	std	Y+12, r31	; 0x0c
    7f9c:	f0 ff       	sbrs	r31, 0
    7f9e:	02 c0       	rjmp	.+4      	; 0x7fa4 <vfprintf+0x1ae>
    7fa0:	f3 ff       	sbrs	r31, 3
    7fa2:	06 c0       	rjmp	.+12     	; 0x7fb0 <vfprintf+0x1ba>
    7fa4:	91 fc       	sbrc	r9, 1
    7fa6:	06 c0       	rjmp	.+12     	; 0x7fb4 <vfprintf+0x1be>
    7fa8:	92 fe       	sbrs	r9, 2
    7faa:	06 c0       	rjmp	.+12     	; 0x7fb8 <vfprintf+0x1c2>
    7fac:	00 e2       	ldi	r16, 0x20	; 32
    7fae:	05 c0       	rjmp	.+10     	; 0x7fba <vfprintf+0x1c4>
    7fb0:	0d e2       	ldi	r16, 0x2D	; 45
    7fb2:	03 c0       	rjmp	.+6      	; 0x7fba <vfprintf+0x1c4>
    7fb4:	0b e2       	ldi	r16, 0x2B	; 43
    7fb6:	01 c0       	rjmp	.+2      	; 0x7fba <vfprintf+0x1c4>
    7fb8:	00 e0       	ldi	r16, 0x00	; 0
    7fba:	8c 85       	ldd	r24, Y+12	; 0x0c
    7fbc:	8c 70       	andi	r24, 0x0C	; 12
    7fbe:	19 f0       	breq	.+6      	; 0x7fc6 <vfprintf+0x1d0>
    7fc0:	01 11       	cpse	r16, r1
    7fc2:	5a c2       	rjmp	.+1204   	; 0x8478 <vfprintf+0x682>
    7fc4:	9b c2       	rjmp	.+1334   	; 0x84fc <vfprintf+0x706>
    7fc6:	97 fe       	sbrs	r9, 7
    7fc8:	10 c0       	rjmp	.+32     	; 0x7fea <vfprintf+0x1f4>
    7fca:	4c 0c       	add	r4, r12
    7fcc:	fc 85       	ldd	r31, Y+12	; 0x0c
    7fce:	f4 ff       	sbrs	r31, 4
    7fd0:	04 c0       	rjmp	.+8      	; 0x7fda <vfprintf+0x1e4>
    7fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    7fd4:	81 33       	cpi	r24, 0x31	; 49
    7fd6:	09 f4       	brne	.+2      	; 0x7fda <vfprintf+0x1e4>
    7fd8:	4a 94       	dec	r4
    7fda:	14 14       	cp	r1, r4
    7fdc:	74 f5       	brge	.+92     	; 0x803a <vfprintf+0x244>
    7fde:	28 e0       	ldi	r18, 0x08	; 8
    7fe0:	24 15       	cp	r18, r4
    7fe2:	78 f5       	brcc	.+94     	; 0x8042 <vfprintf+0x24c>
    7fe4:	88 e0       	ldi	r24, 0x08	; 8
    7fe6:	48 2e       	mov	r4, r24
    7fe8:	2c c0       	rjmp	.+88     	; 0x8042 <vfprintf+0x24c>
    7fea:	96 fc       	sbrc	r9, 6
    7fec:	2a c0       	rjmp	.+84     	; 0x8042 <vfprintf+0x24c>
    7fee:	81 2f       	mov	r24, r17
    7ff0:	90 e0       	ldi	r25, 0x00	; 0
    7ff2:	8c 15       	cp	r24, r12
    7ff4:	9d 05       	cpc	r25, r13
    7ff6:	9c f0       	brlt	.+38     	; 0x801e <vfprintf+0x228>
    7ff8:	3c ef       	ldi	r19, 0xFC	; 252
    7ffa:	c3 16       	cp	r12, r19
    7ffc:	3f ef       	ldi	r19, 0xFF	; 255
    7ffe:	d3 06       	cpc	r13, r19
    8000:	74 f0       	brlt	.+28     	; 0x801e <vfprintf+0x228>
    8002:	89 2d       	mov	r24, r9
    8004:	80 68       	ori	r24, 0x80	; 128
    8006:	98 2e       	mov	r9, r24
    8008:	0a c0       	rjmp	.+20     	; 0x801e <vfprintf+0x228>
    800a:	e2 e0       	ldi	r30, 0x02	; 2
    800c:	f0 e0       	ldi	r31, 0x00	; 0
    800e:	ec 0f       	add	r30, r28
    8010:	fd 1f       	adc	r31, r29
    8012:	e1 0f       	add	r30, r17
    8014:	f1 1d       	adc	r31, r1
    8016:	80 81       	ld	r24, Z
    8018:	80 33       	cpi	r24, 0x30	; 48
    801a:	19 f4       	brne	.+6      	; 0x8022 <vfprintf+0x22c>
    801c:	11 50       	subi	r17, 0x01	; 1
    801e:	11 11       	cpse	r17, r1
    8020:	f4 cf       	rjmp	.-24     	; 0x800a <vfprintf+0x214>
    8022:	97 fe       	sbrs	r9, 7
    8024:	0e c0       	rjmp	.+28     	; 0x8042 <vfprintf+0x24c>
    8026:	44 24       	eor	r4, r4
    8028:	43 94       	inc	r4
    802a:	41 0e       	add	r4, r17
    802c:	81 2f       	mov	r24, r17
    802e:	90 e0       	ldi	r25, 0x00	; 0
    8030:	c8 16       	cp	r12, r24
    8032:	d9 06       	cpc	r13, r25
    8034:	2c f4       	brge	.+10     	; 0x8040 <vfprintf+0x24a>
    8036:	1c 19       	sub	r17, r12
    8038:	04 c0       	rjmp	.+8      	; 0x8042 <vfprintf+0x24c>
    803a:	44 24       	eor	r4, r4
    803c:	43 94       	inc	r4
    803e:	01 c0       	rjmp	.+2      	; 0x8042 <vfprintf+0x24c>
    8040:	10 e0       	ldi	r17, 0x00	; 0
    8042:	97 fe       	sbrs	r9, 7
    8044:	06 c0       	rjmp	.+12     	; 0x8052 <vfprintf+0x25c>
    8046:	1c 14       	cp	r1, r12
    8048:	1d 04       	cpc	r1, r13
    804a:	34 f4       	brge	.+12     	; 0x8058 <vfprintf+0x262>
    804c:	c6 01       	movw	r24, r12
    804e:	01 96       	adiw	r24, 0x01	; 1
    8050:	05 c0       	rjmp	.+10     	; 0x805c <vfprintf+0x266>
    8052:	85 e0       	ldi	r24, 0x05	; 5
    8054:	90 e0       	ldi	r25, 0x00	; 0
    8056:	02 c0       	rjmp	.+4      	; 0x805c <vfprintf+0x266>
    8058:	81 e0       	ldi	r24, 0x01	; 1
    805a:	90 e0       	ldi	r25, 0x00	; 0
    805c:	01 11       	cpse	r16, r1
    805e:	01 96       	adiw	r24, 0x01	; 1
    8060:	11 23       	and	r17, r17
    8062:	31 f0       	breq	.+12     	; 0x8070 <vfprintf+0x27a>
    8064:	21 2f       	mov	r18, r17
    8066:	30 e0       	ldi	r19, 0x00	; 0
    8068:	2f 5f       	subi	r18, 0xFF	; 255
    806a:	3f 4f       	sbci	r19, 0xFF	; 255
    806c:	82 0f       	add	r24, r18
    806e:	93 1f       	adc	r25, r19
    8070:	25 2d       	mov	r18, r5
    8072:	30 e0       	ldi	r19, 0x00	; 0
    8074:	82 17       	cp	r24, r18
    8076:	93 07       	cpc	r25, r19
    8078:	14 f4       	brge	.+4      	; 0x807e <vfprintf+0x288>
    807a:	58 1a       	sub	r5, r24
    807c:	01 c0       	rjmp	.+2      	; 0x8080 <vfprintf+0x28a>
    807e:	51 2c       	mov	r5, r1
    8080:	89 2d       	mov	r24, r9
    8082:	89 70       	andi	r24, 0x09	; 9
    8084:	49 f4       	brne	.+18     	; 0x8098 <vfprintf+0x2a2>
    8086:	55 20       	and	r5, r5
    8088:	39 f0       	breq	.+14     	; 0x8098 <vfprintf+0x2a2>
    808a:	b7 01       	movw	r22, r14
    808c:	80 e2       	ldi	r24, 0x20	; 32
    808e:	90 e0       	ldi	r25, 0x00	; 0
    8090:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    8094:	5a 94       	dec	r5
    8096:	f7 cf       	rjmp	.-18     	; 0x8086 <vfprintf+0x290>
    8098:	00 23       	and	r16, r16
    809a:	29 f0       	breq	.+10     	; 0x80a6 <vfprintf+0x2b0>
    809c:	b7 01       	movw	r22, r14
    809e:	80 2f       	mov	r24, r16
    80a0:	90 e0       	ldi	r25, 0x00	; 0
    80a2:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    80a6:	93 fc       	sbrc	r9, 3
    80a8:	09 c0       	rjmp	.+18     	; 0x80bc <vfprintf+0x2c6>
    80aa:	55 20       	and	r5, r5
    80ac:	39 f0       	breq	.+14     	; 0x80bc <vfprintf+0x2c6>
    80ae:	b7 01       	movw	r22, r14
    80b0:	80 e3       	ldi	r24, 0x30	; 48
    80b2:	90 e0       	ldi	r25, 0x00	; 0
    80b4:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    80b8:	5a 94       	dec	r5
    80ba:	f7 cf       	rjmp	.-18     	; 0x80aa <vfprintf+0x2b4>
    80bc:	97 fe       	sbrs	r9, 7
    80be:	4c c0       	rjmp	.+152    	; 0x8158 <vfprintf+0x362>
    80c0:	46 01       	movw	r8, r12
    80c2:	d7 fe       	sbrs	r13, 7
    80c4:	02 c0       	rjmp	.+4      	; 0x80ca <vfprintf+0x2d4>
    80c6:	81 2c       	mov	r8, r1
    80c8:	91 2c       	mov	r9, r1
    80ca:	c6 01       	movw	r24, r12
    80cc:	88 19       	sub	r24, r8
    80ce:	99 09       	sbc	r25, r9
    80d0:	f3 01       	movw	r30, r6
    80d2:	e8 0f       	add	r30, r24
    80d4:	f9 1f       	adc	r31, r25
    80d6:	ed 87       	std	Y+13, r30	; 0x0d
    80d8:	fe 87       	std	Y+14, r31	; 0x0e
    80da:	96 01       	movw	r18, r12
    80dc:	24 19       	sub	r18, r4
    80de:	31 09       	sbc	r19, r1
    80e0:	2f 87       	std	Y+15, r18	; 0x0f
    80e2:	38 8b       	std	Y+16, r19	; 0x10
    80e4:	01 2f       	mov	r16, r17
    80e6:	10 e0       	ldi	r17, 0x00	; 0
    80e8:	11 95       	neg	r17
    80ea:	01 95       	neg	r16
    80ec:	11 09       	sbc	r17, r1
    80ee:	3f ef       	ldi	r19, 0xFF	; 255
    80f0:	83 16       	cp	r8, r19
    80f2:	93 06       	cpc	r9, r19
    80f4:	29 f4       	brne	.+10     	; 0x8100 <vfprintf+0x30a>
    80f6:	b7 01       	movw	r22, r14
    80f8:	8e e2       	ldi	r24, 0x2E	; 46
    80fa:	90 e0       	ldi	r25, 0x00	; 0
    80fc:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    8100:	c8 14       	cp	r12, r8
    8102:	d9 04       	cpc	r13, r9
    8104:	4c f0       	brlt	.+18     	; 0x8118 <vfprintf+0x322>
    8106:	8f 85       	ldd	r24, Y+15	; 0x0f
    8108:	98 89       	ldd	r25, Y+16	; 0x10
    810a:	88 15       	cp	r24, r8
    810c:	99 05       	cpc	r25, r9
    810e:	24 f4       	brge	.+8      	; 0x8118 <vfprintf+0x322>
    8110:	ed 85       	ldd	r30, Y+13	; 0x0d
    8112:	fe 85       	ldd	r31, Y+14	; 0x0e
    8114:	81 81       	ldd	r24, Z+1	; 0x01
    8116:	01 c0       	rjmp	.+2      	; 0x811a <vfprintf+0x324>
    8118:	80 e3       	ldi	r24, 0x30	; 48
    811a:	f1 e0       	ldi	r31, 0x01	; 1
    811c:	8f 1a       	sub	r8, r31
    811e:	91 08       	sbc	r9, r1
    8120:	2d 85       	ldd	r18, Y+13	; 0x0d
    8122:	3e 85       	ldd	r19, Y+14	; 0x0e
    8124:	2f 5f       	subi	r18, 0xFF	; 255
    8126:	3f 4f       	sbci	r19, 0xFF	; 255
    8128:	2d 87       	std	Y+13, r18	; 0x0d
    812a:	3e 87       	std	Y+14, r19	; 0x0e
    812c:	80 16       	cp	r8, r16
    812e:	91 06       	cpc	r9, r17
    8130:	2c f0       	brlt	.+10     	; 0x813c <vfprintf+0x346>
    8132:	b7 01       	movw	r22, r14
    8134:	90 e0       	ldi	r25, 0x00	; 0
    8136:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    813a:	d9 cf       	rjmp	.-78     	; 0x80ee <vfprintf+0x2f8>
    813c:	c8 14       	cp	r12, r8
    813e:	d9 04       	cpc	r13, r9
    8140:	41 f4       	brne	.+16     	; 0x8152 <vfprintf+0x35c>
    8142:	9a 81       	ldd	r25, Y+2	; 0x02
    8144:	96 33       	cpi	r25, 0x36	; 54
    8146:	20 f4       	brcc	.+8      	; 0x8150 <vfprintf+0x35a>
    8148:	95 33       	cpi	r25, 0x35	; 53
    814a:	19 f4       	brne	.+6      	; 0x8152 <vfprintf+0x35c>
    814c:	3c 85       	ldd	r19, Y+12	; 0x0c
    814e:	34 ff       	sbrs	r19, 4
    8150:	81 e3       	ldi	r24, 0x31	; 49
    8152:	b7 01       	movw	r22, r14
    8154:	90 e0       	ldi	r25, 0x00	; 0
    8156:	4e c0       	rjmp	.+156    	; 0x81f4 <vfprintf+0x3fe>
    8158:	8a 81       	ldd	r24, Y+2	; 0x02
    815a:	81 33       	cpi	r24, 0x31	; 49
    815c:	19 f0       	breq	.+6      	; 0x8164 <vfprintf+0x36e>
    815e:	9c 85       	ldd	r25, Y+12	; 0x0c
    8160:	9f 7e       	andi	r25, 0xEF	; 239
    8162:	9c 87       	std	Y+12, r25	; 0x0c
    8164:	b7 01       	movw	r22, r14
    8166:	90 e0       	ldi	r25, 0x00	; 0
    8168:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    816c:	11 11       	cpse	r17, r1
    816e:	05 c0       	rjmp	.+10     	; 0x817a <vfprintf+0x384>
    8170:	94 fc       	sbrc	r9, 4
    8172:	18 c0       	rjmp	.+48     	; 0x81a4 <vfprintf+0x3ae>
    8174:	85 e6       	ldi	r24, 0x65	; 101
    8176:	90 e0       	ldi	r25, 0x00	; 0
    8178:	17 c0       	rjmp	.+46     	; 0x81a8 <vfprintf+0x3b2>
    817a:	b7 01       	movw	r22, r14
    817c:	8e e2       	ldi	r24, 0x2E	; 46
    817e:	90 e0       	ldi	r25, 0x00	; 0
    8180:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    8184:	1e 5f       	subi	r17, 0xFE	; 254
    8186:	82 e0       	ldi	r24, 0x02	; 2
    8188:	01 e0       	ldi	r16, 0x01	; 1
    818a:	08 0f       	add	r16, r24
    818c:	f3 01       	movw	r30, r6
    818e:	e8 0f       	add	r30, r24
    8190:	f1 1d       	adc	r31, r1
    8192:	80 81       	ld	r24, Z
    8194:	b7 01       	movw	r22, r14
    8196:	90 e0       	ldi	r25, 0x00	; 0
    8198:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    819c:	80 2f       	mov	r24, r16
    819e:	01 13       	cpse	r16, r17
    81a0:	f3 cf       	rjmp	.-26     	; 0x8188 <vfprintf+0x392>
    81a2:	e6 cf       	rjmp	.-52     	; 0x8170 <vfprintf+0x37a>
    81a4:	85 e4       	ldi	r24, 0x45	; 69
    81a6:	90 e0       	ldi	r25, 0x00	; 0
    81a8:	b7 01       	movw	r22, r14
    81aa:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    81ae:	d7 fc       	sbrc	r13, 7
    81b0:	06 c0       	rjmp	.+12     	; 0x81be <vfprintf+0x3c8>
    81b2:	c1 14       	cp	r12, r1
    81b4:	d1 04       	cpc	r13, r1
    81b6:	41 f4       	brne	.+16     	; 0x81c8 <vfprintf+0x3d2>
    81b8:	ec 85       	ldd	r30, Y+12	; 0x0c
    81ba:	e4 ff       	sbrs	r30, 4
    81bc:	05 c0       	rjmp	.+10     	; 0x81c8 <vfprintf+0x3d2>
    81be:	d1 94       	neg	r13
    81c0:	c1 94       	neg	r12
    81c2:	d1 08       	sbc	r13, r1
    81c4:	8d e2       	ldi	r24, 0x2D	; 45
    81c6:	01 c0       	rjmp	.+2      	; 0x81ca <vfprintf+0x3d4>
    81c8:	8b e2       	ldi	r24, 0x2B	; 43
    81ca:	b7 01       	movw	r22, r14
    81cc:	90 e0       	ldi	r25, 0x00	; 0
    81ce:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    81d2:	80 e3       	ldi	r24, 0x30	; 48
    81d4:	2a e0       	ldi	r18, 0x0A	; 10
    81d6:	c2 16       	cp	r12, r18
    81d8:	d1 04       	cpc	r13, r1
    81da:	2c f0       	brlt	.+10     	; 0x81e6 <vfprintf+0x3f0>
    81dc:	8f 5f       	subi	r24, 0xFF	; 255
    81de:	fa e0       	ldi	r31, 0x0A	; 10
    81e0:	cf 1a       	sub	r12, r31
    81e2:	d1 08       	sbc	r13, r1
    81e4:	f7 cf       	rjmp	.-18     	; 0x81d4 <vfprintf+0x3de>
    81e6:	b7 01       	movw	r22, r14
    81e8:	90 e0       	ldi	r25, 0x00	; 0
    81ea:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    81ee:	b7 01       	movw	r22, r14
    81f0:	c6 01       	movw	r24, r12
    81f2:	c0 96       	adiw	r24, 0x30	; 48
    81f4:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    81f8:	54 c1       	rjmp	.+680    	; 0x84a2 <vfprintf+0x6ac>
    81fa:	83 36       	cpi	r24, 0x63	; 99
    81fc:	31 f0       	breq	.+12     	; 0x820a <vfprintf+0x414>
    81fe:	83 37       	cpi	r24, 0x73	; 115
    8200:	79 f0       	breq	.+30     	; 0x8220 <vfprintf+0x42a>
    8202:	83 35       	cpi	r24, 0x53	; 83
    8204:	09 f0       	breq	.+2      	; 0x8208 <vfprintf+0x412>
    8206:	56 c0       	rjmp	.+172    	; 0x82b4 <vfprintf+0x4be>
    8208:	20 c0       	rjmp	.+64     	; 0x824a <vfprintf+0x454>
    820a:	56 01       	movw	r10, r12
    820c:	32 e0       	ldi	r19, 0x02	; 2
    820e:	a3 0e       	add	r10, r19
    8210:	b1 1c       	adc	r11, r1
    8212:	f6 01       	movw	r30, r12
    8214:	80 81       	ld	r24, Z
    8216:	89 83       	std	Y+1, r24	; 0x01
    8218:	01 e0       	ldi	r16, 0x01	; 1
    821a:	10 e0       	ldi	r17, 0x00	; 0
    821c:	63 01       	movw	r12, r6
    821e:	12 c0       	rjmp	.+36     	; 0x8244 <vfprintf+0x44e>
    8220:	56 01       	movw	r10, r12
    8222:	f2 e0       	ldi	r31, 0x02	; 2
    8224:	af 0e       	add	r10, r31
    8226:	b1 1c       	adc	r11, r1
    8228:	f6 01       	movw	r30, r12
    822a:	c0 80       	ld	r12, Z
    822c:	d1 80       	ldd	r13, Z+1	; 0x01
    822e:	96 fe       	sbrs	r9, 6
    8230:	03 c0       	rjmp	.+6      	; 0x8238 <vfprintf+0x442>
    8232:	61 2f       	mov	r22, r17
    8234:	70 e0       	ldi	r23, 0x00	; 0
    8236:	02 c0       	rjmp	.+4      	; 0x823c <vfprintf+0x446>
    8238:	6f ef       	ldi	r22, 0xFF	; 255
    823a:	7f ef       	ldi	r23, 0xFF	; 255
    823c:	c6 01       	movw	r24, r12
    823e:	0e 94 e5 4f 	call	0x9fca	; 0x9fca <strnlen>
    8242:	8c 01       	movw	r16, r24
    8244:	f9 2d       	mov	r31, r9
    8246:	ff 77       	andi	r31, 0x7F	; 127
    8248:	14 c0       	rjmp	.+40     	; 0x8272 <vfprintf+0x47c>
    824a:	56 01       	movw	r10, r12
    824c:	22 e0       	ldi	r18, 0x02	; 2
    824e:	a2 0e       	add	r10, r18
    8250:	b1 1c       	adc	r11, r1
    8252:	f6 01       	movw	r30, r12
    8254:	c0 80       	ld	r12, Z
    8256:	d1 80       	ldd	r13, Z+1	; 0x01
    8258:	96 fe       	sbrs	r9, 6
    825a:	03 c0       	rjmp	.+6      	; 0x8262 <vfprintf+0x46c>
    825c:	61 2f       	mov	r22, r17
    825e:	70 e0       	ldi	r23, 0x00	; 0
    8260:	02 c0       	rjmp	.+4      	; 0x8266 <vfprintf+0x470>
    8262:	6f ef       	ldi	r22, 0xFF	; 255
    8264:	7f ef       	ldi	r23, 0xFF	; 255
    8266:	c6 01       	movw	r24, r12
    8268:	0e 94 9f 4f 	call	0x9f3e	; 0x9f3e <strnlen_P>
    826c:	8c 01       	movw	r16, r24
    826e:	f9 2d       	mov	r31, r9
    8270:	f0 68       	ori	r31, 0x80	; 128
    8272:	9f 2e       	mov	r9, r31
    8274:	f3 fd       	sbrc	r31, 3
    8276:	1a c0       	rjmp	.+52     	; 0x82ac <vfprintf+0x4b6>
    8278:	85 2d       	mov	r24, r5
    827a:	90 e0       	ldi	r25, 0x00	; 0
    827c:	08 17       	cp	r16, r24
    827e:	19 07       	cpc	r17, r25
    8280:	a8 f4       	brcc	.+42     	; 0x82ac <vfprintf+0x4b6>
    8282:	b7 01       	movw	r22, r14
    8284:	80 e2       	ldi	r24, 0x20	; 32
    8286:	90 e0       	ldi	r25, 0x00	; 0
    8288:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    828c:	5a 94       	dec	r5
    828e:	f4 cf       	rjmp	.-24     	; 0x8278 <vfprintf+0x482>
    8290:	f6 01       	movw	r30, r12
    8292:	97 fc       	sbrc	r9, 7
    8294:	85 91       	lpm	r24, Z+
    8296:	97 fe       	sbrs	r9, 7
    8298:	81 91       	ld	r24, Z+
    829a:	6f 01       	movw	r12, r30
    829c:	b7 01       	movw	r22, r14
    829e:	90 e0       	ldi	r25, 0x00	; 0
    82a0:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    82a4:	51 10       	cpse	r5, r1
    82a6:	5a 94       	dec	r5
    82a8:	01 50       	subi	r16, 0x01	; 1
    82aa:	11 09       	sbc	r17, r1
    82ac:	01 15       	cp	r16, r1
    82ae:	11 05       	cpc	r17, r1
    82b0:	79 f7       	brne	.-34     	; 0x8290 <vfprintf+0x49a>
    82b2:	f7 c0       	rjmp	.+494    	; 0x84a2 <vfprintf+0x6ac>
    82b4:	84 36       	cpi	r24, 0x64	; 100
    82b6:	11 f0       	breq	.+4      	; 0x82bc <vfprintf+0x4c6>
    82b8:	89 36       	cpi	r24, 0x69	; 105
    82ba:	61 f5       	brne	.+88     	; 0x8314 <vfprintf+0x51e>
    82bc:	56 01       	movw	r10, r12
    82be:	97 fe       	sbrs	r9, 7
    82c0:	09 c0       	rjmp	.+18     	; 0x82d4 <vfprintf+0x4de>
    82c2:	24 e0       	ldi	r18, 0x04	; 4
    82c4:	a2 0e       	add	r10, r18
    82c6:	b1 1c       	adc	r11, r1
    82c8:	f6 01       	movw	r30, r12
    82ca:	60 81       	ld	r22, Z
    82cc:	71 81       	ldd	r23, Z+1	; 0x01
    82ce:	82 81       	ldd	r24, Z+2	; 0x02
    82d0:	93 81       	ldd	r25, Z+3	; 0x03
    82d2:	0a c0       	rjmp	.+20     	; 0x82e8 <vfprintf+0x4f2>
    82d4:	f2 e0       	ldi	r31, 0x02	; 2
    82d6:	af 0e       	add	r10, r31
    82d8:	b1 1c       	adc	r11, r1
    82da:	f6 01       	movw	r30, r12
    82dc:	60 81       	ld	r22, Z
    82de:	71 81       	ldd	r23, Z+1	; 0x01
    82e0:	07 2e       	mov	r0, r23
    82e2:	00 0c       	add	r0, r0
    82e4:	88 0b       	sbc	r24, r24
    82e6:	99 0b       	sbc	r25, r25
    82e8:	f9 2d       	mov	r31, r9
    82ea:	ff 76       	andi	r31, 0x6F	; 111
    82ec:	9f 2e       	mov	r9, r31
    82ee:	97 ff       	sbrs	r25, 7
    82f0:	09 c0       	rjmp	.+18     	; 0x8304 <vfprintf+0x50e>
    82f2:	90 95       	com	r25
    82f4:	80 95       	com	r24
    82f6:	70 95       	com	r23
    82f8:	61 95       	neg	r22
    82fa:	7f 4f       	sbci	r23, 0xFF	; 255
    82fc:	8f 4f       	sbci	r24, 0xFF	; 255
    82fe:	9f 4f       	sbci	r25, 0xFF	; 255
    8300:	f0 68       	ori	r31, 0x80	; 128
    8302:	9f 2e       	mov	r9, r31
    8304:	2a e0       	ldi	r18, 0x0A	; 10
    8306:	30 e0       	ldi	r19, 0x00	; 0
    8308:	a3 01       	movw	r20, r6
    830a:	0e 94 4d 51 	call	0xa29a	; 0xa29a <__ultoa_invert>
    830e:	c8 2e       	mov	r12, r24
    8310:	c6 18       	sub	r12, r6
    8312:	3f c0       	rjmp	.+126    	; 0x8392 <vfprintf+0x59c>
    8314:	09 2d       	mov	r16, r9
    8316:	85 37       	cpi	r24, 0x75	; 117
    8318:	21 f4       	brne	.+8      	; 0x8322 <vfprintf+0x52c>
    831a:	0f 7e       	andi	r16, 0xEF	; 239
    831c:	2a e0       	ldi	r18, 0x0A	; 10
    831e:	30 e0       	ldi	r19, 0x00	; 0
    8320:	1d c0       	rjmp	.+58     	; 0x835c <vfprintf+0x566>
    8322:	09 7f       	andi	r16, 0xF9	; 249
    8324:	8f 36       	cpi	r24, 0x6F	; 111
    8326:	91 f0       	breq	.+36     	; 0x834c <vfprintf+0x556>
    8328:	18 f4       	brcc	.+6      	; 0x8330 <vfprintf+0x53a>
    832a:	88 35       	cpi	r24, 0x58	; 88
    832c:	59 f0       	breq	.+22     	; 0x8344 <vfprintf+0x54e>
    832e:	c3 c0       	rjmp	.+390    	; 0x84b6 <vfprintf+0x6c0>
    8330:	80 37       	cpi	r24, 0x70	; 112
    8332:	19 f0       	breq	.+6      	; 0x833a <vfprintf+0x544>
    8334:	88 37       	cpi	r24, 0x78	; 120
    8336:	11 f0       	breq	.+4      	; 0x833c <vfprintf+0x546>
    8338:	be c0       	rjmp	.+380    	; 0x84b6 <vfprintf+0x6c0>
    833a:	00 61       	ori	r16, 0x10	; 16
    833c:	04 ff       	sbrs	r16, 4
    833e:	09 c0       	rjmp	.+18     	; 0x8352 <vfprintf+0x55c>
    8340:	04 60       	ori	r16, 0x04	; 4
    8342:	07 c0       	rjmp	.+14     	; 0x8352 <vfprintf+0x55c>
    8344:	94 fe       	sbrs	r9, 4
    8346:	08 c0       	rjmp	.+16     	; 0x8358 <vfprintf+0x562>
    8348:	06 60       	ori	r16, 0x06	; 6
    834a:	06 c0       	rjmp	.+12     	; 0x8358 <vfprintf+0x562>
    834c:	28 e0       	ldi	r18, 0x08	; 8
    834e:	30 e0       	ldi	r19, 0x00	; 0
    8350:	05 c0       	rjmp	.+10     	; 0x835c <vfprintf+0x566>
    8352:	20 e1       	ldi	r18, 0x10	; 16
    8354:	30 e0       	ldi	r19, 0x00	; 0
    8356:	02 c0       	rjmp	.+4      	; 0x835c <vfprintf+0x566>
    8358:	20 e1       	ldi	r18, 0x10	; 16
    835a:	32 e0       	ldi	r19, 0x02	; 2
    835c:	56 01       	movw	r10, r12
    835e:	07 ff       	sbrs	r16, 7
    8360:	09 c0       	rjmp	.+18     	; 0x8374 <vfprintf+0x57e>
    8362:	84 e0       	ldi	r24, 0x04	; 4
    8364:	a8 0e       	add	r10, r24
    8366:	b1 1c       	adc	r11, r1
    8368:	f6 01       	movw	r30, r12
    836a:	60 81       	ld	r22, Z
    836c:	71 81       	ldd	r23, Z+1	; 0x01
    836e:	82 81       	ldd	r24, Z+2	; 0x02
    8370:	93 81       	ldd	r25, Z+3	; 0x03
    8372:	08 c0       	rjmp	.+16     	; 0x8384 <vfprintf+0x58e>
    8374:	f2 e0       	ldi	r31, 0x02	; 2
    8376:	af 0e       	add	r10, r31
    8378:	b1 1c       	adc	r11, r1
    837a:	f6 01       	movw	r30, r12
    837c:	60 81       	ld	r22, Z
    837e:	71 81       	ldd	r23, Z+1	; 0x01
    8380:	80 e0       	ldi	r24, 0x00	; 0
    8382:	90 e0       	ldi	r25, 0x00	; 0
    8384:	a3 01       	movw	r20, r6
    8386:	0e 94 4d 51 	call	0xa29a	; 0xa29a <__ultoa_invert>
    838a:	c8 2e       	mov	r12, r24
    838c:	c6 18       	sub	r12, r6
    838e:	0f 77       	andi	r16, 0x7F	; 127
    8390:	90 2e       	mov	r9, r16
    8392:	96 fe       	sbrs	r9, 6
    8394:	0b c0       	rjmp	.+22     	; 0x83ac <vfprintf+0x5b6>
    8396:	09 2d       	mov	r16, r9
    8398:	0e 7f       	andi	r16, 0xFE	; 254
    839a:	c1 16       	cp	r12, r17
    839c:	50 f4       	brcc	.+20     	; 0x83b2 <vfprintf+0x5bc>
    839e:	94 fe       	sbrs	r9, 4
    83a0:	0a c0       	rjmp	.+20     	; 0x83b6 <vfprintf+0x5c0>
    83a2:	92 fc       	sbrc	r9, 2
    83a4:	08 c0       	rjmp	.+16     	; 0x83b6 <vfprintf+0x5c0>
    83a6:	09 2d       	mov	r16, r9
    83a8:	0e 7e       	andi	r16, 0xEE	; 238
    83aa:	05 c0       	rjmp	.+10     	; 0x83b6 <vfprintf+0x5c0>
    83ac:	dc 2c       	mov	r13, r12
    83ae:	09 2d       	mov	r16, r9
    83b0:	03 c0       	rjmp	.+6      	; 0x83b8 <vfprintf+0x5c2>
    83b2:	dc 2c       	mov	r13, r12
    83b4:	01 c0       	rjmp	.+2      	; 0x83b8 <vfprintf+0x5c2>
    83b6:	d1 2e       	mov	r13, r17
    83b8:	04 ff       	sbrs	r16, 4
    83ba:	0d c0       	rjmp	.+26     	; 0x83d6 <vfprintf+0x5e0>
    83bc:	fe 01       	movw	r30, r28
    83be:	ec 0d       	add	r30, r12
    83c0:	f1 1d       	adc	r31, r1
    83c2:	80 81       	ld	r24, Z
    83c4:	80 33       	cpi	r24, 0x30	; 48
    83c6:	11 f4       	brne	.+4      	; 0x83cc <vfprintf+0x5d6>
    83c8:	09 7e       	andi	r16, 0xE9	; 233
    83ca:	09 c0       	rjmp	.+18     	; 0x83de <vfprintf+0x5e8>
    83cc:	02 ff       	sbrs	r16, 2
    83ce:	06 c0       	rjmp	.+12     	; 0x83dc <vfprintf+0x5e6>
    83d0:	d3 94       	inc	r13
    83d2:	d3 94       	inc	r13
    83d4:	04 c0       	rjmp	.+8      	; 0x83de <vfprintf+0x5e8>
    83d6:	80 2f       	mov	r24, r16
    83d8:	86 78       	andi	r24, 0x86	; 134
    83da:	09 f0       	breq	.+2      	; 0x83de <vfprintf+0x5e8>
    83dc:	d3 94       	inc	r13
    83de:	03 fd       	sbrc	r16, 3
    83e0:	11 c0       	rjmp	.+34     	; 0x8404 <vfprintf+0x60e>
    83e2:	00 ff       	sbrs	r16, 0
    83e4:	06 c0       	rjmp	.+12     	; 0x83f2 <vfprintf+0x5fc>
    83e6:	1c 2d       	mov	r17, r12
    83e8:	d5 14       	cp	r13, r5
    83ea:	80 f4       	brcc	.+32     	; 0x840c <vfprintf+0x616>
    83ec:	15 0d       	add	r17, r5
    83ee:	1d 19       	sub	r17, r13
    83f0:	0d c0       	rjmp	.+26     	; 0x840c <vfprintf+0x616>
    83f2:	d5 14       	cp	r13, r5
    83f4:	58 f4       	brcc	.+22     	; 0x840c <vfprintf+0x616>
    83f6:	b7 01       	movw	r22, r14
    83f8:	80 e2       	ldi	r24, 0x20	; 32
    83fa:	90 e0       	ldi	r25, 0x00	; 0
    83fc:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    8400:	d3 94       	inc	r13
    8402:	f7 cf       	rjmp	.-18     	; 0x83f2 <vfprintf+0x5fc>
    8404:	d5 14       	cp	r13, r5
    8406:	10 f4       	brcc	.+4      	; 0x840c <vfprintf+0x616>
    8408:	5d 18       	sub	r5, r13
    840a:	01 c0       	rjmp	.+2      	; 0x840e <vfprintf+0x618>
    840c:	51 2c       	mov	r5, r1
    840e:	04 ff       	sbrs	r16, 4
    8410:	10 c0       	rjmp	.+32     	; 0x8432 <vfprintf+0x63c>
    8412:	b7 01       	movw	r22, r14
    8414:	80 e3       	ldi	r24, 0x30	; 48
    8416:	90 e0       	ldi	r25, 0x00	; 0
    8418:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    841c:	02 ff       	sbrs	r16, 2
    841e:	17 c0       	rjmp	.+46     	; 0x844e <vfprintf+0x658>
    8420:	01 fd       	sbrc	r16, 1
    8422:	03 c0       	rjmp	.+6      	; 0x842a <vfprintf+0x634>
    8424:	88 e7       	ldi	r24, 0x78	; 120
    8426:	90 e0       	ldi	r25, 0x00	; 0
    8428:	02 c0       	rjmp	.+4      	; 0x842e <vfprintf+0x638>
    842a:	88 e5       	ldi	r24, 0x58	; 88
    842c:	90 e0       	ldi	r25, 0x00	; 0
    842e:	b7 01       	movw	r22, r14
    8430:	0c c0       	rjmp	.+24     	; 0x844a <vfprintf+0x654>
    8432:	80 2f       	mov	r24, r16
    8434:	86 78       	andi	r24, 0x86	; 134
    8436:	59 f0       	breq	.+22     	; 0x844e <vfprintf+0x658>
    8438:	01 ff       	sbrs	r16, 1
    843a:	02 c0       	rjmp	.+4      	; 0x8440 <vfprintf+0x64a>
    843c:	8b e2       	ldi	r24, 0x2B	; 43
    843e:	01 c0       	rjmp	.+2      	; 0x8442 <vfprintf+0x64c>
    8440:	80 e2       	ldi	r24, 0x20	; 32
    8442:	07 fd       	sbrc	r16, 7
    8444:	8d e2       	ldi	r24, 0x2D	; 45
    8446:	b7 01       	movw	r22, r14
    8448:	90 e0       	ldi	r25, 0x00	; 0
    844a:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    844e:	c1 16       	cp	r12, r17
    8450:	38 f4       	brcc	.+14     	; 0x8460 <vfprintf+0x66a>
    8452:	b7 01       	movw	r22, r14
    8454:	80 e3       	ldi	r24, 0x30	; 48
    8456:	90 e0       	ldi	r25, 0x00	; 0
    8458:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    845c:	11 50       	subi	r17, 0x01	; 1
    845e:	f7 cf       	rjmp	.-18     	; 0x844e <vfprintf+0x658>
    8460:	ca 94       	dec	r12
    8462:	f3 01       	movw	r30, r6
    8464:	ec 0d       	add	r30, r12
    8466:	f1 1d       	adc	r31, r1
    8468:	80 81       	ld	r24, Z
    846a:	b7 01       	movw	r22, r14
    846c:	90 e0       	ldi	r25, 0x00	; 0
    846e:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    8472:	c1 10       	cpse	r12, r1
    8474:	f5 cf       	rjmp	.-22     	; 0x8460 <vfprintf+0x66a>
    8476:	15 c0       	rjmp	.+42     	; 0x84a2 <vfprintf+0x6ac>
    8478:	f4 e0       	ldi	r31, 0x04	; 4
    847a:	f5 15       	cp	r31, r5
    847c:	60 f5       	brcc	.+88     	; 0x84d6 <vfprintf+0x6e0>
    847e:	84 e0       	ldi	r24, 0x04	; 4
    8480:	58 1a       	sub	r5, r24
    8482:	93 fe       	sbrs	r9, 3
    8484:	1f c0       	rjmp	.+62     	; 0x84c4 <vfprintf+0x6ce>
    8486:	01 11       	cpse	r16, r1
    8488:	27 c0       	rjmp	.+78     	; 0x84d8 <vfprintf+0x6e2>
    848a:	2c 85       	ldd	r18, Y+12	; 0x0c
    848c:	23 ff       	sbrs	r18, 3
    848e:	2a c0       	rjmp	.+84     	; 0x84e4 <vfprintf+0x6ee>
    8490:	0e e4       	ldi	r16, 0x4E	; 78
    8492:	13 e0       	ldi	r17, 0x03	; 3
    8494:	39 2d       	mov	r19, r9
    8496:	30 71       	andi	r19, 0x10	; 16
    8498:	93 2e       	mov	r9, r19
    849a:	f8 01       	movw	r30, r16
    849c:	84 91       	lpm	r24, Z
    849e:	81 11       	cpse	r24, r1
    84a0:	24 c0       	rjmp	.+72     	; 0x84ea <vfprintf+0x6f4>
    84a2:	55 20       	and	r5, r5
    84a4:	09 f4       	brne	.+2      	; 0x84a8 <vfprintf+0x6b2>
    84a6:	e4 cc       	rjmp	.-1592   	; 0x7e70 <vfprintf+0x7a>
    84a8:	b7 01       	movw	r22, r14
    84aa:	80 e2       	ldi	r24, 0x20	; 32
    84ac:	90 e0       	ldi	r25, 0x00	; 0
    84ae:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    84b2:	5a 94       	dec	r5
    84b4:	f6 cf       	rjmp	.-20     	; 0x84a2 <vfprintf+0x6ac>
    84b6:	f7 01       	movw	r30, r14
    84b8:	86 81       	ldd	r24, Z+6	; 0x06
    84ba:	97 81       	ldd	r25, Z+7	; 0x07
    84bc:	26 c0       	rjmp	.+76     	; 0x850a <vfprintf+0x714>
    84be:	8f ef       	ldi	r24, 0xFF	; 255
    84c0:	9f ef       	ldi	r25, 0xFF	; 255
    84c2:	23 c0       	rjmp	.+70     	; 0x850a <vfprintf+0x714>
    84c4:	b7 01       	movw	r22, r14
    84c6:	80 e2       	ldi	r24, 0x20	; 32
    84c8:	90 e0       	ldi	r25, 0x00	; 0
    84ca:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    84ce:	5a 94       	dec	r5
    84d0:	51 10       	cpse	r5, r1
    84d2:	f8 cf       	rjmp	.-16     	; 0x84c4 <vfprintf+0x6ce>
    84d4:	d8 cf       	rjmp	.-80     	; 0x8486 <vfprintf+0x690>
    84d6:	51 2c       	mov	r5, r1
    84d8:	b7 01       	movw	r22, r14
    84da:	80 2f       	mov	r24, r16
    84dc:	90 e0       	ldi	r25, 0x00	; 0
    84de:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    84e2:	d3 cf       	rjmp	.-90     	; 0x848a <vfprintf+0x694>
    84e4:	02 e5       	ldi	r16, 0x52	; 82
    84e6:	13 e0       	ldi	r17, 0x03	; 3
    84e8:	d5 cf       	rjmp	.-86     	; 0x8494 <vfprintf+0x69e>
    84ea:	91 10       	cpse	r9, r1
    84ec:	80 52       	subi	r24, 0x20	; 32
    84ee:	b7 01       	movw	r22, r14
    84f0:	90 e0       	ldi	r25, 0x00	; 0
    84f2:	0e 94 5d 50 	call	0xa0ba	; 0xa0ba <fputc>
    84f6:	0f 5f       	subi	r16, 0xFF	; 255
    84f8:	1f 4f       	sbci	r17, 0xFF	; 255
    84fa:	cf cf       	rjmp	.-98     	; 0x849a <vfprintf+0x6a4>
    84fc:	23 e0       	ldi	r18, 0x03	; 3
    84fe:	25 15       	cp	r18, r5
    8500:	10 f4       	brcc	.+4      	; 0x8506 <vfprintf+0x710>
    8502:	83 e0       	ldi	r24, 0x03	; 3
    8504:	bd cf       	rjmp	.-134    	; 0x8480 <vfprintf+0x68a>
    8506:	51 2c       	mov	r5, r1
    8508:	c0 cf       	rjmp	.-128    	; 0x848a <vfprintf+0x694>
    850a:	60 96       	adiw	r28, 0x10	; 16
    850c:	cd bf       	out	0x3d, r28	; 61
    850e:	de bf       	out	0x3e, r29	; 62
    8510:	df 91       	pop	r29
    8512:	cf 91       	pop	r28
    8514:	1f 91       	pop	r17
    8516:	0f 91       	pop	r16
    8518:	ff 90       	pop	r15
    851a:	ef 90       	pop	r14
    851c:	df 90       	pop	r13
    851e:	cf 90       	pop	r12
    8520:	bf 90       	pop	r11
    8522:	af 90       	pop	r10
    8524:	9f 90       	pop	r9
    8526:	8f 90       	pop	r8
    8528:	7f 90       	pop	r7
    852a:	6f 90       	pop	r6
    852c:	5f 90       	pop	r5
    852e:	4f 90       	pop	r4
    8530:	3f 90       	pop	r3
    8532:	2f 90       	pop	r2
    8534:	08 95       	ret

00008536 <putval>:
    8536:	20 fd       	sbrc	r18, 0
    8538:	09 c0       	rjmp	.+18     	; 0x854c <putval+0x16>
    853a:	fc 01       	movw	r30, r24
    853c:	23 fd       	sbrc	r18, 3
    853e:	05 c0       	rjmp	.+10     	; 0x854a <putval+0x14>
    8540:	22 ff       	sbrs	r18, 2
    8542:	02 c0       	rjmp	.+4      	; 0x8548 <putval+0x12>
    8544:	73 83       	std	Z+3, r23	; 0x03
    8546:	62 83       	std	Z+2, r22	; 0x02
    8548:	51 83       	std	Z+1, r21	; 0x01
    854a:	40 83       	st	Z, r20
    854c:	08 95       	ret

0000854e <mulacc>:
    854e:	44 fd       	sbrc	r20, 4
    8550:	17 c0       	rjmp	.+46     	; 0x8580 <mulacc+0x32>
    8552:	46 fd       	sbrc	r20, 6
    8554:	17 c0       	rjmp	.+46     	; 0x8584 <mulacc+0x36>
    8556:	ab 01       	movw	r20, r22
    8558:	bc 01       	movw	r22, r24
    855a:	da 01       	movw	r26, r20
    855c:	fb 01       	movw	r30, r22
    855e:	aa 0f       	add	r26, r26
    8560:	bb 1f       	adc	r27, r27
    8562:	ee 1f       	adc	r30, r30
    8564:	ff 1f       	adc	r31, r31
    8566:	10 94       	com	r1
    8568:	d1 f7       	brne	.-12     	; 0x855e <mulacc+0x10>
    856a:	4a 0f       	add	r20, r26
    856c:	5b 1f       	adc	r21, r27
    856e:	6e 1f       	adc	r22, r30
    8570:	7f 1f       	adc	r23, r31
    8572:	cb 01       	movw	r24, r22
    8574:	ba 01       	movw	r22, r20
    8576:	66 0f       	add	r22, r22
    8578:	77 1f       	adc	r23, r23
    857a:	88 1f       	adc	r24, r24
    857c:	99 1f       	adc	r25, r25
    857e:	09 c0       	rjmp	.+18     	; 0x8592 <mulacc+0x44>
    8580:	33 e0       	ldi	r19, 0x03	; 3
    8582:	01 c0       	rjmp	.+2      	; 0x8586 <mulacc+0x38>
    8584:	34 e0       	ldi	r19, 0x04	; 4
    8586:	66 0f       	add	r22, r22
    8588:	77 1f       	adc	r23, r23
    858a:	88 1f       	adc	r24, r24
    858c:	99 1f       	adc	r25, r25
    858e:	31 50       	subi	r19, 0x01	; 1
    8590:	d1 f7       	brne	.-12     	; 0x8586 <mulacc+0x38>
    8592:	62 0f       	add	r22, r18
    8594:	71 1d       	adc	r23, r1
    8596:	81 1d       	adc	r24, r1
    8598:	91 1d       	adc	r25, r1
    859a:	08 95       	ret

0000859c <skip_spaces>:
    859c:	0f 93       	push	r16
    859e:	1f 93       	push	r17
    85a0:	cf 93       	push	r28
    85a2:	df 93       	push	r29
    85a4:	8c 01       	movw	r16, r24
    85a6:	c8 01       	movw	r24, r16
    85a8:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    85ac:	ec 01       	movw	r28, r24
    85ae:	97 fd       	sbrc	r25, 7
    85b0:	08 c0       	rjmp	.+16     	; 0x85c2 <skip_spaces+0x26>
    85b2:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <isspace>
    85b6:	89 2b       	or	r24, r25
    85b8:	b1 f7       	brne	.-20     	; 0x85a6 <skip_spaces+0xa>
    85ba:	b8 01       	movw	r22, r16
    85bc:	ce 01       	movw	r24, r28
    85be:	0e 94 34 51 	call	0xa268	; 0xa268 <ungetc>
    85c2:	ce 01       	movw	r24, r28
    85c4:	df 91       	pop	r29
    85c6:	cf 91       	pop	r28
    85c8:	1f 91       	pop	r17
    85ca:	0f 91       	pop	r16
    85cc:	08 95       	ret

000085ce <conv_int>:
    85ce:	8f 92       	push	r8
    85d0:	9f 92       	push	r9
    85d2:	af 92       	push	r10
    85d4:	bf 92       	push	r11
    85d6:	cf 92       	push	r12
    85d8:	df 92       	push	r13
    85da:	ef 92       	push	r14
    85dc:	ff 92       	push	r15
    85de:	0f 93       	push	r16
    85e0:	1f 93       	push	r17
    85e2:	cf 93       	push	r28
    85e4:	df 93       	push	r29
    85e6:	7c 01       	movw	r14, r24
    85e8:	8b 01       	movw	r16, r22
    85ea:	6a 01       	movw	r12, r20
    85ec:	d2 2f       	mov	r29, r18
    85ee:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    85f2:	9c 01       	movw	r18, r24
    85f4:	33 27       	eor	r19, r19
    85f6:	2b 32       	cpi	r18, 0x2B	; 43
    85f8:	31 05       	cpc	r19, r1
    85fa:	21 f0       	breq	.+8      	; 0x8604 <conv_int+0x36>
    85fc:	2d 32       	cpi	r18, 0x2D	; 45
    85fe:	31 05       	cpc	r19, r1
    8600:	59 f4       	brne	.+22     	; 0x8618 <conv_int+0x4a>
    8602:	d0 68       	ori	r29, 0x80	; 128
    8604:	01 50       	subi	r16, 0x01	; 1
    8606:	11 09       	sbc	r17, r1
    8608:	11 f4       	brne	.+4      	; 0x860e <conv_int+0x40>
    860a:	80 e0       	ldi	r24, 0x00	; 0
    860c:	6b c0       	rjmp	.+214    	; 0x86e4 <conv_int+0x116>
    860e:	c7 01       	movw	r24, r14
    8610:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8614:	97 fd       	sbrc	r25, 7
    8616:	f9 cf       	rjmp	.-14     	; 0x860a <conv_int+0x3c>
    8618:	cd 2f       	mov	r28, r29
    861a:	cd 7f       	andi	r28, 0xFD	; 253
    861c:	2d 2f       	mov	r18, r29
    861e:	20 73       	andi	r18, 0x30	; 48
    8620:	19 f5       	brne	.+70     	; 0x8668 <conv_int+0x9a>
    8622:	80 33       	cpi	r24, 0x30	; 48
    8624:	09 f5       	brne	.+66     	; 0x8668 <conv_int+0x9a>
    8626:	58 01       	movw	r10, r16
    8628:	81 e0       	ldi	r24, 0x01	; 1
    862a:	a8 1a       	sub	r10, r24
    862c:	b1 08       	sbc	r11, r1
    862e:	09 f4       	brne	.+2      	; 0x8632 <conv_int+0x64>
    8630:	45 c0       	rjmp	.+138    	; 0x86bc <conv_int+0xee>
    8632:	c7 01       	movw	r24, r14
    8634:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8638:	97 fd       	sbrc	r25, 7
    863a:	40 c0       	rjmp	.+128    	; 0x86bc <conv_int+0xee>
    863c:	9c 01       	movw	r18, r24
    863e:	2f 7d       	andi	r18, 0xDF	; 223
    8640:	33 27       	eor	r19, r19
    8642:	28 35       	cpi	r18, 0x58	; 88
    8644:	31 05       	cpc	r19, r1
    8646:	51 f4       	brne	.+20     	; 0x865c <conv_int+0x8e>
    8648:	c2 64       	ori	r28, 0x42	; 66
    864a:	02 50       	subi	r16, 0x02	; 2
    864c:	11 09       	sbc	r17, r1
    864e:	b1 f1       	breq	.+108    	; 0x86bc <conv_int+0xee>
    8650:	c7 01       	movw	r24, r14
    8652:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8656:	97 ff       	sbrs	r25, 7
    8658:	07 c0       	rjmp	.+14     	; 0x8668 <conv_int+0x9a>
    865a:	30 c0       	rjmp	.+96     	; 0x86bc <conv_int+0xee>
    865c:	d6 ff       	sbrs	r29, 6
    865e:	02 c0       	rjmp	.+4      	; 0x8664 <conv_int+0x96>
    8660:	c2 60       	ori	r28, 0x02	; 2
    8662:	01 c0       	rjmp	.+2      	; 0x8666 <conv_int+0x98>
    8664:	c2 61       	ori	r28, 0x12	; 18
    8666:	85 01       	movw	r16, r10
    8668:	81 2c       	mov	r8, r1
    866a:	91 2c       	mov	r9, r1
    866c:	54 01       	movw	r10, r8
    866e:	20 ed       	ldi	r18, 0xD0	; 208
    8670:	28 0f       	add	r18, r24
    8672:	28 30       	cpi	r18, 0x08	; 8
    8674:	80 f0       	brcs	.+32     	; 0x8696 <conv_int+0xc8>
    8676:	c4 ff       	sbrs	r28, 4
    8678:	04 c0       	rjmp	.+8      	; 0x8682 <conv_int+0xb4>
    867a:	b7 01       	movw	r22, r14
    867c:	0e 94 34 51 	call	0xa268	; 0xa268 <ungetc>
    8680:	1a c0       	rjmp	.+52     	; 0x86b6 <conv_int+0xe8>
    8682:	2a 30       	cpi	r18, 0x0A	; 10
    8684:	40 f0       	brcs	.+16     	; 0x8696 <conv_int+0xc8>
    8686:	c6 ff       	sbrs	r28, 6
    8688:	f8 cf       	rjmp	.-16     	; 0x867a <conv_int+0xac>
    868a:	2f 7d       	andi	r18, 0xDF	; 223
    868c:	3f ee       	ldi	r19, 0xEF	; 239
    868e:	32 0f       	add	r19, r18
    8690:	36 30       	cpi	r19, 0x06	; 6
    8692:	98 f7       	brcc	.-26     	; 0x867a <conv_int+0xac>
    8694:	27 50       	subi	r18, 0x07	; 7
    8696:	4c 2f       	mov	r20, r28
    8698:	c5 01       	movw	r24, r10
    869a:	b4 01       	movw	r22, r8
    869c:	0e 94 a7 42 	call	0x854e	; 0x854e <mulacc>
    86a0:	4b 01       	movw	r8, r22
    86a2:	5c 01       	movw	r10, r24
    86a4:	c2 60       	ori	r28, 0x02	; 2
    86a6:	01 50       	subi	r16, 0x01	; 1
    86a8:	11 09       	sbc	r17, r1
    86aa:	59 f0       	breq	.+22     	; 0x86c2 <conv_int+0xf4>
    86ac:	c7 01       	movw	r24, r14
    86ae:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    86b2:	97 ff       	sbrs	r25, 7
    86b4:	dc cf       	rjmp	.-72     	; 0x866e <conv_int+0xa0>
    86b6:	c1 fd       	sbrc	r28, 1
    86b8:	04 c0       	rjmp	.+8      	; 0x86c2 <conv_int+0xf4>
    86ba:	a7 cf       	rjmp	.-178    	; 0x860a <conv_int+0x3c>
    86bc:	81 2c       	mov	r8, r1
    86be:	91 2c       	mov	r9, r1
    86c0:	54 01       	movw	r10, r8
    86c2:	c7 ff       	sbrs	r28, 7
    86c4:	08 c0       	rjmp	.+16     	; 0x86d6 <conv_int+0x108>
    86c6:	b0 94       	com	r11
    86c8:	a0 94       	com	r10
    86ca:	90 94       	com	r9
    86cc:	80 94       	com	r8
    86ce:	81 1c       	adc	r8, r1
    86d0:	91 1c       	adc	r9, r1
    86d2:	a1 1c       	adc	r10, r1
    86d4:	b1 1c       	adc	r11, r1
    86d6:	2c 2f       	mov	r18, r28
    86d8:	b5 01       	movw	r22, r10
    86da:	a4 01       	movw	r20, r8
    86dc:	c6 01       	movw	r24, r12
    86de:	0e 94 9b 42 	call	0x8536	; 0x8536 <putval>
    86e2:	81 e0       	ldi	r24, 0x01	; 1
    86e4:	df 91       	pop	r29
    86e6:	cf 91       	pop	r28
    86e8:	1f 91       	pop	r17
    86ea:	0f 91       	pop	r16
    86ec:	ff 90       	pop	r15
    86ee:	ef 90       	pop	r14
    86f0:	df 90       	pop	r13
    86f2:	cf 90       	pop	r12
    86f4:	bf 90       	pop	r11
    86f6:	af 90       	pop	r10
    86f8:	9f 90       	pop	r9
    86fa:	8f 90       	pop	r8
    86fc:	08 95       	ret

000086fe <conv_brk>:
    86fe:	4f 92       	push	r4
    8700:	5f 92       	push	r5
    8702:	6f 92       	push	r6
    8704:	7f 92       	push	r7
    8706:	8f 92       	push	r8
    8708:	9f 92       	push	r9
    870a:	af 92       	push	r10
    870c:	bf 92       	push	r11
    870e:	cf 92       	push	r12
    8710:	df 92       	push	r13
    8712:	ef 92       	push	r14
    8714:	ff 92       	push	r15
    8716:	0f 93       	push	r16
    8718:	1f 93       	push	r17
    871a:	cf 93       	push	r28
    871c:	df 93       	push	r29
    871e:	cd b7       	in	r28, 0x3d	; 61
    8720:	de b7       	in	r29, 0x3e	; 62
    8722:	a0 97       	sbiw	r28, 0x20	; 32
    8724:	cd bf       	out	0x3d, r28	; 61
    8726:	de bf       	out	0x3e, r29	; 62
    8728:	5c 01       	movw	r10, r24
    872a:	4b 01       	movw	r8, r22
    872c:	7a 01       	movw	r14, r20
    872e:	8e 01       	movw	r16, r28
    8730:	0f 5f       	subi	r16, 0xFF	; 255
    8732:	1f 4f       	sbci	r17, 0xFF	; 255
    8734:	68 01       	movw	r12, r16
    8736:	80 e2       	ldi	r24, 0x20	; 32
    8738:	f8 01       	movw	r30, r16
    873a:	11 92       	st	Z+, r1
    873c:	8a 95       	dec	r24
    873e:	e9 f7       	brne	.-6      	; 0x873a <conv_brk+0x3c>
    8740:	f5 01       	movw	r30, r10
    8742:	53 80       	ldd	r5, Z+3	; 0x03
    8744:	40 e0       	ldi	r20, 0x00	; 0
    8746:	50 e0       	ldi	r21, 0x00	; 0
    8748:	61 2c       	mov	r6, r1
    874a:	90 e0       	ldi	r25, 0x00	; 0
    874c:	71 2c       	mov	r7, r1
    874e:	a1 e0       	ldi	r26, 0x01	; 1
    8750:	b0 e0       	ldi	r27, 0x00	; 0
    8752:	f9 01       	movw	r30, r18
    8754:	53 fc       	sbrc	r5, 3
    8756:	85 91       	lpm	r24, Z+
    8758:	53 fe       	sbrs	r5, 3
    875a:	81 91       	ld	r24, Z+
    875c:	8f 01       	movw	r16, r30
    875e:	48 2e       	mov	r4, r24
    8760:	9f 01       	movw	r18, r30
    8762:	81 11       	cpse	r24, r1
    8764:	03 c0       	rjmp	.+6      	; 0x876c <conv_brk+0x6e>
    8766:	80 e0       	ldi	r24, 0x00	; 0
    8768:	90 e0       	ldi	r25, 0x00	; 0
    876a:	96 c0       	rjmp	.+300    	; 0x8898 <conv_brk+0x19a>
    876c:	8e 35       	cpi	r24, 0x5E	; 94
    876e:	19 f4       	brne	.+6      	; 0x8776 <conv_brk+0x78>
    8770:	41 15       	cp	r20, r1
    8772:	51 05       	cpc	r21, r1
    8774:	51 f1       	breq	.+84     	; 0x87ca <conv_brk+0xcc>
    8776:	67 2d       	mov	r22, r7
    8778:	70 e0       	ldi	r23, 0x00	; 0
    877a:	64 17       	cp	r22, r20
    877c:	75 07       	cpc	r23, r21
    877e:	3c f4       	brge	.+14     	; 0x878e <conv_brk+0x90>
    8780:	8d 35       	cpi	r24, 0x5D	; 93
    8782:	61 f1       	breq	.+88     	; 0x87dc <conv_brk+0xde>
    8784:	8d 32       	cpi	r24, 0x2D	; 45
    8786:	19 f4       	brne	.+6      	; 0x878e <conv_brk+0x90>
    8788:	99 23       	and	r25, r25
    878a:	11 f1       	breq	.+68     	; 0x87d0 <conv_brk+0xd2>
    878c:	03 c0       	rjmp	.+6      	; 0x8794 <conv_brk+0x96>
    878e:	99 23       	and	r25, r25
    8790:	09 f4       	brne	.+2      	; 0x8794 <conv_brk+0x96>
    8792:	6d c0       	rjmp	.+218    	; 0x886e <conv_brk+0x170>
    8794:	84 2d       	mov	r24, r4
    8796:	86 95       	lsr	r24
    8798:	86 95       	lsr	r24
    879a:	86 95       	lsr	r24
    879c:	f6 01       	movw	r30, r12
    879e:	e8 0f       	add	r30, r24
    87a0:	f1 1d       	adc	r31, r1
    87a2:	84 2d       	mov	r24, r4
    87a4:	87 70       	andi	r24, 0x07	; 7
    87a6:	8d 01       	movw	r16, r26
    87a8:	02 c0       	rjmp	.+4      	; 0x87ae <conv_brk+0xb0>
    87aa:	00 0f       	add	r16, r16
    87ac:	11 1f       	adc	r17, r17
    87ae:	8a 95       	dec	r24
    87b0:	e2 f7       	brpl	.-8      	; 0x87aa <conv_brk+0xac>
    87b2:	c8 01       	movw	r24, r16
    87b4:	90 81       	ld	r25, Z
    87b6:	89 2b       	or	r24, r25
    87b8:	80 83       	st	Z, r24
    87ba:	64 14       	cp	r6, r4
    87bc:	59 f0       	breq	.+22     	; 0x87d4 <conv_brk+0xd6>
    87be:	46 14       	cp	r4, r6
    87c0:	10 f4       	brcc	.+4      	; 0x87c6 <conv_brk+0xc8>
    87c2:	43 94       	inc	r4
    87c4:	e7 cf       	rjmp	.-50     	; 0x8794 <conv_brk+0x96>
    87c6:	4a 94       	dec	r4
    87c8:	e5 cf       	rjmp	.-54     	; 0x8794 <conv_brk+0x96>
    87ca:	77 24       	eor	r7, r7
    87cc:	73 94       	inc	r7
    87ce:	03 c0       	rjmp	.+6      	; 0x87d6 <conv_brk+0xd8>
    87d0:	91 e0       	ldi	r25, 0x01	; 1
    87d2:	01 c0       	rjmp	.+2      	; 0x87d6 <conv_brk+0xd8>
    87d4:	90 e0       	ldi	r25, 0x00	; 0
    87d6:	4f 5f       	subi	r20, 0xFF	; 255
    87d8:	5f 4f       	sbci	r21, 0xFF	; 255
    87da:	bb cf       	rjmp	.-138    	; 0x8752 <conv_brk+0x54>
    87dc:	99 23       	and	r25, r25
    87de:	19 f0       	breq	.+6      	; 0x87e6 <conv_brk+0xe8>
    87e0:	8e 81       	ldd	r24, Y+6	; 0x06
    87e2:	80 62       	ori	r24, 0x20	; 32
    87e4:	8e 83       	std	Y+6, r24	; 0x06
    87e6:	71 10       	cpse	r7, r1
    87e8:	03 c0       	rjmp	.+6      	; 0x87f0 <conv_brk+0xf2>
    87ea:	77 24       	eor	r7, r7
    87ec:	73 94       	inc	r7
    87ee:	19 c0       	rjmp	.+50     	; 0x8822 <conv_brk+0x124>
    87f0:	f6 01       	movw	r30, r12
    87f2:	9e 01       	movw	r18, r28
    87f4:	2f 5d       	subi	r18, 0xDF	; 223
    87f6:	3f 4f       	sbci	r19, 0xFF	; 255
    87f8:	80 81       	ld	r24, Z
    87fa:	80 95       	com	r24
    87fc:	81 93       	st	Z+, r24
    87fe:	2e 17       	cp	r18, r30
    8800:	3f 07       	cpc	r19, r31
    8802:	d1 f7       	brne	.-12     	; 0x87f8 <conv_brk+0xfa>
    8804:	f2 cf       	rjmp	.-28     	; 0x87ea <conv_brk+0xec>
    8806:	e1 14       	cp	r14, r1
    8808:	f1 04       	cpc	r15, r1
    880a:	31 f0       	breq	.+12     	; 0x8818 <conv_brk+0x11a>
    880c:	f7 01       	movw	r30, r14
    880e:	80 83       	st	Z, r24
    8810:	b7 01       	movw	r22, r14
    8812:	6f 5f       	subi	r22, 0xFF	; 255
    8814:	7f 4f       	sbci	r23, 0xFF	; 255
    8816:	7b 01       	movw	r14, r22
    8818:	71 e0       	ldi	r23, 0x01	; 1
    881a:	87 1a       	sub	r8, r23
    881c:	91 08       	sbc	r9, r1
    881e:	71 2c       	mov	r7, r1
    8820:	f9 f0       	breq	.+62     	; 0x8860 <conv_brk+0x162>
    8822:	c5 01       	movw	r24, r10
    8824:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8828:	97 fd       	sbrc	r25, 7
    882a:	18 c0       	rjmp	.+48     	; 0x885c <conv_brk+0x15e>
    882c:	fc 01       	movw	r30, r24
    882e:	ff 27       	eor	r31, r31
    8830:	23 e0       	ldi	r18, 0x03	; 3
    8832:	f5 95       	asr	r31
    8834:	e7 95       	ror	r30
    8836:	2a 95       	dec	r18
    8838:	e1 f7       	brne	.-8      	; 0x8832 <conv_brk+0x134>
    883a:	ec 0d       	add	r30, r12
    883c:	fd 1d       	adc	r31, r13
    883e:	20 81       	ld	r18, Z
    8840:	30 e0       	ldi	r19, 0x00	; 0
    8842:	ac 01       	movw	r20, r24
    8844:	47 70       	andi	r20, 0x07	; 7
    8846:	55 27       	eor	r21, r21
    8848:	02 c0       	rjmp	.+4      	; 0x884e <conv_brk+0x150>
    884a:	35 95       	asr	r19
    884c:	27 95       	ror	r18
    884e:	4a 95       	dec	r20
    8850:	e2 f7       	brpl	.-8      	; 0x884a <conv_brk+0x14c>
    8852:	20 fd       	sbrc	r18, 0
    8854:	d8 cf       	rjmp	.-80     	; 0x8806 <conv_brk+0x108>
    8856:	b5 01       	movw	r22, r10
    8858:	0e 94 34 51 	call	0xa268	; 0xa268 <ungetc>
    885c:	71 10       	cpse	r7, r1
    885e:	83 cf       	rjmp	.-250    	; 0x8766 <conv_brk+0x68>
    8860:	e1 14       	cp	r14, r1
    8862:	f1 04       	cpc	r15, r1
    8864:	11 f0       	breq	.+4      	; 0x886a <conv_brk+0x16c>
    8866:	f7 01       	movw	r30, r14
    8868:	10 82       	st	Z, r1
    886a:	c8 01       	movw	r24, r16
    886c:	15 c0       	rjmp	.+42     	; 0x8898 <conv_brk+0x19a>
    886e:	68 2f       	mov	r22, r24
    8870:	66 95       	lsr	r22
    8872:	66 95       	lsr	r22
    8874:	66 95       	lsr	r22
    8876:	f6 01       	movw	r30, r12
    8878:	e6 0f       	add	r30, r22
    887a:	f1 1d       	adc	r31, r1
    887c:	68 2f       	mov	r22, r24
    887e:	67 70       	andi	r22, 0x07	; 7
    8880:	8d 01       	movw	r16, r26
    8882:	02 c0       	rjmp	.+4      	; 0x8888 <conv_brk+0x18a>
    8884:	00 0f       	add	r16, r16
    8886:	11 1f       	adc	r17, r17
    8888:	6a 95       	dec	r22
    888a:	e2 f7       	brpl	.-8      	; 0x8884 <conv_brk+0x186>
    888c:	b8 01       	movw	r22, r16
    888e:	70 81       	ld	r23, Z
    8890:	67 2b       	or	r22, r23
    8892:	60 83       	st	Z, r22
    8894:	68 2e       	mov	r6, r24
    8896:	9f cf       	rjmp	.-194    	; 0x87d6 <conv_brk+0xd8>
    8898:	a0 96       	adiw	r28, 0x20	; 32
    889a:	cd bf       	out	0x3d, r28	; 61
    889c:	de bf       	out	0x3e, r29	; 62
    889e:	df 91       	pop	r29
    88a0:	cf 91       	pop	r28
    88a2:	1f 91       	pop	r17
    88a4:	0f 91       	pop	r16
    88a6:	ff 90       	pop	r15
    88a8:	ef 90       	pop	r14
    88aa:	df 90       	pop	r13
    88ac:	cf 90       	pop	r12
    88ae:	bf 90       	pop	r11
    88b0:	af 90       	pop	r10
    88b2:	9f 90       	pop	r9
    88b4:	8f 90       	pop	r8
    88b6:	7f 90       	pop	r7
    88b8:	6f 90       	pop	r6
    88ba:	5f 90       	pop	r5
    88bc:	4f 90       	pop	r4
    88be:	08 95       	ret

000088c0 <conv_flt>:
    88c0:	2f 92       	push	r2
    88c2:	3f 92       	push	r3
    88c4:	4f 92       	push	r4
    88c6:	5f 92       	push	r5
    88c8:	6f 92       	push	r6
    88ca:	7f 92       	push	r7
    88cc:	9f 92       	push	r9
    88ce:	af 92       	push	r10
    88d0:	bf 92       	push	r11
    88d2:	cf 92       	push	r12
    88d4:	df 92       	push	r13
    88d6:	ef 92       	push	r14
    88d8:	ff 92       	push	r15
    88da:	0f 93       	push	r16
    88dc:	1f 93       	push	r17
    88de:	cf 93       	push	r28
    88e0:	df 93       	push	r29
    88e2:	6c 01       	movw	r12, r24
    88e4:	8b 01       	movw	r16, r22
    88e6:	1a 01       	movw	r2, r20
    88e8:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    88ec:	ec 01       	movw	r28, r24
    88ee:	99 27       	eor	r25, r25
    88f0:	8b 32       	cpi	r24, 0x2B	; 43
    88f2:	91 05       	cpc	r25, r1
    88f4:	29 f0       	breq	.+10     	; 0x8900 <conv_flt+0x40>
    88f6:	8d 97       	sbiw	r24, 0x2d	; 45
    88f8:	81 f4       	brne	.+32     	; 0x891a <conv_flt+0x5a>
    88fa:	30 e8       	ldi	r19, 0x80	; 128
    88fc:	93 2e       	mov	r9, r19
    88fe:	01 c0       	rjmp	.+2      	; 0x8902 <conv_flt+0x42>
    8900:	91 2c       	mov	r9, r1
    8902:	01 50       	subi	r16, 0x01	; 1
    8904:	11 09       	sbc	r17, r1
    8906:	11 f4       	brne	.+4      	; 0x890c <conv_flt+0x4c>
    8908:	80 e0       	ldi	r24, 0x00	; 0
    890a:	0c c1       	rjmp	.+536    	; 0x8b24 <conv_flt+0x264>
    890c:	c6 01       	movw	r24, r12
    890e:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8912:	ec 01       	movw	r28, r24
    8914:	97 ff       	sbrs	r25, 7
    8916:	02 c0       	rjmp	.+4      	; 0x891c <conv_flt+0x5c>
    8918:	f7 cf       	rjmp	.-18     	; 0x8908 <conv_flt+0x48>
    891a:	91 2c       	mov	r9, r1
    891c:	ce 01       	movw	r24, r28
    891e:	0e 94 83 4f 	call	0x9f06	; 0x9f06 <tolower>
    8922:	89 36       	cpi	r24, 0x69	; 105
    8924:	91 05       	cpc	r25, r1
    8926:	31 f0       	breq	.+12     	; 0x8934 <conv_flt+0x74>
    8928:	8e 36       	cpi	r24, 0x6E	; 110
    892a:	91 05       	cpc	r25, r1
    892c:	99 f5       	brne	.+102    	; 0x8994 <conv_flt+0xd4>
    892e:	cb ee       	ldi	r28, 0xEB	; 235
    8930:	df e0       	ldi	r29, 0x0F	; 15
    8932:	02 c0       	rjmp	.+4      	; 0x8938 <conv_flt+0x78>
    8934:	ce ee       	ldi	r28, 0xEE	; 238
    8936:	df e0       	ldi	r29, 0x0F	; 15
    8938:	21 96       	adiw	r28, 0x01	; 1
    893a:	fe 01       	movw	r30, r28
    893c:	31 97       	sbiw	r30, 0x01	; 1
    893e:	b4 90       	lpm	r11, Z
    8940:	bb 20       	and	r11, r11
    8942:	c9 f0       	breq	.+50     	; 0x8976 <conv_flt+0xb6>
    8944:	01 50       	subi	r16, 0x01	; 1
    8946:	11 09       	sbc	r17, r1
    8948:	91 f0       	breq	.+36     	; 0x896e <conv_flt+0xae>
    894a:	c6 01       	movw	r24, r12
    894c:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8950:	7c 01       	movw	r14, r24
    8952:	97 fd       	sbrc	r25, 7
    8954:	0c c0       	rjmp	.+24     	; 0x896e <conv_flt+0xae>
    8956:	0e 94 83 4f 	call	0x9f06	; 0x9f06 <tolower>
    895a:	99 27       	eor	r25, r25
    895c:	eb 2d       	mov	r30, r11
    895e:	f0 e0       	ldi	r31, 0x00	; 0
    8960:	8e 17       	cp	r24, r30
    8962:	9f 07       	cpc	r25, r31
    8964:	49 f3       	breq	.-46     	; 0x8938 <conv_flt+0x78>
    8966:	b6 01       	movw	r22, r12
    8968:	c7 01       	movw	r24, r14
    896a:	0e 94 34 51 	call	0xa268	; 0xa268 <ungetc>
    896e:	c1 5f       	subi	r28, 0xF1	; 241
    8970:	df 40       	sbci	r29, 0x0F	; 15
    8972:	51 f6       	brne	.-108    	; 0x8908 <conv_flt+0x48>
    8974:	03 c0       	rjmp	.+6      	; 0x897c <conv_flt+0xbc>
    8976:	ce 5e       	subi	r28, 0xEE	; 238
    8978:	df 40       	sbci	r29, 0x0F	; 15
    897a:	29 f0       	breq	.+10     	; 0x8986 <conv_flt+0xc6>
    897c:	80 e0       	ldi	r24, 0x00	; 0
    897e:	90 e0       	ldi	r25, 0x00	; 0
    8980:	a0 e8       	ldi	r26, 0x80	; 128
    8982:	bf e7       	ldi	r27, 0x7F	; 127
    8984:	04 c0       	rjmp	.+8      	; 0x898e <conv_flt+0xce>
    8986:	80 e0       	ldi	r24, 0x00	; 0
    8988:	90 e0       	ldi	r25, 0x00	; 0
    898a:	a0 ec       	ldi	r26, 0xC0	; 192
    898c:	bf e7       	ldi	r27, 0x7F	; 127
    898e:	bc 01       	movw	r22, r24
    8990:	cd 01       	movw	r24, r26
    8992:	b8 c0       	rjmp	.+368    	; 0x8b04 <conv_flt+0x244>
    8994:	41 2c       	mov	r4, r1
    8996:	51 2c       	mov	r5, r1
    8998:	32 01       	movw	r6, r4
    899a:	e1 2c       	mov	r14, r1
    899c:	f1 2c       	mov	r15, r1
    899e:	2c 2f       	mov	r18, r28
    89a0:	20 53       	subi	r18, 0x30	; 48
    89a2:	2a 30       	cpi	r18, 0x0A	; 10
    89a4:	10 f5       	brcc	.+68     	; 0x89ea <conv_flt+0x12a>
    89a6:	e9 2d       	mov	r30, r9
    89a8:	e2 60       	ori	r30, 0x02	; 2
    89aa:	be 2e       	mov	r11, r30
    89ac:	89 2d       	mov	r24, r9
    89ae:	88 70       	andi	r24, 0x08	; 8
    89b0:	92 fe       	sbrs	r9, 2
    89b2:	06 c0       	rjmp	.+12     	; 0x89c0 <conv_flt+0x100>
    89b4:	81 11       	cpse	r24, r1
    89b6:	20 c0       	rjmp	.+64     	; 0x89f8 <conv_flt+0x138>
    89b8:	ff ef       	ldi	r31, 0xFF	; 255
    89ba:	ef 1a       	sub	r14, r31
    89bc:	ff 0a       	sbc	r15, r31
    89be:	1c c0       	rjmp	.+56     	; 0x89f8 <conv_flt+0x138>
    89c0:	88 23       	and	r24, r24
    89c2:	19 f0       	breq	.+6      	; 0x89ca <conv_flt+0x10a>
    89c4:	81 e0       	ldi	r24, 0x01	; 1
    89c6:	e8 1a       	sub	r14, r24
    89c8:	f1 08       	sbc	r15, r1
    89ca:	40 e2       	ldi	r20, 0x20	; 32
    89cc:	c3 01       	movw	r24, r6
    89ce:	b2 01       	movw	r22, r4
    89d0:	0e 94 a7 42 	call	0x854e	; 0x854e <mulacc>
    89d4:	2b 01       	movw	r4, r22
    89d6:	3c 01       	movw	r6, r24
    89d8:	68 39       	cpi	r22, 0x98	; 152
    89da:	79 49       	sbci	r23, 0x99	; 153
    89dc:	89 49       	sbci	r24, 0x99	; 153
    89de:	99 41       	sbci	r25, 0x19	; 25
    89e0:	58 f0       	brcs	.+22     	; 0x89f8 <conv_flt+0x138>
    89e2:	f9 2d       	mov	r31, r9
    89e4:	f6 60       	ori	r31, 0x06	; 6
    89e6:	bf 2e       	mov	r11, r31
    89e8:	07 c0       	rjmp	.+14     	; 0x89f8 <conv_flt+0x138>
    89ea:	2e 3f       	cpi	r18, 0xFE	; 254
    89ec:	89 f4       	brne	.+34     	; 0x8a10 <conv_flt+0x150>
    89ee:	93 fc       	sbrc	r9, 3
    89f0:	0f c0       	rjmp	.+30     	; 0x8a10 <conv_flt+0x150>
    89f2:	29 2d       	mov	r18, r9
    89f4:	28 60       	ori	r18, 0x08	; 8
    89f6:	b2 2e       	mov	r11, r18
    89f8:	01 50       	subi	r16, 0x01	; 1
    89fa:	11 09       	sbc	r17, r1
    89fc:	41 f0       	breq	.+16     	; 0x8a0e <conv_flt+0x14e>
    89fe:	c6 01       	movw	r24, r12
    8a00:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8a04:	ec 01       	movw	r28, r24
    8a06:	9b 2c       	mov	r9, r11
    8a08:	97 ff       	sbrs	r25, 7
    8a0a:	c9 cf       	rjmp	.-110    	; 0x899e <conv_flt+0xde>
    8a0c:	01 c0       	rjmp	.+2      	; 0x8a10 <conv_flt+0x150>
    8a0e:	9b 2c       	mov	r9, r11
    8a10:	91 fe       	sbrs	r9, 1
    8a12:	7a cf       	rjmp	.-268    	; 0x8908 <conv_flt+0x48>
    8a14:	ce 01       	movw	r24, r28
    8a16:	8f 7d       	andi	r24, 0xDF	; 223
    8a18:	99 27       	eor	r25, r25
    8a1a:	85 34       	cpi	r24, 0x45	; 69
    8a1c:	91 05       	cpc	r25, r1
    8a1e:	09 f0       	breq	.+2      	; 0x8a22 <conv_flt+0x162>
    8a20:	42 c0       	rjmp	.+132    	; 0x8aa6 <conv_flt+0x1e6>
    8a22:	58 01       	movw	r10, r16
    8a24:	81 e0       	ldi	r24, 0x01	; 1
    8a26:	a8 1a       	sub	r10, r24
    8a28:	b1 08       	sbc	r11, r1
    8a2a:	09 f4       	brne	.+2      	; 0x8a2e <conv_flt+0x16e>
    8a2c:	6d cf       	rjmp	.-294    	; 0x8908 <conv_flt+0x48>
    8a2e:	c6 01       	movw	r24, r12
    8a30:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8a34:	ec 01       	movw	r28, r24
    8a36:	97 fd       	sbrc	r25, 7
    8a38:	67 cf       	rjmp	.-306    	; 0x8908 <conv_flt+0x48>
    8a3a:	99 27       	eor	r25, r25
    8a3c:	8b 32       	cpi	r24, 0x2B	; 43
    8a3e:	91 05       	cpc	r25, r1
    8a40:	29 f0       	breq	.+10     	; 0x8a4c <conv_flt+0x18c>
    8a42:	8d 97       	sbiw	r24, 0x2d	; 45
    8a44:	69 f4       	brne	.+26     	; 0x8a60 <conv_flt+0x1a0>
    8a46:	e9 2d       	mov	r30, r9
    8a48:	e0 61       	ori	r30, 0x10	; 16
    8a4a:	9e 2e       	mov	r9, r30
    8a4c:	58 01       	movw	r10, r16
    8a4e:	f2 e0       	ldi	r31, 0x02	; 2
    8a50:	af 1a       	sub	r10, r31
    8a52:	b1 08       	sbc	r11, r1
    8a54:	09 f4       	brne	.+2      	; 0x8a58 <conv_flt+0x198>
    8a56:	58 cf       	rjmp	.-336    	; 0x8908 <conv_flt+0x48>
    8a58:	c6 01       	movw	r24, r12
    8a5a:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8a5e:	ec 01       	movw	r28, r24
    8a60:	ce 01       	movw	r24, r28
    8a62:	c0 97       	sbiw	r24, 0x30	; 48
    8a64:	0a 97       	sbiw	r24, 0x0a	; 10
    8a66:	08 f0       	brcs	.+2      	; 0x8a6a <conv_flt+0x1aa>
    8a68:	4f cf       	rjmp	.-354    	; 0x8908 <conv_flt+0x48>
    8a6a:	85 01       	movw	r16, r10
    8a6c:	a1 2c       	mov	r10, r1
    8a6e:	b1 2c       	mov	r11, r1
    8a70:	b5 01       	movw	r22, r10
    8a72:	bb 0c       	add	r11, r11
    8a74:	88 0b       	sbc	r24, r24
    8a76:	99 0b       	sbc	r25, r25
    8a78:	2c 2f       	mov	r18, r28
    8a7a:	20 53       	subi	r18, 0x30	; 48
    8a7c:	40 e2       	ldi	r20, 0x20	; 32
    8a7e:	0e 94 a7 42 	call	0x854e	; 0x854e <mulacc>
    8a82:	5b 01       	movw	r10, r22
    8a84:	01 50       	subi	r16, 0x01	; 1
    8a86:	11 09       	sbc	r17, r1
    8a88:	39 f0       	breq	.+14     	; 0x8a98 <conv_flt+0x1d8>
    8a8a:	c6 01       	movw	r24, r12
    8a8c:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8a90:	ec 01       	movw	r28, r24
    8a92:	c0 97       	sbiw	r24, 0x30	; 48
    8a94:	0a 97       	sbiw	r24, 0x0a	; 10
    8a96:	60 f3       	brcs	.-40     	; 0x8a70 <conv_flt+0x1b0>
    8a98:	94 fe       	sbrs	r9, 4
    8a9a:	03 c0       	rjmp	.+6      	; 0x8aa2 <conv_flt+0x1e2>
    8a9c:	b1 94       	neg	r11
    8a9e:	a1 94       	neg	r10
    8aa0:	b1 08       	sbc	r11, r1
    8aa2:	ea 0c       	add	r14, r10
    8aa4:	fb 1c       	adc	r15, r11
    8aa6:	01 2b       	or	r16, r17
    8aa8:	31 f0       	breq	.+12     	; 0x8ab6 <conv_flt+0x1f6>
    8aaa:	d7 fd       	sbrc	r29, 7
    8aac:	04 c0       	rjmp	.+8      	; 0x8ab6 <conv_flt+0x1f6>
    8aae:	b6 01       	movw	r22, r12
    8ab0:	ce 01       	movw	r24, r28
    8ab2:	0e 94 34 51 	call	0xa268	; 0xa268 <ungetc>
    8ab6:	c3 01       	movw	r24, r6
    8ab8:	b2 01       	movw	r22, r4
    8aba:	0e 94 b3 48 	call	0x9166	; 0x9166 <__floatunsisf>
    8abe:	f7 fe       	sbrs	r15, 7
    8ac0:	06 c0       	rjmp	.+12     	; 0x8ace <conv_flt+0x20e>
    8ac2:	f1 94       	neg	r15
    8ac4:	e1 94       	neg	r14
    8ac6:	f1 08       	sbc	r15, r1
    8ac8:	ca e0       	ldi	r28, 0x0A	; 10
    8aca:	d0 e1       	ldi	r29, 0x10	; 16
    8acc:	02 c0       	rjmp	.+4      	; 0x8ad2 <conv_flt+0x212>
    8ace:	c2 e2       	ldi	r28, 0x22	; 34
    8ad0:	d0 e1       	ldi	r29, 0x10	; 16
    8ad2:	6e 01       	movw	r12, r28
    8ad4:	28 e1       	ldi	r18, 0x18	; 24
    8ad6:	c2 1a       	sub	r12, r18
    8ad8:	d1 08       	sbc	r13, r1
    8ada:	00 e2       	ldi	r16, 0x20	; 32
    8adc:	10 e0       	ldi	r17, 0x00	; 0
    8ade:	e0 16       	cp	r14, r16
    8ae0:	f1 06       	cpc	r15, r17
    8ae2:	50 f0       	brcs	.+20     	; 0x8af8 <conv_flt+0x238>
    8ae4:	fe 01       	movw	r30, r28
    8ae6:	25 91       	lpm	r18, Z+
    8ae8:	35 91       	lpm	r19, Z+
    8aea:	45 91       	lpm	r20, Z+
    8aec:	54 91       	lpm	r21, Z
    8aee:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    8af2:	e0 1a       	sub	r14, r16
    8af4:	f1 0a       	sbc	r15, r17
    8af6:	f3 cf       	rjmp	.-26     	; 0x8ade <conv_flt+0x21e>
    8af8:	24 97       	sbiw	r28, 0x04	; 4
    8afa:	16 95       	lsr	r17
    8afc:	07 95       	ror	r16
    8afe:	cc 16       	cp	r12, r28
    8b00:	dd 06       	cpc	r13, r29
    8b02:	69 f7       	brne	.-38     	; 0x8ade <conv_flt+0x21e>
    8b04:	97 fe       	sbrs	r9, 7
    8b06:	05 c0       	rjmp	.+10     	; 0x8b12 <conv_flt+0x252>
    8b08:	dc 01       	movw	r26, r24
    8b0a:	cb 01       	movw	r24, r22
    8b0c:	b0 58       	subi	r27, 0x80	; 128
    8b0e:	bc 01       	movw	r22, r24
    8b10:	cd 01       	movw	r24, r26
    8b12:	21 14       	cp	r2, r1
    8b14:	31 04       	cpc	r3, r1
    8b16:	29 f0       	breq	.+10     	; 0x8b22 <conv_flt+0x262>
    8b18:	f1 01       	movw	r30, r2
    8b1a:	60 83       	st	Z, r22
    8b1c:	71 83       	std	Z+1, r23	; 0x01
    8b1e:	82 83       	std	Z+2, r24	; 0x02
    8b20:	93 83       	std	Z+3, r25	; 0x03
    8b22:	81 e0       	ldi	r24, 0x01	; 1
    8b24:	df 91       	pop	r29
    8b26:	cf 91       	pop	r28
    8b28:	1f 91       	pop	r17
    8b2a:	0f 91       	pop	r16
    8b2c:	ff 90       	pop	r15
    8b2e:	ef 90       	pop	r14
    8b30:	df 90       	pop	r13
    8b32:	cf 90       	pop	r12
    8b34:	bf 90       	pop	r11
    8b36:	af 90       	pop	r10
    8b38:	9f 90       	pop	r9
    8b3a:	7f 90       	pop	r7
    8b3c:	6f 90       	pop	r6
    8b3e:	5f 90       	pop	r5
    8b40:	4f 90       	pop	r4
    8b42:	3f 90       	pop	r3
    8b44:	2f 90       	pop	r2
    8b46:	08 95       	ret

00008b48 <vfscanf>:
    8b48:	6f 92       	push	r6
    8b4a:	7f 92       	push	r7
    8b4c:	8f 92       	push	r8
    8b4e:	9f 92       	push	r9
    8b50:	af 92       	push	r10
    8b52:	bf 92       	push	r11
    8b54:	cf 92       	push	r12
    8b56:	df 92       	push	r13
    8b58:	ef 92       	push	r14
    8b5a:	ff 92       	push	r15
    8b5c:	0f 93       	push	r16
    8b5e:	1f 93       	push	r17
    8b60:	cf 93       	push	r28
    8b62:	df 93       	push	r29
    8b64:	5c 01       	movw	r10, r24
    8b66:	eb 01       	movw	r28, r22
    8b68:	4a 01       	movw	r8, r20
    8b6a:	fc 01       	movw	r30, r24
    8b6c:	16 82       	std	Z+6, r1	; 0x06
    8b6e:	17 82       	std	Z+7, r1	; 0x07
    8b70:	61 2c       	mov	r6, r1
    8b72:	f5 01       	movw	r30, r10
    8b74:	03 81       	ldd	r16, Z+3	; 0x03
    8b76:	fe 01       	movw	r30, r28
    8b78:	03 fd       	sbrc	r16, 3
    8b7a:	85 91       	lpm	r24, Z+
    8b7c:	03 ff       	sbrs	r16, 3
    8b7e:	81 91       	ld	r24, Z+
    8b80:	18 2f       	mov	r17, r24
    8b82:	ef 01       	movw	r28, r30
    8b84:	88 23       	and	r24, r24
    8b86:	09 f4       	brne	.+2      	; 0x8b8a <vfscanf+0x42>
    8b88:	0f c1       	rjmp	.+542    	; 0x8da8 <vfscanf+0x260>
    8b8a:	90 e0       	ldi	r25, 0x00	; 0
    8b8c:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <isspace>
    8b90:	89 2b       	or	r24, r25
    8b92:	21 f0       	breq	.+8      	; 0x8b9c <vfscanf+0x54>
    8b94:	c5 01       	movw	r24, r10
    8b96:	0e 94 ce 42 	call	0x859c	; 0x859c <skip_spaces>
    8b9a:	eb cf       	rjmp	.-42     	; 0x8b72 <vfscanf+0x2a>
    8b9c:	15 32       	cpi	r17, 0x25	; 37
    8b9e:	41 f4       	brne	.+16     	; 0x8bb0 <vfscanf+0x68>
    8ba0:	fe 01       	movw	r30, r28
    8ba2:	03 fd       	sbrc	r16, 3
    8ba4:	15 91       	lpm	r17, Z+
    8ba6:	03 ff       	sbrs	r16, 3
    8ba8:	11 91       	ld	r17, Z+
    8baa:	ef 01       	movw	r28, r30
    8bac:	15 32       	cpi	r17, 0x25	; 37
    8bae:	81 f4       	brne	.+32     	; 0x8bd0 <vfscanf+0x88>
    8bb0:	c5 01       	movw	r24, r10
    8bb2:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8bb6:	97 fd       	sbrc	r25, 7
    8bb8:	f5 c0       	rjmp	.+490    	; 0x8da4 <vfscanf+0x25c>
    8bba:	41 2f       	mov	r20, r17
    8bbc:	50 e0       	ldi	r21, 0x00	; 0
    8bbe:	9c 01       	movw	r18, r24
    8bc0:	33 27       	eor	r19, r19
    8bc2:	24 17       	cp	r18, r20
    8bc4:	35 07       	cpc	r19, r21
    8bc6:	a9 f2       	breq	.-86     	; 0x8b72 <vfscanf+0x2a>
    8bc8:	b5 01       	movw	r22, r10
    8bca:	0e 94 34 51 	call	0xa268	; 0xa268 <ungetc>
    8bce:	ec c0       	rjmp	.+472    	; 0x8da8 <vfscanf+0x260>
    8bd0:	1a 32       	cpi	r17, 0x2A	; 42
    8bd2:	41 f4       	brne	.+16     	; 0x8be4 <vfscanf+0x9c>
    8bd4:	03 fd       	sbrc	r16, 3
    8bd6:	15 91       	lpm	r17, Z+
    8bd8:	03 ff       	sbrs	r16, 3
    8bda:	11 91       	ld	r17, Z+
    8bdc:	ef 01       	movw	r28, r30
    8bde:	77 24       	eor	r7, r7
    8be0:	73 94       	inc	r7
    8be2:	01 c0       	rjmp	.+2      	; 0x8be6 <vfscanf+0x9e>
    8be4:	71 2c       	mov	r7, r1
    8be6:	e1 2c       	mov	r14, r1
    8be8:	f1 2c       	mov	r15, r1
    8bea:	20 ed       	ldi	r18, 0xD0	; 208
    8bec:	21 0f       	add	r18, r17
    8bee:	2a 30       	cpi	r18, 0x0A	; 10
    8bf0:	88 f4       	brcc	.+34     	; 0x8c14 <vfscanf+0xcc>
    8bf2:	f7 2d       	mov	r31, r7
    8bf4:	f2 60       	ori	r31, 0x02	; 2
    8bf6:	7f 2e       	mov	r7, r31
    8bf8:	b7 01       	movw	r22, r14
    8bfa:	80 e0       	ldi	r24, 0x00	; 0
    8bfc:	90 e0       	ldi	r25, 0x00	; 0
    8bfe:	40 e2       	ldi	r20, 0x20	; 32
    8c00:	0e 94 a7 42 	call	0x854e	; 0x854e <mulacc>
    8c04:	7b 01       	movw	r14, r22
    8c06:	fe 01       	movw	r30, r28
    8c08:	03 fd       	sbrc	r16, 3
    8c0a:	15 91       	lpm	r17, Z+
    8c0c:	03 ff       	sbrs	r16, 3
    8c0e:	11 91       	ld	r17, Z+
    8c10:	ef 01       	movw	r28, r30
    8c12:	eb cf       	rjmp	.-42     	; 0x8bea <vfscanf+0xa2>
    8c14:	71 fe       	sbrs	r7, 1
    8c16:	04 c0       	rjmp	.+8      	; 0x8c20 <vfscanf+0xd8>
    8c18:	e1 14       	cp	r14, r1
    8c1a:	f1 04       	cpc	r15, r1
    8c1c:	21 f4       	brne	.+8      	; 0x8c26 <vfscanf+0xde>
    8c1e:	c4 c0       	rjmp	.+392    	; 0x8da8 <vfscanf+0x260>
    8c20:	ee 24       	eor	r14, r14
    8c22:	ea 94       	dec	r14
    8c24:	fe 2c       	mov	r15, r14
    8c26:	18 36       	cpi	r17, 0x68	; 104
    8c28:	19 f0       	breq	.+6      	; 0x8c30 <vfscanf+0xe8>
    8c2a:	1c 36       	cpi	r17, 0x6C	; 108
    8c2c:	61 f0       	breq	.+24     	; 0x8c46 <vfscanf+0xfe>
    8c2e:	14 c0       	rjmp	.+40     	; 0x8c58 <vfscanf+0x110>
    8c30:	fe 01       	movw	r30, r28
    8c32:	03 fd       	sbrc	r16, 3
    8c34:	15 91       	lpm	r17, Z+
    8c36:	03 ff       	sbrs	r16, 3
    8c38:	11 91       	ld	r17, Z+
    8c3a:	ef 01       	movw	r28, r30
    8c3c:	18 36       	cpi	r17, 0x68	; 104
    8c3e:	61 f4       	brne	.+24     	; 0x8c58 <vfscanf+0x110>
    8c40:	87 2d       	mov	r24, r7
    8c42:	88 60       	ori	r24, 0x08	; 8
    8c44:	78 2e       	mov	r7, r24
    8c46:	97 2d       	mov	r25, r7
    8c48:	94 60       	ori	r25, 0x04	; 4
    8c4a:	79 2e       	mov	r7, r25
    8c4c:	fe 01       	movw	r30, r28
    8c4e:	03 fd       	sbrc	r16, 3
    8c50:	15 91       	lpm	r17, Z+
    8c52:	03 ff       	sbrs	r16, 3
    8c54:	11 91       	ld	r17, Z+
    8c56:	ef 01       	movw	r28, r30
    8c58:	11 23       	and	r17, r17
    8c5a:	09 f4       	brne	.+2      	; 0x8c5e <vfscanf+0x116>
    8c5c:	a5 c0       	rjmp	.+330    	; 0x8da8 <vfscanf+0x260>
    8c5e:	61 2f       	mov	r22, r17
    8c60:	70 e0       	ldi	r23, 0x00	; 0
    8c62:	89 ed       	ldi	r24, 0xD9	; 217
    8c64:	9f e0       	ldi	r25, 0x0F	; 15
    8c66:	0e 94 8b 4f 	call	0x9f16	; 0x9f16 <strchr_P>
    8c6a:	89 2b       	or	r24, r25
    8c6c:	09 f4       	brne	.+2      	; 0x8c70 <vfscanf+0x128>
    8c6e:	9c c0       	rjmp	.+312    	; 0x8da8 <vfscanf+0x260>
    8c70:	70 fc       	sbrc	r7, 0
    8c72:	07 c0       	rjmp	.+14     	; 0x8c82 <vfscanf+0x13a>
    8c74:	f4 01       	movw	r30, r8
    8c76:	c0 80       	ld	r12, Z
    8c78:	d1 80       	ldd	r13, Z+1	; 0x01
    8c7a:	c4 01       	movw	r24, r8
    8c7c:	02 96       	adiw	r24, 0x02	; 2
    8c7e:	4c 01       	movw	r8, r24
    8c80:	02 c0       	rjmp	.+4      	; 0x8c86 <vfscanf+0x13e>
    8c82:	c1 2c       	mov	r12, r1
    8c84:	d1 2c       	mov	r13, r1
    8c86:	1e 36       	cpi	r17, 0x6E	; 110
    8c88:	51 f4       	brne	.+20     	; 0x8c9e <vfscanf+0x156>
    8c8a:	f5 01       	movw	r30, r10
    8c8c:	46 81       	ldd	r20, Z+6	; 0x06
    8c8e:	57 81       	ldd	r21, Z+7	; 0x07
    8c90:	60 e0       	ldi	r22, 0x00	; 0
    8c92:	70 e0       	ldi	r23, 0x00	; 0
    8c94:	27 2d       	mov	r18, r7
    8c96:	c6 01       	movw	r24, r12
    8c98:	0e 94 9b 42 	call	0x8536	; 0x8536 <putval>
    8c9c:	6a cf       	rjmp	.-300    	; 0x8b72 <vfscanf+0x2a>
    8c9e:	13 36       	cpi	r17, 0x63	; 99
    8ca0:	b9 f4       	brne	.+46     	; 0x8cd0 <vfscanf+0x188>
    8ca2:	71 fc       	sbrc	r7, 1
    8ca4:	03 c0       	rjmp	.+6      	; 0x8cac <vfscanf+0x164>
    8ca6:	ee 24       	eor	r14, r14
    8ca8:	e3 94       	inc	r14
    8caa:	f1 2c       	mov	r15, r1
    8cac:	c5 01       	movw	r24, r10
    8cae:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8cb2:	97 fd       	sbrc	r25, 7
    8cb4:	77 c0       	rjmp	.+238    	; 0x8da4 <vfscanf+0x25c>
    8cb6:	c1 14       	cp	r12, r1
    8cb8:	d1 04       	cpc	r13, r1
    8cba:	29 f0       	breq	.+10     	; 0x8cc6 <vfscanf+0x17e>
    8cbc:	f6 01       	movw	r30, r12
    8cbe:	80 83       	st	Z, r24
    8cc0:	c6 01       	movw	r24, r12
    8cc2:	01 96       	adiw	r24, 0x01	; 1
    8cc4:	6c 01       	movw	r12, r24
    8cc6:	91 e0       	ldi	r25, 0x01	; 1
    8cc8:	e9 1a       	sub	r14, r25
    8cca:	f1 08       	sbc	r15, r1
    8ccc:	79 f7       	brne	.-34     	; 0x8cac <vfscanf+0x164>
    8cce:	66 c0       	rjmp	.+204    	; 0x8d9c <vfscanf+0x254>
    8cd0:	1b 35       	cpi	r17, 0x5B	; 91
    8cd2:	59 f4       	brne	.+22     	; 0x8cea <vfscanf+0x1a2>
    8cd4:	9e 01       	movw	r18, r28
    8cd6:	a6 01       	movw	r20, r12
    8cd8:	b7 01       	movw	r22, r14
    8cda:	c5 01       	movw	r24, r10
    8cdc:	0e 94 7f 43 	call	0x86fe	; 0x86fe <conv_brk>
    8ce0:	ec 01       	movw	r28, r24
    8ce2:	89 2b       	or	r24, r25
    8ce4:	09 f0       	breq	.+2      	; 0x8ce8 <vfscanf+0x1a0>
    8ce6:	5a c0       	rjmp	.+180    	; 0x8d9c <vfscanf+0x254>
    8ce8:	54 c0       	rjmp	.+168    	; 0x8d92 <vfscanf+0x24a>
    8cea:	c5 01       	movw	r24, r10
    8cec:	0e 94 ce 42 	call	0x859c	; 0x859c <skip_spaces>
    8cf0:	97 fd       	sbrc	r25, 7
    8cf2:	58 c0       	rjmp	.+176    	; 0x8da4 <vfscanf+0x25c>
    8cf4:	1f 36       	cpi	r17, 0x6F	; 111
    8cf6:	e1 f1       	breq	.+120    	; 0x8d70 <vfscanf+0x228>
    8cf8:	40 f4       	brcc	.+16     	; 0x8d0a <vfscanf+0x1c2>
    8cfa:	14 36       	cpi	r17, 0x64	; 100
    8cfc:	a9 f1       	breq	.+106    	; 0x8d68 <vfscanf+0x220>
    8cfe:	19 36       	cpi	r17, 0x69	; 105
    8d00:	d1 f1       	breq	.+116    	; 0x8d76 <vfscanf+0x22e>
    8d02:	18 35       	cpi	r17, 0x58	; 88
    8d04:	09 f0       	breq	.+2      	; 0x8d08 <vfscanf+0x1c0>
    8d06:	3e c0       	rjmp	.+124    	; 0x8d84 <vfscanf+0x23c>
    8d08:	2b c0       	rjmp	.+86     	; 0x8d60 <vfscanf+0x218>
    8d0a:	13 37       	cpi	r17, 0x73	; 115
    8d0c:	a9 f0       	breq	.+42     	; 0x8d38 <vfscanf+0x1f0>
    8d0e:	18 f4       	brcc	.+6      	; 0x8d16 <vfscanf+0x1ce>
    8d10:	10 37       	cpi	r17, 0x70	; 112
    8d12:	31 f1       	breq	.+76     	; 0x8d60 <vfscanf+0x218>
    8d14:	37 c0       	rjmp	.+110    	; 0x8d84 <vfscanf+0x23c>
    8d16:	15 37       	cpi	r17, 0x75	; 117
    8d18:	39 f1       	breq	.+78     	; 0x8d68 <vfscanf+0x220>
    8d1a:	18 37       	cpi	r17, 0x78	; 120
    8d1c:	09 f1       	breq	.+66     	; 0x8d60 <vfscanf+0x218>
    8d1e:	32 c0       	rjmp	.+100    	; 0x8d84 <vfscanf+0x23c>
    8d20:	c1 14       	cp	r12, r1
    8d22:	d1 04       	cpc	r13, r1
    8d24:	29 f0       	breq	.+10     	; 0x8d30 <vfscanf+0x1e8>
    8d26:	f6 01       	movw	r30, r12
    8d28:	00 83       	st	Z, r16
    8d2a:	c6 01       	movw	r24, r12
    8d2c:	01 96       	adiw	r24, 0x01	; 1
    8d2e:	6c 01       	movw	r12, r24
    8d30:	91 e0       	ldi	r25, 0x01	; 1
    8d32:	e9 1a       	sub	r14, r25
    8d34:	f1 08       	sbc	r15, r1
    8d36:	71 f0       	breq	.+28     	; 0x8d54 <vfscanf+0x20c>
    8d38:	c5 01       	movw	r24, r10
    8d3a:	0e 94 1f 50 	call	0xa03e	; 0xa03e <fgetc>
    8d3e:	8c 01       	movw	r16, r24
    8d40:	97 fd       	sbrc	r25, 7
    8d42:	08 c0       	rjmp	.+16     	; 0x8d54 <vfscanf+0x20c>
    8d44:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <isspace>
    8d48:	89 2b       	or	r24, r25
    8d4a:	51 f3       	breq	.-44     	; 0x8d20 <vfscanf+0x1d8>
    8d4c:	b5 01       	movw	r22, r10
    8d4e:	c8 01       	movw	r24, r16
    8d50:	0e 94 34 51 	call	0xa268	; 0xa268 <ungetc>
    8d54:	c1 14       	cp	r12, r1
    8d56:	d1 04       	cpc	r13, r1
    8d58:	09 f1       	breq	.+66     	; 0x8d9c <vfscanf+0x254>
    8d5a:	f6 01       	movw	r30, r12
    8d5c:	10 82       	st	Z, r1
    8d5e:	1e c0       	rjmp	.+60     	; 0x8d9c <vfscanf+0x254>
    8d60:	f7 2d       	mov	r31, r7
    8d62:	f0 64       	ori	r31, 0x40	; 64
    8d64:	7f 2e       	mov	r7, r31
    8d66:	07 c0       	rjmp	.+14     	; 0x8d76 <vfscanf+0x22e>
    8d68:	87 2d       	mov	r24, r7
    8d6a:	80 62       	ori	r24, 0x20	; 32
    8d6c:	78 2e       	mov	r7, r24
    8d6e:	03 c0       	rjmp	.+6      	; 0x8d76 <vfscanf+0x22e>
    8d70:	97 2d       	mov	r25, r7
    8d72:	90 61       	ori	r25, 0x10	; 16
    8d74:	79 2e       	mov	r7, r25
    8d76:	27 2d       	mov	r18, r7
    8d78:	a6 01       	movw	r20, r12
    8d7a:	b7 01       	movw	r22, r14
    8d7c:	c5 01       	movw	r24, r10
    8d7e:	0e 94 e7 42 	call	0x85ce	; 0x85ce <conv_int>
    8d82:	05 c0       	rjmp	.+10     	; 0x8d8e <vfscanf+0x246>
    8d84:	a6 01       	movw	r20, r12
    8d86:	b7 01       	movw	r22, r14
    8d88:	c5 01       	movw	r24, r10
    8d8a:	0e 94 60 44 	call	0x88c0	; 0x88c0 <conv_flt>
    8d8e:	81 11       	cpse	r24, r1
    8d90:	05 c0       	rjmp	.+10     	; 0x8d9c <vfscanf+0x254>
    8d92:	f5 01       	movw	r30, r10
    8d94:	83 81       	ldd	r24, Z+3	; 0x03
    8d96:	80 73       	andi	r24, 0x30	; 48
    8d98:	29 f4       	brne	.+10     	; 0x8da4 <vfscanf+0x25c>
    8d9a:	06 c0       	rjmp	.+12     	; 0x8da8 <vfscanf+0x260>
    8d9c:	70 fc       	sbrc	r7, 0
    8d9e:	e9 ce       	rjmp	.-558    	; 0x8b72 <vfscanf+0x2a>
    8da0:	63 94       	inc	r6
    8da2:	e7 ce       	rjmp	.-562    	; 0x8b72 <vfscanf+0x2a>
    8da4:	66 20       	and	r6, r6
    8da6:	19 f0       	breq	.+6      	; 0x8dae <vfscanf+0x266>
    8da8:	86 2d       	mov	r24, r6
    8daa:	90 e0       	ldi	r25, 0x00	; 0
    8dac:	02 c0       	rjmp	.+4      	; 0x8db2 <vfscanf+0x26a>
    8dae:	8f ef       	ldi	r24, 0xFF	; 255
    8db0:	9f ef       	ldi	r25, 0xFF	; 255
    8db2:	df 91       	pop	r29
    8db4:	cf 91       	pop	r28
    8db6:	1f 91       	pop	r17
    8db8:	0f 91       	pop	r16
    8dba:	ff 90       	pop	r15
    8dbc:	ef 90       	pop	r14
    8dbe:	df 90       	pop	r13
    8dc0:	cf 90       	pop	r12
    8dc2:	bf 90       	pop	r11
    8dc4:	af 90       	pop	r10
    8dc6:	9f 90       	pop	r9
    8dc8:	8f 90       	pop	r8
    8dca:	7f 90       	pop	r7
    8dcc:	6f 90       	pop	r6
    8dce:	08 95       	ret

00008dd0 <__subsf3>:
    8dd0:	50 58       	subi	r21, 0x80	; 128

00008dd2 <__addsf3>:
    8dd2:	bb 27       	eor	r27, r27
    8dd4:	aa 27       	eor	r26, r26
    8dd6:	0e 94 00 47 	call	0x8e00	; 0x8e00 <__addsf3x>
    8dda:	0c 94 df 49 	jmp	0x93be	; 0x93be <__fp_round>
    8dde:	0e 94 a6 49 	call	0x934c	; 0x934c <__fp_pscA>
    8de2:	38 f0       	brcs	.+14     	; 0x8df2 <__addsf3+0x20>
    8de4:	0e 94 ad 49 	call	0x935a	; 0x935a <__fp_pscB>
    8de8:	20 f0       	brcs	.+8      	; 0x8df2 <__addsf3+0x20>
    8dea:	39 f4       	brne	.+14     	; 0x8dfa <__addsf3+0x28>
    8dec:	9f 3f       	cpi	r25, 0xFF	; 255
    8dee:	19 f4       	brne	.+6      	; 0x8df6 <__addsf3+0x24>
    8df0:	26 f4       	brtc	.+8      	; 0x8dfa <__addsf3+0x28>
    8df2:	0c 94 7c 49 	jmp	0x92f8	; 0x92f8 <__fp_nan>
    8df6:	0e f4       	brtc	.+2      	; 0x8dfa <__addsf3+0x28>
    8df8:	e0 95       	com	r30
    8dfa:	e7 fb       	bst	r30, 7
    8dfc:	0c 94 68 49 	jmp	0x92d0	; 0x92d0 <__fp_inf>

00008e00 <__addsf3x>:
    8e00:	e9 2f       	mov	r30, r25
    8e02:	0e 94 04 4a 	call	0x9408	; 0x9408 <__fp_split3>
    8e06:	58 f3       	brcs	.-42     	; 0x8dde <__addsf3+0xc>
    8e08:	ba 17       	cp	r27, r26
    8e0a:	62 07       	cpc	r22, r18
    8e0c:	73 07       	cpc	r23, r19
    8e0e:	84 07       	cpc	r24, r20
    8e10:	95 07       	cpc	r25, r21
    8e12:	20 f0       	brcs	.+8      	; 0x8e1c <__addsf3x+0x1c>
    8e14:	79 f4       	brne	.+30     	; 0x8e34 <__addsf3x+0x34>
    8e16:	a6 f5       	brtc	.+104    	; 0x8e80 <__addsf3x+0x80>
    8e18:	0c 94 26 4a 	jmp	0x944c	; 0x944c <__fp_zero>
    8e1c:	0e f4       	brtc	.+2      	; 0x8e20 <__addsf3x+0x20>
    8e1e:	e0 95       	com	r30
    8e20:	0b 2e       	mov	r0, r27
    8e22:	ba 2f       	mov	r27, r26
    8e24:	a0 2d       	mov	r26, r0
    8e26:	0b 01       	movw	r0, r22
    8e28:	b9 01       	movw	r22, r18
    8e2a:	90 01       	movw	r18, r0
    8e2c:	0c 01       	movw	r0, r24
    8e2e:	ca 01       	movw	r24, r20
    8e30:	a0 01       	movw	r20, r0
    8e32:	11 24       	eor	r1, r1
    8e34:	ff 27       	eor	r31, r31
    8e36:	59 1b       	sub	r21, r25
    8e38:	99 f0       	breq	.+38     	; 0x8e60 <__addsf3x+0x60>
    8e3a:	59 3f       	cpi	r21, 0xF9	; 249
    8e3c:	50 f4       	brcc	.+20     	; 0x8e52 <__addsf3x+0x52>
    8e3e:	50 3e       	cpi	r21, 0xE0	; 224
    8e40:	68 f1       	brcs	.+90     	; 0x8e9c <__addsf3x+0x9c>
    8e42:	1a 16       	cp	r1, r26
    8e44:	f0 40       	sbci	r31, 0x00	; 0
    8e46:	a2 2f       	mov	r26, r18
    8e48:	23 2f       	mov	r18, r19
    8e4a:	34 2f       	mov	r19, r20
    8e4c:	44 27       	eor	r20, r20
    8e4e:	58 5f       	subi	r21, 0xF8	; 248
    8e50:	f3 cf       	rjmp	.-26     	; 0x8e38 <__addsf3x+0x38>
    8e52:	46 95       	lsr	r20
    8e54:	37 95       	ror	r19
    8e56:	27 95       	ror	r18
    8e58:	a7 95       	ror	r26
    8e5a:	f0 40       	sbci	r31, 0x00	; 0
    8e5c:	53 95       	inc	r21
    8e5e:	c9 f7       	brne	.-14     	; 0x8e52 <__addsf3x+0x52>
    8e60:	7e f4       	brtc	.+30     	; 0x8e80 <__addsf3x+0x80>
    8e62:	1f 16       	cp	r1, r31
    8e64:	ba 0b       	sbc	r27, r26
    8e66:	62 0b       	sbc	r22, r18
    8e68:	73 0b       	sbc	r23, r19
    8e6a:	84 0b       	sbc	r24, r20
    8e6c:	ba f0       	brmi	.+46     	; 0x8e9c <__addsf3x+0x9c>
    8e6e:	91 50       	subi	r25, 0x01	; 1
    8e70:	a1 f0       	breq	.+40     	; 0x8e9a <__addsf3x+0x9a>
    8e72:	ff 0f       	add	r31, r31
    8e74:	bb 1f       	adc	r27, r27
    8e76:	66 1f       	adc	r22, r22
    8e78:	77 1f       	adc	r23, r23
    8e7a:	88 1f       	adc	r24, r24
    8e7c:	c2 f7       	brpl	.-16     	; 0x8e6e <__addsf3x+0x6e>
    8e7e:	0e c0       	rjmp	.+28     	; 0x8e9c <__addsf3x+0x9c>
    8e80:	ba 0f       	add	r27, r26
    8e82:	62 1f       	adc	r22, r18
    8e84:	73 1f       	adc	r23, r19
    8e86:	84 1f       	adc	r24, r20
    8e88:	48 f4       	brcc	.+18     	; 0x8e9c <__addsf3x+0x9c>
    8e8a:	87 95       	ror	r24
    8e8c:	77 95       	ror	r23
    8e8e:	67 95       	ror	r22
    8e90:	b7 95       	ror	r27
    8e92:	f7 95       	ror	r31
    8e94:	9e 3f       	cpi	r25, 0xFE	; 254
    8e96:	08 f0       	brcs	.+2      	; 0x8e9a <__addsf3x+0x9a>
    8e98:	b0 cf       	rjmp	.-160    	; 0x8dfa <__addsf3+0x28>
    8e9a:	93 95       	inc	r25
    8e9c:	88 0f       	add	r24, r24
    8e9e:	08 f0       	brcs	.+2      	; 0x8ea2 <__addsf3x+0xa2>
    8ea0:	99 27       	eor	r25, r25
    8ea2:	ee 0f       	add	r30, r30
    8ea4:	97 95       	ror	r25
    8ea6:	87 95       	ror	r24
    8ea8:	08 95       	ret
    8eaa:	0e 94 a6 49 	call	0x934c	; 0x934c <__fp_pscA>
    8eae:	60 f0       	brcs	.+24     	; 0x8ec8 <__addsf3x+0xc8>
    8eb0:	80 e8       	ldi	r24, 0x80	; 128
    8eb2:	91 e0       	ldi	r25, 0x01	; 1
    8eb4:	09 f4       	brne	.+2      	; 0x8eb8 <__addsf3x+0xb8>
    8eb6:	9e ef       	ldi	r25, 0xFE	; 254
    8eb8:	0e 94 ad 49 	call	0x935a	; 0x935a <__fp_pscB>
    8ebc:	28 f0       	brcs	.+10     	; 0x8ec8 <__addsf3x+0xc8>
    8ebe:	40 e8       	ldi	r20, 0x80	; 128
    8ec0:	51 e0       	ldi	r21, 0x01	; 1
    8ec2:	71 f4       	brne	.+28     	; 0x8ee0 <atan2+0x10>
    8ec4:	5e ef       	ldi	r21, 0xFE	; 254
    8ec6:	0c c0       	rjmp	.+24     	; 0x8ee0 <atan2+0x10>
    8ec8:	0c 94 7c 49 	jmp	0x92f8	; 0x92f8 <__fp_nan>
    8ecc:	0c 94 26 4a 	jmp	0x944c	; 0x944c <__fp_zero>

00008ed0 <atan2>:
    8ed0:	e9 2f       	mov	r30, r25
    8ed2:	e0 78       	andi	r30, 0x80	; 128
    8ed4:	0e 94 04 4a 	call	0x9408	; 0x9408 <__fp_split3>
    8ed8:	40 f3       	brcs	.-48     	; 0x8eaa <__addsf3x+0xaa>
    8eda:	09 2e       	mov	r0, r25
    8edc:	05 2a       	or	r0, r21
    8ede:	b1 f3       	breq	.-20     	; 0x8ecc <__addsf3x+0xcc>
    8ee0:	26 17       	cp	r18, r22
    8ee2:	37 07       	cpc	r19, r23
    8ee4:	48 07       	cpc	r20, r24
    8ee6:	59 07       	cpc	r21, r25
    8ee8:	38 f0       	brcs	.+14     	; 0x8ef8 <atan2+0x28>
    8eea:	0e 2e       	mov	r0, r30
    8eec:	07 f8       	bld	r0, 7
    8eee:	e0 25       	eor	r30, r0
    8ef0:	69 f0       	breq	.+26     	; 0x8f0c <atan2+0x3c>
    8ef2:	e0 25       	eor	r30, r0
    8ef4:	e0 64       	ori	r30, 0x40	; 64
    8ef6:	0a c0       	rjmp	.+20     	; 0x8f0c <atan2+0x3c>
    8ef8:	ef 63       	ori	r30, 0x3F	; 63
    8efa:	07 f8       	bld	r0, 7
    8efc:	00 94       	com	r0
    8efe:	07 fa       	bst	r0, 7
    8f00:	db 01       	movw	r26, r22
    8f02:	b9 01       	movw	r22, r18
    8f04:	9d 01       	movw	r18, r26
    8f06:	dc 01       	movw	r26, r24
    8f08:	ca 01       	movw	r24, r20
    8f0a:	ad 01       	movw	r20, r26
    8f0c:	ef 93       	push	r30
    8f0e:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <__divsf3_pse>
    8f12:	0e 94 df 49 	call	0x93be	; 0x93be <__fp_round>
    8f16:	0e 94 98 47 	call	0x8f30	; 0x8f30 <atan>
    8f1a:	5f 91       	pop	r21
    8f1c:	55 23       	and	r21, r21
    8f1e:	39 f0       	breq	.+14     	; 0x8f2e <atan2+0x5e>
    8f20:	2b ed       	ldi	r18, 0xDB	; 219
    8f22:	3f e0       	ldi	r19, 0x0F	; 15
    8f24:	49 e4       	ldi	r20, 0x49	; 73
    8f26:	50 fd       	sbrc	r21, 0
    8f28:	49 ec       	ldi	r20, 0xC9	; 201
    8f2a:	0c 94 e9 46 	jmp	0x8dd2	; 0x8dd2 <__addsf3>
    8f2e:	08 95       	ret

00008f30 <atan>:
    8f30:	df 93       	push	r29
    8f32:	dd 27       	eor	r29, r29
    8f34:	b9 2f       	mov	r27, r25
    8f36:	bf 77       	andi	r27, 0x7F	; 127
    8f38:	40 e8       	ldi	r20, 0x80	; 128
    8f3a:	5f e3       	ldi	r21, 0x3F	; 63
    8f3c:	16 16       	cp	r1, r22
    8f3e:	17 06       	cpc	r1, r23
    8f40:	48 07       	cpc	r20, r24
    8f42:	5b 07       	cpc	r21, r27
    8f44:	18 f4       	brcc	.+6      	; 0x8f4c <atan+0x1c>
    8f46:	d9 2f       	mov	r29, r25
    8f48:	0e 94 32 4a 	call	0x9464	; 0x9464 <inverse>
    8f4c:	9f 93       	push	r25
    8f4e:	8f 93       	push	r24
    8f50:	7f 93       	push	r23
    8f52:	6f 93       	push	r22
    8f54:	0e 94 bd 4b 	call	0x977a	; 0x977a <square>
    8f58:	e8 e1       	ldi	r30, 0x18	; 24
    8f5a:	f2 e0       	ldi	r31, 0x02	; 2
    8f5c:	0e 94 7f 49 	call	0x92fe	; 0x92fe <__fp_powser>
    8f60:	0e 94 df 49 	call	0x93be	; 0x93be <__fp_round>
    8f64:	2f 91       	pop	r18
    8f66:	3f 91       	pop	r19
    8f68:	4f 91       	pop	r20
    8f6a:	5f 91       	pop	r21
    8f6c:	0e 94 0b 4b 	call	0x9616	; 0x9616 <__mulsf3x>
    8f70:	dd 23       	and	r29, r29
    8f72:	51 f0       	breq	.+20     	; 0x8f88 <atan+0x58>
    8f74:	90 58       	subi	r25, 0x80	; 128
    8f76:	a2 ea       	ldi	r26, 0xA2	; 162
    8f78:	2a ed       	ldi	r18, 0xDA	; 218
    8f7a:	3f e0       	ldi	r19, 0x0F	; 15
    8f7c:	49 ec       	ldi	r20, 0xC9	; 201
    8f7e:	5f e3       	ldi	r21, 0x3F	; 63
    8f80:	d0 78       	andi	r29, 0x80	; 128
    8f82:	5d 27       	eor	r21, r29
    8f84:	0e 94 00 47 	call	0x8e00	; 0x8e00 <__addsf3x>
    8f88:	df 91       	pop	r29
    8f8a:	0c 94 df 49 	jmp	0x93be	; 0x93be <__fp_round>

00008f8e <__cmpsf2>:
    8f8e:	0e 94 44 49 	call	0x9288	; 0x9288 <__fp_cmp>
    8f92:	08 f4       	brcc	.+2      	; 0x8f96 <__cmpsf2+0x8>
    8f94:	81 e0       	ldi	r24, 0x01	; 1
    8f96:	08 95       	ret

00008f98 <cos>:
    8f98:	0e 94 b6 49 	call	0x936c	; 0x936c <__fp_rempio2>
    8f9c:	e3 95       	inc	r30
    8f9e:	0c 94 f0 49 	jmp	0x93e0	; 0x93e0 <__fp_sinus>

00008fa2 <__divsf3>:
    8fa2:	0e 94 e5 47 	call	0x8fca	; 0x8fca <__divsf3x>
    8fa6:	0c 94 df 49 	jmp	0x93be	; 0x93be <__fp_round>
    8faa:	0e 94 ad 49 	call	0x935a	; 0x935a <__fp_pscB>
    8fae:	58 f0       	brcs	.+22     	; 0x8fc6 <__divsf3+0x24>
    8fb0:	0e 94 a6 49 	call	0x934c	; 0x934c <__fp_pscA>
    8fb4:	40 f0       	brcs	.+16     	; 0x8fc6 <__divsf3+0x24>
    8fb6:	29 f4       	brne	.+10     	; 0x8fc2 <__divsf3+0x20>
    8fb8:	5f 3f       	cpi	r21, 0xFF	; 255
    8fba:	29 f0       	breq	.+10     	; 0x8fc6 <__divsf3+0x24>
    8fbc:	0c 94 68 49 	jmp	0x92d0	; 0x92d0 <__fp_inf>
    8fc0:	51 11       	cpse	r21, r1
    8fc2:	0c 94 27 4a 	jmp	0x944e	; 0x944e <__fp_szero>
    8fc6:	0c 94 7c 49 	jmp	0x92f8	; 0x92f8 <__fp_nan>

00008fca <__divsf3x>:
    8fca:	0e 94 04 4a 	call	0x9408	; 0x9408 <__fp_split3>
    8fce:	68 f3       	brcs	.-38     	; 0x8faa <__divsf3+0x8>

00008fd0 <__divsf3_pse>:
    8fd0:	99 23       	and	r25, r25
    8fd2:	b1 f3       	breq	.-20     	; 0x8fc0 <__divsf3+0x1e>
    8fd4:	55 23       	and	r21, r21
    8fd6:	91 f3       	breq	.-28     	; 0x8fbc <__divsf3+0x1a>
    8fd8:	95 1b       	sub	r25, r21
    8fda:	55 0b       	sbc	r21, r21
    8fdc:	bb 27       	eor	r27, r27
    8fde:	aa 27       	eor	r26, r26
    8fe0:	62 17       	cp	r22, r18
    8fe2:	73 07       	cpc	r23, r19
    8fe4:	84 07       	cpc	r24, r20
    8fe6:	38 f0       	brcs	.+14     	; 0x8ff6 <__divsf3_pse+0x26>
    8fe8:	9f 5f       	subi	r25, 0xFF	; 255
    8fea:	5f 4f       	sbci	r21, 0xFF	; 255
    8fec:	22 0f       	add	r18, r18
    8fee:	33 1f       	adc	r19, r19
    8ff0:	44 1f       	adc	r20, r20
    8ff2:	aa 1f       	adc	r26, r26
    8ff4:	a9 f3       	breq	.-22     	; 0x8fe0 <__divsf3_pse+0x10>
    8ff6:	35 d0       	rcall	.+106    	; 0x9062 <__divsf3_pse+0x92>
    8ff8:	0e 2e       	mov	r0, r30
    8ffa:	3a f0       	brmi	.+14     	; 0x900a <__divsf3_pse+0x3a>
    8ffc:	e0 e8       	ldi	r30, 0x80	; 128
    8ffe:	32 d0       	rcall	.+100    	; 0x9064 <__divsf3_pse+0x94>
    9000:	91 50       	subi	r25, 0x01	; 1
    9002:	50 40       	sbci	r21, 0x00	; 0
    9004:	e6 95       	lsr	r30
    9006:	00 1c       	adc	r0, r0
    9008:	ca f7       	brpl	.-14     	; 0x8ffc <__divsf3_pse+0x2c>
    900a:	2b d0       	rcall	.+86     	; 0x9062 <__divsf3_pse+0x92>
    900c:	fe 2f       	mov	r31, r30
    900e:	29 d0       	rcall	.+82     	; 0x9062 <__divsf3_pse+0x92>
    9010:	66 0f       	add	r22, r22
    9012:	77 1f       	adc	r23, r23
    9014:	88 1f       	adc	r24, r24
    9016:	bb 1f       	adc	r27, r27
    9018:	26 17       	cp	r18, r22
    901a:	37 07       	cpc	r19, r23
    901c:	48 07       	cpc	r20, r24
    901e:	ab 07       	cpc	r26, r27
    9020:	b0 e8       	ldi	r27, 0x80	; 128
    9022:	09 f0       	breq	.+2      	; 0x9026 <__divsf3_pse+0x56>
    9024:	bb 0b       	sbc	r27, r27
    9026:	80 2d       	mov	r24, r0
    9028:	bf 01       	movw	r22, r30
    902a:	ff 27       	eor	r31, r31
    902c:	93 58       	subi	r25, 0x83	; 131
    902e:	5f 4f       	sbci	r21, 0xFF	; 255
    9030:	3a f0       	brmi	.+14     	; 0x9040 <__divsf3_pse+0x70>
    9032:	9e 3f       	cpi	r25, 0xFE	; 254
    9034:	51 05       	cpc	r21, r1
    9036:	78 f0       	brcs	.+30     	; 0x9056 <__divsf3_pse+0x86>
    9038:	0c 94 68 49 	jmp	0x92d0	; 0x92d0 <__fp_inf>
    903c:	0c 94 27 4a 	jmp	0x944e	; 0x944e <__fp_szero>
    9040:	5f 3f       	cpi	r21, 0xFF	; 255
    9042:	e4 f3       	brlt	.-8      	; 0x903c <__divsf3_pse+0x6c>
    9044:	98 3e       	cpi	r25, 0xE8	; 232
    9046:	d4 f3       	brlt	.-12     	; 0x903c <__divsf3_pse+0x6c>
    9048:	86 95       	lsr	r24
    904a:	77 95       	ror	r23
    904c:	67 95       	ror	r22
    904e:	b7 95       	ror	r27
    9050:	f7 95       	ror	r31
    9052:	9f 5f       	subi	r25, 0xFF	; 255
    9054:	c9 f7       	brne	.-14     	; 0x9048 <__divsf3_pse+0x78>
    9056:	88 0f       	add	r24, r24
    9058:	91 1d       	adc	r25, r1
    905a:	96 95       	lsr	r25
    905c:	87 95       	ror	r24
    905e:	97 f9       	bld	r25, 7
    9060:	08 95       	ret
    9062:	e1 e0       	ldi	r30, 0x01	; 1
    9064:	66 0f       	add	r22, r22
    9066:	77 1f       	adc	r23, r23
    9068:	88 1f       	adc	r24, r24
    906a:	bb 1f       	adc	r27, r27
    906c:	62 17       	cp	r22, r18
    906e:	73 07       	cpc	r23, r19
    9070:	84 07       	cpc	r24, r20
    9072:	ba 07       	cpc	r27, r26
    9074:	20 f0       	brcs	.+8      	; 0x907e <__divsf3_pse+0xae>
    9076:	62 1b       	sub	r22, r18
    9078:	73 0b       	sbc	r23, r19
    907a:	84 0b       	sbc	r24, r20
    907c:	ba 0b       	sbc	r27, r26
    907e:	ee 1f       	adc	r30, r30
    9080:	88 f7       	brcc	.-30     	; 0x9064 <__divsf3_pse+0x94>
    9082:	e0 95       	com	r30
    9084:	08 95       	ret
    9086:	29 f4       	brne	.+10     	; 0x9092 <__divsf3_pse+0xc2>
    9088:	16 f0       	brts	.+4      	; 0x908e <__divsf3_pse+0xbe>
    908a:	0c 94 68 49 	jmp	0x92d0	; 0x92d0 <__fp_inf>
    908e:	0c 94 26 4a 	jmp	0x944c	; 0x944c <__fp_zero>
    9092:	0c 94 7c 49 	jmp	0x92f8	; 0x92f8 <__fp_nan>

00009096 <exp>:
    9096:	0e 94 0c 4a 	call	0x9418	; 0x9418 <__fp_splitA>
    909a:	a8 f3       	brcs	.-22     	; 0x9086 <__divsf3_pse+0xb6>
    909c:	96 38       	cpi	r25, 0x86	; 134
    909e:	a0 f7       	brcc	.-24     	; 0x9088 <__divsf3_pse+0xb8>
    90a0:	07 f8       	bld	r0, 7
    90a2:	0f 92       	push	r0
    90a4:	e8 94       	clt
    90a6:	2b e3       	ldi	r18, 0x3B	; 59
    90a8:	3a ea       	ldi	r19, 0xAA	; 170
    90aa:	48 eb       	ldi	r20, 0xB8	; 184
    90ac:	5f e7       	ldi	r21, 0x7F	; 127
    90ae:	0e 94 0e 4b 	call	0x961c	; 0x961c <__mulsf3_pse>
    90b2:	0f 92       	push	r0
    90b4:	0f 92       	push	r0
    90b6:	0f 92       	push	r0
    90b8:	4d b7       	in	r20, 0x3d	; 61
    90ba:	5e b7       	in	r21, 0x3e	; 62
    90bc:	0f 92       	push	r0
    90be:	0e 94 c4 4a 	call	0x9588	; 0x9588 <modf>
    90c2:	e5 e4       	ldi	r30, 0x45	; 69
    90c4:	f2 e0       	ldi	r31, 0x02	; 2
    90c6:	0e 94 7f 49 	call	0x92fe	; 0x92fe <__fp_powser>
    90ca:	4f 91       	pop	r20
    90cc:	5f 91       	pop	r21
    90ce:	ef 91       	pop	r30
    90d0:	ff 91       	pop	r31
    90d2:	e5 95       	asr	r30
    90d4:	ee 1f       	adc	r30, r30
    90d6:	ff 1f       	adc	r31, r31
    90d8:	49 f0       	breq	.+18     	; 0x90ec <exp+0x56>
    90da:	fe 57       	subi	r31, 0x7E	; 126
    90dc:	e0 68       	ori	r30, 0x80	; 128
    90de:	44 27       	eor	r20, r20
    90e0:	ee 0f       	add	r30, r30
    90e2:	44 1f       	adc	r20, r20
    90e4:	fa 95       	dec	r31
    90e6:	e1 f7       	brne	.-8      	; 0x90e0 <exp+0x4a>
    90e8:	41 95       	neg	r20
    90ea:	55 0b       	sbc	r21, r21
    90ec:	0e 94 3e 4a 	call	0x947c	; 0x947c <ldexp>
    90f0:	0f 90       	pop	r0
    90f2:	07 fe       	sbrs	r0, 7
    90f4:	0c 94 32 4a 	jmp	0x9464	; 0x9464 <inverse>
    90f8:	08 95       	ret

000090fa <__fixsfsi>:
    90fa:	0e 94 84 48 	call	0x9108	; 0x9108 <__fixunssfsi>
    90fe:	68 94       	set
    9100:	b1 11       	cpse	r27, r1
    9102:	0c 94 27 4a 	jmp	0x944e	; 0x944e <__fp_szero>
    9106:	08 95       	ret

00009108 <__fixunssfsi>:
    9108:	0e 94 0c 4a 	call	0x9418	; 0x9418 <__fp_splitA>
    910c:	88 f0       	brcs	.+34     	; 0x9130 <__fixunssfsi+0x28>
    910e:	9f 57       	subi	r25, 0x7F	; 127
    9110:	98 f0       	brcs	.+38     	; 0x9138 <__fixunssfsi+0x30>
    9112:	b9 2f       	mov	r27, r25
    9114:	99 27       	eor	r25, r25
    9116:	b7 51       	subi	r27, 0x17	; 23
    9118:	b0 f0       	brcs	.+44     	; 0x9146 <__fixunssfsi+0x3e>
    911a:	e1 f0       	breq	.+56     	; 0x9154 <__fixunssfsi+0x4c>
    911c:	66 0f       	add	r22, r22
    911e:	77 1f       	adc	r23, r23
    9120:	88 1f       	adc	r24, r24
    9122:	99 1f       	adc	r25, r25
    9124:	1a f0       	brmi	.+6      	; 0x912c <__fixunssfsi+0x24>
    9126:	ba 95       	dec	r27
    9128:	c9 f7       	brne	.-14     	; 0x911c <__fixunssfsi+0x14>
    912a:	14 c0       	rjmp	.+40     	; 0x9154 <__fixunssfsi+0x4c>
    912c:	b1 30       	cpi	r27, 0x01	; 1
    912e:	91 f0       	breq	.+36     	; 0x9154 <__fixunssfsi+0x4c>
    9130:	0e 94 26 4a 	call	0x944c	; 0x944c <__fp_zero>
    9134:	b1 e0       	ldi	r27, 0x01	; 1
    9136:	08 95       	ret
    9138:	0c 94 26 4a 	jmp	0x944c	; 0x944c <__fp_zero>
    913c:	67 2f       	mov	r22, r23
    913e:	78 2f       	mov	r23, r24
    9140:	88 27       	eor	r24, r24
    9142:	b8 5f       	subi	r27, 0xF8	; 248
    9144:	39 f0       	breq	.+14     	; 0x9154 <__fixunssfsi+0x4c>
    9146:	b9 3f       	cpi	r27, 0xF9	; 249
    9148:	cc f3       	brlt	.-14     	; 0x913c <__fixunssfsi+0x34>
    914a:	86 95       	lsr	r24
    914c:	77 95       	ror	r23
    914e:	67 95       	ror	r22
    9150:	b3 95       	inc	r27
    9152:	d9 f7       	brne	.-10     	; 0x914a <__fixunssfsi+0x42>
    9154:	3e f4       	brtc	.+14     	; 0x9164 <__fixunssfsi+0x5c>
    9156:	90 95       	com	r25
    9158:	80 95       	com	r24
    915a:	70 95       	com	r23
    915c:	61 95       	neg	r22
    915e:	7f 4f       	sbci	r23, 0xFF	; 255
    9160:	8f 4f       	sbci	r24, 0xFF	; 255
    9162:	9f 4f       	sbci	r25, 0xFF	; 255
    9164:	08 95       	ret

00009166 <__floatunsisf>:
    9166:	e8 94       	clt
    9168:	09 c0       	rjmp	.+18     	; 0x917c <__floatsisf+0x12>

0000916a <__floatsisf>:
    916a:	97 fb       	bst	r25, 7
    916c:	3e f4       	brtc	.+14     	; 0x917c <__floatsisf+0x12>
    916e:	90 95       	com	r25
    9170:	80 95       	com	r24
    9172:	70 95       	com	r23
    9174:	61 95       	neg	r22
    9176:	7f 4f       	sbci	r23, 0xFF	; 255
    9178:	8f 4f       	sbci	r24, 0xFF	; 255
    917a:	9f 4f       	sbci	r25, 0xFF	; 255
    917c:	99 23       	and	r25, r25
    917e:	a9 f0       	breq	.+42     	; 0x91aa <__floatsisf+0x40>
    9180:	f9 2f       	mov	r31, r25
    9182:	96 e9       	ldi	r25, 0x96	; 150
    9184:	bb 27       	eor	r27, r27
    9186:	93 95       	inc	r25
    9188:	f6 95       	lsr	r31
    918a:	87 95       	ror	r24
    918c:	77 95       	ror	r23
    918e:	67 95       	ror	r22
    9190:	b7 95       	ror	r27
    9192:	f1 11       	cpse	r31, r1
    9194:	f8 cf       	rjmp	.-16     	; 0x9186 <__floatsisf+0x1c>
    9196:	fa f4       	brpl	.+62     	; 0x91d6 <__floatsisf+0x6c>
    9198:	bb 0f       	add	r27, r27
    919a:	11 f4       	brne	.+4      	; 0x91a0 <__floatsisf+0x36>
    919c:	60 ff       	sbrs	r22, 0
    919e:	1b c0       	rjmp	.+54     	; 0x91d6 <__floatsisf+0x6c>
    91a0:	6f 5f       	subi	r22, 0xFF	; 255
    91a2:	7f 4f       	sbci	r23, 0xFF	; 255
    91a4:	8f 4f       	sbci	r24, 0xFF	; 255
    91a6:	9f 4f       	sbci	r25, 0xFF	; 255
    91a8:	16 c0       	rjmp	.+44     	; 0x91d6 <__floatsisf+0x6c>
    91aa:	88 23       	and	r24, r24
    91ac:	11 f0       	breq	.+4      	; 0x91b2 <__floatsisf+0x48>
    91ae:	96 e9       	ldi	r25, 0x96	; 150
    91b0:	11 c0       	rjmp	.+34     	; 0x91d4 <__floatsisf+0x6a>
    91b2:	77 23       	and	r23, r23
    91b4:	21 f0       	breq	.+8      	; 0x91be <__floatsisf+0x54>
    91b6:	9e e8       	ldi	r25, 0x8E	; 142
    91b8:	87 2f       	mov	r24, r23
    91ba:	76 2f       	mov	r23, r22
    91bc:	05 c0       	rjmp	.+10     	; 0x91c8 <__floatsisf+0x5e>
    91be:	66 23       	and	r22, r22
    91c0:	71 f0       	breq	.+28     	; 0x91de <__floatsisf+0x74>
    91c2:	96 e8       	ldi	r25, 0x86	; 134
    91c4:	86 2f       	mov	r24, r22
    91c6:	70 e0       	ldi	r23, 0x00	; 0
    91c8:	60 e0       	ldi	r22, 0x00	; 0
    91ca:	2a f0       	brmi	.+10     	; 0x91d6 <__floatsisf+0x6c>
    91cc:	9a 95       	dec	r25
    91ce:	66 0f       	add	r22, r22
    91d0:	77 1f       	adc	r23, r23
    91d2:	88 1f       	adc	r24, r24
    91d4:	da f7       	brpl	.-10     	; 0x91cc <__floatsisf+0x62>
    91d6:	88 0f       	add	r24, r24
    91d8:	96 95       	lsr	r25
    91da:	87 95       	ror	r24
    91dc:	97 f9       	bld	r25, 7
    91de:	08 95       	ret
    91e0:	0e 94 a6 49 	call	0x934c	; 0x934c <__fp_pscA>
    91e4:	20 f0       	brcs	.+8      	; 0x91ee <__floatsisf+0x84>
    91e6:	19 f0       	breq	.+6      	; 0x91ee <__floatsisf+0x84>
    91e8:	0e 94 ad 49 	call	0x935a	; 0x935a <__fp_pscB>
    91ec:	50 f4       	brcc	.+20     	; 0x9202 <fmod+0xc>
    91ee:	0c 94 7c 49 	jmp	0x92f8	; 0x92f8 <__fp_nan>
    91f2:	0c 94 27 4a 	jmp	0x944e	; 0x944e <__fp_szero>

000091f6 <fmod>:
    91f6:	e9 2f       	mov	r30, r25
    91f8:	0e 94 04 4a 	call	0x9408	; 0x9408 <__fp_split3>
    91fc:	88 f3       	brcs	.-30     	; 0x91e0 <__floatsisf+0x76>
    91fe:	55 23       	and	r21, r21
    9200:	b1 f3       	breq	.-20     	; 0x91ee <__floatsisf+0x84>
    9202:	e7 fb       	bst	r30, 7
    9204:	62 17       	cp	r22, r18
    9206:	73 07       	cpc	r23, r19
    9208:	84 07       	cpc	r24, r20
    920a:	95 07       	cpc	r25, r21
    920c:	a8 f1       	brcs	.+106    	; 0x9278 <fmod+0x82>
    920e:	89 f3       	breq	.-30     	; 0x91f2 <__floatsisf+0x88>
    9210:	e9 2f       	mov	r30, r25
    9212:	ff 27       	eor	r31, r31
    9214:	88 23       	and	r24, r24
    9216:	2a f0       	brmi	.+10     	; 0x9222 <fmod+0x2c>
    9218:	31 97       	sbiw	r30, 0x01	; 1
    921a:	66 0f       	add	r22, r22
    921c:	77 1f       	adc	r23, r23
    921e:	88 1f       	adc	r24, r24
    9220:	da f7       	brpl	.-10     	; 0x9218 <fmod+0x22>
    9222:	95 2f       	mov	r25, r21
    9224:	55 27       	eor	r21, r21
    9226:	44 23       	and	r20, r20
    9228:	32 f0       	brmi	.+12     	; 0x9236 <fmod+0x40>
    922a:	91 50       	subi	r25, 0x01	; 1
    922c:	50 40       	sbci	r21, 0x00	; 0
    922e:	22 0f       	add	r18, r18
    9230:	33 1f       	adc	r19, r19
    9232:	44 1f       	adc	r20, r20
    9234:	d2 f7       	brpl	.-12     	; 0x922a <fmod+0x34>
    9236:	bb 27       	eor	r27, r27
    9238:	e9 1b       	sub	r30, r25
    923a:	f5 0b       	sbc	r31, r21
    923c:	62 1b       	sub	r22, r18
    923e:	73 0b       	sbc	r23, r19
    9240:	84 0b       	sbc	r24, r20
    9242:	b1 09       	sbc	r27, r1
    9244:	b1 f2       	breq	.-84     	; 0x91f2 <__floatsisf+0x88>
    9246:	22 f4       	brpl	.+8      	; 0x9250 <fmod+0x5a>
    9248:	62 0f       	add	r22, r18
    924a:	73 1f       	adc	r23, r19
    924c:	84 1f       	adc	r24, r20
    924e:	b1 1d       	adc	r27, r1
    9250:	31 97       	sbiw	r30, 0x01	; 1
    9252:	2a f0       	brmi	.+10     	; 0x925e <fmod+0x68>
    9254:	66 0f       	add	r22, r22
    9256:	77 1f       	adc	r23, r23
    9258:	88 1f       	adc	r24, r24
    925a:	bb 1f       	adc	r27, r27
    925c:	ef cf       	rjmp	.-34     	; 0x923c <fmod+0x46>
    925e:	91 50       	subi	r25, 0x01	; 1
    9260:	50 40       	sbci	r21, 0x00	; 0
    9262:	62 f0       	brmi	.+24     	; 0x927c <fmod+0x86>
    9264:	41 f0       	breq	.+16     	; 0x9276 <fmod+0x80>
    9266:	88 23       	and	r24, r24
    9268:	32 f0       	brmi	.+12     	; 0x9276 <fmod+0x80>
    926a:	66 0f       	add	r22, r22
    926c:	77 1f       	adc	r23, r23
    926e:	88 1f       	adc	r24, r24
    9270:	91 50       	subi	r25, 0x01	; 1
    9272:	50 40       	sbci	r21, 0x00	; 0
    9274:	c1 f7       	brne	.-16     	; 0x9266 <fmod+0x70>
    9276:	93 95       	inc	r25
    9278:	0c 94 6e 49 	jmp	0x92dc	; 0x92dc <__fp_mpack>
    927c:	86 95       	lsr	r24
    927e:	77 95       	ror	r23
    9280:	67 95       	ror	r22
    9282:	9f 5f       	subi	r25, 0xFF	; 255
    9284:	d9 f7       	brne	.-10     	; 0x927c <fmod+0x86>
    9286:	f7 cf       	rjmp	.-18     	; 0x9276 <fmod+0x80>

00009288 <__fp_cmp>:
    9288:	99 0f       	add	r25, r25
    928a:	00 08       	sbc	r0, r0
    928c:	55 0f       	add	r21, r21
    928e:	aa 0b       	sbc	r26, r26
    9290:	e0 e8       	ldi	r30, 0x80	; 128
    9292:	fe ef       	ldi	r31, 0xFE	; 254
    9294:	16 16       	cp	r1, r22
    9296:	17 06       	cpc	r1, r23
    9298:	e8 07       	cpc	r30, r24
    929a:	f9 07       	cpc	r31, r25
    929c:	c0 f0       	brcs	.+48     	; 0x92ce <__fp_cmp+0x46>
    929e:	12 16       	cp	r1, r18
    92a0:	13 06       	cpc	r1, r19
    92a2:	e4 07       	cpc	r30, r20
    92a4:	f5 07       	cpc	r31, r21
    92a6:	98 f0       	brcs	.+38     	; 0x92ce <__fp_cmp+0x46>
    92a8:	62 1b       	sub	r22, r18
    92aa:	73 0b       	sbc	r23, r19
    92ac:	84 0b       	sbc	r24, r20
    92ae:	95 0b       	sbc	r25, r21
    92b0:	39 f4       	brne	.+14     	; 0x92c0 <__fp_cmp+0x38>
    92b2:	0a 26       	eor	r0, r26
    92b4:	61 f0       	breq	.+24     	; 0x92ce <__fp_cmp+0x46>
    92b6:	23 2b       	or	r18, r19
    92b8:	24 2b       	or	r18, r20
    92ba:	25 2b       	or	r18, r21
    92bc:	21 f4       	brne	.+8      	; 0x92c6 <__fp_cmp+0x3e>
    92be:	08 95       	ret
    92c0:	0a 26       	eor	r0, r26
    92c2:	09 f4       	brne	.+2      	; 0x92c6 <__fp_cmp+0x3e>
    92c4:	a1 40       	sbci	r26, 0x01	; 1
    92c6:	a6 95       	lsr	r26
    92c8:	8f ef       	ldi	r24, 0xFF	; 255
    92ca:	81 1d       	adc	r24, r1
    92cc:	81 1d       	adc	r24, r1
    92ce:	08 95       	ret

000092d0 <__fp_inf>:
    92d0:	97 f9       	bld	r25, 7
    92d2:	9f 67       	ori	r25, 0x7F	; 127
    92d4:	80 e8       	ldi	r24, 0x80	; 128
    92d6:	70 e0       	ldi	r23, 0x00	; 0
    92d8:	60 e0       	ldi	r22, 0x00	; 0
    92da:	08 95       	ret

000092dc <__fp_mpack>:
    92dc:	9f 3f       	cpi	r25, 0xFF	; 255
    92de:	31 f0       	breq	.+12     	; 0x92ec <__fp_mpack_finite+0xc>

000092e0 <__fp_mpack_finite>:
    92e0:	91 50       	subi	r25, 0x01	; 1
    92e2:	20 f4       	brcc	.+8      	; 0x92ec <__fp_mpack_finite+0xc>
    92e4:	87 95       	ror	r24
    92e6:	77 95       	ror	r23
    92e8:	67 95       	ror	r22
    92ea:	b7 95       	ror	r27
    92ec:	88 0f       	add	r24, r24
    92ee:	91 1d       	adc	r25, r1
    92f0:	96 95       	lsr	r25
    92f2:	87 95       	ror	r24
    92f4:	97 f9       	bld	r25, 7
    92f6:	08 95       	ret

000092f8 <__fp_nan>:
    92f8:	9f ef       	ldi	r25, 0xFF	; 255
    92fa:	80 ec       	ldi	r24, 0xC0	; 192
    92fc:	08 95       	ret

000092fe <__fp_powser>:
    92fe:	df 93       	push	r29
    9300:	cf 93       	push	r28
    9302:	1f 93       	push	r17
    9304:	0f 93       	push	r16
    9306:	ff 92       	push	r15
    9308:	ef 92       	push	r14
    930a:	df 92       	push	r13
    930c:	7b 01       	movw	r14, r22
    930e:	8c 01       	movw	r16, r24
    9310:	68 94       	set
    9312:	06 c0       	rjmp	.+12     	; 0x9320 <__fp_powser+0x22>
    9314:	da 2e       	mov	r13, r26
    9316:	ef 01       	movw	r28, r30
    9318:	0e 94 0b 4b 	call	0x9616	; 0x9616 <__mulsf3x>
    931c:	fe 01       	movw	r30, r28
    931e:	e8 94       	clt
    9320:	a5 91       	lpm	r26, Z+
    9322:	25 91       	lpm	r18, Z+
    9324:	35 91       	lpm	r19, Z+
    9326:	45 91       	lpm	r20, Z+
    9328:	55 91       	lpm	r21, Z+
    932a:	a6 f3       	brts	.-24     	; 0x9314 <__fp_powser+0x16>
    932c:	ef 01       	movw	r28, r30
    932e:	0e 94 00 47 	call	0x8e00	; 0x8e00 <__addsf3x>
    9332:	fe 01       	movw	r30, r28
    9334:	97 01       	movw	r18, r14
    9336:	a8 01       	movw	r20, r16
    9338:	da 94       	dec	r13
    933a:	69 f7       	brne	.-38     	; 0x9316 <__fp_powser+0x18>
    933c:	df 90       	pop	r13
    933e:	ef 90       	pop	r14
    9340:	ff 90       	pop	r15
    9342:	0f 91       	pop	r16
    9344:	1f 91       	pop	r17
    9346:	cf 91       	pop	r28
    9348:	df 91       	pop	r29
    934a:	08 95       	ret

0000934c <__fp_pscA>:
    934c:	00 24       	eor	r0, r0
    934e:	0a 94       	dec	r0
    9350:	16 16       	cp	r1, r22
    9352:	17 06       	cpc	r1, r23
    9354:	18 06       	cpc	r1, r24
    9356:	09 06       	cpc	r0, r25
    9358:	08 95       	ret

0000935a <__fp_pscB>:
    935a:	00 24       	eor	r0, r0
    935c:	0a 94       	dec	r0
    935e:	12 16       	cp	r1, r18
    9360:	13 06       	cpc	r1, r19
    9362:	14 06       	cpc	r1, r20
    9364:	05 06       	cpc	r0, r21
    9366:	08 95       	ret
    9368:	0c 94 7c 49 	jmp	0x92f8	; 0x92f8 <__fp_nan>

0000936c <__fp_rempio2>:
    936c:	0e 94 0c 4a 	call	0x9418	; 0x9418 <__fp_splitA>
    9370:	d8 f3       	brcs	.-10     	; 0x9368 <__fp_pscB+0xe>
    9372:	e8 94       	clt
    9374:	e0 e0       	ldi	r30, 0x00	; 0
    9376:	bb 27       	eor	r27, r27
    9378:	9f 57       	subi	r25, 0x7F	; 127
    937a:	f0 f0       	brcs	.+60     	; 0x93b8 <__fp_rempio2+0x4c>
    937c:	2a ed       	ldi	r18, 0xDA	; 218
    937e:	3f e0       	ldi	r19, 0x0F	; 15
    9380:	49 ec       	ldi	r20, 0xC9	; 201
    9382:	06 c0       	rjmp	.+12     	; 0x9390 <__fp_rempio2+0x24>
    9384:	ee 0f       	add	r30, r30
    9386:	bb 0f       	add	r27, r27
    9388:	66 1f       	adc	r22, r22
    938a:	77 1f       	adc	r23, r23
    938c:	88 1f       	adc	r24, r24
    938e:	28 f0       	brcs	.+10     	; 0x939a <__fp_rempio2+0x2e>
    9390:	b2 3a       	cpi	r27, 0xA2	; 162
    9392:	62 07       	cpc	r22, r18
    9394:	73 07       	cpc	r23, r19
    9396:	84 07       	cpc	r24, r20
    9398:	28 f0       	brcs	.+10     	; 0x93a4 <__fp_rempio2+0x38>
    939a:	b2 5a       	subi	r27, 0xA2	; 162
    939c:	62 0b       	sbc	r22, r18
    939e:	73 0b       	sbc	r23, r19
    93a0:	84 0b       	sbc	r24, r20
    93a2:	e3 95       	inc	r30
    93a4:	9a 95       	dec	r25
    93a6:	72 f7       	brpl	.-36     	; 0x9384 <__fp_rempio2+0x18>
    93a8:	80 38       	cpi	r24, 0x80	; 128
    93aa:	30 f4       	brcc	.+12     	; 0x93b8 <__fp_rempio2+0x4c>
    93ac:	9a 95       	dec	r25
    93ae:	bb 0f       	add	r27, r27
    93b0:	66 1f       	adc	r22, r22
    93b2:	77 1f       	adc	r23, r23
    93b4:	88 1f       	adc	r24, r24
    93b6:	d2 f7       	brpl	.-12     	; 0x93ac <__fp_rempio2+0x40>
    93b8:	90 48       	sbci	r25, 0x80	; 128
    93ba:	0c 94 70 49 	jmp	0x92e0	; 0x92e0 <__fp_mpack_finite>

000093be <__fp_round>:
    93be:	09 2e       	mov	r0, r25
    93c0:	03 94       	inc	r0
    93c2:	00 0c       	add	r0, r0
    93c4:	11 f4       	brne	.+4      	; 0x93ca <__fp_round+0xc>
    93c6:	88 23       	and	r24, r24
    93c8:	52 f0       	brmi	.+20     	; 0x93de <__fp_round+0x20>
    93ca:	bb 0f       	add	r27, r27
    93cc:	40 f4       	brcc	.+16     	; 0x93de <__fp_round+0x20>
    93ce:	bf 2b       	or	r27, r31
    93d0:	11 f4       	brne	.+4      	; 0x93d6 <__fp_round+0x18>
    93d2:	60 ff       	sbrs	r22, 0
    93d4:	04 c0       	rjmp	.+8      	; 0x93de <__fp_round+0x20>
    93d6:	6f 5f       	subi	r22, 0xFF	; 255
    93d8:	7f 4f       	sbci	r23, 0xFF	; 255
    93da:	8f 4f       	sbci	r24, 0xFF	; 255
    93dc:	9f 4f       	sbci	r25, 0xFF	; 255
    93de:	08 95       	ret

000093e0 <__fp_sinus>:
    93e0:	ef 93       	push	r30
    93e2:	e0 ff       	sbrs	r30, 0
    93e4:	07 c0       	rjmp	.+14     	; 0x93f4 <__fp_sinus+0x14>
    93e6:	a2 ea       	ldi	r26, 0xA2	; 162
    93e8:	2a ed       	ldi	r18, 0xDA	; 218
    93ea:	3f e0       	ldi	r19, 0x0F	; 15
    93ec:	49 ec       	ldi	r20, 0xC9	; 201
    93ee:	5f eb       	ldi	r21, 0xBF	; 191
    93f0:	0e 94 00 47 	call	0x8e00	; 0x8e00 <__addsf3x>
    93f4:	0e 94 df 49 	call	0x93be	; 0x93be <__fp_round>
    93f8:	0f 90       	pop	r0
    93fa:	03 94       	inc	r0
    93fc:	01 fc       	sbrc	r0, 1
    93fe:	90 58       	subi	r25, 0x80	; 128
    9400:	ed e6       	ldi	r30, 0x6D	; 109
    9402:	f2 e0       	ldi	r31, 0x02	; 2
    9404:	0c 94 c6 4b 	jmp	0x978c	; 0x978c <__fp_powsodd>

00009408 <__fp_split3>:
    9408:	57 fd       	sbrc	r21, 7
    940a:	90 58       	subi	r25, 0x80	; 128
    940c:	44 0f       	add	r20, r20
    940e:	55 1f       	adc	r21, r21
    9410:	59 f0       	breq	.+22     	; 0x9428 <__fp_splitA+0x10>
    9412:	5f 3f       	cpi	r21, 0xFF	; 255
    9414:	71 f0       	breq	.+28     	; 0x9432 <__fp_splitA+0x1a>
    9416:	47 95       	ror	r20

00009418 <__fp_splitA>:
    9418:	88 0f       	add	r24, r24
    941a:	97 fb       	bst	r25, 7
    941c:	99 1f       	adc	r25, r25
    941e:	61 f0       	breq	.+24     	; 0x9438 <__fp_splitA+0x20>
    9420:	9f 3f       	cpi	r25, 0xFF	; 255
    9422:	79 f0       	breq	.+30     	; 0x9442 <__fp_splitA+0x2a>
    9424:	87 95       	ror	r24
    9426:	08 95       	ret
    9428:	12 16       	cp	r1, r18
    942a:	13 06       	cpc	r1, r19
    942c:	14 06       	cpc	r1, r20
    942e:	55 1f       	adc	r21, r21
    9430:	f2 cf       	rjmp	.-28     	; 0x9416 <__fp_split3+0xe>
    9432:	46 95       	lsr	r20
    9434:	f1 df       	rcall	.-30     	; 0x9418 <__fp_splitA>
    9436:	08 c0       	rjmp	.+16     	; 0x9448 <__fp_splitA+0x30>
    9438:	16 16       	cp	r1, r22
    943a:	17 06       	cpc	r1, r23
    943c:	18 06       	cpc	r1, r24
    943e:	99 1f       	adc	r25, r25
    9440:	f1 cf       	rjmp	.-30     	; 0x9424 <__fp_splitA+0xc>
    9442:	86 95       	lsr	r24
    9444:	71 05       	cpc	r23, r1
    9446:	61 05       	cpc	r22, r1
    9448:	08 94       	sec
    944a:	08 95       	ret

0000944c <__fp_zero>:
    944c:	e8 94       	clt

0000944e <__fp_szero>:
    944e:	bb 27       	eor	r27, r27
    9450:	66 27       	eor	r22, r22
    9452:	77 27       	eor	r23, r23
    9454:	cb 01       	movw	r24, r22
    9456:	97 f9       	bld	r25, 7
    9458:	08 95       	ret

0000945a <__gesf2>:
    945a:	0e 94 44 49 	call	0x9288	; 0x9288 <__fp_cmp>
    945e:	08 f4       	brcc	.+2      	; 0x9462 <__gesf2+0x8>
    9460:	8f ef       	ldi	r24, 0xFF	; 255
    9462:	08 95       	ret

00009464 <inverse>:
    9464:	9b 01       	movw	r18, r22
    9466:	ac 01       	movw	r20, r24
    9468:	60 e0       	ldi	r22, 0x00	; 0
    946a:	70 e0       	ldi	r23, 0x00	; 0
    946c:	80 e8       	ldi	r24, 0x80	; 128
    946e:	9f e3       	ldi	r25, 0x3F	; 63
    9470:	0c 94 d1 47 	jmp	0x8fa2	; 0x8fa2 <__divsf3>
    9474:	0c 94 68 49 	jmp	0x92d0	; 0x92d0 <__fp_inf>
    9478:	0c 94 6e 49 	jmp	0x92dc	; 0x92dc <__fp_mpack>

0000947c <ldexp>:
    947c:	0e 94 0c 4a 	call	0x9418	; 0x9418 <__fp_splitA>
    9480:	d8 f3       	brcs	.-10     	; 0x9478 <inverse+0x14>
    9482:	99 23       	and	r25, r25
    9484:	c9 f3       	breq	.-14     	; 0x9478 <inverse+0x14>
    9486:	94 0f       	add	r25, r20
    9488:	51 1d       	adc	r21, r1
    948a:	a3 f3       	brvs	.-24     	; 0x9474 <inverse+0x10>
    948c:	91 50       	subi	r25, 0x01	; 1
    948e:	50 40       	sbci	r21, 0x00	; 0
    9490:	94 f0       	brlt	.+36     	; 0x94b6 <ldexp+0x3a>
    9492:	59 f0       	breq	.+22     	; 0x94aa <ldexp+0x2e>
    9494:	88 23       	and	r24, r24
    9496:	32 f0       	brmi	.+12     	; 0x94a4 <ldexp+0x28>
    9498:	66 0f       	add	r22, r22
    949a:	77 1f       	adc	r23, r23
    949c:	88 1f       	adc	r24, r24
    949e:	91 50       	subi	r25, 0x01	; 1
    94a0:	50 40       	sbci	r21, 0x00	; 0
    94a2:	c1 f7       	brne	.-16     	; 0x9494 <ldexp+0x18>
    94a4:	9e 3f       	cpi	r25, 0xFE	; 254
    94a6:	51 05       	cpc	r21, r1
    94a8:	2c f7       	brge	.-54     	; 0x9474 <inverse+0x10>
    94aa:	88 0f       	add	r24, r24
    94ac:	91 1d       	adc	r25, r1
    94ae:	96 95       	lsr	r25
    94b0:	87 95       	ror	r24
    94b2:	97 f9       	bld	r25, 7
    94b4:	08 95       	ret
    94b6:	5f 3f       	cpi	r21, 0xFF	; 255
    94b8:	ac f0       	brlt	.+42     	; 0x94e4 <ldexp+0x68>
    94ba:	98 3e       	cpi	r25, 0xE8	; 232
    94bc:	9c f0       	brlt	.+38     	; 0x94e4 <ldexp+0x68>
    94be:	bb 27       	eor	r27, r27
    94c0:	86 95       	lsr	r24
    94c2:	77 95       	ror	r23
    94c4:	67 95       	ror	r22
    94c6:	b7 95       	ror	r27
    94c8:	08 f4       	brcc	.+2      	; 0x94cc <ldexp+0x50>
    94ca:	b1 60       	ori	r27, 0x01	; 1
    94cc:	93 95       	inc	r25
    94ce:	c1 f7       	brne	.-16     	; 0x94c0 <ldexp+0x44>
    94d0:	bb 0f       	add	r27, r27
    94d2:	58 f7       	brcc	.-42     	; 0x94aa <ldexp+0x2e>
    94d4:	11 f4       	brne	.+4      	; 0x94da <ldexp+0x5e>
    94d6:	60 ff       	sbrs	r22, 0
    94d8:	e8 cf       	rjmp	.-48     	; 0x94aa <ldexp+0x2e>
    94da:	6f 5f       	subi	r22, 0xFF	; 255
    94dc:	7f 4f       	sbci	r23, 0xFF	; 255
    94de:	8f 4f       	sbci	r24, 0xFF	; 255
    94e0:	9f 4f       	sbci	r25, 0xFF	; 255
    94e2:	e3 cf       	rjmp	.-58     	; 0x94aa <ldexp+0x2e>
    94e4:	0c 94 27 4a 	jmp	0x944e	; 0x944e <__fp_szero>
    94e8:	16 f0       	brts	.+4      	; 0x94ee <ldexp+0x72>
    94ea:	0c 94 6e 49 	jmp	0x92dc	; 0x92dc <__fp_mpack>
    94ee:	0c 94 7c 49 	jmp	0x92f8	; 0x92f8 <__fp_nan>
    94f2:	68 94       	set
    94f4:	0c 94 68 49 	jmp	0x92d0	; 0x92d0 <__fp_inf>

000094f8 <log>:
    94f8:	0e 94 0c 4a 	call	0x9418	; 0x9418 <__fp_splitA>
    94fc:	a8 f3       	brcs	.-22     	; 0x94e8 <ldexp+0x6c>
    94fe:	99 23       	and	r25, r25
    9500:	c1 f3       	breq	.-16     	; 0x94f2 <ldexp+0x76>
    9502:	ae f3       	brts	.-22     	; 0x94ee <ldexp+0x72>
    9504:	df 93       	push	r29
    9506:	cf 93       	push	r28
    9508:	1f 93       	push	r17
    950a:	0f 93       	push	r16
    950c:	ff 92       	push	r15
    950e:	c9 2f       	mov	r28, r25
    9510:	dd 27       	eor	r29, r29
    9512:	88 23       	and	r24, r24
    9514:	2a f0       	brmi	.+10     	; 0x9520 <log+0x28>
    9516:	21 97       	sbiw	r28, 0x01	; 1
    9518:	66 0f       	add	r22, r22
    951a:	77 1f       	adc	r23, r23
    951c:	88 1f       	adc	r24, r24
    951e:	da f7       	brpl	.-10     	; 0x9516 <log+0x1e>
    9520:	20 e0       	ldi	r18, 0x00	; 0
    9522:	30 e0       	ldi	r19, 0x00	; 0
    9524:	40 e8       	ldi	r20, 0x80	; 128
    9526:	5f eb       	ldi	r21, 0xBF	; 191
    9528:	9f e3       	ldi	r25, 0x3F	; 63
    952a:	88 39       	cpi	r24, 0x98	; 152
    952c:	20 f0       	brcs	.+8      	; 0x9536 <log+0x3e>
    952e:	80 3e       	cpi	r24, 0xE0	; 224
    9530:	38 f0       	brcs	.+14     	; 0x9540 <log+0x48>
    9532:	21 96       	adiw	r28, 0x01	; 1
    9534:	8f 77       	andi	r24, 0x7F	; 127
    9536:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    953a:	eb e8       	ldi	r30, 0x8B	; 139
    953c:	f2 e0       	ldi	r31, 0x02	; 2
    953e:	04 c0       	rjmp	.+8      	; 0x9548 <log+0x50>
    9540:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <__addsf3>
    9544:	e8 eb       	ldi	r30, 0xB8	; 184
    9546:	f2 e0       	ldi	r31, 0x02	; 2
    9548:	0e 94 7f 49 	call	0x92fe	; 0x92fe <__fp_powser>
    954c:	8b 01       	movw	r16, r22
    954e:	be 01       	movw	r22, r28
    9550:	ec 01       	movw	r28, r24
    9552:	fb 2e       	mov	r15, r27
    9554:	6f 57       	subi	r22, 0x7F	; 127
    9556:	71 09       	sbc	r23, r1
    9558:	75 95       	asr	r23
    955a:	77 1f       	adc	r23, r23
    955c:	88 0b       	sbc	r24, r24
    955e:	99 0b       	sbc	r25, r25
    9560:	0e 94 b5 48 	call	0x916a	; 0x916a <__floatsisf>
    9564:	28 e1       	ldi	r18, 0x18	; 24
    9566:	32 e7       	ldi	r19, 0x72	; 114
    9568:	41 e3       	ldi	r20, 0x31	; 49
    956a:	5f e3       	ldi	r21, 0x3F	; 63
    956c:	0e 94 0b 4b 	call	0x9616	; 0x9616 <__mulsf3x>
    9570:	af 2d       	mov	r26, r15
    9572:	98 01       	movw	r18, r16
    9574:	ae 01       	movw	r20, r28
    9576:	ff 90       	pop	r15
    9578:	0f 91       	pop	r16
    957a:	1f 91       	pop	r17
    957c:	cf 91       	pop	r28
    957e:	df 91       	pop	r29
    9580:	0e 94 00 47 	call	0x8e00	; 0x8e00 <__addsf3x>
    9584:	0c 94 df 49 	jmp	0x93be	; 0x93be <__fp_round>

00009588 <modf>:
    9588:	fa 01       	movw	r30, r20
    958a:	dc 01       	movw	r26, r24
    958c:	aa 0f       	add	r26, r26
    958e:	bb 1f       	adc	r27, r27
    9590:	9b 01       	movw	r18, r22
    9592:	ac 01       	movw	r20, r24
    9594:	bf 57       	subi	r27, 0x7F	; 127
    9596:	28 f4       	brcc	.+10     	; 0x95a2 <modf+0x1a>
    9598:	22 27       	eor	r18, r18
    959a:	33 27       	eor	r19, r19
    959c:	44 27       	eor	r20, r20
    959e:	50 78       	andi	r21, 0x80	; 128
    95a0:	20 c0       	rjmp	.+64     	; 0x95e2 <modf+0x5a>
    95a2:	b7 51       	subi	r27, 0x17	; 23
    95a4:	90 f4       	brcc	.+36     	; 0x95ca <modf+0x42>
    95a6:	ab 2f       	mov	r26, r27
    95a8:	00 24       	eor	r0, r0
    95aa:	46 95       	lsr	r20
    95ac:	37 95       	ror	r19
    95ae:	27 95       	ror	r18
    95b0:	01 1c       	adc	r0, r1
    95b2:	a3 95       	inc	r26
    95b4:	d2 f3       	brmi	.-12     	; 0x95aa <modf+0x22>
    95b6:	00 20       	and	r0, r0
    95b8:	71 f0       	breq	.+28     	; 0x95d6 <modf+0x4e>
    95ba:	22 0f       	add	r18, r18
    95bc:	33 1f       	adc	r19, r19
    95be:	44 1f       	adc	r20, r20
    95c0:	b3 95       	inc	r27
    95c2:	da f3       	brmi	.-10     	; 0x95ba <modf+0x32>
    95c4:	0e d0       	rcall	.+28     	; 0x95e2 <modf+0x5a>
    95c6:	0c 94 e8 46 	jmp	0x8dd0	; 0x8dd0 <__subsf3>
    95ca:	61 30       	cpi	r22, 0x01	; 1
    95cc:	71 05       	cpc	r23, r1
    95ce:	a0 e8       	ldi	r26, 0x80	; 128
    95d0:	8a 07       	cpc	r24, r26
    95d2:	b9 46       	sbci	r27, 0x69	; 105
    95d4:	30 f4       	brcc	.+12     	; 0x95e2 <modf+0x5a>
    95d6:	9b 01       	movw	r18, r22
    95d8:	ac 01       	movw	r20, r24
    95da:	66 27       	eor	r22, r22
    95dc:	77 27       	eor	r23, r23
    95de:	88 27       	eor	r24, r24
    95e0:	90 78       	andi	r25, 0x80	; 128
    95e2:	30 96       	adiw	r30, 0x00	; 0
    95e4:	21 f0       	breq	.+8      	; 0x95ee <modf+0x66>
    95e6:	20 83       	st	Z, r18
    95e8:	31 83       	std	Z+1, r19	; 0x01
    95ea:	42 83       	std	Z+2, r20	; 0x02
    95ec:	53 83       	std	Z+3, r21	; 0x03
    95ee:	08 95       	ret

000095f0 <__mulsf3>:
    95f0:	0e 94 0b 4b 	call	0x9616	; 0x9616 <__mulsf3x>
    95f4:	0c 94 df 49 	jmp	0x93be	; 0x93be <__fp_round>
    95f8:	0e 94 a6 49 	call	0x934c	; 0x934c <__fp_pscA>
    95fc:	38 f0       	brcs	.+14     	; 0x960c <__mulsf3+0x1c>
    95fe:	0e 94 ad 49 	call	0x935a	; 0x935a <__fp_pscB>
    9602:	20 f0       	brcs	.+8      	; 0x960c <__mulsf3+0x1c>
    9604:	95 23       	and	r25, r21
    9606:	11 f0       	breq	.+4      	; 0x960c <__mulsf3+0x1c>
    9608:	0c 94 68 49 	jmp	0x92d0	; 0x92d0 <__fp_inf>
    960c:	0c 94 7c 49 	jmp	0x92f8	; 0x92f8 <__fp_nan>
    9610:	11 24       	eor	r1, r1
    9612:	0c 94 27 4a 	jmp	0x944e	; 0x944e <__fp_szero>

00009616 <__mulsf3x>:
    9616:	0e 94 04 4a 	call	0x9408	; 0x9408 <__fp_split3>
    961a:	70 f3       	brcs	.-36     	; 0x95f8 <__mulsf3+0x8>

0000961c <__mulsf3_pse>:
    961c:	95 9f       	mul	r25, r21
    961e:	c1 f3       	breq	.-16     	; 0x9610 <__mulsf3+0x20>
    9620:	95 0f       	add	r25, r21
    9622:	50 e0       	ldi	r21, 0x00	; 0
    9624:	55 1f       	adc	r21, r21
    9626:	62 9f       	mul	r22, r18
    9628:	f0 01       	movw	r30, r0
    962a:	72 9f       	mul	r23, r18
    962c:	bb 27       	eor	r27, r27
    962e:	f0 0d       	add	r31, r0
    9630:	b1 1d       	adc	r27, r1
    9632:	63 9f       	mul	r22, r19
    9634:	aa 27       	eor	r26, r26
    9636:	f0 0d       	add	r31, r0
    9638:	b1 1d       	adc	r27, r1
    963a:	aa 1f       	adc	r26, r26
    963c:	64 9f       	mul	r22, r20
    963e:	66 27       	eor	r22, r22
    9640:	b0 0d       	add	r27, r0
    9642:	a1 1d       	adc	r26, r1
    9644:	66 1f       	adc	r22, r22
    9646:	82 9f       	mul	r24, r18
    9648:	22 27       	eor	r18, r18
    964a:	b0 0d       	add	r27, r0
    964c:	a1 1d       	adc	r26, r1
    964e:	62 1f       	adc	r22, r18
    9650:	73 9f       	mul	r23, r19
    9652:	b0 0d       	add	r27, r0
    9654:	a1 1d       	adc	r26, r1
    9656:	62 1f       	adc	r22, r18
    9658:	83 9f       	mul	r24, r19
    965a:	a0 0d       	add	r26, r0
    965c:	61 1d       	adc	r22, r1
    965e:	22 1f       	adc	r18, r18
    9660:	74 9f       	mul	r23, r20
    9662:	33 27       	eor	r19, r19
    9664:	a0 0d       	add	r26, r0
    9666:	61 1d       	adc	r22, r1
    9668:	23 1f       	adc	r18, r19
    966a:	84 9f       	mul	r24, r20
    966c:	60 0d       	add	r22, r0
    966e:	21 1d       	adc	r18, r1
    9670:	82 2f       	mov	r24, r18
    9672:	76 2f       	mov	r23, r22
    9674:	6a 2f       	mov	r22, r26
    9676:	11 24       	eor	r1, r1
    9678:	9f 57       	subi	r25, 0x7F	; 127
    967a:	50 40       	sbci	r21, 0x00	; 0
    967c:	9a f0       	brmi	.+38     	; 0x96a4 <__mulsf3_pse+0x88>
    967e:	f1 f0       	breq	.+60     	; 0x96bc <__mulsf3_pse+0xa0>
    9680:	88 23       	and	r24, r24
    9682:	4a f0       	brmi	.+18     	; 0x9696 <__mulsf3_pse+0x7a>
    9684:	ee 0f       	add	r30, r30
    9686:	ff 1f       	adc	r31, r31
    9688:	bb 1f       	adc	r27, r27
    968a:	66 1f       	adc	r22, r22
    968c:	77 1f       	adc	r23, r23
    968e:	88 1f       	adc	r24, r24
    9690:	91 50       	subi	r25, 0x01	; 1
    9692:	50 40       	sbci	r21, 0x00	; 0
    9694:	a9 f7       	brne	.-22     	; 0x9680 <__mulsf3_pse+0x64>
    9696:	9e 3f       	cpi	r25, 0xFE	; 254
    9698:	51 05       	cpc	r21, r1
    969a:	80 f0       	brcs	.+32     	; 0x96bc <__mulsf3_pse+0xa0>
    969c:	0c 94 68 49 	jmp	0x92d0	; 0x92d0 <__fp_inf>
    96a0:	0c 94 27 4a 	jmp	0x944e	; 0x944e <__fp_szero>
    96a4:	5f 3f       	cpi	r21, 0xFF	; 255
    96a6:	e4 f3       	brlt	.-8      	; 0x96a0 <__mulsf3_pse+0x84>
    96a8:	98 3e       	cpi	r25, 0xE8	; 232
    96aa:	d4 f3       	brlt	.-12     	; 0x96a0 <__mulsf3_pse+0x84>
    96ac:	86 95       	lsr	r24
    96ae:	77 95       	ror	r23
    96b0:	67 95       	ror	r22
    96b2:	b7 95       	ror	r27
    96b4:	f7 95       	ror	r31
    96b6:	e7 95       	ror	r30
    96b8:	9f 5f       	subi	r25, 0xFF	; 255
    96ba:	c1 f7       	brne	.-16     	; 0x96ac <__mulsf3_pse+0x90>
    96bc:	fe 2b       	or	r31, r30
    96be:	88 0f       	add	r24, r24
    96c0:	91 1d       	adc	r25, r1
    96c2:	96 95       	lsr	r25
    96c4:	87 95       	ror	r24
    96c6:	97 f9       	bld	r25, 7
    96c8:	08 95       	ret

000096ca <pow>:
    96ca:	fa 01       	movw	r30, r20
    96cc:	ee 0f       	add	r30, r30
    96ce:	ff 1f       	adc	r31, r31
    96d0:	30 96       	adiw	r30, 0x00	; 0
    96d2:	21 05       	cpc	r18, r1
    96d4:	31 05       	cpc	r19, r1
    96d6:	a1 f1       	breq	.+104    	; 0x9740 <pow+0x76>
    96d8:	61 15       	cp	r22, r1
    96da:	71 05       	cpc	r23, r1
    96dc:	61 f4       	brne	.+24     	; 0x96f6 <pow+0x2c>
    96de:	80 38       	cpi	r24, 0x80	; 128
    96e0:	bf e3       	ldi	r27, 0x3F	; 63
    96e2:	9b 07       	cpc	r25, r27
    96e4:	49 f1       	breq	.+82     	; 0x9738 <pow+0x6e>
    96e6:	68 94       	set
    96e8:	90 38       	cpi	r25, 0x80	; 128
    96ea:	81 05       	cpc	r24, r1
    96ec:	61 f0       	breq	.+24     	; 0x9706 <pow+0x3c>
    96ee:	80 38       	cpi	r24, 0x80	; 128
    96f0:	bf ef       	ldi	r27, 0xFF	; 255
    96f2:	9b 07       	cpc	r25, r27
    96f4:	41 f0       	breq	.+16     	; 0x9706 <pow+0x3c>
    96f6:	99 23       	and	r25, r25
    96f8:	4a f5       	brpl	.+82     	; 0x974c <pow+0x82>
    96fa:	ff 3f       	cpi	r31, 0xFF	; 255
    96fc:	e1 05       	cpc	r30, r1
    96fe:	31 05       	cpc	r19, r1
    9700:	21 05       	cpc	r18, r1
    9702:	19 f1       	breq	.+70     	; 0x974a <pow+0x80>
    9704:	e8 94       	clt
    9706:	08 94       	sec
    9708:	e7 95       	ror	r30
    970a:	d9 01       	movw	r26, r18
    970c:	aa 23       	and	r26, r26
    970e:	29 f4       	brne	.+10     	; 0x971a <pow+0x50>
    9710:	ab 2f       	mov	r26, r27
    9712:	be 2f       	mov	r27, r30
    9714:	f8 5f       	subi	r31, 0xF8	; 248
    9716:	d0 f3       	brcs	.-12     	; 0x970c <pow+0x42>
    9718:	10 c0       	rjmp	.+32     	; 0x973a <pow+0x70>
    971a:	ff 5f       	subi	r31, 0xFF	; 255
    971c:	70 f4       	brcc	.+28     	; 0x973a <pow+0x70>
    971e:	a6 95       	lsr	r26
    9720:	e0 f7       	brcc	.-8      	; 0x971a <pow+0x50>
    9722:	f7 39       	cpi	r31, 0x97	; 151
    9724:	50 f0       	brcs	.+20     	; 0x973a <pow+0x70>
    9726:	19 f0       	breq	.+6      	; 0x972e <pow+0x64>
    9728:	ff 3a       	cpi	r31, 0xAF	; 175
    972a:	38 f4       	brcc	.+14     	; 0x973a <pow+0x70>
    972c:	9f 77       	andi	r25, 0x7F	; 127
    972e:	9f 93       	push	r25
    9730:	0d d0       	rcall	.+26     	; 0x974c <pow+0x82>
    9732:	0f 90       	pop	r0
    9734:	07 fc       	sbrc	r0, 7
    9736:	90 58       	subi	r25, 0x80	; 128
    9738:	08 95       	ret
    973a:	46 f0       	brts	.+16     	; 0x974c <pow+0x82>
    973c:	0c 94 7c 49 	jmp	0x92f8	; 0x92f8 <__fp_nan>
    9740:	60 e0       	ldi	r22, 0x00	; 0
    9742:	70 e0       	ldi	r23, 0x00	; 0
    9744:	80 e8       	ldi	r24, 0x80	; 128
    9746:	9f e3       	ldi	r25, 0x3F	; 63
    9748:	08 95       	ret
    974a:	4f e7       	ldi	r20, 0x7F	; 127
    974c:	9f 77       	andi	r25, 0x7F	; 127
    974e:	5f 93       	push	r21
    9750:	4f 93       	push	r20
    9752:	3f 93       	push	r19
    9754:	2f 93       	push	r18
    9756:	0e 94 7c 4a 	call	0x94f8	; 0x94f8 <log>
    975a:	2f 91       	pop	r18
    975c:	3f 91       	pop	r19
    975e:	4f 91       	pop	r20
    9760:	5f 91       	pop	r21
    9762:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    9766:	0c 94 4b 48 	jmp	0x9096	; 0x9096 <exp>

0000976a <sin>:
    976a:	9f 93       	push	r25
    976c:	0e 94 b6 49 	call	0x936c	; 0x936c <__fp_rempio2>
    9770:	0f 90       	pop	r0
    9772:	07 fc       	sbrc	r0, 7
    9774:	ee 5f       	subi	r30, 0xFE	; 254
    9776:	0c 94 f0 49 	jmp	0x93e0	; 0x93e0 <__fp_sinus>

0000977a <square>:
    977a:	9b 01       	movw	r18, r22
    977c:	ac 01       	movw	r20, r24
    977e:	0c 94 f8 4a 	jmp	0x95f0	; 0x95f0 <__mulsf3>

00009782 <__unordsf2>:
    9782:	0e 94 44 49 	call	0x9288	; 0x9288 <__fp_cmp>
    9786:	88 0b       	sbc	r24, r24
    9788:	99 0b       	sbc	r25, r25
    978a:	08 95       	ret

0000978c <__fp_powsodd>:
    978c:	9f 93       	push	r25
    978e:	8f 93       	push	r24
    9790:	7f 93       	push	r23
    9792:	6f 93       	push	r22
    9794:	ff 93       	push	r31
    9796:	ef 93       	push	r30
    9798:	9b 01       	movw	r18, r22
    979a:	ac 01       	movw	r20, r24
    979c:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__mulsf3>
    97a0:	ef 91       	pop	r30
    97a2:	ff 91       	pop	r31
    97a4:	0e 94 7f 49 	call	0x92fe	; 0x92fe <__fp_powser>
    97a8:	2f 91       	pop	r18
    97aa:	3f 91       	pop	r19
    97ac:	4f 91       	pop	r20
    97ae:	5f 91       	pop	r21
    97b0:	0c 94 f8 4a 	jmp	0x95f0	; 0x95f0 <__mulsf3>

000097b4 <__mulsi3>:
    97b4:	db 01       	movw	r26, r22
    97b6:	8f 93       	push	r24
    97b8:	9f 93       	push	r25
    97ba:	0e 94 4b 4c 	call	0x9896	; 0x9896 <__muluhisi3>
    97be:	bf 91       	pop	r27
    97c0:	af 91       	pop	r26
    97c2:	a2 9f       	mul	r26, r18
    97c4:	80 0d       	add	r24, r0
    97c6:	91 1d       	adc	r25, r1
    97c8:	a3 9f       	mul	r26, r19
    97ca:	90 0d       	add	r25, r0
    97cc:	b2 9f       	mul	r27, r18
    97ce:	90 0d       	add	r25, r0
    97d0:	11 24       	eor	r1, r1
    97d2:	08 95       	ret

000097d4 <__udivmodhi4>:
    97d4:	aa 1b       	sub	r26, r26
    97d6:	bb 1b       	sub	r27, r27
    97d8:	51 e1       	ldi	r21, 0x11	; 17
    97da:	07 c0       	rjmp	.+14     	; 0x97ea <__udivmodhi4_ep>

000097dc <__udivmodhi4_loop>:
    97dc:	aa 1f       	adc	r26, r26
    97de:	bb 1f       	adc	r27, r27
    97e0:	a6 17       	cp	r26, r22
    97e2:	b7 07       	cpc	r27, r23
    97e4:	10 f0       	brcs	.+4      	; 0x97ea <__udivmodhi4_ep>
    97e6:	a6 1b       	sub	r26, r22
    97e8:	b7 0b       	sbc	r27, r23

000097ea <__udivmodhi4_ep>:
    97ea:	88 1f       	adc	r24, r24
    97ec:	99 1f       	adc	r25, r25
    97ee:	5a 95       	dec	r21
    97f0:	a9 f7       	brne	.-22     	; 0x97dc <__udivmodhi4_loop>
    97f2:	80 95       	com	r24
    97f4:	90 95       	com	r25
    97f6:	bc 01       	movw	r22, r24
    97f8:	cd 01       	movw	r24, r26
    97fa:	08 95       	ret

000097fc <__divmodhi4>:
    97fc:	97 fb       	bst	r25, 7
    97fe:	07 2e       	mov	r0, r23
    9800:	16 f4       	brtc	.+4      	; 0x9806 <__divmodhi4+0xa>
    9802:	00 94       	com	r0
    9804:	07 d0       	rcall	.+14     	; 0x9814 <__divmodhi4_neg1>
    9806:	77 fd       	sbrc	r23, 7
    9808:	09 d0       	rcall	.+18     	; 0x981c <__divmodhi4_neg2>
    980a:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <__udivmodhi4>
    980e:	07 fc       	sbrc	r0, 7
    9810:	05 d0       	rcall	.+10     	; 0x981c <__divmodhi4_neg2>
    9812:	3e f4       	brtc	.+14     	; 0x9822 <__divmodhi4_exit>

00009814 <__divmodhi4_neg1>:
    9814:	90 95       	com	r25
    9816:	81 95       	neg	r24
    9818:	9f 4f       	sbci	r25, 0xFF	; 255
    981a:	08 95       	ret

0000981c <__divmodhi4_neg2>:
    981c:	70 95       	com	r23
    981e:	61 95       	neg	r22
    9820:	7f 4f       	sbci	r23, 0xFF	; 255

00009822 <__divmodhi4_exit>:
    9822:	08 95       	ret

00009824 <__udivmodsi4>:
    9824:	a1 e2       	ldi	r26, 0x21	; 33
    9826:	1a 2e       	mov	r1, r26
    9828:	aa 1b       	sub	r26, r26
    982a:	bb 1b       	sub	r27, r27
    982c:	fd 01       	movw	r30, r26
    982e:	0d c0       	rjmp	.+26     	; 0x984a <__udivmodsi4_ep>

00009830 <__udivmodsi4_loop>:
    9830:	aa 1f       	adc	r26, r26
    9832:	bb 1f       	adc	r27, r27
    9834:	ee 1f       	adc	r30, r30
    9836:	ff 1f       	adc	r31, r31
    9838:	a2 17       	cp	r26, r18
    983a:	b3 07       	cpc	r27, r19
    983c:	e4 07       	cpc	r30, r20
    983e:	f5 07       	cpc	r31, r21
    9840:	20 f0       	brcs	.+8      	; 0x984a <__udivmodsi4_ep>
    9842:	a2 1b       	sub	r26, r18
    9844:	b3 0b       	sbc	r27, r19
    9846:	e4 0b       	sbc	r30, r20
    9848:	f5 0b       	sbc	r31, r21

0000984a <__udivmodsi4_ep>:
    984a:	66 1f       	adc	r22, r22
    984c:	77 1f       	adc	r23, r23
    984e:	88 1f       	adc	r24, r24
    9850:	99 1f       	adc	r25, r25
    9852:	1a 94       	dec	r1
    9854:	69 f7       	brne	.-38     	; 0x9830 <__udivmodsi4_loop>
    9856:	60 95       	com	r22
    9858:	70 95       	com	r23
    985a:	80 95       	com	r24
    985c:	90 95       	com	r25
    985e:	9b 01       	movw	r18, r22
    9860:	ac 01       	movw	r20, r24
    9862:	bd 01       	movw	r22, r26
    9864:	cf 01       	movw	r24, r30
    9866:	08 95       	ret

00009868 <__tablejump2__>:
    9868:	ee 0f       	add	r30, r30
    986a:	ff 1f       	adc	r31, r31
    986c:	88 1f       	adc	r24, r24
    986e:	8b bf       	out	0x3b, r24	; 59
    9870:	07 90       	elpm	r0, Z+
    9872:	f6 91       	elpm	r31, Z
    9874:	e0 2d       	mov	r30, r0
    9876:	19 94       	eijmp

00009878 <__umulhisi3>:
    9878:	a2 9f       	mul	r26, r18
    987a:	b0 01       	movw	r22, r0
    987c:	b3 9f       	mul	r27, r19
    987e:	c0 01       	movw	r24, r0
    9880:	a3 9f       	mul	r26, r19
    9882:	70 0d       	add	r23, r0
    9884:	81 1d       	adc	r24, r1
    9886:	11 24       	eor	r1, r1
    9888:	91 1d       	adc	r25, r1
    988a:	b2 9f       	mul	r27, r18
    988c:	70 0d       	add	r23, r0
    988e:	81 1d       	adc	r24, r1
    9890:	11 24       	eor	r1, r1
    9892:	91 1d       	adc	r25, r1
    9894:	08 95       	ret

00009896 <__muluhisi3>:
    9896:	0e 94 3c 4c 	call	0x9878	; 0x9878 <__umulhisi3>
    989a:	a5 9f       	mul	r26, r21
    989c:	90 0d       	add	r25, r0
    989e:	b4 9f       	mul	r27, r20
    98a0:	90 0d       	add	r25, r0
    98a2:	a4 9f       	mul	r26, r20
    98a4:	80 0d       	add	r24, r0
    98a6:	91 1d       	adc	r25, r1
    98a8:	11 24       	eor	r1, r1
    98aa:	08 95       	ret

000098ac <malloc>:
    98ac:	0f 93       	push	r16
    98ae:	1f 93       	push	r17
    98b0:	cf 93       	push	r28
    98b2:	df 93       	push	r29
    98b4:	82 30       	cpi	r24, 0x02	; 2
    98b6:	91 05       	cpc	r25, r1
    98b8:	10 f4       	brcc	.+4      	; 0x98be <malloc+0x12>
    98ba:	82 e0       	ldi	r24, 0x02	; 2
    98bc:	90 e0       	ldi	r25, 0x00	; 0
    98be:	e0 91 db 28 	lds	r30, 0x28DB	; 0x8028db <__flp>
    98c2:	f0 91 dc 28 	lds	r31, 0x28DC	; 0x8028dc <__flp+0x1>
    98c6:	20 e0       	ldi	r18, 0x00	; 0
    98c8:	30 e0       	ldi	r19, 0x00	; 0
    98ca:	a0 e0       	ldi	r26, 0x00	; 0
    98cc:	b0 e0       	ldi	r27, 0x00	; 0
    98ce:	30 97       	sbiw	r30, 0x00	; 0
    98d0:	19 f1       	breq	.+70     	; 0x9918 <malloc+0x6c>
    98d2:	40 81       	ld	r20, Z
    98d4:	51 81       	ldd	r21, Z+1	; 0x01
    98d6:	02 81       	ldd	r16, Z+2	; 0x02
    98d8:	13 81       	ldd	r17, Z+3	; 0x03
    98da:	48 17       	cp	r20, r24
    98dc:	59 07       	cpc	r21, r25
    98de:	c8 f0       	brcs	.+50     	; 0x9912 <malloc+0x66>
    98e0:	84 17       	cp	r24, r20
    98e2:	95 07       	cpc	r25, r21
    98e4:	69 f4       	brne	.+26     	; 0x9900 <malloc+0x54>
    98e6:	10 97       	sbiw	r26, 0x00	; 0
    98e8:	31 f0       	breq	.+12     	; 0x98f6 <malloc+0x4a>
    98ea:	12 96       	adiw	r26, 0x02	; 2
    98ec:	0c 93       	st	X, r16
    98ee:	12 97       	sbiw	r26, 0x02	; 2
    98f0:	13 96       	adiw	r26, 0x03	; 3
    98f2:	1c 93       	st	X, r17
    98f4:	27 c0       	rjmp	.+78     	; 0x9944 <malloc+0x98>
    98f6:	00 93 db 28 	sts	0x28DB, r16	; 0x8028db <__flp>
    98fa:	10 93 dc 28 	sts	0x28DC, r17	; 0x8028dc <__flp+0x1>
    98fe:	22 c0       	rjmp	.+68     	; 0x9944 <malloc+0x98>
    9900:	21 15       	cp	r18, r1
    9902:	31 05       	cpc	r19, r1
    9904:	19 f0       	breq	.+6      	; 0x990c <malloc+0x60>
    9906:	42 17       	cp	r20, r18
    9908:	53 07       	cpc	r21, r19
    990a:	18 f4       	brcc	.+6      	; 0x9912 <malloc+0x66>
    990c:	9a 01       	movw	r18, r20
    990e:	bd 01       	movw	r22, r26
    9910:	ef 01       	movw	r28, r30
    9912:	df 01       	movw	r26, r30
    9914:	f8 01       	movw	r30, r16
    9916:	db cf       	rjmp	.-74     	; 0x98ce <malloc+0x22>
    9918:	21 15       	cp	r18, r1
    991a:	31 05       	cpc	r19, r1
    991c:	f9 f0       	breq	.+62     	; 0x995c <malloc+0xb0>
    991e:	28 1b       	sub	r18, r24
    9920:	39 0b       	sbc	r19, r25
    9922:	24 30       	cpi	r18, 0x04	; 4
    9924:	31 05       	cpc	r19, r1
    9926:	80 f4       	brcc	.+32     	; 0x9948 <malloc+0x9c>
    9928:	8a 81       	ldd	r24, Y+2	; 0x02
    992a:	9b 81       	ldd	r25, Y+3	; 0x03
    992c:	61 15       	cp	r22, r1
    992e:	71 05       	cpc	r23, r1
    9930:	21 f0       	breq	.+8      	; 0x993a <malloc+0x8e>
    9932:	fb 01       	movw	r30, r22
    9934:	82 83       	std	Z+2, r24	; 0x02
    9936:	93 83       	std	Z+3, r25	; 0x03
    9938:	04 c0       	rjmp	.+8      	; 0x9942 <malloc+0x96>
    993a:	80 93 db 28 	sts	0x28DB, r24	; 0x8028db <__flp>
    993e:	90 93 dc 28 	sts	0x28DC, r25	; 0x8028dc <__flp+0x1>
    9942:	fe 01       	movw	r30, r28
    9944:	32 96       	adiw	r30, 0x02	; 2
    9946:	44 c0       	rjmp	.+136    	; 0x99d0 <malloc+0x124>
    9948:	fe 01       	movw	r30, r28
    994a:	e2 0f       	add	r30, r18
    994c:	f3 1f       	adc	r31, r19
    994e:	81 93       	st	Z+, r24
    9950:	91 93       	st	Z+, r25
    9952:	22 50       	subi	r18, 0x02	; 2
    9954:	31 09       	sbc	r19, r1
    9956:	28 83       	st	Y, r18
    9958:	39 83       	std	Y+1, r19	; 0x01
    995a:	3a c0       	rjmp	.+116    	; 0x99d0 <malloc+0x124>
    995c:	20 91 d9 28 	lds	r18, 0x28D9	; 0x8028d9 <__brkval>
    9960:	30 91 da 28 	lds	r19, 0x28DA	; 0x8028da <__brkval+0x1>
    9964:	23 2b       	or	r18, r19
    9966:	41 f4       	brne	.+16     	; 0x9978 <malloc+0xcc>
    9968:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    996c:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    9970:	20 93 d9 28 	sts	0x28D9, r18	; 0x8028d9 <__brkval>
    9974:	30 93 da 28 	sts	0x28DA, r19	; 0x8028da <__brkval+0x1>
    9978:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    997c:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    9980:	21 15       	cp	r18, r1
    9982:	31 05       	cpc	r19, r1
    9984:	41 f4       	brne	.+16     	; 0x9996 <malloc+0xea>
    9986:	2d b7       	in	r18, 0x3d	; 61
    9988:	3e b7       	in	r19, 0x3e	; 62
    998a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    998e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    9992:	24 1b       	sub	r18, r20
    9994:	35 0b       	sbc	r19, r21
    9996:	e0 91 d9 28 	lds	r30, 0x28D9	; 0x8028d9 <__brkval>
    999a:	f0 91 da 28 	lds	r31, 0x28DA	; 0x8028da <__brkval+0x1>
    999e:	e2 17       	cp	r30, r18
    99a0:	f3 07       	cpc	r31, r19
    99a2:	a0 f4       	brcc	.+40     	; 0x99cc <malloc+0x120>
    99a4:	2e 1b       	sub	r18, r30
    99a6:	3f 0b       	sbc	r19, r31
    99a8:	28 17       	cp	r18, r24
    99aa:	39 07       	cpc	r19, r25
    99ac:	78 f0       	brcs	.+30     	; 0x99cc <malloc+0x120>
    99ae:	ac 01       	movw	r20, r24
    99b0:	4e 5f       	subi	r20, 0xFE	; 254
    99b2:	5f 4f       	sbci	r21, 0xFF	; 255
    99b4:	24 17       	cp	r18, r20
    99b6:	35 07       	cpc	r19, r21
    99b8:	48 f0       	brcs	.+18     	; 0x99cc <malloc+0x120>
    99ba:	4e 0f       	add	r20, r30
    99bc:	5f 1f       	adc	r21, r31
    99be:	40 93 d9 28 	sts	0x28D9, r20	; 0x8028d9 <__brkval>
    99c2:	50 93 da 28 	sts	0x28DA, r21	; 0x8028da <__brkval+0x1>
    99c6:	81 93       	st	Z+, r24
    99c8:	91 93       	st	Z+, r25
    99ca:	02 c0       	rjmp	.+4      	; 0x99d0 <malloc+0x124>
    99cc:	e0 e0       	ldi	r30, 0x00	; 0
    99ce:	f0 e0       	ldi	r31, 0x00	; 0
    99d0:	cf 01       	movw	r24, r30
    99d2:	df 91       	pop	r29
    99d4:	cf 91       	pop	r28
    99d6:	1f 91       	pop	r17
    99d8:	0f 91       	pop	r16
    99da:	08 95       	ret

000099dc <free>:
    99dc:	cf 93       	push	r28
    99de:	df 93       	push	r29
    99e0:	00 97       	sbiw	r24, 0x00	; 0
    99e2:	09 f4       	brne	.+2      	; 0x99e6 <free+0xa>
    99e4:	81 c0       	rjmp	.+258    	; 0x9ae8 <free+0x10c>
    99e6:	fc 01       	movw	r30, r24
    99e8:	32 97       	sbiw	r30, 0x02	; 2
    99ea:	12 82       	std	Z+2, r1	; 0x02
    99ec:	13 82       	std	Z+3, r1	; 0x03
    99ee:	a0 91 db 28 	lds	r26, 0x28DB	; 0x8028db <__flp>
    99f2:	b0 91 dc 28 	lds	r27, 0x28DC	; 0x8028dc <__flp+0x1>
    99f6:	10 97       	sbiw	r26, 0x00	; 0
    99f8:	81 f4       	brne	.+32     	; 0x9a1a <free+0x3e>
    99fa:	20 81       	ld	r18, Z
    99fc:	31 81       	ldd	r19, Z+1	; 0x01
    99fe:	82 0f       	add	r24, r18
    9a00:	93 1f       	adc	r25, r19
    9a02:	20 91 d9 28 	lds	r18, 0x28D9	; 0x8028d9 <__brkval>
    9a06:	30 91 da 28 	lds	r19, 0x28DA	; 0x8028da <__brkval+0x1>
    9a0a:	28 17       	cp	r18, r24
    9a0c:	39 07       	cpc	r19, r25
    9a0e:	51 f5       	brne	.+84     	; 0x9a64 <free+0x88>
    9a10:	e0 93 d9 28 	sts	0x28D9, r30	; 0x8028d9 <__brkval>
    9a14:	f0 93 da 28 	sts	0x28DA, r31	; 0x8028da <__brkval+0x1>
    9a18:	67 c0       	rjmp	.+206    	; 0x9ae8 <free+0x10c>
    9a1a:	ed 01       	movw	r28, r26
    9a1c:	20 e0       	ldi	r18, 0x00	; 0
    9a1e:	30 e0       	ldi	r19, 0x00	; 0
    9a20:	ce 17       	cp	r28, r30
    9a22:	df 07       	cpc	r29, r31
    9a24:	40 f4       	brcc	.+16     	; 0x9a36 <free+0x5a>
    9a26:	4a 81       	ldd	r20, Y+2	; 0x02
    9a28:	5b 81       	ldd	r21, Y+3	; 0x03
    9a2a:	9e 01       	movw	r18, r28
    9a2c:	41 15       	cp	r20, r1
    9a2e:	51 05       	cpc	r21, r1
    9a30:	f1 f0       	breq	.+60     	; 0x9a6e <free+0x92>
    9a32:	ea 01       	movw	r28, r20
    9a34:	f5 cf       	rjmp	.-22     	; 0x9a20 <free+0x44>
    9a36:	c2 83       	std	Z+2, r28	; 0x02
    9a38:	d3 83       	std	Z+3, r29	; 0x03
    9a3a:	40 81       	ld	r20, Z
    9a3c:	51 81       	ldd	r21, Z+1	; 0x01
    9a3e:	84 0f       	add	r24, r20
    9a40:	95 1f       	adc	r25, r21
    9a42:	c8 17       	cp	r28, r24
    9a44:	d9 07       	cpc	r29, r25
    9a46:	59 f4       	brne	.+22     	; 0x9a5e <free+0x82>
    9a48:	88 81       	ld	r24, Y
    9a4a:	99 81       	ldd	r25, Y+1	; 0x01
    9a4c:	84 0f       	add	r24, r20
    9a4e:	95 1f       	adc	r25, r21
    9a50:	02 96       	adiw	r24, 0x02	; 2
    9a52:	80 83       	st	Z, r24
    9a54:	91 83       	std	Z+1, r25	; 0x01
    9a56:	8a 81       	ldd	r24, Y+2	; 0x02
    9a58:	9b 81       	ldd	r25, Y+3	; 0x03
    9a5a:	82 83       	std	Z+2, r24	; 0x02
    9a5c:	93 83       	std	Z+3, r25	; 0x03
    9a5e:	21 15       	cp	r18, r1
    9a60:	31 05       	cpc	r19, r1
    9a62:	29 f4       	brne	.+10     	; 0x9a6e <free+0x92>
    9a64:	e0 93 db 28 	sts	0x28DB, r30	; 0x8028db <__flp>
    9a68:	f0 93 dc 28 	sts	0x28DC, r31	; 0x8028dc <__flp+0x1>
    9a6c:	3d c0       	rjmp	.+122    	; 0x9ae8 <free+0x10c>
    9a6e:	e9 01       	movw	r28, r18
    9a70:	ea 83       	std	Y+2, r30	; 0x02
    9a72:	fb 83       	std	Y+3, r31	; 0x03
    9a74:	49 91       	ld	r20, Y+
    9a76:	59 91       	ld	r21, Y+
    9a78:	c4 0f       	add	r28, r20
    9a7a:	d5 1f       	adc	r29, r21
    9a7c:	ec 17       	cp	r30, r28
    9a7e:	fd 07       	cpc	r31, r29
    9a80:	61 f4       	brne	.+24     	; 0x9a9a <free+0xbe>
    9a82:	80 81       	ld	r24, Z
    9a84:	91 81       	ldd	r25, Z+1	; 0x01
    9a86:	84 0f       	add	r24, r20
    9a88:	95 1f       	adc	r25, r21
    9a8a:	02 96       	adiw	r24, 0x02	; 2
    9a8c:	e9 01       	movw	r28, r18
    9a8e:	88 83       	st	Y, r24
    9a90:	99 83       	std	Y+1, r25	; 0x01
    9a92:	82 81       	ldd	r24, Z+2	; 0x02
    9a94:	93 81       	ldd	r25, Z+3	; 0x03
    9a96:	8a 83       	std	Y+2, r24	; 0x02
    9a98:	9b 83       	std	Y+3, r25	; 0x03
    9a9a:	e0 e0       	ldi	r30, 0x00	; 0
    9a9c:	f0 e0       	ldi	r31, 0x00	; 0
    9a9e:	12 96       	adiw	r26, 0x02	; 2
    9aa0:	8d 91       	ld	r24, X+
    9aa2:	9c 91       	ld	r25, X
    9aa4:	13 97       	sbiw	r26, 0x03	; 3
    9aa6:	00 97       	sbiw	r24, 0x00	; 0
    9aa8:	19 f0       	breq	.+6      	; 0x9ab0 <free+0xd4>
    9aaa:	fd 01       	movw	r30, r26
    9aac:	dc 01       	movw	r26, r24
    9aae:	f7 cf       	rjmp	.-18     	; 0x9a9e <free+0xc2>
    9ab0:	8d 91       	ld	r24, X+
    9ab2:	9c 91       	ld	r25, X
    9ab4:	11 97       	sbiw	r26, 0x01	; 1
    9ab6:	9d 01       	movw	r18, r26
    9ab8:	2e 5f       	subi	r18, 0xFE	; 254
    9aba:	3f 4f       	sbci	r19, 0xFF	; 255
    9abc:	82 0f       	add	r24, r18
    9abe:	93 1f       	adc	r25, r19
    9ac0:	20 91 d9 28 	lds	r18, 0x28D9	; 0x8028d9 <__brkval>
    9ac4:	30 91 da 28 	lds	r19, 0x28DA	; 0x8028da <__brkval+0x1>
    9ac8:	28 17       	cp	r18, r24
    9aca:	39 07       	cpc	r19, r25
    9acc:	69 f4       	brne	.+26     	; 0x9ae8 <free+0x10c>
    9ace:	30 97       	sbiw	r30, 0x00	; 0
    9ad0:	29 f4       	brne	.+10     	; 0x9adc <free+0x100>
    9ad2:	10 92 db 28 	sts	0x28DB, r1	; 0x8028db <__flp>
    9ad6:	10 92 dc 28 	sts	0x28DC, r1	; 0x8028dc <__flp+0x1>
    9ada:	02 c0       	rjmp	.+4      	; 0x9ae0 <free+0x104>
    9adc:	12 82       	std	Z+2, r1	; 0x02
    9ade:	13 82       	std	Z+3, r1	; 0x03
    9ae0:	a0 93 d9 28 	sts	0x28D9, r26	; 0x8028d9 <__brkval>
    9ae4:	b0 93 da 28 	sts	0x28DA, r27	; 0x8028da <__brkval+0x1>
    9ae8:	df 91       	pop	r29
    9aea:	cf 91       	pop	r28
    9aec:	08 95       	ret

00009aee <strtoul>:
    9aee:	3f 92       	push	r3
    9af0:	4f 92       	push	r4
    9af2:	5f 92       	push	r5
    9af4:	6f 92       	push	r6
    9af6:	7f 92       	push	r7
    9af8:	8f 92       	push	r8
    9afa:	9f 92       	push	r9
    9afc:	af 92       	push	r10
    9afe:	bf 92       	push	r11
    9b00:	cf 92       	push	r12
    9b02:	df 92       	push	r13
    9b04:	ef 92       	push	r14
    9b06:	ff 92       	push	r15
    9b08:	0f 93       	push	r16
    9b0a:	1f 93       	push	r17
    9b0c:	cf 93       	push	r28
    9b0e:	df 93       	push	r29
    9b10:	5c 01       	movw	r10, r24
    9b12:	6b 01       	movw	r12, r22
    9b14:	7a 01       	movw	r14, r20
    9b16:	61 15       	cp	r22, r1
    9b18:	71 05       	cpc	r23, r1
    9b1a:	19 f0       	breq	.+6      	; 0x9b22 <strtoul+0x34>
    9b1c:	fb 01       	movw	r30, r22
    9b1e:	80 83       	st	Z, r24
    9b20:	91 83       	std	Z+1, r25	; 0x01
    9b22:	e1 14       	cp	r14, r1
    9b24:	f1 04       	cpc	r15, r1
    9b26:	29 f0       	breq	.+10     	; 0x9b32 <strtoul+0x44>
    9b28:	c7 01       	movw	r24, r14
    9b2a:	02 97       	sbiw	r24, 0x02	; 2
    9b2c:	83 97       	sbiw	r24, 0x23	; 35
    9b2e:	08 f0       	brcs	.+2      	; 0x9b32 <strtoul+0x44>
    9b30:	c9 c0       	rjmp	.+402    	; 0x9cc4 <strtoul+0x1d6>
    9b32:	e5 01       	movw	r28, r10
    9b34:	21 96       	adiw	r28, 0x01	; 1
    9b36:	f5 01       	movw	r30, r10
    9b38:	10 81       	ld	r17, Z
    9b3a:	81 2f       	mov	r24, r17
    9b3c:	90 e0       	ldi	r25, 0x00	; 0
    9b3e:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <isspace>
    9b42:	89 2b       	or	r24, r25
    9b44:	11 f0       	breq	.+4      	; 0x9b4a <strtoul+0x5c>
    9b46:	5e 01       	movw	r10, r28
    9b48:	f4 cf       	rjmp	.-24     	; 0x9b32 <strtoul+0x44>
    9b4a:	1d 32       	cpi	r17, 0x2D	; 45
    9b4c:	29 f4       	brne	.+10     	; 0x9b58 <strtoul+0x6a>
    9b4e:	21 96       	adiw	r28, 0x01	; 1
    9b50:	f5 01       	movw	r30, r10
    9b52:	11 81       	ldd	r17, Z+1	; 0x01
    9b54:	01 e0       	ldi	r16, 0x01	; 1
    9b56:	07 c0       	rjmp	.+14     	; 0x9b66 <strtoul+0x78>
    9b58:	1b 32       	cpi	r17, 0x2B	; 43
    9b5a:	21 f4       	brne	.+8      	; 0x9b64 <strtoul+0x76>
    9b5c:	e5 01       	movw	r28, r10
    9b5e:	22 96       	adiw	r28, 0x02	; 2
    9b60:	f5 01       	movw	r30, r10
    9b62:	11 81       	ldd	r17, Z+1	; 0x01
    9b64:	00 e0       	ldi	r16, 0x00	; 0
    9b66:	e1 14       	cp	r14, r1
    9b68:	f1 04       	cpc	r15, r1
    9b6a:	b1 f0       	breq	.+44     	; 0x9b98 <strtoul+0xaa>
    9b6c:	f0 e1       	ldi	r31, 0x10	; 16
    9b6e:	ef 16       	cp	r14, r31
    9b70:	f1 04       	cpc	r15, r1
    9b72:	29 f4       	brne	.+10     	; 0x9b7e <strtoul+0x90>
    9b74:	b0 c0       	rjmp	.+352    	; 0x9cd6 <strtoul+0x1e8>
    9b76:	10 e3       	ldi	r17, 0x30	; 48
    9b78:	e1 14       	cp	r14, r1
    9b7a:	f1 04       	cpc	r15, r1
    9b7c:	01 f1       	breq	.+64     	; 0x9bbe <strtoul+0xd0>
    9b7e:	2a e0       	ldi	r18, 0x0A	; 10
    9b80:	e2 16       	cp	r14, r18
    9b82:	f1 04       	cpc	r15, r1
    9b84:	b1 f1       	breq	.+108    	; 0x9bf2 <strtoul+0x104>
    9b86:	80 e1       	ldi	r24, 0x10	; 16
    9b88:	e8 16       	cp	r14, r24
    9b8a:	f1 04       	cpc	r15, r1
    9b8c:	71 f0       	breq	.+28     	; 0x9baa <strtoul+0xbc>
    9b8e:	e8 e0       	ldi	r30, 0x08	; 8
    9b90:	ee 16       	cp	r14, r30
    9b92:	f1 04       	cpc	r15, r1
    9b94:	f1 f4       	brne	.+60     	; 0x9bd2 <strtoul+0xe4>
    9b96:	13 c0       	rjmp	.+38     	; 0x9bbe <strtoul+0xd0>
    9b98:	10 33       	cpi	r17, 0x30	; 48
    9b9a:	41 f5       	brne	.+80     	; 0x9bec <strtoul+0xfe>
    9b9c:	88 81       	ld	r24, Y
    9b9e:	8f 7d       	andi	r24, 0xDF	; 223
    9ba0:	88 35       	cpi	r24, 0x58	; 88
    9ba2:	49 f7       	brne	.-46     	; 0x9b76 <strtoul+0x88>
    9ba4:	19 81       	ldd	r17, Y+1	; 0x01
    9ba6:	22 96       	adiw	r28, 0x02	; 2
    9ba8:	02 60       	ori	r16, 0x02	; 2
    9baa:	f0 e1       	ldi	r31, 0x10	; 16
    9bac:	ef 2e       	mov	r14, r31
    9bae:	f1 2c       	mov	r15, r1
    9bb0:	88 24       	eor	r8, r8
    9bb2:	8a 94       	dec	r8
    9bb4:	98 2c       	mov	r9, r8
    9bb6:	a8 2c       	mov	r10, r8
    9bb8:	af e0       	ldi	r26, 0x0F	; 15
    9bba:	ba 2e       	mov	r11, r26
    9bbc:	20 c0       	rjmp	.+64     	; 0x9bfe <strtoul+0x110>
    9bbe:	78 e0       	ldi	r23, 0x08	; 8
    9bc0:	e7 2e       	mov	r14, r23
    9bc2:	f1 2c       	mov	r15, r1
    9bc4:	88 24       	eor	r8, r8
    9bc6:	8a 94       	dec	r8
    9bc8:	98 2c       	mov	r9, r8
    9bca:	a8 2c       	mov	r10, r8
    9bcc:	ef e1       	ldi	r30, 0x1F	; 31
    9bce:	be 2e       	mov	r11, r30
    9bd0:	16 c0       	rjmp	.+44     	; 0x9bfe <strtoul+0x110>
    9bd2:	6f ef       	ldi	r22, 0xFF	; 255
    9bd4:	7f ef       	ldi	r23, 0xFF	; 255
    9bd6:	cb 01       	movw	r24, r22
    9bd8:	97 01       	movw	r18, r14
    9bda:	0f 2c       	mov	r0, r15
    9bdc:	00 0c       	add	r0, r0
    9bde:	44 0b       	sbc	r20, r20
    9be0:	55 0b       	sbc	r21, r21
    9be2:	0e 94 12 4c 	call	0x9824	; 0x9824 <__udivmodsi4>
    9be6:	49 01       	movw	r8, r18
    9be8:	5a 01       	movw	r10, r20
    9bea:	09 c0       	rjmp	.+18     	; 0x9bfe <strtoul+0x110>
    9bec:	8a e0       	ldi	r24, 0x0A	; 10
    9bee:	e8 2e       	mov	r14, r24
    9bf0:	f1 2c       	mov	r15, r1
    9bf2:	69 e9       	ldi	r22, 0x99	; 153
    9bf4:	86 2e       	mov	r8, r22
    9bf6:	98 2c       	mov	r9, r8
    9bf8:	a8 2c       	mov	r10, r8
    9bfa:	69 e1       	ldi	r22, 0x19	; 25
    9bfc:	b6 2e       	mov	r11, r22
    9bfe:	40 e0       	ldi	r20, 0x00	; 0
    9c00:	60 e0       	ldi	r22, 0x00	; 0
    9c02:	70 e0       	ldi	r23, 0x00	; 0
    9c04:	cb 01       	movw	r24, r22
    9c06:	27 01       	movw	r4, r14
    9c08:	0f 2c       	mov	r0, r15
    9c0a:	00 0c       	add	r0, r0
    9c0c:	66 08       	sbc	r6, r6
    9c0e:	77 08       	sbc	r7, r7
    9c10:	fe 01       	movw	r30, r28
    9c12:	50 ed       	ldi	r21, 0xD0	; 208
    9c14:	35 2e       	mov	r3, r21
    9c16:	31 0e       	add	r3, r17
    9c18:	29 e0       	ldi	r18, 0x09	; 9
    9c1a:	23 15       	cp	r18, r3
    9c1c:	70 f4       	brcc	.+28     	; 0x9c3a <strtoul+0x14c>
    9c1e:	2f eb       	ldi	r18, 0xBF	; 191
    9c20:	21 0f       	add	r18, r17
    9c22:	2a 31       	cpi	r18, 0x1A	; 26
    9c24:	18 f4       	brcc	.+6      	; 0x9c2c <strtoul+0x13e>
    9c26:	39 ec       	ldi	r19, 0xC9	; 201
    9c28:	33 2e       	mov	r3, r19
    9c2a:	06 c0       	rjmp	.+12     	; 0x9c38 <strtoul+0x14a>
    9c2c:	2f e9       	ldi	r18, 0x9F	; 159
    9c2e:	21 0f       	add	r18, r17
    9c30:	2a 31       	cpi	r18, 0x1A	; 26
    9c32:	30 f5       	brcc	.+76     	; 0x9c80 <strtoul+0x192>
    9c34:	29 ea       	ldi	r18, 0xA9	; 169
    9c36:	32 2e       	mov	r3, r18
    9c38:	31 0e       	add	r3, r17
    9c3a:	23 2d       	mov	r18, r3
    9c3c:	30 e0       	ldi	r19, 0x00	; 0
    9c3e:	2e 15       	cp	r18, r14
    9c40:	3f 05       	cpc	r19, r15
    9c42:	f4 f4       	brge	.+60     	; 0x9c80 <strtoul+0x192>
    9c44:	4f 3f       	cpi	r20, 0xFF	; 255
    9c46:	c9 f0       	breq	.+50     	; 0x9c7a <strtoul+0x18c>
    9c48:	86 16       	cp	r8, r22
    9c4a:	97 06       	cpc	r9, r23
    9c4c:	a8 06       	cpc	r10, r24
    9c4e:	b9 06       	cpc	r11, r25
    9c50:	88 f0       	brcs	.+34     	; 0x9c74 <strtoul+0x186>
    9c52:	a3 01       	movw	r20, r6
    9c54:	92 01       	movw	r18, r4
    9c56:	0e 94 da 4b 	call	0x97b4	; 0x97b4 <__mulsi3>
    9c5a:	23 2d       	mov	r18, r3
    9c5c:	30 e0       	ldi	r19, 0x00	; 0
    9c5e:	40 e0       	ldi	r20, 0x00	; 0
    9c60:	50 e0       	ldi	r21, 0x00	; 0
    9c62:	62 0f       	add	r22, r18
    9c64:	73 1f       	adc	r23, r19
    9c66:	84 1f       	adc	r24, r20
    9c68:	95 1f       	adc	r25, r21
    9c6a:	62 17       	cp	r22, r18
    9c6c:	73 07       	cpc	r23, r19
    9c6e:	84 07       	cpc	r24, r20
    9c70:	95 07       	cpc	r25, r21
    9c72:	10 f4       	brcc	.+4      	; 0x9c78 <strtoul+0x18a>
    9c74:	4f ef       	ldi	r20, 0xFF	; 255
    9c76:	01 c0       	rjmp	.+2      	; 0x9c7a <strtoul+0x18c>
    9c78:	41 e0       	ldi	r20, 0x01	; 1
    9c7a:	21 96       	adiw	r28, 0x01	; 1
    9c7c:	10 81       	ld	r17, Z
    9c7e:	c8 cf       	rjmp	.-112    	; 0x9c10 <strtoul+0x122>
    9c80:	c1 14       	cp	r12, r1
    9c82:	d1 04       	cpc	r13, r1
    9c84:	51 f0       	breq	.+20     	; 0x9c9a <strtoul+0x1ac>
    9c86:	44 23       	and	r20, r20
    9c88:	11 f0       	breq	.+4      	; 0x9c8e <strtoul+0x1a0>
    9c8a:	21 97       	sbiw	r28, 0x01	; 1
    9c8c:	03 c0       	rjmp	.+6      	; 0x9c94 <strtoul+0x1a6>
    9c8e:	01 ff       	sbrs	r16, 1
    9c90:	04 c0       	rjmp	.+8      	; 0x9c9a <strtoul+0x1ac>
    9c92:	22 97       	sbiw	r28, 0x02	; 2
    9c94:	f6 01       	movw	r30, r12
    9c96:	c0 83       	st	Z, r28
    9c98:	d1 83       	std	Z+1, r29	; 0x01
    9c9a:	00 ff       	sbrs	r16, 0
    9c9c:	07 c0       	rjmp	.+14     	; 0x9cac <strtoul+0x1be>
    9c9e:	90 95       	com	r25
    9ca0:	80 95       	com	r24
    9ca2:	70 95       	com	r23
    9ca4:	61 95       	neg	r22
    9ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    9ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    9caa:	9f 4f       	sbci	r25, 0xFF	; 255
    9cac:	4f 3f       	cpi	r20, 0xFF	; 255
    9cae:	79 f4       	brne	.+30     	; 0x9cce <strtoul+0x1e0>
    9cb0:	82 e2       	ldi	r24, 0x22	; 34
    9cb2:	90 e0       	ldi	r25, 0x00	; 0
    9cb4:	80 93 e3 28 	sts	0x28E3, r24	; 0x8028e3 <errno>
    9cb8:	90 93 e4 28 	sts	0x28E4, r25	; 0x8028e4 <errno+0x1>
    9cbc:	3f ef       	ldi	r19, 0xFF	; 255
    9cbe:	2f ef       	ldi	r18, 0xFF	; 255
    9cc0:	9f ef       	ldi	r25, 0xFF	; 255
    9cc2:	0d c0       	rjmp	.+26     	; 0x9cde <strtoul+0x1f0>
    9cc4:	40 e0       	ldi	r20, 0x00	; 0
    9cc6:	30 e0       	ldi	r19, 0x00	; 0
    9cc8:	20 e0       	ldi	r18, 0x00	; 0
    9cca:	90 e0       	ldi	r25, 0x00	; 0
    9ccc:	08 c0       	rjmp	.+16     	; 0x9cde <strtoul+0x1f0>
    9cce:	46 2f       	mov	r20, r22
    9cd0:	37 2f       	mov	r19, r23
    9cd2:	28 2f       	mov	r18, r24
    9cd4:	04 c0       	rjmp	.+8      	; 0x9cde <strtoul+0x1f0>
    9cd6:	10 33       	cpi	r17, 0x30	; 48
    9cd8:	09 f0       	breq	.+2      	; 0x9cdc <strtoul+0x1ee>
    9cda:	67 cf       	rjmp	.-306    	; 0x9baa <strtoul+0xbc>
    9cdc:	5f cf       	rjmp	.-322    	; 0x9b9c <strtoul+0xae>
    9cde:	64 2f       	mov	r22, r20
    9ce0:	73 2f       	mov	r23, r19
    9ce2:	82 2f       	mov	r24, r18
    9ce4:	df 91       	pop	r29
    9ce6:	cf 91       	pop	r28
    9ce8:	1f 91       	pop	r17
    9cea:	0f 91       	pop	r16
    9cec:	ff 90       	pop	r15
    9cee:	ef 90       	pop	r14
    9cf0:	df 90       	pop	r13
    9cf2:	cf 90       	pop	r12
    9cf4:	bf 90       	pop	r11
    9cf6:	af 90       	pop	r10
    9cf8:	9f 90       	pop	r9
    9cfa:	8f 90       	pop	r8
    9cfc:	7f 90       	pop	r7
    9cfe:	6f 90       	pop	r6
    9d00:	5f 90       	pop	r5
    9d02:	4f 90       	pop	r4
    9d04:	3f 90       	pop	r3
    9d06:	08 95       	ret

00009d08 <atoi>:
    9d08:	fc 01       	movw	r30, r24
    9d0a:	88 27       	eor	r24, r24
    9d0c:	99 27       	eor	r25, r25
    9d0e:	e8 94       	clt
    9d10:	21 91       	ld	r18, Z+
    9d12:	20 32       	cpi	r18, 0x20	; 32
    9d14:	e9 f3       	breq	.-6      	; 0x9d10 <atoi+0x8>
    9d16:	29 30       	cpi	r18, 0x09	; 9
    9d18:	10 f0       	brcs	.+4      	; 0x9d1e <atoi+0x16>
    9d1a:	2e 30       	cpi	r18, 0x0E	; 14
    9d1c:	c8 f3       	brcs	.-14     	; 0x9d10 <atoi+0x8>
    9d1e:	2b 32       	cpi	r18, 0x2B	; 43
    9d20:	41 f0       	breq	.+16     	; 0x9d32 <atoi+0x2a>
    9d22:	2d 32       	cpi	r18, 0x2D	; 45
    9d24:	39 f4       	brne	.+14     	; 0x9d34 <atoi+0x2c>
    9d26:	68 94       	set
    9d28:	04 c0       	rjmp	.+8      	; 0x9d32 <atoi+0x2a>
    9d2a:	0e 94 17 50 	call	0xa02e	; 0xa02e <__mulhi_const_10>
    9d2e:	82 0f       	add	r24, r18
    9d30:	91 1d       	adc	r25, r1
    9d32:	21 91       	ld	r18, Z+
    9d34:	20 53       	subi	r18, 0x30	; 48
    9d36:	2a 30       	cpi	r18, 0x0A	; 10
    9d38:	c0 f3       	brcs	.-16     	; 0x9d2a <atoi+0x22>
    9d3a:	1e f4       	brtc	.+6      	; 0x9d42 <atoi+0x3a>
    9d3c:	90 95       	com	r25
    9d3e:	81 95       	neg	r24
    9d40:	9f 4f       	sbci	r25, 0xFF	; 255
    9d42:	08 95       	ret

00009d44 <__ftoa_engine>:
    9d44:	28 30       	cpi	r18, 0x08	; 8
    9d46:	08 f0       	brcs	.+2      	; 0x9d4a <__ftoa_engine+0x6>
    9d48:	27 e0       	ldi	r18, 0x07	; 7
    9d4a:	33 27       	eor	r19, r19
    9d4c:	da 01       	movw	r26, r20
    9d4e:	99 0f       	add	r25, r25
    9d50:	31 1d       	adc	r19, r1
    9d52:	87 fd       	sbrc	r24, 7
    9d54:	91 60       	ori	r25, 0x01	; 1
    9d56:	00 96       	adiw	r24, 0x00	; 0
    9d58:	61 05       	cpc	r22, r1
    9d5a:	71 05       	cpc	r23, r1
    9d5c:	39 f4       	brne	.+14     	; 0x9d6c <__ftoa_engine+0x28>
    9d5e:	32 60       	ori	r19, 0x02	; 2
    9d60:	2e 5f       	subi	r18, 0xFE	; 254
    9d62:	3d 93       	st	X+, r19
    9d64:	30 e3       	ldi	r19, 0x30	; 48
    9d66:	2a 95       	dec	r18
    9d68:	e1 f7       	brne	.-8      	; 0x9d62 <__ftoa_engine+0x1e>
    9d6a:	08 95       	ret
    9d6c:	9f 3f       	cpi	r25, 0xFF	; 255
    9d6e:	30 f0       	brcs	.+12     	; 0x9d7c <__ftoa_engine+0x38>
    9d70:	80 38       	cpi	r24, 0x80	; 128
    9d72:	71 05       	cpc	r23, r1
    9d74:	61 05       	cpc	r22, r1
    9d76:	09 f0       	breq	.+2      	; 0x9d7a <__ftoa_engine+0x36>
    9d78:	3c 5f       	subi	r19, 0xFC	; 252
    9d7a:	3c 5f       	subi	r19, 0xFC	; 252
    9d7c:	3d 93       	st	X+, r19
    9d7e:	91 30       	cpi	r25, 0x01	; 1
    9d80:	08 f0       	brcs	.+2      	; 0x9d84 <__ftoa_engine+0x40>
    9d82:	80 68       	ori	r24, 0x80	; 128
    9d84:	91 1d       	adc	r25, r1
    9d86:	df 93       	push	r29
    9d88:	cf 93       	push	r28
    9d8a:	1f 93       	push	r17
    9d8c:	0f 93       	push	r16
    9d8e:	ff 92       	push	r15
    9d90:	ef 92       	push	r14
    9d92:	19 2f       	mov	r17, r25
    9d94:	98 7f       	andi	r25, 0xF8	; 248
    9d96:	96 95       	lsr	r25
    9d98:	e9 2f       	mov	r30, r25
    9d9a:	96 95       	lsr	r25
    9d9c:	96 95       	lsr	r25
    9d9e:	e9 0f       	add	r30, r25
    9da0:	ff 27       	eor	r31, r31
    9da2:	e0 55       	subi	r30, 0x50	; 80
    9da4:	fc 4f       	sbci	r31, 0xFC	; 252
    9da6:	99 27       	eor	r25, r25
    9da8:	33 27       	eor	r19, r19
    9daa:	ee 24       	eor	r14, r14
    9dac:	ff 24       	eor	r15, r15
    9dae:	a7 01       	movw	r20, r14
    9db0:	e7 01       	movw	r28, r14
    9db2:	05 90       	lpm	r0, Z+
    9db4:	08 94       	sec
    9db6:	07 94       	ror	r0
    9db8:	28 f4       	brcc	.+10     	; 0x9dc4 <__ftoa_engine+0x80>
    9dba:	36 0f       	add	r19, r22
    9dbc:	e7 1e       	adc	r14, r23
    9dbe:	f8 1e       	adc	r15, r24
    9dc0:	49 1f       	adc	r20, r25
    9dc2:	51 1d       	adc	r21, r1
    9dc4:	66 0f       	add	r22, r22
    9dc6:	77 1f       	adc	r23, r23
    9dc8:	88 1f       	adc	r24, r24
    9dca:	99 1f       	adc	r25, r25
    9dcc:	06 94       	lsr	r0
    9dce:	a1 f7       	brne	.-24     	; 0x9db8 <__ftoa_engine+0x74>
    9dd0:	05 90       	lpm	r0, Z+
    9dd2:	07 94       	ror	r0
    9dd4:	28 f4       	brcc	.+10     	; 0x9de0 <__ftoa_engine+0x9c>
    9dd6:	e7 0e       	add	r14, r23
    9dd8:	f8 1e       	adc	r15, r24
    9dda:	49 1f       	adc	r20, r25
    9ddc:	56 1f       	adc	r21, r22
    9dde:	c1 1d       	adc	r28, r1
    9de0:	77 0f       	add	r23, r23
    9de2:	88 1f       	adc	r24, r24
    9de4:	99 1f       	adc	r25, r25
    9de6:	66 1f       	adc	r22, r22
    9de8:	06 94       	lsr	r0
    9dea:	a1 f7       	brne	.-24     	; 0x9dd4 <__ftoa_engine+0x90>
    9dec:	05 90       	lpm	r0, Z+
    9dee:	07 94       	ror	r0
    9df0:	28 f4       	brcc	.+10     	; 0x9dfc <__ftoa_engine+0xb8>
    9df2:	f8 0e       	add	r15, r24
    9df4:	49 1f       	adc	r20, r25
    9df6:	56 1f       	adc	r21, r22
    9df8:	c7 1f       	adc	r28, r23
    9dfa:	d1 1d       	adc	r29, r1
    9dfc:	88 0f       	add	r24, r24
    9dfe:	99 1f       	adc	r25, r25
    9e00:	66 1f       	adc	r22, r22
    9e02:	77 1f       	adc	r23, r23
    9e04:	06 94       	lsr	r0
    9e06:	a1 f7       	brne	.-24     	; 0x9df0 <__ftoa_engine+0xac>
    9e08:	05 90       	lpm	r0, Z+
    9e0a:	07 94       	ror	r0
    9e0c:	20 f4       	brcc	.+8      	; 0x9e16 <__ftoa_engine+0xd2>
    9e0e:	49 0f       	add	r20, r25
    9e10:	56 1f       	adc	r21, r22
    9e12:	c7 1f       	adc	r28, r23
    9e14:	d8 1f       	adc	r29, r24
    9e16:	99 0f       	add	r25, r25
    9e18:	66 1f       	adc	r22, r22
    9e1a:	77 1f       	adc	r23, r23
    9e1c:	88 1f       	adc	r24, r24
    9e1e:	06 94       	lsr	r0
    9e20:	a9 f7       	brne	.-22     	; 0x9e0c <__ftoa_engine+0xc8>
    9e22:	84 91       	lpm	r24, Z
    9e24:	10 95       	com	r17
    9e26:	17 70       	andi	r17, 0x07	; 7
    9e28:	41 f0       	breq	.+16     	; 0x9e3a <__ftoa_engine+0xf6>
    9e2a:	d6 95       	lsr	r29
    9e2c:	c7 95       	ror	r28
    9e2e:	57 95       	ror	r21
    9e30:	47 95       	ror	r20
    9e32:	f7 94       	ror	r15
    9e34:	e7 94       	ror	r14
    9e36:	1a 95       	dec	r17
    9e38:	c1 f7       	brne	.-16     	; 0x9e2a <__ftoa_engine+0xe6>
    9e3a:	e6 e5       	ldi	r30, 0x56	; 86
    9e3c:	f3 e0       	ldi	r31, 0x03	; 3
    9e3e:	68 94       	set
    9e40:	15 90       	lpm	r1, Z+
    9e42:	15 91       	lpm	r17, Z+
    9e44:	35 91       	lpm	r19, Z+
    9e46:	65 91       	lpm	r22, Z+
    9e48:	95 91       	lpm	r25, Z+
    9e4a:	05 90       	lpm	r0, Z+
    9e4c:	7f e2       	ldi	r23, 0x2F	; 47
    9e4e:	73 95       	inc	r23
    9e50:	e1 18       	sub	r14, r1
    9e52:	f1 0a       	sbc	r15, r17
    9e54:	43 0b       	sbc	r20, r19
    9e56:	56 0b       	sbc	r21, r22
    9e58:	c9 0b       	sbc	r28, r25
    9e5a:	d0 09       	sbc	r29, r0
    9e5c:	c0 f7       	brcc	.-16     	; 0x9e4e <__ftoa_engine+0x10a>
    9e5e:	e1 0c       	add	r14, r1
    9e60:	f1 1e       	adc	r15, r17
    9e62:	43 1f       	adc	r20, r19
    9e64:	56 1f       	adc	r21, r22
    9e66:	c9 1f       	adc	r28, r25
    9e68:	d0 1d       	adc	r29, r0
    9e6a:	7e f4       	brtc	.+30     	; 0x9e8a <__ftoa_engine+0x146>
    9e6c:	70 33       	cpi	r23, 0x30	; 48
    9e6e:	11 f4       	brne	.+4      	; 0x9e74 <__ftoa_engine+0x130>
    9e70:	8a 95       	dec	r24
    9e72:	e6 cf       	rjmp	.-52     	; 0x9e40 <__ftoa_engine+0xfc>
    9e74:	e8 94       	clt
    9e76:	01 50       	subi	r16, 0x01	; 1
    9e78:	30 f0       	brcs	.+12     	; 0x9e86 <__ftoa_engine+0x142>
    9e7a:	08 0f       	add	r16, r24
    9e7c:	0a f4       	brpl	.+2      	; 0x9e80 <__ftoa_engine+0x13c>
    9e7e:	00 27       	eor	r16, r16
    9e80:	02 17       	cp	r16, r18
    9e82:	08 f4       	brcc	.+2      	; 0x9e86 <__ftoa_engine+0x142>
    9e84:	20 2f       	mov	r18, r16
    9e86:	23 95       	inc	r18
    9e88:	02 2f       	mov	r16, r18
    9e8a:	7a 33       	cpi	r23, 0x3A	; 58
    9e8c:	28 f0       	brcs	.+10     	; 0x9e98 <__ftoa_engine+0x154>
    9e8e:	79 e3       	ldi	r23, 0x39	; 57
    9e90:	7d 93       	st	X+, r23
    9e92:	2a 95       	dec	r18
    9e94:	e9 f7       	brne	.-6      	; 0x9e90 <__ftoa_engine+0x14c>
    9e96:	10 c0       	rjmp	.+32     	; 0x9eb8 <__ftoa_engine+0x174>
    9e98:	7d 93       	st	X+, r23
    9e9a:	2a 95       	dec	r18
    9e9c:	89 f6       	brne	.-94     	; 0x9e40 <__ftoa_engine+0xfc>
    9e9e:	06 94       	lsr	r0
    9ea0:	97 95       	ror	r25
    9ea2:	67 95       	ror	r22
    9ea4:	37 95       	ror	r19
    9ea6:	17 95       	ror	r17
    9ea8:	17 94       	ror	r1
    9eaa:	e1 18       	sub	r14, r1
    9eac:	f1 0a       	sbc	r15, r17
    9eae:	43 0b       	sbc	r20, r19
    9eb0:	56 0b       	sbc	r21, r22
    9eb2:	c9 0b       	sbc	r28, r25
    9eb4:	d0 09       	sbc	r29, r0
    9eb6:	98 f0       	brcs	.+38     	; 0x9ede <__ftoa_engine+0x19a>
    9eb8:	23 95       	inc	r18
    9eba:	7e 91       	ld	r23, -X
    9ebc:	73 95       	inc	r23
    9ebe:	7a 33       	cpi	r23, 0x3A	; 58
    9ec0:	08 f0       	brcs	.+2      	; 0x9ec4 <__ftoa_engine+0x180>
    9ec2:	70 e3       	ldi	r23, 0x30	; 48
    9ec4:	7c 93       	st	X, r23
    9ec6:	20 13       	cpse	r18, r16
    9ec8:	b8 f7       	brcc	.-18     	; 0x9eb8 <__ftoa_engine+0x174>
    9eca:	7e 91       	ld	r23, -X
    9ecc:	70 61       	ori	r23, 0x10	; 16
    9ece:	7d 93       	st	X+, r23
    9ed0:	30 f0       	brcs	.+12     	; 0x9ede <__ftoa_engine+0x19a>
    9ed2:	83 95       	inc	r24
    9ed4:	71 e3       	ldi	r23, 0x31	; 49
    9ed6:	7d 93       	st	X+, r23
    9ed8:	70 e3       	ldi	r23, 0x30	; 48
    9eda:	2a 95       	dec	r18
    9edc:	e1 f7       	brne	.-8      	; 0x9ed6 <__ftoa_engine+0x192>
    9ede:	11 24       	eor	r1, r1
    9ee0:	ef 90       	pop	r14
    9ee2:	ff 90       	pop	r15
    9ee4:	0f 91       	pop	r16
    9ee6:	1f 91       	pop	r17
    9ee8:	cf 91       	pop	r28
    9eea:	df 91       	pop	r29
    9eec:	99 27       	eor	r25, r25
    9eee:	87 fd       	sbrc	r24, 7
    9ef0:	90 95       	com	r25
    9ef2:	08 95       	ret

00009ef4 <isspace>:
    9ef4:	91 11       	cpse	r25, r1
    9ef6:	0c 94 ab 51 	jmp	0xa356	; 0xa356 <__ctype_isfalse>
    9efa:	80 32       	cpi	r24, 0x20	; 32
    9efc:	19 f0       	breq	.+6      	; 0x9f04 <isspace+0x10>
    9efe:	89 50       	subi	r24, 0x09	; 9
    9f00:	85 50       	subi	r24, 0x05	; 5
    9f02:	c8 f7       	brcc	.-14     	; 0x9ef6 <isspace+0x2>
    9f04:	08 95       	ret

00009f06 <tolower>:
    9f06:	91 11       	cpse	r25, r1
    9f08:	08 95       	ret
    9f0a:	81 54       	subi	r24, 0x41	; 65
    9f0c:	8a 51       	subi	r24, 0x1A	; 26
    9f0e:	08 f4       	brcc	.+2      	; 0x9f12 <tolower+0xc>
    9f10:	80 5e       	subi	r24, 0xE0	; 224
    9f12:	85 5a       	subi	r24, 0xA5	; 165
    9f14:	08 95       	ret

00009f16 <strchr_P>:
    9f16:	fc 01       	movw	r30, r24
    9f18:	05 90       	lpm	r0, Z+
    9f1a:	06 16       	cp	r0, r22
    9f1c:	21 f0       	breq	.+8      	; 0x9f26 <strchr_P+0x10>
    9f1e:	00 20       	and	r0, r0
    9f20:	d9 f7       	brne	.-10     	; 0x9f18 <strchr_P+0x2>
    9f22:	c0 01       	movw	r24, r0
    9f24:	08 95       	ret
    9f26:	31 97       	sbiw	r30, 0x01	; 1
    9f28:	cf 01       	movw	r24, r30
    9f2a:	08 95       	ret

00009f2c <strcmp_P>:
    9f2c:	fb 01       	movw	r30, r22
    9f2e:	dc 01       	movw	r26, r24
    9f30:	8d 91       	ld	r24, X+
    9f32:	05 90       	lpm	r0, Z+
    9f34:	80 19       	sub	r24, r0
    9f36:	01 10       	cpse	r0, r1
    9f38:	d9 f3       	breq	.-10     	; 0x9f30 <strcmp_P+0x4>
    9f3a:	99 0b       	sbc	r25, r25
    9f3c:	08 95       	ret

00009f3e <strnlen_P>:
    9f3e:	fc 01       	movw	r30, r24
    9f40:	05 90       	lpm	r0, Z+
    9f42:	61 50       	subi	r22, 0x01	; 1
    9f44:	70 40       	sbci	r23, 0x00	; 0
    9f46:	01 10       	cpse	r0, r1
    9f48:	d8 f7       	brcc	.-10     	; 0x9f40 <strnlen_P+0x2>
    9f4a:	80 95       	com	r24
    9f4c:	90 95       	com	r25
    9f4e:	8e 0f       	add	r24, r30
    9f50:	9f 1f       	adc	r25, r31
    9f52:	08 95       	ret

00009f54 <strtok>:
    9f54:	48 e0       	ldi	r20, 0x08	; 8
    9f56:	53 e2       	ldi	r21, 0x23	; 35
    9f58:	0c 94 f0 4f 	jmp	0x9fe0	; 0x9fe0 <strtok_r>

00009f5c <memcpy>:
    9f5c:	fb 01       	movw	r30, r22
    9f5e:	dc 01       	movw	r26, r24
    9f60:	02 c0       	rjmp	.+4      	; 0x9f66 <memcpy+0xa>
    9f62:	01 90       	ld	r0, Z+
    9f64:	0d 92       	st	X+, r0
    9f66:	41 50       	subi	r20, 0x01	; 1
    9f68:	50 40       	sbci	r21, 0x00	; 0
    9f6a:	d8 f7       	brcc	.-10     	; 0x9f62 <memcpy+0x6>
    9f6c:	08 95       	ret

00009f6e <strcmp>:
    9f6e:	fb 01       	movw	r30, r22
    9f70:	dc 01       	movw	r26, r24
    9f72:	8d 91       	ld	r24, X+
    9f74:	01 90       	ld	r0, Z+
    9f76:	80 19       	sub	r24, r0
    9f78:	01 10       	cpse	r0, r1
    9f7a:	d9 f3       	breq	.-10     	; 0x9f72 <strcmp+0x4>
    9f7c:	99 0b       	sbc	r25, r25
    9f7e:	08 95       	ret

00009f80 <strcpy>:
    9f80:	fb 01       	movw	r30, r22
    9f82:	dc 01       	movw	r26, r24
    9f84:	01 90       	ld	r0, Z+
    9f86:	0d 92       	st	X+, r0
    9f88:	00 20       	and	r0, r0
    9f8a:	e1 f7       	brne	.-8      	; 0x9f84 <strcpy+0x4>
    9f8c:	08 95       	ret

00009f8e <strcspn>:
    9f8e:	dc 01       	movw	r26, r24
    9f90:	5d 91       	ld	r21, X+
    9f92:	55 23       	and	r21, r21
    9f94:	31 f0       	breq	.+12     	; 0x9fa2 <strcspn+0x14>
    9f96:	fb 01       	movw	r30, r22
    9f98:	01 90       	ld	r0, Z+
    9f9a:	05 16       	cp	r0, r21
    9f9c:	01 10       	cpse	r0, r1
    9f9e:	e1 f7       	brne	.-8      	; 0x9f98 <strcspn+0xa>
    9fa0:	b9 f7       	brne	.-18     	; 0x9f90 <strcspn+0x2>
    9fa2:	80 95       	com	r24
    9fa4:	90 95       	com	r25
    9fa6:	8a 0f       	add	r24, r26
    9fa8:	9b 1f       	adc	r25, r27
    9faa:	08 95       	ret

00009fac <strncpy>:
    9fac:	fb 01       	movw	r30, r22
    9fae:	dc 01       	movw	r26, r24
    9fb0:	41 50       	subi	r20, 0x01	; 1
    9fb2:	50 40       	sbci	r21, 0x00	; 0
    9fb4:	48 f0       	brcs	.+18     	; 0x9fc8 <strncpy+0x1c>
    9fb6:	01 90       	ld	r0, Z+
    9fb8:	0d 92       	st	X+, r0
    9fba:	00 20       	and	r0, r0
    9fbc:	c9 f7       	brne	.-14     	; 0x9fb0 <strncpy+0x4>
    9fbe:	01 c0       	rjmp	.+2      	; 0x9fc2 <strncpy+0x16>
    9fc0:	1d 92       	st	X+, r1
    9fc2:	41 50       	subi	r20, 0x01	; 1
    9fc4:	50 40       	sbci	r21, 0x00	; 0
    9fc6:	e0 f7       	brcc	.-8      	; 0x9fc0 <strncpy+0x14>
    9fc8:	08 95       	ret

00009fca <strnlen>:
    9fca:	fc 01       	movw	r30, r24
    9fcc:	61 50       	subi	r22, 0x01	; 1
    9fce:	70 40       	sbci	r23, 0x00	; 0
    9fd0:	01 90       	ld	r0, Z+
    9fd2:	01 10       	cpse	r0, r1
    9fd4:	d8 f7       	brcc	.-10     	; 0x9fcc <strnlen+0x2>
    9fd6:	80 95       	com	r24
    9fd8:	90 95       	com	r25
    9fda:	8e 0f       	add	r24, r30
    9fdc:	9f 1f       	adc	r25, r31
    9fde:	08 95       	ret

00009fe0 <strtok_r>:
    9fe0:	fa 01       	movw	r30, r20
    9fe2:	a1 91       	ld	r26, Z+
    9fe4:	b0 81       	ld	r27, Z
    9fe6:	00 97       	sbiw	r24, 0x00	; 0
    9fe8:	19 f4       	brne	.+6      	; 0x9ff0 <strtok_r+0x10>
    9fea:	10 97       	sbiw	r26, 0x00	; 0
    9fec:	e1 f0       	breq	.+56     	; 0xa026 <strtok_r+0x46>
    9fee:	cd 01       	movw	r24, r26
    9ff0:	dc 01       	movw	r26, r24
    9ff2:	cd 01       	movw	r24, r26
    9ff4:	0d 90       	ld	r0, X+
    9ff6:	00 20       	and	r0, r0
    9ff8:	11 f4       	brne	.+4      	; 0x9ffe <strtok_r+0x1e>
    9ffa:	c0 01       	movw	r24, r0
    9ffc:	13 c0       	rjmp	.+38     	; 0xa024 <strtok_r+0x44>
    9ffe:	fb 01       	movw	r30, r22
    a000:	21 91       	ld	r18, Z+
    a002:	22 23       	and	r18, r18
    a004:	19 f0       	breq	.+6      	; 0xa00c <strtok_r+0x2c>
    a006:	20 15       	cp	r18, r0
    a008:	d9 f7       	brne	.-10     	; 0xa000 <strtok_r+0x20>
    a00a:	f3 cf       	rjmp	.-26     	; 0x9ff2 <strtok_r+0x12>
    a00c:	fb 01       	movw	r30, r22
    a00e:	21 91       	ld	r18, Z+
    a010:	20 15       	cp	r18, r0
    a012:	19 f4       	brne	.+6      	; 0xa01a <strtok_r+0x3a>
    a014:	1e 92       	st	-X, r1
    a016:	11 96       	adiw	r26, 0x01	; 1
    a018:	06 c0       	rjmp	.+12     	; 0xa026 <strtok_r+0x46>
    a01a:	22 23       	and	r18, r18
    a01c:	c1 f7       	brne	.-16     	; 0xa00e <strtok_r+0x2e>
    a01e:	0d 90       	ld	r0, X+
    a020:	00 20       	and	r0, r0
    a022:	a1 f7       	brne	.-24     	; 0xa00c <strtok_r+0x2c>
    a024:	d0 01       	movw	r26, r0
    a026:	fa 01       	movw	r30, r20
    a028:	a1 93       	st	Z+, r26
    a02a:	b0 83       	st	Z, r27
    a02c:	08 95       	ret

0000a02e <__mulhi_const_10>:
    a02e:	7a e0       	ldi	r23, 0x0A	; 10
    a030:	97 9f       	mul	r25, r23
    a032:	90 2d       	mov	r25, r0
    a034:	87 9f       	mul	r24, r23
    a036:	80 2d       	mov	r24, r0
    a038:	91 0d       	add	r25, r1
    a03a:	11 24       	eor	r1, r1
    a03c:	08 95       	ret

0000a03e <fgetc>:
    a03e:	cf 93       	push	r28
    a040:	df 93       	push	r29
    a042:	ec 01       	movw	r28, r24
    a044:	2b 81       	ldd	r18, Y+3	; 0x03
    a046:	20 ff       	sbrs	r18, 0
    a048:	33 c0       	rjmp	.+102    	; 0xa0b0 <fgetc+0x72>
    a04a:	26 ff       	sbrs	r18, 6
    a04c:	0a c0       	rjmp	.+20     	; 0xa062 <fgetc+0x24>
    a04e:	2f 7b       	andi	r18, 0xBF	; 191
    a050:	2b 83       	std	Y+3, r18	; 0x03
    a052:	8e 81       	ldd	r24, Y+6	; 0x06
    a054:	9f 81       	ldd	r25, Y+7	; 0x07
    a056:	01 96       	adiw	r24, 0x01	; 1
    a058:	8e 83       	std	Y+6, r24	; 0x06
    a05a:	9f 83       	std	Y+7, r25	; 0x07
    a05c:	8a 81       	ldd	r24, Y+2	; 0x02
    a05e:	90 e0       	ldi	r25, 0x00	; 0
    a060:	29 c0       	rjmp	.+82     	; 0xa0b4 <fgetc+0x76>
    a062:	22 ff       	sbrs	r18, 2
    a064:	0f c0       	rjmp	.+30     	; 0xa084 <fgetc+0x46>
    a066:	e8 81       	ld	r30, Y
    a068:	f9 81       	ldd	r31, Y+1	; 0x01
    a06a:	80 81       	ld	r24, Z
    a06c:	08 2e       	mov	r0, r24
    a06e:	00 0c       	add	r0, r0
    a070:	99 0b       	sbc	r25, r25
    a072:	00 97       	sbiw	r24, 0x00	; 0
    a074:	19 f4       	brne	.+6      	; 0xa07c <fgetc+0x3e>
    a076:	20 62       	ori	r18, 0x20	; 32
    a078:	2b 83       	std	Y+3, r18	; 0x03
    a07a:	1a c0       	rjmp	.+52     	; 0xa0b0 <fgetc+0x72>
    a07c:	31 96       	adiw	r30, 0x01	; 1
    a07e:	e8 83       	st	Y, r30
    a080:	f9 83       	std	Y+1, r31	; 0x01
    a082:	0e c0       	rjmp	.+28     	; 0xa0a0 <fgetc+0x62>
    a084:	ea 85       	ldd	r30, Y+10	; 0x0a
    a086:	fb 85       	ldd	r31, Y+11	; 0x0b
    a088:	19 95       	eicall
    a08a:	97 ff       	sbrs	r25, 7
    a08c:	09 c0       	rjmp	.+18     	; 0xa0a0 <fgetc+0x62>
    a08e:	2b 81       	ldd	r18, Y+3	; 0x03
    a090:	01 96       	adiw	r24, 0x01	; 1
    a092:	11 f0       	breq	.+4      	; 0xa098 <fgetc+0x5a>
    a094:	80 e2       	ldi	r24, 0x20	; 32
    a096:	01 c0       	rjmp	.+2      	; 0xa09a <fgetc+0x5c>
    a098:	80 e1       	ldi	r24, 0x10	; 16
    a09a:	82 2b       	or	r24, r18
    a09c:	8b 83       	std	Y+3, r24	; 0x03
    a09e:	08 c0       	rjmp	.+16     	; 0xa0b0 <fgetc+0x72>
    a0a0:	2e 81       	ldd	r18, Y+6	; 0x06
    a0a2:	3f 81       	ldd	r19, Y+7	; 0x07
    a0a4:	2f 5f       	subi	r18, 0xFF	; 255
    a0a6:	3f 4f       	sbci	r19, 0xFF	; 255
    a0a8:	2e 83       	std	Y+6, r18	; 0x06
    a0aa:	3f 83       	std	Y+7, r19	; 0x07
    a0ac:	99 27       	eor	r25, r25
    a0ae:	02 c0       	rjmp	.+4      	; 0xa0b4 <fgetc+0x76>
    a0b0:	8f ef       	ldi	r24, 0xFF	; 255
    a0b2:	9f ef       	ldi	r25, 0xFF	; 255
    a0b4:	df 91       	pop	r29
    a0b6:	cf 91       	pop	r28
    a0b8:	08 95       	ret

0000a0ba <fputc>:
    a0ba:	0f 93       	push	r16
    a0bc:	1f 93       	push	r17
    a0be:	cf 93       	push	r28
    a0c0:	df 93       	push	r29
    a0c2:	fb 01       	movw	r30, r22
    a0c4:	23 81       	ldd	r18, Z+3	; 0x03
    a0c6:	21 fd       	sbrc	r18, 1
    a0c8:	03 c0       	rjmp	.+6      	; 0xa0d0 <fputc+0x16>
    a0ca:	8f ef       	ldi	r24, 0xFF	; 255
    a0cc:	9f ef       	ldi	r25, 0xFF	; 255
    a0ce:	2c c0       	rjmp	.+88     	; 0xa128 <fputc+0x6e>
    a0d0:	22 ff       	sbrs	r18, 2
    a0d2:	16 c0       	rjmp	.+44     	; 0xa100 <fputc+0x46>
    a0d4:	46 81       	ldd	r20, Z+6	; 0x06
    a0d6:	57 81       	ldd	r21, Z+7	; 0x07
    a0d8:	24 81       	ldd	r18, Z+4	; 0x04
    a0da:	35 81       	ldd	r19, Z+5	; 0x05
    a0dc:	42 17       	cp	r20, r18
    a0de:	53 07       	cpc	r21, r19
    a0e0:	44 f4       	brge	.+16     	; 0xa0f2 <fputc+0x38>
    a0e2:	a0 81       	ld	r26, Z
    a0e4:	b1 81       	ldd	r27, Z+1	; 0x01
    a0e6:	9d 01       	movw	r18, r26
    a0e8:	2f 5f       	subi	r18, 0xFF	; 255
    a0ea:	3f 4f       	sbci	r19, 0xFF	; 255
    a0ec:	20 83       	st	Z, r18
    a0ee:	31 83       	std	Z+1, r19	; 0x01
    a0f0:	8c 93       	st	X, r24
    a0f2:	26 81       	ldd	r18, Z+6	; 0x06
    a0f4:	37 81       	ldd	r19, Z+7	; 0x07
    a0f6:	2f 5f       	subi	r18, 0xFF	; 255
    a0f8:	3f 4f       	sbci	r19, 0xFF	; 255
    a0fa:	26 83       	std	Z+6, r18	; 0x06
    a0fc:	37 83       	std	Z+7, r19	; 0x07
    a0fe:	14 c0       	rjmp	.+40     	; 0xa128 <fputc+0x6e>
    a100:	8b 01       	movw	r16, r22
    a102:	ec 01       	movw	r28, r24
    a104:	fb 01       	movw	r30, r22
    a106:	00 84       	ldd	r0, Z+8	; 0x08
    a108:	f1 85       	ldd	r31, Z+9	; 0x09
    a10a:	e0 2d       	mov	r30, r0
    a10c:	19 95       	eicall
    a10e:	89 2b       	or	r24, r25
    a110:	e1 f6       	brne	.-72     	; 0xa0ca <fputc+0x10>
    a112:	d8 01       	movw	r26, r16
    a114:	16 96       	adiw	r26, 0x06	; 6
    a116:	8d 91       	ld	r24, X+
    a118:	9c 91       	ld	r25, X
    a11a:	17 97       	sbiw	r26, 0x07	; 7
    a11c:	01 96       	adiw	r24, 0x01	; 1
    a11e:	16 96       	adiw	r26, 0x06	; 6
    a120:	8d 93       	st	X+, r24
    a122:	9c 93       	st	X, r25
    a124:	17 97       	sbiw	r26, 0x07	; 7
    a126:	ce 01       	movw	r24, r28
    a128:	df 91       	pop	r29
    a12a:	cf 91       	pop	r28
    a12c:	1f 91       	pop	r17
    a12e:	0f 91       	pop	r16
    a130:	08 95       	ret

0000a132 <printf>:
    a132:	cf 93       	push	r28
    a134:	df 93       	push	r29
    a136:	cd b7       	in	r28, 0x3d	; 61
    a138:	de b7       	in	r29, 0x3e	; 62
    a13a:	ae 01       	movw	r20, r28
    a13c:	4a 5f       	subi	r20, 0xFA	; 250
    a13e:	5f 4f       	sbci	r21, 0xFF	; 255
    a140:	fa 01       	movw	r30, r20
    a142:	61 91       	ld	r22, Z+
    a144:	71 91       	ld	r23, Z+
    a146:	af 01       	movw	r20, r30
    a148:	80 91 df 28 	lds	r24, 0x28DF	; 0x8028df <__iob+0x2>
    a14c:	90 91 e0 28 	lds	r25, 0x28E0	; 0x8028e0 <__iob+0x3>
    a150:	0e 94 fb 3e 	call	0x7df6	; 0x7df6 <vfprintf>
    a154:	df 91       	pop	r29
    a156:	cf 91       	pop	r28
    a158:	08 95       	ret

0000a15a <printf_P>:
    a15a:	0f 93       	push	r16
    a15c:	1f 93       	push	r17
    a15e:	cf 93       	push	r28
    a160:	df 93       	push	r29
    a162:	cd b7       	in	r28, 0x3d	; 61
    a164:	de b7       	in	r29, 0x3e	; 62
    a166:	ae 01       	movw	r20, r28
    a168:	48 5f       	subi	r20, 0xF8	; 248
    a16a:	5f 4f       	sbci	r21, 0xFF	; 255
    a16c:	da 01       	movw	r26, r20
    a16e:	6d 91       	ld	r22, X+
    a170:	7d 91       	ld	r23, X+
    a172:	ad 01       	movw	r20, r26
    a174:	0d ed       	ldi	r16, 0xDD	; 221
    a176:	18 e2       	ldi	r17, 0x28	; 40
    a178:	f8 01       	movw	r30, r16
    a17a:	82 81       	ldd	r24, Z+2	; 0x02
    a17c:	93 81       	ldd	r25, Z+3	; 0x03
    a17e:	dc 01       	movw	r26, r24
    a180:	13 96       	adiw	r26, 0x03	; 3
    a182:	2c 91       	ld	r18, X
    a184:	13 97       	sbiw	r26, 0x03	; 3
    a186:	28 60       	ori	r18, 0x08	; 8
    a188:	13 96       	adiw	r26, 0x03	; 3
    a18a:	2c 93       	st	X, r18
    a18c:	0e 94 fb 3e 	call	0x7df6	; 0x7df6 <vfprintf>
    a190:	d8 01       	movw	r26, r16
    a192:	12 96       	adiw	r26, 0x02	; 2
    a194:	ed 91       	ld	r30, X+
    a196:	fc 91       	ld	r31, X
    a198:	13 97       	sbiw	r26, 0x03	; 3
    a19a:	23 81       	ldd	r18, Z+3	; 0x03
    a19c:	27 7f       	andi	r18, 0xF7	; 247
    a19e:	23 83       	std	Z+3, r18	; 0x03
    a1a0:	df 91       	pop	r29
    a1a2:	cf 91       	pop	r28
    a1a4:	1f 91       	pop	r17
    a1a6:	0f 91       	pop	r16
    a1a8:	08 95       	ret

0000a1aa <putchar>:
    a1aa:	60 91 df 28 	lds	r22, 0x28DF	; 0x8028df <__iob+0x2>
    a1ae:	70 91 e0 28 	lds	r23, 0x28E0	; 0x8028e0 <__iob+0x3>
    a1b2:	0c 94 5d 50 	jmp	0xa0ba	; 0xa0ba <fputc>

0000a1b6 <puts>:
    a1b6:	0f 93       	push	r16
    a1b8:	1f 93       	push	r17
    a1ba:	cf 93       	push	r28
    a1bc:	df 93       	push	r29
    a1be:	e0 91 df 28 	lds	r30, 0x28DF	; 0x8028df <__iob+0x2>
    a1c2:	f0 91 e0 28 	lds	r31, 0x28E0	; 0x8028e0 <__iob+0x3>
    a1c6:	23 81       	ldd	r18, Z+3	; 0x03
    a1c8:	21 ff       	sbrs	r18, 1
    a1ca:	1b c0       	rjmp	.+54     	; 0xa202 <puts+0x4c>
    a1cc:	8c 01       	movw	r16, r24
    a1ce:	d0 e0       	ldi	r29, 0x00	; 0
    a1d0:	c0 e0       	ldi	r28, 0x00	; 0
    a1d2:	f8 01       	movw	r30, r16
    a1d4:	81 91       	ld	r24, Z+
    a1d6:	8f 01       	movw	r16, r30
    a1d8:	60 91 df 28 	lds	r22, 0x28DF	; 0x8028df <__iob+0x2>
    a1dc:	70 91 e0 28 	lds	r23, 0x28E0	; 0x8028e0 <__iob+0x3>
    a1e0:	db 01       	movw	r26, r22
    a1e2:	18 96       	adiw	r26, 0x08	; 8
    a1e4:	ed 91       	ld	r30, X+
    a1e6:	fc 91       	ld	r31, X
    a1e8:	19 97       	sbiw	r26, 0x09	; 9
    a1ea:	88 23       	and	r24, r24
    a1ec:	31 f0       	breq	.+12     	; 0xa1fa <puts+0x44>
    a1ee:	19 95       	eicall
    a1f0:	89 2b       	or	r24, r25
    a1f2:	79 f3       	breq	.-34     	; 0xa1d2 <puts+0x1c>
    a1f4:	df ef       	ldi	r29, 0xFF	; 255
    a1f6:	cf ef       	ldi	r28, 0xFF	; 255
    a1f8:	ec cf       	rjmp	.-40     	; 0xa1d2 <puts+0x1c>
    a1fa:	8a e0       	ldi	r24, 0x0A	; 10
    a1fc:	19 95       	eicall
    a1fe:	89 2b       	or	r24, r25
    a200:	19 f0       	breq	.+6      	; 0xa208 <puts+0x52>
    a202:	8f ef       	ldi	r24, 0xFF	; 255
    a204:	9f ef       	ldi	r25, 0xFF	; 255
    a206:	02 c0       	rjmp	.+4      	; 0xa20c <puts+0x56>
    a208:	8d 2f       	mov	r24, r29
    a20a:	9c 2f       	mov	r25, r28
    a20c:	df 91       	pop	r29
    a20e:	cf 91       	pop	r28
    a210:	1f 91       	pop	r17
    a212:	0f 91       	pop	r16
    a214:	08 95       	ret

0000a216 <sprintf>:
    a216:	0f 93       	push	r16
    a218:	1f 93       	push	r17
    a21a:	cf 93       	push	r28
    a21c:	df 93       	push	r29
    a21e:	cd b7       	in	r28, 0x3d	; 61
    a220:	de b7       	in	r29, 0x3e	; 62
    a222:	2e 97       	sbiw	r28, 0x0e	; 14
    a224:	cd bf       	out	0x3d, r28	; 61
    a226:	de bf       	out	0x3e, r29	; 62
    a228:	0e 89       	ldd	r16, Y+22	; 0x16
    a22a:	1f 89       	ldd	r17, Y+23	; 0x17
    a22c:	86 e0       	ldi	r24, 0x06	; 6
    a22e:	8c 83       	std	Y+4, r24	; 0x04
    a230:	09 83       	std	Y+1, r16	; 0x01
    a232:	1a 83       	std	Y+2, r17	; 0x02
    a234:	8f ef       	ldi	r24, 0xFF	; 255
    a236:	9f e7       	ldi	r25, 0x7F	; 127
    a238:	8d 83       	std	Y+5, r24	; 0x05
    a23a:	9e 83       	std	Y+6, r25	; 0x06
    a23c:	ae 01       	movw	r20, r28
    a23e:	46 5e       	subi	r20, 0xE6	; 230
    a240:	5f 4f       	sbci	r21, 0xFF	; 255
    a242:	68 8d       	ldd	r22, Y+24	; 0x18
    a244:	79 8d       	ldd	r23, Y+25	; 0x19
    a246:	ce 01       	movw	r24, r28
    a248:	01 96       	adiw	r24, 0x01	; 1
    a24a:	0e 94 fb 3e 	call	0x7df6	; 0x7df6 <vfprintf>
    a24e:	ef 81       	ldd	r30, Y+7	; 0x07
    a250:	f8 85       	ldd	r31, Y+8	; 0x08
    a252:	e0 0f       	add	r30, r16
    a254:	f1 1f       	adc	r31, r17
    a256:	10 82       	st	Z, r1
    a258:	2e 96       	adiw	r28, 0x0e	; 14
    a25a:	cd bf       	out	0x3d, r28	; 61
    a25c:	de bf       	out	0x3e, r29	; 62
    a25e:	df 91       	pop	r29
    a260:	cf 91       	pop	r28
    a262:	1f 91       	pop	r17
    a264:	0f 91       	pop	r16
    a266:	08 95       	ret

0000a268 <ungetc>:
    a268:	fb 01       	movw	r30, r22
    a26a:	23 81       	ldd	r18, Z+3	; 0x03
    a26c:	20 ff       	sbrs	r18, 0
    a26e:	12 c0       	rjmp	.+36     	; 0xa294 <ungetc+0x2c>
    a270:	26 fd       	sbrc	r18, 6
    a272:	10 c0       	rjmp	.+32     	; 0xa294 <ungetc+0x2c>
    a274:	8f 3f       	cpi	r24, 0xFF	; 255
    a276:	3f ef       	ldi	r19, 0xFF	; 255
    a278:	93 07       	cpc	r25, r19
    a27a:	61 f0       	breq	.+24     	; 0xa294 <ungetc+0x2c>
    a27c:	82 83       	std	Z+2, r24	; 0x02
    a27e:	2f 7d       	andi	r18, 0xDF	; 223
    a280:	20 64       	ori	r18, 0x40	; 64
    a282:	23 83       	std	Z+3, r18	; 0x03
    a284:	26 81       	ldd	r18, Z+6	; 0x06
    a286:	37 81       	ldd	r19, Z+7	; 0x07
    a288:	21 50       	subi	r18, 0x01	; 1
    a28a:	31 09       	sbc	r19, r1
    a28c:	26 83       	std	Z+6, r18	; 0x06
    a28e:	37 83       	std	Z+7, r19	; 0x07
    a290:	99 27       	eor	r25, r25
    a292:	08 95       	ret
    a294:	8f ef       	ldi	r24, 0xFF	; 255
    a296:	9f ef       	ldi	r25, 0xFF	; 255
    a298:	08 95       	ret

0000a29a <__ultoa_invert>:
    a29a:	fa 01       	movw	r30, r20
    a29c:	aa 27       	eor	r26, r26
    a29e:	28 30       	cpi	r18, 0x08	; 8
    a2a0:	51 f1       	breq	.+84     	; 0xa2f6 <__ultoa_invert+0x5c>
    a2a2:	20 31       	cpi	r18, 0x10	; 16
    a2a4:	81 f1       	breq	.+96     	; 0xa306 <__ultoa_invert+0x6c>
    a2a6:	e8 94       	clt
    a2a8:	6f 93       	push	r22
    a2aa:	6e 7f       	andi	r22, 0xFE	; 254
    a2ac:	6e 5f       	subi	r22, 0xFE	; 254
    a2ae:	7f 4f       	sbci	r23, 0xFF	; 255
    a2b0:	8f 4f       	sbci	r24, 0xFF	; 255
    a2b2:	9f 4f       	sbci	r25, 0xFF	; 255
    a2b4:	af 4f       	sbci	r26, 0xFF	; 255
    a2b6:	b1 e0       	ldi	r27, 0x01	; 1
    a2b8:	3e d0       	rcall	.+124    	; 0xa336 <__ultoa_invert+0x9c>
    a2ba:	b4 e0       	ldi	r27, 0x04	; 4
    a2bc:	3c d0       	rcall	.+120    	; 0xa336 <__ultoa_invert+0x9c>
    a2be:	67 0f       	add	r22, r23
    a2c0:	78 1f       	adc	r23, r24
    a2c2:	89 1f       	adc	r24, r25
    a2c4:	9a 1f       	adc	r25, r26
    a2c6:	a1 1d       	adc	r26, r1
    a2c8:	68 0f       	add	r22, r24
    a2ca:	79 1f       	adc	r23, r25
    a2cc:	8a 1f       	adc	r24, r26
    a2ce:	91 1d       	adc	r25, r1
    a2d0:	a1 1d       	adc	r26, r1
    a2d2:	6a 0f       	add	r22, r26
    a2d4:	71 1d       	adc	r23, r1
    a2d6:	81 1d       	adc	r24, r1
    a2d8:	91 1d       	adc	r25, r1
    a2da:	a1 1d       	adc	r26, r1
    a2dc:	20 d0       	rcall	.+64     	; 0xa31e <__ultoa_invert+0x84>
    a2de:	09 f4       	brne	.+2      	; 0xa2e2 <__ultoa_invert+0x48>
    a2e0:	68 94       	set
    a2e2:	3f 91       	pop	r19
    a2e4:	2a e0       	ldi	r18, 0x0A	; 10
    a2e6:	26 9f       	mul	r18, r22
    a2e8:	11 24       	eor	r1, r1
    a2ea:	30 19       	sub	r19, r0
    a2ec:	30 5d       	subi	r19, 0xD0	; 208
    a2ee:	31 93       	st	Z+, r19
    a2f0:	de f6       	brtc	.-74     	; 0xa2a8 <__ultoa_invert+0xe>
    a2f2:	cf 01       	movw	r24, r30
    a2f4:	08 95       	ret
    a2f6:	46 2f       	mov	r20, r22
    a2f8:	47 70       	andi	r20, 0x07	; 7
    a2fa:	40 5d       	subi	r20, 0xD0	; 208
    a2fc:	41 93       	st	Z+, r20
    a2fe:	b3 e0       	ldi	r27, 0x03	; 3
    a300:	0f d0       	rcall	.+30     	; 0xa320 <__ultoa_invert+0x86>
    a302:	c9 f7       	brne	.-14     	; 0xa2f6 <__ultoa_invert+0x5c>
    a304:	f6 cf       	rjmp	.-20     	; 0xa2f2 <__ultoa_invert+0x58>
    a306:	46 2f       	mov	r20, r22
    a308:	4f 70       	andi	r20, 0x0F	; 15
    a30a:	40 5d       	subi	r20, 0xD0	; 208
    a30c:	4a 33       	cpi	r20, 0x3A	; 58
    a30e:	18 f0       	brcs	.+6      	; 0xa316 <__ultoa_invert+0x7c>
    a310:	49 5d       	subi	r20, 0xD9	; 217
    a312:	31 fd       	sbrc	r19, 1
    a314:	40 52       	subi	r20, 0x20	; 32
    a316:	41 93       	st	Z+, r20
    a318:	02 d0       	rcall	.+4      	; 0xa31e <__ultoa_invert+0x84>
    a31a:	a9 f7       	brne	.-22     	; 0xa306 <__ultoa_invert+0x6c>
    a31c:	ea cf       	rjmp	.-44     	; 0xa2f2 <__ultoa_invert+0x58>
    a31e:	b4 e0       	ldi	r27, 0x04	; 4
    a320:	a6 95       	lsr	r26
    a322:	97 95       	ror	r25
    a324:	87 95       	ror	r24
    a326:	77 95       	ror	r23
    a328:	67 95       	ror	r22
    a32a:	ba 95       	dec	r27
    a32c:	c9 f7       	brne	.-14     	; 0xa320 <__ultoa_invert+0x86>
    a32e:	00 97       	sbiw	r24, 0x00	; 0
    a330:	61 05       	cpc	r22, r1
    a332:	71 05       	cpc	r23, r1
    a334:	08 95       	ret
    a336:	9b 01       	movw	r18, r22
    a338:	ac 01       	movw	r20, r24
    a33a:	0a 2e       	mov	r0, r26
    a33c:	06 94       	lsr	r0
    a33e:	57 95       	ror	r21
    a340:	47 95       	ror	r20
    a342:	37 95       	ror	r19
    a344:	27 95       	ror	r18
    a346:	ba 95       	dec	r27
    a348:	c9 f7       	brne	.-14     	; 0xa33c <__ultoa_invert+0xa2>
    a34a:	62 0f       	add	r22, r18
    a34c:	73 1f       	adc	r23, r19
    a34e:	84 1f       	adc	r24, r20
    a350:	95 1f       	adc	r25, r21
    a352:	a0 1d       	adc	r26, r0
    a354:	08 95       	ret

0000a356 <__ctype_isfalse>:
    a356:	99 27       	eor	r25, r25
    a358:	88 27       	eor	r24, r24

0000a35a <__ctype_istrue>:
    a35a:	08 95       	ret

0000a35c <_exit>:
    a35c:	f8 94       	cli

0000a35e <__stop_program>:
    a35e:	ff cf       	rjmp	.-2      	; 0xa35e <__stop_program>
