
Droplets.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009d42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000222  00802000  00009d42  00009dd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000037d  00802222  00802222  00009ff8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009ff8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a054  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000690  00000000  00000000  0000a098  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ab81  00000000  00000000  0000a728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006fa1  00000000  00000000  000252a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000070b3  00000000  00000000  0002c24a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002610  00000000  00000000  00033300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000072d0  00000000  00000000  00035910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000dc29  00000000  00000000  0003cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011b8  00000000  00000000  0004a809  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__ctors_end>
       4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
       8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
       c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      10:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      14:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      18:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      1c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      20:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      24:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      28:	0c 94 a0 35 	jmp	0x6b40	; 0x6b40 <__vector_10>
      2c:	0c 94 ac 33 	jmp	0x6758	; 0x6758 <__vector_11>
      30:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      34:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      38:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      3c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      40:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      44:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      48:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      4c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      50:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      54:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      58:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      5c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      60:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      64:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <__vector_25>
      68:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__vector_26>
      6c:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__vector_27>
      70:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__vector_28>
      74:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__vector_29>
      78:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__vector_30>
      7c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      80:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      84:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      88:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      8c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      90:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      94:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      98:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      9c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      a0:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      a4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      a8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      ac:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      b0:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      b4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      b8:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__vector_46>
      bc:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_47>
      c0:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      c4:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_49>
      c8:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__vector_50>
      cc:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      d0:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      d4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      d8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      dc:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      e0:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      e4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
      e8:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__vector_58>
      ec:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__vector_59>
      f0:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__vector_60>
      f4:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__vector_61>
      f8:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__vector_62>
      fc:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__vector_63>
     100:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     104:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     108:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     10c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     110:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     114:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     118:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     11c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     120:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     124:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     128:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     12c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     130:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     134:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     138:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     13c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     140:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     144:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     148:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     14c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     150:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     154:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     158:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     15c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     160:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__vector_88>
     164:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__vector_89>
     168:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__vector_90>
     16c:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__vector_91>
     170:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     174:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     178:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     17c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     180:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     184:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     188:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     18c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     190:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     194:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     198:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     19c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1a0:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1a4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1a8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1ac:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1b0:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1b4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1b8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1bc:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1c0:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1c4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1c8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1cc:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1d0:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1d4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1d8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1dc:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__vector_119>
     1e0:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__vector_120>
     1e4:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__vector_121>
     1e8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1ec:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1f0:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1f4:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1f8:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__bad_interrupt>
     1fc:	2c 0f       	add	r18, r28
     1fe:	39 0f       	add	r19, r25
     200:	46 0f       	add	r20, r22
     202:	53 0f       	add	r21, r19
     204:	60 0f       	add	r22, r16
     206:	06 0f       	add	r16, r22
     208:	13 0f       	add	r17, r19
     20a:	55 14       	cp	r5, r5
     20c:	62 14       	cp	r6, r2
     20e:	d8 13       	cpse	r29, r24
     210:	e5 13       	cpse	r30, r21
     212:	f3 13       	cpse	r31, r19
     214:	27 14       	cp	r2, r7
     216:	cb 13       	cpse	r28, r27
     218:	08 4a       	sbci	r16, 0xA8	; 168
     21a:	d7 3b       	cpi	r29, 0xB7	; 183
     21c:	3b ce       	rjmp	.-906    	; 0xfffffe94 <__eeprom_end+0xff7efe94>
     21e:	01 6e       	ori	r16, 0xE1	; 225
     220:	84 bc       	out	0x24, r8	; 36
     222:	bf fd       	.word	0xfdbf	; ????
     224:	c1 2f       	mov	r28, r17
     226:	3d 6c       	ori	r19, 0xCD	; 205
     228:	74 31       	cpi	r23, 0x14	; 20
     22a:	9a bd       	out	0x2a, r25	; 42
     22c:	56 83       	std	Z+6, r21	; 0x06
     22e:	3d da       	rcall	.-2950   	; 0xfffff6aa <__eeprom_end+0xff7ef6aa>
     230:	3d 00       	.word	0x003d	; ????
     232:	c7 7f       	andi	r28, 0xF7	; 247
     234:	11 be       	out	0x31, r1	; 49
     236:	d9 e4       	ldi	r29, 0x49	; 73
     238:	bb 4c       	sbci	r27, 0xCB	; 203
     23a:	3e 91       	ld	r19, -X
     23c:	6b aa       	std	Y+51, r6	; 0x33
     23e:	aa be       	out	0x3a, r10	; 58
     240:	00 00       	nop
     242:	00 80       	ld	r0, Z
     244:	3f 07       	cpc	r19, r31
     246:	63 42       	sbci	r22, 0x23	; 35
     248:	36 b7       	in	r19, 0x36	; 54
     24a:	9b d8       	rcall	.-3786   	; 0xfffff382 <__eeprom_end+0xff7ef382>
     24c:	a7 1a       	sub	r10, r23
     24e:	39 68       	ori	r19, 0x89	; 137
     250:	56 18       	sub	r5, r6
     252:	ae ba       	out	0x1e, r10	; 30
     254:	ab 55       	subi	r26, 0x5B	; 91
     256:	8c 1d       	adc	r24, r12
     258:	3c b7       	in	r19, 0x3c	; 60
     25a:	cc 57       	subi	r28, 0x7C	; 124
     25c:	63 bd       	out	0x23, r22	; 35
     25e:	6d ed       	ldi	r22, 0xDD	; 221
     260:	fd 75       	andi	r31, 0x5D	; 93
     262:	3e f6       	brtc	.-114    	; 0x1f2 <__SREG__+0x1b3>
     264:	17 72       	andi	r17, 0x27	; 39
     266:	31 bf       	out	0x31, r19	; 49
     268:	00 00       	nop
     26a:	00 80       	ld	r0, Z
     26c:	3f 05       	cpc	r19, r15
     26e:	a8 4c       	sbci	r26, 0xC8	; 200
     270:	cd b2       	in	r12, 0x1d	; 29
     272:	d4 4e       	sbci	r29, 0xE4	; 228
     274:	b9 38       	cpi	r27, 0x89	; 137
     276:	36 a9       	ldd	r19, Z+54	; 0x36
     278:	02 0c       	add	r0, r2
     27a:	50 b9       	out	0x00, r21	; 0
     27c:	91 86       	std	Z+9, r9	; 0x09
     27e:	88 08       	sbc	r8, r8
     280:	3c a6       	std	Y+44, r3	; 0x2c
     282:	aa aa       	std	Y+50, r10	; 0x32
     284:	2a be       	out	0x3a, r2	; 58
     286:	00 00       	nop
     288:	00 80       	ld	r0, Z
     28a:	3f 08       	sbc	r3, r15
     28c:	00 00       	nop
     28e:	00 be       	out	0x30, r0	; 48
     290:	92 24       	eor	r9, r2
     292:	49 12       	cpse	r4, r25
     294:	3e ab       	std	Y+54, r19	; 0x36
     296:	aa aa       	std	Y+50, r10	; 0x32
     298:	2a be       	out	0x3a, r2	; 58
     29a:	cd cc       	rjmp	.-1638   	; 0xfffffc36 <__eeprom_end+0xff7efc36>
     29c:	cc 4c       	sbci	r28, 0xCC	; 204
     29e:	3e 00       	.word	0x003e	; ????
     2a0:	00 00       	nop
     2a2:	80 be       	out	0x30, r8	; 48
     2a4:	ab aa       	std	Y+51, r10	; 0x33
     2a6:	aa aa       	std	Y+50, r10	; 0x32
     2a8:	3e 00       	.word	0x003e	; ????
     2aa:	00 00       	nop
     2ac:	00 bf       	out	0x30, r16	; 48
     2ae:	00 00       	nop
     2b0:	00 80       	ld	r0, Z
     2b2:	3f 00       	.word	0x003f	; ????
     2b4:	00 00       	nop
     2b6:	00 00       	nop
     2b8:	08 41       	sbci	r16, 0x18	; 24
     2ba:	78 d3       	rcall	.+1776   	; 0x9ac <__c.4892+0x30>
     2bc:	bb 43       	sbci	r27, 0x3B	; 59
     2be:	87 d1       	rcall	.+782    	; 0x5ce <__c.5315+0x6c>
     2c0:	13 3d       	cpi	r17, 0xD3	; 211
     2c2:	19 0e       	add	r1, r25
     2c4:	3c c3       	rjmp	.+1656   	; 0x93e <__c.4912+0x3a>
     2c6:	bd 42       	sbci	r27, 0x2D	; 45
     2c8:	82 ad       	ldd	r24, Z+58	; 0x3a
     2ca:	2b 3e       	cpi	r18, 0xEB	; 235
     2cc:	68 ec       	ldi	r22, 0xC8	; 200
     2ce:	82 76       	andi	r24, 0x62	; 98
     2d0:	be d9       	rcall	.-3204   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     2d2:	8f e1       	ldi	r24, 0x1F	; 31
     2d4:	a9 3e       	cpi	r26, 0xE9	; 233
     2d6:	4c 80       	ldd	r4, Y+4	; 0x04
     2d8:	ef ff       	.word	0xffef	; ????
     2da:	be 01       	movw	r22, r28
     2dc:	c4 ff       	sbrs	r28, 4
     2de:	7f 3f       	cpi	r23, 0xFF	; 255
     2e0:	00 00       	nop
     2e2:	00 00       	nop
     2e4:	00 00       	nop

000002e6 <__trampolines_start>:
     2e6:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <irReceive+0x31a>
     2ea:	0c 94 af 20 	jmp	0x415e	; 0x415e <pc_comm_putchar>
     2ee:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <irReceive+0x220>
     2f2:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <irReceive+0x334>
     2f6:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <sendPing>
     2fa:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <irReceive+0x206>
     2fe:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <irTransmit+0x14a>
     302:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <irTransmit+0x164>
     306:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <irTransmit+0xe4>
     30a:	0c 94 bd 1b 	jmp	0x377a	; 0x377a <initIrBaselines>
     30e:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <irTransmit+0x198>
     312:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <processObsQueue>
     316:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <setAllirPowers>
     31a:	0c 94 40 1d 	jmp	0x3a80	; 0x3a80 <stopMove>
     31e:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <broadcastRnbData>
     322:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <updateIrBaselines>
     326:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <irTransmit+0x130>
     32a:	0c 94 27 14 	jmp	0x284e	; 0x284e <irReceive+0x2be>
     32e:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <irTransmit+0xfe>
     332:	0c 94 4e 36 	jmp	0x6c9c	; 0x6c9c <sendID>
     336:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <irReceive+0x23a>
     33a:	0c 94 cf 28 	jmp	0x519e	; 0x519e <useRnbData>
     33e:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <irTransmit+0x17e>
     342:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <handleCmdWrapper>
     346:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <irReceive+0x256>

0000034a <__trampolines_end>:
     34a:	6e 61       	ori	r22, 0x1E	; 30
     34c:	6e 00       	.word	0x006e	; ????

0000034e <__c.2332>:
     34e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     35e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     36e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     37e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     38e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     39e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     3ae:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     3be:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     3ce:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     3de:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     3ee:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     3fe:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     40e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     41e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     42e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     43e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000044c <__c.5334>:
     44c:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 6c     ERROR: Message l
     45c:	65 6e 67 74 68 20 30 20 66 6f 72 20 6d 73 67 5f     ength 0 for msg_
     46c:	6e 6f 64 65 2e 0d 0a 00                             node....

00000474 <__c.5328>:
     474:	45 72 72 6f 72 3a 20 4d 65 73 73 61 67 65 73 20     Error: Messages 
     484:	6f 76 65 72 66 6c 6f 77 2e 20 54 6f 6f 20 6d 61     overflow. Too ma
     494:	6e 79 20 6d 65 73 73 61 67 65 73 20 72 65 63 65     ny messages rece
     4a4:	69 76 65 64 2e 20 54 72 79 20 73 70 65 65 64 69     ived. Try speedi
     4b4:	6e 67 20 75 70 20 79 6f 75 72 20 6c 6f 6f 70 20     ng up your loop 
     4c4:	69 66 20 79 6f 75 20 73 65 65 20 74 68 69 73 20     if you see this 
     4d4:	61 20 6c 6f 74 2e 0d 0a 00                          a lot....

000004dd <__c.5321>:
     4dd:	45 72 72 6f 72 21 20 57 65 20 67 6f 74 20 61 68     Error! We got ah
     4ed:	65 61 64 20 6f 66 20 74 68 65 20 74 61 73 6b 20     ead of the task 
     4fd:	6c 69 73 74 20 61 6e 64 20 6e 6f 77 20 6e 6f 74     list and now not
     50d:	68 69 6e 67 20 77 69 6c 6c 20 65 78 65 63 75 74     hing will execut
     51d:	65 2e 0d 0a 00                                      e....

00000522 <__c.4802>:
     522:	09 54 57 49 20 77 61 73 6e 27 74 20 72 65 61 64     .TWI wasn't read
     532:	79 2e 0d 0a 00                                      y....

00000537 <__c.4769>:
     537:	57 61 69 74 69 6e 67 20 66 6f 72 20 54 57 49 20     Waiting for TWI 
     547:	7c 20 25 73 0d 0a 00                                | %s...

0000054e <__c.4767>:
     54e:	09 54 57 49 20 74 69 6d 65 6f 75 74 20 7c 20 25     .TWI timeout | %
     55e:	73 0d 0a 00                                         s...

00000562 <__c.5315>:
     562:	45 52 52 4f 52 21 20 42 75 66 66 65 72 65 64 20     ERROR! Buffered 
     572:	69 6e 63 6f 6d 69 6e 67 20 6d 65 73 73 61 67 65     incoming message
     582:	73 20 63 6f 6e 73 75 6d 69 6e 67 20 74 6f 6f 20     s consuming too 
     592:	6d 75 63 68 20 6d 65 6d 6f 72 79 2e 20 41 6c 6c     much memory. All
     5a2:	6f 77 20 68 61 6e 64 6c 65 5f 6d 73 67 20 74 6f     ow handle_msg to
     5b2:	20 62 65 20 63 61 6c 6c 65 64 20 6d 6f 72 65 20      be called more 
     5c2:	66 72 65 71 75 65 6e 74 6c 79 2e 0d 0a 00           frequently....

000005d0 <__c.5313>:
     5d0:	45 52 52 4f 52 21 20 53 68 6f 75 6c 64 20 4e 4f     ERROR! Should NO
     5e0:	54 20 62 65 20 61 64 64 69 6e 67 20 61 20 6d 65     T be adding a me
     5f0:	73 73 61 67 65 20 77 69 74 68 20 6c 65 6e 67 74     ssage with lengt
     600:	68 20 67 72 65 61 74 65 72 20 74 68 61 6e 20 62     h greater than b
     610:	75 66 66 65 72 20 73 69 7a 65 20 74 6f 20 71 75     uffer size to qu
     620:	65 75 65 2e 0d 0a 00                                eue....

00000627 <__c.5311>:
     627:	45 52 52 4f 52 21 20 53 68 6f 75 6c 64 20 4e 4f     ERROR! Should NO
     637:	54 20 62 65 20 61 64 64 69 6e 67 20 30 2d 6c 65     T be adding 0-le
     647:	6e 67 74 68 20 6d 65 73 73 61 67 65 20 74 6f 20     ngth message to 
     657:	71 75 65 75 65 2e 0d 0a 00                          queue....

00000660 <__c.5234>:
     660:	41 62 6f 72 74 69 6e 67 20 49 52 20 73 65 6e 64     Aborting IR send
     670:	20 5b 25 30 32 68 78 5d 20 77 68 69 6c 65 20 74      [%02hx] while t
     680:	72 79 69 6e 67 3a 20 00                             rying: .

00000688 <__c.5207>:
     688:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 65     ERROR: Message e
     698:	78 63 65 65 64 73 20 49 52 5f 42 55 46 46 45 52     xceeds IR_BUFFER
     6a8:	5f 53 49 5a 45 2e 0d 0a 00                          _SIZE....

000006b1 <__c.4740>:
     6b1:	09 44 6f 6e 65 20 77 61 69 74 69 6e 67 20 66 6f     .Done waiting fo
     6c1:	72 20 54 57 49 2e 20 49 52 20 70 6f 77 65 72 73     r TWI. IR powers
     6d1:	20 73 65 74 20 73 75 63 63 65 73 73 66 75 6c 6c      set successfull
     6e1:	79 2e 0d 0a 00                                      y....

000006e6 <__c.5201>:
     6e6:	49 52 20 48 61 72 64 77 61 72 65 20 62 75 73 79     IR Hardware busy
     6f6:	2e 20 43 61 6e 27 74 20 63 68 65 63 6b 20 63 6f     . Can't check co
     706:	6c 6c 69 73 69 6f 6e 73 2e 0d 0a 00                 llisions....

00000712 <__c.5009>:
     712:	09 25 68 75 09 25 75 0d 0a 00                       .%hu.%u...

0000071c <__c.5006>:
     71c:	44 69 73 74 20 28 6d 6d 29 20 70 65 72 20 6b 69     Dist (mm) per ki
     72c:	6c 6f 73 74 65 70 0d 0a 00                          lostep...

00000735 <__c.4993>:
     735:	09 64 69 72 3a 20 25 68 75 09 00                    .dir: %hu..

00000740 <__c.4990>:
     740:	4d 6f 74 6f 72 20 56 61 6c 75 65 73 0d 0a 00        Motor Values...

0000074f <__c.4945>:
     74f:	49 6e 20 6f 72 64 65 72 20 74 6f 20 67 6f 20 69     In order to go i
     75f:	6e 20 64 69 72 65 63 74 69 6f 6e 20 25 68 75 20     n direction %hu 
     76f:	66 6f 72 20 25 75 20 6d 6d 2c 20 74 61 6b 69 6e     for %u mm, takin
     77f:	67 20 25 75 20 73 74 65 70 73 2e 0d 0a 00           g %u steps....

0000078d <__c.4941>:
     78d:	45 72 72 6f 72 3a 20 44 6f 6e 27 74 20 68 61 76     Error: Don't hav
     79d:	65 20 63 61 6c 69 62 72 61 74 65 64 20 76 61 6c     e calibrated val
     7ad:	75 65 73 20 66 6f 72 20 74 68 69 73 20 64 69 72     ues for this dir
     7bd:	65 63 74 69 6f 6e 2e 0d 0a 00                       ection....

000007c7 <__c.4934>:
     7c7:	45 72 72 6f 72 21 20 46 61 69 6c 65 64 20 74 6f     Error! Failed to
     7d7:	20 73 63 68 65 64 75 6c 65 20 73 74 6f 70 5f 6d      schedule stop_m
     7e7:	6f 76 65 20 74 61 73 6b 2e 00                       ove task..

000007f1 <__c.4927>:
     7f1:	45 52 52 4f 52 3a 20 63 75 72 72 65 6e 74 5f 6f     ERROR: current_o
     801:	66 66 73 65 74 3a 20 25 75 20 61 6e 64 20 74 6f     ffset: %u and to
     811:	74 61 6c 5f 74 69 6d 65 3a 20 25 75 20 6e 6f 74     tal_time: %u not
     821:	20 65 71 75 61 6c 21 0d 0a 00                        equal!...

0000082b <__c.5154>:
     82b:	0d 0a 45 52 52 4f 52 3a 20 53 65 72 69 61 6c 20     ..ERROR: Serial 
     83b:	69 6e 70 75 74 20 62 75 66 66 65 72 20 63 61 70     input buffer cap
     84b:	61 63 69 74 79 20 6f 66 20 25 75 20 63 68 61 72     acity of %u char
     85b:	61 63 74 65 72 73 20 65 78 63 65 65 64 65 64 2e     acters exceeded.
     86b:	0d 0a 00                                            ...

0000086e <__c.5312>:
     86e:	21 21 21 09 47 6f 74 20 31 35 20 63 6f 6e 73 65     !!!.Got 15 conse
     87e:	63 75 74 69 76 65 20 6e 6f 74 68 69 6e 67 73 20     cutive nothings 
     88e:	66 72 6f 6d 20 73 65 6e 73 6f 72 20 25 68 75 2e     from sensor %hu.
     89e:	09 21 21 21 0d 0a 00                                .!!!...

000008a5 <__c.5208>:
     8a5:	52 4e 42 20 42 72 6f 61 64 63 61 73 74 20 66 61     RNB Broadcast fa
     8b5:	69 6c 65 64 20 5b 20 25 30 32 68 58 20 5d 0d 0a     iled [ %02hX ]..
     8c5:	00                                                  .

000008c6 <__c.4917>:
     8c6:	45 52 52 4f 52 3a 20 50 6f 73 74 2d 72 65 74 75     ERROR: Post-retu
     8d6:	72 6e 2c 20 74 61 73 6b 20 73 74 6f 72 61 67 65     rn, task storage
     8e6:	20 63 6f 6e 73 69 73 74 65 6e 63 79 20 63 68 65      consistency che
     8f6:	63 6b 20 66 61 69 6c 75 72 65 2e 0d 0a 00           ck failure....

00000904 <__c.4912>:
     904:	50 6f 73 74 2d 63 61 6c 6c 2c 20 74 61 73 6b 20     Post-call, task 
     914:	25 58 20 68 61 73 20 6e 65 78 74 5f 70 74 72 20     %X has next_ptr 
     924:	70 6f 69 6e 74 69 6e 67 20 6f 75 74 73 69 64 65     pointing outside
     934:	20 6f 66 20 61 72 72 61 79 2e 0d 0a 00               of array....

00000941 <__c.4897>:
     941:	45 52 52 4f 52 3a 20 50 72 65 2d 63 61 6c 6c 2c     ERROR: Pre-call,
     951:	20 74 61 73 6b 20 73 74 6f 72 61 67 65 20 63 6f      task storage co
     961:	6e 73 69 73 74 65 6e 63 79 20 63 68 65 63 6b 20     nsistency check 
     971:	66 61 69 6c 75 72 65 2e 0d 0a 00                    failure....

0000097c <__c.4892>:
     97c:	50 72 65 2d 63 61 6c 6c 2c 20 74 61 73 6b 20 68     Pre-call, task h
     98c:	61 73 20 6e 65 78 74 5f 70 74 72 20 70 6f 69 6e     as next_ptr poin
     99c:	74 69 6e 67 20 6f 75 74 73 69 64 65 20 6f 66 20     ting outside of 
     9ac:	61 72 72 61 79 2e 0d 0a 00                          array....

000009b5 <__c.4876>:
     9b5:	09 54 61 73 6b 20 25 70 20 28 25 70 29 20 73 63     .Task %p (%p) sc
     9c5:	68 65 64 75 6c 65 64 20 61 74 20 25 6c 75 20 77     heduled at %lu w
     9d5:	69 74 68 20 70 65 72 69 6f 64 20 25 6c 75 2c 20     ith period %lu, 
     9e5:	25 6c 75 20 63 75 72 72 65 6e 74 0d 0a 00           %lu current...

000009f3 <__c.4874>:
     9f3:	54 61 73 6b 20 51 75 65 75 65 20 28 25 68 75 20     Task Queue (%hu 
     a03:	74 61 73 6b 73 2c 20 25 68 75 20 65 78 65 63 75     tasks, %hu execu
     a13:	74 69 6e 67 29 3a 0d 0a 00                          ting):...

00000a1c <__c.4848>:
     a1c:	4e 65 77 20 54 61 73 6b 20 25 70 20 28 25 70 29     New Task %p (%p)
     a2c:	20 73 63 68 65 64 75 6c 65 64 20 61 74 20 25 6c      scheduled at %l
     a3c:	75 20 77 69 74 68 20 70 65 72 69 6f 64 20 25 6c     u with period %l
     a4c:	75 2c 20 25 6c 75 20 63 75 72 72 65 6e 74 0d 0a     u, %lu current..
     a5c:	00                                                  .

00000a5d <__c.4846>:
     a5d:	45 52 52 4f 52 21 20 54 61 73 6b 20 6c 69 73 74     ERROR! Task list
     a6d:	20 68 61 73 20 73 65 6c 66 2d 72 65 66 65 72 65      has self-refere
     a7d:	6e 63 65 2e 0d 0a 00                                nce....

00000a84 <__c.4832>:
     a84:	45 52 52 4f 52 3a 20 54 61 73 6b 20 73 63 68 65     ERROR: Task sche
     a94:	64 75 6c 65 64 20 66 6f 72 20 61 20 74 69 6d 65     duled for a time
     aa4:	20 69 6e 20 74 68 65 20 70 61 73 74 2e 0d 0a 00      in the past....

00000ab4 <__c.4830>:
     ab4:	45 52 52 4f 52 3a 20 73 63 68 65 64 75 6c 65 72     ERROR: scheduler
     ac4:	5f 6d 61 6c 6c 6f 63 20 72 65 74 75 72 6e 65 64     _malloc returned
     ad4:	20 61 20 6e 65 77 5f 74 61 73 6b 20 70 6f 69 6e      a new_task poin
     ae4:	74 65 72 20 6f 75 74 73 69 64 65 20 6f 66 20 74     ter outside of t
     af4:	68 65 20 74 61 73 6b 20 73 74 6f 72 61 67 65 20     he task storage 
     b04:	61 72 72 61 79 2e 0d 0a 00                          array....

00000b0d <__c.4828>:
     b0d:	45 52 52 4f 52 3a 20 4e 6f 20 65 6d 70 74 79 20     ERROR: No empty 
     b1d:	73 70 6f 74 20 66 6f 75 6e 64 20 69 6e 20 73 63     spot found in sc
     b2d:	68 65 64 75 6c 65 72 5f 6d 61 6c 6c 6f 63 2c 20     heduler_malloc, 
     b3d:	62 75 74 20 6e 75 6d 5f 74 61 73 6b 73 20 77 61     but num_tasks wa
     b4d:	73 6e 27 74 20 67 72 65 61 74 65 72 20 74 68 61     sn't greater tha
     b5d:	6e 20 6f 72 20 65 71 75 61 6c 20 6d 61 78 5f 74     n or equal max_t
     b6d:	61 73 6b 73 2e 0d 0a 00                             asks....

00000b75 <__c.4791>:
     b75:	09 41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 72     .Attempting to r
     b85:	65 73 74 6f 72 65 20 74 61 73 6b 5f 6c 69 73 74     estore task_list
     b95:	2e 0d 0a 09 49 66 20 79 6f 75 20 6f 6e 6c 79 20     ....If you only 
     ba5:	73 65 65 20 74 68 69 73 20 6d 65 73 73 61 67 65     see this message
     bb5:	20 72 61 72 65 6c 79 2c 20 64 6f 6e 27 74 20 77      rarely, don't w
     bc5:	6f 72 72 79 20 74 6f 6f 20 6d 75 63 68 2e 0d 0a     orry too much...
     bd5:	00                                                  .

00000bd6 <__c.4766>:
     bd6:	45 52 52 4f 52 3a 20 49 6e 20 73 63 68 65 64 75     ERROR: In schedu
     be6:	6c 65 72 5f 66 72 65 65 2c 20 74 67 74 20 28 25     ler_free, tgt (%
     bf6:	58 29 20 77 61 73 20 6f 75 74 73 69 64 65 20 76     X) was outside v
     c06:	61 6c 69 64 20 54 61 73 6b 2a 20 72 61 6e 67 65     alid Task* range
     c16:	2e 0d 0a 00                                         ....

00000c1a <__c.5361>:
     c1a:	4d 65 73 73 61 67 65 20 6c 65 6e 67 74 68 20 77     Message length w
     c2a:	61 73 20 25 7a 20 63 68 61 72 73 2c 20 77 68 69     as %z chars, whi
     c3a:	63 68 20 65 78 63 65 65 64 73 20 74 68 65 20 6d     ch exceeds the m
     c4a:	61 78 69 6d 75 6d 20 6f 66 20 25 75 00              aximum of %u.

00000c57 <__c.5356>:
     c57:	42 72 6f 61 64 63 61 73 74 69 6e 67 20 63 6f 6d     Broadcasting com
     c67:	6d 61 6e 64 20 74 6f 20 25 30 34 58 3a 20 22 25     mand to %04X: "%
     c77:	73 22 2c 20 6f 66 20 6c 65 6e 67 74 68 20 25 69     s", of length %i
     c87:	2e 0d 0a 00                                         ....

00000c8b <__c.5347>:
     c8b:	42 72 6f 61 64 63 61 73 74 69 6e 67 20 63 6f 6d     Broadcasting com
     c9b:	6d 61 6e 64 3a 20 22 25 73 22 2c 20 6f 66 20 6c     mand: "%s", of l
     cab:	65 6e 67 74 68 20 25 69 2e 0d 0a 00                 ength %i....

00000cb7 <__c.5342>:
     cb7:	4d 79 20 49 44 20 69 73 3a 20 25 30 34 58 0d 0a     My ID is: %04X..
     cc7:	00                                                  .

00000cc8 <__c.5310>:
     cc8:	47 6f 74 20 61 64 6a 75 73 74 5f 6d 6f 74 6f 72     Got adjust_motor
     cd8:	73 20 63 6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63     s command. direc
     ce8:	74 69 6f 6e 3a 20 25 68 75 2c 20 4e 65 77 20 53     tion: %hu, New S
     cf8:	65 74 74 69 6e 67 73 3a 20 28 25 64 2c 20 25 64     ettings: (%d, %d
     d08:	2c 20 25 64 29 0d 0a 00                             , %d)...

00000d10 <__c.5308>:
     d10:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d20:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     d30:	6c 2e 0d 0a 00                                      l....

00000d35 <__c.5306>:
     d35:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d45:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     d55:	61 6c 2e 0d 0a 00                                   al....

00000d5b <__c.5304>:
     d5b:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d6b:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     d7b:	6c 2e 0d 0a 00                                      l....

00000d80 <__c.5302>:
     d80:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     d90:	6f 74 3a 20 25 68 75 2e 0d 0a 00                    ot: %hu....

00000d9b <__c.5299>:
     d9b:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     dab:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     dbb:	6e 2e 0d 0a 00                                      n....

00000dc0 <__c.5289>:
     dc0:	47 6f 74 20 73 65 74 5f 6d 6f 74 6f 72 73 20 63     Got set_motors c
     dd0:	6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63 74 69 6f     ommand. directio
     de0:	6e 3a 20 25 68 75 2c 20 76 61 6c 73 3a 20 28 25     n: %hu, vals: (%
     df0:	64 2c 20 25 64 2c 20 25 64 29 0d 0a 00              d, %d, %d)...

00000dfd <__c.5287>:
     dfd:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e0d:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     e1d:	6c 2e 0d 0a 00                                      l....

00000e22 <__c.5285>:
     e22:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e32:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     e42:	61 6c 2e 0d 0a 00                                   al....

00000e48 <__c.5283>:
     e48:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e58:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     e68:	6c 2e 0d 0a 00                                      l....

00000e6d <__c.5281>:
     e6d:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     e7d:	6f 74 3a 20 25 68 75 2e 0d 0a 00                    ot: %hu....

00000e88 <__c.5278>:
     e88:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e98:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     ea8:	6e 2e 0d 0a 00                                      n....

00000ead <__c.5259>:
     ead:	72 3a 20 25 68 75 2c 20 67 3a 20 25 68 75 2c 20     r: %hu, g: %hu, 
     ebd:	62 3a 20 25 68 75 0d 0a 00                          b: %hu...

00000ec6 <__c.5244>:
     ec6:	77 61 6c 6b 20 64 69 72 65 63 74 69 6f 6e 20 25     walk direction %
     ed6:	68 75 2c 20 6e 75 6d 5f 73 74 65 70 73 20 25 75     hu, num_steps %u
     ee6:	0d 0a 00                                            ...

00000ee9 <__c.5226>:
     ee9:	70 72 69 6e 74 5f 6d 6f 74 6f 72 5f 73 65 74 74     print_motor_sett
     ef9:	69 6e 67 73 00                                      ings.

00000efe <__c.5224>:
     efe:	77 72 69 74 65 5f 6d 6f 74 6f 72 5f 73 65 74 74     write_motor_sett
     f0e:	69 6e 67 73 00                                      ings.

00000f13 <__c.5222>:
     f13:	72 65 73 65 74 00                                   reset.

00000f19 <__c.5220>:
     f19:	74 61 73 6b 73 00                                   tasks.

00000f1f <__c.5218>:
     f1f:	74 67 74 00                                         tgt.

00000f23 <__c.5216>:
     f23:	6d 73 67 5f 74 73 74 00                             msg_tst.

00000f2b <__c.5214>:
     f2b:	6d 73 67 00                                         msg.

00000f2f <__c.5212>:
     f2f:	74 67 74 5f 63 6d 64 00                             tgt_cmd.

00000f37 <__c.5210>:
     f37:	63 6d 64 00                                         cmd.

00000f3b <__c.5208>:
     f3b:	62 72 6f 61 64 63 61 73 74 5f 69 64 00              broadcast_id.

00000f48 <__c.5206>:
     f48:	67 65 74 5f 69 64 00                                get_id.

00000f4f <__c.5204>:
     f4f:	73 65 74 5f 6c 65 64 00                             set_led.

00000f57 <__c.5202>:
     f57:	72 6e 62 5f 62 00                                   rnb_b.

00000f5d <__c.5200>:
     f5d:	73 65 74 5f 64 69 73 74 5f 70 65 72 5f 73 74 65     set_dist_per_ste
     f6d:	70 00                                               p.

00000f6f <__c.5198>:
     f6f:	61 64 6a 5f 6d 6f 74 6f 72 73 00                    adj_motors.

00000f7a <__c.5196>:
     f7a:	73 65 74 5f 6d 6f 74 6f 72 73 00                    set_motors.

00000f85 <__c.5194>:
     f85:	73 74 6f 70 5f 77 61 6c 6b 00                       stop_walk.

00000f8f <__c.5192>:
     f8f:	63 6f 6c 6c 00                                      coll.

00000f94 <__c.5190>:
     f94:	73 65 74 5f 69 72 00                                set_ir.

00000f9b <__c.5188>:
     f9b:	67 65 74 5f 72 67 62 00                             get_rgb.

00000fa3 <__c.5186>:
     fa3:	77 61 6c 6b 00                                      walk.

00000fa8 <__c.5184>:
     fa8:	6d 6f 76 65 5f 73 74 65 70 73 00                    move_steps.

00000fb3 <CMD_NOT_RECOGNIZED_STR>:
     fb3:	09 43 6f 6d 6d 61 6e 64 20 28 20 25 73 20 29 20     .Command ( %s ) 
     fc3:	6e 6f 74 20 72 65 63 6f 67 6e 69 7a 65 64 2e 0d     not recognized..
     fd3:	0a 00                                               ..

00000fd5 <__c.2529>:
     fd5:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     fe5:	47 00                                               G.

00000fe7 <pstr_an>:
     fe7:	61 6e 00                                            an.

00000fea <pstr_nfinity>:
     fea:	6e 66 69 6e 69 74 79 00                             nfinity.

00000ff2 <pwr_m10>:
     ff2:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1002:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000100a <pwr_p10>:
    100a:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    101a:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00001022 <__ctors_end>:
    1022:	11 24       	eor	r1, r1
    1024:	1f be       	out	0x3f, r1	; 63
    1026:	cf ef       	ldi	r28, 0xFF	; 255
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	df e3       	ldi	r29, 0x3F	; 63
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	00 e0       	ldi	r16, 0x00	; 0
    1030:	0c bf       	out	0x3c, r16	; 60

00001032 <__do_copy_data>:
    1032:	12 e2       	ldi	r17, 0x22	; 34
    1034:	a0 e0       	ldi	r26, 0x00	; 0
    1036:	b0 e2       	ldi	r27, 0x20	; 32
    1038:	e2 e4       	ldi	r30, 0x42	; 66
    103a:	fd e9       	ldi	r31, 0x9D	; 157
    103c:	00 e0       	ldi	r16, 0x00	; 0
    103e:	0b bf       	out	0x3b, r16	; 59
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <__do_copy_data+0x14>
    1042:	07 90       	elpm	r0, Z+
    1044:	0d 92       	st	X+, r0
    1046:	a2 32       	cpi	r26, 0x22	; 34
    1048:	b1 07       	cpc	r27, r17
    104a:	d9 f7       	brne	.-10     	; 0x1042 <__do_copy_data+0x10>

0000104c <__do_clear_bss>:
    104c:	25 e2       	ldi	r18, 0x25	; 37
    104e:	a2 e2       	ldi	r26, 0x22	; 34
    1050:	b2 e2       	ldi	r27, 0x22	; 34
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <.do_clear_bss_start>

00001054 <.do_clear_bss_loop>:
    1054:	1d 92       	st	X+, r1

00001056 <.do_clear_bss_start>:
    1056:	af 39       	cpi	r26, 0x9F	; 159
    1058:	b2 07       	cpc	r27, r18
    105a:	e1 f7       	brne	.-8      	; 0x1054 <.do_clear_bss_loop>
    105c:	0e 94 ca 08 	call	0x1194	; 0x1194 <main>
    1060:	0c 94 9f 4e 	jmp	0x9d3e	; 0x9d3e <_exit>

00001064 <__bad_interrupt>:
    1064:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001068 <getTime>:

.extern rtc_epoch
; Gets the time as an atomic operation
.global getTime
getTime:
	in		r0,_SFR_IO_ADDR(SREG)		; Save the state of the status register
    1068:	0f b6       	in	r0, 0x3f	; 63
	cli									; Disable interrupts
    106a:	f8 94       	cli
	lds		r22, RTC_CNT				; Load low byte into return value
    106c:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
	lds		r23, RTC_CNT+1
    1070:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	lds		r24, rtc_epoch				; epoch 16-bit high word
    1074:	80 91 b1 23 	lds	r24, 0x23B1	; 0x8023b1 <rtc_epoch>
	lds		r25, rtc_epoch+1
    1078:	90 91 b2 23 	lds	r25, 0x23B2	; 0x8023b2 <rtc_epoch+0x1>
	out		_SFR_IO_ADDR(SREG), r0		; Restore status register (including re-enabling interrupts if necessary)
    107c:	0f be       	out	0x3f, r0	; 63
	ret
    107e:	08 95       	ret

00001080 <init>:
/*
 * any code in this function will be run once, when the robot starts.
 */
void init(){
		
	delayMS(10);
    1080:	8a e0       	ldi	r24, 0x0A	; 10
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
	moveSteps(0, 10);
    1088:	6a e0       	ldi	r22, 0x0A	; 10
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <moveSteps>

00001092 <loop>:
/*
 * the code in this function will be called repeatedly, as fast as it can execute.
 */
void loop(){

	delayMS(10);
    1092:	8a e0       	ldi	r24, 0x0A	; 10
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0c 94 4e 08 	jmp	0x109c	; 0x109c <delayMS>

0000109a <handleMsg>:

/*
 * after each pass through loop(), the robot checks for all messages it has 
 * received, and calls this function once for each message.
 */
void handleMsg(irMsg* msgStruct){
    109a:	08 95       	ret

0000109c <delayMS>:
#include "droplet_base.h"

void delayMS(uint16_t ms){
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	7c 01       	movw	r14, r24
	uint32_t cur_time, end_time;
	cli(); cur_time = getTime(); sei();
    10a6:	f8 94       	cli
    10a8:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    10ac:	78 94       	sei
	end_time = cur_time + ms;
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	2e 0d       	add	r18, r14
    10b4:	3f 1d       	adc	r19, r15
    10b6:	41 1d       	adc	r20, r1
    10b8:	51 1d       	adc	r21, r1
    10ba:	69 01       	movw	r12, r18
    10bc:	7a 01       	movw	r14, r20
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <delayMS+0x2e>
		cli();
		if (getTime() >= end_time){
			sei();
			return;
		}
		sei();
    10c0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c2:	3a e6       	ldi	r19, 0x6A	; 106
    10c4:	3a 95       	dec	r19
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <delayMS+0x28>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <delayMS+0x2e>
void delayMS(uint16_t ms){
	uint32_t cur_time, end_time;
	cli(); cur_time = getTime(); sei();
	end_time = cur_time + ms;
	while (1){
		cli();
    10ca:	f8 94       	cli
		if (getTime() >= end_time){
    10cc:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    10d0:	6c 15       	cp	r22, r12
    10d2:	7d 05       	cpc	r23, r13
    10d4:	8e 05       	cpc	r24, r14
    10d6:	9f 05       	cpc	r25, r15
    10d8:	98 f3       	brcs	.-26     	; 0x10c0 <delayMS+0x24>
			sei();
    10da:	78 94       	sei
			return;
		}
		sei();
		delay_us(10);
	}
}
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	df 90       	pop	r13
    10e2:	cf 90       	pop	r12
    10e4:	08 95       	ret

000010e6 <startupLightSequence>:
	PMIC.CTRL |= PMIC_RREN_bm;
	sei();
}

void startupLightSequence(){
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	84 e6       	ldi	r24, 0x64	; 100
    10ec:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    10f0:	84 e6       	ldi	r24, 0x64	; 100
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	64 e6       	ldi	r22, 0x64	; 100
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    1102:	84 e6       	ldi	r24, 0x64	; 100
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    110a:	44 e6       	ldi	r20, 0x64	; 100
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    1114:	84 e6       	ldi	r24, 0x64	; 100
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    111c:	0e 94 c5 2c 	call	0x598a	; 0x598a <ledOff>
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	84 e6       	ldi	r24, 0x64	; 100
    1126:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    112a:	84 e6       	ldi	r24, 0x64	; 100
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	64 e6       	ldi	r22, 0x64	; 100
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    113c:	84 e6       	ldi	r24, 0x64	; 100
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    1144:	44 e6       	ldi	r20, 0x64	; 100
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    114e:	84 e6       	ldi	r24, 0x64	; 100
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    1156:	0e 94 c5 2c 	call	0x598a	; 0x598a <ledOff>
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	84 e6       	ldi	r24, 0x64	; 100
    1160:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    1164:	84 e6       	ldi	r24, 0x64	; 100
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	64 e6       	ldi	r22, 0x64	; 100
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    1176:	84 e6       	ldi	r24, 0x64	; 100
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    117e:	44 e6       	ldi	r20, 0x64	; 100
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    1188:	84 e6       	ldi	r24, 0x64	; 100
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    1190:	0c 94 c5 2c 	jmp	0x598a	; 0x598a <ledOff>

00001194 <main>:
	startupLightSequence();
	
	irCommInit();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
}

int main(void){
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	c0 54       	subi	r28, 0x40	; 64
    119e:	d1 09       	sbc	r29, r1
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	de bf       	out	0x3e, r29	; 62
/**
 * \brief Initializes all the subsystems for this Droplet. This function MUST be called
 * by the user before using any other functions in the API.
 */ 
static void initAllSystems(void){
	cli();
    11a4:	f8 94       	cli
	}
}

inline void Config32MHzClock(void){
	// Set system clock to 32 MHz
	CCP = CCP_IOREG_gc;
    11a6:	88 ed       	ldi	r24, 0xD8	; 216
    11a8:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    11b0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    11b4:	81 ff       	sbrs	r24, 1
    11b6:	fc cf       	rjmp	.-8      	; 0x11b0 <main+0x1c>
	CCP = CCP_IOREG_gc;
    11b8:	88 ed       	ldi	r24, 0xD8	; 216
    11ba:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	//OSC.RC32KCAL = PRODSIGNATURES_RCOSC32K;
	// Set up real-time clock
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    11c2:	85 e0       	ldi	r24, 0x05	; 5
    11c4:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	while (RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    11c8:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    11cc:	80 fd       	sbrc	r24, 0
    11ce:	fc cf       	rjmp	.-8      	; 0x11c8 <main+0x34>
	
	RTC.PER = 0xFFFF;		//(2^16)-1 milliseconds is 65.535 seconds
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    11d8:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>

	// reset RTC to 0, important for after a reboot:
	while(RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    11e2:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    11e6:	80 fd       	sbrc	r24, 0
    11e8:	fc cf       	rjmp	.-8      	; 0x11e2 <main+0x4e>
	RTC.CNT = 0;
    11ea:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    11ee:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	uint16_t crc = 0;
	
	// calculate local id
	// simply crc of user sig row
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};
    11f8:	80 e4       	ldi	r24, 0x40	; 64
    11fa:	e0 e2       	ldi	r30, 0x20	; 32
    11fc:	f0 e2       	ldi	r31, 0x20	; 32
    11fe:	de 01       	movw	r26, r28
    1200:	11 96       	adiw	r26, 0x01	; 1
    1202:	01 90       	ld	r0, Z+
    1204:	0d 92       	st	X+, r0
    1206:	8a 95       	dec	r24
    1208:	e1 f7       	brne	.-8      	; 0x1202 <main+0x6e>
    120a:	de 01       	movw	r26, r28
    120c:	11 96       	adiw	r26, 0x01	; 1
    120e:	9e 01       	movw	r18, r28
    1210:	2f 5b       	subi	r18, 0xBF	; 191
    1212:	3f 4f       	sbci	r19, 0xFF	; 255

static void calculateIdNumber(void){
	INIT_DEBUG_PRINT("get id number\r\n");

	uint32_t pgm_bytes = 0;
	uint16_t crc = 0;
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++){
		pgm_bytes = pgm_read_word_far(addrs[i]);
    1218:	4d 91       	ld	r20, X+
    121a:	5d 91       	ld	r21, X+
    121c:	6d 91       	ld	r22, X+
    121e:	7d 91       	ld	r23, X+
    1220:	6b bf       	out	0x3b, r22	; 59
    1222:	fa 01       	movw	r30, r20
    1224:	47 91       	elpm	r20, Z+
    1226:	56 91       	elpm	r21, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    1228:	84 27       	eor	r24, r20
    122a:	48 2f       	mov	r20, r24
    122c:	42 95       	swap	r20
    122e:	48 27       	eor	r20, r24
    1230:	04 2e       	mov	r0, r20
    1232:	46 95       	lsr	r20
    1234:	46 95       	lsr	r20
    1236:	40 25       	eor	r20, r0
    1238:	04 2e       	mov	r0, r20
    123a:	46 95       	lsr	r20
    123c:	40 25       	eor	r20, r0
    123e:	47 70       	andi	r20, 0x07	; 7
    1240:	08 2e       	mov	r0, r24
    1242:	89 2f       	mov	r24, r25
    1244:	46 95       	lsr	r20
    1246:	07 94       	ror	r0
    1248:	47 95       	ror	r20
    124a:	90 2d       	mov	r25, r0
    124c:	84 27       	eor	r24, r20
    124e:	06 94       	lsr	r0
    1250:	47 95       	ror	r20
    1252:	90 25       	eor	r25, r0
    1254:	84 27       	eor	r24, r20
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++){
    1256:	2a 17       	cp	r18, r26
    1258:	3b 07       	cpc	r19, r27
    125a:	f1 f6       	brne	.-68     	; 0x1218 <main+0x84>
		pgm_bytes = pgm_read_word_far(addrs[i]);
		crc = _crc16_update(crc, (uint16_t)(pgm_bytes&0xFF));
	}

	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    125c:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	droplet_ID = crc;
    1260:	80 93 af 23 	sts	0x23AF, r24	; 0x8023af <droplet_ID>
    1264:	90 93 b0 23 	sts	0x23B0, r25	; 0x8023b0 <droplet_ID+0x1>
	cli();
	Config32MHzClock();
	
	calculateIdNumber();
	
	schedulerInit();			INIT_DEBUG_PRINT("SCHEDULER INIT\r\n");
    1268:	0e 94 86 30 	call	0x610c	; 0x610c <schedulerInit>
	pcCommInit();				INIT_DEBUG_PRINT("PC COM INIT\r\n");
    126c:	0e 94 b8 20 	call	0x4170	; 0x4170 <pcCommInit>
	rgbLEDinit();				INIT_DEBUG_PRINT("LED INIT\r\n");
    1270:	0e 94 a7 2c 	call	0x594e	; 0x594e <rgbLEDinit>
	powerInit();				INIT_DEBUG_PRINT("POWER INIT\r\n");
    1274:	0e 94 a8 21 	call	0x4350	; 0x4350 <powerInit>
	i2cInit();					INIT_DEBUG_PRINT("I2C INIT\r\n");
    1278:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <i2cInit>

	droplet_ID = crc;
}

static void enableInterrupts(void){
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// enable low level interrupts
    127c:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1280:	81 60       	ori	r24, 0x01	; 1
    1282:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// enable medium level interrupts	(e.g. TXCIF)
    1286:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    128a:	82 60       	ori	r24, 0x02	; 2
    128c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// enable high level interrupts		(e.g. RTC_OVF)
    1290:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1294:	84 60       	ori	r24, 0x04	; 4
    1296:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_RREN_bm;
    129a:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    129e:	80 68       	ori	r24, 0x80	; 128
    12a0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    12a4:	78 94       	sei
	powerInit();				INIT_DEBUG_PRINT("POWER INIT\r\n");
	i2cInit();					INIT_DEBUG_PRINT("I2C INIT\r\n");
	
	enableInterrupts();	
	
	rangeAlgsInit();			INIT_DEBUG_PRINT("RANGE ALGORITHMS INIT\r\n");
    12a6:	0e 94 88 22 	call	0x4510	; 0x4510 <rangeAlgsInit>
	rgbSensorInit();			INIT_DEBUG_PRINT("RGB SENSE INIT\r\n");
    12aa:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <rgbSensorInit>
	irLedInit();				INIT_DEBUG_PRINT("IR LED INIT\r\n");
    12ae:	0e 94 c4 19 	call	0x3388	; 0x3388 <irLedInit>
	irSensorInit();			INIT_DEBUG_PRINT("IR SENSE INIT\r\n");
    12b2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <irSensorInit>
	#ifdef AUDIO_DROPLET
		speakerInit();			INIT_DEBUG_PRINT("SPEAKER INIT\r\n");
		micInit();				INIT_DEBUG_PRINT("MIC INIT\r\n"); //Must occur after ir_sensor_init.
	#endif
	
	motorInit();				INIT_DEBUG_PRINT("MOTOR INIT\r\n");
    12b6:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <motorInit>
	randomInit();				INIT_DEBUG_PRINT("RAND INIT\r\n"); //This uses adc readings for a random seed, and so requires that the adcs have been initialized.
    12ba:	0e 94 c9 21 	call	0x4392	; 0x4392 <randomInit>
	localizationInit();		INIT_DEBUG_PRINT("LOCALIZATION INIT\r\n"); 
    12be:	0e 94 ce 1c 	call	0x399c	; 0x399c <localizationInit>
	
	#ifdef SYNCHRONIZED
		fireflySyncInit();
    12c2:	0e 94 b6 0b 	call	0x176c	; 0x176c <fireflySyncInit>
	#endif


	setAllirPowers(256);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 67 1a 	call	0x34ce	; 0x34ce <setAllirPowers>

	startupLightSequence();
    12ce:	0e 94 73 08 	call	0x10e6	; 0x10e6 <startupLightSequence>
	
	irCommInit();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
    12d2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <irCommInit>
}

int main(void){
	initAllSystems();
	init();
    12d6:	0e 94 40 08 	call	0x1080	; 0x1080 <init>
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    12da:	84 e7       	ldi	r24, 0x74	; 116
    12dc:	28 2e       	mov	r2, r24
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	38 2e       	mov	r3, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    12e2:	9c e4       	ldi	r25, 0x4C	; 76
    12e4:	89 2e       	mov	r8, r25
    12e6:	94 e0       	ldi	r25, 0x04	; 4
    12e8:	99 2e       	mov	r9, r25
	init();
	while(1){
		loop();
		checkMessages();
		if(taskListCheck()){
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    12ea:	2d ed       	ldi	r18, 0xDD	; 221
    12ec:	42 2e       	mov	r4, r18
    12ee:	24 e0       	ldi	r18, 0x04	; 4
    12f0:	52 2e       	mov	r5, r18

int main(void){
	initAllSystems();
	init();
	while(1){
		loop();
    12f2:	0e 94 49 08 	call	0x1092	; 0x1092 <loop>
 * For each message, it populates an ir_msg struct and calls handle_msg with it.
 */
static void checkMessages(void){
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
    12f6:	80 91 4d 25 	lds	r24, 0x254D	; 0x80254d <userFacingMessagesOvf>
    12fa:	81 11       	cpse	r24, r1
    12fc:	98 c0       	rjmp	.+304    	; 0x142e <main+0x29a>
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
    12fe:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1300:	f8 94       	cli
		uint16_t crc;
		while(incomingMsgHead != NULL){
    1302:	00 91 7f 25 	lds	r16, 0x257F	; 0x80257f <incomingMsgHead>
    1306:	10 91 80 25 	lds	r17, 0x2580	; 0x802580 <incomingMsgHead+0x1>
    130a:	01 15       	cp	r16, r1
    130c:	11 05       	cpc	r17, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <main+0x17e>
    1310:	7d c0       	rjmp	.+250    	; 0x140c <main+0x278>
    1312:	ad b6       	in	r10, 0x3d	; 61
    1314:	be b6       	in	r11, 0x3e	; 62
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
    1316:	d8 01       	movw	r26, r16
    1318:	1c 96       	adiw	r26, 0x0c	; 12
    131a:	4c 91       	ld	r20, X
    131c:	44 23       	and	r20, r20
    131e:	09 f4       	brne	.+2      	; 0x1322 <main+0x18e>
    1320:	b3 c0       	rjmp	.+358    	; 0x1488 <main+0x2f4>
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
			}
			char msgData[node->length];
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	8d b7       	in	r24, 0x3d	; 61
    1326:	9e b7       	in	r25, 0x3e	; 62
    1328:	84 1b       	sub	r24, r20
    132a:	95 0b       	sbc	r25, r21
    132c:	8d bf       	out	0x3d, r24	; 61
    132e:	9e bf       	out	0x3e, r25	; 62
    1330:	ad b7       	in	r26, 0x3d	; 61
    1332:	be b7       	in	r27, 0x3e	; 62
    1334:	11 96       	adiw	r26, 0x01	; 1
    1336:	7d 01       	movw	r14, r26
			memcpy(msgData, node->msg, node->length);
    1338:	f8 01       	movw	r30, r16
    133a:	60 85       	ldd	r22, Z+8	; 0x08
    133c:	71 85       	ldd	r23, Z+9	; 0x09
    133e:	cd 01       	movw	r24, r26
    1340:	0e 94 9f 4c 	call	0x993e	; 0x993e <memcpy>
			msgStruct.msg			= msgData;
    1344:	ef 82       	std	Y+7, r14	; 0x07
    1346:	f8 86       	std	Y+8, r15	; 0x08
			msgStruct.arrivalTime	= node->arrivalTime;
    1348:	f8 01       	movw	r30, r16
    134a:	80 81       	ld	r24, Z
    134c:	91 81       	ldd	r25, Z+1	; 0x01
    134e:	a2 81       	ldd	r26, Z+2	; 0x02
    1350:	b3 81       	ldd	r27, Z+3	; 0x03
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	ab 83       	std	Y+3, r26	; 0x03
    1358:	bc 83       	std	Y+4, r27	; 0x04
			msgStruct.senderID		= node->senderID;
    135a:	84 81       	ldd	r24, Z+4	; 0x04
    135c:	95 81       	ldd	r25, Z+5	; 0x05
    135e:	8d 83       	std	Y+5, r24	; 0x05
    1360:	9e 83       	std	Y+6, r25	; 0x06
			msgStruct.length		= node->length;
    1362:	84 85       	ldd	r24, Z+12	; 0x0c
    1364:	89 87       	std	Y+9, r24	; 0x09
			crc						= node->crc;
    1366:	c6 80       	ldd	r12, Z+6	; 0x06
    1368:	d7 80       	ldd	r13, Z+7	; 0x07
			//While we let user code handle the message we want interrupts to be back on. At this point everything relevant has been copied out of the buffer.
			NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ 
    136a:	ff b6       	in	r15, 0x3f	; 63

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    136c:	78 94       	sei
				handleMsg(&msgStruct);
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	0e 94 4d 08 	call	0x109a	; 0x109a <handleMsg>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1376:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    1378:	78 01       	movw	r14, r16
			}
			
			MsgNode* tmp = node;
			MsgNode* deleteMe;
			while(tmp->next !=NULL){
    137a:	d7 01       	movw	r26, r14
    137c:	1a 96       	adiw	r26, 0x0a	; 10
    137e:	ed 91       	ld	r30, X+
    1380:	fc 91       	ld	r31, X
    1382:	1b 97       	sbiw	r26, 0x0b	; 11
    1384:	30 97       	sbiw	r30, 0x00	; 0
    1386:	d1 f0       	breq	.+52     	; 0x13bc <main+0x228>
				uint8_t crcMatches = (tmp->next->crc == crc);
				uint8_t closeTimes = (abs((int32_t)(tmp->next->arrivalTime) - (int32_t)(msgStruct.arrivalTime))) < 30;
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	29 81       	ldd	r18, Y+1	; 0x01
    138e:	3a 81       	ldd	r19, Y+2	; 0x02
    1390:	82 1b       	sub	r24, r18
    1392:	93 0b       	sbc	r25, r19
    1394:	83 3e       	cpi	r24, 0xE3	; 227
    1396:	2f ef       	ldi	r18, 0xFF	; 255
    1398:	92 07       	cpc	r25, r18
    139a:	44 f0       	brlt	.+16     	; 0x13ac <main+0x218>
    139c:	4e 97       	sbiw	r24, 0x1e	; 30
    139e:	34 f4       	brge	.+12     	; 0x13ac <main+0x218>
				if(crcMatches && closeTimes){
    13a0:	86 81       	ldd	r24, Z+6	; 0x06
    13a2:	97 81       	ldd	r25, Z+7	; 0x07
    13a4:	c8 16       	cp	r12, r24
    13a6:	d9 06       	cpc	r13, r25
    13a8:	09 f4       	brne	.+2      	; 0x13ac <main+0x218>
    13aa:	4d c0       	rjmp	.+154    	; 0x1446 <main+0x2b2>
    13ac:	7f 01       	movw	r14, r30
				handleMsg(&msgStruct);
			}
			
			MsgNode* tmp = node;
			MsgNode* deleteMe;
			while(tmp->next !=NULL){
    13ae:	d7 01       	movw	r26, r14
    13b0:	1a 96       	adiw	r26, 0x0a	; 10
    13b2:	ed 91       	ld	r30, X+
    13b4:	fc 91       	ld	r31, X
    13b6:	1b 97       	sbiw	r26, 0x0b	; 11
    13b8:	30 97       	sbiw	r30, 0x00	; 0
    13ba:	31 f7       	brne	.-52     	; 0x1388 <main+0x1f4>
				}else{
					tmp = tmp->next;
				}

			}
			incomingMsgHead = (volatile MsgNode*)(node->next);
    13bc:	f8 01       	movw	r30, r16
    13be:	82 85       	ldd	r24, Z+10	; 0x0a
    13c0:	93 85       	ldd	r25, Z+11	; 0x0b
    13c2:	80 93 7f 25 	sts	0x257F, r24	; 0x80257f <incomingMsgHead>
    13c6:	90 93 80 25 	sts	0x2580, r25	; 0x802580 <incomingMsgHead+0x1>
			numWaitingMsgs--;
    13ca:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <numWaitingMsgs>
    13ce:	81 50       	subi	r24, 0x01	; 1
    13d0:	80 93 fa 23 	sts	0x23FA, r24	; 0x8023fa <numWaitingMsgs>
			memoryConsumedByBuffer -= (sizeof(MsgNode) + msgStruct.length);
    13d4:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <memoryConsumedByBuffer>
    13d8:	90 91 e6 23 	lds	r25, 0x23E6	; 0x8023e6 <memoryConsumedByBuffer+0x1>
    13dc:	0d 97       	sbiw	r24, 0x0d	; 13
    13de:	29 85       	ldd	r18, Y+9	; 0x09
    13e0:	82 1b       	sub	r24, r18
    13e2:	91 09       	sbc	r25, r1
    13e4:	80 93 e5 23 	sts	0x23E5, r24	; 0x8023e5 <memoryConsumedByBuffer>
    13e8:	90 93 e6 23 	sts	0x23E6, r25	; 0x8023e6 <memoryConsumedByBuffer+0x1>
	}
	return tmp;
}

inline void myFree(void* ptr){
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    13ec:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13ee:	f8 94       	cli
		free(ptr);
    13f0:	c8 01       	movw	r24, r16
    13f2:	0e 94 df 49 	call	0x93be	; 0x93be <free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13f6:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    13f8:	ad be       	out	0x3d, r10	; 61
    13fa:	be be       	out	0x3e, r11	; 62
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
    13fc:	00 91 7f 25 	lds	r16, 0x257F	; 0x80257f <incomingMsgHead>
    1400:	10 91 80 25 	lds	r17, 0x2580	; 0x802580 <incomingMsgHead+0x1>
    1404:	01 15       	cp	r16, r1
    1406:	11 05       	cpc	r17, r1
    1408:	09 f0       	breq	.+2      	; 0x140c <main+0x278>
    140a:	83 cf       	rjmp	.-250    	; 0x1312 <main+0x17e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    140c:	7f be       	out	0x3f, r7	; 63
void removeTask(volatile Task_t*); // Removes a task from the queue
void printTaskQueue(void);

//Returns '1' if the next task to run is scheduled for more than 255ms in the past. If this occurs, call task_list_cleanup.
inline uint8_t taskListCheck(void){ 
	if(task_executing)	return 0;
    140e:	80 91 7e 25 	lds	r24, 0x257E	; 0x80257e <task_executing>
    1412:	88 23       	and	r24, r24
    1414:	09 f4       	brne	.+2      	; 0x1418 <main+0x284>
    1416:	41 c0       	rjmp	.+130    	; 0x149a <main+0x306>
		if(taskListCheck()){
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
			printTaskQueue();
			taskListCleanup();
		}
		delayMS(1);	
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>

int main(void){
	initAllSystems();
	init();
	while(1){
		loop();
    1420:	0e 94 49 08 	call	0x1092	; 0x1092 <loop>
 * For each message, it populates an ir_msg struct and calls handle_msg with it.
 */
static void checkMessages(void){
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
    1424:	80 91 4d 25 	lds	r24, 0x254D	; 0x80254d <userFacingMessagesOvf>
    1428:	88 23       	and	r24, r24
    142a:	09 f4       	brne	.+2      	; 0x142e <main+0x29a>
    142c:	68 cf       	rjmp	.-304    	; 0x12fe <main+0x16a>
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
    142e:	26 e0       	ldi	r18, 0x06	; 6
    1430:	20 93 fa 23 	sts	0x23FA, r18	; 0x8023fa <numWaitingMsgs>
		userFacingMessagesOvf=0;
    1434:	10 92 4d 25 	sts	0x254D, r1	; 0x80254d <userFacingMessagesOvf>
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    1438:	3f 92       	push	r3
    143a:	2f 92       	push	r2
    143c:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	5c cf       	rjmp	.-328    	; 0x12fe <main+0x16a>
			while(tmp->next !=NULL){
				uint8_t crcMatches = (tmp->next->crc == crc);
				uint8_t closeTimes = (abs((int32_t)(tmp->next->arrivalTime) - (int32_t)(msgStruct.arrivalTime))) < 30;
				if(crcMatches && closeTimes){
					deleteMe = tmp->next;
					tmp->next = tmp->next->next;
    1446:	82 85       	ldd	r24, Z+10	; 0x0a
    1448:	93 85       	ldd	r25, Z+11	; 0x0b
    144a:	d7 01       	movw	r26, r14
    144c:	1a 96       	adiw	r26, 0x0a	; 10
    144e:	8d 93       	st	X+, r24
    1450:	9c 93       	st	X, r25
    1452:	1b 97       	sbiw	r26, 0x0b	; 11
					memoryConsumedByBuffer -= (sizeof(MsgNode) + msgStruct.length);
    1454:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <memoryConsumedByBuffer>
    1458:	90 91 e6 23 	lds	r25, 0x23E6	; 0x8023e6 <memoryConsumedByBuffer+0x1>
    145c:	0d 97       	sbiw	r24, 0x0d	; 13
    145e:	29 85       	ldd	r18, Y+9	; 0x09
    1460:	82 1b       	sub	r24, r18
    1462:	91 09       	sbc	r25, r1
    1464:	80 93 e5 23 	sts	0x23E5, r24	; 0x8023e5 <memoryConsumedByBuffer>
    1468:	90 93 e6 23 	sts	0x23E6, r25	; 0x8023e6 <memoryConsumedByBuffer+0x1>
					numWaitingMsgs--;
    146c:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <numWaitingMsgs>
    1470:	81 50       	subi	r24, 0x01	; 1
    1472:	80 93 fa 23 	sts	0x23FA, r24	; 0x8023fa <numWaitingMsgs>
	}
	return tmp;
}

inline void myFree(void* ptr){
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1476:	6f b6       	in	r6, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1478:	f8 94       	cli
		free(ptr);
    147a:	cf 01       	movw	r24, r30
    147c:	0e 94 df 49 	call	0x93be	; 0x93be <free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1480:	6f be       	out	0x3f, r6	; 63
    __asm__ volatile ("" ::: "memory");
    1482:	f7 01       	movw	r30, r14
    1484:	7f 01       	movw	r14, r30
    1486:	93 cf       	rjmp	.-218    	; 0x13ae <main+0x21a>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    1488:	9f 92       	push	r9
    148a:	8f 92       	push	r8
    148c:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    1490:	f8 01       	movw	r30, r16
    1492:	44 85       	ldd	r20, Z+12	; 0x0c
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	44 cf       	rjmp	.-376    	; 0x1322 <main+0x18e>
	else				return (((int32_t)(getTime()-(task_list->scheduled_time)))>3000); 
    149a:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    149e:	e0 91 83 25 	lds	r30, 0x2583	; 0x802583 <task_list>
    14a2:	f0 91 84 25 	lds	r31, 0x2584	; 0x802584 <task_list+0x1>
    14a6:	00 81       	ld	r16, Z
    14a8:	11 81       	ldd	r17, Z+1	; 0x01
    14aa:	22 81       	ldd	r18, Z+2	; 0x02
    14ac:	33 81       	ldd	r19, Z+3	; 0x03
	initAllSystems();
	init();
	while(1){
		loop();
		checkMessages();
		if(taskListCheck()){
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	80 1b       	sub	r24, r16
    14b4:	91 0b       	sbc	r25, r17
    14b6:	a2 0b       	sbc	r26, r18
    14b8:	b3 0b       	sbc	r27, r19
    14ba:	89 3b       	cpi	r24, 0xB9	; 185
    14bc:	9b 40       	sbci	r25, 0x0B	; 11
    14be:	a1 05       	cpc	r26, r1
    14c0:	b1 05       	cpc	r27, r1
    14c2:	0c f4       	brge	.+2      	; 0x14c6 <main+0x332>
    14c4:	a9 cf       	rjmp	.-174    	; 0x1418 <main+0x284>
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    14c6:	5f 92       	push	r5
    14c8:	4f 92       	push	r4
    14ca:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
			printTaskQueue();
    14ce:	0e 94 88 31 	call	0x6310	; 0x6310 <printTaskQueue>
			taskListCleanup();
    14d2:	0e 94 c8 30 	call	0x6190	; 0x6190 <taskListCleanup>
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	9e cf       	rjmp	.-196    	; 0x1418 <main+0x284>

000014dc <EEPROM_read_byte>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    14dc:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    14e0:	27 fd       	sbrc	r18, 7
    14e2:	fc cf       	rjmp	.-8      	; 0x14dc <EEPROM_read_byte>

uint8_t EEPROM_read_byte(uint16_t addr)
{
        wait_for_nvm();
        
        NVM.ADDR0 = addr & 0xFF;
    14e4:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    14e8:	9f 71       	andi	r25, 0x1F	; 31
    14ea:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
        NVM.ADDR2 = 0;
    14ee:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    14f2:	86 e0       	ldi	r24, 0x06	; 6
    14f4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    14f8:	eb ec       	ldi	r30, 0xCB	; 203
    14fa:	f1 e0       	ldi	r31, 0x01	; 1
    14fc:	21 e0       	ldi	r18, 0x01	; 1
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	88 ed       	ldi	r24, 0xD8	; 216
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	84 bf       	out	0x34, r24	; 52
    1506:	20 83       	st	Z, r18
        NVM.ADDR2 = 0;
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();
        
        return NVM.DATA0;
    1508:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
}
    150c:	08 95       	ret

0000150e <EEPROM_write_byte>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    150e:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    1512:	27 fd       	sbrc	r18, 7
    1514:	fc cf       	rjmp	.-8      	; 0x150e <EEPROM_write_byte>

void flush_buffer(void)
{
        wait_for_nvm();
        
        if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    1516:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    151a:	21 ff       	sbrs	r18, 1
    151c:	0b c0       	rjmp	.+22     	; 0x1534 <EEPROM_write_byte+0x26>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    151e:	26 e3       	ldi	r18, 0x36	; 54
    1520:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    1524:	eb ec       	ldi	r30, 0xCB	; 203
    1526:	f1 e0       	ldi	r31, 0x01	; 1
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	28 ed       	ldi	r18, 0xD8	; 216
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	24 bf       	out	0x34, r18	; 52
    1532:	40 83       	st	Z, r20


void EEPROM_write_byte(uint16_t addr, uint8_t byte)
{
        flush_buffer();
        NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1534:	23 e3       	ldi	r18, 0x33	; 51
    1536:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
        
        NVM.ADDR0 = addr & 0xFF;
    153a:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    153e:	9f 71       	andi	r25, 0x1F	; 31
    1540:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
        NVM.ADDR2 = 0;
    1544:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
        
        NVM.DATA0 = byte;
    1548:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    154c:	85 e3       	ldi	r24, 0x35	; 53
    154e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    1552:	eb ec       	ldi	r30, 0xCB	; 203
    1554:	f1 e0       	ldi	r31, 0x01	; 1
    1556:	21 e0       	ldi	r18, 0x01	; 1
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	88 ed       	ldi	r24, 0xD8	; 216
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	84 bf       	out	0x34, r24	; 52
    1560:	20 83       	st	Z, r18
    1562:	08 95       	ret

00001564 <processObsQueue>:
}

void disableSyncBlink(){
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc;
	TCE0.CCA = 0;
	TCE0.CCB = 0;
    1564:	bf 92       	push	r11
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	e0 91 c1 23 	lds	r30, 0x23C1	; 0x8023c1 <obsStart>
    157a:	f0 91 c2 23 	lds	r31, 0x23C2	; 0x8023c2 <obsStart+0x1>
    157e:	c2 81       	ldd	r28, Z+2	; 0x02
    1580:	d3 81       	ldd	r29, Z+3	; 0x03
    1582:	ec 17       	cp	r30, r28
    1584:	fd 07       	cpc	r31, r29
    1586:	09 f4       	brne	.+2      	; 0x158a <processObsQueue+0x26>
    1588:	6f c0       	rjmp	.+222    	; 0x1668 <processObsQueue+0x104>
    158a:	c1 2c       	mov	r12, r1
    158c:	d1 2c       	mov	r13, r1
    158e:	76 01       	movw	r14, r12
    1590:	68 81       	ld	r22, Y
    1592:	79 81       	ldd	r23, Y+1	; 0x01
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <__floatunsisf>
    159c:	a7 01       	movw	r20, r14
    159e:	96 01       	movw	r18, r12
    15a0:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e7       	ldi	r20, 0x70	; 112
    15aa:	52 e4       	ldi	r21, 0x42	; 66
    15ac:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    15b0:	9b 01       	movw	r18, r22
    15b2:	ac 01       	movw	r20, r24
    15b4:	c7 01       	movw	r24, r14
    15b6:	b6 01       	movw	r22, r12
    15b8:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    15bc:	6b 01       	movw	r12, r22
    15be:	7c 01       	movw	r14, r24
    15c0:	0a 81       	ldd	r16, Y+2	; 0x02
    15c2:	1b 81       	ldd	r17, Y+3	; 0x03
    15c4:	bf b6       	in	r11, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	ce 01       	movw	r24, r28
    15ca:	0e 94 df 49 	call	0x93be	; 0x93be <free>
    15ce:	bf be       	out	0x3f, r11	; 63
    15d0:	e8 01       	movw	r28, r16
    15d2:	80 91 c1 23 	lds	r24, 0x23C1	; 0x8023c1 <obsStart>
    15d6:	90 91 c2 23 	lds	r25, 0x23C2	; 0x8023c2 <obsStart+0x1>
    15da:	80 17       	cp	r24, r16
    15dc:	91 07       	cpc	r25, r17
    15de:	c1 f6       	brne	.-80     	; 0x1590 <processObsQueue+0x2c>
    15e0:	c7 01       	movw	r24, r14
    15e2:	b6 01       	movw	r22, r12
    15e4:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    15e8:	f8 01       	movw	r30, r16
    15ea:	02 83       	std	Z+2, r16	; 0x02
    15ec:	13 83       	std	Z+3, r17	; 0x03
    15ee:	04 83       	std	Z+4, r16	; 0x04
    15f0:	15 83       	std	Z+5, r17	; 0x05
    15f2:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    15f6:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    15fa:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
    15fe:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
    1602:	c8 17       	cp	r28, r24
    1604:	d9 07       	cpc	r29, r25
    1606:	a0 f0       	brcs	.+40     	; 0x1630 <processObsQueue+0xcc>
    1608:	c6 0f       	add	r28, r22
    160a:	d7 1f       	adc	r29, r23
    160c:	c1 34       	cpi	r28, 0x41	; 65
    160e:	fd e9       	ldi	r31, 0x9D	; 157
    1610:	df 07       	cpc	r29, r31
    1612:	18 f5       	brcc	.+70     	; 0x165a <processObsQueue+0xf6>
    1614:	c0 93 20 0a 	sts	0x0A20, r28	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    1618:	d0 93 21 0a 	sts	0x0A21, r29	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	ff 90       	pop	r15
    1626:	ef 90       	pop	r14
    1628:	df 90       	pop	r13
    162a:	cf 90       	pop	r12
    162c:	bf 90       	pop	r11
    162e:	08 95       	ret
    1630:	c6 0f       	add	r28, r22
    1632:	d7 1f       	adc	r29, r23
    1634:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
    1638:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
    163c:	8c 17       	cp	r24, r28
    163e:	9d 07       	cpc	r25, r29
    1640:	28 f7       	brcc	.-54     	; 0x160c <processObsQueue+0xa8>
    1642:	40 91 26 22 	lds	r20, 0x2226	; 0x802226 <ffsync_blink_prev_b>
    1646:	60 91 27 22 	lds	r22, 0x2227	; 0x802227 <ffsync_blink_prev_g>
    164a:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <ffsync_blink_prev_r>
    164e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    1652:	c1 34       	cpi	r28, 0x41	; 65
    1654:	fd e9       	ldi	r31, 0x9D	; 157
    1656:	df 07       	cpc	r29, r31
    1658:	e8 f2       	brcs	.-70     	; 0x1614 <processObsQueue+0xb0>
    165a:	80 e4       	ldi	r24, 0x40	; 64
    165c:	9d e9       	ldi	r25, 0x9D	; 157
    165e:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    1662:	90 93 21 0a 	sts	0x0A21, r25	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    1666:	da cf       	rjmp	.-76     	; 0x161c <processObsQueue+0xb8>
    1668:	8f 01       	movw	r16, r30
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	bc cf       	rjmp	.-136    	; 0x15e8 <processObsQueue+0x84>

00001670 <sendPing>:
    1670:	9c 01       	movw	r18, r24
    1672:	40 e4       	ldi	r20, 0x40	; 64
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	8f e3       	ldi	r24, 0x3F	; 63
    167a:	0e 94 c6 12 	call	0x258c	; 0x258c <hpIrTargetedCmd>
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	42 eb       	ldi	r20, 0xB2	; 178
    1684:	5a e0       	ldi	r21, 0x0A	; 10
    1686:	68 ec       	ldi	r22, 0xC8	; 200
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 3c 33 	call	0x6678	; 0x6678 <scheduleTask>
    1692:	08 95       	ret

00001694 <__vector_49>:
}


ISR(TCE0_CCA_vect){
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	0b b6       	in	r0, 0x3b	; 59
    16a0:	0f 92       	push	r0
    16a2:	2f 93       	push	r18
    16a4:	3f 93       	push	r19
    16a6:	4f 93       	push	r20
    16a8:	5f 93       	push	r21
    16aa:	6f 93       	push	r22
    16ac:	7f 93       	push	r23
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	af 93       	push	r26
    16b4:	bf 93       	push	r27
    16b6:	ef 93       	push	r30
    16b8:	ff 93       	push	r31
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    16ba:	e0 e4       	ldi	r30, 0x40	; 64
    16bc:	fa e0       	ldi	r31, 0x0A	; 10
    16be:	82 ad       	ldd	r24, Z+58	; 0x3a
    16c0:	93 ad       	ldd	r25, Z+59	; 0x3b
	ffsync_blink_prev_r = getRedLED();
    16c2:	80 93 28 22 	sts	0x2228, r24	; 0x802228 <ffsync_blink_prev_r>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    16c6:	80 ad       	ldd	r24, Z+56	; 0x38
    16c8:	91 ad       	ldd	r25, Z+57	; 0x39
	ffsync_blink_prev_g = getGreenLED();
    16ca:	80 93 27 22 	sts	0x2227, r24	; 0x802227 <ffsync_blink_prev_g>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    16ce:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    16d2:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	ffsync_blink_prev_b = getBlueLED();
    16d6:	80 93 26 22 	sts	0x2226, r24	; 0x802226 <ffsync_blink_prev_b>
	setRGB(ffsync_blink_r,ffsync_blink_g,ffsync_blink_b);
    16da:	40 91 29 22 	lds	r20, 0x2229	; 0x802229 <ffsync_blink_b>
    16de:	60 91 2a 22 	lds	r22, 0x222A	; 0x80222a <ffsync_blink_g>
    16e2:	80 91 2b 22 	lds	r24, 0x222B	; 0x80222b <ffsync_blink_r>
    16e6:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
}
    16ea:	ff 91       	pop	r31
    16ec:	ef 91       	pop	r30
    16ee:	bf 91       	pop	r27
    16f0:	af 91       	pop	r26
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	7f 91       	pop	r23
    16f8:	6f 91       	pop	r22
    16fa:	5f 91       	pop	r21
    16fc:	4f 91       	pop	r20
    16fe:	3f 91       	pop	r19
    1700:	2f 91       	pop	r18
    1702:	0f 90       	pop	r0
    1704:	0b be       	out	0x3b, r0	; 59
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <__vector_50>:

ISR(TCE0_CCB_vect){
    1710:	1f 92       	push	r1
    1712:	0f 92       	push	r0
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	0f 92       	push	r0
    1718:	11 24       	eor	r1, r1
    171a:	0b b6       	in	r0, 0x3b	; 59
    171c:	0f 92       	push	r0
    171e:	2f 93       	push	r18
    1720:	3f 93       	push	r19
    1722:	4f 93       	push	r20
    1724:	5f 93       	push	r21
    1726:	6f 93       	push	r22
    1728:	7f 93       	push	r23
    172a:	8f 93       	push	r24
    172c:	9f 93       	push	r25
    172e:	af 93       	push	r26
    1730:	bf 93       	push	r27
    1732:	ef 93       	push	r30
    1734:	ff 93       	push	r31
	setRGB(ffsync_blink_prev_r, ffsync_blink_prev_g, ffsync_blink_prev_b);	
    1736:	40 91 26 22 	lds	r20, 0x2226	; 0x802226 <ffsync_blink_prev_b>
    173a:	60 91 27 22 	lds	r22, 0x2227	; 0x802227 <ffsync_blink_prev_g>
    173e:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <ffsync_blink_prev_r>
    1742:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
}
    1746:	ff 91       	pop	r31
    1748:	ef 91       	pop	r30
    174a:	bf 91       	pop	r27
    174c:	af 91       	pop	r26
    174e:	9f 91       	pop	r25
    1750:	8f 91       	pop	r24
    1752:	7f 91       	pop	r23
    1754:	6f 91       	pop	r22
    1756:	5f 91       	pop	r21
    1758:	4f 91       	pop	r20
    175a:	3f 91       	pop	r19
    175c:	2f 91       	pop	r18
    175e:	0f 90       	pop	r0
    1760:	0b be       	out	0x3b, r0	; 59
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <fireflySyncInit>:

void fireflySyncInit()
{
    176c:	cf 93       	push	r28
	ffsync_blink_r = 255;
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	80 93 2b 22 	sts	0x222B, r24	; 0x80222b <ffsync_blink_r>
	ffsync_blink_g = 255;
    1774:	80 93 2a 22 	sts	0x222A, r24	; 0x80222a <ffsync_blink_g>
	ffsync_blink_b = 255;
    1778:	80 93 29 22 	sts	0x2229, r24	; 0x802229 <ffsync_blink_b>
	ffsync_blink_dur = 200;
    177c:	88 ec       	ldi	r24, 0xC8	; 200
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	80 93 24 22 	sts	0x2224, r24	; 0x802224 <ffsync_blink_dur>
    1784:	90 93 25 22 	sts	0x2225, r25	; 0x802225 <ffsync_blink_dur+0x1>
	
	ffsync_blink_phase_offset_ms = 0;

	EVSYS.CH0MUX = EVSYS_CHMUX_PRESCALER_4096_gc;
    1788:	8c e8       	ldi	r24, 0x8C	; 140
    178a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	TCE0.CTRLA = TC_CLKSEL_EVCH0_gc;
    178e:	e0 e0       	ldi	r30, 0x00	; 0
    1790:	fa e0       	ldi	r31, 0x0A	; 10
    1792:	88 e0       	ldi	r24, 0x08	; 8
    1794:	80 83       	st	Z, r24
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;
    1796:	11 82       	std	Z+1, r1	; 0x01

	TCE0.PER =  FFSYNC_FULL_PERIOD;
    1798:	81 e4       	ldi	r24, 0x41	; 65
    179a:	9d e9       	ldi	r25, 0x9D	; 157
    179c:	86 a3       	std	Z+38, r24	; 0x26
    179e:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	86 83       	std	Z+6, r24	; 0x06
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc;	
    17a4:	17 82       	std	Z+7, r1	; 0x07
	TCE0.CNT = 0;
    17a6:	10 a2       	std	Z+32, r1	; 0x20
    17a8:	11 a2       	std	Z+33, r1	; 0x21
		TCE0.CCA = 0;
    17aa:	10 a6       	std	Z+40, r1	; 0x28
    17ac:	11 a6       	std	Z+41, r1	; 0x29
		TCE0.CCB = 0;
    17ae:	12 a6       	std	Z+42, r1	; 0x2a
    17b0:	13 a6       	std	Z+43, r1	; 0x2b
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    17b2:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17b4:	f8 94       	cli
		tmp = malloc(size);
    17b6:	86 e0       	ldi	r24, 0x06	; 6
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 47 49 	call	0x928e	; 0x928e <malloc>
    17be:	fc 01       	movw	r30, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    17c0:	cf bf       	out	0x3f, r28	; 63
	
	obsStart = (ObsQueue*)myMalloc(sizeof(ObsQueue));
    17c2:	80 93 c1 23 	sts	0x23C1, r24	; 0x8023c1 <obsStart>
    17c6:	90 93 c2 23 	sts	0x23C2, r25	; 0x8023c2 <obsStart+0x1>
	obsStart->obs = 0;
    17ca:	10 82       	st	Z, r1
    17cc:	11 82       	std	Z+1, r1	; 0x01
	obsStart->next = obsStart;
    17ce:	82 83       	std	Z+2, r24	; 0x02
    17d0:	93 83       	std	Z+3, r25	; 0x03
	obsStart->prev = obsStart;
    17d2:	84 83       	std	Z+4, r24	; 0x04
    17d4:	95 83       	std	Z+5, r25	; 0x05
}
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <__vector_47>:

ISR(TCE0_OVF_vect){
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	11 24       	eor	r1, r1
    17e4:	0b b6       	in	r0, 0x3b	; 59
    17e6:	0f 92       	push	r0
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	1f 93       	push	r17
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
	uint32_t randomWait = (randShort()%32)*20; //between 0 and 640ms
    1812:	0e 94 34 22 	call	0x4468	; 0x4468 <randShort>
    1816:	ec 01       	movw	r28, r24
}

static void updateRTC(void){
	int16_t change;
	uint16_t remainder;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1818:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    181a:	f8 94       	cli
	{
		uint32_t currTime = getTime();
    181c:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    1820:	6b 01       	movw	r12, r22
    1822:	7c 01       	movw	r14, r24
		uint16_t theCount = currTime&0xFFFF;		
		remainder = (int16_t)(currTime%FFSYNC_FULL_PERIOD_MS);
    1824:	21 e2       	ldi	r18, 0x21	; 33
    1826:	34 e1       	ldi	r19, 0x14	; 20
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	0e 94 03 49 	call	0x9206	; 0x9206 <__udivmodsi4>
		//printf("%u.\r\n", remainder);
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
    1830:	61 31       	cpi	r22, 0x11	; 17
    1832:	2a e0       	ldi	r18, 0x0A	; 10
    1834:	72 07       	cpc	r23, r18
    1836:	08 f4       	brcc	.+2      	; 0x183a <__vector_47+0x60>
    1838:	69 c0       	rjmp	.+210    	; 0x190c <__vector_47+0x132>
			change = FFSYNC_FULL_PERIOD_MS-((int16_t)remainder);
    183a:	21 e2       	ldi	r18, 0x21	; 33
    183c:	34 e1       	ldi	r19, 0x14	; 20
    183e:	26 1b       	sub	r18, r22
    1840:	37 0b       	sbc	r19, r23
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
    1842:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    1846:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    184a:	82 1b       	sub	r24, r18
    184c:	93 0b       	sbc	r25, r19
    184e:	8c 15       	cp	r24, r12
    1850:	9d 05       	cpc	r25, r13
    1852:	48 f4       	brcc	.+18     	; 0x1866 <__vector_47+0x8c>
    1854:	80 91 b1 23 	lds	r24, 0x23B1	; 0x8023b1 <rtc_epoch>
    1858:	90 91 b2 23 	lds	r25, 0x23B2	; 0x8023b2 <rtc_epoch+0x1>
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	80 93 b1 23 	sts	0x23B1, r24	; 0x8023b1 <rtc_epoch>
    1862:	90 93 b2 23 	sts	0x23B2, r25	; 0x8023b2 <rtc_epoch+0x1>
		}else{
			change = -(int16_t)remainder;
			if(theCount<remainder) rtc_epoch--;
		}
		while(RTC.STATUS & RTC_SYNCBUSY_bm);
    1866:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    186a:	80 fd       	sbrc	r24, 0
    186c:	fc cf       	rjmp	.-8      	; 0x1866 <__vector_47+0x8c>
		RTC.CNT =  (theCount+change);
    186e:	c2 0e       	add	r12, r18
    1870:	d3 1e       	adc	r13, r19
    1872:	c0 92 08 04 	sts	0x0408, r12	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    1876:	d0 92 09 04 	sts	0x0409, r13	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
		RTC.COMP = (RTC.COMP+change);
    187a:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    187e:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
    1882:	82 0f       	add	r24, r18
    1884:	93 1f       	adc	r25, r19
    1886:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    188a:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    188e:	1f bf       	out	0x3f, r17	; 63
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    1890:	c9 01       	movw	r24, r18
    1892:	37 fd       	sbrc	r19, 7
    1894:	4d c0       	rjmp	.+154    	; 0x1930 <__vector_47+0x156>
    1896:	81 39       	cpi	r24, 0x91	; 145
    1898:	91 05       	cpc	r25, r1
    189a:	4c f4       	brge	.+18     	; 0x18ae <__vector_47+0xd4>
		if(change>0) OSC.RC32KCAL++;
    189c:	12 16       	cp	r1, r18
    189e:	13 06       	cpc	r1, r19
    18a0:	0c f0       	brlt	.+2      	; 0x18a4 <__vector_47+0xca>
    18a2:	4b c0       	rjmp	.+150    	; 0x193a <__vector_47+0x160>
    18a4:	80 91 54 00 	lds	r24, 0x0054	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    18a8:	8f 5f       	subi	r24, 0xFF	; 255
    18aa:	80 93 54 00 	sts	0x0054, r24	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>

ISR(TCE0_OVF_vect){
	uint32_t randomWait = (randShort()%32)*20; //between 0 and 640ms
	//sendPing( (void*)((uint16_t)(get_time()&0xFFFF)));
	updateRTC();
	scheduleTask(randomWait, (arg_func_t)sendPing, (void*)((uint16_t)(getTime()&0xFFFF)));
    18ae:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    18b2:	9b 01       	movw	r18, r22
    18b4:	ac 01       	movw	r20, r24
    18b6:	cf 71       	andi	r28, 0x1F	; 31
    18b8:	dd 27       	eor	r29, r29
    18ba:	64 e1       	ldi	r22, 0x14	; 20
    18bc:	6c 9f       	mul	r22, r28
    18be:	c0 01       	movw	r24, r0
    18c0:	6d 9f       	mul	r22, r29
    18c2:	90 0d       	add	r25, r0
    18c4:	11 24       	eor	r1, r1
    18c6:	bc 01       	movw	r22, r24
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	48 e3       	ldi	r20, 0x38	; 56
    18ce:	5b e0       	ldi	r21, 0x0B	; 11
    18d0:	0e 94 3c 33 	call	0x6678	; 0x6678 <scheduleTask>
	//printf("ovf @ %lu\r\n",get_time());
}
    18d4:	ff 91       	pop	r31
    18d6:	ef 91       	pop	r30
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	7f 91       	pop	r23
    18e6:	6f 91       	pop	r22
    18e8:	5f 91       	pop	r21
    18ea:	4f 91       	pop	r20
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	1f 91       	pop	r17
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	bf 90       	pop	r11
    18fc:	af 90       	pop	r10
    18fe:	0f 90       	pop	r0
    1900:	0b be       	out	0x3b, r0	; 59
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	0f 90       	pop	r0
    1908:	1f 90       	pop	r1
    190a:	18 95       	reti
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
			change = FFSYNC_FULL_PERIOD_MS-((int16_t)remainder);
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
		}else{
			change = -(int16_t)remainder;
    190c:	22 27       	eor	r18, r18
    190e:	33 27       	eor	r19, r19
    1910:	26 1b       	sub	r18, r22
    1912:	37 0b       	sbc	r19, r23
			if(theCount<remainder) rtc_epoch--;
    1914:	c6 16       	cp	r12, r22
    1916:	d7 06       	cpc	r13, r23
    1918:	08 f0       	brcs	.+2      	; 0x191c <__vector_47+0x142>
    191a:	a5 cf       	rjmp	.-182    	; 0x1866 <__vector_47+0x8c>
    191c:	80 91 b1 23 	lds	r24, 0x23B1	; 0x8023b1 <rtc_epoch>
    1920:	90 91 b2 23 	lds	r25, 0x23B2	; 0x8023b2 <rtc_epoch+0x1>
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	80 93 b1 23 	sts	0x23B1, r24	; 0x8023b1 <rtc_epoch>
    192a:	90 93 b2 23 	sts	0x23B2, r25	; 0x8023b2 <rtc_epoch+0x1>
    192e:	9b cf       	rjmp	.-202    	; 0x1866 <__vector_47+0x8c>
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    1930:	88 27       	eor	r24, r24
    1932:	99 27       	eor	r25, r25
    1934:	82 1b       	sub	r24, r18
    1936:	93 0b       	sbc	r25, r19
    1938:	ae cf       	rjmp	.-164    	; 0x1896 <__vector_47+0xbc>
		if(change>0) OSC.RC32KCAL++;
		else if(abs(change)<FFSYNC_MAX_DEVIATION) OSC.RC32KCAL--;
    193a:	4d 97       	sbiw	r24, 0x1d	; 29
    193c:	0c f0       	brlt	.+2      	; 0x1940 <__vector_47+0x166>
    193e:	b7 cf       	rjmp	.-146    	; 0x18ae <__vector_47+0xd4>
    1940:	80 91 54 00 	lds	r24, 0x0054	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    1944:	81 50       	subi	r24, 0x01	; 1
    1946:	80 93 54 00 	sts	0x0054, r24	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    194a:	b1 cf       	rjmp	.-158    	; 0x18ae <__vector_47+0xd4>

0000194c <waitForTWIReady>:
	uint8_t printed = 0;
	while(!result){
		if((printed = waitForTWIReady(startTime, callerDescr))){
			result = TWI_MasterWriteRead(addr, writeData, bytesToWrite, bytesToRead);
		}else{
			return 0;
    194c:	bf 92       	push	r11
    194e:	cf 92       	push	r12
    1950:	df 92       	push	r13
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	6b 01       	movw	r12, r22
    1960:	7c 01       	movw	r14, r24
    1962:	04 2f       	mov	r16, r20
    1964:	b5 2e       	mov	r11, r21
    1966:	10 e0       	ldi	r17, 0x00	; 0
    1968:	c7 e3       	ldi	r28, 0x37	; 55
    196a:	d5 e0       	ldi	r29, 0x05	; 5
    196c:	1a c0       	rjmp	.+52     	; 0x19a2 <waitForTWIReady+0x56>
    196e:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	8c 19       	sub	r24, r12
    1978:	9d 09       	sbc	r25, r13
    197a:	ae 09       	sbc	r26, r14
    197c:	bf 09       	sbc	r27, r15
    197e:	89 3e       	cpi	r24, 0xE9	; 233
    1980:	93 40       	sbci	r25, 0x03	; 3
    1982:	a1 05       	cpc	r26, r1
    1984:	b1 05       	cpc	r27, r1
    1986:	00 f5       	brcc	.+64     	; 0x19c8 <waitForTWIReady+0x7c>
    1988:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	8c 19       	sub	r24, r12
    1992:	9d 09       	sbc	r25, r13
    1994:	ae 09       	sbc	r26, r14
    1996:	bf 09       	sbc	r27, r15
    1998:	85 36       	cpi	r24, 0x65	; 101
    199a:	91 05       	cpc	r25, r1
    199c:	a1 05       	cpc	r26, r1
    199e:	b1 05       	cpc	r27, r1
    19a0:	08 f5       	brcc	.+66     	; 0x19e4 <waitForTWIReady+0x98>
    19a2:	e0 91 8b 25 	lds	r30, 0x258B	; 0x80258b <twi>
    19a6:	f0 91 8c 25 	lds	r31, 0x258C	; 0x80258c <twi+0x1>
    19aa:	87 89       	ldd	r24, Z+23	; 0x17
    19ac:	81 11       	cpse	r24, r1
    19ae:	df cf       	rjmp	.-66     	; 0x196e <waitForTWIReady+0x22>
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	81 0f       	add	r24, r17
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	df 90       	pop	r13
    19c2:	cf 90       	pop	r12
    19c4:	bf 90       	pop	r11
    19c6:	08 95       	ret
    19c8:	bf 92       	push	r11
    19ca:	0f 93       	push	r16
    19cc:	8e e4       	ldi	r24, 0x4E	; 78
    19ce:	95 e0       	ldi	r25, 0x05	; 5
    19d0:	9f 93       	push	r25
    19d2:	8f 93       	push	r24
    19d4:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	e8 cf       	rjmp	.-48     	; 0x19b4 <waitForTWIReady+0x68>
    19e4:	11 23       	and	r17, r17
    19e6:	31 f0       	breq	.+12     	; 0x19f4 <waitForTWIReady+0xa8>
    19e8:	8a e0       	ldi	r24, 0x0A	; 10
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    19f0:	11 e0       	ldi	r17, 0x01	; 1
    19f2:	d7 cf       	rjmp	.-82     	; 0x19a2 <waitForTWIReady+0x56>
    19f4:	bf 92       	push	r11
    19f6:	0f 93       	push	r16
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	ef cf       	rjmp	.-34     	; 0x19e8 <waitForTWIReady+0x9c>

00001a0a <TWI_MasterWriteRead.part.0>:
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	e0 91 8b 25 	lds	r30, 0x258B	; 0x80258b <twi>
    1a12:	f0 91 8c 25 	lds	r31, 0x258C	; 0x80258c <twi+0x1>
    1a16:	97 89       	ldd	r25, Z+23	; 0x17
    1a18:	91 11       	cpse	r25, r1
    1a1a:	30 c0       	rjmp	.+96     	; 0x1a7c <TWI_MasterWriteRead.part.0+0x72>
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	97 8b       	std	Z+23, r25	; 0x17
    1a20:	10 8e       	std	Z+24, r1	; 0x18
    1a22:	88 0f       	add	r24, r24
    1a24:	82 83       	std	Z+2, r24	; 0x02
    1a26:	44 23       	and	r20, r20
    1a28:	59 f0       	breq	.+22     	; 0x1a40 <TWI_MasterWriteRead.part.0+0x36>
    1a2a:	db 01       	movw	r26, r22
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	3d 91       	ld	r19, X+
    1a32:	ef 01       	movw	r28, r30
    1a34:	c8 0f       	add	r28, r24
    1a36:	d9 1f       	adc	r29, r25
    1a38:	3b 83       	std	Y+3, r19	; 0x03
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	84 17       	cp	r24, r20
    1a3e:	c0 f3       	brcs	.-16     	; 0x1a30 <TWI_MasterWriteRead.part.0+0x26>
    1a40:	43 8b       	std	Z+19, r20	; 0x13
    1a42:	24 8b       	std	Z+20, r18	; 0x14
    1a44:	15 8a       	std	Z+21, r1	; 0x15
    1a46:	16 8a       	std	Z+22, r1	; 0x16
    1a48:	83 89       	ldd	r24, Z+19	; 0x13
    1a4a:	81 11       	cpse	r24, r1
    1a4c:	0d c0       	rjmp	.+26     	; 0x1a68 <TWI_MasterWriteRead.part.0+0x5e>
    1a4e:	84 89       	ldd	r24, Z+20	; 0x14
    1a50:	88 23       	and	r24, r24
    1a52:	01 f1       	breq	.+64     	; 0x1a94 <TWI_MasterWriteRead.part.0+0x8a>
    1a54:	82 81       	ldd	r24, Z+2	; 0x02
    1a56:	81 60       	ori	r24, 0x01	; 1
    1a58:	01 90       	ld	r0, Z+
    1a5a:	f0 81       	ld	r31, Z
    1a5c:	e0 2d       	mov	r30, r0
    1a5e:	86 83       	std	Z+6, r24	; 0x06
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	8e 7f       	andi	r24, 0xFE	; 254
    1a6c:	01 90       	ld	r0, Z+
    1a6e:	f0 81       	ld	r31, Z
    1a70:	e0 2d       	mov	r30, r0
    1a72:	86 83       	std	Z+6, r24	; 0x06
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	08 95       	ret
    1a7c:	82 e2       	ldi	r24, 0x22	; 34
    1a7e:	95 e0       	ldi	r25, 0x05	; 5
    1a80:	9f 93       	push	r25
    1a82:	8f 93       	push	r24
    1a84:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	08 95       	ret

00001a9c <i2cInit>:
    1a9c:	e0 e2       	ldi	r30, 0x20	; 32
    1a9e:	f6 e0       	ldi	r31, 0x06	; 6
    1aa0:	80 e2       	ldi	r24, 0x20	; 32
    1aa2:	82 83       	std	Z+2, r24	; 0x02
    1aa4:	85 8b       	std	Z+21, r24	; 0x15
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    1aac:	a3 ec       	ldi	r26, 0xC3	; 195
    1aae:	b3 e2       	ldi	r27, 0x23	; 35
    1ab0:	a0 93 8b 25 	sts	0x258B, r26	; 0x80258b <twi>
    1ab4:	b0 93 8c 25 	sts	0x258C, r27	; 0x80258c <twi+0x1>
    1ab8:	e0 ea       	ldi	r30, 0xA0	; 160
    1aba:	f4 e0       	ldi	r31, 0x04	; 4
    1abc:	ed 93       	st	X+, r30
    1abe:	fc 93       	st	X, r31
    1ac0:	88 ef       	ldi	r24, 0xF8	; 248
    1ac2:	81 83       	std	Z+1, r24	; 0x01
    1ac4:	8b e9       	ldi	r24, 0x9B	; 155
    1ac6:	85 83       	std	Z+5, r24	; 0x05
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	84 83       	std	Z+4, r24	; 0x04
    1acc:	08 95       	ret

00001ace <twiWriteWrapper>:
    1ace:	9f 92       	push	r9
    1ad0:	af 92       	push	r10
    1ad2:	bf 92       	push	r11
    1ad4:	cf 92       	push	r12
    1ad6:	df 92       	push	r13
    1ad8:	ef 92       	push	r14
    1ada:	ff 92       	push	r15
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	98 2e       	mov	r9, r24
    1ae6:	5b 01       	movw	r10, r22
    1ae8:	d4 2f       	mov	r29, r20
    1aea:	89 01       	movw	r16, r18
    1aec:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    1af0:	6b 01       	movw	r12, r22
    1af2:	7c 01       	movw	r14, r24
    1af4:	a8 01       	movw	r20, r16
    1af6:	c7 01       	movw	r24, r14
    1af8:	b6 01       	movw	r22, r12
    1afa:	0e 94 a6 0c 	call	0x194c	; 0x194c <waitForTWIReady>
    1afe:	c8 2f       	mov	r28, r24
    1b00:	88 23       	and	r24, r24
    1b02:	c1 f0       	breq	.+48     	; 0x1b34 <twiWriteWrapper+0x66>
    1b04:	d9 30       	cpi	r29, 0x09	; 9
    1b06:	b0 f7       	brcc	.-20     	; 0x1af4 <twiWriteWrapper+0x26>
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	4d 2f       	mov	r20, r29
    1b0c:	b5 01       	movw	r22, r10
    1b0e:	89 2d       	mov	r24, r9
    1b10:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <TWI_MasterWriteRead.part.0>
    1b14:	88 23       	and	r24, r24
    1b16:	71 f3       	breq	.-36     	; 0x1af4 <twiWriteWrapper+0x26>
    1b18:	8c 0f       	add	r24, r28
    1b1a:	81 50       	subi	r24, 0x01	; 1
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	bf 90       	pop	r11
    1b2e:	af 90       	pop	r10
    1b30:	9f 90       	pop	r9
    1b32:	08 95       	ret
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	f2 cf       	rjmp	.-28     	; 0x1b1c <twiWriteWrapper+0x4e>

00001b38 <__vector_46>:
	twi->result = result;
	twi->status = TWIM_STATUS_READY;
}

ISR(TWIE_TWIM_vect)
{
    1b38:	1f 92       	push	r1
    1b3a:	0f 92       	push	r0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	0f 92       	push	r0
    1b40:	11 24       	eor	r1, r1
    1b42:	0b b6       	in	r0, 0x3b	; 59
    1b44:	0f 92       	push	r0
    1b46:	2f 93       	push	r18
    1b48:	8f 93       	push	r24
    1b4a:	9f 93       	push	r25
    1b4c:	af 93       	push	r26
    1b4e:	bf 93       	push	r27
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	ef 93       	push	r30
    1b56:	ff 93       	push	r31
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
static void TWI_MasterInterruptHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1b58:	e0 91 8b 25 	lds	r30, 0x258B	; 0x80258b <twi>
    1b5c:	f0 91 8c 25 	lds	r31, 0x258C	; 0x80258c <twi+0x1>
    1b60:	a0 81       	ld	r26, Z
    1b62:	b1 81       	ldd	r27, Z+1	; 0x01
    1b64:	14 96       	adiw	r26, 0x04	; 4
    1b66:	8c 91       	ld	r24, X
    1b68:	14 97       	sbiw	r26, 0x04	; 4
	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	9c 70       	andi	r25, 0x0C	; 12
    1b6e:	41 f4       	brne	.+16     	; 0x1b80 <__vector_46+0x48>

		TWI_MasterArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    1b70:	86 fd       	sbrc	r24, 6
    1b72:	24 c0       	rjmp	.+72     	; 0x1bbc <__vector_46+0x84>
		TWI_MasterWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    1b74:	87 fd       	sbrc	r24, 7
    1b76:	3d c0       	rjmp	.+122    	; 0x1bf2 <__vector_46+0xba>
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1b78:	86 e0       	ldi	r24, 0x06	; 6
    1b7a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1b7c:	17 8a       	std	Z+23, r1	; 0x17
}

ISR(TWIE_TWIM_vect)
{
	TWI_MasterInterruptHandler();
    1b7e:	0b c0       	rjmp	.+22     	; 0x1b96 <__vector_46+0x5e>
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
static void TWI_MasterArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1b80:	14 96       	adiw	r26, 0x04	; 4
    1b82:	8c 91       	ld	r24, X
    1b84:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    1b86:	82 fd       	sbrc	r24, 2
    1b88:	16 c0       	rjmp	.+44     	; 0x1bb6 <__vector_46+0x7e>
		twi->result = TWIM_RESULT_BUS_ERROR;
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    1b8a:	93 e0       	ldi	r25, 0x03	; 3
    1b8c:	90 8f       	std	Z+24, r25	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    1b8e:	88 60       	ori	r24, 0x08	; 8
    1b90:	14 96       	adiw	r26, 0x04	; 4
    1b92:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    1b94:	17 8a       	std	Z+23, r1	; 0x17
}

ISR(TWIE_TWIM_vect)
{
	TWI_MasterInterruptHandler();
    1b96:	ff 91       	pop	r31
    1b98:	ef 91       	pop	r30
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	bf 91       	pop	r27
    1ba0:	af 91       	pop	r26
    1ba2:	9f 91       	pop	r25
    1ba4:	8f 91       	pop	r24
    1ba6:	2f 91       	pop	r18
    1ba8:	0f 90       	pop	r0
    1baa:	0b be       	out	0x3b, r0	; 59
    1bac:	0f 90       	pop	r0
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	0f 90       	pop	r0
    1bb2:	1f 90       	pop	r1
    1bb4:	18 95       	reti
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
		twi->result = TWIM_RESULT_BUS_ERROR;
    1bb6:	94 e0       	ldi	r25, 0x04	; 4
    1bb8:	90 8f       	std	Z+24, r25	; 0x18
    1bba:	e9 cf       	rjmp	.-46     	; 0x1b8e <__vector_46+0x56>
 *  \param twi The TWI_Master_t struct instance.
 */
static void TWI_MasterWriteHandler()
{
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    1bbc:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
    1bbe:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    1bc0:	14 96       	adiw	r26, 0x04	; 4
    1bc2:	8c 91       	ld	r24, X
    1bc4:	14 97       	sbiw	r26, 0x04	; 4
    1bc6:	84 fd       	sbrc	r24, 4
    1bc8:	0d c0       	rjmp	.+26     	; 0x1be4 <__vector_46+0xac>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		twi->result = TWIM_RESULT_NACK_RECEIVED;
		twi->status = TWIM_STATUS_READY;
	}
	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    1bca:	85 89       	ldd	r24, Z+21	; 0x15
    1bcc:	89 17       	cp	r24, r25
    1bce:	50 f1       	brcs	.+84     	; 0x1c24 <__vector_46+0xec>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    1bd0:	86 89       	ldd	r24, Z+22	; 0x16
    1bd2:	82 17       	cp	r24, r18
    1bd4:	d8 f1       	brcs	.+118    	; 0x1c4c <__vector_46+0x114>
		twi->interface->MASTER.ADDR = readAddress;
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1bd6:	83 e0       	ldi	r24, 0x03	; 3
    1bd8:	13 96       	adiw	r26, 0x03	; 3
    1bda:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1be0:	17 8a       	std	Z+23, r1	; 0x17
    1be2:	d9 cf       	rjmp	.-78     	; 0x1b96 <__vector_46+0x5e>
	uint8_t bytesToWrite  = twi->bytesToWrite;
	uint8_t bytesToRead   = twi->bytesToRead;

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	13 96       	adiw	r26, 0x03	; 3
    1be8:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    1bea:	85 e0       	ldi	r24, 0x05	; 5
    1bec:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
    1bee:	17 8a       	std	Z+23, r1	; 0x17
    1bf0:	d2 cf       	rjmp	.-92     	; 0x1b96 <__vector_46+0x5e>
 *  \param twi The TWI_Master_t struct instance.
 */
static void TWI_MasterReadHandler()
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    1bf2:	86 89       	ldd	r24, Z+22	; 0x16
    1bf4:	88 30       	cpi	r24, 0x08	; 8
    1bf6:	08 f5       	brcc	.+66     	; 0x1c3a <__vector_46+0x102>
		uint8_t data = twi->interface->MASTER.DATA;
    1bf8:	17 96       	adiw	r26, 0x07	; 7
    1bfa:	8c 91       	ld	r24, X
    1bfc:	17 97       	sbiw	r26, 0x07	; 7
		twi->readData[twi->bytesRead] = data;
    1bfe:	96 89       	ldd	r25, Z+22	; 0x16
    1c00:	ef 01       	movw	r28, r30
    1c02:	c9 0f       	add	r28, r25
    1c04:	d1 1d       	adc	r29, r1
    1c06:	8b 87       	std	Y+11, r24	; 0x0b
		twi->bytesRead++;
    1c08:	86 89       	ldd	r24, Z+22	; 0x16
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	86 8b       	std	Z+22, r24	; 0x16
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    1c0e:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    1c10:	86 89       	ldd	r24, Z+22	; 0x16
    1c12:	89 17       	cp	r24, r25
    1c14:	00 f1       	brcs	.+64     	; 0x1c56 <__vector_46+0x11e>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    1c16:	87 e0       	ldi	r24, 0x07	; 7
    1c18:	13 96       	adiw	r26, 0x03	; 3
    1c1a:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1c20:	17 8a       	std	Z+23, r1	; 0x17
    1c22:	b9 cf       	rjmp	.-142    	; 0x1b96 <__vector_46+0x5e>
		twi->result = TWIM_RESULT_NACK_RECEIVED;
		twi->status = TWIM_STATUS_READY;
	}
	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
		uint8_t data = twi->writeData[twi->bytesWritten];
    1c24:	85 89       	ldd	r24, Z+21	; 0x15
    1c26:	ef 01       	movw	r28, r30
    1c28:	c8 0f       	add	r28, r24
    1c2a:	d1 1d       	adc	r29, r1
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    1c2e:	17 96       	adiw	r26, 0x07	; 7
    1c30:	8c 93       	st	X, r24
		++twi->bytesWritten;
    1c32:	85 89       	ldd	r24, Z+21	; 0x15
    1c34:	8f 5f       	subi	r24, 0xFF	; 255
    1c36:	85 8b       	std	Z+21, r24	; 0x15
    1c38:	ae cf       	rjmp	.-164    	; 0x1b96 <__vector_46+0x5e>
		twi->bytesRead++;
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1c3a:	83 e0       	ldi	r24, 0x03	; 3
    1c3c:	13 96       	adiw	r26, 0x03	; 3
    1c3e:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1c44:	17 8a       	std	Z+23, r1	; 0x17
    1c46:	a0 81       	ld	r26, Z
    1c48:	b1 81       	ldd	r27, Z+1	; 0x01
    1c4a:	e1 cf       	rjmp	.-62     	; 0x1c0e <__vector_46+0xd6>

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
		uint8_t readAddress = twi->address | 0x01;
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    1c50:	16 96       	adiw	r26, 0x06	; 6
    1c52:	8c 93       	st	X, r24
    1c54:	a0 cf       	rjmp	.-192    	; 0x1b96 <__vector_46+0x5e>
	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	13 96       	adiw	r26, 0x03	; 3
    1c5a:	8c 93       	st	X, r24
    1c5c:	9c cf       	rjmp	.-200    	; 0x1b96 <__vector_46+0x5e>

00001c5e <irTransmitComplete>:
    send_msg(dirs, data, dataLength, 1);
	return 1;
}

uint8_t hpIrCmd(uint8_t dirs, char *data, uint8_t dataLength){
	return all_hp_ir_cmds(dirs, data, dataLength, 0);
    1c5e:	4f b7       	in	r20, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	e0 e0       	ldi	r30, 0x00	; 0
    1c64:	fb e0       	ldi	r31, 0x0B	; 11
    1c66:	31 81       	ldd	r19, Z+1	; 0x01
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	a9 59       	subi	r26, 0x99	; 153
    1c6e:	bf 4d       	sbci	r27, 0xDF	; 223
    1c70:	2c 91       	ld	r18, X
    1c72:	20 95       	com	r18
    1c74:	23 23       	and	r18, r19
    1c76:	21 83       	std	Z+1, r18	; 0x01
    1c78:	28 e3       	ldi	r18, 0x38	; 56
    1c7a:	28 9f       	mul	r18, r24
    1c7c:	f0 01       	movw	r30, r0
    1c7e:	29 9f       	mul	r18, r25
    1c80:	f0 0d       	add	r31, r0
    1c82:	11 24       	eor	r1, r1
    1c84:	e3 50       	subi	r30, 0x03	; 3
    1c86:	fc 4d       	sbci	r31, 0xDC	; 220
    1c88:	17 aa       	std	Z+55, r1	; 0x37
    1c8a:	16 aa       	std	Z+54, r1	; 0x36
    1c8c:	12 86       	std	Z+10, r1	; 0x0a
    1c8e:	13 86       	std	Z+11, r1	; 0x0b
    1c90:	10 86       	std	Z+8, r1	; 0x08
    1c92:	11 86       	std	Z+9, r1	; 0x09
    1c94:	16 82       	std	Z+6, r1	; 0x06
    1c96:	17 82       	std	Z+7, r1	; 0x07
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	ea 5f       	subi	r30, 0xFA	; 250
    1ca0:	ff 4d       	sbci	r31, 0xDF	; 223
    1ca2:	01 90       	ld	r0, Z+
    1ca4:	f0 81       	ld	r31, Z
    1ca6:	e0 2d       	mov	r30, r0
    1ca8:	81 81       	ldd	r24, Z+1	; 0x01
    1caa:	80 64       	ori	r24, 0x40	; 64
    1cac:	81 83       	std	Z+1, r24	; 0x01
    1cae:	84 81       	ldd	r24, Z+4	; 0x04
    1cb0:	80 61       	ori	r24, 0x10	; 16
    1cb2:	84 83       	std	Z+4, r24	; 0x04
    1cb4:	4f bf       	out	0x3f, r20	; 63
    1cb6:	08 95       	ret

00001cb8 <handleCmdWrapper>:
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	0d b7       	in	r16, 0x3d	; 61
    1cca:	1e b7       	in	r17, 0x3e	; 62
    1ccc:	80 91 6d 22 	lds	r24, 0x226D	; 0x80226d <cmdLength>
    1cd0:	90 91 6e 22 	lds	r25, 0x226E	; 0x80226e <cmdLength+0x1>
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	2d b7       	in	r18, 0x3d	; 61
    1cd8:	3e b7       	in	r19, 0x3e	; 62
    1cda:	28 1b       	sub	r18, r24
    1cdc:	39 0b       	sbc	r19, r25
    1cde:	2d bf       	out	0x3d, r18	; 61
    1ce0:	3e bf       	out	0x3e, r19	; 62
    1ce2:	8d b7       	in	r24, 0x3d	; 61
    1ce4:	9e b7       	in	r25, 0x3e	; 62
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	7c 01       	movw	r14, r24
    1cea:	40 91 6d 22 	lds	r20, 0x226D	; 0x80226d <cmdLength>
    1cee:	50 91 6e 22 	lds	r21, 0x226E	; 0x80226e <cmdLength+0x1>
    1cf2:	4f 5f       	subi	r20, 0xFF	; 255
    1cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf6:	6d e2       	ldi	r22, 0x2D	; 45
    1cf8:	72 e2       	ldi	r23, 0x22	; 34
    1cfa:	0e 94 9f 4c 	call	0x993e	; 0x993e <memcpy>
    1cfe:	60 91 6d 22 	lds	r22, 0x226D	; 0x80226d <cmdLength>
    1d02:	70 91 6e 22 	lds	r23, 0x226E	; 0x80226e <cmdLength+0x1>
    1d06:	c7 01       	movw	r24, r14
    1d08:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <handleSerialCommand>
    1d0c:	8f b7       	in	r24, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	10 92 70 22 	sts	0x2270, r1	; 0x802270 <processingCmdFlag>
    1d14:	8f bf       	out	0x3f, r24	; 63
    1d16:	0d bf       	out	0x3d, r16	; 61
    1d18:	1e bf       	out	0x3e, r17	; 62
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	ff 90       	pop	r15
    1d24:	ef 90       	pop	r14
    1d26:	08 95       	ret

00001d28 <irTransmit>:
    1d28:	8f 92       	push	r8
    1d2a:	9f 92       	push	r9
    1d2c:	af 92       	push	r10
    1d2e:	bf 92       	push	r11
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	c8 2f       	mov	r28, r24
    1d42:	d0 e0       	ldi	r29, 0x00	; 0
    1d44:	98 e3       	ldi	r25, 0x38	; 56
    1d46:	89 9f       	mul	r24, r25
    1d48:	d0 01       	movw	r26, r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	a3 50       	subi	r26, 0x03	; 3
    1d4e:	bc 4d       	sbci	r27, 0xDC	; 220
    1d50:	1a 96       	adiw	r26, 0x0a	; 10
    1d52:	ed 91       	ld	r30, X+
    1d54:	fc 91       	ld	r31, X
    1d56:	1b 97       	sbiw	r26, 0x0b	; 11
    1d58:	e7 30       	cpi	r30, 0x07	; 7
    1d5a:	f1 05       	cpc	r31, r1
    1d5c:	08 f4       	brcc	.+2      	; 0x1d60 <irTransmit+0x38>
    1d5e:	50 c0       	rjmp	.+160    	; 0x1e00 <irTransmit+0xd8>
    1d60:	1a 96       	adiw	r26, 0x0a	; 10
    1d62:	8d 91       	ld	r24, X+
    1d64:	9c 91       	ld	r25, X
    1d66:	1b 97       	sbiw	r26, 0x0b	; 11
    1d68:	07 97       	sbiw	r24, 0x07	; 7
    1d6a:	a8 0f       	add	r26, r24
    1d6c:	b9 1f       	adc	r27, r25
    1d6e:	1e 96       	adiw	r26, 0x0e	; 14
    1d70:	8c 91       	ld	r24, X
    1d72:	80 93 2c 22 	sts	0x222C, r24	; 0x80222c <next_byte>
    1d76:	fe 01       	movw	r30, r28
    1d78:	ee 0f       	add	r30, r30
    1d7a:	ff 1f       	adc	r31, r31
    1d7c:	ea 5f       	subi	r30, 0xFA	; 250
    1d7e:	ff 4d       	sbci	r31, 0xDF	; 223
    1d80:	a0 81       	ld	r26, Z
    1d82:	b1 81       	ldd	r27, Z+1	; 0x01
    1d84:	80 91 2c 22 	lds	r24, 0x222C	; 0x80222c <next_byte>
    1d88:	8c 93       	st	X, r24
    1d8a:	88 e3       	ldi	r24, 0x38	; 56
    1d8c:	8c 9f       	mul	r24, r28
    1d8e:	f0 01       	movw	r30, r0
    1d90:	8d 9f       	mul	r24, r29
    1d92:	f0 0d       	add	r31, r0
    1d94:	11 24       	eor	r1, r1
    1d96:	e3 50       	subi	r30, 0x03	; 3
    1d98:	fc 4d       	sbci	r31, 0xDC	; 220
    1d9a:	82 85       	ldd	r24, Z+10	; 0x0a
    1d9c:	93 85       	ldd	r25, Z+11	; 0x0b
    1d9e:	01 96       	adiw	r24, 0x01	; 1
    1da0:	82 87       	std	Z+10, r24	; 0x0a
    1da2:	93 87       	std	Z+11, r25	; 0x0b
    1da4:	22 85       	ldd	r18, Z+10	; 0x0a
    1da6:	33 85       	ldd	r19, Z+11	; 0x0b
    1da8:	86 a9       	ldd	r24, Z+54	; 0x36
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	07 96       	adiw	r24, 0x07	; 7
    1dae:	28 17       	cp	r18, r24
    1db0:	39 07       	cpc	r19, r25
    1db2:	c8 f0       	brcs	.+50     	; 0x1de6 <irTransmit+0xbe>
    1db4:	14 82       	std	Z+4, r1	; 0x04
    1db6:	15 82       	std	Z+5, r1	; 0x05
    1db8:	16 82       	std	Z+6, r1	; 0x06
    1dba:	17 82       	std	Z+7, r1	; 0x07
    1dbc:	10 86       	std	Z+8, r1	; 0x08
    1dbe:	11 86       	std	Z+9, r1	; 0x09
    1dc0:	12 86       	std	Z+10, r1	; 0x0a
    1dc2:	13 86       	std	Z+11, r1	; 0x0b
    1dc4:	14 86       	std	Z+12, r1	; 0x0c
    1dc6:	15 86       	std	Z+13, r1	; 0x0d
    1dc8:	16 aa       	std	Z+54, r1	; 0x36
    1dca:	17 aa       	std	Z+55, r1	; 0x37
    1dcc:	14 96       	adiw	r26, 0x04	; 4
    1dce:	8c 91       	ld	r24, X
    1dd0:	14 97       	sbiw	r26, 0x04	; 4
    1dd2:	80 61       	ori	r24, 0x10	; 16
    1dd4:	14 96       	adiw	r26, 0x04	; 4
    1dd6:	8c 93       	st	X, r24
    1dd8:	14 97       	sbiw	r26, 0x04	; 4
    1dda:	13 96       	adiw	r26, 0x03	; 3
    1ddc:	8c 91       	ld	r24, X
    1dde:	13 97       	sbiw	r26, 0x03	; 3
    1de0:	8c 7f       	andi	r24, 0xFC	; 252
    1de2:	13 96       	adiw	r26, 0x03	; 3
    1de4:	8c 93       	st	X, r24
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	df 90       	pop	r13
    1df4:	cf 90       	pop	r12
    1df6:	bf 90       	pop	r11
    1df8:	af 90       	pop	r10
    1dfa:	9f 90       	pop	r9
    1dfc:	8f 90       	pop	r8
    1dfe:	08 95       	ret
    1e00:	88 27       	eor	r24, r24
    1e02:	e2 50       	subi	r30, 0x02	; 2
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	8f 4f       	sbci	r24, 0xFF	; 255
    1e08:	0c 94 25 49 	jmp	0x924a	; 0x924a <__tablejump2__>
    1e0c:	88 e3       	ldi	r24, 0x38	; 56
    1e0e:	8c 9f       	mul	r24, r28
    1e10:	f0 01       	movw	r30, r0
    1e12:	8d 9f       	mul	r24, r29
    1e14:	f0 0d       	add	r31, r0
    1e16:	11 24       	eor	r1, r1
    1e18:	e3 50       	subi	r30, 0x03	; 3
    1e1a:	fc 4d       	sbci	r31, 0xDC	; 220
    1e1c:	80 85       	ldd	r24, Z+8	; 0x08
    1e1e:	91 85       	ldd	r25, Z+9	; 0x09
    1e20:	90 93 2c 22 	sts	0x222C, r25	; 0x80222c <next_byte>
    1e24:	a8 cf       	rjmp	.-176    	; 0x1d76 <irTransmit+0x4e>
    1e26:	88 e3       	ldi	r24, 0x38	; 56
    1e28:	8c 9f       	mul	r24, r28
    1e2a:	80 01       	movw	r16, r0
    1e2c:	8d 9f       	mul	r24, r29
    1e2e:	10 0d       	add	r17, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	03 50       	subi	r16, 0x03	; 3
    1e34:	1c 4d       	sbci	r17, 0xDC	; 220
    1e36:	f8 01       	movw	r30, r16
    1e38:	87 a9       	ldd	r24, Z+55	; 0x37
    1e3a:	86 fd       	sbrc	r24, 6
    1e3c:	5c c0       	rjmp	.+184    	; 0x1ef6 <irTransmit+0x1ce>
    1e3e:	88 e3       	ldi	r24, 0x38	; 56
    1e40:	8c 9f       	mul	r24, r28
    1e42:	f0 01       	movw	r30, r0
    1e44:	8d 9f       	mul	r24, r29
    1e46:	f0 0d       	add	r31, r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	e3 50       	subi	r30, 0x03	; 3
    1e4c:	fc 4d       	sbci	r31, 0xDC	; 220
    1e4e:	80 85       	ldd	r24, Z+8	; 0x08
    1e50:	91 85       	ldd	r25, Z+9	; 0x09
    1e52:	80 93 2c 22 	sts	0x222C, r24	; 0x80222c <next_byte>
    1e56:	8f cf       	rjmp	.-226    	; 0x1d76 <irTransmit+0x4e>
    1e58:	88 e3       	ldi	r24, 0x38	; 56
    1e5a:	8c 9f       	mul	r24, r28
    1e5c:	f0 01       	movw	r30, r0
    1e5e:	8d 9f       	mul	r24, r29
    1e60:	f0 0d       	add	r31, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	e3 50       	subi	r30, 0x03	; 3
    1e66:	fc 4d       	sbci	r31, 0xDC	; 220
    1e68:	86 81       	ldd	r24, Z+6	; 0x06
    1e6a:	97 81       	ldd	r25, Z+7	; 0x07
    1e6c:	80 93 2c 22 	sts	0x222C, r24	; 0x80222c <next_byte>
    1e70:	82 cf       	rjmp	.-252    	; 0x1d76 <irTransmit+0x4e>
    1e72:	88 e3       	ldi	r24, 0x38	; 56
    1e74:	8c 9f       	mul	r24, r28
    1e76:	f0 01       	movw	r30, r0
    1e78:	8d 9f       	mul	r24, r29
    1e7a:	f0 0d       	add	r31, r0
    1e7c:	11 24       	eor	r1, r1
    1e7e:	e3 50       	subi	r30, 0x03	; 3
    1e80:	fc 4d       	sbci	r31, 0xDC	; 220
    1e82:	86 81       	ldd	r24, Z+6	; 0x06
    1e84:	97 81       	ldd	r25, Z+7	; 0x07
    1e86:	90 93 2c 22 	sts	0x222C, r25	; 0x80222c <next_byte>
    1e8a:	75 cf       	rjmp	.-278    	; 0x1d76 <irTransmit+0x4e>
    1e8c:	88 e3       	ldi	r24, 0x38	; 56
    1e8e:	8c 9f       	mul	r24, r28
    1e90:	f0 01       	movw	r30, r0
    1e92:	8d 9f       	mul	r24, r29
    1e94:	f0 0d       	add	r31, r0
    1e96:	11 24       	eor	r1, r1
    1e98:	e3 50       	subi	r30, 0x03	; 3
    1e9a:	fc 4d       	sbci	r31, 0xDC	; 220
    1e9c:	84 81       	ldd	r24, Z+4	; 0x04
    1e9e:	95 81       	ldd	r25, Z+5	; 0x05
    1ea0:	80 93 2c 22 	sts	0x222C, r24	; 0x80222c <next_byte>
    1ea4:	68 cf       	rjmp	.-304    	; 0x1d76 <irTransmit+0x4e>
    1ea6:	88 e3       	ldi	r24, 0x38	; 56
    1ea8:	8c 9f       	mul	r24, r28
    1eaa:	f0 01       	movw	r30, r0
    1eac:	8d 9f       	mul	r24, r29
    1eae:	f0 0d       	add	r31, r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	e3 50       	subi	r30, 0x03	; 3
    1eb4:	fc 4d       	sbci	r31, 0xDC	; 220
    1eb6:	84 81       	ldd	r24, Z+4	; 0x04
    1eb8:	95 81       	ldd	r25, Z+5	; 0x05
    1eba:	90 93 2c 22 	sts	0x222C, r25	; 0x80222c <next_byte>
    1ebe:	5b cf       	rjmp	.-330    	; 0x1d76 <irTransmit+0x4e>
    1ec0:	88 e3       	ldi	r24, 0x38	; 56
    1ec2:	8c 9f       	mul	r24, r28
    1ec4:	f0 01       	movw	r30, r0
    1ec6:	8d 9f       	mul	r24, r29
    1ec8:	f0 0d       	add	r31, r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	e3 50       	subi	r30, 0x03	; 3
    1ece:	fc 4d       	sbci	r31, 0xDC	; 220
    1ed0:	86 a9       	ldd	r24, Z+54	; 0x36
    1ed2:	8f 73       	andi	r24, 0x3F	; 63
    1ed4:	80 93 2c 22 	sts	0x222C, r24	; 0x80222c <next_byte>
    1ed8:	87 a9       	ldd	r24, Z+55	; 0x37
    1eda:	90 91 2c 22 	lds	r25, 0x222C	; 0x80222c <next_byte>
    1ede:	80 78       	andi	r24, 0x80	; 128
    1ee0:	89 2b       	or	r24, r25
    1ee2:	80 93 2c 22 	sts	0x222C, r24	; 0x80222c <next_byte>
    1ee6:	87 a9       	ldd	r24, Z+55	; 0x37
    1ee8:	90 91 2c 22 	lds	r25, 0x222C	; 0x80222c <next_byte>
    1eec:	80 74       	andi	r24, 0x40	; 64
    1eee:	89 2b       	or	r24, r25
    1ef0:	80 93 2c 22 	sts	0x222C, r24	; 0x80222c <next_byte>
    1ef4:	40 cf       	rjmp	.-384    	; 0x1d76 <irTransmit+0x4e>
    1ef6:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    1efa:	f8 01       	movw	r30, r16
    1efc:	c0 84       	ldd	r12, Z+8	; 0x08
    1efe:	d1 84       	ldd	r13, Z+9	; 0x09
    1f00:	4b 01       	movw	r8, r22
    1f02:	5c 01       	movw	r10, r24
    1f04:	aa 24       	eor	r10, r10
    1f06:	bb 24       	eor	r11, r11
    1f08:	e1 2c       	mov	r14, r1
    1f0a:	f1 2c       	mov	r15, r1
    1f0c:	8c 14       	cp	r8, r12
    1f0e:	9d 04       	cpc	r9, r13
    1f10:	ae 04       	cpc	r10, r14
    1f12:	bf 04       	cpc	r11, r15
    1f14:	a8 f0       	brcs	.+42     	; 0x1f40 <irTransmit+0x218>
    1f16:	20 85       	ldd	r18, Z+8	; 0x08
    1f18:	31 85       	ldd	r19, Z+9	; 0x09
    1f1a:	62 1b       	sub	r22, r18
    1f1c:	73 0b       	sbc	r23, r19
    1f1e:	61 33       	cpi	r22, 0x31	; 49
    1f20:	f5 e7       	ldi	r31, 0x75	; 117
    1f22:	7f 07       	cpc	r23, r31
    1f24:	10 f0       	brcs	.+4      	; 0x1f2a <irTransmit+0x202>
    1f26:	60 ef       	ldi	r22, 0xF0	; 240
    1f28:	7f ef       	ldi	r23, 0xFF	; 255
    1f2a:	88 e3       	ldi	r24, 0x38	; 56
    1f2c:	8c 9f       	mul	r24, r28
    1f2e:	f0 01       	movw	r30, r0
    1f30:	8d 9f       	mul	r24, r29
    1f32:	f0 0d       	add	r31, r0
    1f34:	11 24       	eor	r1, r1
    1f36:	e3 50       	subi	r30, 0x03	; 3
    1f38:	fc 4d       	sbci	r31, 0xDC	; 220
    1f3a:	60 87       	std	Z+8, r22	; 0x08
    1f3c:	71 87       	std	Z+9, r23	; 0x09
    1f3e:	7f cf       	rjmp	.-258    	; 0x1e3e <irTransmit+0x116>
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	f2 cf       	rjmp	.-28     	; 0x1f2a <irTransmit+0x202>

00001f46 <irCommInit>:
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	94 e4       	ldi	r25, 0x44	; 68
    1f4c:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    1f50:	84 e0       	ldi	r24, 0x04	; 4
    1f52:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    1f56:	90 93 82 06 	sts	0x0682, r25	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
    1f5a:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    1f5e:	8f b7       	in	r24, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	9f e3       	ldi	r25, 0x3F	; 63
    1f64:	90 93 bf 23 	sts	0x23BF, r25	; 0x8023bf <hpIrBlock_bm>
    1f68:	8f bf       	out	0x3f, r24	; 63
    1f6a:	c6 e0       	ldi	r28, 0x06	; 6
    1f6c:	d0 e2       	ldi	r29, 0x20	; 32
    1f6e:	62 e1       	ldi	r22, 0x12	; 18
    1f70:	70 e2       	ldi	r23, 0x20	; 32
    1f72:	de 01       	movw	r26, r28
    1f74:	48 e2       	ldi	r20, 0x28	; 40
    1f76:	33 e0       	ldi	r19, 0x03	; 3
    1f78:	20 e7       	ldi	r18, 0x70	; 112
    1f7a:	92 e0       	ldi	r25, 0x02	; 2
    1f7c:	ed 91       	ld	r30, X+
    1f7e:	fd 91       	ld	r31, X+
    1f80:	43 83       	std	Z+3, r20	; 0x03
    1f82:	35 83       	std	Z+5, r19	; 0x05
    1f84:	26 83       	std	Z+6, r18	; 0x06
    1f86:	97 83       	std	Z+7, r25	; 0x07
    1f88:	84 81       	ldd	r24, Z+4	; 0x04
    1f8a:	80 61       	ori	r24, 0x10	; 16
    1f8c:	84 83       	std	Z+4, r24	; 0x04
    1f8e:	84 81       	ldd	r24, Z+4	; 0x04
    1f90:	88 60       	ori	r24, 0x08	; 8
    1f92:	84 83       	std	Z+4, r24	; 0x04
    1f94:	6a 17       	cp	r22, r26
    1f96:	7b 07       	cpc	r23, r27
    1f98:	89 f7       	brne	.-30     	; 0x1f7c <irCommInit+0x36>
    1f9a:	10 92 8d 25 	sts	0x258D, r1	; 0x80258d <cmdArrivalTime>
    1f9e:	10 92 8e 25 	sts	0x258E, r1	; 0x80258e <cmdArrivalTime+0x1>
    1fa2:	10 92 8f 25 	sts	0x258F, r1	; 0x80258f <cmdArrivalTime+0x2>
    1fa6:	10 92 90 25 	sts	0x2590, r1	; 0x802590 <cmdArrivalTime+0x3>
    1faa:	10 92 fa 23 	sts	0x23FA, r1	; 0x8023fa <numWaitingMsgs>
    1fae:	10 92 4d 25 	sts	0x254D, r1	; 0x80254d <userFacingMessagesOvf>
    1fb2:	10 92 70 22 	sts	0x2270, r1	; 0x802270 <processingCmdFlag>
    1fb6:	10 92 6f 22 	sts	0x226F, r1	; 0x80226f <processingFFsyncFlag>
    1fba:	10 92 7f 25 	sts	0x257F, r1	; 0x80257f <incomingMsgHead>
    1fbe:	10 92 80 25 	sts	0x2580, r1	; 0x802580 <incomingMsgHead+0x1>
    1fc2:	10 92 e5 23 	sts	0x23E5, r1	; 0x8023e5 <memoryConsumedByBuffer>
    1fc6:	10 92 e6 23 	sts	0x23E6, r1	; 0x8023e6 <memoryConsumedByBuffer+0x1>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	38 e3       	ldi	r19, 0x38	; 56
    1fd0:	38 9f       	mul	r19, r24
    1fd2:	f0 01       	movw	r30, r0
    1fd4:	39 9f       	mul	r19, r25
    1fd6:	f0 0d       	add	r31, r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	e3 50       	subi	r30, 0x03	; 3
    1fdc:	fc 4d       	sbci	r31, 0xDC	; 220
    1fde:	14 82       	std	Z+4, r1	; 0x04
    1fe0:	15 82       	std	Z+5, r1	; 0x05
    1fe2:	16 82       	std	Z+6, r1	; 0x06
    1fe4:	17 82       	std	Z+7, r1	; 0x07
    1fe6:	10 86       	std	Z+8, r1	; 0x08
    1fe8:	11 86       	std	Z+9, r1	; 0x09
    1fea:	12 86       	std	Z+10, r1	; 0x0a
    1fec:	13 86       	std	Z+11, r1	; 0x0b
    1fee:	14 86       	std	Z+12, r1	; 0x0c
    1ff0:	15 86       	std	Z+13, r1	; 0x0d
    1ff2:	16 aa       	std	Z+54, r1	; 0x36
    1ff4:	17 aa       	std	Z+55, r1	; 0x37
    1ff6:	e9 91       	ld	r30, Y+
    1ff8:	f9 91       	ld	r31, Y+
    1ffa:	24 81       	ldd	r18, Z+4	; 0x04
    1ffc:	20 61       	ori	r18, 0x10	; 16
    1ffe:	24 83       	std	Z+4, r18	; 0x04
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	86 30       	cpi	r24, 0x06	; 6
    2004:	91 05       	cpc	r25, r1
    2006:	21 f7       	brne	.-56     	; 0x1fd0 <irCommInit+0x8a>
    2008:	8f b7       	in	r24, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	10 92 bf 23 	sts	0x23BF, r1	; 0x8023bf <hpIrBlock_bm>
    2010:	8f bf       	out	0x3f, r24	; 63
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	08 95       	ret

00002018 <send_msg>:
    2018:	2f 92       	push	r2
    201a:	3f 92       	push	r3
    201c:	4f 92       	push	r4
    201e:	5f 92       	push	r5
    2020:	6f 92       	push	r6
    2022:	7f 92       	push	r7
    2024:	8f 92       	push	r8
    2026:	9f 92       	push	r9
    2028:	af 92       	push	r10
    202a:	bf 92       	push	r11
    202c:	cf 92       	push	r12
    202e:	df 92       	push	r13
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	e8 2e       	mov	r14, r24
    203e:	4b 01       	movw	r8, r22
    2040:	34 2e       	mov	r3, r20
    2042:	22 2e       	mov	r2, r18
    2044:	88 e2       	ldi	r24, 0x28	; 40
    2046:	84 17       	cp	r24, r20
    2048:	08 f4       	brcc	.+2      	; 0x204c <send_msg+0x34>
    204a:	bf c0       	rjmp	.+382    	; 0x21ca <send_msg+0x1b2>
    204c:	60 90 af 23 	lds	r6, 0x23AF	; 0x8023af <droplet_ID>
    2050:	70 90 b0 23 	lds	r7, 0x23B0	; 0x8023b0 <droplet_ID+0x1>
    2054:	f1 2c       	mov	r15, r1
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	97 01       	movw	r18, r14
    205c:	08 2e       	mov	r0, r24
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <send_msg+0x4c>
    2060:	35 95       	asr	r19
    2062:	27 95       	ror	r18
    2064:	0a 94       	dec	r0
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <send_msg+0x48>
    2068:	20 fd       	sbrc	r18, 0
    206a:	b8 c0       	rjmp	.+368    	; 0x21dc <send_msg+0x1c4>
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	86 30       	cpi	r24, 0x06	; 6
    2070:	91 05       	cpc	r25, r1
    2072:	99 f7       	brne	.-26     	; 0x205a <send_msg+0x42>
    2074:	e3 01       	movw	r28, r6
    2076:	33 20       	and	r3, r3
    2078:	19 f1       	breq	.+70     	; 0x20c0 <send_msg+0xa8>
    207a:	f4 01       	movw	r30, r8
    207c:	2f ef       	ldi	r18, 0xFF	; 255
    207e:	23 0d       	add	r18, r3
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	2f 5f       	subi	r18, 0xFF	; 255
    2084:	3f 4f       	sbci	r19, 0xFF	; 255
    2086:	28 0d       	add	r18, r8
    2088:	39 1d       	adc	r19, r9
    208a:	81 91       	ld	r24, Z+
    208c:	c8 27       	eor	r28, r24
    208e:	8c 2f       	mov	r24, r28
    2090:	82 95       	swap	r24
    2092:	8c 27       	eor	r24, r28
    2094:	08 2e       	mov	r0, r24
    2096:	86 95       	lsr	r24
    2098:	86 95       	lsr	r24
    209a:	80 25       	eor	r24, r0
    209c:	08 2e       	mov	r0, r24
    209e:	86 95       	lsr	r24
    20a0:	80 25       	eor	r24, r0
    20a2:	87 70       	andi	r24, 0x07	; 7
    20a4:	0c 2e       	mov	r0, r28
    20a6:	cd 2f       	mov	r28, r29
    20a8:	86 95       	lsr	r24
    20aa:	07 94       	ror	r0
    20ac:	87 95       	ror	r24
    20ae:	d0 2d       	mov	r29, r0
    20b0:	c8 27       	eor	r28, r24
    20b2:	06 94       	lsr	r0
    20b4:	87 95       	ror	r24
    20b6:	d0 25       	eor	r29, r0
    20b8:	c8 27       	eor	r28, r24
    20ba:	e2 17       	cp	r30, r18
    20bc:	f3 07       	cpc	r31, r19
    20be:	29 f7       	brne	.-54     	; 0x208a <send_msg+0x72>
    20c0:	8b e0       	ldi	r24, 0x0B	; 11
    20c2:	a8 2e       	mov	r10, r24
    20c4:	84 e2       	ldi	r24, 0x24	; 36
    20c6:	b8 2e       	mov	r11, r24
    20c8:	97 e6       	ldi	r25, 0x67	; 103
    20ca:	c9 2e       	mov	r12, r25
    20cc:	90 e2       	ldi	r25, 0x20	; 32
    20ce:	d9 2e       	mov	r13, r25
    20d0:	00 e0       	ldi	r16, 0x00	; 0
    20d2:	10 e0       	ldi	r17, 0x00	; 0
    20d4:	43 2c       	mov	r4, r3
    20d6:	51 2c       	mov	r5, r1
    20d8:	0b c0       	rjmp	.+22     	; 0x20f0 <send_msg+0xd8>
    20da:	0f 5f       	subi	r16, 0xFF	; 255
    20dc:	1f 4f       	sbci	r17, 0xFF	; 255
    20de:	f8 e3       	ldi	r31, 0x38	; 56
    20e0:	af 0e       	add	r10, r31
    20e2:	b1 1c       	adc	r11, r1
    20e4:	8f ef       	ldi	r24, 0xFF	; 255
    20e6:	c8 1a       	sub	r12, r24
    20e8:	d8 0a       	sbc	r13, r24
    20ea:	06 30       	cpi	r16, 0x06	; 6
    20ec:	11 05       	cpc	r17, r1
    20ee:	41 f1       	breq	.+80     	; 0x2140 <send_msg+0x128>
    20f0:	c7 01       	movw	r24, r14
    20f2:	00 2e       	mov	r0, r16
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <send_msg+0xe2>
    20f6:	95 95       	asr	r25
    20f8:	87 95       	ror	r24
    20fa:	0a 94       	dec	r0
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <send_msg+0xde>
    20fe:	80 ff       	sbrs	r24, 0
    2100:	ec cf       	rjmp	.-40     	; 0x20da <send_msg+0xc2>
    2102:	88 e3       	ldi	r24, 0x38	; 56
    2104:	80 9f       	mul	r24, r16
    2106:	f0 01       	movw	r30, r0
    2108:	81 9f       	mul	r24, r17
    210a:	f0 0d       	add	r31, r0
    210c:	11 24       	eor	r1, r1
    210e:	e3 50       	subi	r30, 0x03	; 3
    2110:	fc 4d       	sbci	r31, 0xDC	; 220
    2112:	87 a9       	ldd	r24, Z+55	; 0x37
    2114:	80 62       	ori	r24, 0x20	; 32
    2116:	87 ab       	std	Z+55, r24	; 0x37
    2118:	36 aa       	std	Z+54, r3	; 0x36
    211a:	c4 83       	std	Z+4, r28	; 0x04
    211c:	d5 83       	std	Z+5, r29	; 0x05
    211e:	12 86       	std	Z+10, r1	; 0x0a
    2120:	13 86       	std	Z+11, r1	; 0x0b
    2122:	66 82       	std	Z+6, r6	; 0x06
    2124:	77 82       	std	Z+7, r7	; 0x07
    2126:	a2 01       	movw	r20, r4
    2128:	b4 01       	movw	r22, r8
    212a:	c5 01       	movw	r24, r10
    212c:	0e 94 9f 4c 	call	0x993e	; 0x993e <memcpy>
    2130:	90 91 01 0b 	lds	r25, 0x0B01	; 0x800b01 <__TEXT_REGION_LENGTH__+0x700b01>
    2134:	f6 01       	movw	r30, r12
    2136:	80 81       	ld	r24, Z
    2138:	89 2b       	or	r24, r25
    213a:	80 93 01 0b 	sts	0x0B01, r24	; 0x800b01 <__TEXT_REGION_LENGTH__+0x700b01>
    213e:	cd cf       	rjmp	.-102    	; 0x20da <send_msg+0xc2>
    2140:	e6 e0       	ldi	r30, 0x06	; 6
    2142:	f0 e2       	ldi	r31, 0x20	; 32
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	48 e3       	ldi	r20, 0x38	; 56
    214a:	08 c0       	rjmp	.+16     	; 0x215c <send_msg+0x144>
    214c:	23 60       	ori	r18, 0x03	; 3
    214e:	13 96       	adiw	r26, 0x03	; 3
    2150:	2c 93       	st	X, r18
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	32 96       	adiw	r30, 0x02	; 2
    2156:	86 30       	cpi	r24, 0x06	; 6
    2158:	91 05       	cpc	r25, r1
    215a:	21 f1       	breq	.+72     	; 0x21a4 <send_msg+0x18c>
    215c:	97 01       	movw	r18, r14
    215e:	08 2e       	mov	r0, r24
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <send_msg+0x14e>
    2162:	35 95       	asr	r19
    2164:	27 95       	ror	r18
    2166:	0a 94       	dec	r0
    2168:	e2 f7       	brpl	.-8      	; 0x2162 <send_msg+0x14a>
    216a:	20 ff       	sbrs	r18, 0
    216c:	f2 cf       	rjmp	.-28     	; 0x2152 <send_msg+0x13a>
    216e:	48 9f       	mul	r20, r24
    2170:	d0 01       	movw	r26, r0
    2172:	49 9f       	mul	r20, r25
    2174:	b0 0d       	add	r27, r0
    2176:	11 24       	eor	r1, r1
    2178:	a3 50       	subi	r26, 0x03	; 3
    217a:	bc 4d       	sbci	r27, 0xDC	; 220
    217c:	1d 92       	st	X+, r1
    217e:	1d 92       	st	X+, r1
    2180:	1d 92       	st	X+, r1
    2182:	1c 92       	st	X, r1
    2184:	13 97       	sbiw	r26, 0x03	; 3
    2186:	a0 81       	ld	r26, Z
    2188:	b1 81       	ldd	r27, Z+1	; 0x01
    218a:	13 96       	adiw	r26, 0x03	; 3
    218c:	2c 91       	ld	r18, X
    218e:	13 97       	sbiw	r26, 0x03	; 3
    2190:	21 10       	cpse	r2, r1
    2192:	dc cf       	rjmp	.-72     	; 0x214c <send_msg+0x134>
    2194:	22 60       	ori	r18, 0x02	; 2
    2196:	13 96       	adiw	r26, 0x03	; 3
    2198:	2c 93       	st	X, r18
    219a:	01 96       	adiw	r24, 0x01	; 1
    219c:	32 96       	adiw	r30, 0x02	; 2
    219e:	86 30       	cpi	r24, 0x06	; 6
    21a0:	91 05       	cpc	r25, r1
    21a2:	e1 f6       	brne	.-72     	; 0x215c <send_msg+0x144>
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	bf 90       	pop	r11
    21b6:	af 90       	pop	r10
    21b8:	9f 90       	pop	r9
    21ba:	8f 90       	pop	r8
    21bc:	7f 90       	pop	r7
    21be:	6f 90       	pop	r6
    21c0:	5f 90       	pop	r5
    21c2:	4f 90       	pop	r4
    21c4:	3f 90       	pop	r3
    21c6:	2f 90       	pop	r2
    21c8:	08 95       	ret
    21ca:	88 e8       	ldi	r24, 0x88	; 136
    21cc:	96 e0       	ldi	r25, 0x06	; 6
    21ce:	9f 93       	push	r25
    21d0:	8f 93       	push	r24
    21d2:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	38 cf       	rjmp	.-400    	; 0x204c <send_msg+0x34>
    21dc:	28 e3       	ldi	r18, 0x38	; 56
    21de:	28 9f       	mul	r18, r24
    21e0:	f0 01       	movw	r30, r0
    21e2:	29 9f       	mul	r18, r25
    21e4:	f0 0d       	add	r31, r0
    21e6:	11 24       	eor	r1, r1
    21e8:	e3 50       	subi	r30, 0x03	; 3
    21ea:	fc 4d       	sbci	r31, 0xDC	; 220
    21ec:	87 a9       	ldd	r24, Z+55	; 0x37
    21ee:	80 7c       	andi	r24, 0xC0	; 192
    21f0:	e3 01       	movw	r28, r6
    21f2:	c8 27       	eor	r28, r24
    21f4:	8c 2f       	mov	r24, r28
    21f6:	82 95       	swap	r24
    21f8:	8c 27       	eor	r24, r28
    21fa:	08 2e       	mov	r0, r24
    21fc:	86 95       	lsr	r24
    21fe:	86 95       	lsr	r24
    2200:	80 25       	eor	r24, r0
    2202:	08 2e       	mov	r0, r24
    2204:	86 95       	lsr	r24
    2206:	80 25       	eor	r24, r0
    2208:	87 70       	andi	r24, 0x07	; 7
    220a:	0c 2e       	mov	r0, r28
    220c:	cd 2f       	mov	r28, r29
    220e:	86 95       	lsr	r24
    2210:	07 94       	ror	r0
    2212:	87 95       	ror	r24
    2214:	d0 2d       	mov	r29, r0
    2216:	c8 27       	eor	r28, r24
    2218:	06 94       	lsr	r0
    221a:	87 95       	ror	r24
    221c:	d0 25       	eor	r29, r0
    221e:	c8 27       	eor	r28, r24
    2220:	87 a9       	ldd	r24, Z+55	; 0x37
    2222:	86 fd       	sbrc	r24, 6
    2224:	28 cf       	rjmp	.-432    	; 0x2076 <send_msg+0x5e>
    2226:	80 85       	ldd	r24, Z+8	; 0x08
    2228:	91 85       	ldd	r25, Z+9	; 0x09
    222a:	c8 27       	eor	r28, r24
    222c:	8c 2f       	mov	r24, r28
    222e:	82 95       	swap	r24
    2230:	8c 27       	eor	r24, r28
    2232:	08 2e       	mov	r0, r24
    2234:	86 95       	lsr	r24
    2236:	86 95       	lsr	r24
    2238:	80 25       	eor	r24, r0
    223a:	08 2e       	mov	r0, r24
    223c:	86 95       	lsr	r24
    223e:	80 25       	eor	r24, r0
    2240:	87 70       	andi	r24, 0x07	; 7
    2242:	0c 2e       	mov	r0, r28
    2244:	cd 2f       	mov	r28, r29
    2246:	86 95       	lsr	r24
    2248:	07 94       	ror	r0
    224a:	87 95       	ror	r24
    224c:	d0 2d       	mov	r29, r0
    224e:	c8 27       	eor	r28, r24
    2250:	06 94       	lsr	r0
    2252:	87 95       	ror	r24
    2254:	d0 25       	eor	r29, r0
    2256:	c8 27       	eor	r28, r24
    2258:	0e cf       	rjmp	.-484    	; 0x2076 <send_msg+0x5e>

0000225a <irIsBusy>:
    225a:	4f 92       	push	r4
    225c:	5f 92       	push	r5
    225e:	6f 92       	push	r6
    2260:	7f 92       	push	r7
    2262:	8f 92       	push	r8
    2264:	9f 92       	push	r9
    2266:	af 92       	push	r10
    2268:	bf 92       	push	r11
    226a:	ff 92       	push	r15
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	c8 2f       	mov	r28, r24
    2276:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    227a:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <hpIrBlock_bm>
    227e:	2c 23       	and	r18, r28
    2280:	09 f0       	breq	.+2      	; 0x2284 <irIsBusy+0x2a>
    2282:	59 c0       	rjmp	.+178    	; 0x2336 <irIsBusy+0xdc>
    2284:	d0 e0       	ldi	r29, 0x00	; 0
    2286:	ac 2f       	mov	r26, r28
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	10 e0       	ldi	r17, 0x00	; 0
    2290:	00 e0       	ldi	r16, 0x00	; 0
    2292:	c0 e0       	ldi	r28, 0x00	; 0
    2294:	48 e3       	ldi	r20, 0x38	; 56
    2296:	f4 2e       	mov	r15, r20
    2298:	ad 01       	movw	r20, r26
    229a:	02 2e       	mov	r0, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <irIsBusy+0x48>
    229e:	55 95       	asr	r21
    22a0:	47 95       	ror	r20
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <irIsBusy+0x44>
    22a6:	40 ff       	sbrs	r20, 0
    22a8:	2f c0       	rjmp	.+94     	; 0x2308 <irIsBusy+0xae>
    22aa:	f2 9e       	mul	r15, r18
    22ac:	f0 01       	movw	r30, r0
    22ae:	f3 9e       	mul	r15, r19
    22b0:	f0 0d       	add	r31, r0
    22b2:	11 24       	eor	r1, r1
    22b4:	e3 50       	subi	r30, 0x03	; 3
    22b6:	fc 4d       	sbci	r31, 0xDC	; 220
    22b8:	47 a9       	ldd	r20, Z+55	; 0x37
    22ba:	46 ff       	sbrs	r20, 6
    22bc:	03 c0       	rjmp	.+6      	; 0x22c4 <irIsBusy+0x6a>
    22be:	47 a9       	ldd	r20, Z+55	; 0x37
    22c0:	47 fd       	sbrc	r20, 7
    22c2:	3b c0       	rjmp	.+118    	; 0x233a <irIsBusy+0xe0>
    22c4:	f2 9e       	mul	r15, r18
    22c6:	f0 01       	movw	r30, r0
    22c8:	f3 9e       	mul	r15, r19
    22ca:	f0 0d       	add	r31, r0
    22cc:	11 24       	eor	r1, r1
    22ce:	e3 50       	subi	r30, 0x03	; 3
    22d0:	fc 4d       	sbci	r31, 0xDC	; 220
    22d2:	47 a9       	ldd	r20, Z+55	; 0x37
    22d4:	45 fd       	sbrc	r20, 5
    22d6:	c2 e0       	ldi	r28, 0x02	; 2
    22d8:	f2 9e       	mul	r15, r18
    22da:	f0 01       	movw	r30, r0
    22dc:	f3 9e       	mul	r15, r19
    22de:	f0 0d       	add	r31, r0
    22e0:	11 24       	eor	r1, r1
    22e2:	e3 50       	subi	r30, 0x03	; 3
    22e4:	fc 4d       	sbci	r31, 0xDC	; 220
    22e6:	80 80       	ld	r8, Z
    22e8:	91 80       	ldd	r9, Z+1	; 0x01
    22ea:	a2 80       	ldd	r10, Z+2	; 0x02
    22ec:	b3 80       	ldd	r11, Z+3	; 0x03
    22ee:	2b 01       	movw	r4, r22
    22f0:	3c 01       	movw	r6, r24
    22f2:	48 18       	sub	r4, r8
    22f4:	59 08       	sbc	r5, r9
    22f6:	6a 08       	sbc	r6, r10
    22f8:	7b 08       	sbc	r7, r11
    22fa:	40 e1       	ldi	r20, 0x10	; 16
    22fc:	44 16       	cp	r4, r20
    22fe:	51 04       	cpc	r5, r1
    2300:	61 04       	cpc	r6, r1
    2302:	71 04       	cpc	r7, r1
    2304:	08 f4       	brcc	.+2      	; 0x2308 <irIsBusy+0xae>
    2306:	01 e0       	ldi	r16, 0x01	; 1
    2308:	2f 5f       	subi	r18, 0xFF	; 255
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	26 30       	cpi	r18, 0x06	; 6
    230e:	31 05       	cpc	r19, r1
    2310:	19 f6       	brne	.-122    	; 0x2298 <irIsBusy+0x3e>
    2312:	80 2f       	mov	r24, r16
    2314:	81 2b       	or	r24, r17
    2316:	8d 2b       	or	r24, r29
    2318:	8c 2b       	or	r24, r28
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	ff 90       	pop	r15
    2324:	bf 90       	pop	r11
    2326:	af 90       	pop	r10
    2328:	9f 90       	pop	r9
    232a:	8f 90       	pop	r8
    232c:	7f 90       	pop	r7
    232e:	6f 90       	pop	r6
    2330:	5f 90       	pop	r5
    2332:	4f 90       	pop	r4
    2334:	08 95       	ret
    2336:	d8 e0       	ldi	r29, 0x08	; 8
    2338:	a6 cf       	rjmp	.-180    	; 0x2286 <irIsBusy+0x2c>
    233a:	14 e0       	ldi	r17, 0x04	; 4
    233c:	c3 cf       	rjmp	.-122    	; 0x22c4 <irIsBusy+0x6a>

0000233e <all_ir_sends>:
    233e:	df 92       	push	r13
    2340:	ef 92       	push	r14
    2342:	ff 92       	push	r15
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	d8 2e       	mov	r13, r24
    234e:	eb 01       	movw	r28, r22
    2350:	14 2f       	mov	r17, r20
    2352:	79 01       	movw	r14, r18
    2354:	0e 94 2d 11 	call	0x225a	; 0x225a <irIsBusy>
    2358:	82 30       	cpi	r24, 0x02	; 2
    235a:	08 f4       	brcc	.+2      	; 0x235e <all_ir_sends+0x20>
    235c:	5e c0       	rjmp	.+188    	; 0x241a <all_ir_sends+0xdc>
    235e:	1f 92       	push	r1
    2360:	8f 93       	push	r24
    2362:	80 e6       	ldi	r24, 0x60	; 96
    2364:	96 e0       	ldi	r25, 0x06	; 6
    2366:	9f 93       	push	r25
    2368:	8f 93       	push	r24
    236a:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	11 23       	and	r17, r17
    2378:	09 f4       	brne	.+2      	; 0x237c <all_ir_sends+0x3e>
    237a:	42 c0       	rjmp	.+132    	; 0x2400 <all_ir_sends+0xc2>
    237c:	88 81       	ld	r24, Y
    237e:	80 52       	subi	r24, 0x20	; 32
    2380:	8f 35       	cpi	r24, 0x5F	; 95
    2382:	08 f0       	brcs	.+2      	; 0x2386 <all_ir_sends+0x48>
    2384:	8d c0       	rjmp	.+282    	; 0x24a0 <all_ir_sends+0x162>
    2386:	fe 01       	movw	r30, r28
    2388:	31 96       	adiw	r30, 0x01	; 1
    238a:	11 50       	subi	r17, 0x01	; 1
    238c:	21 2f       	mov	r18, r17
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	2f 5f       	subi	r18, 0xFF	; 255
    2392:	3f 4f       	sbci	r19, 0xFF	; 255
    2394:	2c 0f       	add	r18, r28
    2396:	3d 1f       	adc	r19, r29
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <all_ir_sends+0x66>
    239a:	81 91       	ld	r24, Z+
    239c:	80 52       	subi	r24, 0x20	; 32
    239e:	8f 35       	cpi	r24, 0x5F	; 95
    23a0:	08 f0       	brcs	.+2      	; 0x23a4 <all_ir_sends+0x66>
    23a2:	7c c0       	rjmp	.+248    	; 0x249c <all_ir_sends+0x15e>
    23a4:	e2 17       	cp	r30, r18
    23a6:	f3 07       	cpc	r31, r19
    23a8:	c1 f7       	brne	.-16     	; 0x239a <all_ir_sends+0x5c>
    23aa:	dd 24       	eor	r13, r13
    23ac:	d3 94       	inc	r13
    23ae:	01 2f       	mov	r16, r17
    23b0:	10 e0       	ldi	r17, 0x00	; 0
    23b2:	0f 5f       	subi	r16, 0xFF	; 255
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	0c 0f       	add	r16, r28
    23b8:	1d 1f       	adc	r17, r29
    23ba:	80 e6       	ldi	r24, 0x60	; 96
    23bc:	e8 2e       	mov	r14, r24
    23be:	80 e2       	ldi	r24, 0x20	; 32
    23c0:	f8 2e       	mov	r15, r24
    23c2:	12 c0       	rjmp	.+36     	; 0x23e8 <all_ir_sends+0xaa>
    23c4:	28 2f       	mov	r18, r24
    23c6:	08 2e       	mov	r0, r24
    23c8:	00 0c       	add	r0, r0
    23ca:	33 0b       	sbc	r19, r19
    23cc:	3f 93       	push	r19
    23ce:	8f 93       	push	r24
    23d0:	ff 92       	push	r15
    23d2:	ef 92       	push	r14
    23d4:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <printf>
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	21 96       	adiw	r28, 0x01	; 1
    23e2:	c0 17       	cp	r28, r16
    23e4:	d1 07       	cpc	r29, r17
    23e6:	61 f0       	breq	.+24     	; 0x2400 <all_ir_sends+0xc2>
    23e8:	88 81       	ld	r24, Y
    23ea:	dd 20       	and	r13, r13
    23ec:	59 f3       	breq	.-42     	; 0x23c4 <all_ir_sends+0x86>
    23ee:	08 2e       	mov	r0, r24
    23f0:	00 0c       	add	r0, r0
    23f2:	99 0b       	sbc	r25, r25
    23f4:	0e 94 c6 4d 	call	0x9b8c	; 0x9b8c <putchar>
    23f8:	21 96       	adiw	r28, 0x01	; 1
    23fa:	c0 17       	cp	r28, r16
    23fc:	d1 07       	cpc	r29, r17
    23fe:	a1 f7       	brne	.-24     	; 0x23e8 <all_ir_sends+0xaa>
    2400:	86 e9       	ldi	r24, 0x96	; 150
    2402:	91 e2       	ldi	r25, 0x21	; 33
    2404:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <puts>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	ff 90       	pop	r15
    2414:	ef 90       	pop	r14
    2416:	df 90       	pop	r13
    2418:	08 95       	ret
    241a:	4d 2d       	mov	r20, r13
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	a6 e0       	ldi	r26, 0x06	; 6
    2420:	b0 e2       	ldi	r27, 0x20	; 32
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	68 e3       	ldi	r22, 0x38	; 56
    2428:	71 e0       	ldi	r23, 0x01	; 1
    242a:	9a 01       	movw	r18, r20
    242c:	08 2e       	mov	r0, r24
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <all_ir_sends+0xf6>
    2430:	35 95       	asr	r19
    2432:	27 95       	ror	r18
    2434:	0a 94       	dec	r0
    2436:	e2 f7       	brpl	.-8      	; 0x2430 <all_ir_sends+0xf2>
    2438:	20 ff       	sbrs	r18, 0
    243a:	1c c0       	rjmp	.+56     	; 0x2474 <all_ir_sends+0x136>
    243c:	ed 91       	ld	r30, X+
    243e:	fc 91       	ld	r31, X
    2440:	11 97       	sbiw	r26, 0x01	; 1
    2442:	24 81       	ldd	r18, Z+4	; 0x04
    2444:	2f 7e       	andi	r18, 0xEF	; 239
    2446:	24 83       	std	Z+4, r18	; 0x04
    2448:	68 9f       	mul	r22, r24
    244a:	f0 01       	movw	r30, r0
    244c:	69 9f       	mul	r22, r25
    244e:	f0 0d       	add	r31, r0
    2450:	11 24       	eor	r1, r1
    2452:	e3 50       	subi	r30, 0x03	; 3
    2454:	fc 4d       	sbci	r31, 0xDC	; 220
    2456:	77 ab       	std	Z+55, r23	; 0x37
    2458:	00 23       	and	r16, r16
    245a:	19 f0       	breq	.+6      	; 0x2462 <all_ir_sends+0x124>
    245c:	27 a9       	ldd	r18, Z+55	; 0x37
    245e:	20 68       	ori	r18, 0x80	; 128
    2460:	27 ab       	std	Z+55, r18	; 0x37
    2462:	68 9f       	mul	r22, r24
    2464:	f0 01       	movw	r30, r0
    2466:	69 9f       	mul	r22, r25
    2468:	f0 0d       	add	r31, r0
    246a:	11 24       	eor	r1, r1
    246c:	e3 50       	subi	r30, 0x03	; 3
    246e:	fc 4d       	sbci	r31, 0xDC	; 220
    2470:	e0 86       	std	Z+8, r14	; 0x08
    2472:	f1 86       	std	Z+9, r15	; 0x09
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	12 96       	adiw	r26, 0x02	; 2
    2478:	86 30       	cpi	r24, 0x06	; 6
    247a:	91 05       	cpc	r25, r1
    247c:	b1 f6       	brne	.-84     	; 0x242a <all_ir_sends+0xec>
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	41 2f       	mov	r20, r17
    2482:	be 01       	movw	r22, r28
    2484:	8d 2d       	mov	r24, r13
    2486:	0e 94 0c 10 	call	0x2018	; 0x2018 <send_msg>
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	ff 90       	pop	r15
    2496:	ef 90       	pop	r14
    2498:	df 90       	pop	r13
    249a:	08 95       	ret
    249c:	d1 2c       	mov	r13, r1
    249e:	87 cf       	rjmp	.-242    	; 0x23ae <all_ir_sends+0x70>
    24a0:	d1 2c       	mov	r13, r1
    24a2:	11 50       	subi	r17, 0x01	; 1
    24a4:	84 cf       	rjmp	.-248    	; 0x23ae <all_ir_sends+0x70>

000024a6 <irTargetedCmd>:
    24a6:	0f 93       	push	r16
    24a8:	01 e0       	ldi	r16, 0x01	; 1
    24aa:	0e 94 9f 11 	call	0x233e	; 0x233e <all_ir_sends>
    24ae:	0f 91       	pop	r16
    24b0:	08 95       	ret

000024b2 <irCmd>:
    24b2:	0f 93       	push	r16
    24b4:	01 e0       	ldi	r16, 0x01	; 1
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	0e 94 9f 11 	call	0x233e	; 0x233e <all_ir_sends>
    24be:	0f 91       	pop	r16
    24c0:	08 95       	ret

000024c2 <irTargetedSend>:
    24c2:	0f 93       	push	r16
    24c4:	00 e0       	ldi	r16, 0x00	; 0
    24c6:	0e 94 9f 11 	call	0x233e	; 0x233e <all_ir_sends>
    24ca:	0f 91       	pop	r16
    24cc:	08 95       	ret

000024ce <irSend>:
    24ce:	0f 93       	push	r16
    24d0:	00 e0       	ldi	r16, 0x00	; 0
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	0e 94 9f 11 	call	0x233e	; 0x233e <all_ir_sends>
    24da:	0f 91       	pop	r16
    24dc:	08 95       	ret

000024de <all_hp_ir_cmds>:
    24de:	af 92       	push	r10
    24e0:	bf 92       	push	r11
    24e2:	df 92       	push	r13
    24e4:	ef 92       	push	r14
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	e8 2e       	mov	r14, r24
    24ee:	5b 01       	movw	r10, r22
    24f0:	14 2f       	mov	r17, r20
    24f2:	e9 01       	movw	r28, r18
    24f4:	df b6       	in	r13, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	0e 94 2d 11 	call	0x225a	; 0x225a <irIsBusy>
    24fc:	84 30       	cpi	r24, 0x04	; 4
    24fe:	e0 f5       	brcc	.+120    	; 0x2578 <all_hp_ir_cmds+0x9a>
    2500:	10 34       	cpi	r17, 0x40	; 64
    2502:	08 f0       	brcs	.+2      	; 0x2506 <all_hp_ir_cmds+0x28>
    2504:	10 54       	subi	r17, 0x40	; 64
    2506:	4e 2d       	mov	r20, r14
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	a6 e0       	ldi	r26, 0x06	; 6
    250c:	b0 e2       	ldi	r27, 0x20	; 32
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	78 e3       	ldi	r23, 0x38	; 56
    2514:	61 e8       	ldi	r22, 0x81	; 129
    2516:	9a 01       	movw	r18, r20
    2518:	08 2e       	mov	r0, r24
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <all_hp_ir_cmds+0x42>
    251c:	35 95       	asr	r19
    251e:	27 95       	ror	r18
    2520:	0a 94       	dec	r0
    2522:	e2 f7       	brpl	.-8      	; 0x251c <all_hp_ir_cmds+0x3e>
    2524:	20 ff       	sbrs	r18, 0
    2526:	13 c0       	rjmp	.+38     	; 0x254e <all_hp_ir_cmds+0x70>
    2528:	ed 91       	ld	r30, X+
    252a:	fc 91       	ld	r31, X
    252c:	11 97       	sbiw	r26, 0x01	; 1
    252e:	24 81       	ldd	r18, Z+4	; 0x04
    2530:	2f 7e       	andi	r18, 0xEF	; 239
    2532:	24 83       	std	Z+4, r18	; 0x04
    2534:	78 9f       	mul	r23, r24
    2536:	f0 01       	movw	r30, r0
    2538:	79 9f       	mul	r23, r25
    253a:	f0 0d       	add	r31, r0
    253c:	11 24       	eor	r1, r1
    253e:	e3 50       	subi	r30, 0x03	; 3
    2540:	fc 4d       	sbci	r31, 0xDC	; 220
    2542:	67 ab       	std	Z+55, r22	; 0x37
    2544:	27 a9       	ldd	r18, Z+55	; 0x37
    2546:	20 64       	ori	r18, 0x40	; 64
    2548:	27 ab       	std	Z+55, r18	; 0x37
    254a:	c0 87       	std	Z+8, r28	; 0x08
    254c:	d1 87       	std	Z+9, r29	; 0x09
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	12 96       	adiw	r26, 0x02	; 2
    2552:	86 30       	cpi	r24, 0x06	; 6
    2554:	91 05       	cpc	r25, r1
    2556:	f9 f6       	brne	.-66     	; 0x2516 <all_hp_ir_cmds+0x38>
    2558:	df be       	out	0x3f, r13	; 63
    255a:	21 e0       	ldi	r18, 0x01	; 1
    255c:	41 2f       	mov	r20, r17
    255e:	b5 01       	movw	r22, r10
    2560:	8e 2d       	mov	r24, r14
    2562:	0e 94 0c 10 	call	0x2018	; 0x2018 <send_msg>
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	1f 91       	pop	r17
    256e:	ef 90       	pop	r14
    2570:	df 90       	pop	r13
    2572:	bf 90       	pop	r11
    2574:	af 90       	pop	r10
    2576:	08 95       	ret
    2578:	df be       	out	0x3f, r13	; 63
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	1f 91       	pop	r17
    2582:	ef 90       	pop	r14
    2584:	df 90       	pop	r13
    2586:	bf 90       	pop	r11
    2588:	af 90       	pop	r10
    258a:	08 95       	ret

0000258c <hpIrTargetedCmd>:
}

uint8_t hpIrTargetedCmd(uint8_t dirs, char *data, uint8_t dataLength, id_t target){
	return all_hp_ir_cmds(dirs, data, dataLength, target);
    258c:	0c 94 6f 12 	jmp	0x24de	; 0x24de <all_hp_ir_cmds>

00002590 <irReceive>:
	clearIrBuffer(dir);
}


// To be called from interrupt handler only. Do not call.
static void irReceive(uint8_t dir){
    2590:	6f 92       	push	r6
    2592:	7f 92       	push	r7
    2594:	8f 92       	push	r8
    2596:	9f 92       	push	r9
    2598:	af 92       	push	r10
    259a:	bf 92       	push	r11
    259c:	cf 92       	push	r12
    259e:	df 92       	push	r13
    25a0:	ef 92       	push	r14
    25a2:	ff 92       	push	r15
    25a4:	0f 93       	push	r16
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	d8 2e       	mov	r13, r24
	uint8_t in_byte = channel[dir]->DATA;				// Some data just came in
    25ae:	c8 2f       	mov	r28, r24
    25b0:	d0 e0       	ldi	r29, 0x00	; 0
    25b2:	8e 01       	movw	r16, r28
    25b4:	00 0f       	add	r16, r16
    25b6:	11 1f       	adc	r17, r17
    25b8:	98 01       	movw	r18, r16
    25ba:	2a 5f       	subi	r18, 0xFA	; 250
    25bc:	3f 4d       	sbci	r19, 0xDF	; 223
    25be:	79 01       	movw	r14, r18
    25c0:	d9 01       	movw	r26, r18
    25c2:	ed 91       	ld	r30, X+
    25c4:	fc 91       	ld	r31, X
    25c6:	c0 80       	ld	r12, Z
	#ifdef AUDIO_DROPLET
		//ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_HI_gc;
	#endif	
	
	uint32_t now = getTime();
    25c8:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
    25cc:	28 e3       	ldi	r18, 0x38	; 56
    25ce:	2c 9f       	mul	r18, r28
    25d0:	f0 01       	movw	r30, r0
    25d2:	2d 9f       	mul	r18, r29
    25d4:	f0 0d       	add	r31, r0
    25d6:	11 24       	eor	r1, r1
    25d8:	e3 50       	subi	r30, 0x03	; 3
    25da:	fc 4d       	sbci	r31, 0xDC	; 220
    25dc:	80 80       	ld	r8, Z
    25de:	91 80       	ldd	r9, Z+1	; 0x01
    25e0:	a2 80       	ldd	r10, Z+2	; 0x02
    25e2:	b3 80       	ldd	r11, Z+3	; 0x03
    25e4:	9b 01       	movw	r18, r22
    25e6:	ac 01       	movw	r20, r24
    25e8:	28 19       	sub	r18, r8
    25ea:	39 09       	sbc	r19, r9
    25ec:	4a 09       	sbc	r20, r10
    25ee:	5b 09       	sbc	r21, r11
    25f0:	49 01       	movw	r8, r18
    25f2:	5a 01       	movw	r10, r20
    25f4:	31 e1       	ldi	r19, 0x11	; 17
    25f6:	83 16       	cp	r8, r19
    25f8:	91 04       	cpc	r9, r1
    25fa:	a1 04       	cpc	r10, r1
    25fc:	b1 04       	cpc	r11, r1
    25fe:	90 f0       	brcs	.+36     	; 0x2624 <irReceive+0x94>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2600:	14 82       	std	Z+4, r1	; 0x04
    2602:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2604:	16 82       	std	Z+6, r1	; 0x06
    2606:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2608:	10 86       	std	Z+8, r1	; 0x08
    260a:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    260c:	12 86       	std	Z+10, r1	; 0x0a
    260e:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2610:	14 86       	std	Z+12, r1	; 0x0c
    2612:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2614:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2616:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2618:	d7 01       	movw	r26, r14
    261a:	ed 91       	ld	r30, X+
    261c:	fc 91       	ld	r31, X
    261e:	24 81       	ldd	r18, Z+4	; 0x04
    2620:	20 61       	ori	r18, 0x10	; 16
    2622:	24 83       	std	Z+4, r18	; 0x04
		//ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_HI_gc;
	#endif	
	
	uint32_t now = getTime();
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
	ir_rxtx[dir].last_byte = now;
    2624:	28 e3       	ldi	r18, 0x38	; 56
    2626:	2c 9f       	mul	r18, r28
    2628:	d0 01       	movw	r26, r0
    262a:	2d 9f       	mul	r18, r29
    262c:	b0 0d       	add	r27, r0
    262e:	11 24       	eor	r1, r1
    2630:	a3 50       	subi	r26, 0x03	; 3
    2632:	bc 4d       	sbci	r27, 0xDC	; 220
    2634:	6d 93       	st	X+, r22
    2636:	7d 93       	st	X+, r23
    2638:	8d 93       	st	X+, r24
    263a:	9c 93       	st	X, r25
    263c:	13 97       	sbiw	r26, 0x03	; 3
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
    263e:	1a 96       	adiw	r26, 0x0a	; 10
    2640:	ed 91       	ld	r30, X+
    2642:	fc 91       	ld	r31, X
    2644:	1b 97       	sbiw	r26, 0x0b	; 11
    2646:	e7 30       	cpi	r30, 0x07	; 7
    2648:	f1 05       	cpc	r31, r1
    264a:	08 f4       	brcc	.+2      	; 0x264e <irReceive+0xbe>
    264c:	4b c0       	rjmp	.+150    	; 0x26e4 <irReceive+0x154>
										if(!(ir_rxtx[dir].status & IR_STATUS_TIMED_bm)){
											ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].calc_crc, ir_rxtx[dir].target_ID);
										}
										break;								
		default:
			ir_rxtx[dir].buf[ir_rxtx[dir].curr_pos-HEADER_LEN] = in_byte;
    264e:	1a 96       	adiw	r26, 0x0a	; 10
    2650:	ed 91       	ld	r30, X+
    2652:	fc 91       	ld	r31, X
    2654:	1b 97       	sbiw	r26, 0x0b	; 11
    2656:	37 97       	sbiw	r30, 0x07	; 7
    2658:	ea 0f       	add	r30, r26
    265a:	fb 1f       	adc	r31, r27
    265c:	c6 86       	std	Z+14, r12	; 0x0e
			ir_rxtx[dir].calc_crc = _crc16_update(ir_rxtx[dir].calc_crc, in_byte);
    265e:	1c 96       	adiw	r26, 0x0c	; 12
    2660:	8d 91       	ld	r24, X+
    2662:	9c 91       	ld	r25, X
    2664:	1d 97       	sbiw	r26, 0x0d	; 13
    2666:	8c 25       	eor	r24, r12
    2668:	28 2f       	mov	r18, r24
    266a:	22 95       	swap	r18
    266c:	28 27       	eor	r18, r24
    266e:	02 2e       	mov	r0, r18
    2670:	26 95       	lsr	r18
    2672:	26 95       	lsr	r18
    2674:	20 25       	eor	r18, r0
    2676:	02 2e       	mov	r0, r18
    2678:	26 95       	lsr	r18
    267a:	20 25       	eor	r18, r0
    267c:	27 70       	andi	r18, 0x07	; 7
    267e:	08 2e       	mov	r0, r24
    2680:	89 2f       	mov	r24, r25
    2682:	26 95       	lsr	r18
    2684:	07 94       	ror	r0
    2686:	27 95       	ror	r18
    2688:	90 2d       	mov	r25, r0
    268a:	82 27       	eor	r24, r18
    268c:	06 94       	lsr	r0
    268e:	27 95       	ror	r18
    2690:	90 25       	eor	r25, r0
    2692:	82 27       	eor	r24, r18
    2694:	1c 96       	adiw	r26, 0x0c	; 12
    2696:	8d 93       	st	X+, r24
    2698:	9c 93       	st	X, r25
    269a:	1d 97       	sbiw	r26, 0x0d	; 13
	}
	ir_rxtx[dir].curr_pos++;
    269c:	88 e3       	ldi	r24, 0x38	; 56
    269e:	8c 9f       	mul	r24, r28
    26a0:	f0 01       	movw	r30, r0
    26a2:	8d 9f       	mul	r24, r29
    26a4:	f0 0d       	add	r31, r0
    26a6:	11 24       	eor	r1, r1
    26a8:	e3 50       	subi	r30, 0x03	; 3
    26aa:	fc 4d       	sbci	r31, 0xDC	; 220
    26ac:	82 85       	ldd	r24, Z+10	; 0x0a
    26ae:	93 85       	ldd	r25, Z+11	; 0x0b
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	82 87       	std	Z+10, r24	; 0x0a
    26b4:	93 87       	std	Z+11, r25	; 0x0b
	if(ir_rxtx[dir].curr_pos>=(ir_rxtx[dir].data_length+HEADER_LEN)){
    26b6:	22 85       	ldd	r18, Z+10	; 0x0a
    26b8:	33 85       	ldd	r19, Z+11	; 0x0b
    26ba:	86 a9       	ldd	r24, Z+54	; 0x36
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	07 96       	adiw	r24, 0x07	; 7
    26c0:	28 17       	cp	r18, r24
    26c2:	39 07       	cpc	r19, r25
    26c4:	a8 f4       	brcc	.+42     	; 0x26f0 <irReceive+0x160>
		handleCompletedMsg(dir);
	}
}
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	1f 91       	pop	r17
    26cc:	0f 91       	pop	r16
    26ce:	ff 90       	pop	r15
    26d0:	ef 90       	pop	r14
    26d2:	df 90       	pop	r13
    26d4:	cf 90       	pop	r12
    26d6:	bf 90       	pop	r11
    26d8:	af 90       	pop	r10
    26da:	9f 90       	pop	r9
    26dc:	8f 90       	pop	r8
    26de:	7f 90       	pop	r7
    26e0:	6f 90       	pop	r6
    26e2:	08 95       	ret
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
	ir_rxtx[dir].last_byte = now;
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
    26e4:	88 27       	eor	r24, r24
    26e6:	eb 5f       	subi	r30, 0xFB	; 251
    26e8:	fe 4f       	sbci	r31, 0xFE	; 254
    26ea:	8f 4f       	sbci	r24, 0xFF	; 255
    26ec:	0c 94 25 49 	jmp	0x924a	; 0x924a <__tablejump2__>
		}
	}
}

static void handleCompletedMsg(uint8_t dir){
	ir_rxtx[dir].status |= ir_rxtx[dir].target_ID ? IR_STATUS_TARGETED_bm : 0;
    26f0:	80 85       	ldd	r24, Z+8	; 0x08
    26f2:	91 85       	ldd	r25, Z+9	; 0x09
    26f4:	89 2b       	or	r24, r25
    26f6:	09 f0       	breq	.+2      	; 0x26fa <irReceive+0x16a>
    26f8:	4c c0       	rjmp	.+152    	; 0x2792 <irReceive+0x202>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	98 e3       	ldi	r25, 0x38	; 56
    26fe:	9c 9f       	mul	r25, r28
    2700:	f0 01       	movw	r30, r0
    2702:	9d 9f       	mul	r25, r29
    2704:	f0 0d       	add	r31, r0
    2706:	11 24       	eor	r1, r1
    2708:	e3 50       	subi	r30, 0x03	; 3
    270a:	fc 4d       	sbci	r31, 0xDC	; 220
    270c:	97 a9       	ldd	r25, Z+55	; 0x37
    270e:	89 2b       	or	r24, r25
    2710:	87 ab       	std	Z+55, r24	; 0x37
	//pre checks.
	const uint8_t crcMismatch = ir_rxtx[dir].calc_crc!=ir_rxtx[dir].data_crc;
    2712:	24 85       	ldd	r18, Z+12	; 0x0c
    2714:	35 85       	ldd	r19, Z+13	; 0x0d
    2716:	84 81       	ldd	r24, Z+4	; 0x04
    2718:	95 81       	ldd	r25, Z+5	; 0x05
	const uint8_t nullCrc	  = ir_rxtx[dir].calc_crc==0;
    271a:	64 85       	ldd	r22, Z+12	; 0x0c
    271c:	75 85       	ldd	r23, Z+13	; 0x0d
	const uint8_t selfSender  = ir_rxtx[dir].senderID == getDropletID();
    271e:	a6 80       	ldd	r10, Z+6	; 0x06
    2720:	b7 80       	ldd	r11, Z+7	; 0x07
// Returns the number of ms elapsed since the last reset. (Defined in droplet_base_asm.s)
uint32_t getTime(void);

// Returns this Droplet's unique 16-bit identifier. 0 will never be an identifier.
inline id_t getDropletID(void){ 
	return droplet_ID;
    2722:	40 91 af 23 	lds	r20, 0x23AF	; 0x8023af <droplet_ID>
    2726:	50 91 b0 23 	lds	r21, 0x23B0	; 0x8023b0 <droplet_ID+0x1>
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
    272a:	f7 a8       	ldd	r15, Z+55	; 0x37
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
    272c:	bf 2d       	mov	r27, r15
    272e:	b0 74       	andi	r27, 0x40	; 64
    2730:	cb 2e       	mov	r12, r27
    2732:	f6 fc       	sbrc	r15, 6
    2734:	d5 c0       	rjmp	.+426    	; 0x28e0 <irReceive+0x350>
    2736:	e0 84       	ldd	r14, Z+8	; 0x08
    2738:	f1 84       	ldd	r15, Z+9	; 0x09
    273a:	ef 28       	or	r14, r15
    273c:	09 f4       	brne	.+2      	; 0x2740 <irReceive+0x1b0>
    273e:	d0 c0       	rjmp	.+416    	; 0x28e0 <irReceive+0x350>
    2740:	e0 84       	ldd	r14, Z+8	; 0x08
    2742:	f1 84       	ldd	r15, Z+9	; 0x09
    2744:	e1 e0       	ldi	r30, 0x01	; 1
    2746:	4e 15       	cp	r20, r14
    2748:	5f 05       	cpc	r21, r15
    274a:	09 f4       	brne	.+2      	; 0x274e <irReceive+0x1be>
    274c:	c9 c0       	rjmp	.+402    	; 0x28e0 <irReceive+0x350>
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
    274e:	28 17       	cp	r18, r24
    2750:	39 07       	cpc	r19, r25
    2752:	09 f4       	brne	.+2      	; 0x2756 <irReceive+0x1c6>
    2754:	ca c0       	rjmp	.+404    	; 0x28ea <irReceive+0x35a>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2756:	88 e3       	ldi	r24, 0x38	; 56
    2758:	8c 9f       	mul	r24, r28
    275a:	f0 01       	movw	r30, r0
    275c:	8d 9f       	mul	r24, r29
    275e:	f0 0d       	add	r31, r0
    2760:	11 24       	eor	r1, r1
    2762:	e3 50       	subi	r30, 0x03	; 3
    2764:	fc 4d       	sbci	r31, 0xDC	; 220
    2766:	14 82       	std	Z+4, r1	; 0x04
    2768:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    276a:	16 82       	std	Z+6, r1	; 0x06
    276c:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    276e:	10 86       	std	Z+8, r1	; 0x08
    2770:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2772:	12 86       	std	Z+10, r1	; 0x0a
    2774:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2776:	14 86       	std	Z+12, r1	; 0x0c
    2778:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    277a:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    277c:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    277e:	f8 01       	movw	r30, r16
    2780:	ea 5f       	subi	r30, 0xFA	; 250
    2782:	ff 4d       	sbci	r31, 0xDF	; 223
    2784:	01 90       	ld	r0, Z+
    2786:	f0 81       	ld	r31, Z
    2788:	e0 2d       	mov	r30, r0
    278a:	84 81       	ldd	r24, Z+4	; 0x04
    278c:	80 61       	ori	r24, 0x10	; 16
    278e:	84 83       	std	Z+4, r24	; 0x04
	}
	ir_rxtx[dir].curr_pos++;
	if(ir_rxtx[dir].curr_pos>=(ir_rxtx[dir].data_length+HEADER_LEN)){
		handleCompletedMsg(dir);
	}
}
    2790:	9a cf       	rjmp	.-204    	; 0x26c6 <irReceive+0x136>
		}
	}
}

static void handleCompletedMsg(uint8_t dir){
	ir_rxtx[dir].status |= ir_rxtx[dir].target_ID ? IR_STATUS_TARGETED_bm : 0;
    2792:	80 e1       	ldi	r24, 0x10	; 16
    2794:	b3 cf       	rjmp	.-154    	; 0x26fc <irReceive+0x16c>
										ir_rxtx[dir].status		   |= (in_byte&DATA_LEN_STATUS_BITS_bm);
										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].senderID, ir_rxtx[dir].status & IR_STATUS_CRC_BITS_bm);
										ir_rxtx[dir].data_length	= in_byte&DATA_LEN_VAL_bm;
										if(ir_rxtx[dir].data_length>IR_BUFFER_SIZE) ir_rxtx[dir].data_length=1; //basically, this will cause the message to get aborted.
																								break;
		case HEADER_POS_TARGET_ID_LOW:  ir_rxtx[dir].target_ID		= (uint16_t)in_byte;		break;
    2796:	8c 2d       	mov	r24, r12
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	28 e3       	ldi	r18, 0x38	; 56
    279c:	2c 9f       	mul	r18, r28
    279e:	f0 01       	movw	r30, r0
    27a0:	2d 9f       	mul	r18, r29
    27a2:	f0 0d       	add	r31, r0
    27a4:	11 24       	eor	r1, r1
    27a6:	e3 50       	subi	r30, 0x03	; 3
    27a8:	fc 4d       	sbci	r31, 0xDC	; 220
    27aa:	80 87       	std	Z+8, r24	; 0x08
    27ac:	91 87       	std	Z+9, r25	; 0x09
    27ae:	76 cf       	rjmp	.-276    	; 0x269c <irReceive+0x10c>
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
		case HEADER_POS_SENDER_ID_LOW:	ir_rxtx[dir].senderID		= (uint16_t)in_byte;		break;
		case HEADER_POS_SENDER_ID_HIGH:	ir_rxtx[dir].senderID	   |= (((uint16_t)in_byte)<<8);	break;
		case HEADER_POS_CRC_LOW:		ir_rxtx[dir].data_crc		= (uint16_t)in_byte;		break;
    27b0:	8c 2d       	mov	r24, r12
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	28 e3       	ldi	r18, 0x38	; 56
    27b6:	2c 9f       	mul	r18, r28
    27b8:	f0 01       	movw	r30, r0
    27ba:	2d 9f       	mul	r18, r29
    27bc:	f0 0d       	add	r31, r0
    27be:	11 24       	eor	r1, r1
    27c0:	e3 50       	subi	r30, 0x03	; 3
    27c2:	fc 4d       	sbci	r31, 0xDC	; 220
    27c4:	84 83       	std	Z+4, r24	; 0x04
    27c6:	95 83       	std	Z+5, r25	; 0x05
    27c8:	69 cf       	rjmp	.-302    	; 0x269c <irReceive+0x10c>
		case HEADER_POS_CRC_HIGH:		ir_rxtx[dir].data_crc	   |= (((uint16_t)in_byte)<<8); break;																								
    27ca:	88 e3       	ldi	r24, 0x38	; 56
    27cc:	8c 9f       	mul	r24, r28
    27ce:	f0 01       	movw	r30, r0
    27d0:	8d 9f       	mul	r24, r29
    27d2:	f0 0d       	add	r31, r0
    27d4:	11 24       	eor	r1, r1
    27d6:	e3 50       	subi	r30, 0x03	; 3
    27d8:	fc 4d       	sbci	r31, 0xDC	; 220
    27da:	84 81       	ldd	r24, Z+4	; 0x04
    27dc:	95 81       	ldd	r25, Z+5	; 0x05
    27de:	9c 29       	or	r25, r12
    27e0:	84 83       	std	Z+4, r24	; 0x04
    27e2:	95 83       	std	Z+5, r25	; 0x05
    27e4:	5b cf       	rjmp	.-330    	; 0x269c <irReceive+0x10c>
		case HEADER_POS_MSG_LENGTH:
										ir_rxtx[dir].status		   |= (in_byte&DATA_LEN_STATUS_BITS_bm);
    27e6:	88 e3       	ldi	r24, 0x38	; 56
    27e8:	8c 9f       	mul	r24, r28
    27ea:	f0 01       	movw	r30, r0
    27ec:	8d 9f       	mul	r24, r29
    27ee:	f0 0d       	add	r31, r0
    27f0:	11 24       	eor	r1, r1
    27f2:	e3 50       	subi	r30, 0x03	; 3
    27f4:	fc 4d       	sbci	r31, 0xDC	; 220
    27f6:	87 a9       	ldd	r24, Z+55	; 0x37
    27f8:	9c 2d       	mov	r25, r12
    27fa:	90 7c       	andi	r25, 0xC0	; 192
    27fc:	89 2b       	or	r24, r25
    27fe:	87 ab       	std	Z+55, r24	; 0x37
										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].senderID, ir_rxtx[dir].status & IR_STATUS_CRC_BITS_bm);
    2800:	27 a9       	ldd	r18, Z+55	; 0x37
    2802:	86 81       	ldd	r24, Z+6	; 0x06
    2804:	97 81       	ldd	r25, Z+7	; 0x07
    2806:	20 7c       	andi	r18, 0xC0	; 192
    2808:	82 27       	eor	r24, r18
    280a:	28 2f       	mov	r18, r24
    280c:	22 95       	swap	r18
    280e:	28 27       	eor	r18, r24
    2810:	02 2e       	mov	r0, r18
    2812:	26 95       	lsr	r18
    2814:	26 95       	lsr	r18
    2816:	20 25       	eor	r18, r0
    2818:	02 2e       	mov	r0, r18
    281a:	26 95       	lsr	r18
    281c:	20 25       	eor	r18, r0
    281e:	27 70       	andi	r18, 0x07	; 7
    2820:	08 2e       	mov	r0, r24
    2822:	89 2f       	mov	r24, r25
    2824:	26 95       	lsr	r18
    2826:	07 94       	ror	r0
    2828:	27 95       	ror	r18
    282a:	90 2d       	mov	r25, r0
    282c:	82 27       	eor	r24, r18
    282e:	06 94       	lsr	r0
    2830:	27 95       	ror	r18
    2832:	90 25       	eor	r25, r0
    2834:	82 27       	eor	r24, r18
    2836:	84 87       	std	Z+12, r24	; 0x0c
    2838:	95 87       	std	Z+13, r25	; 0x0d
										ir_rxtx[dir].data_length	= in_byte&DATA_LEN_VAL_bm;
    283a:	8c 2d       	mov	r24, r12
    283c:	8f 73       	andi	r24, 0x3F	; 63
    283e:	86 ab       	std	Z+54, r24	; 0x36
										if(ir_rxtx[dir].data_length>IR_BUFFER_SIZE) ir_rxtx[dir].data_length=1; //basically, this will cause the message to get aborted.
    2840:	86 a9       	ldd	r24, Z+54	; 0x36
    2842:	89 32       	cpi	r24, 0x29	; 41
    2844:	08 f4       	brcc	.+2      	; 0x2848 <irReceive+0x2b8>
    2846:	2a cf       	rjmp	.-428    	; 0x269c <irReceive+0x10c>
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	86 ab       	std	Z+54, r24	; 0x36
    284c:	27 cf       	rjmp	.-434    	; 0x269c <irReceive+0x10c>
																								break;
		case HEADER_POS_TARGET_ID_LOW:  ir_rxtx[dir].target_ID		= (uint16_t)in_byte;		break;
		case HEADER_POS_TARGET_ID_HIGH:
										ir_rxtx[dir].target_ID	   |= (((uint16_t)in_byte)<<8);
    284e:	88 e3       	ldi	r24, 0x38	; 56
    2850:	8c 9f       	mul	r24, r28
    2852:	f0 01       	movw	r30, r0
    2854:	8d 9f       	mul	r24, r29
    2856:	f0 0d       	add	r31, r0
    2858:	11 24       	eor	r1, r1
    285a:	e3 50       	subi	r30, 0x03	; 3
    285c:	fc 4d       	sbci	r31, 0xDC	; 220
    285e:	80 85       	ldd	r24, Z+8	; 0x08
    2860:	91 85       	ldd	r25, Z+9	; 0x09
    2862:	9c 29       	or	r25, r12
    2864:	80 87       	std	Z+8, r24	; 0x08
    2866:	91 87       	std	Z+9, r25	; 0x09
										if(!(ir_rxtx[dir].status & IR_STATUS_TIMED_bm)){
    2868:	87 a9       	ldd	r24, Z+55	; 0x37
    286a:	86 fd       	sbrc	r24, 6
    286c:	17 cf       	rjmp	.-466    	; 0x269c <irReceive+0x10c>
											ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].calc_crc, ir_rxtx[dir].target_ID);
    286e:	20 85       	ldd	r18, Z+8	; 0x08
    2870:	31 85       	ldd	r19, Z+9	; 0x09
    2872:	84 85       	ldd	r24, Z+12	; 0x0c
    2874:	95 85       	ldd	r25, Z+13	; 0x0d
    2876:	82 27       	eor	r24, r18
    2878:	28 2f       	mov	r18, r24
    287a:	22 95       	swap	r18
    287c:	28 27       	eor	r18, r24
    287e:	02 2e       	mov	r0, r18
    2880:	26 95       	lsr	r18
    2882:	26 95       	lsr	r18
    2884:	20 25       	eor	r18, r0
    2886:	02 2e       	mov	r0, r18
    2888:	26 95       	lsr	r18
    288a:	20 25       	eor	r18, r0
    288c:	27 70       	andi	r18, 0x07	; 7
    288e:	08 2e       	mov	r0, r24
    2890:	89 2f       	mov	r24, r25
    2892:	26 95       	lsr	r18
    2894:	07 94       	ror	r0
    2896:	27 95       	ror	r18
    2898:	90 2d       	mov	r25, r0
    289a:	82 27       	eor	r24, r18
    289c:	06 94       	lsr	r0
    289e:	27 95       	ror	r18
    28a0:	90 25       	eor	r25, r0
    28a2:	82 27       	eor	r24, r18
    28a4:	84 87       	std	Z+12, r24	; 0x0c
    28a6:	95 87       	std	Z+13, r25	; 0x0d
    28a8:	f9 ce       	rjmp	.-526    	; 0x269c <irReceive+0x10c>
	ir_rxtx[dir].last_byte = now;
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
		case HEADER_POS_SENDER_ID_LOW:	ir_rxtx[dir].senderID		= (uint16_t)in_byte;		break;
    28aa:	8c 2d       	mov	r24, r12
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	28 e3       	ldi	r18, 0x38	; 56
    28b0:	2c 9f       	mul	r18, r28
    28b2:	f0 01       	movw	r30, r0
    28b4:	2d 9f       	mul	r18, r29
    28b6:	f0 0d       	add	r31, r0
    28b8:	11 24       	eor	r1, r1
    28ba:	e3 50       	subi	r30, 0x03	; 3
    28bc:	fc 4d       	sbci	r31, 0xDC	; 220
    28be:	86 83       	std	Z+6, r24	; 0x06
    28c0:	97 83       	std	Z+7, r25	; 0x07
    28c2:	ec ce       	rjmp	.-552    	; 0x269c <irReceive+0x10c>
		case HEADER_POS_SENDER_ID_HIGH:	ir_rxtx[dir].senderID	   |= (((uint16_t)in_byte)<<8);	break;
    28c4:	88 e3       	ldi	r24, 0x38	; 56
    28c6:	8c 9f       	mul	r24, r28
    28c8:	f0 01       	movw	r30, r0
    28ca:	8d 9f       	mul	r24, r29
    28cc:	f0 0d       	add	r31, r0
    28ce:	11 24       	eor	r1, r1
    28d0:	e3 50       	subi	r30, 0x03	; 3
    28d2:	fc 4d       	sbci	r31, 0xDC	; 220
    28d4:	86 81       	ldd	r24, Z+6	; 0x06
    28d6:	97 81       	ldd	r25, Z+7	; 0x07
    28d8:	9c 29       	or	r25, r12
    28da:	86 83       	std	Z+6, r24	; 0x06
    28dc:	97 83       	std	Z+7, r25	; 0x07
    28de:	de ce       	rjmp	.-580    	; 0x269c <irReceive+0x10c>
	//pre checks.
	const uint8_t crcMismatch = ir_rxtx[dir].calc_crc!=ir_rxtx[dir].data_crc;
	const uint8_t nullCrc	  = ir_rxtx[dir].calc_crc==0;
	const uint8_t selfSender  = ir_rxtx[dir].senderID == getDropletID();
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
    28e0:	e0 e0       	ldi	r30, 0x00	; 0
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
    28e2:	28 17       	cp	r18, r24
    28e4:	39 07       	cpc	r19, r25
    28e6:	09 f0       	breq	.+2      	; 0x28ea <irReceive+0x35a>
    28e8:	36 cf       	rjmp	.-404    	; 0x2756 <irReceive+0x1c6>
    28ea:	67 2b       	or	r22, r23
    28ec:	09 f4       	brne	.+2      	; 0x28f0 <irReceive+0x360>
    28ee:	33 cf       	rjmp	.-410    	; 0x2756 <irReceive+0x1c6>
    28f0:	a4 16       	cp	r10, r20
    28f2:	b5 06       	cpc	r11, r21
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <irReceive+0x368>
    28f6:	2f cf       	rjmp	.-418    	; 0x2756 <irReceive+0x1c6>
    28f8:	e1 11       	cpse	r30, r1
    28fa:	2d cf       	rjmp	.-422    	; 0x2756 <irReceive+0x1c6>
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
    28fc:	88 e3       	ldi	r24, 0x38	; 56
    28fe:	8c 9f       	mul	r24, r28
    2900:	b0 01       	movw	r22, r0
    2902:	8d 9f       	mul	r24, r29
    2904:	70 0d       	add	r23, r0
    2906:	11 24       	eor	r1, r1
    2908:	fb 01       	movw	r30, r22
    290a:	e3 50       	subi	r30, 0x03	; 3
    290c:	fc 4d       	sbci	r31, 0xDC	; 220
    290e:	7f 01       	movw	r14, r30
    2910:	87 a9       	ldd	r24, Z+55	; 0x37
    2912:	87 fd       	sbrc	r24, 7
    2914:	a1 c0       	rjmp	.+322    	; 0x2a58 <irReceive+0x4c8>
		   delay_us(100);
	   } while (busy);
}

static void addMsgToMsgQueue(uint8_t dir){
	if(ir_rxtx[dir].data_length == 0){
    2916:	86 a9       	ldd	r24, Z+54	; 0x36
    2918:	88 23       	and	r24, r24
    291a:	09 f4       	brne	.+2      	; 0x291e <irReceive+0x38e>
    291c:	35 c2       	rjmp	.+1130   	; 0x2d88 <irReceive+0x7f8>
		printf_P(PSTR("ERROR! Should NOT be adding 0-length message to queue.\r\n"));
	}else if(ir_rxtx[dir].data_length > IR_BUFFER_SIZE){
    291e:	86 a9       	ldd	r24, Z+54	; 0x36
    2920:	89 32       	cpi	r24, 0x29	; 41
    2922:	08 f0       	brcs	.+2      	; 0x2926 <irReceive+0x396>
    2924:	3a c2       	rjmp	.+1140   	; 0x2d9a <irReceive+0x80a>
		printf_P(PSTR("ERROR! Should NOT be adding a message with length greater than buffer size to queue.\r\n"));
	}else if(memoryConsumedByBuffer > 500){
    2926:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <memoryConsumedByBuffer>
    292a:	90 91 e6 23 	lds	r25, 0x23E6	; 0x8023e6 <memoryConsumedByBuffer+0x1>
    292e:	85 3f       	cpi	r24, 0xF5	; 245
    2930:	91 40       	sbci	r25, 0x01	; 1
    2932:	08 f0       	brcs	.+2      	; 0x2936 <irReceive+0x3a6>
    2934:	3b c2       	rjmp	.+1142   	; 0x2dac <irReceive+0x81c>
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
	}else{
		volatile MsgNode* node = incomingMsgHead;
    2936:	c0 90 7f 25 	lds	r12, 0x257F	; 0x80257f <incomingMsgHead>
    293a:	d0 90 80 25 	lds	r13, 0x2580	; 0x802580 <incomingMsgHead+0x1>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    293e:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2940:	f8 94       	cli
			if(incomingMsgHead==NULL){
    2942:	80 91 7f 25 	lds	r24, 0x257F	; 0x80257f <incomingMsgHead>
    2946:	90 91 80 25 	lds	r25, 0x2580	; 0x802580 <incomingMsgHead+0x1>
    294a:	89 2b       	or	r24, r25
    294c:	09 f4       	brne	.+2      	; 0x2950 <irReceive+0x3c0>
    294e:	75 c0       	rjmp	.+234    	; 0x2a3a <irReceive+0x4aa>
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
				node = (MsgNode*)incomingMsgHead;
			}else{
				while(node->next != NULL){
    2950:	d6 01       	movw	r26, r12
    2952:	1a 96       	adiw	r26, 0x0a	; 10
    2954:	8d 91       	ld	r24, X+
    2956:	9c 91       	ld	r25, X
    2958:	1b 97       	sbiw	r26, 0x0b	; 11
    295a:	89 2b       	or	r24, r25
    295c:	51 f0       	breq	.+20     	; 0x2972 <irReceive+0x3e2>
					node = node->next;
    295e:	d6 01       	movw	r26, r12
    2960:	1a 96       	adiw	r26, 0x0a	; 10
    2962:	cd 90       	ld	r12, X+
    2964:	dc 90       	ld	r13, X
    2966:	1b 97       	sbiw	r26, 0x0b	; 11
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			if(incomingMsgHead==NULL){
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
				node = (MsgNode*)incomingMsgHead;
			}else{
				while(node->next != NULL){
    2968:	f6 01       	movw	r30, r12
    296a:	82 85       	ldd	r24, Z+10	; 0x0a
    296c:	93 85       	ldd	r25, Z+11	; 0x0b
    296e:	89 2b       	or	r24, r25
    2970:	b1 f7       	brne	.-20     	; 0x295e <irReceive+0x3ce>
					node = node->next;
				}
				node->next = (MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2972:	88 e3       	ldi	r24, 0x38	; 56
    2974:	8c 9f       	mul	r24, r28
    2976:	f0 01       	movw	r30, r0
    2978:	8d 9f       	mul	r24, r29
    297a:	f0 0d       	add	r31, r0
    297c:	11 24       	eor	r1, r1
    297e:	e3 50       	subi	r30, 0x03	; 3
    2980:	fc 4d       	sbci	r31, 0xDC	; 220
    2982:	86 a9       	ldd	r24, Z+54	; 0x36
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2984:	ff b6       	in	r15, 0x3f	; 63
    2986:	f8 94       	cli
		tmp = malloc(size);
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0d 96       	adiw	r24, 0x0d	; 13
    298c:	0e 94 47 49 	call	0x928e	; 0x928e <malloc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2990:	ff be       	out	0x3f, r15	; 63
    2992:	d6 01       	movw	r26, r12
    2994:	1a 96       	adiw	r26, 0x0a	; 10
    2996:	8d 93       	st	X+, r24
    2998:	9c 93       	st	X, r25
    299a:	1b 97       	sbiw	r26, 0x0b	; 11
				node = node->next;
    299c:	1a 96       	adiw	r26, 0x0a	; 10
    299e:	ed 90       	ld	r14, X+
    29a0:	fc 90       	ld	r15, X
    29a2:	1b 97       	sbiw	r26, 0x0b	; 11
			}
			char* dataAddr = ((char*)node + sizeof(MsgNode));
    29a4:	47 01       	movw	r8, r14
    29a6:	bd e0       	ldi	r27, 0x0D	; 13
    29a8:	8b 0e       	add	r8, r27
    29aa:	91 1c       	adc	r9, r1
			memcpy(dataAddr, (const void*)ir_rxtx[dir].buf, ir_rxtx[dir].data_length);
    29ac:	88 e3       	ldi	r24, 0x38	; 56
    29ae:	8c 9f       	mul	r24, r28
    29b0:	b0 01       	movw	r22, r0
    29b2:	8d 9f       	mul	r24, r29
    29b4:	70 0d       	add	r23, r0
    29b6:	11 24       	eor	r1, r1
    29b8:	fb 01       	movw	r30, r22
    29ba:	e3 50       	subi	r30, 0x03	; 3
    29bc:	fc 4d       	sbci	r31, 0xDC	; 220
    29be:	6f 01       	movw	r12, r30
    29c0:	46 a9       	ldd	r20, Z+54	; 0x36
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	65 5f       	subi	r22, 0xF5	; 245
    29c6:	7b 4d       	sbci	r23, 0xDB	; 219
    29c8:	c4 01       	movw	r24, r8
    29ca:	0e 94 9f 4c 	call	0x993e	; 0x993e <memcpy>
			node->msg			= dataAddr;
    29ce:	d7 01       	movw	r26, r14
    29d0:	18 96       	adiw	r26, 0x08	; 8
    29d2:	8d 92       	st	X+, r8
    29d4:	9c 92       	st	X, r9
    29d6:	19 97       	sbiw	r26, 0x09	; 9
			node->arrivalTime	= ir_rxtx[dir].last_byte;
    29d8:	f6 01       	movw	r30, r12
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	a2 81       	ldd	r26, Z+2	; 0x02
    29e0:	b3 81       	ldd	r27, Z+3	; 0x03
    29e2:	f7 01       	movw	r30, r14
    29e4:	80 83       	st	Z, r24
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	a2 83       	std	Z+2, r26	; 0x02
    29ea:	b3 83       	std	Z+3, r27	; 0x03
			node->length		= ir_rxtx[dir].data_length;
    29ec:	d6 01       	movw	r26, r12
    29ee:	d6 96       	adiw	r26, 0x36	; 54
    29f0:	8c 91       	ld	r24, X
    29f2:	d6 97       	sbiw	r26, 0x36	; 54
    29f4:	84 87       	std	Z+12, r24	; 0x0c
			node->senderID		= ir_rxtx[dir].senderID;
    29f6:	16 96       	adiw	r26, 0x06	; 6
    29f8:	8d 91       	ld	r24, X+
    29fa:	9c 91       	ld	r25, X
    29fc:	17 97       	sbiw	r26, 0x07	; 7
    29fe:	84 83       	std	Z+4, r24	; 0x04
    2a00:	95 83       	std	Z+5, r25	; 0x05
			node->crc			= ir_rxtx[dir].calc_crc;
    2a02:	1c 96       	adiw	r26, 0x0c	; 12
    2a04:	8d 91       	ld	r24, X+
    2a06:	9c 91       	ld	r25, X
    2a08:	1d 97       	sbiw	r26, 0x0d	; 13
    2a0a:	86 83       	std	Z+6, r24	; 0x06
    2a0c:	97 83       	std	Z+7, r25	; 0x07
			node->next			= NULL;
    2a0e:	12 86       	std	Z+10, r1	; 0x0a
    2a10:	13 86       	std	Z+11, r1	; 0x0b
			memoryConsumedByBuffer += (sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2a12:	d6 96       	adiw	r26, 0x36	; 54
    2a14:	2c 91       	ld	r18, X
    2a16:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <memoryConsumedByBuffer>
    2a1a:	90 91 e6 23 	lds	r25, 0x23E6	; 0x8023e6 <memoryConsumedByBuffer+0x1>
    2a1e:	0d 96       	adiw	r24, 0x0d	; 13
    2a20:	82 0f       	add	r24, r18
    2a22:	91 1d       	adc	r25, r1
    2a24:	80 93 e5 23 	sts	0x23E5, r24	; 0x8023e5 <memoryConsumedByBuffer>
    2a28:	90 93 e6 23 	sts	0x23E6, r25	; 0x8023e6 <memoryConsumedByBuffer+0x1>
			numWaitingMsgs++;
    2a2c:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <numWaitingMsgs>
    2a30:	8f 5f       	subi	r24, 0xFF	; 255
    2a32:	80 93 fa 23 	sts	0x23FA, r24	; 0x8023fa <numWaitingMsgs>
    2a36:	bf be       	out	0x3f, r11	; 63
    __asm__ volatile ("" ::: "memory");
    2a38:	8e ce       	rjmp	.-740    	; 0x2756 <irReceive+0x1c6>
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
	}else{
		volatile MsgNode* node = incomingMsgHead;
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			if(incomingMsgHead==NULL){
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2a3a:	f7 01       	movw	r30, r14
    2a3c:	86 a9       	ldd	r24, Z+54	; 0x36
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2a3e:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a40:	f8 94       	cli
		tmp = malloc(size);
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0d 96       	adiw	r24, 0x0d	; 13
    2a46:	0e 94 47 49 	call	0x928e	; 0x928e <malloc>
    2a4a:	7c 01       	movw	r14, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a4c:	df be       	out	0x3f, r13	; 63
    2a4e:	80 93 7f 25 	sts	0x257F, r24	; 0x80257f <incomingMsgHead>
    2a52:	90 93 80 25 	sts	0x2580, r25	; 0x802580 <incomingMsgHead+0x1>
    2a56:	a6 cf       	rjmp	.-180    	; 0x29a4 <irReceive+0x414>
	const uint8_t selfSender  = ir_rxtx[dir].senderID == getDropletID();
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
			if(notTimed){
    2a58:	cc 20       	and	r12, r12
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <irReceive+0x4ce>
    2a5c:	0e c1       	rjmp	.+540    	; 0x2c7a <irReceive+0x6ea>
				receivedIrCmd(dir);
			}else{
				switch(ir_rxtx[dir].data_length){
    2a5e:	86 a9       	ldd	r24, Z+54	; 0x36
    2a60:	88 23       	and	r24, r24
    2a62:	09 f4       	brne	.+2      	; 0x2a66 <irReceive+0x4d6>
    2a64:	6a c0       	rjmp	.+212    	; 0x2b3a <irReceive+0x5aa>
    2a66:	81 30       	cpi	r24, 0x01	; 1
    2a68:	09 f0       	breq	.+2      	; 0x2a6c <irReceive+0x4dc>
    2a6a:	75 ce       	rjmp	.-790    	; 0x2756 <irReceive+0x1c6>
					case 0: receivedIrSyncCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
					case 1: receivedRnbCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
    2a6c:	c6 80       	ldd	r12, Z+6	; 0x06
    2a6e:	d7 80       	ldd	r13, Z+7	; 0x07
    2a70:	80 80       	ld	r8, Z
    2a72:	91 80       	ldd	r9, Z+1	; 0x01
    2a74:	a2 80       	ldd	r10, Z+2	; 0x02
    2a76:	b3 80       	ldd	r11, Z+3	; 0x03
    2a78:	e0 84       	ldd	r14, Z+8	; 0x08
    2a7a:	f1 84       	ldd	r15, Z+9	; 0x09
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
	uint32_t rnbCmdSentTime = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2a7c:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a7e:	f8 94       	cli
		if(!processing_rnb_flag && (irIsBusy(ALL_DIRS)<8)){
    2a80:	80 91 f9 23 	lds	r24, 0x23F9	; 0x8023f9 <processing_rnb_flag>
    2a84:	81 11       	cpse	r24, r1
    2a86:	f4 c0       	rjmp	.+488    	; 0x2c70 <irReceive+0x6e0>
    2a88:	8f e3       	ldi	r24, 0x3F	; 63
    2a8a:	0e 94 2d 11 	call	0x225a	; 0x225a <irIsBusy>
    2a8e:	88 30       	cpi	r24, 0x08	; 8
    2a90:	08 f0       	brcs	.+2      	; 0x2a94 <irReceive+0x504>
    2a92:	ee c0       	rjmp	.+476    	; 0x2c70 <irReceive+0x6e0>
			if(delay!=0xFFFF){
    2a94:	ff ef       	ldi	r31, 0xFF	; 255
    2a96:	ef 16       	cp	r14, r31
    2a98:	ff 06       	cpc	r15, r31
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <irReceive+0x50e>
    2a9c:	e9 c0       	rjmp	.+466    	; 0x2c70 <irReceive+0x6e0>
				rnbCmdID = senderID;
    2a9e:	c0 92 81 25 	sts	0x2581, r12	; 0x802581 <rnbCmdID>
    2aa2:	d0 92 82 25 	sts	0x2582, r13	; 0x802582 <rnbCmdID+0x1>
				//printf("%04X: %hu\r\n", rnbCmdID, delay+5);			
				if(delay<5) delay = 20-delay;
    2aa6:	25 e0       	ldi	r18, 0x05	; 5
    2aa8:	e2 16       	cp	r14, r18
    2aaa:	f1 04       	cpc	r15, r1
    2aac:	30 f4       	brcc	.+12     	; 0x2aba <irReceive+0x52a>
    2aae:	84 e1       	ldi	r24, 0x14	; 20
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	ac 01       	movw	r20, r24
    2ab4:	4e 19       	sub	r20, r14
    2ab6:	5f 09       	sbc	r21, r15
    2ab8:	7a 01       	movw	r14, r20
				rnbCmdSentTime = last_byte-(delay+5);
    2aba:	55 e0       	ldi	r21, 0x05	; 5
    2abc:	e5 0e       	add	r14, r21
    2abe:	f1 1c       	adc	r15, r1
    2ac0:	8e 18       	sub	r8, r14
    2ac2:	9f 08       	sbc	r9, r15
    2ac4:	a1 08       	sbc	r10, r1
    2ac6:	b1 08       	sbc	r11, r1
				processThisRNB = 1;
				processing_rnb_flag = 1;
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	80 93 f9 23 	sts	0x23F9, r24	; 0x8023f9 <processing_rnb_flag>
				hpIrBlock_bm = 0x3F;
    2ace:	8f e3       	ldi	r24, 0x3F	; 63
    2ad0:	80 93 bf 23 	sts	0x23BF, r24	; 0x8023bf <hpIrBlock_bm>
			if(delay!=0xFFFF){
				rnbCmdID = senderID;
				//printf("%04X: %hu\r\n", rnbCmdID, delay+5);			
				if(delay<5) delay = 20-delay;
				rnbCmdSentTime = last_byte-(delay+5);
				processThisRNB = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ad6:	7f be       	out	0x3f, r7	; 63
				processing_rnb_flag = 1;
				hpIrBlock_bm = 0x3F;
			}
		}
	}
	if(processThisRNB){
    2ad8:	88 23       	and	r24, r24
    2ada:	09 f4       	brne	.+2      	; 0x2ade <irReceive+0x54e>
    2adc:	3c ce       	rjmp	.-904    	; 0x2756 <irReceive+0x1c6>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2ade:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ae0:	f8 94       	cli
    2ae2:	a6 e0       	ldi	r26, 0x06	; 6
    2ae4:	b0 e2       	ldi	r27, 0x20	; 32
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
    2aea:	48 e3       	ldi	r20, 0x38	; 56
    2aec:	07 c0       	rjmp	.+14     	; 0x2afc <irReceive+0x56c>
    2aee:	2f 5f       	subi	r18, 0xFF	; 255
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	12 96       	adiw	r26, 0x02	; 2
			}
		}
	}
	if(processThisRNB){
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t dir=0;dir<6;dir++){
    2af4:	26 30       	cpi	r18, 0x06	; 6
    2af6:	31 05       	cpc	r19, r1
    2af8:	09 f4       	brne	.+2      	; 0x2afc <irReceive+0x56c>
    2afa:	31 c1       	rjmp	.+610    	; 0x2d5e <irReceive+0x7ce>
				if(ir_rxtx[dir].senderID==senderID){
    2afc:	42 9f       	mul	r20, r18
    2afe:	f0 01       	movw	r30, r0
    2b00:	43 9f       	mul	r20, r19
    2b02:	f0 0d       	add	r31, r0
    2b04:	11 24       	eor	r1, r1
    2b06:	e3 50       	subi	r30, 0x03	; 3
    2b08:	fc 4d       	sbci	r31, 0xDC	; 220
    2b0a:	86 81       	ldd	r24, Z+6	; 0x06
    2b0c:	97 81       	ldd	r25, Z+7	; 0x07
    2b0e:	c8 16       	cp	r12, r24
    2b10:	d9 06       	cpc	r13, r25
    2b12:	69 f7       	brne	.-38     	; 0x2aee <irReceive+0x55e>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2b14:	14 82       	std	Z+4, r1	; 0x04
    2b16:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2b18:	16 82       	std	Z+6, r1	; 0x06
    2b1a:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2b1c:	10 86       	std	Z+8, r1	; 0x08
    2b1e:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2b20:	12 86       	std	Z+10, r1	; 0x0a
    2b22:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2b24:	14 86       	std	Z+12, r1	; 0x0c
    2b26:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2b28:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2b2a:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2b2c:	ed 91       	ld	r30, X+
    2b2e:	fc 91       	ld	r31, X
    2b30:	11 97       	sbiw	r26, 0x01	; 1
    2b32:	84 81       	ldd	r24, Z+4	; 0x04
    2b34:	80 61       	ori	r24, 0x10	; 16
    2b36:	84 83       	std	Z+4, r24	; 0x04
    2b38:	da cf       	rjmp	.-76     	; 0x2aee <irReceive+0x55e>
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
			if(notTimed){
				receivedIrCmd(dir);
			}else{
				switch(ir_rxtx[dir].data_length){
					case 0: receivedIrSyncCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
    2b3a:	c6 80       	ldd	r12, Z+6	; 0x06
    2b3c:	d7 80       	ldd	r13, Z+7	; 0x07
    2b3e:	80 80       	ld	r8, Z
    2b40:	91 80       	ldd	r9, Z+1	; 0x01
    2b42:	a2 80       	ldd	r10, Z+2	; 0x02
    2b44:	b3 80       	ldd	r11, Z+3	; 0x03
    2b46:	e0 84       	ldd	r14, Z+8	; 0x08
    2b48:	f1 84       	ldd	r15, Z+9	; 0x09
}

static void receivedIrSyncCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisFFSync = 0;
	uint16_t count;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2b4a:	9f b7       	in	r25, 0x3f	; 63
    2b4c:	f8 94       	cli
		if(!processingFFsyncFlag){
    2b4e:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <processingFFsyncFlag>
    2b52:	81 11       	cpse	r24, r1
    2b54:	fc c0       	rjmp	.+504    	; 0x2d4e <irReceive+0x7be>
			count = TCE0.CNT;
    2b56:	60 90 20 0a 	lds	r6, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    2b5a:	70 90 21 0a 	lds	r7, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
			if(delay!=0xFFFF){
    2b5e:	ff ef       	ldi	r31, 0xFF	; 255
    2b60:	ef 16       	cp	r14, r31
    2b62:	ff 06       	cpc	r15, r31
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <irReceive+0x5d8>
    2b66:	f3 c0       	rjmp	.+486    	; 0x2d4e <irReceive+0x7be>
				processThisFFSync = 1;
				processingFFsyncFlag = 1;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <processingFFsyncFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b6e:	9f bf       	out	0x3f, r25	; 63
			}
		}
	}
	if(processThisFFSync){
    2b70:	88 23       	and	r24, r24
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <irReceive+0x5e6>
    2b74:	f0 cd       	rjmp	.-1056   	; 0x2756 <irReceive+0x1c6>
		//printf("senderID: %04X\tdelay: %hu\r\n", ir_rxtx[dir].sender_ID, delay);
		delay = delay+5+(getTime()-last_byte); //The time is measured right before sending and is the last two bytes of the message. Our baud rate means that it takes 5ms to send two bytes.
    2b76:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    2b7a:	97 01       	movw	r18, r14
    2b7c:	2b 5f       	subi	r18, 0xFB	; 251
    2b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b80:	28 19       	sub	r18, r8
    2b82:	39 09       	sbc	r19, r9
    2b84:	62 0f       	add	r22, r18
    2b86:	73 1f       	adc	r23, r19

ObsQueue* obsStart;

inline void updateFireflyCounter(volatile uint16_t count, volatile uint16_t delay){
	//printf("%u\r\n", delay);
	uint16_t theDelay = delay*FFSYNC_MS_CONVERSION_FACTOR;
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <__floatunsisf>
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	4a ef       	ldi	r20, 0xFA	; 250
    2b96:	50 e4       	ldi	r21, 0x40	; 64
    2b98:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    2b9c:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
	uint16_t obs;
	ObsQueue* node;
	if(count<=theDelay){
    2ba0:	66 15       	cp	r22, r6
    2ba2:	77 05       	cpc	r23, r7
    2ba4:	08 f4       	brcc	.+2      	; 0x2ba8 <irReceive+0x618>
    2ba6:	0b c1       	rjmp	.+534    	; 0x2dbe <irReceive+0x82e>
		obs = count + (FFSYNC_FULL_PERIOD-theDelay);
    2ba8:	2f eb       	ldi	r18, 0xBF	; 191
    2baa:	62 1a       	sub	r6, r18
    2bac:	22 e6       	ldi	r18, 0x62	; 98
    2bae:	72 0a       	sbc	r7, r18
    2bb0:	66 1a       	sub	r6, r22
    2bb2:	77 0a       	sbc	r7, r23
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2bb4:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2bb6:	f8 94       	cli
		tmp = malloc(size);
    2bb8:	86 e0       	ldi	r24, 0x06	; 6
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	0e 94 47 49 	call	0x928e	; 0x928e <malloc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2bc0:	ff be       	out	0x3f, r15	; 63
	}else{
		obs = count - theDelay;
	}
	node = (ObsQueue*)myMalloc(sizeof(ObsQueue));
	if(node==NULL){
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	41 f1       	breq	.+80     	; 0x2c16 <irReceive+0x686>
		return;
	}
	ObsQueue* curr = obsStart->prev;
    2bc6:	e0 91 c1 23 	lds	r30, 0x23C1	; 0x8023c1 <obsStart>
    2bca:	f0 91 c2 23 	lds	r31, 0x23C2	; 0x8023c2 <obsStart+0x1>
    2bce:	04 80       	ldd	r0, Z+4	; 0x04
    2bd0:	f5 81       	ldd	r31, Z+5	; 0x05
    2bd2:	e0 2d       	mov	r30, r0
	while(obs < curr->obs){
    2bd4:	20 81       	ld	r18, Z
    2bd6:	31 81       	ldd	r19, Z+1	; 0x01
    2bd8:	62 16       	cp	r6, r18
    2bda:	73 06       	cpc	r7, r19
    2bdc:	40 f4       	brcc	.+16     	; 0x2bee <irReceive+0x65e>
		curr = curr->prev;
    2bde:	04 80       	ldd	r0, Z+4	; 0x04
    2be0:	f5 81       	ldd	r31, Z+5	; 0x05
    2be2:	e0 2d       	mov	r30, r0
	node = (ObsQueue*)myMalloc(sizeof(ObsQueue));
	if(node==NULL){
		return;
	}
	ObsQueue* curr = obsStart->prev;
	while(obs < curr->obs){
    2be4:	20 81       	ld	r18, Z
    2be6:	31 81       	ldd	r19, Z+1	; 0x01
    2be8:	62 16       	cp	r6, r18
    2bea:	73 06       	cpc	r7, r19
    2bec:	c0 f3       	brcs	.-16     	; 0x2bde <irReceive+0x64e>
		curr = curr->prev;
	}
	(curr->next)->prev = node;
    2bee:	22 81       	ldd	r18, Z+2	; 0x02
    2bf0:	33 81       	ldd	r19, Z+3	; 0x03
    2bf2:	d9 01       	movw	r26, r18
    2bf4:	14 96       	adiw	r26, 0x04	; 4
    2bf6:	8d 93       	st	X+, r24
    2bf8:	9c 93       	st	X, r25
    2bfa:	15 97       	sbiw	r26, 0x05	; 5
	node->next = curr->next;
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	12 96       	adiw	r26, 0x02	; 2
    2c00:	2d 93       	st	X+, r18
    2c02:	3c 93       	st	X, r19
    2c04:	13 97       	sbiw	r26, 0x03	; 3
	node->prev = curr;
    2c06:	14 96       	adiw	r26, 0x04	; 4
    2c08:	ed 93       	st	X+, r30
    2c0a:	fc 93       	st	X, r31
    2c0c:	15 97       	sbiw	r26, 0x05	; 5
	curr->next = node;
    2c0e:	82 83       	std	Z+2, r24	; 0x02
    2c10:	93 83       	std	Z+3, r25	; 0x03
			
	node->obs = obs;
    2c12:	6d 92       	st	X+, r6
    2c14:	7c 92       	st	X, r7
		updateFireflyCounter(count, delay);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2c16:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c18:	f8 94       	cli
    2c1a:	a6 e0       	ldi	r26, 0x06	; 6
    2c1c:	b0 e2       	ldi	r27, 0x20	; 32
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
    2c22:	48 e3       	ldi	r20, 0x38	; 56
    2c24:	06 c0       	rjmp	.+12     	; 0x2c32 <irReceive+0x6a2>
    2c26:	01 96       	adiw	r24, 0x01	; 1
    2c28:	12 96       	adiw	r26, 0x02	; 2
	if(processThisFFSync){
		//printf("senderID: %04X\tdelay: %hu\r\n", ir_rxtx[dir].sender_ID, delay);
		delay = delay+5+(getTime()-last_byte); //The time is measured right before sending and is the last two bytes of the message. Our baud rate means that it takes 5ms to send two bytes.
		updateFireflyCounter(count, delay);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t dir=0;dir<6;dir++){
    2c2a:	86 30       	cpi	r24, 0x06	; 6
    2c2c:	91 05       	cpc	r25, r1
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <irReceive+0x6a2>
    2c30:	92 c0       	rjmp	.+292    	; 0x2d56 <irReceive+0x7c6>
				if(ir_rxtx[dir].senderID==senderID){
    2c32:	48 9f       	mul	r20, r24
    2c34:	f0 01       	movw	r30, r0
    2c36:	49 9f       	mul	r20, r25
    2c38:	f0 0d       	add	r31, r0
    2c3a:	11 24       	eor	r1, r1
    2c3c:	e3 50       	subi	r30, 0x03	; 3
    2c3e:	fc 4d       	sbci	r31, 0xDC	; 220
    2c40:	26 81       	ldd	r18, Z+6	; 0x06
    2c42:	37 81       	ldd	r19, Z+7	; 0x07
    2c44:	c2 16       	cp	r12, r18
    2c46:	d3 06       	cpc	r13, r19
    2c48:	71 f7       	brne	.-36     	; 0x2c26 <irReceive+0x696>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2c4a:	14 82       	std	Z+4, r1	; 0x04
    2c4c:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2c4e:	16 82       	std	Z+6, r1	; 0x06
    2c50:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2c52:	10 86       	std	Z+8, r1	; 0x08
    2c54:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2c56:	12 86       	std	Z+10, r1	; 0x0a
    2c58:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2c5a:	14 86       	std	Z+12, r1	; 0x0c
    2c5c:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2c5e:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2c60:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2c62:	ed 91       	ld	r30, X+
    2c64:	fc 91       	ld	r31, X
    2c66:	11 97       	sbiw	r26, 0x01	; 1
    2c68:	24 81       	ldd	r18, Z+4	; 0x04
    2c6a:	20 61       	ori	r18, 0x10	; 16
    2c6c:	24 83       	std	Z+4, r18	; 0x04
    2c6e:	db cf       	rjmp	.-74     	; 0x2c26 <irReceive+0x696>
	//printf("F\r\n");
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
	uint32_t rnbCmdSentTime = 0;
    2c70:	81 2c       	mov	r8, r1
    2c72:	91 2c       	mov	r9, r1
    2c74:	54 01       	movw	r10, r8
	}
	//printf("F\r\n");
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	2e cf       	rjmp	.-420    	; 0x2ad6 <irReceive+0x546>
	}
}

static void receivedIrCmd(uint8_t dir){
	uint8_t processThisCommand = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2c7a:	cf b6       	in	r12, 0x3f	; 63
    2c7c:	f8 94       	cli
		if(!processingCmdFlag){
    2c7e:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <processingCmdFlag>
    2c82:	81 11       	cpse	r24, r1
    2c84:	66 c0       	rjmp	.+204    	; 0x2d52 <irReceive+0x7c2>
			processThisCommand = 1;
			memcpy((void*)cmdBuffer, (char*)ir_rxtx[dir].buf, ir_rxtx[dir].data_length);
    2c86:	46 a9       	ldd	r20, Z+54	; 0x36
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	65 5f       	subi	r22, 0xF5	; 245
    2c8c:	7b 4d       	sbci	r23, 0xDB	; 219
    2c8e:	8d e2       	ldi	r24, 0x2D	; 45
    2c90:	92 e2       	ldi	r25, 0x22	; 34
    2c92:	0e 94 9f 4c 	call	0x993e	; 0x993e <memcpy>
			cmdBuffer[ir_rxtx[dir].data_length]='\0';
    2c96:	d7 01       	movw	r26, r14
    2c98:	d6 96       	adiw	r26, 0x36	; 54
    2c9a:	ec 91       	ld	r30, X
    2c9c:	d6 97       	sbiw	r26, 0x36	; 54
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	e3 5d       	subi	r30, 0xD3	; 211
    2ca2:	fd 4d       	sbci	r31, 0xDD	; 221
    2ca4:	10 82       	st	Z, r1
			cmdLength = ir_rxtx[dir].data_length;
    2ca6:	d6 96       	adiw	r26, 0x36	; 54
    2ca8:	8c 91       	ld	r24, X
    2caa:	d6 97       	sbiw	r26, 0x36	; 54
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	80 93 6d 22 	sts	0x226D, r24	; 0x80226d <cmdLength>
    2cb2:	90 93 6e 22 	sts	0x226E, r25	; 0x80226e <cmdLength+0x1>
			cmdArrivalTime = ir_rxtx[dir].last_byte;	//This is a 'global' value, referenced by other *.c files.
    2cb6:	8d 91       	ld	r24, X+
    2cb8:	9d 91       	ld	r25, X+
    2cba:	0d 90       	ld	r0, X+
    2cbc:	bc 91       	ld	r27, X
    2cbe:	a0 2d       	mov	r26, r0
    2cc0:	80 93 8d 25 	sts	0x258D, r24	; 0x80258d <cmdArrivalTime>
    2cc4:	90 93 8e 25 	sts	0x258E, r25	; 0x80258e <cmdArrivalTime+0x1>
    2cc8:	a0 93 8f 25 	sts	0x258F, r26	; 0x80258f <cmdArrivalTime+0x2>
    2ccc:	b0 93 90 25 	sts	0x2590, r27	; 0x802590 <cmdArrivalTime+0x3>
			cmdSenderId = ir_rxtx[dir].senderID;		//This is a 'global' value, referenced by other *.c files.
    2cd0:	f7 01       	movw	r30, r14
    2cd2:	86 81       	ldd	r24, Z+6	; 0x06
    2cd4:	97 81       	ldd	r25, Z+7	; 0x07
    2cd6:	80 93 fb 23 	sts	0x23FB, r24	; 0x8023fb <cmdSenderId>
    2cda:	90 93 fc 23 	sts	0x23FC, r25	; 0x8023fc <cmdSenderId+0x1>
			cmdArrivalDir = dir;
    2cde:	d0 92 dc 23 	sts	0x23DC, r13	; 0x8023dc <cmdArrivalDir>
			processingCmdFlag = 1;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	80 93 70 22 	sts	0x2270, r24	; 0x802270 <processingCmdFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ce8:	cf be       	out	0x3f, r12	; 63
		}
	}
	if(processThisCommand){
    2cea:	88 23       	and	r24, r24
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <irReceive+0x760>
    2cee:	33 cd       	rjmp	.-1434   	; 0x2756 <irReceive+0x1c6>
		scheduleTask(5, handleCmdWrapper, NULL);
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	4c e5       	ldi	r20, 0x5C	; 92
    2cf6:	5e e0       	ldi	r21, 0x0E	; 14
    2cf8:	65 e0       	ldi	r22, 0x05	; 5
    2cfa:	70 e0       	ldi	r23, 0x00	; 0
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	0e 94 3c 33 	call	0x6678	; 0x6678 <scheduleTask>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2d04:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d06:	f8 94       	cli
    2d08:	a6 e0       	ldi	r26, 0x06	; 6
    2d0a:	b0 e2       	ldi	r27, 0x20	; 32
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2d10:	38 e3       	ldi	r19, 0x38	; 56
    2d12:	38 9f       	mul	r19, r24
    2d14:	f0 01       	movw	r30, r0
    2d16:	39 9f       	mul	r19, r25
    2d18:	f0 0d       	add	r31, r0
    2d1a:	11 24       	eor	r1, r1
    2d1c:	e3 50       	subi	r30, 0x03	; 3
    2d1e:	fc 4d       	sbci	r31, 0xDC	; 220
    2d20:	14 82       	std	Z+4, r1	; 0x04
    2d22:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2d24:	16 82       	std	Z+6, r1	; 0x06
    2d26:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2d28:	10 86       	std	Z+8, r1	; 0x08
    2d2a:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2d2c:	12 86       	std	Z+10, r1	; 0x0a
    2d2e:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2d30:	14 86       	std	Z+12, r1	; 0x0c
    2d32:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2d34:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2d36:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2d38:	ed 91       	ld	r30, X+
    2d3a:	fd 91       	ld	r31, X+
    2d3c:	24 81       	ldd	r18, Z+4	; 0x04
    2d3e:	20 61       	ori	r18, 0x10	; 16
    2d40:	24 83       	std	Z+4, r18	; 0x04
    2d42:	01 96       	adiw	r24, 0x01	; 1
		}
	}
	if(processThisCommand){
		scheduleTask(5, handleCmdWrapper, NULL);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t other_dir=0;other_dir<6;other_dir++){
    2d44:	86 30       	cpi	r24, 0x06	; 6
    2d46:	91 05       	cpc	r25, r1
    2d48:	21 f7       	brne	.-56     	; 0x2d12 <irReceive+0x782>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d4a:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    2d4c:	04 cd       	rjmp	.-1528   	; 0x2756 <irReceive+0x1c6>
		}
	}
}

static void receivedIrSyncCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisFFSync = 0;
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	0e cf       	rjmp	.-484    	; 0x2b6e <irReceive+0x5de>
		handleCompletedMsg(dir);
	}
}

static void receivedIrCmd(uint8_t dir){
	uint8_t processThisCommand = 0;
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	c9 cf       	rjmp	.-110    	; 0x2ce8 <irReceive+0x758>
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
					clearIrBuffer(dir);
				}
			}
			processingFFsyncFlag = 0;
    2d56:	10 92 6f 22 	sts	0x226F, r1	; 0x80226f <processingFFsyncFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d5a:	5f bf       	out	0x3f, r21	; 63
    __asm__ volatile ("" ::: "memory");
    2d5c:	fc cc       	rjmp	.-1544   	; 0x2756 <irReceive+0x1c6>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d5e:	5f bf       	out	0x3f, r21	; 63
				if(ir_rxtx[dir].senderID==senderID){
					clearIrBuffer(dir);
				}
			}
		}
		irRangeMeas(rnbCmdSentTime);	
    2d60:	c5 01       	movw	r24, r10
    2d62:	b4 01       	movw	r22, r8
    2d64:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <irRangeMeas>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2d68:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d6a:	f8 94       	cli
			hpIrBlock_bm = 0;
    2d6c:	10 92 bf 23 	sts	0x23BF, r1	; 0x8023bf <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d70:	8f bf       	out	0x3f, r24	; 63
		}
		scheduleTask(10, useRnbData, NULL);
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	4f ec       	ldi	r20, 0xCF	; 207
    2d78:	58 e2       	ldi	r21, 0x28	; 40
    2d7a:	6a e0       	ldi	r22, 0x0A	; 10
    2d7c:	70 e0       	ldi	r23, 0x00	; 0
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	0e 94 3c 33 	call	0x6678	; 0x6678 <scheduleTask>
    2d86:	e7 cc       	rjmp	.-1586   	; 0x2756 <irReceive+0x1c6>
	   } while (busy);
}

static void addMsgToMsgQueue(uint8_t dir){
	if(ir_rxtx[dir].data_length == 0){
		printf_P(PSTR("ERROR! Should NOT be adding 0-length message to queue.\r\n"));
    2d88:	87 e2       	ldi	r24, 0x27	; 39
    2d8a:	96 e0       	ldi	r25, 0x06	; 6
    2d8c:	9f 93       	push	r25
    2d8e:	8f 93       	push	r24
    2d90:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	de cc       	rjmp	.-1604   	; 0x2756 <irReceive+0x1c6>
	}else if(ir_rxtx[dir].data_length > IR_BUFFER_SIZE){
		printf_P(PSTR("ERROR! Should NOT be adding a message with length greater than buffer size to queue.\r\n"));
    2d9a:	80 ed       	ldi	r24, 0xD0	; 208
    2d9c:	95 e0       	ldi	r25, 0x05	; 5
    2d9e:	9f 93       	push	r25
    2da0:	8f 93       	push	r24
    2da2:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	d5 cc       	rjmp	.-1622   	; 0x2756 <irReceive+0x1c6>
	}else if(memoryConsumedByBuffer > 500){
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
    2dac:	82 e6       	ldi	r24, 0x62	; 98
    2dae:	95 e0       	ldi	r25, 0x05	; 5
    2db0:	9f 93       	push	r25
    2db2:	8f 93       	push	r24
    2db4:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	cc cc       	rjmp	.-1640   	; 0x2756 <irReceive+0x1c6>
	uint16_t obs;
	ObsQueue* node;
	if(count<=theDelay){
		obs = count + (FFSYNC_FULL_PERIOD-theDelay);
	}else{
		obs = count - theDelay;
    2dbe:	66 1a       	sub	r6, r22
    2dc0:	77 0a       	sbc	r7, r23
    2dc2:	f8 ce       	rjmp	.-528    	; 0x2bb4 <irReceive+0x624>

00002dc4 <__vector_25>:
	}
	return receiving | transmitting | timed_cmd | hp_block;
}

// ISRs for IR channel 0
ISR( USARTC0_RXC_vect ) { irReceive(0); }
    2dc4:	1f 92       	push	r1
    2dc6:	0f 92       	push	r0
    2dc8:	0f b6       	in	r0, 0x3f	; 63
    2dca:	0f 92       	push	r0
    2dcc:	11 24       	eor	r1, r1
    2dce:	0b b6       	in	r0, 0x3b	; 59
    2dd0:	0f 92       	push	r0
    2dd2:	2f 93       	push	r18
    2dd4:	3f 93       	push	r19
    2dd6:	4f 93       	push	r20
    2dd8:	5f 93       	push	r21
    2dda:	6f 93       	push	r22
    2ddc:	7f 93       	push	r23
    2dde:	8f 93       	push	r24
    2de0:	9f 93       	push	r25
    2de2:	af 93       	push	r26
    2de4:	bf 93       	push	r27
    2de6:	ef 93       	push	r30
    2de8:	ff 93       	push	r31
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	0e 94 c8 12 	call	0x2590	; 0x2590 <irReceive>
    2df0:	ff 91       	pop	r31
    2df2:	ef 91       	pop	r30
    2df4:	bf 91       	pop	r27
    2df6:	af 91       	pop	r26
    2df8:	9f 91       	pop	r25
    2dfa:	8f 91       	pop	r24
    2dfc:	7f 91       	pop	r23
    2dfe:	6f 91       	pop	r22
    2e00:	5f 91       	pop	r21
    2e02:	4f 91       	pop	r20
    2e04:	3f 91       	pop	r19
    2e06:	2f 91       	pop	r18
    2e08:	0f 90       	pop	r0
    2e0a:	0b be       	out	0x3b, r0	; 59
    2e0c:	0f 90       	pop	r0
    2e0e:	0f be       	out	0x3f, r0	; 63
    2e10:	0f 90       	pop	r0
    2e12:	1f 90       	pop	r1
    2e14:	18 95       	reti

00002e16 <__vector_27>:
ISR( USARTC0_TXC_vect ) { irTransmitComplete(0); }
    2e16:	1f 92       	push	r1
    2e18:	0f 92       	push	r0
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	0f 92       	push	r0
    2e1e:	11 24       	eor	r1, r1
    2e20:	0b b6       	in	r0, 0x3b	; 59
    2e22:	0f 92       	push	r0
    2e24:	2f 93       	push	r18
    2e26:	3f 93       	push	r19
    2e28:	4f 93       	push	r20
    2e2a:	5f 93       	push	r21
    2e2c:	6f 93       	push	r22
    2e2e:	7f 93       	push	r23
    2e30:	8f 93       	push	r24
    2e32:	9f 93       	push	r25
    2e34:	af 93       	push	r26
    2e36:	bf 93       	push	r27
    2e38:	ef 93       	push	r30
    2e3a:	ff 93       	push	r31
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <irTransmitComplete>
    2e42:	ff 91       	pop	r31
    2e44:	ef 91       	pop	r30
    2e46:	bf 91       	pop	r27
    2e48:	af 91       	pop	r26
    2e4a:	9f 91       	pop	r25
    2e4c:	8f 91       	pop	r24
    2e4e:	7f 91       	pop	r23
    2e50:	6f 91       	pop	r22
    2e52:	5f 91       	pop	r21
    2e54:	4f 91       	pop	r20
    2e56:	3f 91       	pop	r19
    2e58:	2f 91       	pop	r18
    2e5a:	0f 90       	pop	r0
    2e5c:	0b be       	out	0x3b, r0	; 59
    2e5e:	0f 90       	pop	r0
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	0f 90       	pop	r0
    2e64:	1f 90       	pop	r1
    2e66:	18 95       	reti

00002e68 <__vector_26>:
ISR( USARTC0_DRE_vect ) { irTransmit(0); }
    2e68:	1f 92       	push	r1
    2e6a:	0f 92       	push	r0
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	0f 92       	push	r0
    2e70:	11 24       	eor	r1, r1
    2e72:	0b b6       	in	r0, 0x3b	; 59
    2e74:	0f 92       	push	r0
    2e76:	2f 93       	push	r18
    2e78:	3f 93       	push	r19
    2e7a:	4f 93       	push	r20
    2e7c:	5f 93       	push	r21
    2e7e:	6f 93       	push	r22
    2e80:	7f 93       	push	r23
    2e82:	8f 93       	push	r24
    2e84:	9f 93       	push	r25
    2e86:	af 93       	push	r26
    2e88:	bf 93       	push	r27
    2e8a:	ef 93       	push	r30
    2e8c:	ff 93       	push	r31
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <irTransmit>
    2e94:	ff 91       	pop	r31
    2e96:	ef 91       	pop	r30
    2e98:	bf 91       	pop	r27
    2e9a:	af 91       	pop	r26
    2e9c:	9f 91       	pop	r25
    2e9e:	8f 91       	pop	r24
    2ea0:	7f 91       	pop	r23
    2ea2:	6f 91       	pop	r22
    2ea4:	5f 91       	pop	r21
    2ea6:	4f 91       	pop	r20
    2ea8:	3f 91       	pop	r19
    2eaa:	2f 91       	pop	r18
    2eac:	0f 90       	pop	r0
    2eae:	0b be       	out	0x3b, r0	; 59
    2eb0:	0f 90       	pop	r0
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	0f 90       	pop	r0
    2eb6:	1f 90       	pop	r1
    2eb8:	18 95       	reti

00002eba <__vector_28>:

// ISRs for IR channel 1
ISR( USARTC1_RXC_vect ) { irReceive(1); }
    2eba:	1f 92       	push	r1
    2ebc:	0f 92       	push	r0
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	0f 92       	push	r0
    2ec2:	11 24       	eor	r1, r1
    2ec4:	0b b6       	in	r0, 0x3b	; 59
    2ec6:	0f 92       	push	r0
    2ec8:	2f 93       	push	r18
    2eca:	3f 93       	push	r19
    2ecc:	4f 93       	push	r20
    2ece:	5f 93       	push	r21
    2ed0:	6f 93       	push	r22
    2ed2:	7f 93       	push	r23
    2ed4:	8f 93       	push	r24
    2ed6:	9f 93       	push	r25
    2ed8:	af 93       	push	r26
    2eda:	bf 93       	push	r27
    2edc:	ef 93       	push	r30
    2ede:	ff 93       	push	r31
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	0e 94 c8 12 	call	0x2590	; 0x2590 <irReceive>
    2ee6:	ff 91       	pop	r31
    2ee8:	ef 91       	pop	r30
    2eea:	bf 91       	pop	r27
    2eec:	af 91       	pop	r26
    2eee:	9f 91       	pop	r25
    2ef0:	8f 91       	pop	r24
    2ef2:	7f 91       	pop	r23
    2ef4:	6f 91       	pop	r22
    2ef6:	5f 91       	pop	r21
    2ef8:	4f 91       	pop	r20
    2efa:	3f 91       	pop	r19
    2efc:	2f 91       	pop	r18
    2efe:	0f 90       	pop	r0
    2f00:	0b be       	out	0x3b, r0	; 59
    2f02:	0f 90       	pop	r0
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	0f 90       	pop	r0
    2f08:	1f 90       	pop	r1
    2f0a:	18 95       	reti

00002f0c <__vector_30>:
ISR( USARTC1_TXC_vect ) { irTransmitComplete(1); }
    2f0c:	1f 92       	push	r1
    2f0e:	0f 92       	push	r0
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	0f 92       	push	r0
    2f14:	11 24       	eor	r1, r1
    2f16:	0b b6       	in	r0, 0x3b	; 59
    2f18:	0f 92       	push	r0
    2f1a:	2f 93       	push	r18
    2f1c:	3f 93       	push	r19
    2f1e:	4f 93       	push	r20
    2f20:	5f 93       	push	r21
    2f22:	6f 93       	push	r22
    2f24:	7f 93       	push	r23
    2f26:	8f 93       	push	r24
    2f28:	9f 93       	push	r25
    2f2a:	af 93       	push	r26
    2f2c:	bf 93       	push	r27
    2f2e:	ef 93       	push	r30
    2f30:	ff 93       	push	r31
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <irTransmitComplete>
    2f38:	ff 91       	pop	r31
    2f3a:	ef 91       	pop	r30
    2f3c:	bf 91       	pop	r27
    2f3e:	af 91       	pop	r26
    2f40:	9f 91       	pop	r25
    2f42:	8f 91       	pop	r24
    2f44:	7f 91       	pop	r23
    2f46:	6f 91       	pop	r22
    2f48:	5f 91       	pop	r21
    2f4a:	4f 91       	pop	r20
    2f4c:	3f 91       	pop	r19
    2f4e:	2f 91       	pop	r18
    2f50:	0f 90       	pop	r0
    2f52:	0b be       	out	0x3b, r0	; 59
    2f54:	0f 90       	pop	r0
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	0f 90       	pop	r0
    2f5a:	1f 90       	pop	r1
    2f5c:	18 95       	reti

00002f5e <__vector_29>:
ISR( USARTC1_DRE_vect ) { irTransmit(1); }
    2f5e:	1f 92       	push	r1
    2f60:	0f 92       	push	r0
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	0f 92       	push	r0
    2f66:	11 24       	eor	r1, r1
    2f68:	0b b6       	in	r0, 0x3b	; 59
    2f6a:	0f 92       	push	r0
    2f6c:	2f 93       	push	r18
    2f6e:	3f 93       	push	r19
    2f70:	4f 93       	push	r20
    2f72:	5f 93       	push	r21
    2f74:	6f 93       	push	r22
    2f76:	7f 93       	push	r23
    2f78:	8f 93       	push	r24
    2f7a:	9f 93       	push	r25
    2f7c:	af 93       	push	r26
    2f7e:	bf 93       	push	r27
    2f80:	ef 93       	push	r30
    2f82:	ff 93       	push	r31
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <irTransmit>
    2f8a:	ff 91       	pop	r31
    2f8c:	ef 91       	pop	r30
    2f8e:	bf 91       	pop	r27
    2f90:	af 91       	pop	r26
    2f92:	9f 91       	pop	r25
    2f94:	8f 91       	pop	r24
    2f96:	7f 91       	pop	r23
    2f98:	6f 91       	pop	r22
    2f9a:	5f 91       	pop	r21
    2f9c:	4f 91       	pop	r20
    2f9e:	3f 91       	pop	r19
    2fa0:	2f 91       	pop	r18
    2fa2:	0f 90       	pop	r0
    2fa4:	0b be       	out	0x3b, r0	; 59
    2fa6:	0f 90       	pop	r0
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	0f 90       	pop	r0
    2fac:	1f 90       	pop	r1
    2fae:	18 95       	reti

00002fb0 <__vector_88>:

// ISRs for IR channel 2
ISR( USARTD0_RXC_vect ) { irReceive(2); }
    2fb0:	1f 92       	push	r1
    2fb2:	0f 92       	push	r0
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	0f 92       	push	r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	0b b6       	in	r0, 0x3b	; 59
    2fbc:	0f 92       	push	r0
    2fbe:	2f 93       	push	r18
    2fc0:	3f 93       	push	r19
    2fc2:	4f 93       	push	r20
    2fc4:	5f 93       	push	r21
    2fc6:	6f 93       	push	r22
    2fc8:	7f 93       	push	r23
    2fca:	8f 93       	push	r24
    2fcc:	9f 93       	push	r25
    2fce:	af 93       	push	r26
    2fd0:	bf 93       	push	r27
    2fd2:	ef 93       	push	r30
    2fd4:	ff 93       	push	r31
    2fd6:	82 e0       	ldi	r24, 0x02	; 2
    2fd8:	0e 94 c8 12 	call	0x2590	; 0x2590 <irReceive>
    2fdc:	ff 91       	pop	r31
    2fde:	ef 91       	pop	r30
    2fe0:	bf 91       	pop	r27
    2fe2:	af 91       	pop	r26
    2fe4:	9f 91       	pop	r25
    2fe6:	8f 91       	pop	r24
    2fe8:	7f 91       	pop	r23
    2fea:	6f 91       	pop	r22
    2fec:	5f 91       	pop	r21
    2fee:	4f 91       	pop	r20
    2ff0:	3f 91       	pop	r19
    2ff2:	2f 91       	pop	r18
    2ff4:	0f 90       	pop	r0
    2ff6:	0b be       	out	0x3b, r0	; 59
    2ff8:	0f 90       	pop	r0
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	0f 90       	pop	r0
    2ffe:	1f 90       	pop	r1
    3000:	18 95       	reti

00003002 <__vector_90>:
ISR( USARTD0_TXC_vect ) { irTransmitComplete(2); }
    3002:	1f 92       	push	r1
    3004:	0f 92       	push	r0
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	0f 92       	push	r0
    300a:	11 24       	eor	r1, r1
    300c:	0b b6       	in	r0, 0x3b	; 59
    300e:	0f 92       	push	r0
    3010:	2f 93       	push	r18
    3012:	3f 93       	push	r19
    3014:	4f 93       	push	r20
    3016:	5f 93       	push	r21
    3018:	6f 93       	push	r22
    301a:	7f 93       	push	r23
    301c:	8f 93       	push	r24
    301e:	9f 93       	push	r25
    3020:	af 93       	push	r26
    3022:	bf 93       	push	r27
    3024:	ef 93       	push	r30
    3026:	ff 93       	push	r31
    3028:	82 e0       	ldi	r24, 0x02	; 2
    302a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <irTransmitComplete>
    302e:	ff 91       	pop	r31
    3030:	ef 91       	pop	r30
    3032:	bf 91       	pop	r27
    3034:	af 91       	pop	r26
    3036:	9f 91       	pop	r25
    3038:	8f 91       	pop	r24
    303a:	7f 91       	pop	r23
    303c:	6f 91       	pop	r22
    303e:	5f 91       	pop	r21
    3040:	4f 91       	pop	r20
    3042:	3f 91       	pop	r19
    3044:	2f 91       	pop	r18
    3046:	0f 90       	pop	r0
    3048:	0b be       	out	0x3b, r0	; 59
    304a:	0f 90       	pop	r0
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	0f 90       	pop	r0
    3050:	1f 90       	pop	r1
    3052:	18 95       	reti

00003054 <__vector_89>:
ISR( USARTD0_DRE_vect ) { irTransmit(2); }
    3054:	1f 92       	push	r1
    3056:	0f 92       	push	r0
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	0f 92       	push	r0
    305c:	11 24       	eor	r1, r1
    305e:	0b b6       	in	r0, 0x3b	; 59
    3060:	0f 92       	push	r0
    3062:	2f 93       	push	r18
    3064:	3f 93       	push	r19
    3066:	4f 93       	push	r20
    3068:	5f 93       	push	r21
    306a:	6f 93       	push	r22
    306c:	7f 93       	push	r23
    306e:	8f 93       	push	r24
    3070:	9f 93       	push	r25
    3072:	af 93       	push	r26
    3074:	bf 93       	push	r27
    3076:	ef 93       	push	r30
    3078:	ff 93       	push	r31
    307a:	82 e0       	ldi	r24, 0x02	; 2
    307c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <irTransmit>
    3080:	ff 91       	pop	r31
    3082:	ef 91       	pop	r30
    3084:	bf 91       	pop	r27
    3086:	af 91       	pop	r26
    3088:	9f 91       	pop	r25
    308a:	8f 91       	pop	r24
    308c:	7f 91       	pop	r23
    308e:	6f 91       	pop	r22
    3090:	5f 91       	pop	r21
    3092:	4f 91       	pop	r20
    3094:	3f 91       	pop	r19
    3096:	2f 91       	pop	r18
    3098:	0f 90       	pop	r0
    309a:	0b be       	out	0x3b, r0	; 59
    309c:	0f 90       	pop	r0
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	0f 90       	pop	r0
    30a2:	1f 90       	pop	r1
    30a4:	18 95       	reti

000030a6 <__vector_58>:

// ISRs for IR channel 3
ISR( USARTE0_RXC_vect ) { irReceive(3); }
    30a6:	1f 92       	push	r1
    30a8:	0f 92       	push	r0
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	0f 92       	push	r0
    30ae:	11 24       	eor	r1, r1
    30b0:	0b b6       	in	r0, 0x3b	; 59
    30b2:	0f 92       	push	r0
    30b4:	2f 93       	push	r18
    30b6:	3f 93       	push	r19
    30b8:	4f 93       	push	r20
    30ba:	5f 93       	push	r21
    30bc:	6f 93       	push	r22
    30be:	7f 93       	push	r23
    30c0:	8f 93       	push	r24
    30c2:	9f 93       	push	r25
    30c4:	af 93       	push	r26
    30c6:	bf 93       	push	r27
    30c8:	ef 93       	push	r30
    30ca:	ff 93       	push	r31
    30cc:	83 e0       	ldi	r24, 0x03	; 3
    30ce:	0e 94 c8 12 	call	0x2590	; 0x2590 <irReceive>
    30d2:	ff 91       	pop	r31
    30d4:	ef 91       	pop	r30
    30d6:	bf 91       	pop	r27
    30d8:	af 91       	pop	r26
    30da:	9f 91       	pop	r25
    30dc:	8f 91       	pop	r24
    30de:	7f 91       	pop	r23
    30e0:	6f 91       	pop	r22
    30e2:	5f 91       	pop	r21
    30e4:	4f 91       	pop	r20
    30e6:	3f 91       	pop	r19
    30e8:	2f 91       	pop	r18
    30ea:	0f 90       	pop	r0
    30ec:	0b be       	out	0x3b, r0	; 59
    30ee:	0f 90       	pop	r0
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	0f 90       	pop	r0
    30f4:	1f 90       	pop	r1
    30f6:	18 95       	reti

000030f8 <__vector_60>:
ISR( USARTE0_TXC_vect ) { irTransmitComplete(3); }
    30f8:	1f 92       	push	r1
    30fa:	0f 92       	push	r0
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	0f 92       	push	r0
    3100:	11 24       	eor	r1, r1
    3102:	0b b6       	in	r0, 0x3b	; 59
    3104:	0f 92       	push	r0
    3106:	2f 93       	push	r18
    3108:	3f 93       	push	r19
    310a:	4f 93       	push	r20
    310c:	5f 93       	push	r21
    310e:	6f 93       	push	r22
    3110:	7f 93       	push	r23
    3112:	8f 93       	push	r24
    3114:	9f 93       	push	r25
    3116:	af 93       	push	r26
    3118:	bf 93       	push	r27
    311a:	ef 93       	push	r30
    311c:	ff 93       	push	r31
    311e:	83 e0       	ldi	r24, 0x03	; 3
    3120:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <irTransmitComplete>
    3124:	ff 91       	pop	r31
    3126:	ef 91       	pop	r30
    3128:	bf 91       	pop	r27
    312a:	af 91       	pop	r26
    312c:	9f 91       	pop	r25
    312e:	8f 91       	pop	r24
    3130:	7f 91       	pop	r23
    3132:	6f 91       	pop	r22
    3134:	5f 91       	pop	r21
    3136:	4f 91       	pop	r20
    3138:	3f 91       	pop	r19
    313a:	2f 91       	pop	r18
    313c:	0f 90       	pop	r0
    313e:	0b be       	out	0x3b, r0	; 59
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	0f 90       	pop	r0
    3146:	1f 90       	pop	r1
    3148:	18 95       	reti

0000314a <__vector_59>:
ISR( USARTE0_DRE_vect ) { irTransmit(3); }
    314a:	1f 92       	push	r1
    314c:	0f 92       	push	r0
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	0f 92       	push	r0
    3152:	11 24       	eor	r1, r1
    3154:	0b b6       	in	r0, 0x3b	; 59
    3156:	0f 92       	push	r0
    3158:	2f 93       	push	r18
    315a:	3f 93       	push	r19
    315c:	4f 93       	push	r20
    315e:	5f 93       	push	r21
    3160:	6f 93       	push	r22
    3162:	7f 93       	push	r23
    3164:	8f 93       	push	r24
    3166:	9f 93       	push	r25
    3168:	af 93       	push	r26
    316a:	bf 93       	push	r27
    316c:	ef 93       	push	r30
    316e:	ff 93       	push	r31
    3170:	83 e0       	ldi	r24, 0x03	; 3
    3172:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <irTransmit>
    3176:	ff 91       	pop	r31
    3178:	ef 91       	pop	r30
    317a:	bf 91       	pop	r27
    317c:	af 91       	pop	r26
    317e:	9f 91       	pop	r25
    3180:	8f 91       	pop	r24
    3182:	7f 91       	pop	r23
    3184:	6f 91       	pop	r22
    3186:	5f 91       	pop	r21
    3188:	4f 91       	pop	r20
    318a:	3f 91       	pop	r19
    318c:	2f 91       	pop	r18
    318e:	0f 90       	pop	r0
    3190:	0b be       	out	0x3b, r0	; 59
    3192:	0f 90       	pop	r0
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	0f 90       	pop	r0
    3198:	1f 90       	pop	r1
    319a:	18 95       	reti

0000319c <__vector_61>:

// ISRs for IR channel 4
ISR( USARTE1_RXC_vect ) { irReceive(4); }
    319c:	1f 92       	push	r1
    319e:	0f 92       	push	r0
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	0f 92       	push	r0
    31a4:	11 24       	eor	r1, r1
    31a6:	0b b6       	in	r0, 0x3b	; 59
    31a8:	0f 92       	push	r0
    31aa:	2f 93       	push	r18
    31ac:	3f 93       	push	r19
    31ae:	4f 93       	push	r20
    31b0:	5f 93       	push	r21
    31b2:	6f 93       	push	r22
    31b4:	7f 93       	push	r23
    31b6:	8f 93       	push	r24
    31b8:	9f 93       	push	r25
    31ba:	af 93       	push	r26
    31bc:	bf 93       	push	r27
    31be:	ef 93       	push	r30
    31c0:	ff 93       	push	r31
    31c2:	84 e0       	ldi	r24, 0x04	; 4
    31c4:	0e 94 c8 12 	call	0x2590	; 0x2590 <irReceive>
    31c8:	ff 91       	pop	r31
    31ca:	ef 91       	pop	r30
    31cc:	bf 91       	pop	r27
    31ce:	af 91       	pop	r26
    31d0:	9f 91       	pop	r25
    31d2:	8f 91       	pop	r24
    31d4:	7f 91       	pop	r23
    31d6:	6f 91       	pop	r22
    31d8:	5f 91       	pop	r21
    31da:	4f 91       	pop	r20
    31dc:	3f 91       	pop	r19
    31de:	2f 91       	pop	r18
    31e0:	0f 90       	pop	r0
    31e2:	0b be       	out	0x3b, r0	; 59
    31e4:	0f 90       	pop	r0
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	0f 90       	pop	r0
    31ea:	1f 90       	pop	r1
    31ec:	18 95       	reti

000031ee <__vector_63>:
ISR( USARTE1_TXC_vect ) { irTransmitComplete(4); }
    31ee:	1f 92       	push	r1
    31f0:	0f 92       	push	r0
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	0f 92       	push	r0
    31f6:	11 24       	eor	r1, r1
    31f8:	0b b6       	in	r0, 0x3b	; 59
    31fa:	0f 92       	push	r0
    31fc:	2f 93       	push	r18
    31fe:	3f 93       	push	r19
    3200:	4f 93       	push	r20
    3202:	5f 93       	push	r21
    3204:	6f 93       	push	r22
    3206:	7f 93       	push	r23
    3208:	8f 93       	push	r24
    320a:	9f 93       	push	r25
    320c:	af 93       	push	r26
    320e:	bf 93       	push	r27
    3210:	ef 93       	push	r30
    3212:	ff 93       	push	r31
    3214:	84 e0       	ldi	r24, 0x04	; 4
    3216:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <irTransmitComplete>
    321a:	ff 91       	pop	r31
    321c:	ef 91       	pop	r30
    321e:	bf 91       	pop	r27
    3220:	af 91       	pop	r26
    3222:	9f 91       	pop	r25
    3224:	8f 91       	pop	r24
    3226:	7f 91       	pop	r23
    3228:	6f 91       	pop	r22
    322a:	5f 91       	pop	r21
    322c:	4f 91       	pop	r20
    322e:	3f 91       	pop	r19
    3230:	2f 91       	pop	r18
    3232:	0f 90       	pop	r0
    3234:	0b be       	out	0x3b, r0	; 59
    3236:	0f 90       	pop	r0
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	0f 90       	pop	r0
    323c:	1f 90       	pop	r1
    323e:	18 95       	reti

00003240 <__vector_62>:
ISR( USARTE1_DRE_vect ) { irTransmit(4); }
    3240:	1f 92       	push	r1
    3242:	0f 92       	push	r0
    3244:	0f b6       	in	r0, 0x3f	; 63
    3246:	0f 92       	push	r0
    3248:	11 24       	eor	r1, r1
    324a:	0b b6       	in	r0, 0x3b	; 59
    324c:	0f 92       	push	r0
    324e:	2f 93       	push	r18
    3250:	3f 93       	push	r19
    3252:	4f 93       	push	r20
    3254:	5f 93       	push	r21
    3256:	6f 93       	push	r22
    3258:	7f 93       	push	r23
    325a:	8f 93       	push	r24
    325c:	9f 93       	push	r25
    325e:	af 93       	push	r26
    3260:	bf 93       	push	r27
    3262:	ef 93       	push	r30
    3264:	ff 93       	push	r31
    3266:	84 e0       	ldi	r24, 0x04	; 4
    3268:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <irTransmit>
    326c:	ff 91       	pop	r31
    326e:	ef 91       	pop	r30
    3270:	bf 91       	pop	r27
    3272:	af 91       	pop	r26
    3274:	9f 91       	pop	r25
    3276:	8f 91       	pop	r24
    3278:	7f 91       	pop	r23
    327a:	6f 91       	pop	r22
    327c:	5f 91       	pop	r21
    327e:	4f 91       	pop	r20
    3280:	3f 91       	pop	r19
    3282:	2f 91       	pop	r18
    3284:	0f 90       	pop	r0
    3286:	0b be       	out	0x3b, r0	; 59
    3288:	0f 90       	pop	r0
    328a:	0f be       	out	0x3f, r0	; 63
    328c:	0f 90       	pop	r0
    328e:	1f 90       	pop	r1
    3290:	18 95       	reti

00003292 <__vector_119>:

// ISRs for IR channel 5
ISR( USARTF0_RXC_vect ) { irReceive(5); }
    3292:	1f 92       	push	r1
    3294:	0f 92       	push	r0
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	0f 92       	push	r0
    329a:	11 24       	eor	r1, r1
    329c:	0b b6       	in	r0, 0x3b	; 59
    329e:	0f 92       	push	r0
    32a0:	2f 93       	push	r18
    32a2:	3f 93       	push	r19
    32a4:	4f 93       	push	r20
    32a6:	5f 93       	push	r21
    32a8:	6f 93       	push	r22
    32aa:	7f 93       	push	r23
    32ac:	8f 93       	push	r24
    32ae:	9f 93       	push	r25
    32b0:	af 93       	push	r26
    32b2:	bf 93       	push	r27
    32b4:	ef 93       	push	r30
    32b6:	ff 93       	push	r31
    32b8:	85 e0       	ldi	r24, 0x05	; 5
    32ba:	0e 94 c8 12 	call	0x2590	; 0x2590 <irReceive>
    32be:	ff 91       	pop	r31
    32c0:	ef 91       	pop	r30
    32c2:	bf 91       	pop	r27
    32c4:	af 91       	pop	r26
    32c6:	9f 91       	pop	r25
    32c8:	8f 91       	pop	r24
    32ca:	7f 91       	pop	r23
    32cc:	6f 91       	pop	r22
    32ce:	5f 91       	pop	r21
    32d0:	4f 91       	pop	r20
    32d2:	3f 91       	pop	r19
    32d4:	2f 91       	pop	r18
    32d6:	0f 90       	pop	r0
    32d8:	0b be       	out	0x3b, r0	; 59
    32da:	0f 90       	pop	r0
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	0f 90       	pop	r0
    32e0:	1f 90       	pop	r1
    32e2:	18 95       	reti

000032e4 <__vector_121>:
ISR( USARTF0_TXC_vect ) { irTransmitComplete(5); }
    32e4:	1f 92       	push	r1
    32e6:	0f 92       	push	r0
    32e8:	0f b6       	in	r0, 0x3f	; 63
    32ea:	0f 92       	push	r0
    32ec:	11 24       	eor	r1, r1
    32ee:	0b b6       	in	r0, 0x3b	; 59
    32f0:	0f 92       	push	r0
    32f2:	2f 93       	push	r18
    32f4:	3f 93       	push	r19
    32f6:	4f 93       	push	r20
    32f8:	5f 93       	push	r21
    32fa:	6f 93       	push	r22
    32fc:	7f 93       	push	r23
    32fe:	8f 93       	push	r24
    3300:	9f 93       	push	r25
    3302:	af 93       	push	r26
    3304:	bf 93       	push	r27
    3306:	ef 93       	push	r30
    3308:	ff 93       	push	r31
    330a:	85 e0       	ldi	r24, 0x05	; 5
    330c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <irTransmitComplete>
    3310:	ff 91       	pop	r31
    3312:	ef 91       	pop	r30
    3314:	bf 91       	pop	r27
    3316:	af 91       	pop	r26
    3318:	9f 91       	pop	r25
    331a:	8f 91       	pop	r24
    331c:	7f 91       	pop	r23
    331e:	6f 91       	pop	r22
    3320:	5f 91       	pop	r21
    3322:	4f 91       	pop	r20
    3324:	3f 91       	pop	r19
    3326:	2f 91       	pop	r18
    3328:	0f 90       	pop	r0
    332a:	0b be       	out	0x3b, r0	; 59
    332c:	0f 90       	pop	r0
    332e:	0f be       	out	0x3f, r0	; 63
    3330:	0f 90       	pop	r0
    3332:	1f 90       	pop	r1
    3334:	18 95       	reti

00003336 <__vector_120>:
ISR( USARTF0_DRE_vect ) { irTransmit(5); }
    3336:	1f 92       	push	r1
    3338:	0f 92       	push	r0
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	0f 92       	push	r0
    333e:	11 24       	eor	r1, r1
    3340:	0b b6       	in	r0, 0x3b	; 59
    3342:	0f 92       	push	r0
    3344:	2f 93       	push	r18
    3346:	3f 93       	push	r19
    3348:	4f 93       	push	r20
    334a:	5f 93       	push	r21
    334c:	6f 93       	push	r22
    334e:	7f 93       	push	r23
    3350:	8f 93       	push	r24
    3352:	9f 93       	push	r25
    3354:	af 93       	push	r26
    3356:	bf 93       	push	r27
    3358:	ef 93       	push	r30
    335a:	ff 93       	push	r31
    335c:	85 e0       	ldi	r24, 0x05	; 5
    335e:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <irTransmit>
    3362:	ff 91       	pop	r31
    3364:	ef 91       	pop	r30
    3366:	bf 91       	pop	r27
    3368:	af 91       	pop	r26
    336a:	9f 91       	pop	r25
    336c:	8f 91       	pop	r24
    336e:	7f 91       	pop	r23
    3370:	6f 91       	pop	r22
    3372:	5f 91       	pop	r21
    3374:	4f 91       	pop	r20
    3376:	3f 91       	pop	r19
    3378:	2f 91       	pop	r18
    337a:	0f 90       	pop	r0
    337c:	0b be       	out	0x3b, r0	; 59
    337e:	0f 90       	pop	r0
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	0f 90       	pop	r0
    3384:	1f 90       	pop	r1
    3386:	18 95       	reti

00003388 <irLedInit>:
static uint8_t tx_pins[6] = {PIN3_bm, PIN7_bm, PIN3_bm, PIN3_bm, PIN7_bm, PIN3_bm};
static PORT_t* uart_ch[6] = {&PORTC, &PORTC, &PORTD, &PORTE, &PORTE, &PORTF};
static uint8_t saved_usart_ctrlb_vals[6] = {0,0,0,0,0,0};

void irLedInit()
{
    3388:	cf 93       	push	r28
    338a:	df 93       	push	r29
	/* Initialize carrier waves */
	PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;
    338c:	a0 ea       	ldi	r26, 0xA0	; 160
    338e:	b6 e0       	ldi	r27, 0x06	; 6
    3390:	93 ef       	ldi	r25, 0xF3	; 243
    3392:	11 96       	adiw	r26, 0x01	; 1
    3394:	9c 93       	st	X, r25
    3396:	11 97       	sbiw	r26, 0x01	; 1
	
	TCF2.CTRLE = TC2_BYTEM_SPLITMODE_gc;		// "split mode" puts this timer counter into "Type 2 mode"
    3398:	e0 e0       	ldi	r30, 0x00	; 0
    339a:	fb e0       	ldi	r31, 0x0B	; 11
    339c:	82 e0       	ldi	r24, 0x02	; 2
    339e:	84 83       	std	Z+4, r24	; 0x04
	TCF2.CTRLA |= TC2_CLKSEL_DIV4_gc;		// see CTRLA description in TC2 mode
    33a0:	80 81       	ld	r24, Z
    33a2:	83 60       	ori	r24, 0x03	; 3
    33a4:	80 83       	st	Z, r24
	
	TCF2.HPER = 211; TCF2.LPER = 211; // 32MHz / (4 * 211) = 38kHz
    33a6:	83 ed       	ldi	r24, 0xD3	; 211
    33a8:	87 a3       	std	Z+39, r24	; 0x27
    33aa:	86 a3       	std	Z+38, r24	; 0x26
	TCF2.HCMPA = 105; TCF2.HCMPB = 105; TCF2.HCMPC = 105; // 50% Duty Cycle
    33ac:	89 e6       	ldi	r24, 0x69	; 105
    33ae:	81 a7       	std	Z+41, r24	; 0x29
    33b0:	83 a7       	std	Z+43, r24	; 0x2b
    33b2:	85 a7       	std	Z+45, r24	; 0x2d
	TCF2.HCMPD = 105; TCF2.LCMPA = 105; TCF2.LCMPB = 105; // 50% Duty Cycle
    33b4:	87 a7       	std	Z+47, r24	; 0x2f
    33b6:	80 a7       	std	Z+40, r24	; 0x28
    33b8:	82 a7       	std	Z+42, r24	; 0x2a
	TCF2.CTRLB = ALL_EMITTERS_CARWAV_bm;	// Set TC outputs on carrier wave pins (see CTRLA description in TC2 mode)
    33ba:	91 83       	std	Z+1, r25	; 0x01

	// TX pins as outputs:
	PORTC.DIRSET = PIN3_bm | PIN7_bm;		// DIR 0,1
    33bc:	c0 e4       	ldi	r28, 0x40	; 64
    33be:	d6 e0       	ldi	r29, 0x06	; 6
    33c0:	98 e8       	ldi	r25, 0x88	; 136
    33c2:	99 83       	std	Y+1, r25	; 0x01
	PORTD.DIRSET = PIN3_bm;					// DIR 2
    33c4:	20 e6       	ldi	r18, 0x60	; 96
    33c6:	36 e0       	ldi	r19, 0x06	; 6
    33c8:	88 e0       	ldi	r24, 0x08	; 8
    33ca:	f9 01       	movw	r30, r18
    33cc:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN3_bm | PIN7_bm;		// DIR 3,4
    33ce:	40 e8       	ldi	r20, 0x80	; 128
    33d0:	56 e0       	ldi	r21, 0x06	; 6
    33d2:	fa 01       	movw	r30, r20
    33d4:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = PIN3_bm;					// DIR 5
    33d6:	11 96       	adiw	r26, 0x01	; 1
    33d8:	8c 93       	st	X, r24
    33da:	11 97       	sbiw	r26, 0x01	; 1
	
	PORTC.OUTCLR = (PIN3_bm | PIN7_bm);
    33dc:	9e 83       	std	Y+6, r25	; 0x06
	PORTD.OUTCLR = PIN3_bm;
    33de:	f9 01       	movw	r30, r18
    33e0:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = (PIN3_bm | PIN7_bm);
    33e2:	fa 01       	movw	r30, r20
    33e4:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = PIN3_bm;
    33e6:	16 96       	adiw	r26, 0x06	; 6
    33e8:	8c 93       	st	X, r24
    33ea:	16 97       	sbiw	r26, 0x06	; 6
		
	// Invert the output pins:
	PORTC.PIN3CTRL = PORT_INVEN_bm;
    33ec:	80 e4       	ldi	r24, 0x40	; 64
    33ee:	8b 8b       	std	Y+19, r24	; 0x13
	PORTC.PIN7CTRL = PORT_INVEN_bm;
    33f0:	8f 8b       	std	Y+23, r24	; 0x17
	PORTD.PIN3CTRL = PORT_INVEN_bm;
    33f2:	f9 01       	movw	r30, r18
    33f4:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN3CTRL = PORT_INVEN_bm;
    33f6:	fa 01       	movw	r30, r20
    33f8:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN7CTRL = PORT_INVEN_bm;
    33fa:	87 8b       	std	Z+23, r24	; 0x17
	PORTF.PIN3CTRL = PORT_INVEN_bm;
    33fc:	53 96       	adiw	r26, 0x13	; 19
    33fe:	8c 93       	st	X, r24
	
}
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	08 95       	ret

00003406 <irLedOn>:

void irLedOn(uint8_t direction)
{
    3406:	cf 93       	push	r28
    3408:	df 93       	push	r29
	//Turning on the light.
	saved_usart_ctrlb_vals[direction]	  = channel[direction]->CTRLB;	// record the current state of the USART
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9c 01       	movw	r18, r24
    340e:	22 0f       	add	r18, r18
    3410:	33 1f       	adc	r19, r19
    3412:	f9 01       	movw	r30, r18
    3414:	ea 5f       	subi	r30, 0xFA	; 250
    3416:	ff 4d       	sbci	r31, 0xDF	; 223
    3418:	a0 81       	ld	r26, Z
    341a:	b1 81       	ldd	r27, Z+1	; 0x01
    341c:	14 96       	adiw	r26, 0x04	; 4
    341e:	4c 91       	ld	r20, X
    3420:	14 97       	sbiw	r26, 0x04	; 4
    3422:	fc 01       	movw	r30, r24
    3424:	ef 58       	subi	r30, 0x8F	; 143
    3426:	fd 4d       	sbci	r31, 0xDD	; 221
    3428:	40 83       	st	Z, r20
	TCF2.CTRLB			 &= ~carrier_wave_pins[direction];	// disable carrier wave output
    342a:	e0 e0       	ldi	r30, 0x00	; 0
    342c:	fb e0       	ldi	r31, 0x0B	; 11
    342e:	41 81       	ldd	r20, Z+1	; 0x01
    3430:	ec 01       	movw	r28, r24
    3432:	ca 57       	subi	r28, 0x7A	; 122
    3434:	df 4d       	sbci	r29, 0xDF	; 223
    3436:	58 81       	ld	r21, Y
    3438:	65 2f       	mov	r22, r21
    343a:	60 95       	com	r22
    343c:	46 23       	and	r20, r22
    343e:	41 83       	std	Z+1, r20	; 0x01
	PORTF.DIRSET		  =  carrier_wave_pins[direction];	// enable user output on this pin
    3440:	e0 ea       	ldi	r30, 0xA0	; 160
    3442:	f6 e0       	ldi	r31, 0x06	; 6
    3444:	51 83       	std	Z+1, r21	; 0x01
	PORTF.OUT			 |=  carrier_wave_pins[direction];	// high signal on this pin
    3446:	44 81       	ldd	r20, Z+4	; 0x04
    3448:	45 2b       	or	r20, r21
    344a:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB  	  =  0;					// disable USART
    344c:	14 96       	adiw	r26, 0x04	; 4
    344e:	1c 92       	st	X, r1
	uart_ch[direction]->DIRSET =  tx_pins[direction];			// enable user output on this pin
    3450:	f9 01       	movw	r30, r18
    3452:	ec 58       	subi	r30, 0x8C	; 140
    3454:	ff 4d       	sbci	r31, 0xDF	; 223
    3456:	01 90       	ld	r0, Z+
    3458:	f0 81       	ld	r31, Z
    345a:	e0 2d       	mov	r30, r0
    345c:	dc 01       	movw	r26, r24
    345e:	a0 58       	subi	r26, 0x80	; 128
    3460:	bf 4d       	sbci	r27, 0xDF	; 223
    3462:	8c 91       	ld	r24, X
    3464:	81 83       	std	Z+1, r24	; 0x01
	uart_ch[direction]->OUT	 &= ~tx_pins[direction];			// low signal on TX pin (remember: these pins were inverted during init)
    3466:	94 81       	ldd	r25, Z+4	; 0x04
    3468:	80 95       	com	r24
    346a:	89 23       	and	r24, r25
    346c:	84 83       	std	Z+4, r24	; 0x04

}
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	08 95       	ret

00003474 <irLedOff>:

void irLedOff(uint8_t direction)
{
	//Turning off the light.
	uart_ch[direction]->OUT  |=  tx_pins[direction];			// high signal on TX pin (turns IR blast OFF)
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	9c 01       	movw	r18, r24
    3478:	22 0f       	add	r18, r18
    347a:	33 1f       	adc	r19, r19
    347c:	f9 01       	movw	r30, r18
    347e:	ec 58       	subi	r30, 0x8C	; 140
    3480:	ff 4d       	sbci	r31, 0xDF	; 223
    3482:	01 90       	ld	r0, Z+
    3484:	f0 81       	ld	r31, Z
    3486:	e0 2d       	mov	r30, r0
    3488:	54 81       	ldd	r21, Z+4	; 0x04
    348a:	dc 01       	movw	r26, r24
    348c:	a0 58       	subi	r26, 0x80	; 128
    348e:	bf 4d       	sbci	r27, 0xDF	; 223
    3490:	4c 91       	ld	r20, X
    3492:	45 2b       	or	r20, r21
    3494:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB	 =  saved_usart_ctrlb_vals[direction];	// re-enable USART (restore settings as it was before)
    3496:	f9 01       	movw	r30, r18
    3498:	ea 5f       	subi	r30, 0xFA	; 250
    349a:	ff 4d       	sbci	r31, 0xDF	; 223
    349c:	01 90       	ld	r0, Z+
    349e:	f0 81       	ld	r31, Z
    34a0:	e0 2d       	mov	r30, r0
    34a2:	dc 01       	movw	r26, r24
    34a4:	af 58       	subi	r26, 0x8F	; 143
    34a6:	bd 4d       	sbci	r27, 0xDD	; 221
    34a8:	2c 91       	ld	r18, X
    34aa:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT			&= ~carrier_wave_pins[direction];	// low signal on the carrier wave pin, just in casies.
    34ac:	e0 ea       	ldi	r30, 0xA0	; 160
    34ae:	f6 e0       	ldi	r31, 0x06	; 6
    34b0:	24 81       	ldd	r18, Z+4	; 0x04
    34b2:	dc 01       	movw	r26, r24
    34b4:	aa 57       	subi	r26, 0x7A	; 122
    34b6:	bf 4d       	sbci	r27, 0xDF	; 223
    34b8:	3c 91       	ld	r19, X
    34ba:	93 2f       	mov	r25, r19
    34bc:	90 95       	com	r25
    34be:	92 23       	and	r25, r18
    34c0:	94 83       	std	Z+4, r25	; 0x04
	TCF2.CTRLB			|=  carrier_wave_pins[direction];	// re-enable carrier wave output
    34c2:	e0 e0       	ldi	r30, 0x00	; 0
    34c4:	fb e0       	ldi	r31, 0x0B	; 11
    34c6:	81 81       	ldd	r24, Z+1	; 0x01
    34c8:	83 2b       	or	r24, r19
    34ca:	81 83       	std	Z+1, r24	; 0x01
    34cc:	08 95       	ret

000034ce <setAllirPowers>:
}

void setAllirPowers(volatile uint16_t power){
    34ce:	1f 93       	push	r17
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
    34d8:	2f 97       	sbiw	r28, 0x0f	; 15
    34da:	cd bf       	out	0x3d, r28	; 61
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	8e 87       	std	Y+14, r24	; 0x0e
    34e0:	9f 87       	std	Y+15, r25	; 0x0f
	if(power>256) return;
    34e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    34e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    34e6:	81 30       	cpi	r24, 0x01	; 1
    34e8:	91 40       	sbci	r25, 0x01	; 1
    34ea:	68 f5       	brcc	.+90     	; 0x3546 <setAllirPowers+0x78>
	if(curr_ir_power==power) return;
    34ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    34ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    34f0:	20 91 91 25 	lds	r18, 0x2591	; 0x802591 <curr_ir_power>
    34f4:	30 91 92 25 	lds	r19, 0x2592	; 0x802592 <curr_ir_power+0x1>
    34f8:	28 17       	cp	r18, r24
    34fa:	39 07       	cpc	r19, r25
    34fc:	21 f1       	breq	.+72     	; 0x3546 <setAllirPowers+0x78>
	uint8_t power_high = (power>>8);
    34fe:	2e 85       	ldd	r18, Y+14	; 0x0e
    3500:	3f 85       	ldd	r19, Y+15	; 0x0f
	uint8_t power_low = (power&0xFF);
    3502:	8e 85       	ldd	r24, Y+14	; 0x0e
    3504:	9f 85       	ldd	r25, Y+15	; 0x0f
	uint8_t write_buffer[6] = {power_high,power_low,0x10|power_high,power_low,0x60|power_high, power_low};
    3506:	38 87       	std	Y+8, r19	; 0x08
    3508:	89 87       	std	Y+9, r24	; 0x09
    350a:	93 2f       	mov	r25, r19
    350c:	90 61       	ori	r25, 0x10	; 16
    350e:	9a 87       	std	Y+10, r25	; 0x0a
    3510:	8b 87       	std	Y+11, r24	; 0x0b
    3512:	93 2f       	mov	r25, r19
    3514:	90 66       	ori	r25, 0x60	; 96
    3516:	9c 87       	std	Y+12, r25	; 0x0c
    3518:	8d 87       	std	Y+13, r24	; 0x0d
	
	uint8_t aResult = 0;
	uint8_t bResult = 0;
	char callerDescr[7] = "Set IR\0";
    351a:	87 e0       	ldi	r24, 0x07	; 7
    351c:	ed e6       	ldi	r30, 0x6D	; 109
    351e:	f0 e2       	ldi	r31, 0x20	; 32
    3520:	de 01       	movw	r26, r28
    3522:	11 96       	adiw	r26, 0x01	; 1
    3524:	01 90       	ld	r0, Z+
    3526:	0d 92       	st	X+, r0
    3528:	8a 95       	dec	r24
    352a:	e1 f7       	brne	.-8      	; 0x3524 <setAllirPowers+0x56>
	aResult = twiWriteWrapper(IR_POWER_ADDR_A, write_buffer, 6, callerDescr);
    352c:	9e 01       	movw	r18, r28
    352e:	2f 5f       	subi	r18, 0xFF	; 255
    3530:	3f 4f       	sbci	r19, 0xFF	; 255
    3532:	46 e0       	ldi	r20, 0x06	; 6
    3534:	be 01       	movw	r22, r28
    3536:	68 5f       	subi	r22, 0xF8	; 248
    3538:	7f 4f       	sbci	r23, 0xFF	; 255
    353a:	8c e2       	ldi	r24, 0x2C	; 44
    353c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <twiWriteWrapper>
    3540:	18 2f       	mov	r17, r24
	if(!aResult){
    3542:	81 11       	cpse	r24, r1
    3544:	07 c0       	rjmp	.+14     	; 0x3554 <setAllirPowers+0x86>
	
	if((aResult+bResult)>2){
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
	}
	curr_ir_power = power;
}
    3546:	2f 96       	adiw	r28, 0x0f	; 15
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	1f 91       	pop	r17
    3552:	08 95       	ret
	char callerDescr[7] = "Set IR\0";
	aResult = twiWriteWrapper(IR_POWER_ADDR_A, write_buffer, 6, callerDescr);
	if(!aResult){
		return;
	}
	bResult = twiWriteWrapper(IR_POWER_ADDR_B, write_buffer, 6, callerDescr);
    3554:	9e 01       	movw	r18, r28
    3556:	2f 5f       	subi	r18, 0xFF	; 255
    3558:	3f 4f       	sbci	r19, 0xFF	; 255
    355a:	46 e0       	ldi	r20, 0x06	; 6
    355c:	be 01       	movw	r22, r28
    355e:	68 5f       	subi	r22, 0xF8	; 248
    3560:	7f 4f       	sbci	r23, 0xFF	; 255
    3562:	8e e2       	ldi	r24, 0x2E	; 46
    3564:	0e 94 67 0d 	call	0x1ace	; 0x1ace <twiWriteWrapper>
	if(!bResult){
    3568:	88 23       	and	r24, r24
    356a:	69 f3       	breq	.-38     	; 0x3546 <setAllirPowers+0x78>
		return;
	}
	
	if((aResult+bResult)>2){
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	81 0f       	add	r24, r17
    3570:	91 1d       	adc	r25, r1
    3572:	02 97       	sbiw	r24, 0x02	; 2
    3574:	41 f0       	breq	.+16     	; 0x3586 <setAllirPowers+0xb8>
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
    3576:	81 eb       	ldi	r24, 0xB1	; 177
    3578:	96 e0       	ldi	r25, 0x06	; 6
    357a:	9f 93       	push	r25
    357c:	8f 93       	push	r24
    357e:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    3582:	0f 90       	pop	r0
    3584:	0f 90       	pop	r0
	}
	curr_ir_power = power;
    3586:	8e 85       	ldd	r24, Y+14	; 0x0e
    3588:	9f 85       	ldd	r25, Y+15	; 0x0f
    358a:	80 93 91 25 	sts	0x2591, r24	; 0x802591 <curr_ir_power>
    358e:	90 93 92 25 	sts	0x2592, r25	; 0x802592 <curr_ir_power+0x1>
    3592:	d9 cf       	rjmp	.-78     	; 0x3546 <setAllirPowers+0x78>

00003594 <irSensorInit>:
		
		//ADCA.EVCTRL = ADC_EVSEL_1234_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
		//ADCB.EVCTRL = ADC_EVSEL_567_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
	#else
		/* SET INPUT PINS AS INPUTS */
		IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    3594:	e0 e2       	ldi	r30, 0x20	; 32
    3596:	f6 e0       	ldi	r31, 0x06	; 6
    3598:	8c ef       	ldi	r24, 0xFC	; 252
    359a:	82 83       	std	Z+2, r24	; 0x02
		
		PORTB.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    359c:	87 e0       	ldi	r24, 0x07	; 7
    359e:	85 8b       	std	Z+21, r24	; 0x15
		PORTB.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    35a0:	86 8b       	std	Z+22, r24	; 0x16
		PORTB.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    35a2:	87 8b       	std	Z+23, r24	; 0x17
		PORTB.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    35a4:	84 8b       	std	Z+20, r24	; 0x14
		PORTB.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    35a6:	82 8b       	std	Z+18, r24	; 0x12
		PORTB.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    35a8:	83 8b       	std	Z+19, r24	; 0x13

		ADCB.REFCTRL = ADC_REFSEL_AREFA_gc;
    35aa:	e0 e4       	ldi	r30, 0x40	; 64
    35ac:	f2 e0       	ldi	r31, 0x02	; 2
    35ae:	90 e2       	ldi	r25, 0x20	; 32
    35b0:	92 83       	std	Z+2, r25	; 0x02
		ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; //12bit resolution, and sets it to signed mode.
    35b2:	90 e1       	ldi	r25, 0x10	; 16
    35b4:	91 83       	std	Z+1, r25	; 0x01
		ADCB.PRESCALER = ADC_PRESCALER_DIV512_gc;
    35b6:	84 83       	std	Z+4, r24	; 0x04
		ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN2_bm;	// differential input. requires signed mode (see sec. 28.6 in manual)
    35b8:	83 e1       	ldi	r24, 0x13	; 19
    35ba:	80 a3       	std	Z+32, r24	; 0x20
		ADCB.CH0.MUXCTRL = ADC_CH_MUXNEG_INTGND_MODE4_gc;	// use VREF_IN for the negative input (0.54 V)
    35bc:	84 e0       	ldi	r24, 0x04	; 4
    35be:	81 a3       	std	Z+33, r24	; 0x21
		ADCB.CALL = PRODSIGNATURES_ADCBCAL0;
    35c0:	84 b5       	in	r24, 0x24	; 36
    35c2:	84 87       	std	Z+12, r24	; 0x0c
		ADCB.CALH = PRODSIGNATURES_ADCBCAL1;
    35c4:	85 b5       	in	r24, 0x25	; 37
    35c6:	85 87       	std	Z+13, r24	; 0x0d
		ADCB.CTRLA = ADC_ENABLE_bm;
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	80 83       	st	Z, r24
	#endif
	
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir]=0;
    35cc:	e7 e7       	ldi	r30, 0x77	; 119
    35ce:	f2 e2       	ldi	r31, 0x22	; 34
    35d0:	10 82       	st	Z, r1
    35d2:	11 82       	std	Z+1, r1	; 0x01
    35d4:	12 82       	std	Z+2, r1	; 0x02
    35d6:	13 82       	std	Z+3, r1	; 0x03
    35d8:	14 82       	std	Z+4, r1	; 0x04
    35da:	15 82       	std	Z+5, r1	; 0x05
    35dc:	16 82       	std	Z+6, r1	; 0x06
    35de:	17 82       	std	Z+7, r1	; 0x07
    35e0:	10 86       	std	Z+8, r1	; 0x08
    35e2:	11 86       	std	Z+9, r1	; 0x09
    35e4:	12 86       	std	Z+10, r1	; 0x0a
    35e6:	13 86       	std	Z+11, r1	; 0x0b
	}
	scheduleTask(1000,initIrBaselines,NULL);
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	4d eb       	ldi	r20, 0xBD	; 189
    35ee:	5b e1       	ldi	r21, 0x1B	; 27
    35f0:	68 ee       	ldi	r22, 0xE8	; 232
    35f2:	73 e0       	ldi	r23, 0x03	; 3
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	0e 94 3c 33 	call	0x6678	; 0x6678 <scheduleTask>
	schedulePeriodicTask(5407, updateIrBaselines, NULL);
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	42 ec       	ldi	r20, 0xC2	; 194
    3602:	5b e1       	ldi	r21, 0x1B	; 27
    3604:	6f e1       	ldi	r22, 0x1F	; 31
    3606:	75 e1       	ldi	r23, 0x15	; 21
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	0e 94 75 33 	call	0x66ea	; 0x66ea <schedulePeriodicTask>
    3610:	08 95       	ret

00003612 <getIrSensors>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		hpIrBlock_bm = 0;
	}
}

void getIrSensors(int16_t* output_arr, uint8_t meas_per_ch){			
    3612:	2f 92       	push	r2
    3614:	3f 92       	push	r3
    3616:	4f 92       	push	r4
    3618:	5f 92       	push	r5
    361a:	6f 92       	push	r6
    361c:	7f 92       	push	r7
    361e:	8f 92       	push	r8
    3620:	9f 92       	push	r9
    3622:	af 92       	push	r10
    3624:	bf 92       	push	r11
    3626:	cf 92       	push	r12
    3628:	df 92       	push	r13
    362a:	ef 92       	push	r14
    362c:	ff 92       	push	r15
    362e:	0f 93       	push	r16
    3630:	1f 93       	push	r17
    3632:	cf 93       	push	r28
    3634:	df 93       	push	r29
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    363a:	36 2e       	mov	r3, r22
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    363c:	4d b6       	in	r4, 0x3d	; 61
    363e:	5e b6       	in	r5, 0x3e	; 62
		hpIrBlock_bm = 0;
	}
}

void getIrSensors(int16_t* output_arr, uint8_t meas_per_ch){			
	int16_t meas[6][meas_per_ch];	
    3640:	06 2f       	mov	r16, r22
    3642:	10 e0       	ldi	r17, 0x00	; 0
    3644:	00 0f       	add	r16, r16
    3646:	11 1f       	adc	r17, r17
    3648:	2d b7       	in	r18, 0x3d	; 61
    364a:	3e b7       	in	r19, 0x3e	; 62
    364c:	4c e0       	ldi	r20, 0x0C	; 12
    364e:	64 9f       	mul	r22, r20
    3650:	20 19       	sub	r18, r0
    3652:	31 09       	sbc	r19, r1
    3654:	11 24       	eor	r1, r1
    3656:	2d bf       	out	0x3d, r18	; 61
    3658:	3e bf       	out	0x3e, r19	; 62
    365a:	ed b7       	in	r30, 0x3d	; 61
    365c:	fe b7       	in	r31, 0x3e	; 62
    365e:	31 96       	adiw	r30, 0x01	; 1
    3660:	4f 01       	movw	r8, r30
    3662:	ad e8       	ldi	r26, 0x8D	; 141
    3664:	b0 e2       	ldi	r27, 0x20	; 32
    3666:	af 01       	movw	r20, r30
    3668:	68 e2       	ldi	r22, 0x28	; 40
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
					meas[dir][meas_count] = ADCB.CH0RES;
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    366a:	ee 24       	eor	r14, r14
    366c:	e3 94       	inc	r14
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    366e:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
    3672:	37 70       	andi	r19, 0x07	; 7
    3674:	30 93 61 02 	sts	0x0261, r19	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
    3678:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
    367c:	26 2b       	or	r18, r22
    367e:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    3682:	33 20       	and	r3, r3
    3684:	c9 f0       	breq	.+50     	; 0x36b8 <getIrSensors+0xa6>
    3686:	fa 01       	movw	r30, r20
    3688:	30 e0       	ldi	r19, 0x00	; 0
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    368a:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    368c:	f8 94       	cli
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
    368e:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>
    3692:	20 68       	ori	r18, 0x80	; 128
    3694:	20 93 60 02 	sts	0x0260, r18	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
    3698:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    369c:	22 23       	and	r18, r18
    369e:	e1 f3       	breq	.-8      	; 0x3698 <getIrSensors+0x86>
					meas[dir][meas_count] = ADCB.CH0RES;
    36a0:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <__TEXT_REGION_LENGTH__+0x700250>
    36a4:	70 91 51 02 	lds	r23, 0x0251	; 0x800251 <__TEXT_REGION_LENGTH__+0x700251>
    36a8:	61 93       	st	Z+, r22
    36aa:	71 93       	st	Z+, r23
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    36ac:	e0 92 63 02 	sts	0x0263, r14	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    36b0:	ff be       	out	0x3f, r15	; 63
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    36b2:	3f 5f       	subi	r19, 0xFF	; 255
    36b4:	33 12       	cpse	r3, r19
    36b6:	e9 cf       	rjmp	.-46     	; 0x368a <getIrSensors+0x78>
    36b8:	40 0f       	add	r20, r16
    36ba:	51 1f       	adc	r21, r17
					ir_sense_channels[dir]->INTFLAGS=1;
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
    36bc:	f0 e2       	ldi	r31, 0x20	; 32
    36be:	a2 39       	cpi	r26, 0x92	; 146
    36c0:	bf 07       	cpc	r27, r31
    36c2:	11 f0       	breq	.+4      	; 0x36c8 <getIrSensors+0xb6>
    36c4:	6d 91       	ld	r22, X+
    36c6:	d3 cf       	rjmp	.-90     	; 0x366e <getIrSensors+0x5c>
    36c8:	54 01       	movw	r10, r8
    36ca:	24 e0       	ldi	r18, 0x04	; 4
    36cc:	a2 0e       	add	r10, r18
    36ce:	b1 1c       	adc	r11, r1
    36d0:	27 e7       	ldi	r18, 0x77	; 119
    36d2:	62 2e       	mov	r6, r18
    36d4:	22 e2       	ldi	r18, 0x22	; 34
    36d6:	72 2e       	mov	r7, r18
    36d8:	7c 01       	movw	r14, r24
    36da:	c1 2c       	mov	r12, r1
    36dc:	d1 2c       	mov	r13, r1
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++){
		if(meas_per_ch>2){
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
    36de:	3e ef       	ldi	r19, 0xFE	; 254
    36e0:	23 2e       	mov	r2, r19
    36e2:	23 0c       	add	r2, r3
    36e4:	21 c0       	rjmp	.+66     	; 0x3728 <getIrSensors+0x116>
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
    36e6:	f2 e0       	ldi	r31, 0x02	; 2
    36e8:	3f 16       	cp	r3, r31
    36ea:	09 f4       	brne	.+2      	; 0x36ee <getIrSensors+0xdc>
    36ec:	42 c0       	rjmp	.+132    	; 0x3772 <getIrSensors+0x160>
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
		else
			output_arr[dir] = meas[dir][0];
    36ee:	0c 9d       	mul	r16, r12
    36f0:	f0 01       	movw	r30, r0
    36f2:	0d 9d       	mul	r16, r13
    36f4:	f0 0d       	add	r31, r0
    36f6:	1c 9d       	mul	r17, r12
    36f8:	f0 0d       	add	r31, r0
    36fa:	11 24       	eor	r1, r1
    36fc:	e8 0d       	add	r30, r8
    36fe:	f9 1d       	adc	r31, r9
    3700:	80 81       	ld	r24, Z
    3702:	91 81       	ldd	r25, Z+1	; 0x01
    3704:	f7 01       	movw	r30, r14
    3706:	80 83       	st	Z, r24
    3708:	91 83       	std	Z+1, r25	; 0x01
    370a:	ff ef       	ldi	r31, 0xFF	; 255
    370c:	cf 1a       	sub	r12, r31
    370e:	df 0a       	sbc	r13, r31
    3710:	a0 0e       	add	r10, r16
    3712:	b1 1e       	adc	r11, r17
    3714:	22 e0       	ldi	r18, 0x02	; 2
    3716:	62 0e       	add	r6, r18
    3718:	71 1c       	adc	r7, r1
    371a:	32 e0       	ldi	r19, 0x02	; 2
    371c:	e3 0e       	add	r14, r19
    371e:	f1 1c       	adc	r15, r1
			}			
		}
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++){
    3720:	46 e0       	ldi	r20, 0x06	; 6
    3722:	c4 16       	cp	r12, r20
    3724:	d1 04       	cpc	r13, r1
    3726:	81 f0       	breq	.+32     	; 0x3748 <getIrSensors+0x136>
		if(meas_per_ch>2){
    3728:	32 e0       	ldi	r19, 0x02	; 2
    372a:	33 15       	cp	r19, r3
    372c:	e0 f6       	brcc	.-72     	; 0x36e6 <getIrSensors+0xd4>
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
    372e:	62 2d       	mov	r22, r2
    3730:	c5 01       	movw	r24, r10
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    3732:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <measFindMedian>
    3736:	f3 01       	movw	r30, r6
    3738:	20 81       	ld	r18, Z
    373a:	31 81       	ldd	r19, Z+1	; 0x01
    373c:	82 1b       	sub	r24, r18
    373e:	93 0b       	sbc	r25, r19
    3740:	f7 01       	movw	r30, r14
    3742:	80 83       	st	Z, r24
    3744:	91 83       	std	Z+1, r25	; 0x01
    3746:	e1 cf       	rjmp	.-62     	; 0x370a <getIrSensors+0xf8>
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    3748:	4d be       	out	0x3d, r4	; 61
    374a:	5e be       	out	0x3e, r5	; 62
    374c:	df 91       	pop	r29
    374e:	cf 91       	pop	r28
    3750:	1f 91       	pop	r17
    3752:	0f 91       	pop	r16
    3754:	ff 90       	pop	r15
    3756:	ef 90       	pop	r14
    3758:	df 90       	pop	r13
    375a:	cf 90       	pop	r12
    375c:	bf 90       	pop	r11
    375e:	af 90       	pop	r10
    3760:	9f 90       	pop	r9
    3762:	8f 90       	pop	r8
    3764:	7f 90       	pop	r7
    3766:	6f 90       	pop	r6
    3768:	5f 90       	pop	r5
    376a:	4f 90       	pop	r4
    376c:	3f 90       	pop	r3
    376e:	2f 90       	pop	r2
    3770:	08 95       	ret
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    3772:	61 e0       	ldi	r22, 0x01	; 1
    3774:	c5 01       	movw	r24, r10
    3776:	02 97       	sbiw	r24, 0x02	; 2
    3778:	dc cf       	rjmp	.-72     	; 0x3732 <getIrSensors+0x120>

0000377a <initIrBaselines>:
	scheduleTask(1000,initIrBaselines,NULL);
	schedulePeriodicTask(5407, updateIrBaselines, NULL);
}

void initIrBaselines(){
	getIrSensors(ir_sense_baseline, 13);
    377a:	6d e0       	ldi	r22, 0x0D	; 13
    377c:	87 e7       	ldi	r24, 0x77	; 119
    377e:	92 e2       	ldi	r25, 0x22	; 34
    3780:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <getIrSensors>

00003784 <updateIrBaselines>:
}

void updateIrBaselines(){
    3784:	ef 92       	push	r14
    3786:	ff 92       	push	r15
    3788:	0f 93       	push	r16
    378a:	1f 93       	push	r17
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
    3794:	2c 97       	sbiw	r28, 0x0c	; 12
    3796:	cd bf       	out	0x3d, r28	; 61
    3798:	de bf       	out	0x3e, r29	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    379a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    379c:	f8 94       	cli
		if(irIsBusy(ALL_DIRS)){
    379e:	8f e3       	ldi	r24, 0x3F	; 63
    37a0:	0e 94 2d 11 	call	0x225a	; 0x225a <irIsBusy>
    37a4:	81 11       	cpse	r24, r1
    37a6:	35 c0       	rjmp	.+106    	; 0x3812 <updateIrBaselines+0x8e>
			return;
		}
		hpIrBlock_bm=0x3F;
    37a8:	8f e3       	ldi	r24, 0x3F	; 63
    37aa:	80 93 bf 23 	sts	0x23BF, r24	; 0x8023bf <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    37ae:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    37b0:	8e 01       	movw	r16, r28
    37b2:	0f 5f       	subi	r16, 0xFF	; 255
    37b4:	1f 4f       	sbci	r17, 0xFF	; 255
    37b6:	37 e7       	ldi	r19, 0x77	; 119
    37b8:	e3 2e       	mov	r14, r19
    37ba:	32 e2       	ldi	r19, 0x22	; 34
    37bc:	f3 2e       	mov	r15, r19
    37be:	f7 01       	movw	r30, r14
    37c0:	d8 01       	movw	r26, r16
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
    37c2:	80 81       	ld	r24, Z
    37c4:	91 81       	ldd	r25, Z+1	; 0x01
    37c6:	8d 93       	st	X+, r24
    37c8:	9d 93       	st	X+, r25
		ir_sense_baseline[dir] = 0;
    37ca:	11 92       	st	Z+, r1
    37cc:	11 92       	st	Z+, r1
			return;
		}
		hpIrBlock_bm=0x3F;
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
    37ce:	82 e2       	ldi	r24, 0x22	; 34
    37d0:	e3 38       	cpi	r30, 0x83	; 131
    37d2:	f8 07       	cpc	r31, r24
    37d4:	b1 f7       	brne	.-20     	; 0x37c2 <updateIrBaselines+0x3e>
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	getIrSensors(ir_sense_baseline, 13);
    37d6:	6d e0       	ldi	r22, 0x0D	; 13
    37d8:	87 e7       	ldi	r24, 0x77	; 119
    37da:	92 e2       	ldi	r25, 0x22	; 34
    37dc:	0e 94 09 1b 	call	0x3612	; 0x3612 <getIrSensors>
    37e0:	0b c0       	rjmp	.+22     	; 0x37f8 <updateIrBaselines+0x74>
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    37e2:	95 95       	asr	r25
    37e4:	87 95       	ror	r24
    37e6:	f7 01       	movw	r30, r14
    37e8:	81 93       	st	Z+, r24
    37ea:	91 93       	st	Z+, r25
    37ec:	7f 01       	movw	r14, r30
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	getIrSensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
    37ee:	f3 e8       	ldi	r31, 0x83	; 131
    37f0:	ef 16       	cp	r14, r31
    37f2:	f2 e2       	ldi	r31, 0x22	; 34
    37f4:	ff 06       	cpc	r15, r31
    37f6:	c1 f0       	breq	.+48     	; 0x3828 <updateIrBaselines+0xa4>
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    37f8:	f8 01       	movw	r30, r16
    37fa:	21 91       	ld	r18, Z+
    37fc:	31 91       	ld	r19, Z+
    37fe:	8f 01       	movw	r16, r30
    3800:	f7 01       	movw	r30, r14
    3802:	80 81       	ld	r24, Z
    3804:	91 81       	ldd	r25, Z+1	; 0x01
    3806:	82 0f       	add	r24, r18
    3808:	93 1f       	adc	r25, r19
    380a:	97 ff       	sbrs	r25, 7
    380c:	ea cf       	rjmp	.-44     	; 0x37e2 <updateIrBaselines+0x5e>
    380e:	01 96       	adiw	r24, 0x01	; 1
    3810:	e8 cf       	rjmp	.-48     	; 0x37e2 <updateIrBaselines+0x5e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3812:	1f bf       	out	0x3f, r17	; 63
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		hpIrBlock_bm = 0;
	}
}
    3814:	2c 96       	adiw	r28, 0x0c	; 12
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	df 91       	pop	r29
    381c:	cf 91       	pop	r28
    381e:	1f 91       	pop	r17
    3820:	0f 91       	pop	r16
    3822:	ff 90       	pop	r15
    3824:	ef 90       	pop	r14
    3826:	08 95       	ret
	}
	getIrSensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3828:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    382a:	f8 94       	cli
		hpIrBlock_bm = 0;
    382c:	10 92 bf 23 	sts	0x23BF, r1	; 0x8023bf <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3830:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    3832:	f0 cf       	rjmp	.-32     	; 0x3814 <updateIrBaselines+0x90>

00003834 <checkCollisionValues>:
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
	}
	return dirs;
}

void checkCollisionValues(int16_t meas[6]){
    3834:	bf 92       	push	r11
    3836:	cf 92       	push	r12
    3838:	df 92       	push	r13
    383a:	ef 92       	push	r14
    383c:	ff 92       	push	r15
    383e:	0f 93       	push	r16
    3840:	1f 93       	push	r17
    3842:	cf 93       	push	r28
    3844:	df 93       	push	r29
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	68 97       	sbiw	r28, 0x18	; 24
    384c:	cd bf       	out	0x3d, r28	; 61
    384e:	de bf       	out	0x3e, r29	; 62
    3850:	b8 2e       	mov	r11, r24
    3852:	09 2f       	mov	r16, r25
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	//uint8_t dirs=0;
	if(irIsBusy(ALL_DIRS)){
    3854:	8f e3       	ldi	r24, 0x3F	; 63
    3856:	0e 94 2d 11 	call	0x225a	; 0x225a <irIsBusy>
    385a:	81 11       	cpse	r24, r1
    385c:	66 c0       	rjmp	.+204    	; 0x392a <checkCollisionValues+0xf6>
		printf_P(PSTR("IR Hardware busy. Can't check collisions.\r\n"));
		return;
	}
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	80 93 34 24 	sts	0x2434, r24	; 0x802434 <ir_rxtx+0x37>
    3864:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <ir_rxtx+0x6f>
    3868:	80 93 a4 24 	sts	0x24A4, r24	; 0x8024a4 <ir_rxtx+0xa7>
    386c:	80 93 dc 24 	sts	0x24DC, r24	; 0x8024dc <ir_rxtx+0xdf>
    3870:	80 93 14 25 	sts	0x2514, r24	; 0x802514 <ir_rxtx+0x117>
    3874:	80 93 4c 25 	sts	0x254C, r24	; 0x80254c <ir_rxtx+0x14f>

void irLedInit(void);
void setAllirPowers(uint16_t power);
void irLedOn(uint8_t direction);
void irLedOff(uint8_t direction);
inline uint16_t getAllirPowers(void){ return curr_ir_power; }
    3878:	c0 90 91 25 	lds	r12, 0x2591	; 0x802591 <curr_ir_power>
    387c:	d0 90 92 25 	lds	r13, 0x2592	; 0x802592 <curr_ir_power+0x1>
	uint16_t curr_power = getAllirPowers();
	setAllirPowers(256);
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	91 e0       	ldi	r25, 0x01	; 1
    3884:	0e 94 67 1a 	call	0x34ce	; 0x34ce <setAllirPowers>
	getIrSensors(baseline_meas, 5);
    3888:	7e 01       	movw	r14, r28
    388a:	8d e0       	ldi	r24, 0x0D	; 13
    388c:	e8 0e       	add	r14, r24
    388e:	f1 1c       	adc	r15, r1
    3890:	65 e0       	ldi	r22, 0x05	; 5
    3892:	c7 01       	movw	r24, r14
    3894:	0e 94 09 1b 	call	0x3612	; 0x3612 <getIrSensors>
	//printf("Coll    base: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", baseline_meas[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOn(i);
    3898:	10 e0       	ldi	r17, 0x00	; 0
    389a:	81 2f       	mov	r24, r17
    389c:	0e 94 03 1a 	call	0x3406	; 0x3406 <irLedOn>
    38a0:	1f 5f       	subi	r17, 0xFF	; 255
    38a2:	16 30       	cpi	r17, 0x06	; 6
    38a4:	d1 f7       	brne	.-12     	; 0x389a <checkCollisionValues+0x66>
    38a6:	af ec       	ldi	r26, 0xCF	; 207
    38a8:	b7 e0       	ldi	r27, 0x07	; 7
    38aa:	11 97       	sbiw	r26, 0x01	; 1
    38ac:	f1 f7       	brne	.-4      	; 0x38aa <checkCollisionValues+0x76>
    38ae:	00 c0       	rjmp	.+0      	; 0x38b0 <checkCollisionValues+0x7c>
    38b0:	00 00       	nop
	delay_us(250);	
	getIrSensors(measured_vals, 5);
    38b2:	65 e0       	ldi	r22, 0x05	; 5
    38b4:	ce 01       	movw	r24, r28
    38b6:	01 96       	adiw	r24, 0x01	; 1
    38b8:	0e 94 09 1b 	call	0x3612	; 0x3612 <getIrSensors>
	//printf("Coll results: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", measured_vals[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOff(i);
    38bc:	10 e0       	ldi	r17, 0x00	; 0
    38be:	81 2f       	mov	r24, r17
    38c0:	0e 94 3a 1a 	call	0x3474	; 0x3474 <irLedOff>
    38c4:	1f 5f       	subi	r17, 0xFF	; 255
    38c6:	16 30       	cpi	r17, 0x06	; 6
    38c8:	d1 f7       	brne	.-12     	; 0x38be <checkCollisionValues+0x8a>
    38ca:	fe 01       	movw	r30, r28
    38cc:	31 96       	adiw	r30, 0x01	; 1
    38ce:	97 01       	movw	r18, r14
    38d0:	6b 2d       	mov	r22, r11
    38d2:	70 2f       	mov	r23, r16
	for(uint8_t i=0;i<6;i++){
		meas[i] = (measured_vals[i]-baseline_meas[i]);
    38d4:	81 91       	ld	r24, Z+
    38d6:	91 91       	ld	r25, Z+
    38d8:	d9 01       	movw	r26, r18
    38da:	4d 91       	ld	r20, X+
    38dc:	5d 91       	ld	r21, X+
    38de:	9d 01       	movw	r18, r26
    38e0:	84 1b       	sub	r24, r20
    38e2:	95 0b       	sbc	r25, r21
    38e4:	db 01       	movw	r26, r22
    38e6:	8d 93       	st	X+, r24
    38e8:	9d 93       	st	X+, r25
    38ea:	bd 01       	movw	r22, r26
	getIrSensors(measured_vals, 5);
	//printf("Coll results: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", measured_vals[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOff(i);
	for(uint8_t i=0;i<6;i++){
    38ec:	ee 15       	cp	r30, r14
    38ee:	ff 05       	cpc	r31, r15
    38f0:	89 f7       	brne	.-30     	; 0x38d4 <checkCollisionValues+0xa0>
		meas[i] = (measured_vals[i]-baseline_meas[i]);
	}
	setAllirPowers(curr_power);
    38f2:	c6 01       	movw	r24, r12
    38f4:	0e 94 67 1a 	call	0x34ce	; 0x34ce <setAllirPowers>
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = 0;		
    38f8:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <ir_rxtx+0x37>
    38fc:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <ir_rxtx+0x6f>
    3900:	10 92 a4 24 	sts	0x24A4, r1	; 0x8024a4 <ir_rxtx+0xa7>
    3904:	10 92 dc 24 	sts	0x24DC, r1	; 0x8024dc <ir_rxtx+0xdf>
    3908:	10 92 14 25 	sts	0x2514, r1	; 0x802514 <ir_rxtx+0x117>
    390c:	10 92 4c 25 	sts	0x254C, r1	; 0x80254c <ir_rxtx+0x14f>
    3910:	68 96       	adiw	r28, 0x18	; 24
    3912:	cd bf       	out	0x3d, r28	; 61
    3914:	de bf       	out	0x3e, r29	; 62
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	1f 91       	pop	r17
    391c:	0f 91       	pop	r16
    391e:	ff 90       	pop	r15
    3920:	ef 90       	pop	r14
    3922:	df 90       	pop	r13
    3924:	cf 90       	pop	r12
    3926:	bf 90       	pop	r11
    3928:	08 95       	ret
void checkCollisionValues(int16_t meas[6]){
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	//uint8_t dirs=0;
	if(irIsBusy(ALL_DIRS)){
		printf_P(PSTR("IR Hardware busy. Can't check collisions.\r\n"));
    392a:	86 ee       	ldi	r24, 0xE6	; 230
    392c:	96 e0       	ldi	r25, 0x06	; 6
    392e:	9f 93       	push	r25
    3930:	8f 93       	push	r24
    3932:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
		return;
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	ea cf       	rjmp	.-44     	; 0x3910 <checkCollisionValues+0xdc>

0000393c <checkCollisions>:
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}

uint8_t checkCollisions(){
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	cd b7       	in	r28, 0x3d	; 61
    3942:	de b7       	in	r29, 0x3e	; 62
    3944:	2c 97       	sbiw	r28, 0x0c	; 12
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	de bf       	out	0x3e, r29	; 62
	int16_t meas[6];
	uint8_t dirs = 0;
	checkCollisionValues(meas);
    394a:	ce 01       	movw	r24, r28
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	0e 94 1a 1c 	call	0x3834	; 0x3834 <checkCollisionValues>
    3952:	fe 01       	movw	r30, r28
    3954:	31 96       	adiw	r30, 0x01	; 1
    3956:	a7 e7       	ldi	r26, 0x77	; 119
    3958:	b2 e2       	ldi	r27, 0x22	; 34
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	50 e0       	ldi	r21, 0x00	; 0
	//printf("\r\n");	
}

uint8_t checkCollisions(){
	int16_t meas[6];
	uint8_t dirs = 0;
    395e:	80 e0       	ldi	r24, 0x00	; 0
	checkCollisionValues(meas);
	for(uint8_t i=0;i<6;i++){
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
    3960:	61 91       	ld	r22, Z+
    3962:	71 91       	ld	r23, Z+
    3964:	2d 91       	ld	r18, X+
    3966:	3d 91       	ld	r19, X+
    3968:	62 0f       	add	r22, r18
    396a:	73 1f       	adc	r23, r19
    396c:	21 e0       	ldi	r18, 0x01	; 1
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	6f 3f       	cpi	r22, 0xFF	; 255
    3972:	77 40       	sbci	r23, 0x07	; 7
    3974:	14 f4       	brge	.+4      	; 0x397a <checkCollisions+0x3e>
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	04 2e       	mov	r0, r20
    397c:	01 c0       	rjmp	.+2      	; 0x3980 <checkCollisions+0x44>
    397e:	22 0f       	add	r18, r18
    3980:	0a 94       	dec	r0
    3982:	ea f7       	brpl	.-6      	; 0x397e <checkCollisions+0x42>
    3984:	82 2b       	or	r24, r18
    3986:	4f 5f       	subi	r20, 0xFF	; 255
    3988:	5f 4f       	sbci	r21, 0xFF	; 255

uint8_t checkCollisions(){
	int16_t meas[6];
	uint8_t dirs = 0;
	checkCollisionValues(meas);
	for(uint8_t i=0;i<6;i++){
    398a:	46 30       	cpi	r20, 0x06	; 6
    398c:	51 05       	cpc	r21, r1
    398e:	41 f7       	brne	.-48     	; 0x3960 <checkCollisions+0x24>
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
	}
	return dirs;
}
    3990:	2c 96       	adiw	r28, 0x0c	; 12
    3992:	cd bf       	out	0x3d, r28	; 61
    3994:	de bf       	out	0x3e, r29	; 62
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	08 95       	ret

0000399c <localizationInit>:
//static const Matrix xyMeasCovarClose  = {{100, 2, 0.5}, {2, 100, 0.75}, {0.5, 0.75, 0.05}};
//static const Matrix xyMeasCovarMed = {{500, 100, -4}, {100, 500, -0.5}, {-4, -0.5, 0.2}};
//static const Matrix xyMeasCovarFar = {{8000, -1000, -0.25}, {-1000, 8000, -10}, {-0.25, -10, 1}};

void localizationInit(){
	myPos.x = UNDF;
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	90 e8       	ldi	r25, 0x80	; 128
    39a0:	80 93 85 25 	sts	0x2585, r24	; 0x802585 <myPos>
    39a4:	90 93 86 25 	sts	0x2586, r25	; 0x802586 <myPos+0x1>
	myPos.y = UNDF;
    39a8:	80 93 87 25 	sts	0x2587, r24	; 0x802587 <myPos+0x2>
    39ac:	90 93 88 25 	sts	0x2588, r25	; 0x802588 <myPos+0x3>
	myPos.o = UNDF;
    39b0:	80 93 89 25 	sts	0x2589, r24	; 0x802589 <myPos+0x4>
    39b4:	90 93 8a 25 	sts	0x258A, r25	; 0x80258a <myPos+0x5>
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
    39b8:	10 92 b3 23 	sts	0x23B3, r1	; 0x8023b3 <myPosCovar>
    39bc:	10 92 b4 23 	sts	0x23B4, r1	; 0x8023b4 <myPosCovar+0x1>
    39c0:	10 92 b5 23 	sts	0x23B5, r1	; 0x8023b5 <myPosCovar+0x2>
    39c4:	10 92 b6 23 	sts	0x23B6, r1	; 0x8023b6 <myPosCovar+0x3>
    39c8:	10 92 b7 23 	sts	0x23B7, r1	; 0x8023b7 <myPosCovar+0x4>
    39cc:	10 92 b8 23 	sts	0x23B8, r1	; 0x8023b8 <myPosCovar+0x5>
    39d0:	10 92 b9 23 	sts	0x23B9, r1	; 0x8023b9 <myPosCovar+0x6>
    39d4:	10 92 ba 23 	sts	0x23BA, r1	; 0x8023ba <myPosCovar+0x7>
    39d8:	10 92 bb 23 	sts	0x23BB, r1	; 0x8023bb <myPosCovar+0x8>
    39dc:	10 92 bc 23 	sts	0x23BC, r1	; 0x8023bc <myPosCovar+0x9>
    39e0:	10 92 bd 23 	sts	0x23BD, r1	; 0x8023bd <myPosCovar+0xa>
    39e4:	10 92 be 23 	sts	0x23BE, r1	; 0x8023be <myPosCovar+0xb>
	}
	seedFlag = 0;
    39e8:	10 92 f8 23 	sts	0x23F8, r1	; 0x8023f8 <seedFlag>
    39ec:	80 91 af 23 	lds	r24, 0x23AF	; 0x8023af <droplet_ID>
    39f0:	90 91 b0 23 	lds	r25, 0x23B0	; 0x8023b0 <droplet_ID+0x1>
	for(uint8_t i=0;i<NUM_SEEDS;i++){
		if(getDropletID()==SEED_IDS[i]){
    39f4:	86 36       	cpi	r24, 0x66	; 102
    39f6:	2c e6       	ldi	r18, 0x6C	; 108
    39f8:	92 07       	cpc	r25, r18
    39fa:	e1 f1       	breq	.+120    	; 0x3a74 <localizationInit+0xd8>
    39fc:	81 3d       	cpi	r24, 0xD1	; 209
    39fe:	2c ec       	ldi	r18, 0xCC	; 204
    3a00:	92 07       	cpc	r25, r18
    3a02:	d1 f1       	breq	.+116    	; 0x3a78 <localizationInit+0xdc>
    3a04:	81 36       	cpi	r24, 0x61	; 97
    3a06:	23 e1       	ldi	r18, 0x13	; 19
    3a08:	92 07       	cpc	r25, r18
    3a0a:	c1 f1       	breq	.+112    	; 0x3a7c <localizationInit+0xe0>
    3a0c:	01 96       	adiw	r24, 0x01	; 1
    3a0e:	09 f0       	breq	.+2      	; 0x3a12 <localizationInit+0x76>
    3a10:	08 95       	ret
	myPos.o = UNDF;
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
	}
	seedFlag = 0;
	for(uint8_t i=0;i<NUM_SEEDS;i++){
    3a12:	83 e0       	ldi	r24, 0x03	; 3
		if(getDropletID()==SEED_IDS[i]){
    3a14:	90 e0       	ldi	r25, 0x00	; 0
			seedFlag = 1;
    3a16:	21 e0       	ldi	r18, 0x01	; 1
    3a18:	20 93 f8 23 	sts	0x23F8, r18	; 0x8023f8 <seedFlag>
			myPos.x = SEED_POS[i].x;
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	ee 0f       	add	r30, r30
    3a20:	ff 1f       	adc	r31, r31
    3a22:	e8 0f       	add	r30, r24
    3a24:	f9 1f       	adc	r31, r25
    3a26:	ee 0f       	add	r30, r30
    3a28:	ff 1f       	adc	r31, r31
    3a2a:	ee 56       	subi	r30, 0x6E	; 110
    3a2c:	ff 4d       	sbci	r31, 0xDF	; 223
    3a2e:	80 81       	ld	r24, Z
    3a30:	91 81       	ldd	r25, Z+1	; 0x01
    3a32:	80 93 85 25 	sts	0x2585, r24	; 0x802585 <myPos>
    3a36:	90 93 86 25 	sts	0x2586, r25	; 0x802586 <myPos+0x1>
			myPos.y = SEED_POS[i].y;
    3a3a:	82 81       	ldd	r24, Z+2	; 0x02
    3a3c:	93 81       	ldd	r25, Z+3	; 0x03
    3a3e:	80 93 87 25 	sts	0x2587, r24	; 0x802587 <myPos+0x2>
    3a42:	90 93 88 25 	sts	0x2588, r25	; 0x802588 <myPos+0x3>
			myPos.o = SEED_POS[i].o;
    3a46:	84 81       	ldd	r24, Z+4	; 0x04
    3a48:	95 81       	ldd	r25, Z+5	; 0x05
    3a4a:	80 93 89 25 	sts	0x2589, r24	; 0x802589 <myPos+0x4>
    3a4e:	90 93 8a 25 	sts	0x258A, r25	; 0x80258a <myPos+0x5>
			myPosCovar[0].u = 1; //the actual value used will be this*8
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	80 93 b3 23 	sts	0x23B3, r24	; 0x8023b3 <myPosCovar>
    3a5a:	90 93 b4 23 	sts	0x23B4, r25	; 0x8023b4 <myPosCovar+0x1>
			myPosCovar[3].u = 1; //the actual value used will be this*8
    3a5e:	80 93 b9 23 	sts	0x23B9, r24	; 0x8023b9 <myPosCovar+0x6>
    3a62:	90 93 ba 23 	sts	0x23BA, r25	; 0x8023ba <myPosCovar+0x7>
			myPosCovar[5].u = 16; //the actual value used will be this/256
    3a66:	80 e1       	ldi	r24, 0x10	; 16
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	80 93 bd 23 	sts	0x23BD, r24	; 0x8023bd <myPosCovar+0xa>
    3a6e:	90 93 be 23 	sts	0x23BE, r25	; 0x8023be <myPosCovar+0xb>
    3a72:	08 95       	ret
	myPos.o = UNDF;
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
	}
	seedFlag = 0;
	for(uint8_t i=0;i<NUM_SEEDS;i++){
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	ce cf       	rjmp	.-100    	; 0x3a14 <localizationInit+0x78>
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	cc cf       	rjmp	.-104    	; 0x3a14 <localizationInit+0x78>
    3a7c:	82 e0       	ldi	r24, 0x02	; 2
    3a7e:	ca cf       	rjmp	.-108    	; 0x3a14 <localizationInit+0x78>

00003a80 <stopMove>:
		printf("\r\n");
	}
	printf("\r\n");
}
void broadcastMotorAdjusts()
{
    3a80:	e0 e0       	ldi	r30, 0x00	; 0
    3a82:	f8 e0       	ldi	r31, 0x08	; 8
    3a84:	81 81       	ldd	r24, Z+1	; 0x01
    3a86:	8f 7c       	andi	r24, 0xCF	; 207
    3a88:	81 83       	std	Z+1, r24	; 0x01
    3a8a:	10 82       	st	Z, r1
    3a8c:	e0 e4       	ldi	r30, 0x40	; 64
    3a8e:	f8 e0       	ldi	r31, 0x08	; 8
    3a90:	81 81       	ldd	r24, Z+1	; 0x01
    3a92:	8f 7c       	andi	r24, 0xCF	; 207
    3a94:	81 83       	std	Z+1, r24	; 0x01
    3a96:	10 82       	st	Z, r1
    3a98:	e0 e0       	ldi	r30, 0x00	; 0
    3a9a:	f9 e0       	ldi	r31, 0x09	; 9
    3a9c:	81 81       	ldd	r24, Z+1	; 0x01
    3a9e:	8f 7c       	andi	r24, 0xCF	; 207
    3aa0:	81 83       	std	Z+1, r24	; 0x01
    3aa2:	10 82       	st	Z, r1
    3aa4:	83 e3       	ldi	r24, 0x33	; 51
    3aa6:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    3aaa:	83 e0       	ldi	r24, 0x03	; 3
    3aac:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    3ab0:	10 92 89 22 	sts	0x2289, r1	; 0x802289 <motor_status>
    3ab4:	80 91 87 22 	lds	r24, 0x2287	; 0x802287 <current_motor_task>
    3ab8:	90 91 88 22 	lds	r25, 0x2288	; 0x802288 <current_motor_task+0x1>
    3abc:	0e 94 3d 31 	call	0x627a	; 0x627a <removeTask>
    3ac0:	10 92 87 22 	sts	0x2287, r1	; 0x802287 <current_motor_task>
    3ac4:	10 92 88 22 	sts	0x2288, r1	; 0x802288 <current_motor_task+0x1>
    3ac8:	08 95       	ret

00003aca <moveSteps>:
    3aca:	8f 92       	push	r8
    3acc:	9f 92       	push	r9
    3ace:	af 92       	push	r10
    3ad0:	bf 92       	push	r11
    3ad2:	cf 92       	push	r12
    3ad4:	df 92       	push	r13
    3ad6:	ef 92       	push	r14
    3ad8:	ff 92       	push	r15
    3ada:	0f 93       	push	r16
    3adc:	1f 93       	push	r17
    3ade:	cf 93       	push	r28
    3ae0:	df 93       	push	r29
    3ae2:	cd b7       	in	r28, 0x3d	; 61
    3ae4:	de b7       	in	r29, 0x3e	; 62
    3ae6:	29 97       	sbiw	r28, 0x09	; 9
    3ae8:	cd bf       	out	0x3d, r28	; 61
    3aea:	de bf       	out	0x3e, r29	; 62
    3aec:	6b 01       	movw	r12, r22
    3aee:	90 91 89 22 	lds	r25, 0x2289	; 0x802289 <motor_status>
    3af2:	97 fd       	sbrc	r25, 7
    3af4:	1b c1       	rjmp	.+566    	; 0x3d2c <moveSteps+0x262>
    3af6:	98 2f       	mov	r25, r24
    3af8:	97 70       	andi	r25, 0x07	; 7
    3afa:	90 68       	ori	r25, 0x80	; 128
    3afc:	90 93 89 22 	sts	0x2289, r25	; 0x802289 <motor_status>
    3b00:	60 91 85 22 	lds	r22, 0x2285	; 0x802285 <motor_on_time>
    3b04:	70 91 86 22 	lds	r23, 0x2286	; 0x802286 <motor_on_time+0x1>
    3b08:	66 0f       	add	r22, r22
    3b0a:	77 1f       	adc	r23, r23
    3b0c:	62 95       	swap	r22
    3b0e:	72 95       	swap	r23
    3b10:	70 7f       	andi	r23, 0xF0	; 240
    3b12:	76 27       	eor	r23, r22
    3b14:	60 7f       	andi	r22, 0xF0	; 240
    3b16:	76 27       	eor	r23, r22
    3b18:	a0 90 83 22 	lds	r10, 0x2283	; 0x802283 <motor_off_time>
    3b1c:	b0 90 84 22 	lds	r11, 0x2284	; 0x802284 <motor_off_time+0x1>
    3b20:	aa 0c       	add	r10, r10
    3b22:	bb 1c       	adc	r11, r11
    3b24:	a2 94       	swap	r10
    3b26:	b2 94       	swap	r11
    3b28:	40 ef       	ldi	r20, 0xF0	; 240
    3b2a:	b4 22       	and	r11, r20
    3b2c:	ba 24       	eor	r11, r10
    3b2e:	a4 22       	and	r10, r20
    3b30:	ba 24       	eor	r11, r10
    3b32:	96 e0       	ldi	r25, 0x06	; 6
    3b34:	89 9f       	mul	r24, r25
    3b36:	f0 01       	movw	r30, r0
    3b38:	11 24       	eor	r1, r1
    3b3a:	df 01       	movw	r26, r30
    3b3c:	a2 5b       	subi	r26, 0xB2	; 178
    3b3e:	ba 4d       	sbci	r27, 0xDA	; 218
    3b40:	4d 01       	movw	r8, r26
    3b42:	de 01       	movw	r26, r28
    3b44:	11 96       	adiw	r26, 0x01	; 1
    3b46:	7e 01       	movw	r14, r28
    3b48:	e7 e0       	ldi	r30, 0x07	; 7
    3b4a:	ee 0e       	add	r14, r30
    3b4c:	f1 1c       	adc	r15, r1
    3b4e:	c7 01       	movw	r24, r14
    3b50:	00 e0       	ldi	r16, 0x00	; 0
    3b52:	10 e0       	ldi	r17, 0x00	; 0
    3b54:	f4 01       	movw	r30, r8
    3b56:	21 91       	ld	r18, Z+
    3b58:	31 91       	ld	r19, Z+
    3b5a:	4f 01       	movw	r8, r30
    3b5c:	21 15       	cp	r18, r1
    3b5e:	31 05       	cpc	r19, r1
    3b60:	09 f0       	breq	.+2      	; 0x3b64 <moveSteps+0x9a>
    3b62:	66 c0       	rjmp	.+204    	; 0x3c30 <moveSteps+0x166>
    3b64:	1d 92       	st	X+, r1
    3b66:	1c 92       	st	X, r1
    3b68:	11 97       	sbiw	r26, 0x01	; 1
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	10 82       	st	Z, r1
    3b6e:	12 96       	adiw	r26, 0x02	; 2
    3b70:	01 96       	adiw	r24, 0x01	; 1
    3b72:	ae 15       	cp	r26, r14
    3b74:	bf 05       	cpc	r27, r15
    3b76:	71 f7       	brne	.-36     	; 0x3b54 <moveSteps+0x8a>
    3b78:	00 93 26 09 	sts	0x0926, r16	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    3b7c:	10 93 27 09 	sts	0x0927, r17	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    3b80:	00 93 66 08 	sts	0x0866, r16	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    3b84:	10 93 67 08 	sts	0x0867, r17	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    3b88:	00 93 26 08 	sts	0x0826, r16	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    3b8c:	10 93 27 08 	sts	0x0827, r17	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    3b90:	e9 81       	ldd	r30, Y+1	; 0x01
    3b92:	fa 81       	ldd	r31, Y+2	; 0x02
    3b94:	e0 93 2a 08 	sts	0x082A, r30	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
    3b98:	f0 93 2b 08 	sts	0x082B, r31	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
    3b9c:	e0 93 28 08 	sts	0x0828, r30	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3ba0:	f0 93 29 08 	sts	0x0829, r31	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    3ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba8:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <__TEXT_REGION_LENGTH__+0x70086a>
    3bac:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <__TEXT_REGION_LENGTH__+0x70086b>
    3bb0:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    3bb4:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    3bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bba:	9e 81       	ldd	r25, Y+6	; 0x06
    3bbc:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3bc0:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    3bc4:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    3bc8:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    3bcc:	80 90 83 22 	lds	r8, 0x2283	; 0x802283 <motor_off_time>
    3bd0:	90 90 84 22 	lds	r9, 0x2284	; 0x802284 <motor_off_time+0x1>
    3bd4:	88 0c       	add	r8, r8
    3bd6:	99 1c       	adc	r9, r9
    3bd8:	82 94       	swap	r8
    3bda:	92 94       	swap	r9
    3bdc:	50 ef       	ldi	r21, 0xF0	; 240
    3bde:	95 22       	and	r9, r21
    3be0:	98 24       	eor	r9, r8
    3be2:	85 22       	and	r8, r21
    3be4:	98 24       	eor	r9, r8
    3be6:	5e 01       	movw	r10, r28
    3be8:	83 e0       	ldi	r24, 0x03	; 3
    3bea:	a8 0e       	add	r10, r24
    3bec:	b1 1c       	adc	r11, r1
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	40 e0       	ldi	r20, 0x00	; 0
    3bf4:	30 97       	sbiw	r30, 0x00	; 0
    3bf6:	a1 f0       	breq	.+40     	; 0x3c20 <moveSteps+0x156>
    3bf8:	c8 01       	movw	r24, r16
    3bfa:	82 1b       	sub	r24, r18
    3bfc:	93 0b       	sbc	r25, r19
    3bfe:	b8 01       	movw	r22, r16
    3c00:	0e 94 db 48 	call	0x91b6	; 0x91b6 <__udivmodhi4>
    3c04:	41 30       	cpi	r20, 0x01	; 1
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <moveSteps+0x140>
    3c08:	a9 c0       	rjmp	.+338    	; 0x3d5c <moveSteps+0x292>
    3c0a:	42 30       	cpi	r20, 0x02	; 2
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <moveSteps+0x146>
    3c0e:	92 c0       	rjmp	.+292    	; 0x3d34 <moveSteps+0x26a>
    3c10:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    3c14:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    3c18:	2e 0f       	add	r18, r30
    3c1a:	3f 1f       	adc	r19, r31
    3c1c:	28 0d       	add	r18, r8
    3c1e:	39 1d       	adc	r19, r9
    3c20:	4f 5f       	subi	r20, 0xFF	; 255
    3c22:	43 30       	cpi	r20, 0x03	; 3
    3c24:	c9 f0       	breq	.+50     	; 0x3c58 <moveSteps+0x18e>
    3c26:	d5 01       	movw	r26, r10
    3c28:	ed 91       	ld	r30, X+
    3c2a:	fd 91       	ld	r31, X+
    3c2c:	5d 01       	movw	r10, r26
    3c2e:	e2 cf       	rjmp	.-60     	; 0x3bf4 <moveSteps+0x12a>
    3c30:	a9 01       	movw	r20, r18
    3c32:	37 fd       	sbrc	r19, 7
    3c34:	8e c0       	rjmp	.+284    	; 0x3d52 <moveSteps+0x288>
    3c36:	46 0f       	add	r20, r22
    3c38:	57 1f       	adc	r21, r23
    3c3a:	4d 93       	st	X+, r20
    3c3c:	5c 93       	st	X, r21
    3c3e:	11 97       	sbiw	r26, 0x01	; 1
    3c40:	23 2f       	mov	r18, r19
    3c42:	22 0f       	add	r18, r18
    3c44:	22 0b       	sbc	r18, r18
    3c46:	22 0f       	add	r18, r18
    3c48:	2f 5f       	subi	r18, 0xFF	; 255
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	20 83       	st	Z, r18
    3c4e:	0a 0d       	add	r16, r10
    3c50:	1b 1d       	adc	r17, r11
    3c52:	04 0f       	add	r16, r20
    3c54:	15 1f       	adc	r17, r21
    3c56:	8b cf       	rjmp	.-234    	; 0x3b6e <moveSteps+0xa4>
    3c58:	02 17       	cp	r16, r18
    3c5a:	13 07       	cpc	r17, r19
    3c5c:	81 f0       	breq	.+32     	; 0x3c7e <moveSteps+0x1b4>
    3c5e:	1f 93       	push	r17
    3c60:	0f 93       	push	r16
    3c62:	3f 93       	push	r19
    3c64:	2f 93       	push	r18
    3c66:	81 ef       	ldi	r24, 0xF1	; 241
    3c68:	97 e0       	ldi	r25, 0x07	; 7
    3c6a:	9f 93       	push	r25
    3c6c:	8f 93       	push	r24
    3c6e:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	0f 90       	pop	r0
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	47 e0       	ldi	r20, 0x07	; 7
    3c84:	38 2f       	mov	r19, r24
    3c86:	f7 01       	movw	r30, r14
    3c88:	21 91       	ld	r18, Z+
    3c8a:	7f 01       	movw	r14, r30
    3c8c:	01 96       	adiw	r24, 0x01	; 1
    3c8e:	27 fd       	sbrc	r18, 7
    3c90:	13 c0       	rjmp	.+38     	; 0x3cb8 <moveSteps+0x1ee>
    3c92:	22 23       	and	r18, r18
    3c94:	01 f1       	breq	.+64     	; 0x3cd6 <moveSteps+0x20c>
    3c96:	31 30       	cpi	r19, 0x01	; 1
    3c98:	09 f4       	brne	.+2      	; 0x3c9c <moveSteps+0x1d2>
    3c9a:	65 c0       	rjmp	.+202    	; 0x3d66 <moveSteps+0x29c>
    3c9c:	32 30       	cpi	r19, 0x02	; 2
    3c9e:	09 f0       	breq	.+2      	; 0x3ca2 <moveSteps+0x1d8>
    3ca0:	4e c0       	rjmp	.+156    	; 0x3d3e <moveSteps+0x274>
    3ca2:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    3ca6:	80 62       	ori	r24, 0x20	; 32
    3ca8:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    3cac:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <__TEXT_REGION_LENGTH__+0x700902>
    3cb0:	87 e0       	ldi	r24, 0x07	; 7
    3cb2:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
    3cb6:	11 c0       	rjmp	.+34     	; 0x3cda <moveSteps+0x210>
    3cb8:	31 30       	cpi	r19, 0x01	; 1
    3cba:	09 f4       	brne	.+2      	; 0x3cbe <moveSteps+0x1f4>
    3cbc:	72 c0       	rjmp	.+228    	; 0x3da2 <moveSteps+0x2d8>
    3cbe:	32 30       	cpi	r19, 0x02	; 2
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <moveSteps+0x1fa>
    3cc2:	5b c0       	rjmp	.+182    	; 0x3d7a <moveSteps+0x2b0>
    3cc4:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    3cc8:	20 61       	ori	r18, 0x10	; 16
    3cca:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    3cce:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    3cd2:	40 93 00 08 	sts	0x0800, r20	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    3cd6:	83 30       	cpi	r24, 0x03	; 3
    3cd8:	a9 f6       	brne	.-86     	; 0x3c84 <moveSteps+0x1ba>
    3cda:	98 01       	movw	r18, r16
    3cdc:	d6 01       	movw	r26, r12
    3cde:	0e 94 2d 49 	call	0x925a	; 0x925a <__umulhisi3>
    3ce2:	25 e0       	ldi	r18, 0x05	; 5
    3ce4:	96 95       	lsr	r25
    3ce6:	87 95       	ror	r24
    3ce8:	77 95       	ror	r23
    3cea:	67 95       	ror	r22
    3cec:	2a 95       	dec	r18
    3cee:	d1 f7       	brne	.-12     	; 0x3ce4 <moveSteps+0x21a>
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	40 e4       	ldi	r20, 0x40	; 64
    3cf6:	5d e1       	ldi	r21, 0x1D	; 29
    3cf8:	0e 94 3c 33 	call	0x6678	; 0x6678 <scheduleTask>
    3cfc:	80 93 87 22 	sts	0x2287, r24	; 0x802287 <current_motor_task>
    3d00:	90 93 88 22 	sts	0x2288, r25	; 0x802288 <current_motor_task+0x1>
    3d04:	89 2b       	or	r24, r25
    3d06:	09 f4       	brne	.+2      	; 0x3d0a <moveSteps+0x240>
    3d08:	43 c0       	rjmp	.+134    	; 0x3d90 <moveSteps+0x2c6>
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	29 96       	adiw	r28, 0x09	; 9
    3d0e:	cd bf       	out	0x3d, r28	; 61
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	df 91       	pop	r29
    3d14:	cf 91       	pop	r28
    3d16:	1f 91       	pop	r17
    3d18:	0f 91       	pop	r16
    3d1a:	ff 90       	pop	r15
    3d1c:	ef 90       	pop	r14
    3d1e:	df 90       	pop	r13
    3d20:	cf 90       	pop	r12
    3d22:	bf 90       	pop	r11
    3d24:	af 90       	pop	r10
    3d26:	9f 90       	pop	r9
    3d28:	8f 90       	pop	r8
    3d2a:	08 95       	ret
    3d2c:	80 91 89 22 	lds	r24, 0x2289	; 0x802289 <motor_status>
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	ec cf       	rjmp	.-40     	; 0x3d0c <moveSteps+0x242>
    3d34:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <__TEXT_REGION_LENGTH__+0x700920>
    3d38:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <__TEXT_REGION_LENGTH__+0x700921>
    3d3c:	6d cf       	rjmp	.-294    	; 0x3c18 <moveSteps+0x14e>
    3d3e:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    3d42:	20 62       	ori	r18, 0x20	; 32
    3d44:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    3d48:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    3d4c:	40 93 00 08 	sts	0x0800, r20	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    3d50:	c2 cf       	rjmp	.-124    	; 0x3cd6 <moveSteps+0x20c>
    3d52:	44 27       	eor	r20, r20
    3d54:	55 27       	eor	r21, r21
    3d56:	42 1b       	sub	r20, r18
    3d58:	53 0b       	sbc	r21, r19
    3d5a:	6d cf       	rjmp	.-294    	; 0x3c36 <moveSteps+0x16c>
    3d5c:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    3d60:	90 93 61 08 	sts	0x0861, r25	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    3d64:	59 cf       	rjmp	.-334    	; 0x3c18 <moveSteps+0x14e>
    3d66:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    3d6a:	20 62       	ori	r18, 0x20	; 32
    3d6c:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    3d70:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    3d74:	40 93 40 08 	sts	0x0840, r20	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    3d78:	85 cf       	rjmp	.-246    	; 0x3c84 <moveSteps+0x1ba>
    3d7a:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    3d7e:	80 61       	ori	r24, 0x10	; 16
    3d80:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    3d84:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <__TEXT_REGION_LENGTH__+0x700902>
    3d88:	87 e0       	ldi	r24, 0x07	; 7
    3d8a:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
    3d8e:	a5 cf       	rjmp	.-182    	; 0x3cda <moveSteps+0x210>
    3d90:	87 ec       	ldi	r24, 0xC7	; 199
    3d92:	97 e0       	ldi	r25, 0x07	; 7
    3d94:	9f 93       	push	r25
    3d96:	8f 93       	push	r24
    3d98:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    3d9c:	0f 90       	pop	r0
    3d9e:	0f 90       	pop	r0
    3da0:	b4 cf       	rjmp	.-152    	; 0x3d0a <moveSteps+0x240>
    3da2:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    3da6:	20 61       	ori	r18, 0x10	; 16
    3da8:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    3dac:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    3db0:	40 93 40 08 	sts	0x0840, r20	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    3db4:	67 cf       	rjmp	.-306    	; 0x3c84 <moveSteps+0x1ba>

00003db6 <walk>:
    3db6:	cf 92       	push	r12
    3db8:	df 92       	push	r13
    3dba:	ef 92       	push	r14
    3dbc:	ff 92       	push	r15
    3dbe:	0f 93       	push	r16
    3dc0:	1f 93       	push	r17
    3dc2:	cf 93       	push	r28
    3dc4:	df 93       	push	r29
    3dc6:	18 2f       	mov	r17, r24
    3dc8:	eb 01       	movw	r28, r22
    3dca:	e8 2f       	mov	r30, r24
    3dcc:	f0 e0       	ldi	r31, 0x00	; 0
    3dce:	ee 0f       	add	r30, r30
    3dd0:	ff 1f       	adc	r31, r31
    3dd2:	e8 51       	subi	r30, 0x18	; 24
    3dd4:	fc 4d       	sbci	r31, 0xDC	; 220
    3dd6:	60 81       	ld	r22, Z
    3dd8:	71 81       	ldd	r23, Z+1	; 0x01
    3dda:	67 3e       	cpi	r22, 0xE7	; 231
    3ddc:	83 e0       	ldi	r24, 0x03	; 3
    3dde:	78 07       	cpc	r23, r24
    3de0:	2c f4       	brge	.+10     	; 0x3dec <walk+0x36>
    3de2:	68 31       	cpi	r22, 0x18	; 24
    3de4:	9c ef       	ldi	r25, 0xFC	; 252
    3de6:	79 07       	cpc	r23, r25
    3de8:	0c f0       	brlt	.+2      	; 0x3dec <walk+0x36>
    3dea:	43 c0       	rjmp	.+134    	; 0x3e72 <walk+0xbc>
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <__floatunsisf>
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	4a e7       	ldi	r20, 0x7A	; 122
    3dfa:	54 e4       	ldi	r21, 0x44	; 68
    3dfc:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    3e00:	6b 01       	movw	r12, r22
    3e02:	7c 01       	movw	r14, r24
    3e04:	be 01       	movw	r22, r28
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <__floatunsisf>
    3e0e:	a7 01       	movw	r20, r14
    3e10:	96 01       	movw	r18, r12
    3e12:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    3e16:	6b 01       	movw	r12, r22
    3e18:	7c 01       	movw	r14, r24
    3e1a:	8a e0       	ldi	r24, 0x0A	; 10
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    3e22:	c7 01       	movw	r24, r14
    3e24:	b6 01       	movw	r22, r12
    3e26:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    3e2a:	f6 2e       	mov	r15, r22
    3e2c:	07 2f       	mov	r16, r23
    3e2e:	7f 93       	push	r23
    3e30:	6f 93       	push	r22
    3e32:	df 93       	push	r29
    3e34:	cf 93       	push	r28
    3e36:	1f 92       	push	r1
    3e38:	1f 93       	push	r17
    3e3a:	8f e4       	ldi	r24, 0x4F	; 79
    3e3c:	97 e0       	ldi	r25, 0x07	; 7
    3e3e:	9f 93       	push	r25
    3e40:	8f 93       	push	r24
    3e42:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    3e46:	8a e0       	ldi	r24, 0x0A	; 10
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    3e4e:	8d b7       	in	r24, 0x3d	; 61
    3e50:	9e b7       	in	r25, 0x3e	; 62
    3e52:	08 96       	adiw	r24, 0x08	; 8
    3e54:	8d bf       	out	0x3d, r24	; 61
    3e56:	9e bf       	out	0x3e, r25	; 62
    3e58:	6f 2d       	mov	r22, r15
    3e5a:	70 2f       	mov	r23, r16
    3e5c:	81 2f       	mov	r24, r17
    3e5e:	df 91       	pop	r29
    3e60:	cf 91       	pop	r28
    3e62:	1f 91       	pop	r17
    3e64:	0f 91       	pop	r16
    3e66:	ff 90       	pop	r15
    3e68:	ef 90       	pop	r14
    3e6a:	df 90       	pop	r13
    3e6c:	cf 90       	pop	r12
    3e6e:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <moveSteps>
    3e72:	8d e8       	ldi	r24, 0x8D	; 141
    3e74:	97 e0       	ldi	r25, 0x07	; 7
    3e76:	9f 93       	push	r25
    3e78:	8f 93       	push	r24
    3e7a:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    3e7e:	0f 90       	pop	r0
    3e80:	0f 90       	pop	r0
    3e82:	16 30       	cpi	r17, 0x06	; 6
    3e84:	48 f4       	brcc	.+18     	; 0x3e98 <walk+0xe2>
    3e86:	8a e9       	ldi	r24, 0x9A	; 154
    3e88:	c8 2e       	mov	r12, r24
    3e8a:	89 e9       	ldi	r24, 0x99	; 153
    3e8c:	d8 2e       	mov	r13, r24
    3e8e:	89 e1       	ldi	r24, 0x19	; 25
    3e90:	e8 2e       	mov	r14, r24
    3e92:	8f e3       	ldi	r24, 0x3F	; 63
    3e94:	f8 2e       	mov	r15, r24
    3e96:	b6 cf       	rjmp	.-148    	; 0x3e04 <walk+0x4e>
    3e98:	c1 2c       	mov	r12, r1
    3e9a:	d1 2c       	mov	r13, r1
    3e9c:	e1 2c       	mov	r14, r1
    3e9e:	90 e4       	ldi	r25, 0x40	; 64
    3ea0:	f9 2e       	mov	r15, r25
    3ea2:	b0 cf       	rjmp	.-160    	; 0x3e04 <walk+0x4e>

00003ea4 <setMMperKilostep>:
    3ea4:	e8 2f       	mov	r30, r24
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	ee 0f       	add	r30, r30
    3eaa:	ff 1f       	adc	r31, r31
    3eac:	e8 51       	subi	r30, 0x18	; 24
    3eae:	fc 4d       	sbci	r31, 0xDC	; 220
    3eb0:	60 83       	st	Z, r22
    3eb2:	71 83       	std	Z+1, r23	; 0x01
    3eb4:	08 95       	ret

00003eb6 <readMotorSettings>:
    3eb6:	df 92       	push	r13
    3eb8:	ef 92       	push	r14
    3eba:	ff 92       	push	r15
    3ebc:	0f 93       	push	r16
    3ebe:	1f 93       	push	r17
    3ec0:	cf 93       	push	r28
    3ec2:	df 93       	push	r29
    3ec4:	50 e1       	ldi	r21, 0x10	; 16
    3ec6:	e5 2e       	mov	r14, r21
    3ec8:	f1 2c       	mov	r15, r1
    3eca:	87 01       	movw	r16, r14
    3ecc:	02 5c       	subi	r16, 0xC2	; 194
    3ece:	1a 4d       	sbci	r17, 0xDA	; 218
    3ed0:	e7 01       	movw	r28, r14
    3ed2:	26 96       	adiw	r28, 0x06	; 6
    3ed4:	c7 01       	movw	r24, r14
    3ed6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <EEPROM_read_byte>
    3eda:	d8 2e       	mov	r13, r24
    3edc:	c7 01       	movw	r24, r14
    3ede:	01 96       	adiw	r24, 0x01	; 1
    3ee0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <EEPROM_read_byte>
    3ee4:	2d 2d       	mov	r18, r13
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	32 2f       	mov	r19, r18
    3eea:	22 27       	eor	r18, r18
    3eec:	28 2b       	or	r18, r24
    3eee:	f8 01       	movw	r30, r16
    3ef0:	21 93       	st	Z+, r18
    3ef2:	31 93       	st	Z+, r19
    3ef4:	8f 01       	movw	r16, r30
    3ef6:	f2 e0       	ldi	r31, 0x02	; 2
    3ef8:	ef 0e       	add	r14, r31
    3efa:	f1 1c       	adc	r15, r1
    3efc:	ec 16       	cp	r14, r28
    3efe:	fd 06       	cpc	r15, r29
    3f00:	49 f7       	brne	.-46     	; 0x3ed4 <readMotorSettings+0x1e>
    3f02:	7e 01       	movw	r14, r28
    3f04:	c0 34       	cpi	r28, 0x40	; 64
    3f06:	d1 05       	cpc	r29, r1
    3f08:	01 f7       	brne	.-64     	; 0x3eca <readMotorSettings+0x14>
    3f0a:	28 ee       	ldi	r18, 0xE8	; 232
    3f0c:	e2 2e       	mov	r14, r18
    3f0e:	23 e2       	ldi	r18, 0x23	; 35
    3f10:	f2 2e       	mov	r15, r18
    3f12:	ce 01       	movw	r24, r28
    3f14:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <EEPROM_read_byte>
    3f18:	18 2f       	mov	r17, r24
    3f1a:	ce 01       	movw	r24, r28
    3f1c:	01 96       	adiw	r24, 0x01	; 1
    3f1e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <EEPROM_read_byte>
    3f22:	21 2f       	mov	r18, r17
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	32 2f       	mov	r19, r18
    3f28:	22 27       	eor	r18, r18
    3f2a:	28 2b       	or	r18, r24
    3f2c:	f7 01       	movw	r30, r14
    3f2e:	21 93       	st	Z+, r18
    3f30:	31 93       	st	Z+, r19
    3f32:	7f 01       	movw	r14, r30
    3f34:	22 96       	adiw	r28, 0x02	; 2
    3f36:	c0 35       	cpi	r28, 0x50	; 80
    3f38:	d1 05       	cpc	r29, r1
    3f3a:	59 f7       	brne	.-42     	; 0x3f12 <readMotorSettings+0x5c>
    3f3c:	df 91       	pop	r29
    3f3e:	cf 91       	pop	r28
    3f40:	1f 91       	pop	r17
    3f42:	0f 91       	pop	r16
    3f44:	ff 90       	pop	r15
    3f46:	ef 90       	pop	r14
    3f48:	df 90       	pop	r13
    3f4a:	08 95       	ret

00003f4c <motorInit>:
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	e0 e4       	ldi	r30, 0x40	; 64
    3f52:	f6 e0       	ldi	r31, 0x06	; 6
    3f54:	83 e3       	ldi	r24, 0x33	; 51
    3f56:	81 83       	std	Z+1, r24	; 0x01
    3f58:	a0 e6       	ldi	r26, 0x60	; 96
    3f5a:	b6 e0       	ldi	r27, 0x06	; 6
    3f5c:	83 e0       	ldi	r24, 0x03	; 3
    3f5e:	11 96       	adiw	r26, 0x01	; 1
    3f60:	8c 93       	st	X, r24
    3f62:	11 97       	sbiw	r26, 0x01	; 1
    3f64:	c0 e0       	ldi	r28, 0x00	; 0
    3f66:	d8 e0       	ldi	r29, 0x08	; 8
    3f68:	18 82       	st	Y, r1
    3f6a:	89 83       	std	Y+1, r24	; 0x01
    3f6c:	c0 e4       	ldi	r28, 0x40	; 64
    3f6e:	d8 e0       	ldi	r29, 0x08	; 8
    3f70:	18 82       	st	Y, r1
    3f72:	89 83       	std	Y+1, r24	; 0x01
    3f74:	c0 e0       	ldi	r28, 0x00	; 0
    3f76:	d9 e0       	ldi	r29, 0x09	; 9
    3f78:	18 82       	st	Y, r1
    3f7a:	89 83       	std	Y+1, r24	; 0x01
    3f7c:	90 e4       	ldi	r25, 0x40	; 64
    3f7e:	90 8b       	std	Z+16, r25	; 0x10
    3f80:	91 8b       	std	Z+17, r25	; 0x11
    3f82:	94 8b       	std	Z+20, r25	; 0x14
    3f84:	95 8b       	std	Z+21, r25	; 0x15
    3f86:	50 96       	adiw	r26, 0x10	; 16
    3f88:	9c 93       	st	X, r25
    3f8a:	50 97       	sbiw	r26, 0x10	; 16
    3f8c:	51 96       	adiw	r26, 0x11	; 17
    3f8e:	9c 93       	st	X, r25
    3f90:	51 97       	sbiw	r26, 0x11	; 17
    3f92:	86 83       	std	Z+6, r24	; 0x06
    3f94:	90 e3       	ldi	r25, 0x30	; 48
    3f96:	96 83       	std	Z+6, r25	; 0x06
    3f98:	16 96       	adiw	r26, 0x06	; 6
    3f9a:	8c 93       	st	X, r24
    3f9c:	10 92 89 22 	sts	0x2289, r1	; 0x802289 <motor_status>
    3fa0:	84 e1       	ldi	r24, 0x14	; 20
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	80 93 85 22 	sts	0x2285, r24	; 0x802285 <motor_on_time>
    3fa8:	90 93 86 22 	sts	0x2286, r25	; 0x802286 <motor_on_time+0x1>
    3fac:	88 e2       	ldi	r24, 0x28	; 40
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	80 93 83 22 	sts	0x2283, r24	; 0x802283 <motor_off_time>
    3fb4:	90 93 84 22 	sts	0x2284, r25	; 0x802284 <motor_off_time+0x1>
    3fb8:	df 91       	pop	r29
    3fba:	cf 91       	pop	r28
    3fbc:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <readMotorSettings>

00003fc0 <writeMotorSettings>:
    3fc0:	df 92       	push	r13
    3fc2:	ef 92       	push	r14
    3fc4:	ff 92       	push	r15
    3fc6:	0f 93       	push	r16
    3fc8:	1f 93       	push	r17
    3fca:	cf 93       	push	r28
    3fcc:	df 93       	push	r29
    3fce:	c0 e1       	ldi	r28, 0x10	; 16
    3fd0:	d0 e0       	ldi	r29, 0x00	; 0
    3fd2:	8e 01       	movw	r16, r28
    3fd4:	02 5c       	subi	r16, 0xC2	; 194
    3fd6:	1a 4d       	sbci	r17, 0xDA	; 218
    3fd8:	7e 01       	movw	r14, r28
    3fda:	86 e0       	ldi	r24, 0x06	; 6
    3fdc:	e8 0e       	add	r14, r24
    3fde:	f1 1c       	adc	r15, r1
    3fe0:	f8 01       	movw	r30, r16
    3fe2:	d0 80       	ld	r13, Z
    3fe4:	61 81       	ldd	r22, Z+1	; 0x01
    3fe6:	0e 5f       	subi	r16, 0xFE	; 254
    3fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fea:	ce 01       	movw	r24, r28
    3fec:	0e 94 87 0a 	call	0x150e	; 0x150e <EEPROM_write_byte>
    3ff0:	6d 2d       	mov	r22, r13
    3ff2:	ce 01       	movw	r24, r28
    3ff4:	01 96       	adiw	r24, 0x01	; 1
    3ff6:	0e 94 87 0a 	call	0x150e	; 0x150e <EEPROM_write_byte>
    3ffa:	22 96       	adiw	r28, 0x02	; 2
    3ffc:	ce 15       	cp	r28, r14
    3ffe:	df 05       	cpc	r29, r15
    4000:	79 f7       	brne	.-34     	; 0x3fe0 <writeMotorSettings+0x20>
    4002:	e7 01       	movw	r28, r14
    4004:	f0 e4       	ldi	r31, 0x40	; 64
    4006:	ef 16       	cp	r14, r31
    4008:	f1 04       	cpc	r15, r1
    400a:	19 f7       	brne	.-58     	; 0x3fd2 <writeMotorSettings+0x12>
    400c:	c8 ee       	ldi	r28, 0xE8	; 232
    400e:	d3 e2       	ldi	r29, 0x23	; 35
    4010:	18 81       	ld	r17, Y
    4012:	69 81       	ldd	r22, Y+1	; 0x01
    4014:	22 96       	adiw	r28, 0x02	; 2
    4016:	c7 01       	movw	r24, r14
    4018:	0e 94 87 0a 	call	0x150e	; 0x150e <EEPROM_write_byte>
    401c:	61 2f       	mov	r22, r17
    401e:	c7 01       	movw	r24, r14
    4020:	01 96       	adiw	r24, 0x01	; 1
    4022:	0e 94 87 0a 	call	0x150e	; 0x150e <EEPROM_write_byte>
    4026:	e2 e0       	ldi	r30, 0x02	; 2
    4028:	ee 0e       	add	r14, r30
    402a:	f1 1c       	adc	r15, r1
    402c:	f0 e5       	ldi	r31, 0x50	; 80
    402e:	ef 16       	cp	r14, r31
    4030:	f1 04       	cpc	r15, r1
    4032:	71 f7       	brne	.-36     	; 0x4010 <__stack+0x11>
    4034:	df 91       	pop	r29
    4036:	cf 91       	pop	r28
    4038:	1f 91       	pop	r17
    403a:	0f 91       	pop	r16
    403c:	ff 90       	pop	r15
    403e:	ef 90       	pop	r14
    4040:	df 90       	pop	r13
    4042:	08 95       	ret

00004044 <printMotorValues>:
    4044:	8f 92       	push	r8
    4046:	9f 92       	push	r9
    4048:	af 92       	push	r10
    404a:	bf 92       	push	r11
    404c:	cf 92       	push	r12
    404e:	df 92       	push	r13
    4050:	ef 92       	push	r14
    4052:	ff 92       	push	r15
    4054:	1f 93       	push	r17
    4056:	cf 93       	push	r28
    4058:	df 93       	push	r29
    405a:	80 e4       	ldi	r24, 0x40	; 64
    405c:	97 e0       	ldi	r25, 0x07	; 7
    405e:	9f 93       	push	r25
    4060:	8f 93       	push	r24
    4062:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    4066:	8e e4       	ldi	r24, 0x4E	; 78
    4068:	a8 2e       	mov	r10, r24
    406a:	85 e2       	ldi	r24, 0x25	; 37
    406c:	b8 2e       	mov	r11, r24
    406e:	0f 90       	pop	r0
    4070:	0f 90       	pop	r0
    4072:	c1 2c       	mov	r12, r1
    4074:	d1 2c       	mov	r13, r1
    4076:	95 e3       	ldi	r25, 0x35	; 53
    4078:	89 2e       	mov	r8, r25
    407a:	97 e0       	ldi	r25, 0x07	; 7
    407c:	99 2e       	mov	r9, r25
    407e:	2a ea       	ldi	r18, 0xAA	; 170
    4080:	e2 2e       	mov	r14, r18
    4082:	20 e2       	ldi	r18, 0x20	; 32
    4084:	f2 2e       	mov	r15, r18
    4086:	df 92       	push	r13
    4088:	cf 92       	push	r12
    408a:	9f 92       	push	r9
    408c:	8f 92       	push	r8
    408e:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    4092:	0f 90       	pop	r0
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
    4098:	0f 90       	pop	r0
    409a:	e5 01       	movw	r28, r10
    409c:	13 e0       	ldi	r17, 0x03	; 3
    409e:	88 81       	ld	r24, Y
    40a0:	99 81       	ldd	r25, Y+1	; 0x01
    40a2:	22 96       	adiw	r28, 0x02	; 2
    40a4:	9f 93       	push	r25
    40a6:	8f 93       	push	r24
    40a8:	ff 92       	push	r15
    40aa:	ef 92       	push	r14
    40ac:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <printf>
    40b0:	11 50       	subi	r17, 0x01	; 1
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	0f 90       	pop	r0
    40b8:	0f 90       	pop	r0
    40ba:	89 f7       	brne	.-30     	; 0x409e <printMotorValues+0x5a>
    40bc:	86 e9       	ldi	r24, 0x96	; 150
    40be:	91 e2       	ldi	r25, 0x21	; 33
    40c0:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <puts>
    40c4:	8f ef       	ldi	r24, 0xFF	; 255
    40c6:	c8 1a       	sub	r12, r24
    40c8:	d8 0a       	sbc	r13, r24
    40ca:	86 e0       	ldi	r24, 0x06	; 6
    40cc:	a8 0e       	add	r10, r24
    40ce:	b1 1c       	adc	r11, r1
    40d0:	88 e0       	ldi	r24, 0x08	; 8
    40d2:	c8 16       	cp	r12, r24
    40d4:	d1 04       	cpc	r13, r1
    40d6:	b9 f6       	brne	.-82     	; 0x4086 <printMotorValues+0x42>
    40d8:	86 e9       	ldi	r24, 0x96	; 150
    40da:	91 e2       	ldi	r25, 0x21	; 33
    40dc:	df 91       	pop	r29
    40de:	cf 91       	pop	r28
    40e0:	1f 91       	pop	r17
    40e2:	ff 90       	pop	r15
    40e4:	ef 90       	pop	r14
    40e6:	df 90       	pop	r13
    40e8:	cf 90       	pop	r12
    40ea:	bf 90       	pop	r11
    40ec:	af 90       	pop	r10
    40ee:	9f 90       	pop	r9
    40f0:	8f 90       	pop	r8
    40f2:	0c 94 cc 4d 	jmp	0x9b98	; 0x9b98 <puts>

000040f6 <printDistPerStep>:
	// TODO: Deprecated?
}

void printDistPerStep()
{
    40f6:	ef 92       	push	r14
    40f8:	ff 92       	push	r15
    40fa:	0f 93       	push	r16
    40fc:	1f 93       	push	r17
    40fe:	cf 93       	push	r28
    4100:	df 93       	push	r29
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
    4102:	8c e1       	ldi	r24, 0x1C	; 28
    4104:	97 e0       	ldi	r25, 0x07	; 7
    4106:	9f 93       	push	r25
    4108:	8f 93       	push	r24
    410a:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    410e:	08 ee       	ldi	r16, 0xE8	; 232
    4110:	13 e2       	ldi	r17, 0x23	; 35
    4112:	0f 90       	pop	r0
    4114:	0f 90       	pop	r0
    4116:	c0 e0       	ldi	r28, 0x00	; 0
    4118:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t direction = 0 ; direction<8; direction++)
	{
		printf_P(PSTR("\t%hu\t%u\r\n"), direction, mmPerKilostep[direction]);	
    411a:	82 e1       	ldi	r24, 0x12	; 18
    411c:	e8 2e       	mov	r14, r24
    411e:	87 e0       	ldi	r24, 0x07	; 7
    4120:	f8 2e       	mov	r15, r24
    4122:	f8 01       	movw	r30, r16
    4124:	80 81       	ld	r24, Z
    4126:	91 81       	ldd	r25, Z+1	; 0x01
    4128:	0e 5f       	subi	r16, 0xFE	; 254
    412a:	1f 4f       	sbci	r17, 0xFF	; 255
    412c:	9f 93       	push	r25
    412e:	8f 93       	push	r24
    4130:	df 93       	push	r29
    4132:	cf 93       	push	r28
    4134:	ff 92       	push	r15
    4136:	ef 92       	push	r14
    4138:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    413c:	21 96       	adiw	r28, 0x01	; 1
}

void printDistPerStep()
{
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
	for(uint8_t direction = 0 ; direction<8; direction++)
    413e:	0f 90       	pop	r0
    4140:	0f 90       	pop	r0
    4142:	0f 90       	pop	r0
    4144:	0f 90       	pop	r0
    4146:	0f 90       	pop	r0
    4148:	0f 90       	pop	r0
    414a:	c8 30       	cpi	r28, 0x08	; 8
    414c:	d1 05       	cpc	r29, r1
    414e:	49 f7       	brne	.-46     	; 0x4122 <printDistPerStep+0x2c>
	{
		printf_P(PSTR("\t%hu\t%u\r\n"), direction, mmPerKilostep[direction]);	
	}
}
    4150:	df 91       	pop	r29
    4152:	cf 91       	pop	r28
    4154:	1f 91       	pop	r17
    4156:	0f 91       	pop	r16
    4158:	ff 90       	pop	r15
    415a:	ef 90       	pop	r14
    415c:	08 95       	ret

0000415e <pc_comm_putchar>:
				
	serial_in_index = temp_index;
}

static int pc_comm_putchar(char c, FILE *stream __attribute__ ((unused))){
	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
    415e:	90 91 b1 09 	lds	r25, 0x09B1	; 0x8009b1 <__TEXT_REGION_LENGTH__+0x7009b1>
    4162:	95 ff       	sbrs	r25, 5
    4164:	fc cf       	rjmp	.-8      	; 0x415e <pc_comm_putchar>
	PC_USART.DATA = c;
    4166:	80 93 b0 09 	sts	0x09B0, r24	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	return 1;
}
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	08 95       	ret

00004170 <pcCommInit>:
static int pc_comm_putchar(char c, FILE *stream);
static void handle_up_arrow(void);
static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);

void pcCommInit(){
	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
    4170:	e0 e6       	ldi	r30, 0x60	; 96
    4172:	f6 e0       	ldi	r31, 0x06	; 6
    4174:	80 e8       	ldi	r24, 0x80	; 128
    4176:	81 83       	std	Z+1, r24	; 0x01
	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
    4178:	80 e4       	ldi	r24, 0x40	; 64
    417a:	82 83       	std	Z+2, r24	; 0x02

	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
    417c:	e0 eb       	ldi	r30, 0xB0	; 176
    417e:	f9 e0       	ldi	r31, 0x09	; 9
    4180:	83 e0       	ldi	r24, 0x03	; 3
    4182:	85 83       	std	Z+5, r24	; 0x05

	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
    4184:	87 e1       	ldi	r24, 0x17	; 23
    4186:	86 83       	std	Z+6, r24	; 0x06
	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
    4188:	84 ea       	ldi	r24, 0xA4	; 164
    418a:	87 83       	std	Z+7, r24	; 0x07

	PC_USART.CTRLB |= USART_RXEN_bm;
    418c:	84 81       	ldd	r24, Z+4	; 0x04
    418e:	80 61       	ori	r24, 0x10	; 16
    4190:	84 83       	std	Z+4, r24	; 0x04
	PC_USART.CTRLB |= USART_TXEN_bm;
    4192:	84 81       	ldd	r24, Z+4	; 0x04
    4194:	88 60       	ori	r24, 0x08	; 8
    4196:	84 83       	std	Z+4, r24	; 0x04

	stdout = &mystdout;
    4198:	82 e1       	ldi	r24, 0x12	; 18
    419a:	90 e2       	ldi	r25, 0x20	; 32
    419c:	80 93 99 25 	sts	0x2599, r24	; 0x802599 <__iob+0x2>
    41a0:	90 93 9a 25 	sts	0x259A, r25	; 0x80259a <__iob+0x3>
	serial_in_index = 0;
    41a4:	10 92 8a 22 	sts	0x228A, r1	; 0x80228a <serial_in_index>
    41a8:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <serial_in_index+0x1>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
    41ac:	80 e2       	ldi	r24, 0x20	; 32
    41ae:	83 83       	std	Z+3, r24	; 0x03
	printf("\n");
    41b0:	8a e0       	ldi	r24, 0x0A	; 10
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	0c 94 c6 4d 	jmp	0x9b8c	; 0x9b8c <putchar>

000041b8 <__vector_91>:
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    41b8:	1f 92       	push	r1
    41ba:	0f 92       	push	r0
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	0f 92       	push	r0
    41c0:	11 24       	eor	r1, r1
    41c2:	0b b6       	in	r0, 0x3b	; 59
    41c4:	0f 92       	push	r0
    41c6:	2f 93       	push	r18
    41c8:	3f 93       	push	r19
    41ca:	4f 93       	push	r20
    41cc:	5f 93       	push	r21
    41ce:	6f 93       	push	r22
    41d0:	7f 93       	push	r23
    41d2:	8f 93       	push	r24
    41d4:	9f 93       	push	r25
    41d6:	af 93       	push	r26
    41d8:	bf 93       	push	r27
    41da:	cf 93       	push	r28
    41dc:	ef 93       	push	r30
    41de:	ff 93       	push	r31

static void handle_serial_input(void){
	char data = PC_USART.DATA;
    41e0:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	if(escaped_arrow==1){
    41e4:	90 91 8c 22 	lds	r25, 0x228C	; 0x80228c <escaped_arrow>
    41e8:	91 30       	cpi	r25, 0x01	; 1
    41ea:	09 f4       	brne	.+2      	; 0x41ee <__vector_91+0x36>
    41ec:	47 c0       	rjmp	.+142    	; 0x427c <__vector_91+0xc4>
		if(data == 65){
			handle_up_arrow();
		}
		escaped_arrow=0;
	}else if(escaped){
    41ee:	90 91 8d 22 	lds	r25, 0x228D	; 0x80228d <escaped>
    41f2:	91 11       	cpse	r25, r1
    41f4:	28 c0       	rjmp	.+80     	; 0x4246 <__vector_91+0x8e>
		if(data == 91){
			escaped_arrow=1;	
		}
		escaped=0;
	}else if(data == '\r' || data == '\n'){ //We got the newline character.
    41f6:	8d 30       	cpi	r24, 0x0D	; 13
    41f8:	09 f4       	brne	.+2      	; 0x41fc <__vector_91+0x44>
    41fa:	59 c0       	rjmp	.+178    	; 0x42ae <__vector_91+0xf6>
    41fc:	8a 30       	cpi	r24, 0x0A	; 10
    41fe:	09 f4       	brne	.+2      	; 0x4202 <__vector_91+0x4a>
    4200:	56 c0       	rjmp	.+172    	; 0x42ae <__vector_91+0xf6>
		printf("\r\n");
		serial_in_buffer[serial_in_index]='\0';
		handleSerialCommand(serial_in_buffer,serial_in_index);
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
    4202:	88 30       	cpi	r24, 0x08	; 8
    4204:	09 f4       	brne	.+2      	; 0x4208 <__vector_91+0x50>
    4206:	3f c0       	rjmp	.+126    	; 0x4286 <__vector_91+0xce>
		if(serial_in_index > 0) serial_in_index--;
		printf("\b \b");
	}else if(data == 27){ //escape pressed.
    4208:	8b 31       	cpi	r24, 0x1B	; 27
    420a:	09 f4       	brne	.+2      	; 0x420e <__vector_91+0x56>
    420c:	88 c0       	rjmp	.+272    	; 0x431e <__vector_91+0x166>
		escaped = 1;
	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
    420e:	20 91 8a 22 	lds	r18, 0x228A	; 0x80228a <serial_in_index>
    4212:	30 91 8b 22 	lds	r19, 0x228B	; 0x80228b <serial_in_index+0x1>
    4216:	20 34       	cpi	r18, 0x40	; 64
    4218:	31 05       	cpc	r19, r1
    421a:	09 f4       	brne	.+2      	; 0x421e <__vector_91+0x66>
    421c:	84 c0       	rjmp	.+264    	; 0x4326 <__vector_91+0x16e>
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFER_SIZE);
		serial_in_index = 0;
	}else{ //Everything is fine. Add the character to the buffer.
		serial_in_buffer[serial_in_index] = data;
    421e:	f9 01       	movw	r30, r18
    4220:	e2 57       	subi	r30, 0x72	; 114
    4222:	fd 4d       	sbci	r31, 0xDD	; 221
    4224:	80 83       	st	Z, r24
		//printf("Got char '%c'\r\n",data);
		serial_in_index++;
    4226:	2f 5f       	subi	r18, 0xFF	; 255
    4228:	3f 4f       	sbci	r19, 0xFF	; 255
    422a:	20 93 8a 22 	sts	0x228A, r18	; 0x80228a <serial_in_index>
    422e:	30 93 8b 22 	sts	0x228B, r19	; 0x80228b <serial_in_index+0x1>
		putchar(data);
    4232:	60 91 99 25 	lds	r22, 0x2599	; 0x802599 <__iob+0x2>
    4236:	70 91 9a 25 	lds	r23, 0x259A	; 0x80259a <__iob+0x3>
    423a:	08 2e       	mov	r0, r24
    423c:	00 0c       	add	r0, r0
    423e:	99 0b       	sbc	r25, r25
    4240:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    4244:	07 c0       	rjmp	.+14     	; 0x4254 <__vector_91+0x9c>
		if(data == 65){
			handle_up_arrow();
		}
		escaped_arrow=0;
	}else if(escaped){
		if(data == 91){
    4246:	8b 35       	cpi	r24, 0x5B	; 91
    4248:	19 f4       	brne	.+6      	; 0x4250 <__vector_91+0x98>
			escaped_arrow=1;	
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	80 93 8c 22 	sts	0x228C, r24	; 0x80228c <escaped_arrow>
		}
		escaped=0;
    4250:	10 92 8d 22 	sts	0x228D, r1	; 0x80228d <escaped>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    4254:	ff 91       	pop	r31
    4256:	ef 91       	pop	r30
    4258:	cf 91       	pop	r28
    425a:	bf 91       	pop	r27
    425c:	af 91       	pop	r26
    425e:	9f 91       	pop	r25
    4260:	8f 91       	pop	r24
    4262:	7f 91       	pop	r23
    4264:	6f 91       	pop	r22
    4266:	5f 91       	pop	r21
    4268:	4f 91       	pop	r20
    426a:	3f 91       	pop	r19
    426c:	2f 91       	pop	r18
    426e:	0f 90       	pop	r0
    4270:	0b be       	out	0x3b, r0	; 59
    4272:	0f 90       	pop	r0
    4274:	0f be       	out	0x3f, r0	; 63
    4276:	0f 90       	pop	r0
    4278:	1f 90       	pop	r1
    427a:	18 95       	reti

static void handle_serial_input(void){
	char data = PC_USART.DATA;
	if(escaped_arrow==1){
		if(data == 65){
    427c:	81 34       	cpi	r24, 0x41	; 65
    427e:	61 f1       	breq	.+88     	; 0x42d8 <__vector_91+0x120>
			handle_up_arrow();
		}
		escaped_arrow=0;
    4280:	10 92 8c 22 	sts	0x228C, r1	; 0x80228c <escaped_arrow>
    4284:	e7 cf       	rjmp	.-50     	; 0x4254 <__vector_91+0x9c>
		printf("\r\n");
		serial_in_buffer[serial_in_index]='\0';
		handleSerialCommand(serial_in_buffer,serial_in_index);
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
		if(serial_in_index > 0) serial_in_index--;
    4286:	80 91 8a 22 	lds	r24, 0x228A	; 0x80228a <serial_in_index>
    428a:	90 91 8b 22 	lds	r25, 0x228B	; 0x80228b <serial_in_index+0x1>
    428e:	00 97       	sbiw	r24, 0x00	; 0
    4290:	29 f0       	breq	.+10     	; 0x429c <__vector_91+0xe4>
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	80 93 8a 22 	sts	0x228A, r24	; 0x80228a <serial_in_index>
    4298:	90 93 8b 22 	sts	0x228B, r25	; 0x80228b <serial_in_index+0x1>
		printf("\b \b");
    429c:	8e ea       	ldi	r24, 0xAE	; 174
    429e:	90 e2       	ldi	r25, 0x20	; 32
    42a0:	9f 93       	push	r25
    42a2:	8f 93       	push	r24
    42a4:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <printf>
    42a8:	0f 90       	pop	r0
    42aa:	0f 90       	pop	r0
    42ac:	d3 cf       	rjmp	.-90     	; 0x4254 <__vector_91+0x9c>
		if(data == 91){
			escaped_arrow=1;	
		}
		escaped=0;
	}else if(data == '\r' || data == '\n'){ //We got the newline character.
		printf("\r\n");
    42ae:	86 e9       	ldi	r24, 0x96	; 150
    42b0:	91 e2       	ldi	r25, 0x21	; 33
    42b2:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <puts>
		serial_in_buffer[serial_in_index]='\0';
    42b6:	60 91 8a 22 	lds	r22, 0x228A	; 0x80228a <serial_in_index>
    42ba:	70 91 8b 22 	lds	r23, 0x228B	; 0x80228b <serial_in_index+0x1>
    42be:	fb 01       	movw	r30, r22
    42c0:	e2 57       	subi	r30, 0x72	; 114
    42c2:	fd 4d       	sbci	r31, 0xDD	; 221
    42c4:	10 82       	st	Z, r1
		handleSerialCommand(serial_in_buffer,serial_in_index);
    42c6:	8e e8       	ldi	r24, 0x8E	; 142
    42c8:	92 e2       	ldi	r25, 0x22	; 34
    42ca:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <handleSerialCommand>
		serial_in_index = 0;
    42ce:	10 92 8a 22 	sts	0x228A, r1	; 0x80228a <serial_in_index>
    42d2:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <serial_in_index+0x1>
    42d6:	be cf       	rjmp	.-132    	; 0x4254 <__vector_91+0x9c>
		putchar(data);
	}
}

static void handle_up_arrow(void){
	uint8_t temp_index = serial_in_index;
    42d8:	80 91 8a 22 	lds	r24, 0x228A	; 0x80228a <serial_in_index>
    42dc:	90 91 8b 22 	lds	r25, 0x228B	; 0x80228b <serial_in_index+0x1>
    42e0:	c8 2f       	mov	r28, r24
			
	while(serial_in_buffer[temp_index] != '\0'){
    42e2:	99 27       	eor	r25, r25
    42e4:	fc 01       	movw	r30, r24
    42e6:	e2 57       	subi	r30, 0x72	; 114
    42e8:	fd 4d       	sbci	r31, 0xDD	; 221
    42ea:	80 81       	ld	r24, Z
    42ec:	88 23       	and	r24, r24
    42ee:	69 f1       	breq	.+90     	; 0x434a <__vector_91+0x192>
		putchar(serial_in_buffer[temp_index]);
    42f0:	60 91 99 25 	lds	r22, 0x2599	; 0x802599 <__iob+0x2>
    42f4:	70 91 9a 25 	lds	r23, 0x259A	; 0x80259a <__iob+0x3>
    42f8:	08 2e       	mov	r0, r24
    42fa:	00 0c       	add	r0, r0
    42fc:	99 0b       	sbc	r25, r25
    42fe:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
		temp_index++;
    4302:	cf 5f       	subi	r28, 0xFF	; 255
}

static void handle_up_arrow(void){
	uint8_t temp_index = serial_in_index;
			
	while(serial_in_buffer[temp_index] != '\0'){
    4304:	2c 2f       	mov	r18, r28
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	f9 01       	movw	r30, r18
    430a:	e2 57       	subi	r30, 0x72	; 114
    430c:	fd 4d       	sbci	r31, 0xDD	; 221
    430e:	80 81       	ld	r24, Z
    4310:	81 11       	cpse	r24, r1
    4312:	ee cf       	rjmp	.-36     	; 0x42f0 <__vector_91+0x138>
		putchar(serial_in_buffer[temp_index]);
		temp_index++;
	}
				
	serial_in_index = temp_index;
    4314:	20 93 8a 22 	sts	0x228A, r18	; 0x80228a <serial_in_index>
    4318:	30 93 8b 22 	sts	0x228B, r19	; 0x80228b <serial_in_index+0x1>
    431c:	b1 cf       	rjmp	.-158    	; 0x4280 <__vector_91+0xc8>
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
		if(serial_in_index > 0) serial_in_index--;
		printf("\b \b");
	}else if(data == 27){ //escape pressed.
		escaped = 1;
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	80 93 8d 22 	sts	0x228D, r24	; 0x80228d <escaped>
    4324:	97 cf       	rjmp	.-210    	; 0x4254 <__vector_91+0x9c>
	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFER_SIZE);
    4326:	1f 92       	push	r1
    4328:	80 e4       	ldi	r24, 0x40	; 64
    432a:	8f 93       	push	r24
    432c:	8b e2       	ldi	r24, 0x2B	; 43
    432e:	98 e0       	ldi	r25, 0x08	; 8
    4330:	9f 93       	push	r25
    4332:	8f 93       	push	r24
    4334:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
		serial_in_index = 0;
    4338:	10 92 8a 22 	sts	0x228A, r1	; 0x80228a <serial_in_index>
    433c:	10 92 8b 22 	sts	0x228B, r1	; 0x80228b <serial_in_index+0x1>
    4340:	0f 90       	pop	r0
    4342:	0f 90       	pop	r0
    4344:	0f 90       	pop	r0
    4346:	0f 90       	pop	r0
    4348:	85 cf       	rjmp	.-246    	; 0x4254 <__vector_91+0x9c>
    434a:	2c 2f       	mov	r18, r28
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	e2 cf       	rjmp	.-60     	; 0x4314 <__vector_91+0x15c>

00004350 <powerInit>:
	legMonitorInit();
}

void capMonitorInit()
{
	PORTB.DIRCLR = PIN0_bm | PIN1_bm;
    4350:	83 e0       	ldi	r24, 0x03	; 3
    4352:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
	
	ACB.AC0CTRL = AC_ENABLE_bm;
    4356:	e0 e9       	ldi	r30, 0x90	; 144
    4358:	f3 e0       	ldi	r31, 0x03	; 3
    435a:	81 e0       	ldi	r24, 0x01	; 1
    435c:	80 83       	st	Z, r24
	ACB.AC1CTRL = AC_ENABLE_bm;
    435e:	81 83       	std	Z+1, r24	; 0x01
	
	ACB.AC0MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc; //Changed the muxneg from bandgap
    4360:	88 e0       	ldi	r24, 0x08	; 8
    4362:	82 83       	std	Z+2, r24	; 0x02
	ACB.AC1MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc;
    4364:	83 83       	std	Z+3, r24	; 0x03
	
	ACB.WINCTRL = AC_WEN_bm;
    4366:	90 e1       	ldi	r25, 0x10	; 16
    4368:	96 83       	std	Z+6, r25	; 0x06
}

void legMonitorInit()
{
	PORTA.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm;
    436a:	e0 e0       	ldi	r30, 0x00	; 0
    436c:	f6 e0       	ldi	r31, 0x06	; 6
    436e:	8f e1       	ldi	r24, 0x1F	; 31
    4370:	82 83       	std	Z+2, r24	; 0x02
	
	PORTA.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    4372:	87 e0       	ldi	r24, 0x07	; 7
    4374:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    4376:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    4378:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    437a:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    437c:	84 8b       	std	Z+20, r24	; 0x14
	
	ACA.WINCTRL = AC_WEN_bm;					// Enable window mode
    437e:	e0 e8       	ldi	r30, 0x80	; 128
    4380:	f3 e0       	ldi	r31, 0x03	; 3
    4382:	96 83       	std	Z+6, r25	; 0x06
	
	ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN2_gc;	// PA0 is VREF_HI
    4384:	92 83       	std	Z+2, r25	; 0x02
	ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN2_gc;	// PA1 is VREF_LO
    4386:	81 e1       	ldi	r24, 0x11	; 17
    4388:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.AC0CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    438a:	89 e0       	ldi	r24, 0x09	; 9
    438c:	80 83       	st	Z, r24
	ACA.AC1CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    438e:	81 83       	std	Z+1, r24	; 0x01
    4390:	08 95       	ret

00004392 <randomInit>:
    // Setting this bit will reset the AES crypto module to its initial status on the next positive edge of
    // the peripheral clock. All registers, pointers, and memories in the module are set to their initial
    // value. When written to one, the bit stays high for one clock cycle before it is reset to zero by
    // hardware. (p. 320)

	AES.CTRL = AES_RESET_bm;
    4392:	80 e2       	ldi	r24, 0x20	; 32
    4394:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    // After encryption/decryption is done, the last subkey can be read sequentially, byte-by-byte,
    // through the KEY register.
    // Loading the initial data to the KEY register should be done after setting the appropriate AES
    // mode and direction. (p. 322)

	AES.KEY = PRODSIGNATURES_LOTNUM0;
    4398:	88 b1       	in	r24, 0x08	; 8
    439a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM1;
    439e:	89 b1       	in	r24, 0x09	; 9
    43a0:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM2;
    43a4:	8a b1       	in	r24, 0x0a	; 10
    43a6:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM3;
    43aa:	8b b1       	in	r24, 0x0b	; 11
    43ac:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = PRODSIGNATURES_LOTNUM4;
    43b0:	8c b1       	in	r24, 0x0c	; 12
    43b2:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM5;
    43b6:	8d b1       	in	r24, 0x0d	; 13
    43b8:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_WAFNUM;
    43bc:	80 b3       	in	r24, 0x10	; 16
    43be:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDX0;
    43c2:	82 b3       	in	r24, 0x12	; 18
    43c4:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = PRODSIGNATURES_COORDX1;
    43c8:	83 b3       	in	r24, 0x13	; 19
    43ca:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDY0;
    43ce:	84 b3       	in	r24, 0x14	; 20
    43d0:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDY1;
    43d4:	85 b3       	in	r24, 0x15	; 21
    43d6:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCA.CH0.RESL;
    43da:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    43de:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = ADCA.CH1.RESL;
    43e2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    43e6:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCA.CH2.RESL;
    43ea:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    43ee:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCB.CH0.RESL;
    43f2:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    43f6:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCB.CH1.RESL;
    43fa:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    43fe:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	r_round = 1;
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	80 93 d0 22 	sts	0x22D0, r24	; 0x8022d0 <r_round>
    4408:	80 e1       	ldi	r24, 0x10	; 16
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
		AES.STATE = r_round;
    440a:	91 e0       	ldi	r25, 0x01	; 1
    440c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    4410:	81 50       	subi	r24, 0x01	; 1
    // After encryption/decryption is done, the ciphertext/plaintext can be read sequentially, byte-by-byte,
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
    4412:	e1 f7       	brne	.-8      	; 0x440c <randomInit+0x7a>
    // Setting this bit starts the encryption/decryption procedure, and this bit remains set while the
    // encryption/decryption is ongoing. Writing this bit to zero will stop/abort any ongoing encryption/
    // decryption process. This bit is automatically cleared if the SRIF or the ERROR flags in
    // STATUS are set. (p. 320)

	AES.CTRL = AES_START_bm | AES_XOR_bm;
    4414:	84 e8       	ldi	r24, 0x84	; 132
    4416:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>

	r_position = 0;
    441a:	10 92 cf 22 	sts	0x22CF, r1	; 0x8022cf <r_position>
	randNormHasSaved = 0;
    441e:	10 92 ce 22 	sts	0x22CE, r1	; 0x8022ce <randNormHasSaved>
    4422:	08 95       	ret

00004424 <randByte>:
}

uint8_t randByte(){
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    4424:	90 91 cf 22 	lds	r25, 0x22CF	; 0x8022cf <r_position>
    4428:	99 23       	and	r25, r25
    442a:	a1 f0       	breq	.+40     	; 0x4454 <randByte+0x30>
	r = AES.STATE;
    442c:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    4430:	9f 5f       	subi	r25, 0xFF	; 255
    4432:	90 93 cf 22 	sts	0x22CF, r25	; 0x8022cf <r_position>
	if (r_position > 15){
    4436:	90 31       	cpi	r25, 0x10	; 16
    4438:	b0 f0       	brcs	.+44     	; 0x4466 <randByte+0x42>
    443a:	20 91 d0 22 	lds	r18, 0x22D0	; 0x8022d0 <r_round>
    443e:	90 e1       	ldi	r25, 0x10	; 16
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
    4440:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    4444:	91 50       	subi	r25, 0x01	; 1
    4446:	e1 f7       	brne	.-8      	; 0x4440 <randByte+0x1c>
		AES.CTRL = AES_START_bm | AES_XOR_bm;
    4448:	94 e8       	ldi	r25, 0x84	; 132
    444a:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
		r_position = 0;
    444e:	10 92 cf 22 	sts	0x22CF, r1	; 0x8022cf <r_position>
    4452:	08 95       	ret
	randNormHasSaved = 0;
}

uint8_t randByte(){
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    4454:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    4458:	80 ff       	sbrs	r24, 0
    445a:	fc cf       	rjmp	.-8      	; 0x4454 <randByte+0x30>
	r = AES.STATE;
    445c:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    4460:	91 e0       	ldi	r25, 0x01	; 1
    4462:	90 93 cf 22 	sts	0x22CF, r25	; 0x8022cf <r_position>
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
		AES.CTRL = AES_START_bm | AES_XOR_bm;
		r_position = 0;
	}
	return r;
}
    4466:	08 95       	ret

00004468 <randShort>:

uint16_t randShort(){
    4468:	cf 93       	push	r28
	return ((uint16_t)randByte()<<8)|((uint16_t)randByte());
    446a:	0e 94 12 22 	call	0x4424	; 0x4424 <randByte>
    446e:	c8 2f       	mov	r28, r24
    4470:	0e 94 12 22 	call	0x4424	; 0x4424 <randByte>
    4474:	2c 2f       	mov	r18, r28
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	32 2f       	mov	r19, r18
    447a:	22 27       	eor	r18, r18
}
    447c:	a9 01       	movw	r20, r18
    447e:	48 2b       	or	r20, r24
    4480:	ca 01       	movw	r24, r20
    4482:	cf 91       	pop	r28
    4484:	08 95       	ret

00004486 <magicRangeFunc>:
	}
	setAllirPowers(prevPower);
}


static float magicRangeFunc(float a){
    4486:	cf 92       	push	r12
    4488:	df 92       	push	r13
    448a:	ef 92       	push	r14
    448c:	ff 92       	push	r15
    448e:	6b 01       	movw	r12, r22
    4490:	7c 01       	movw	r14, r24
	if(a<=0){
    4492:	20 e0       	ldi	r18, 0x00	; 0
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	a9 01       	movw	r20, r18
    4498:	0e 94 b8 44 	call	0x8970	; 0x8970 <__cmpsf2>
    449c:	18 16       	cp	r1, r24
    449e:	7c f5       	brge	.+94     	; 0x44fe <magicRangeFunc+0x78>
		return NAN;
		}else{
		float result = -24.3675811184*(0.0259969683 + powf(a, -0.5));
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	40 e0       	ldi	r20, 0x00	; 0
    44a6:	5f eb       	ldi	r21, 0xBF	; 191
    44a8:	c7 01       	movw	r24, r14
    44aa:	b6 01       	movw	r22, r12
    44ac:	0e 94 56 48 	call	0x90ac	; 0x90ac <pow>
		result = 1 + exp(result);
    44b0:	28 e9       	ldi	r18, 0x98	; 152
    44b2:	37 ef       	ldi	r19, 0xF7	; 247
    44b4:	44 ed       	ldi	r20, 0xD4	; 212
    44b6:	5c e3       	ldi	r21, 0x3C	; 60
    44b8:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    44bc:	2e ec       	ldi	r18, 0xCE	; 206
    44be:	30 ef       	ldi	r19, 0xF0	; 240
    44c0:	42 ec       	ldi	r20, 0xC2	; 194
    44c2:	51 ec       	ldi	r21, 0xC1	; 193
    44c4:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    44c8:	0e 94 3c 45 	call	0x8a78	; 0x8a78 <exp>
		result = (778.0270114700/result) - 528.0270114700;
    44cc:	20 e0       	ldi	r18, 0x00	; 0
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	40 e8       	ldi	r20, 0x80	; 128
    44d2:	5f e3       	ldi	r21, 0x3F	; 63
    44d4:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    44d8:	9b 01       	movw	r18, r22
    44da:	ac 01       	movw	r20, r24
    44dc:	6b eb       	ldi	r22, 0xBB	; 187
    44de:	71 e8       	ldi	r23, 0x81	; 129
    44e0:	82 e4       	ldi	r24, 0x42	; 66
    44e2:	94 e4       	ldi	r25, 0x44	; 68
    44e4:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    44e8:	2b eb       	ldi	r18, 0xBB	; 187
    44ea:	31 e0       	ldi	r19, 0x01	; 1
    44ec:	44 e0       	ldi	r20, 0x04	; 4
    44ee:	54 e4       	ldi	r21, 0x44	; 68
    44f0:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
		return result;
	}
}
    44f4:	ff 90       	pop	r15
    44f6:	ef 90       	pop	r14
    44f8:	df 90       	pop	r13
    44fa:	cf 90       	pop	r12
    44fc:	08 95       	ret
}


static float magicRangeFunc(float a){
	if(a<=0){
		return NAN;
    44fe:	60 e0       	ldi	r22, 0x00	; 0
    4500:	70 e0       	ldi	r23, 0x00	; 0
    4502:	80 ec       	ldi	r24, 0xC0	; 192
    4504:	9f e7       	ldi	r25, 0x7F	; 127
		float result = -24.3675811184*(0.0259969683 + powf(a, -0.5));
		result = 1 + exp(result);
		result = (778.0270114700/result) - 528.0270114700;
		return result;
	}
}
    4506:	ff 90       	pop	r15
    4508:	ef 90       	pop	r14
    450a:	df 90       	pop	r13
    450c:	cf 90       	pop	r12
    450e:	08 95       	ret

00004510 <rangeAlgsInit>:
//static float invMagicRangeFunc(float r);

//static void print_brightMeas(void);
												
void rangeAlgsInit(){
	sensorHealthHistory = 0;
    4510:	10 92 19 23 	sts	0x2319, r1	; 0x802319 <sensorHealthHistory>
    4514:	10 92 1a 23 	sts	0x231A, r1	; 0x80231a <sensorHealthHistory+0x1>
    4518:	10 92 1b 23 	sts	0x231B, r1	; 0x80231b <sensorHealthHistory+0x2>
    451c:	10 92 1c 23 	sts	0x231C, r1	; 0x80231c <sensorHealthHistory+0x3>
    4520:	e1 ed       	ldi	r30, 0xD1	; 209
    4522:	f2 e2       	ldi	r31, 0x22	; 34
    4524:	89 e1       	ldi	r24, 0x19	; 25
    4526:	93 e2       	ldi	r25, 0x23	; 35
	for(uint8_t i=0 ; i<6 ;i++){
		for(uint8_t j=0 ; j<6 ; j++){
			brightMeas[i][j] = 0;
    4528:	10 82       	st	Z, r1
    452a:	11 82       	std	Z+1, r1	; 0x01
    452c:	12 82       	std	Z+2, r1	; 0x02
    452e:	13 82       	std	Z+3, r1	; 0x03
    4530:	14 82       	std	Z+4, r1	; 0x04
    4532:	15 82       	std	Z+5, r1	; 0x05
    4534:	16 82       	std	Z+6, r1	; 0x06
    4536:	17 82       	std	Z+7, r1	; 0x07
    4538:	10 86       	std	Z+8, r1	; 0x08
    453a:	11 86       	std	Z+9, r1	; 0x09
    453c:	12 86       	std	Z+10, r1	; 0x0a
    453e:	13 86       	std	Z+11, r1	; 0x0b
    4540:	3c 96       	adiw	r30, 0x0c	; 12

//static void print_brightMeas(void);
												
void rangeAlgsInit(){
	sensorHealthHistory = 0;
	for(uint8_t i=0 ; i<6 ;i++){
    4542:	8e 17       	cp	r24, r30
    4544:	9f 07       	cpc	r25, r31
    4546:	81 f7       	brne	.-32     	; 0x4528 <rangeAlgsInit+0x18>
		for(uint8_t j=0 ; j<6 ; j++){
			brightMeas[i][j] = 0;
		}
	}
	rnbCmdID=0;
    4548:	10 92 81 25 	sts	0x2581, r1	; 0x802581 <rnbCmdID>
    454c:	10 92 82 25 	sts	0x2582, r1	; 0x802582 <rnbCmdID+0x1>
	processing_rnb_flag=0;
    4550:	10 92 f9 23 	sts	0x23F9, r1	; 0x8023f9 <processing_rnb_flag>
    4554:	08 95       	ret

00004556 <calculate_range>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		processing_rnb_flag=0;
	}
}

float calculate_range(float iRange, float bearing, float heading){
    4556:	2f 92       	push	r2
    4558:	3f 92       	push	r3
    455a:	4f 92       	push	r4
    455c:	5f 92       	push	r5
    455e:	6f 92       	push	r6
    4560:	7f 92       	push	r7
    4562:	8f 92       	push	r8
    4564:	9f 92       	push	r9
    4566:	af 92       	push	r10
    4568:	bf 92       	push	r11
    456a:	cf 92       	push	r12
    456c:	df 92       	push	r13
    456e:	ef 92       	push	r14
    4570:	ff 92       	push	r15
    4572:	0f 93       	push	r16
    4574:	1f 93       	push	r17
    4576:	cf 93       	push	r28
    4578:	df 93       	push	r29
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
    457e:	cc 54       	subi	r28, 0x4C	; 76
    4580:	d1 09       	sbc	r29, r1
    4582:	cd bf       	out	0x3d, r28	; 61
    4584:	de bf       	out	0x3e, r29	; 62
    4586:	4b 01       	movw	r8, r22
    4588:	5c 01       	movw	r10, r24
    458a:	29 01       	movw	r4, r18
    458c:	3a 01       	movw	r6, r20
    458e:	67 01       	movw	r12, r14
    4590:	78 01       	movw	r14, r16
	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
    4592:	ca 01       	movw	r24, r20
    4594:	b9 01       	movw	r22, r18
    4596:	0e 94 a6 48 	call	0x914c	; 0x914c <sin>
    459a:	9b 01       	movw	r18, r22
    459c:	ac 01       	movw	r20, r24
    459e:	c5 01       	movw	r24, r10
    45a0:	b4 01       	movw	r22, r8
    45a2:	90 58       	subi	r25, 0x80	; 128
    45a4:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    45a8:	29 96       	adiw	r28, 0x09	; 9
    45aa:	6c af       	std	Y+60, r22	; 0x3c
    45ac:	7d af       	std	Y+61, r23	; 0x3d
    45ae:	8e af       	std	Y+62, r24	; 0x3e
    45b0:	9f af       	std	Y+63, r25	; 0x3f
    45b2:	29 97       	sbiw	r28, 0x09	; 9
    45b4:	c3 01       	movw	r24, r6
    45b6:	b2 01       	movw	r22, r4
    45b8:	0e 94 bd 44 	call	0x897a	; 0x897a <cos>
    45bc:	9b 01       	movw	r18, r22
    45be:	ac 01       	movw	r20, r24
    45c0:	c5 01       	movw	r24, r10
    45c2:	b4 01       	movw	r22, r8
    45c4:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    45c8:	2d 96       	adiw	r28, 0x0d	; 13
    45ca:	6c af       	std	Y+60, r22	; 0x3c
    45cc:	7d af       	std	Y+61, r23	; 0x3d
    45ce:	8e af       	std	Y+62, r24	; 0x3e
    45d0:	9f af       	std	Y+63, r25	; 0x3f
    45d2:	2d 97       	sbiw	r28, 0x0d	; 13
    45d4:	c7 01       	movw	r24, r14
    45d6:	b6 01       	movw	r22, r12
    45d8:	0e 94 bd 44 	call	0x897a	; 0x897a <cos>
    45dc:	4b 01       	movw	r8, r22
    45de:	5c 01       	movw	r10, r24
    45e0:	c7 01       	movw	r24, r14
    45e2:	b6 01       	movw	r22, r12
    45e4:	0e 94 a6 48 	call	0x914c	; 0x914c <sin>
    45e8:	6b ab       	std	Y+51, r22	; 0x33
    45ea:	7c ab       	std	Y+52, r23	; 0x34
    45ec:	8d ab       	std	Y+53, r24	; 0x35
    45ee:	9e ab       	std	Y+54, r25	; 0x36
    45f0:	8e 01       	movw	r16, r28
    45f2:	0f 5f       	subi	r16, 0xFF	; 255
    45f4:	1f 4f       	sbci	r17, 0xFF	; 255
    45f6:	32 ee       	ldi	r19, 0xE2	; 226
    45f8:	23 2e       	mov	r2, r19
    45fa:	30 e2       	ldi	r19, 0x20	; 32
    45fc:	33 2e       	mov	r3, r19
    45fe:	ce 01       	movw	r24, r28
    4600:	c1 96       	adiw	r24, 0x31	; 49
    4602:	89 ab       	std	Y+49, r24	; 0x31
    4604:	9a ab       	std	Y+50, r25	; 0x32
    4606:	44 ea       	ldi	r20, 0xA4	; 164
    4608:	44 2e       	mov	r4, r20
    460a:	4b e6       	ldi	r20, 0x6B	; 107
    460c:	54 2e       	mov	r5, r20
    460e:	48 e9       	ldi	r20, 0x98	; 152
    4610:	64 2e       	mov	r6, r20
    4612:	41 e4       	ldi	r20, 0x41	; 65
    4614:	74 2e       	mov	r7, r20
    4616:	c1 2c       	mov	r12, r1
    4618:	d1 2c       	mov	r13, r1
    461a:	50 e3       	ldi	r21, 0x30	; 48
    461c:	e5 2e       	mov	r14, r21
    461e:	51 e4       	ldi	r21, 0x41	; 65
    4620:	f5 2e       	mov	r15, r21
    4622:	0c c0       	rjmp	.+24     	; 0x463c <calculate_range+0xe6>
    4624:	d1 01       	movw	r26, r2
    4626:	cd 90       	ld	r12, X+
    4628:	dd 90       	ld	r13, X+
    462a:	ed 90       	ld	r14, X+
    462c:	fc 90       	ld	r15, X
    462e:	13 97       	sbiw	r26, 0x03	; 3
    4630:	14 96       	adiw	r26, 0x04	; 4
    4632:	4d 90       	ld	r4, X+
    4634:	5d 90       	ld	r5, X+
    4636:	6d 90       	ld	r6, X+
    4638:	7c 90       	ld	r7, X
    463a:	17 97       	sbiw	r26, 0x07	; 7
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
		txHats[i][0] = hats[i][0]*cos(heading) - hats[i][1]*sin(heading);
    463c:	a5 01       	movw	r20, r10
    463e:	94 01       	movw	r18, r8
    4640:	c7 01       	movw	r24, r14
    4642:	b6 01       	movw	r22, r12
    4644:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4648:	6f ab       	std	Y+55, r22	; 0x37
    464a:	78 af       	std	Y+56, r23	; 0x38
    464c:	89 af       	std	Y+57, r24	; 0x39
    464e:	9a af       	std	Y+58, r25	; 0x3a
    4650:	2b a9       	ldd	r18, Y+51	; 0x33
    4652:	3c a9       	ldd	r19, Y+52	; 0x34
    4654:	4d a9       	ldd	r20, Y+53	; 0x35
    4656:	5e a9       	ldd	r21, Y+54	; 0x36
    4658:	c3 01       	movw	r24, r6
    465a:	b2 01       	movw	r22, r4
    465c:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4660:	9b 01       	movw	r18, r22
    4662:	ac 01       	movw	r20, r24
    4664:	6f a9       	ldd	r22, Y+55	; 0x37
    4666:	78 ad       	ldd	r23, Y+56	; 0x38
    4668:	89 ad       	ldd	r24, Y+57	; 0x39
    466a:	9a ad       	ldd	r25, Y+58	; 0x3a
    466c:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    4670:	d8 01       	movw	r26, r16
    4672:	6d 93       	st	X+, r22
    4674:	7d 93       	st	X+, r23
    4676:	8d 93       	st	X+, r24
    4678:	9c 93       	st	X, r25
    467a:	13 97       	sbiw	r26, 0x03	; 3
		txHats[i][1] = hats[i][0]*sin(heading) + hats[i][1]*cos(heading);
    467c:	2b a9       	ldd	r18, Y+51	; 0x33
    467e:	3c a9       	ldd	r19, Y+52	; 0x34
    4680:	4d a9       	ldd	r20, Y+53	; 0x35
    4682:	5e a9       	ldd	r21, Y+54	; 0x36
    4684:	c7 01       	movw	r24, r14
    4686:	b6 01       	movw	r22, r12
    4688:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    468c:	6b 01       	movw	r12, r22
    468e:	7c 01       	movw	r14, r24
    4690:	a3 01       	movw	r20, r6
    4692:	92 01       	movw	r18, r4
    4694:	c5 01       	movw	r24, r10
    4696:	b4 01       	movw	r22, r8
    4698:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    469c:	9b 01       	movw	r18, r22
    469e:	ac 01       	movw	r20, r24
    46a0:	c7 01       	movw	r24, r14
    46a2:	b6 01       	movw	r22, r12
    46a4:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    46a8:	f8 01       	movw	r30, r16
    46aa:	64 83       	std	Z+4, r22	; 0x04
    46ac:	75 83       	std	Z+5, r23	; 0x05
    46ae:	86 83       	std	Z+6, r24	; 0x06
    46b0:	97 83       	std	Z+7, r25	; 0x07
    46b2:	08 5f       	subi	r16, 0xF8	; 248
    46b4:	1f 4f       	sbci	r17, 0xFF	; 255
    46b6:	f8 e0       	ldi	r31, 0x08	; 8
    46b8:	2f 0e       	add	r2, r31
    46ba:	31 1c       	adc	r3, r1
}

float calculate_range(float iRange, float bearing, float heading){
	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
    46bc:	89 a9       	ldd	r24, Y+49	; 0x31
    46be:	9a a9       	ldd	r25, Y+50	; 0x32
    46c0:	08 17       	cp	r16, r24
    46c2:	19 07       	cpc	r17, r25
    46c4:	09 f0       	breq	.+2      	; 0x46c8 <calculate_range+0x172>
    46c6:	ae cf       	rjmp	.-164    	; 0x4624 <calculate_range+0xce>
    46c8:	a1 ed       	ldi	r26, 0xD1	; 209
    46ca:	b2 e2       	ldi	r27, 0x22	; 34
    46cc:	25 96       	adiw	r28, 0x05	; 5
    46ce:	ae af       	std	Y+62, r26	; 0x3e
    46d0:	bf af       	std	Y+63, r27	; 0x3f
    46d2:	25 97       	sbiw	r28, 0x05	; 5
    46d4:	84 ea       	ldi	r24, 0xA4	; 164
    46d6:	9b e6       	ldi	r25, 0x6B	; 107
    46d8:	a8 e9       	ldi	r26, 0x98	; 152
    46da:	b1 e4       	ldi	r27, 0x41	; 65
    46dc:	8b af       	std	Y+59, r24	; 0x3b
    46de:	9c af       	std	Y+60, r25	; 0x3c
    46e0:	ad af       	std	Y+61, r26	; 0x3d
    46e2:	be af       	std	Y+62, r27	; 0x3e
    46e4:	41 2c       	mov	r4, r1
    46e6:	51 2c       	mov	r5, r1
    46e8:	90 e3       	ldi	r25, 0x30	; 48
    46ea:	69 2e       	mov	r6, r25
    46ec:	91 e4       	ldi	r25, 0x41	; 65
    46ee:	79 2e       	mov	r7, r25
    46f0:	31 2c       	mov	r3, r1
    46f2:	23 96       	adiw	r28, 0x03	; 3
    46f4:	1c ae       	std	Y+60, r1	; 0x3c
    46f6:	1d ae       	std	Y+61, r1	; 0x3d
    46f8:	1e ae       	std	Y+62, r1	; 0x3e
    46fa:	1f ae       	std	Y+63, r1	; 0x3f
    46fc:	23 97       	sbiw	r28, 0x03	; 3
	float total = 0;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    46fe:	2b ea       	ldi	r18, 0xAB	; 171
    4700:	22 2e       	mov	r2, r18
    4702:	77 c0       	rjmp	.+238    	; 0x47f2 <calculate_range+0x29c>
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
    4704:	25 96       	adiw	r28, 0x05	; 5
    4706:	ee ad       	ldd	r30, Y+62	; 0x3e
    4708:	ff ad       	ldd	r31, Y+63	; 0x3f
    470a:	25 97       	sbiw	r28, 0x05	; 5
    470c:	01 91       	ld	r16, Z+
    470e:	11 91       	ld	r17, Z+
    4710:	25 96       	adiw	r28, 0x05	; 5
    4712:	ee af       	std	Y+62, r30	; 0x3e
    4714:	ff af       	std	Y+63, r31	; 0x3f
    4716:	25 97       	sbiw	r28, 0x05	; 5
    4718:	a3 01       	movw	r20, r6
    471a:	92 01       	movw	r18, r4
    471c:	c5 01       	movw	r24, r10
    471e:	b4 01       	movw	r22, r8
    4720:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4724:	4b 01       	movw	r8, r22
    4726:	5c 01       	movw	r10, r24
    4728:	2b a9       	ldd	r18, Y+51	; 0x33
    472a:	3c a9       	ldd	r19, Y+52	; 0x34
    472c:	4d a9       	ldd	r20, Y+53	; 0x35
    472e:	5e a9       	ldd	r21, Y+54	; 0x36
    4730:	ca 01       	movw	r24, r20
    4732:	b9 01       	movw	r22, r18
    4734:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4738:	2b 01       	movw	r4, r22
    473a:	3c 01       	movw	r6, r24
    473c:	a7 01       	movw	r20, r14
    473e:	96 01       	movw	r18, r12
    4740:	c7 01       	movw	r24, r14
    4742:	b6 01       	movw	r22, r12
    4744:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4748:	9b 01       	movw	r18, r22
    474a:	ac 01       	movw	r20, r24
    474c:	c3 01       	movw	r24, r6
    474e:	b2 01       	movw	r22, r4
    4750:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	42 ef       	ldi	r20, 0xF2	; 242
    475a:	53 e4       	ldi	r21, 0x43	; 67
    475c:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4760:	9b 01       	movw	r18, r22
    4762:	ac 01       	movw	r20, r24
    4764:	c5 01       	movw	r24, r10
    4766:	b4 01       	movw	r22, r8
    4768:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    476c:	6b 01       	movw	r12, r22
    476e:	7c 01       	movw	r14, r24
    4770:	b8 01       	movw	r22, r16
    4772:	11 0f       	add	r17, r17
    4774:	88 0b       	sbc	r24, r24
    4776:	99 0b       	sbc	r25, r25
    4778:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__floatsisf>
    477c:	9b 01       	movw	r18, r22
    477e:	ac 01       	movw	r20, r24
    4780:	c7 01       	movw	r24, r14
    4782:	b6 01       	movw	r22, r12
    4784:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4788:	9b 01       	movw	r18, r22
    478a:	ac 01       	movw	r20, r24
    478c:	23 96       	adiw	r28, 0x03	; 3
    478e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4790:	7d ad       	ldd	r23, Y+61	; 0x3d
    4792:	8e ad       	ldd	r24, Y+62	; 0x3e
    4794:	9f ad       	ldd	r25, Y+63	; 0x3f
    4796:	23 97       	sbiw	r28, 0x03	; 3
    4798:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    479c:	23 96       	adiw	r28, 0x03	; 3
    479e:	6c af       	std	Y+60, r22	; 0x3c
    47a0:	7d af       	std	Y+61, r23	; 0x3d
    47a2:	8e af       	std	Y+62, r24	; 0x3e
    47a4:	9f af       	std	Y+63, r25	; 0x3f
    47a6:	23 97       	sbiw	r28, 0x03	; 3
	float rijMagSq;
	float alphaDotP, betaDotP;
	float cosAcosB;
	float total = 0;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    47a8:	33 94       	inc	r3
    47aa:	f4 e2       	ldi	r31, 0x24	; 36
    47ac:	3f 16       	cp	r3, r31
    47ae:	09 f4       	brne	.+2      	; 0x47b2 <calculate_range+0x25c>
    47b0:	a3 c0       	rjmp	.+326    	; 0x48f8 <calculate_range+0x3a2>
    47b2:	32 9c       	mul	r3, r2
    47b4:	81 2d       	mov	r24, r1
    47b6:	11 24       	eor	r1, r1
    47b8:	86 95       	lsr	r24
    47ba:	86 95       	lsr	r24
    47bc:	98 2f       	mov	r25, r24
    47be:	99 0f       	add	r25, r25
    47c0:	89 0f       	add	r24, r25
    47c2:	88 0f       	add	r24, r24
    47c4:	e3 2d       	mov	r30, r3
    47c6:	e8 1b       	sub	r30, r24
    47c8:	f0 e0       	ldi	r31, 0x00	; 0
    47ca:	ee 0f       	add	r30, r30
    47cc:	ff 1f       	adc	r31, r31
    47ce:	ee 0f       	add	r30, r30
    47d0:	ff 1f       	adc	r31, r31
    47d2:	ee 0f       	add	r30, r30
    47d4:	ff 1f       	adc	r31, r31
    47d6:	ee 51       	subi	r30, 0x1E	; 30
    47d8:	ff 4d       	sbci	r31, 0xDF	; 223
    47da:	40 80       	ld	r4, Z
    47dc:	51 80       	ldd	r5, Z+1	; 0x01
    47de:	62 80       	ldd	r6, Z+2	; 0x02
    47e0:	73 80       	ldd	r7, Z+3	; 0x03
    47e2:	84 81       	ldd	r24, Z+4	; 0x04
    47e4:	95 81       	ldd	r25, Z+5	; 0x05
    47e6:	a6 81       	ldd	r26, Z+6	; 0x06
    47e8:	b7 81       	ldd	r27, Z+7	; 0x07
    47ea:	8b af       	std	Y+59, r24	; 0x3b
    47ec:	9c af       	std	Y+60, r25	; 0x3c
    47ee:	ad af       	std	Y+61, r26	; 0x3d
    47f0:	be af       	std	Y+62, r27	; 0x3e
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    47f2:	32 9c       	mul	r3, r2
    47f4:	81 2d       	mov	r24, r1
    47f6:	11 24       	eor	r1, r1
    47f8:	86 95       	lsr	r24
    47fa:	86 95       	lsr	r24
    47fc:	01 e0       	ldi	r16, 0x01	; 1
    47fe:	10 e0       	ldi	r17, 0x00	; 0
    4800:	0c 0f       	add	r16, r28
    4802:	1d 1f       	adc	r17, r29
    4804:	b8 e0       	ldi	r27, 0x08	; 8
    4806:	8b 9f       	mul	r24, r27
    4808:	00 0d       	add	r16, r0
    480a:	11 1d       	adc	r17, r1
    480c:	11 24       	eor	r1, r1
    480e:	f8 01       	movw	r30, r16
    4810:	80 80       	ld	r8, Z
    4812:	91 80       	ldd	r9, Z+1	; 0x01
    4814:	a2 80       	ldd	r10, Z+2	; 0x02
    4816:	b3 80       	ldd	r11, Z+3	; 0x03
    4818:	a5 01       	movw	r20, r10
    481a:	94 01       	movw	r18, r8
    481c:	29 96       	adiw	r28, 0x09	; 9
    481e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4820:	7d ad       	ldd	r23, Y+61	; 0x3d
    4822:	8e ad       	ldd	r24, Y+62	; 0x3e
    4824:	9f ad       	ldd	r25, Y+63	; 0x3f
    4826:	29 97       	sbiw	r28, 0x09	; 9
    4828:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    482c:	a3 01       	movw	r20, r6
    482e:	92 01       	movw	r18, r4
    4830:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    4834:	6b ab       	std	Y+51, r22	; 0x33
    4836:	7c ab       	std	Y+52, r23	; 0x34
    4838:	8d ab       	std	Y+53, r24	; 0x35
    483a:	9e ab       	std	Y+54, r25	; 0x36
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
    483c:	d8 01       	movw	r26, r16
    483e:	14 96       	adiw	r26, 0x04	; 4
    4840:	8d 91       	ld	r24, X+
    4842:	9d 91       	ld	r25, X+
    4844:	0d 90       	ld	r0, X+
    4846:	bc 91       	ld	r27, X
    4848:	a0 2d       	mov	r26, r0
    484a:	8f ab       	std	Y+55, r24	; 0x37
    484c:	98 af       	std	Y+56, r25	; 0x38
    484e:	a9 af       	std	Y+57, r26	; 0x39
    4850:	ba af       	std	Y+58, r27	; 0x3a
    4852:	9c 01       	movw	r18, r24
    4854:	ad 01       	movw	r20, r26
    4856:	2d 96       	adiw	r28, 0x0d	; 13
    4858:	6c ad       	ldd	r22, Y+60	; 0x3c
    485a:	7d ad       	ldd	r23, Y+61	; 0x3d
    485c:	8e ad       	ldd	r24, Y+62	; 0x3e
    485e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4860:	2d 97       	sbiw	r28, 0x0d	; 13
    4862:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    4866:	2b ad       	ldd	r18, Y+59	; 0x3b
    4868:	3c ad       	ldd	r19, Y+60	; 0x3c
    486a:	4d ad       	ldd	r20, Y+61	; 0x3d
    486c:	5e ad       	ldd	r21, Y+62	; 0x3e
    486e:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    4872:	6b 01       	movw	r12, r22
    4874:	7c 01       	movw	r14, r24
		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
    4876:	a3 01       	movw	r20, r6
    4878:	92 01       	movw	r18, r4
    487a:	6b a9       	ldd	r22, Y+51	; 0x33
    487c:	7c a9       	ldd	r23, Y+52	; 0x34
    487e:	8d a9       	ldd	r24, Y+53	; 0x35
    4880:	9e a9       	ldd	r25, Y+54	; 0x36
    4882:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4886:	2b 01       	movw	r4, r22
    4888:	3c 01       	movw	r6, r24
    488a:	2b ad       	ldd	r18, Y+59	; 0x3b
    488c:	3c ad       	ldd	r19, Y+60	; 0x3c
    488e:	4d ad       	ldd	r20, Y+61	; 0x3d
    4890:	5e ad       	ldd	r21, Y+62	; 0x3e
    4892:	c7 01       	movw	r24, r14
    4894:	b6 01       	movw	r22, r12
    4896:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    489a:	9b 01       	movw	r18, r22
    489c:	ac 01       	movw	r20, r24
    489e:	c3 01       	movw	r24, r6
    48a0:	b2 01       	movw	r22, r4
    48a2:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    48a6:	2b 01       	movw	r4, r22
    48a8:	3c 01       	movw	r6, r24
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
    48aa:	6b a9       	ldd	r22, Y+51	; 0x33
    48ac:	7c a9       	ldd	r23, Y+52	; 0x34
    48ae:	8d a9       	ldd	r24, Y+53	; 0x35
    48b0:	9e a9       	ldd	r25, Y+54	; 0x36
    48b2:	90 58       	subi	r25, 0x80	; 128
    48b4:	a5 01       	movw	r20, r10
    48b6:	94 01       	movw	r18, r8
    48b8:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    48bc:	4b 01       	movw	r8, r22
    48be:	5c 01       	movw	r10, r24
    48c0:	c7 01       	movw	r24, r14
    48c2:	b6 01       	movw	r22, r12
    48c4:	90 58       	subi	r25, 0x80	; 128
    48c6:	2f a9       	ldd	r18, Y+55	; 0x37
    48c8:	38 ad       	ldd	r19, Y+56	; 0x38
    48ca:	49 ad       	ldd	r20, Y+57	; 0x39
    48cc:	5a ad       	ldd	r21, Y+58	; 0x3a
    48ce:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    48d2:	9b 01       	movw	r18, r22
    48d4:	ac 01       	movw	r20, r24
    48d6:	c5 01       	movw	r24, r10
    48d8:	b4 01       	movw	r22, r8
    48da:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    48de:	4b 01       	movw	r8, r22
    48e0:	5c 01       	movw	r10, r24
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	30 e0       	ldi	r19, 0x00	; 0
    48e6:	a9 01       	movw	r20, r18
    48e8:	0e 94 b8 44 	call	0x8970	; 0x8970 <__cmpsf2>
    48ec:	87 ff       	sbrs	r24, 7
    48ee:	0a cf       	rjmp	.-492    	; 0x4704 <calculate_range+0x1ae>
    48f0:	81 2c       	mov	r8, r1
    48f2:	91 2c       	mov	r9, r1
    48f4:	54 01       	movw	r10, r8
    48f6:	06 cf       	rjmp	.-500    	; 0x4704 <calculate_range+0x1ae>
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
	}

	return magicRangeFunc(total);
    48f8:	23 96       	adiw	r28, 0x03	; 3
    48fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    48fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    48fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    4900:	9f ad       	ldd	r25, Y+63	; 0x3f
    4902:	23 97       	sbiw	r28, 0x03	; 3
}
    4904:	c4 5b       	subi	r28, 0xB4	; 180
    4906:	df 4f       	sbci	r29, 0xFF	; 255
    4908:	cd bf       	out	0x3d, r28	; 61
    490a:	de bf       	out	0x3e, r29	; 62
    490c:	df 91       	pop	r29
    490e:	cf 91       	pop	r28
    4910:	1f 91       	pop	r17
    4912:	0f 91       	pop	r16
    4914:	ff 90       	pop	r15
    4916:	ef 90       	pop	r14
    4918:	df 90       	pop	r13
    491a:	cf 90       	pop	r12
    491c:	bf 90       	pop	r11
    491e:	af 90       	pop	r10
    4920:	9f 90       	pop	r9
    4922:	8f 90       	pop	r8
    4924:	7f 90       	pop	r7
    4926:	6f 90       	pop	r6
    4928:	5f 90       	pop	r5
    492a:	4f 90       	pop	r4
    492c:	3f 90       	pop	r3
    492e:	2f 90       	pop	r2
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
	}

	return magicRangeFunc(total);
    4930:	0c 94 43 22 	jmp	0x4486	; 0x4486 <magicRangeFunc>

00004934 <calculate_error>:
}

float calculate_error(float r, float b, float h){
    4934:	2f 92       	push	r2
    4936:	3f 92       	push	r3
    4938:	4f 92       	push	r4
    493a:	5f 92       	push	r5
    493c:	6f 92       	push	r6
    493e:	7f 92       	push	r7
    4940:	8f 92       	push	r8
    4942:	9f 92       	push	r9
    4944:	af 92       	push	r10
    4946:	bf 92       	push	r11
    4948:	cf 92       	push	r12
    494a:	df 92       	push	r13
    494c:	ef 92       	push	r14
    494e:	ff 92       	push	r15
    4950:	0f 93       	push	r16
    4952:	1f 93       	push	r17
    4954:	cf 93       	push	r28
    4956:	df 93       	push	r29
    4958:	cd b7       	in	r28, 0x3d	; 61
    495a:	de b7       	in	r29, 0x3e	; 62
    495c:	cc 5e       	subi	r28, 0xEC	; 236
    495e:	d1 09       	sbc	r29, r1
    4960:	cd bf       	out	0x3d, r28	; 61
    4962:	de bf       	out	0x3e, r29	; 62
    4964:	4b 01       	movw	r8, r22
    4966:	5c 01       	movw	r10, r24
    4968:	29 01       	movw	r4, r18
    496a:	3a 01       	movw	r6, r20
    496c:	67 01       	movw	r12, r14
    496e:	78 01       	movw	r14, r16
	r = r<46 ? 46 : r;
    4970:	20 e0       	ldi	r18, 0x00	; 0
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	48 e3       	ldi	r20, 0x38	; 56
    4976:	52 e4       	ldi	r21, 0x42	; 66
    4978:	0e 94 b8 44 	call	0x8970	; 0x8970 <__cmpsf2>
    497c:	87 fd       	sbrc	r24, 7
    497e:	df c2       	rjmp	.+1470   	; 0x4f3e <calculate_error+0x60a>
    4980:	d5 01       	movw	r26, r10
    4982:	c4 01       	movw	r24, r8
    4984:	b0 58       	subi	r27, 0x80	; 128
    4986:	cd 53       	subi	r28, 0x3D	; 61
    4988:	df 4f       	sbci	r29, 0xFF	; 255
    498a:	88 83       	st	Y, r24
    498c:	99 83       	std	Y+1, r25	; 0x01
    498e:	aa 83       	std	Y+2, r26	; 0x02
    4990:	bb 83       	std	Y+3, r27	; 0x03
    4992:	c3 5c       	subi	r28, 0xC3	; 195
    4994:	d0 40       	sbci	r29, 0x00	; 0
	float bigR[2] = {-r*sin(b), r*cos(b)};
    4996:	c3 01       	movw	r24, r6
    4998:	b2 01       	movw	r22, r4
    499a:	0e 94 a6 48 	call	0x914c	; 0x914c <sin>
    499e:	cd 53       	subi	r28, 0x3D	; 61
    49a0:	df 4f       	sbci	r29, 0xFF	; 255
    49a2:	28 81       	ld	r18, Y
    49a4:	39 81       	ldd	r19, Y+1	; 0x01
    49a6:	4a 81       	ldd	r20, Y+2	; 0x02
    49a8:	5b 81       	ldd	r21, Y+3	; 0x03
    49aa:	c3 5c       	subi	r28, 0xC3	; 195
    49ac:	d0 40       	sbci	r29, 0x00	; 0
    49ae:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    49b2:	cd 51       	subi	r28, 0x1D	; 29
    49b4:	df 4f       	sbci	r29, 0xFF	; 255
    49b6:	68 83       	st	Y, r22
    49b8:	79 83       	std	Y+1, r23	; 0x01
    49ba:	8a 83       	std	Y+2, r24	; 0x02
    49bc:	9b 83       	std	Y+3, r25	; 0x03
    49be:	c3 5e       	subi	r28, 0xE3	; 227
    49c0:	d0 40       	sbci	r29, 0x00	; 0
    49c2:	c3 01       	movw	r24, r6
    49c4:	b2 01       	movw	r22, r4
    49c6:	0e 94 bd 44 	call	0x897a	; 0x897a <cos>
    49ca:	9b 01       	movw	r18, r22
    49cc:	ac 01       	movw	r20, r24
    49ce:	c5 01       	movw	r24, r10
    49d0:	b4 01       	movw	r22, r8
    49d2:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    49d6:	c9 51       	subi	r28, 0x19	; 25
    49d8:	df 4f       	sbci	r29, 0xFF	; 255
    49da:	68 83       	st	Y, r22
    49dc:	79 83       	std	Y+1, r23	; 0x01
    49de:	8a 83       	std	Y+2, r24	; 0x02
    49e0:	9b 83       	std	Y+3, r25	; 0x03
    49e2:	c7 5e       	subi	r28, 0xE7	; 231
    49e4:	d0 40       	sbci	r29, 0x00	; 0
    49e6:	c7 01       	movw	r24, r14
    49e8:	b6 01       	movw	r22, r12
    49ea:	0e 94 bd 44 	call	0x897a	; 0x897a <cos>
    49ee:	cd 53       	subi	r28, 0x3D	; 61
    49f0:	df 4f       	sbci	r29, 0xFF	; 255
    49f2:	68 83       	st	Y, r22
    49f4:	79 83       	std	Y+1, r23	; 0x01
    49f6:	8a 83       	std	Y+2, r24	; 0x02
    49f8:	9b 83       	std	Y+3, r25	; 0x03
    49fa:	c3 5c       	subi	r28, 0xC3	; 195
    49fc:	d0 40       	sbci	r29, 0x00	; 0
    49fe:	c7 01       	movw	r24, r14
    4a00:	b6 01       	movw	r22, r12
    4a02:	0e 94 a6 48 	call	0x914c	; 0x914c <sin>
    4a06:	2b 01       	movw	r4, r22
    4a08:	3c 01       	movw	r6, r24
    4a0a:	de 01       	movw	r26, r28
    4a0c:	af 56       	subi	r26, 0x6F	; 111
    4a0e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a10:	cf 53       	subi	r28, 0x3F	; 63
    4a12:	df 4f       	sbci	r29, 0xFF	; 255
    4a14:	a8 83       	st	Y, r26
    4a16:	b9 83       	std	Y+1, r27	; 0x01
    4a18:	c1 5c       	subi	r28, 0xC1	; 193
    4a1a:	d0 40       	sbci	r29, 0x00	; 0
    4a1c:	8d 01       	movw	r16, r26
    4a1e:	32 ee       	ldi	r19, 0xE2	; 226
    4a20:	23 2e       	mov	r2, r19
    4a22:	30 e2       	ldi	r19, 0x20	; 32
    4a24:	33 2e       	mov	r3, r19
    4a26:	fd 01       	movw	r30, r26
    4a28:	f0 96       	adiw	r30, 0x30	; 48
    4a2a:	c5 53       	subi	r28, 0x35	; 53
    4a2c:	df 4f       	sbci	r29, 0xFF	; 255
    4a2e:	e8 83       	st	Y, r30
    4a30:	f9 83       	std	Y+1, r31	; 0x01
    4a32:	cb 5c       	subi	r28, 0xCB	; 203
    4a34:	d0 40       	sbci	r29, 0x00	; 0
    4a36:	44 ea       	ldi	r20, 0xA4	; 164
    4a38:	84 2e       	mov	r8, r20
    4a3a:	4b e6       	ldi	r20, 0x6B	; 107
    4a3c:	94 2e       	mov	r9, r20
    4a3e:	48 e9       	ldi	r20, 0x98	; 152
    4a40:	a4 2e       	mov	r10, r20
    4a42:	41 e4       	ldi	r20, 0x41	; 65
    4a44:	b4 2e       	mov	r11, r20
    4a46:	c1 2c       	mov	r12, r1
    4a48:	d1 2c       	mov	r13, r1
    4a4a:	50 e3       	ldi	r21, 0x30	; 48
    4a4c:	e5 2e       	mov	r14, r21
    4a4e:	51 e4       	ldi	r21, 0x41	; 65
    4a50:	f5 2e       	mov	r15, r21
    4a52:	0c c0       	rjmp	.+24     	; 0x4a6c <calculate_error+0x138>
    4a54:	d1 01       	movw	r26, r2
    4a56:	cd 90       	ld	r12, X+
    4a58:	dd 90       	ld	r13, X+
    4a5a:	ed 90       	ld	r14, X+
    4a5c:	fc 90       	ld	r15, X
    4a5e:	13 97       	sbiw	r26, 0x03	; 3
    4a60:	14 96       	adiw	r26, 0x04	; 4
    4a62:	8d 90       	ld	r8, X+
    4a64:	9d 90       	ld	r9, X+
    4a66:	ad 90       	ld	r10, X+
    4a68:	bc 90       	ld	r11, X
    4a6a:	17 97       	sbiw	r26, 0x07	; 7
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
		txHats[i][0] = hats[i][0]*cos(h) - hats[i][1]*sin(h);
    4a6c:	cd 53       	subi	r28, 0x3D	; 61
    4a6e:	df 4f       	sbci	r29, 0xFF	; 255
    4a70:	28 81       	ld	r18, Y
    4a72:	39 81       	ldd	r19, Y+1	; 0x01
    4a74:	4a 81       	ldd	r20, Y+2	; 0x02
    4a76:	5b 81       	ldd	r21, Y+3	; 0x03
    4a78:	c3 5c       	subi	r28, 0xC3	; 195
    4a7a:	d0 40       	sbci	r29, 0x00	; 0
    4a7c:	c7 01       	movw	r24, r14
    4a7e:	b6 01       	movw	r22, r12
    4a80:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4a84:	c9 53       	subi	r28, 0x39	; 57
    4a86:	df 4f       	sbci	r29, 0xFF	; 255
    4a88:	68 83       	st	Y, r22
    4a8a:	79 83       	std	Y+1, r23	; 0x01
    4a8c:	8a 83       	std	Y+2, r24	; 0x02
    4a8e:	9b 83       	std	Y+3, r25	; 0x03
    4a90:	c7 5c       	subi	r28, 0xC7	; 199
    4a92:	d0 40       	sbci	r29, 0x00	; 0
    4a94:	a3 01       	movw	r20, r6
    4a96:	92 01       	movw	r18, r4
    4a98:	c5 01       	movw	r24, r10
    4a9a:	b4 01       	movw	r22, r8
    4a9c:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4aa0:	9b 01       	movw	r18, r22
    4aa2:	ac 01       	movw	r20, r24
    4aa4:	c9 53       	subi	r28, 0x39	; 57
    4aa6:	df 4f       	sbci	r29, 0xFF	; 255
    4aa8:	68 81       	ld	r22, Y
    4aaa:	79 81       	ldd	r23, Y+1	; 0x01
    4aac:	8a 81       	ldd	r24, Y+2	; 0x02
    4aae:	9b 81       	ldd	r25, Y+3	; 0x03
    4ab0:	c7 5c       	subi	r28, 0xC7	; 199
    4ab2:	d0 40       	sbci	r29, 0x00	; 0
    4ab4:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    4ab8:	d8 01       	movw	r26, r16
    4aba:	6d 93       	st	X+, r22
    4abc:	7d 93       	st	X+, r23
    4abe:	8d 93       	st	X+, r24
    4ac0:	9c 93       	st	X, r25
    4ac2:	13 97       	sbiw	r26, 0x03	; 3
		txHats[i][1] = hats[i][0]*sin(h) + hats[i][1]*cos(h);
    4ac4:	a3 01       	movw	r20, r6
    4ac6:	92 01       	movw	r18, r4
    4ac8:	c7 01       	movw	r24, r14
    4aca:	b6 01       	movw	r22, r12
    4acc:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4ad0:	6b 01       	movw	r12, r22
    4ad2:	7c 01       	movw	r14, r24
    4ad4:	a5 01       	movw	r20, r10
    4ad6:	94 01       	movw	r18, r8
    4ad8:	cd 53       	subi	r28, 0x3D	; 61
    4ada:	df 4f       	sbci	r29, 0xFF	; 255
    4adc:	68 81       	ld	r22, Y
    4ade:	79 81       	ldd	r23, Y+1	; 0x01
    4ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ae4:	c3 5c       	subi	r28, 0xC3	; 195
    4ae6:	d0 40       	sbci	r29, 0x00	; 0
    4ae8:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4aec:	9b 01       	movw	r18, r22
    4aee:	ac 01       	movw	r20, r24
    4af0:	c7 01       	movw	r24, r14
    4af2:	b6 01       	movw	r22, r12
    4af4:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    4af8:	f8 01       	movw	r30, r16
    4afa:	64 83       	std	Z+4, r22	; 0x04
    4afc:	75 83       	std	Z+5, r23	; 0x05
    4afe:	86 83       	std	Z+6, r24	; 0x06
    4b00:	97 83       	std	Z+7, r25	; 0x07
    4b02:	08 5f       	subi	r16, 0xF8	; 248
    4b04:	1f 4f       	sbci	r17, 0xFF	; 255
    4b06:	f8 e0       	ldi	r31, 0x08	; 8
    4b08:	2f 0e       	add	r2, r31
    4b0a:	31 1c       	adc	r3, r1

float calculate_error(float r, float b, float h){
	r = r<46 ? 46 : r;
	float bigR[2] = {-r*sin(b), r*cos(b)};
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
    4b0c:	c5 53       	subi	r28, 0x35	; 53
    4b0e:	df 4f       	sbci	r29, 0xFF	; 255
    4b10:	88 81       	ld	r24, Y
    4b12:	99 81       	ldd	r25, Y+1	; 0x01
    4b14:	cb 5c       	subi	r28, 0xCB	; 203
    4b16:	d0 40       	sbci	r29, 0x00	; 0
    4b18:	08 17       	cp	r16, r24
    4b1a:	19 07       	cpc	r17, r25
    4b1c:	09 f0       	breq	.+2      	; 0x4b20 <calculate_error+0x1ec>
    4b1e:	9a cf       	rjmp	.-204    	; 0x4a54 <calculate_error+0x120>
    4b20:	a1 ed       	ldi	r26, 0xD1	; 209
    4b22:	b2 e2       	ldi	r27, 0x22	; 34
    4b24:	c5 51       	subi	r28, 0x15	; 21
    4b26:	df 4f       	sbci	r29, 0xFF	; 255
    4b28:	a8 83       	st	Y, r26
    4b2a:	b9 83       	std	Y+1, r27	; 0x01
    4b2c:	cb 5e       	subi	r28, 0xEB	; 235
    4b2e:	d0 40       	sbci	r29, 0x00	; 0
    4b30:	fe 01       	movw	r30, r28
    4b32:	31 96       	adiw	r30, 0x01	; 1
    4b34:	1f 01       	movw	r2, r30
    4b36:	c3 52       	subi	r28, 0x23	; 35
    4b38:	df 4f       	sbci	r29, 0xFF	; 255
    4b3a:	e8 83       	st	Y, r30
    4b3c:	f9 83       	std	Y+1, r31	; 0x01
    4b3e:	cd 5d       	subi	r28, 0xDD	; 221
    4b40:	d0 40       	sbci	r29, 0x00	; 0
    4b42:	c5 52       	subi	r28, 0x25	; 37
    4b44:	df 4f       	sbci	r29, 0xFF	; 255
    4b46:	a8 83       	st	Y, r26
    4b48:	b9 83       	std	Y+1, r27	; 0x01
    4b4a:	cb 5d       	subi	r28, 0xDB	; 219
    4b4c:	d0 40       	sbci	r29, 0x00	; 0
    4b4e:	84 ea       	ldi	r24, 0xA4	; 164
    4b50:	9b e6       	ldi	r25, 0x6B	; 107
    4b52:	a8 e9       	ldi	r26, 0x98	; 152
    4b54:	b1 e4       	ldi	r27, 0x41	; 65
    4b56:	c9 52       	subi	r28, 0x29	; 41
    4b58:	df 4f       	sbci	r29, 0xFF	; 255
    4b5a:	88 83       	st	Y, r24
    4b5c:	99 83       	std	Y+1, r25	; 0x01
    4b5e:	aa 83       	std	Y+2, r26	; 0x02
    4b60:	bb 83       	std	Y+3, r27	; 0x03
    4b62:	c7 5d       	subi	r28, 0xD7	; 215
    4b64:	d0 40       	sbci	r29, 0x00	; 0
    4b66:	41 2c       	mov	r4, r1
    4b68:	51 2c       	mov	r5, r1
    4b6a:	20 e3       	ldi	r18, 0x30	; 48
    4b6c:	62 2e       	mov	r6, r18
    4b6e:	21 e4       	ldi	r18, 0x41	; 65
    4b70:	72 2e       	mov	r7, r18
    4b72:	10 e0       	ldi	r17, 0x00	; 0
    4b74:	c5 53       	subi	r28, 0x35	; 53
    4b76:	df 4f       	sbci	r29, 0xFF	; 255
    4b78:	18 82       	st	Y, r1
    4b7a:	19 82       	std	Y+1, r1	; 0x01
    4b7c:	1a 82       	std	Y+2, r1	; 0x02
    4b7e:	1b 82       	std	Y+3, r1	; 0x03
    4b80:	cb 5c       	subi	r28, 0xCB	; 203
    4b82:	d0 40       	sbci	r29, 0x00	; 0
    4b84:	c9 53       	subi	r28, 0x39	; 57
    4b86:	df 4f       	sbci	r29, 0xFF	; 255
    4b88:	18 82       	st	Y, r1
    4b8a:	19 82       	std	Y+1, r1	; 0x01
    4b8c:	1a 82       	std	Y+2, r1	; 0x02
    4b8e:	1b 82       	std	Y+3, r1	; 0x03
    4b90:	c7 5c       	subi	r28, 0xC7	; 199
    4b92:	d0 40       	sbci	r29, 0x00	; 0
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    4b94:	0b ea       	ldi	r16, 0xAB	; 171
    4b96:	c1 c0       	rjmp	.+386    	; 0x4d1a <calculate_error+0x3e6>
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];

		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
    4b98:	cd 53       	subi	r28, 0x3D	; 61
    4b9a:	df 4f       	sbci	r29, 0xFF	; 255
    4b9c:	68 81       	ld	r22, Y
    4b9e:	79 81       	ldd	r23, Y+1	; 0x01
    4ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ba4:	c3 5c       	subi	r28, 0xC3	; 195
    4ba6:	d0 40       	sbci	r29, 0x00	; 0
    4ba8:	90 58       	subi	r25, 0x80	; 128
    4baa:	c1 53       	subi	r28, 0x31	; 49
    4bac:	df 4f       	sbci	r29, 0xFF	; 255
    4bae:	28 81       	ld	r18, Y
    4bb0:	39 81       	ldd	r19, Y+1	; 0x01
    4bb2:	4a 81       	ldd	r20, Y+2	; 0x02
    4bb4:	5b 81       	ldd	r21, Y+3	; 0x03
    4bb6:	cf 5c       	subi	r28, 0xCF	; 207
    4bb8:	d0 40       	sbci	r29, 0x00	; 0
    4bba:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4bbe:	2b 01       	movw	r4, r22
    4bc0:	3c 01       	movw	r6, r24
    4bc2:	c7 01       	movw	r24, r14
    4bc4:	b6 01       	movw	r22, r12
    4bc6:	90 58       	subi	r25, 0x80	; 128
    4bc8:	cd 52       	subi	r28, 0x2D	; 45
    4bca:	df 4f       	sbci	r29, 0xFF	; 255
    4bcc:	28 81       	ld	r18, Y
    4bce:	39 81       	ldd	r19, Y+1	; 0x01
    4bd0:	4a 81       	ldd	r20, Y+2	; 0x02
    4bd2:	5b 81       	ldd	r21, Y+3	; 0x03
    4bd4:	c3 5d       	subi	r28, 0xD3	; 211
    4bd6:	d0 40       	sbci	r29, 0x00	; 0
    4bd8:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4bdc:	9b 01       	movw	r18, r22
    4bde:	ac 01       	movw	r20, r24
    4be0:	c3 01       	movw	r24, r6
    4be2:	b2 01       	movw	r22, r4
    4be4:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    4be8:	6b 01       	movw	r12, r22
    4bea:	7c 01       	movw	r14, r24
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    4bec:	20 e0       	ldi	r18, 0x00	; 0
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	a9 01       	movw	r20, r18
    4bf2:	0e 94 b8 44 	call	0x8970	; 0x8970 <__cmpsf2>
    4bf6:	87 fd       	sbrc	r24, 7
    4bf8:	3b c1       	rjmp	.+630    	; 0x4e70 <calculate_error+0x53c>

		measTotal += fast_bm[i];
    4bfa:	c5 52       	subi	r28, 0x25	; 37
    4bfc:	df 4f       	sbci	r29, 0xFF	; 255
    4bfe:	e8 81       	ld	r30, Y
    4c00:	f9 81       	ldd	r31, Y+1	; 0x01
    4c02:	cb 5d       	subi	r28, 0xDB	; 219
    4c04:	d0 40       	sbci	r29, 0x00	; 0
    4c06:	61 91       	ld	r22, Z+
    4c08:	71 91       	ld	r23, Z+
    4c0a:	c5 52       	subi	r28, 0x25	; 37
    4c0c:	df 4f       	sbci	r29, 0xFF	; 255
    4c0e:	e8 83       	st	Y, r30
    4c10:	f9 83       	std	Y+1, r31	; 0x01
    4c12:	cb 5d       	subi	r28, 0xDB	; 219
    4c14:	d0 40       	sbci	r29, 0x00	; 0
    4c16:	07 2e       	mov	r0, r23
    4c18:	00 0c       	add	r0, r0
    4c1a:	88 0b       	sbc	r24, r24
    4c1c:	99 0b       	sbc	r25, r25
    4c1e:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__floatsisf>
    4c22:	9b 01       	movw	r18, r22
    4c24:	ac 01       	movw	r20, r24
    4c26:	c9 53       	subi	r28, 0x39	; 57
    4c28:	df 4f       	sbci	r29, 0xFF	; 255
    4c2a:	68 81       	ld	r22, Y
    4c2c:	79 81       	ldd	r23, Y+1	; 0x01
    4c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c30:	9b 81       	ldd	r25, Y+3	; 0x03
    4c32:	c7 5c       	subi	r28, 0xC7	; 199
    4c34:	d0 40       	sbci	r29, 0x00	; 0
    4c36:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    4c3a:	c9 53       	subi	r28, 0x39	; 57
    4c3c:	df 4f       	sbci	r29, 0xFF	; 255
    4c3e:	68 83       	st	Y, r22
    4c40:	79 83       	std	Y+1, r23	; 0x01
    4c42:	8a 83       	std	Y+2, r24	; 0x02
    4c44:	9b 83       	std	Y+3, r25	; 0x03
    4c46:	c7 5c       	subi	r28, 0xC7	; 199
    4c48:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
    4c4a:	a7 01       	movw	r20, r14
    4c4c:	96 01       	movw	r18, r12
    4c4e:	c5 01       	movw	r24, r10
    4c50:	b4 01       	movw	r22, r8
    4c52:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4c56:	6b 01       	movw	r12, r22
    4c58:	7c 01       	movw	r14, r24
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	42 ef       	ldi	r20, 0xF2	; 242
    4c60:	53 e4       	ldi	r21, 0x43	; 67
    4c62:	c1 52       	subi	r28, 0x21	; 33
    4c64:	df 4f       	sbci	r29, 0xFF	; 255
    4c66:	68 81       	ld	r22, Y
    4c68:	79 81       	ldd	r23, Y+1	; 0x01
    4c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c6e:	cf 5d       	subi	r28, 0xDF	; 223
    4c70:	d0 40       	sbci	r29, 0x00	; 0
    4c72:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4c76:	9b 01       	movw	r18, r22
    4c78:	ac 01       	movw	r20, r24
    4c7a:	c7 01       	movw	r24, r14
    4c7c:	b6 01       	movw	r22, r12
    4c7e:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    4c82:	9b 01       	movw	r18, r22
    4c84:	ac 01       	movw	r20, r24
    4c86:	c3 52       	subi	r28, 0x23	; 35
    4c88:	df 4f       	sbci	r29, 0xFF	; 255
    4c8a:	a8 81       	ld	r26, Y
    4c8c:	b9 81       	ldd	r27, Y+1	; 0x01
    4c8e:	cd 5d       	subi	r28, 0xDD	; 221
    4c90:	d0 40       	sbci	r29, 0x00	; 0
    4c92:	6d 93       	st	X+, r22
    4c94:	7d 93       	st	X+, r23
    4c96:	8d 93       	st	X+, r24
    4c98:	9d 93       	st	X+, r25
    4c9a:	c3 52       	subi	r28, 0x23	; 35
    4c9c:	df 4f       	sbci	r29, 0xFF	; 255
    4c9e:	a8 83       	st	Y, r26
    4ca0:	b9 83       	std	Y+1, r27	; 0x01
    4ca2:	cd 5d       	subi	r28, 0xDD	; 221
    4ca4:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosBTotal += cosAcosB[i];
    4ca6:	c5 53       	subi	r28, 0x35	; 53
    4ca8:	df 4f       	sbci	r29, 0xFF	; 255
    4caa:	68 81       	ld	r22, Y
    4cac:	79 81       	ldd	r23, Y+1	; 0x01
    4cae:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    4cb2:	cb 5c       	subi	r28, 0xCB	; 203
    4cb4:	d0 40       	sbci	r29, 0x00	; 0
    4cb6:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    4cba:	c5 53       	subi	r28, 0x35	; 53
    4cbc:	df 4f       	sbci	r29, 0xFF	; 255
    4cbe:	68 83       	st	Y, r22
    4cc0:	79 83       	std	Y+1, r23	; 0x01
    4cc2:	8a 83       	std	Y+2, r24	; 0x02
    4cc4:	9b 83       	std	Y+3, r25	; 0x03
    4cc6:	cb 5c       	subi	r28, 0xCB	; 203
    4cc8:	d0 40       	sbci	r29, 0x00	; 0
	float measTotal = 0;
	float cosAcosBTotal = 0;
	float cosAcosBmat[6][6];
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    4cca:	1f 5f       	subi	r17, 0xFF	; 255
    4ccc:	14 32       	cpi	r17, 0x24	; 36
    4cce:	09 f4       	brne	.+2      	; 0x4cd2 <calculate_error+0x39e>
    4cd0:	d3 c0       	rjmp	.+422    	; 0x4e78 <calculate_error+0x544>
    4cd2:	10 9f       	mul	r17, r16
    4cd4:	81 2d       	mov	r24, r1
    4cd6:	11 24       	eor	r1, r1
    4cd8:	86 95       	lsr	r24
    4cda:	86 95       	lsr	r24
    4cdc:	98 2f       	mov	r25, r24
    4cde:	99 0f       	add	r25, r25
    4ce0:	89 0f       	add	r24, r25
    4ce2:	88 0f       	add	r24, r24
    4ce4:	e1 2f       	mov	r30, r17
    4ce6:	e8 1b       	sub	r30, r24
    4ce8:	f0 e0       	ldi	r31, 0x00	; 0
    4cea:	ee 0f       	add	r30, r30
    4cec:	ff 1f       	adc	r31, r31
    4cee:	ee 0f       	add	r30, r30
    4cf0:	ff 1f       	adc	r31, r31
    4cf2:	ee 0f       	add	r30, r30
    4cf4:	ff 1f       	adc	r31, r31
    4cf6:	ee 51       	subi	r30, 0x1E	; 30
    4cf8:	ff 4d       	sbci	r31, 0xDF	; 223
    4cfa:	40 80       	ld	r4, Z
    4cfc:	51 80       	ldd	r5, Z+1	; 0x01
    4cfe:	62 80       	ldd	r6, Z+2	; 0x02
    4d00:	73 80       	ldd	r7, Z+3	; 0x03
    4d02:	84 81       	ldd	r24, Z+4	; 0x04
    4d04:	95 81       	ldd	r25, Z+5	; 0x05
    4d06:	a6 81       	ldd	r26, Z+6	; 0x06
    4d08:	b7 81       	ldd	r27, Z+7	; 0x07
    4d0a:	c9 52       	subi	r28, 0x29	; 41
    4d0c:	df 4f       	sbci	r29, 0xFF	; 255
    4d0e:	88 83       	st	Y, r24
    4d10:	99 83       	std	Y+1, r25	; 0x01
    4d12:	aa 83       	std	Y+2, r26	; 0x02
    4d14:	bb 83       	std	Y+3, r27	; 0x03
    4d16:	c7 5d       	subi	r28, 0xD7	; 215
    4d18:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    4d1a:	10 9f       	mul	r17, r16
    4d1c:	81 2d       	mov	r24, r1
    4d1e:	11 24       	eor	r1, r1
    4d20:	86 95       	lsr	r24
    4d22:	86 95       	lsr	r24
    4d24:	91 e9       	ldi	r25, 0x91	; 145
    4d26:	e9 2e       	mov	r14, r25
    4d28:	f1 2c       	mov	r15, r1
    4d2a:	ec 0e       	add	r14, r28
    4d2c:	fd 1e       	adc	r15, r29
    4d2e:	b8 e0       	ldi	r27, 0x08	; 8
    4d30:	8b 9f       	mul	r24, r27
    4d32:	e0 0c       	add	r14, r0
    4d34:	f1 1c       	adc	r15, r1
    4d36:	11 24       	eor	r1, r1
    4d38:	d7 01       	movw	r26, r14
    4d3a:	8d 91       	ld	r24, X+
    4d3c:	9d 91       	ld	r25, X+
    4d3e:	0d 90       	ld	r0, X+
    4d40:	bc 91       	ld	r27, X
    4d42:	a0 2d       	mov	r26, r0
    4d44:	c1 53       	subi	r28, 0x31	; 49
    4d46:	df 4f       	sbci	r29, 0xFF	; 255
    4d48:	88 83       	st	Y, r24
    4d4a:	99 83       	std	Y+1, r25	; 0x01
    4d4c:	aa 83       	std	Y+2, r26	; 0x02
    4d4e:	bb 83       	std	Y+3, r27	; 0x03
    4d50:	cf 5c       	subi	r28, 0xCF	; 207
    4d52:	d0 40       	sbci	r29, 0x00	; 0
    4d54:	9c 01       	movw	r18, r24
    4d56:	ad 01       	movw	r20, r26
    4d58:	cd 51       	subi	r28, 0x1D	; 29
    4d5a:	df 4f       	sbci	r29, 0xFF	; 255
    4d5c:	68 81       	ld	r22, Y
    4d5e:	79 81       	ldd	r23, Y+1	; 0x01
    4d60:	8a 81       	ldd	r24, Y+2	; 0x02
    4d62:	9b 81       	ldd	r25, Y+3	; 0x03
    4d64:	c3 5e       	subi	r28, 0xE3	; 227
    4d66:	d0 40       	sbci	r29, 0x00	; 0
    4d68:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    4d6c:	a3 01       	movw	r20, r6
    4d6e:	92 01       	movw	r18, r4
    4d70:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    4d74:	cd 53       	subi	r28, 0x3D	; 61
    4d76:	df 4f       	sbci	r29, 0xFF	; 255
    4d78:	68 83       	st	Y, r22
    4d7a:	79 83       	std	Y+1, r23	; 0x01
    4d7c:	8a 83       	std	Y+2, r24	; 0x02
    4d7e:	9b 83       	std	Y+3, r25	; 0x03
    4d80:	c3 5c       	subi	r28, 0xC3	; 195
    4d82:	d0 40       	sbci	r29, 0x00	; 0
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
    4d84:	d7 01       	movw	r26, r14
    4d86:	14 96       	adiw	r26, 0x04	; 4
    4d88:	8d 91       	ld	r24, X+
    4d8a:	9d 91       	ld	r25, X+
    4d8c:	0d 90       	ld	r0, X+
    4d8e:	bc 91       	ld	r27, X
    4d90:	a0 2d       	mov	r26, r0
    4d92:	cd 52       	subi	r28, 0x2D	; 45
    4d94:	df 4f       	sbci	r29, 0xFF	; 255
    4d96:	88 83       	st	Y, r24
    4d98:	99 83       	std	Y+1, r25	; 0x01
    4d9a:	aa 83       	std	Y+2, r26	; 0x02
    4d9c:	bb 83       	std	Y+3, r27	; 0x03
    4d9e:	c3 5d       	subi	r28, 0xD3	; 211
    4da0:	d0 40       	sbci	r29, 0x00	; 0
    4da2:	9c 01       	movw	r18, r24
    4da4:	ad 01       	movw	r20, r26
    4da6:	c9 51       	subi	r28, 0x19	; 25
    4da8:	df 4f       	sbci	r29, 0xFF	; 255
    4daa:	68 81       	ld	r22, Y
    4dac:	79 81       	ldd	r23, Y+1	; 0x01
    4dae:	8a 81       	ldd	r24, Y+2	; 0x02
    4db0:	9b 81       	ldd	r25, Y+3	; 0x03
    4db2:	c7 5e       	subi	r28, 0xE7	; 231
    4db4:	d0 40       	sbci	r29, 0x00	; 0
    4db6:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    4dba:	c9 52       	subi	r28, 0x29	; 41
    4dbc:	df 4f       	sbci	r29, 0xFF	; 255
    4dbe:	28 81       	ld	r18, Y
    4dc0:	39 81       	ldd	r19, Y+1	; 0x01
    4dc2:	4a 81       	ldd	r20, Y+2	; 0x02
    4dc4:	5b 81       	ldd	r21, Y+3	; 0x03
    4dc6:	c7 5d       	subi	r28, 0xD7	; 215
    4dc8:	d0 40       	sbci	r29, 0x00	; 0
    4dca:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    4dce:	6b 01       	movw	r12, r22
    4dd0:	7c 01       	movw	r14, r24
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
    4dd2:	cd 53       	subi	r28, 0x3D	; 61
    4dd4:	df 4f       	sbci	r29, 0xFF	; 255
    4dd6:	28 81       	ld	r18, Y
    4dd8:	39 81       	ldd	r19, Y+1	; 0x01
    4dda:	4a 81       	ldd	r20, Y+2	; 0x02
    4ddc:	5b 81       	ldd	r21, Y+3	; 0x03
    4dde:	c3 5c       	subi	r28, 0xC3	; 195
    4de0:	d0 40       	sbci	r29, 0x00	; 0
    4de2:	ca 01       	movw	r24, r20
    4de4:	b9 01       	movw	r22, r18
    4de6:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4dea:	4b 01       	movw	r8, r22
    4dec:	5c 01       	movw	r10, r24
    4dee:	a7 01       	movw	r20, r14
    4df0:	96 01       	movw	r18, r12
    4df2:	c7 01       	movw	r24, r14
    4df4:	b6 01       	movw	r22, r12
    4df6:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4dfa:	9b 01       	movw	r18, r22
    4dfc:	ac 01       	movw	r20, r24
    4dfe:	c5 01       	movw	r24, r10
    4e00:	b4 01       	movw	r22, r8
    4e02:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    4e06:	c1 52       	subi	r28, 0x21	; 33
    4e08:	df 4f       	sbci	r29, 0xFF	; 255
    4e0a:	68 83       	st	Y, r22
    4e0c:	79 83       	std	Y+1, r23	; 0x01
    4e0e:	8a 83       	std	Y+2, r24	; 0x02
    4e10:	9b 83       	std	Y+3, r25	; 0x03
    4e12:	cf 5d       	subi	r28, 0xDF	; 223
    4e14:	d0 40       	sbci	r29, 0x00	; 0

		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
    4e16:	a3 01       	movw	r20, r6
    4e18:	92 01       	movw	r18, r4
    4e1a:	cd 53       	subi	r28, 0x3D	; 61
    4e1c:	df 4f       	sbci	r29, 0xFF	; 255
    4e1e:	68 81       	ld	r22, Y
    4e20:	79 81       	ldd	r23, Y+1	; 0x01
    4e22:	8a 81       	ldd	r24, Y+2	; 0x02
    4e24:	9b 81       	ldd	r25, Y+3	; 0x03
    4e26:	c3 5c       	subi	r28, 0xC3	; 195
    4e28:	d0 40       	sbci	r29, 0x00	; 0
    4e2a:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4e2e:	4b 01       	movw	r8, r22
    4e30:	5c 01       	movw	r10, r24
    4e32:	c9 52       	subi	r28, 0x29	; 41
    4e34:	df 4f       	sbci	r29, 0xFF	; 255
    4e36:	28 81       	ld	r18, Y
    4e38:	39 81       	ldd	r19, Y+1	; 0x01
    4e3a:	4a 81       	ldd	r20, Y+2	; 0x02
    4e3c:	5b 81       	ldd	r21, Y+3	; 0x03
    4e3e:	c7 5d       	subi	r28, 0xD7	; 215
    4e40:	d0 40       	sbci	r29, 0x00	; 0
    4e42:	c7 01       	movw	r24, r14
    4e44:	b6 01       	movw	r22, r12
    4e46:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    4e4a:	9b 01       	movw	r18, r22
    4e4c:	ac 01       	movw	r20, r24
    4e4e:	c5 01       	movw	r24, r10
    4e50:	b4 01       	movw	r22, r8
    4e52:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    4e56:	4b 01       	movw	r8, r22
    4e58:	5c 01       	movw	r10, r24
		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
    4e5a:	20 e0       	ldi	r18, 0x00	; 0
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	a9 01       	movw	r20, r18
    4e60:	0e 94 b8 44 	call	0x8970	; 0x8970 <__cmpsf2>
    4e64:	87 ff       	sbrs	r24, 7
    4e66:	98 ce       	rjmp	.-720    	; 0x4b98 <calculate_error+0x264>
    4e68:	81 2c       	mov	r8, r1
    4e6a:	91 2c       	mov	r9, r1
    4e6c:	54 01       	movw	r10, r8
    4e6e:	94 ce       	rjmp	.-728    	; 0x4b98 <calculate_error+0x264>
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    4e70:	c1 2c       	mov	r12, r1
    4e72:	d1 2c       	mov	r13, r1
    4e74:	76 01       	movw	r14, r12
    4e76:	c1 ce       	rjmp	.-638    	; 0x4bfa <calculate_error+0x2c6>
	float measTotal = 0;
	float cosAcosBTotal = 0;
	float cosAcosBmat[6][6];
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    4e78:	c1 2c       	mov	r12, r1
    4e7a:	d1 2c       	mov	r13, r1
    4e7c:	76 01       	movw	r14, r12
    4e7e:	c5 51       	subi	r28, 0x15	; 21
    4e80:	df 4f       	sbci	r29, 0xFF	; 255
    4e82:	08 81       	ld	r16, Y
    4e84:	19 81       	ldd	r17, Y+1	; 0x01
    4e86:	cb 5e       	subi	r28, 0xEB	; 235
    4e88:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
		cosAcosBTotal += cosAcosB[i];
	}
	float conf = 0;
	for(uint8_t i=0;i<36;i++){
		conf += fabsf( (fast_bm[i]/measTotal) - (cosAcosB[i]/cosAcosBTotal) );
    4e8a:	d8 01       	movw	r26, r16
    4e8c:	6d 91       	ld	r22, X+
    4e8e:	7d 91       	ld	r23, X+
    4e90:	8d 01       	movw	r16, r26
    4e92:	f1 01       	movw	r30, r2
    4e94:	41 90       	ld	r4, Z+
    4e96:	51 90       	ld	r5, Z+
    4e98:	61 90       	ld	r6, Z+
    4e9a:	71 90       	ld	r7, Z+
    4e9c:	1f 01       	movw	r2, r30
    4e9e:	07 2e       	mov	r0, r23
    4ea0:	00 0c       	add	r0, r0
    4ea2:	88 0b       	sbc	r24, r24
    4ea4:	99 0b       	sbc	r25, r25
    4ea6:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__floatsisf>
    4eaa:	c9 53       	subi	r28, 0x39	; 57
    4eac:	df 4f       	sbci	r29, 0xFF	; 255
    4eae:	28 81       	ld	r18, Y
    4eb0:	39 81       	ldd	r19, Y+1	; 0x01
    4eb2:	4a 81       	ldd	r20, Y+2	; 0x02
    4eb4:	5b 81       	ldd	r21, Y+3	; 0x03
    4eb6:	c7 5c       	subi	r28, 0xC7	; 199
    4eb8:	d0 40       	sbci	r29, 0x00	; 0
    4eba:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    4ebe:	4b 01       	movw	r8, r22
    4ec0:	5c 01       	movw	r10, r24
    4ec2:	c5 53       	subi	r28, 0x35	; 53
    4ec4:	df 4f       	sbci	r29, 0xFF	; 255
    4ec6:	28 81       	ld	r18, Y
    4ec8:	39 81       	ldd	r19, Y+1	; 0x01
    4eca:	4a 81       	ldd	r20, Y+2	; 0x02
    4ecc:	5b 81       	ldd	r21, Y+3	; 0x03
    4ece:	cb 5c       	subi	r28, 0xCB	; 203
    4ed0:	d0 40       	sbci	r29, 0x00	; 0
    4ed2:	c3 01       	movw	r24, r6
    4ed4:	b2 01       	movw	r22, r4
    4ed6:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    4eda:	9b 01       	movw	r18, r22
    4edc:	ac 01       	movw	r20, r24
    4ede:	c5 01       	movw	r24, r10
    4ee0:	b4 01       	movw	r22, r8
    4ee2:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    4ee6:	9b 01       	movw	r18, r22
    4ee8:	ac 01       	movw	r20, r24
    4eea:	5f 77       	andi	r21, 0x7F	; 127
    4eec:	c7 01       	movw	r24, r14
    4eee:	b6 01       	movw	r22, r12
    4ef0:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    4ef4:	6b 01       	movw	r12, r22
    4ef6:	7c 01       	movw	r14, r24
		measTotal += fast_bm[i];
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
		cosAcosBTotal += cosAcosB[i];
	}
	float conf = 0;
	for(uint8_t i=0;i<36;i++){
    4ef8:	cf 53       	subi	r28, 0x3F	; 63
    4efa:	df 4f       	sbci	r29, 0xFF	; 255
    4efc:	88 81       	ld	r24, Y
    4efe:	99 81       	ldd	r25, Y+1	; 0x01
    4f00:	c1 5c       	subi	r28, 0xC1	; 193
    4f02:	d0 40       	sbci	r29, 0x00	; 0
    4f04:	82 15       	cp	r24, r2
    4f06:	93 05       	cpc	r25, r3
    4f08:	09 f0       	breq	.+2      	; 0x4f0c <calculate_error+0x5d8>
    4f0a:	bf cf       	rjmp	.-130    	; 0x4e8a <calculate_error+0x556>
		//printf("}");
		//if(e<5) printf(",");
	//}
	//printf("}},\r\n");
	return conf;
}
    4f0c:	c7 01       	movw	r24, r14
    4f0e:	b6 01       	movw	r22, r12
    4f10:	c4 51       	subi	r28, 0x14	; 20
    4f12:	df 4f       	sbci	r29, 0xFF	; 255
    4f14:	cd bf       	out	0x3d, r28	; 61
    4f16:	de bf       	out	0x3e, r29	; 62
    4f18:	df 91       	pop	r29
    4f1a:	cf 91       	pop	r28
    4f1c:	1f 91       	pop	r17
    4f1e:	0f 91       	pop	r16
    4f20:	ff 90       	pop	r15
    4f22:	ef 90       	pop	r14
    4f24:	df 90       	pop	r13
    4f26:	cf 90       	pop	r12
    4f28:	bf 90       	pop	r11
    4f2a:	af 90       	pop	r10
    4f2c:	9f 90       	pop	r9
    4f2e:	8f 90       	pop	r8
    4f30:	7f 90       	pop	r7
    4f32:	6f 90       	pop	r6
    4f34:	5f 90       	pop	r5
    4f36:	4f 90       	pop	r4
    4f38:	3f 90       	pop	r3
    4f3a:	2f 90       	pop	r2
    4f3c:	08 95       	ret
    4f3e:	80 e0       	ldi	r24, 0x00	; 0
    4f40:	90 e0       	ldi	r25, 0x00	; 0
    4f42:	a8 e3       	ldi	r26, 0x38	; 56
    4f44:	b2 ec       	ldi	r27, 0xC2	; 194
    4f46:	cd 53       	subi	r28, 0x3D	; 61
    4f48:	df 4f       	sbci	r29, 0xFF	; 255
    4f4a:	88 83       	st	Y, r24
    4f4c:	99 83       	std	Y+1, r25	; 0x01
    4f4e:	aa 83       	std	Y+2, r26	; 0x02
    4f50:	bb 83       	std	Y+3, r27	; 0x03
    4f52:	c3 5c       	subi	r28, 0xC3	; 195
    4f54:	d0 40       	sbci	r29, 0x00	; 0

	return magicRangeFunc(total);
}

float calculate_error(float r, float b, float h){
	r = r<46 ? 46 : r;
    4f56:	81 2c       	mov	r8, r1
    4f58:	91 2c       	mov	r9, r1
    4f5a:	68 e3       	ldi	r22, 0x38	; 56
    4f5c:	a6 2e       	mov	r10, r22
    4f5e:	62 e4       	ldi	r22, 0x42	; 66
    4f60:	b6 2e       	mov	r11, r22
    4f62:	19 cd       	rjmp	.-1486   	; 0x4996 <calculate_error+0x62>

00004f64 <calculate_bearing_and_heading>:
	//}
	//printf("}},\r\n");
	return conf;
}

void calculate_bearing_and_heading(float* bearing, float* heading){
    4f64:	2f 92       	push	r2
    4f66:	3f 92       	push	r3
    4f68:	4f 92       	push	r4
    4f6a:	5f 92       	push	r5
    4f6c:	6f 92       	push	r6
    4f6e:	7f 92       	push	r7
    4f70:	8f 92       	push	r8
    4f72:	9f 92       	push	r9
    4f74:	af 92       	push	r10
    4f76:	bf 92       	push	r11
    4f78:	cf 92       	push	r12
    4f7a:	df 92       	push	r13
    4f7c:	ef 92       	push	r14
    4f7e:	ff 92       	push	r15
    4f80:	0f 93       	push	r16
    4f82:	1f 93       	push	r17
    4f84:	cf 93       	push	r28
    4f86:	df 93       	push	r29
    4f88:	cd b7       	in	r28, 0x3d	; 61
    4f8a:	de b7       	in	r29, 0x3e	; 62
    4f8c:	6c 97       	sbiw	r28, 0x1c	; 28
    4f8e:	cd bf       	out	0x3d, r28	; 61
    4f90:	de bf       	out	0x3e, r29	; 62
    4f92:	89 8f       	std	Y+25, r24	; 0x19
    4f94:	9a 8f       	std	Y+26, r25	; 0x1a
    4f96:	6b 8f       	std	Y+27, r22	; 0x1b
    4f98:	7c 8f       	std	Y+28, r23	; 0x1c
    4f9a:	21 ed       	ldi	r18, 0xD1	; 209
    4f9c:	22 2e       	mov	r2, r18
    4f9e:	22 e2       	ldi	r18, 0x22	; 34
    4fa0:	32 2e       	mov	r3, r18
    4fa2:	87 ed       	ldi	r24, 0xD7	; 215
    4fa4:	93 eb       	ldi	r25, 0xB3	; 179
    4fa6:	ad e5       	ldi	r26, 0x5D	; 93
    4fa8:	bf e3       	ldi	r27, 0x3F	; 63
    4faa:	8d 8b       	std	Y+21, r24	; 0x15
    4fac:	9e 8b       	std	Y+22, r25	; 0x16
    4fae:	af 8b       	std	Y+23, r26	; 0x17
    4fb0:	b8 8f       	std	Y+24, r27	; 0x18
    4fb2:	80 e0       	ldi	r24, 0x00	; 0
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	a0 e0       	ldi	r26, 0x00	; 0
    4fb8:	bf eb       	ldi	r27, 0xBF	; 191
    4fba:	89 8b       	std	Y+17, r24	; 0x11
    4fbc:	9a 8b       	std	Y+18, r25	; 0x12
    4fbe:	ab 8b       	std	Y+19, r26	; 0x13
    4fc0:	bc 8b       	std	Y+20, r27	; 0x14
    4fc2:	80 e0       	ldi	r24, 0x00	; 0
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	a0 e8       	ldi	r26, 0x80	; 128
    4fc8:	bf eb       	ldi	r27, 0xBF	; 191
    4fca:	8d 87       	std	Y+13, r24	; 0x0d
    4fcc:	9e 87       	std	Y+14, r25	; 0x0e
    4fce:	af 87       	std	Y+15, r26	; 0x0f
    4fd0:	b8 8b       	std	Y+16, r27	; 0x10
    4fd2:	19 86       	std	Y+9, r1	; 0x09
    4fd4:	1a 86       	std	Y+10, r1	; 0x0a
    4fd6:	1b 86       	std	Y+11, r1	; 0x0b
    4fd8:	1c 86       	std	Y+12, r1	; 0x0c
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
    4fda:	10 e0       	ldi	r17, 0x00	; 0
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;
    4fdc:	41 2c       	mov	r4, r1
    4fde:	51 2c       	mov	r5, r1
    4fe0:	32 01       	movw	r6, r4
void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
    4fe2:	53 01       	movw	r10, r6
    4fe4:	42 01       	movw	r8, r4

void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
    4fe6:	4d 82       	std	Y+5, r4	; 0x05
    4fe8:	5e 82       	std	Y+6, r5	; 0x06
    4fea:	6f 82       	std	Y+7, r6	; 0x07
    4fec:	78 86       	std	Y+8, r7	; 0x08
}

void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
    4fee:	49 82       	std	Y+1, r4	; 0x01
    4ff0:	5a 82       	std	Y+2, r5	; 0x02
    4ff2:	6b 82       	std	Y+3, r6	; 0x03
    4ff4:	7c 82       	std	Y+4, r7	; 0x04
    4ff6:	0b ea       	ldi	r16, 0xAB	; 171
    4ff8:	49 c0       	rjmp	.+146    	; 0x508c <calculate_bearing_and_heading+0x128>
    4ffa:	10 9f       	mul	r17, r16
    4ffc:	81 2d       	mov	r24, r1
    4ffe:	11 24       	eor	r1, r1
    5000:	86 95       	lsr	r24
    5002:	86 95       	lsr	r24
    5004:	98 2f       	mov	r25, r24
    5006:	99 0f       	add	r25, r25
    5008:	98 0f       	add	r25, r24
    500a:	99 0f       	add	r25, r25
    500c:	21 2f       	mov	r18, r17
    500e:	29 1b       	sub	r18, r25
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	e6 e0       	ldi	r30, 0x06	; 6
    5014:	f0 e0       	ldi	r31, 0x00	; 0
    5016:	e8 1b       	sub	r30, r24
    5018:	f1 09       	sbc	r31, r1
    501a:	cf 01       	movw	r24, r30
    501c:	82 0f       	add	r24, r18
    501e:	93 1f       	adc	r25, r19
    5020:	66 e0       	ldi	r22, 0x06	; 6
    5022:	70 e0       	ldi	r23, 0x00	; 0
    5024:	0e 94 ef 48 	call	0x91de	; 0x91de <__divmodhi4>
    5028:	fc 01       	movw	r30, r24
    502a:	ee 0f       	add	r30, r30
    502c:	ff 1f       	adc	r31, r31
    502e:	ee 0f       	add	r30, r30
    5030:	ff 1f       	adc	r31, r31
    5032:	ee 0f       	add	r30, r30
    5034:	ff 1f       	adc	r31, r31
    5036:	ee 54       	subi	r30, 0x4E	; 78
    5038:	ff 4d       	sbci	r31, 0xDF	; 223
    503a:	84 81       	ldd	r24, Z+4	; 0x04
    503c:	95 81       	ldd	r25, Z+5	; 0x05
    503e:	a6 81       	ldd	r26, Z+6	; 0x06
    5040:	b7 81       	ldd	r27, Z+7	; 0x07
    5042:	89 87       	std	Y+9, r24	; 0x09
    5044:	9a 87       	std	Y+10, r25	; 0x0a
    5046:	ab 87       	std	Y+11, r26	; 0x0b
    5048:	bc 87       	std	Y+12, r27	; 0x0c
    504a:	80 81       	ld	r24, Z
    504c:	91 81       	ldd	r25, Z+1	; 0x01
    504e:	a2 81       	ldd	r26, Z+2	; 0x02
    5050:	b3 81       	ldd	r27, Z+3	; 0x03
    5052:	8d 87       	std	Y+13, r24	; 0x0d
    5054:	9e 87       	std	Y+14, r25	; 0x0e
    5056:	af 87       	std	Y+15, r26	; 0x0f
    5058:	b8 8b       	std	Y+16, r27	; 0x10
    505a:	22 0f       	add	r18, r18
    505c:	33 1f       	adc	r19, r19
    505e:	22 0f       	add	r18, r18
    5060:	33 1f       	adc	r19, r19
    5062:	22 0f       	add	r18, r18
    5064:	33 1f       	adc	r19, r19
    5066:	f9 01       	movw	r30, r18
    5068:	ee 5e       	subi	r30, 0xEE	; 238
    506a:	fe 4d       	sbci	r31, 0xDE	; 222
    506c:	84 81       	ldd	r24, Z+4	; 0x04
    506e:	95 81       	ldd	r25, Z+5	; 0x05
    5070:	a6 81       	ldd	r26, Z+6	; 0x06
    5072:	b7 81       	ldd	r27, Z+7	; 0x07
    5074:	89 8b       	std	Y+17, r24	; 0x11
    5076:	9a 8b       	std	Y+18, r25	; 0x12
    5078:	ab 8b       	std	Y+19, r26	; 0x13
    507a:	bc 8b       	std	Y+20, r27	; 0x14
    507c:	80 81       	ld	r24, Z
    507e:	91 81       	ldd	r25, Z+1	; 0x01
    5080:	a2 81       	ldd	r26, Z+2	; 0x02
    5082:	b3 81       	ldd	r27, Z+3	; 0x03
    5084:	8d 8b       	std	Y+21, r24	; 0x15
    5086:	9e 8b       	std	Y+22, r25	; 0x16
    5088:	af 8b       	std	Y+23, r26	; 0x17
    508a:	b8 8f       	std	Y+24, r27	; 0x18
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
		
		bearingX+=fast_bm[i]*getCosBearingBasis(i/6,i%6);
    508c:	d1 01       	movw	r26, r2
    508e:	6d 91       	ld	r22, X+
    5090:	7d 91       	ld	r23, X+
    5092:	1d 01       	movw	r2, r26
    5094:	07 2e       	mov	r0, r23
    5096:	00 0c       	add	r0, r0
    5098:	88 0b       	sbc	r24, r24
    509a:	99 0b       	sbc	r25, r25
    509c:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__floatsisf>
    50a0:	6b 01       	movw	r12, r22
    50a2:	7c 01       	movw	r14, r24
    50a4:	2d 89       	ldd	r18, Y+21	; 0x15
    50a6:	3e 89       	ldd	r19, Y+22	; 0x16
    50a8:	4f 89       	ldd	r20, Y+23	; 0x17
    50aa:	58 8d       	ldd	r21, Y+24	; 0x18
    50ac:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    50b0:	9b 01       	movw	r18, r22
    50b2:	ac 01       	movw	r20, r24
    50b4:	69 81       	ldd	r22, Y+1	; 0x01
    50b6:	7a 81       	ldd	r23, Y+2	; 0x02
    50b8:	8b 81       	ldd	r24, Y+3	; 0x03
    50ba:	9c 81       	ldd	r25, Y+4	; 0x04
    50bc:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    50c0:	69 83       	std	Y+1, r22	; 0x01
    50c2:	7a 83       	std	Y+2, r23	; 0x02
    50c4:	8b 83       	std	Y+3, r24	; 0x03
    50c6:	9c 83       	std	Y+4, r25	; 0x04
		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
    50c8:	29 89       	ldd	r18, Y+17	; 0x11
    50ca:	3a 89       	ldd	r19, Y+18	; 0x12
    50cc:	4b 89       	ldd	r20, Y+19	; 0x13
    50ce:	5c 89       	ldd	r21, Y+20	; 0x14
    50d0:	c7 01       	movw	r24, r14
    50d2:	b6 01       	movw	r22, r12
    50d4:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    50d8:	9b 01       	movw	r18, r22
    50da:	ac 01       	movw	r20, r24
    50dc:	6d 81       	ldd	r22, Y+5	; 0x05
    50de:	7e 81       	ldd	r23, Y+6	; 0x06
    50e0:	8f 81       	ldd	r24, Y+7	; 0x07
    50e2:	98 85       	ldd	r25, Y+8	; 0x08
    50e4:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    50e8:	6d 83       	std	Y+5, r22	; 0x05
    50ea:	7e 83       	std	Y+6, r23	; 0x06
    50ec:	8f 83       	std	Y+7, r24	; 0x07
    50ee:	98 87       	std	Y+8, r25	; 0x08
		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
    50f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    50f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    50f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    50f6:	58 89       	ldd	r21, Y+16	; 0x10
    50f8:	c7 01       	movw	r24, r14
    50fa:	b6 01       	movw	r22, r12
    50fc:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5100:	9b 01       	movw	r18, r22
    5102:	ac 01       	movw	r20, r24
    5104:	c5 01       	movw	r24, r10
    5106:	b4 01       	movw	r22, r8
    5108:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    510c:	4b 01       	movw	r8, r22
    510e:	5c 01       	movw	r10, r24
		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
    5110:	29 85       	ldd	r18, Y+9	; 0x09
    5112:	3a 85       	ldd	r19, Y+10	; 0x0a
    5114:	4b 85       	ldd	r20, Y+11	; 0x0b
    5116:	5c 85       	ldd	r21, Y+12	; 0x0c
    5118:	c7 01       	movw	r24, r14
    511a:	b6 01       	movw	r22, r12
    511c:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5120:	9b 01       	movw	r18, r22
    5122:	ac 01       	movw	r20, r24
    5124:	c3 01       	movw	r24, r6
    5126:	b2 01       	movw	r22, r4
    5128:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    512c:	2b 01       	movw	r4, r22
    512e:	3c 01       	movw	r6, r24
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
    5130:	1f 5f       	subi	r17, 0xFF	; 255
    5132:	14 32       	cpi	r17, 0x24	; 36
    5134:	09 f0       	breq	.+2      	; 0x5138 <calculate_bearing_and_heading+0x1d4>
    5136:	61 cf       	rjmp	.-318    	; 0x4ffa <calculate_bearing_and_heading+0x96>
		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
	}
	
	*bearing = atan2f(bearingY, bearingX);	
    5138:	29 81       	ldd	r18, Y+1	; 0x01
    513a:	3a 81       	ldd	r19, Y+2	; 0x02
    513c:	4b 81       	ldd	r20, Y+3	; 0x03
    513e:	5c 81       	ldd	r21, Y+4	; 0x04
    5140:	6d 81       	ldd	r22, Y+5	; 0x05
    5142:	7e 81       	ldd	r23, Y+6	; 0x06
    5144:	8f 81       	ldd	r24, Y+7	; 0x07
    5146:	98 85       	ldd	r25, Y+8	; 0x08
    5148:	0e 94 59 44 	call	0x88b2	; 0x88b2 <atan2>
    514c:	a9 8d       	ldd	r26, Y+25	; 0x19
    514e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5150:	6d 93       	st	X+, r22
    5152:	7d 93       	st	X+, r23
    5154:	8d 93       	st	X+, r24
    5156:	9c 93       	st	X, r25
    5158:	13 97       	sbiw	r26, 0x03	; 3
	*heading = atan2f(headingY, headingX);
    515a:	a5 01       	movw	r20, r10
    515c:	94 01       	movw	r18, r8
    515e:	c3 01       	movw	r24, r6
    5160:	b2 01       	movw	r22, r4
    5162:	0e 94 59 44 	call	0x88b2	; 0x88b2 <atan2>
    5166:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5168:	fc 8d       	ldd	r31, Y+28	; 0x1c
    516a:	60 83       	st	Z, r22
    516c:	71 83       	std	Z+1, r23	; 0x01
    516e:	82 83       	std	Z+2, r24	; 0x02
    5170:	93 83       	std	Z+3, r25	; 0x03
}
    5172:	6c 96       	adiw	r28, 0x1c	; 28
    5174:	cd bf       	out	0x3d, r28	; 61
    5176:	de bf       	out	0x3e, r29	; 62
    5178:	df 91       	pop	r29
    517a:	cf 91       	pop	r28
    517c:	1f 91       	pop	r17
    517e:	0f 91       	pop	r16
    5180:	ff 90       	pop	r15
    5182:	ef 90       	pop	r14
    5184:	df 90       	pop	r13
    5186:	cf 90       	pop	r12
    5188:	bf 90       	pop	r11
    518a:	af 90       	pop	r10
    518c:	9f 90       	pop	r9
    518e:	8f 90       	pop	r8
    5190:	7f 90       	pop	r7
    5192:	6f 90       	pop	r6
    5194:	5f 90       	pop	r5
    5196:	4f 90       	pop	r4
    5198:	3f 90       	pop	r3
    519a:	2f 90       	pop	r2
    519c:	08 95       	ret

0000519e <useRnbData>:
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
	}
}

void useRnbData(){
    519e:	2f 92       	push	r2
    51a0:	3f 92       	push	r3
    51a2:	4f 92       	push	r4
    51a4:	5f 92       	push	r5
    51a6:	6f 92       	push	r6
    51a8:	7f 92       	push	r7
    51aa:	8f 92       	push	r8
    51ac:	9f 92       	push	r9
    51ae:	af 92       	push	r10
    51b0:	bf 92       	push	r11
    51b2:	cf 92       	push	r12
    51b4:	df 92       	push	r13
    51b6:	ef 92       	push	r14
    51b8:	ff 92       	push	r15
    51ba:	0f 93       	push	r16
    51bc:	1f 93       	push	r17
    51be:	cf 93       	push	r28
    51c0:	df 93       	push	r29
    51c2:	cd b7       	in	r28, 0x3d	; 61
    51c4:	de b7       	in	r29, 0x3e	; 62
    51c6:	2c 97       	sbiw	r28, 0x0c	; 12
    51c8:	cd bf       	out	0x3d, r28	; 61
    51ca:	de bf       	out	0x3e, r29	; 62
    51cc:	a1 ed       	ldi	r26, 0xD1	; 209
    51ce:	b2 e2       	ldi	r27, 0x22	; 34
    51d0:	09 e1       	ldi	r16, 0x19	; 25
    51d2:	13 e2       	ldi	r17, 0x23	; 35
	*heading = atan2f(headingY, headingX);
}

static int16_t processBrightMeas(void){
	int16_t val;
	int16_t valSum=0;
    51d4:	c1 2c       	mov	r12, r1
    51d6:	d1 2c       	mov	r13, r1
	uint8_t allColZeroCheck = 0b00111111;
    51d8:	6f e3       	ldi	r22, 0x3F	; 63
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
	}
}

void useRnbData(){
    51da:	fd 01       	movw	r30, r26
    51dc:	20 e0       	ldi	r18, 0x00	; 0
    51de:	30 e0       	ldi	r19, 0x00	; 0
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
			val = brightMeas[e][s];
    51e0:	41 91       	ld	r20, Z+
    51e2:	51 91       	ld	r21, Z+
			allColZeroCheck &= ~((!!val)<<s);	
    51e4:	81 e0       	ldi	r24, 0x01	; 1
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	41 15       	cp	r20, r1
    51ea:	51 05       	cpc	r21, r1
    51ec:	11 f4       	brne	.+4      	; 0x51f2 <useRnbData+0x54>
    51ee:	80 e0       	ldi	r24, 0x00	; 0
    51f0:	90 e0       	ldi	r25, 0x00	; 0
    51f2:	02 2e       	mov	r0, r18
    51f4:	01 c0       	rjmp	.+2      	; 0x51f8 <useRnbData+0x5a>
    51f6:	88 0f       	add	r24, r24
    51f8:	0a 94       	dec	r0
    51fa:	ea f7       	brpl	.-6      	; 0x51f6 <useRnbData+0x58>
    51fc:	80 95       	com	r24
    51fe:	68 23       	and	r22, r24
			//val=val*(val>0);
			brightMeas[e][s] = val;
			valSum+=val;	
    5200:	c4 0e       	add	r12, r20
    5202:	d5 1e       	adc	r13, r21
    5204:	2f 5f       	subi	r18, 0xFF	; 255
    5206:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t val;
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
    5208:	26 30       	cpi	r18, 0x06	; 6
    520a:	31 05       	cpc	r19, r1
    520c:	49 f7       	brne	.-46     	; 0x51e0 <useRnbData+0x42>
    520e:	1c 96       	adiw	r26, 0x0c	; 12
static int16_t processBrightMeas(void){
	int16_t val;
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
    5210:	0a 17       	cp	r16, r26
    5212:	1b 07       	cpc	r17, r27
    5214:	11 f7       	brne	.-60     	; 0x51da <useRnbData+0x3c>
    5216:	e6 2e       	mov	r14, r22
    5218:	f1 2c       	mov	r15, r1
    521a:	81 2c       	mov	r8, r1
    521c:	91 2c       	mov	r9, r1
    521e:	a1 2c       	mov	r10, r1
    5220:	b1 2c       	mov	r11, r1
    5222:	e0 e0       	ldi	r30, 0x00	; 0
    5224:	40 91 19 23 	lds	r20, 0x2319	; 0x802319 <sensorHealthHistory>
    5228:	50 91 1a 23 	lds	r21, 0x231A	; 0x80231a <sensorHealthHistory+0x1>
    522c:	60 91 1b 23 	lds	r22, 0x231B	; 0x80231b <sensorHealthHistory+0x2>
    5230:	70 91 1c 23 	lds	r23, 0x231C	; 0x80231c <sensorHealthHistory+0x3>
	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
    5234:	0f e0       	ldi	r16, 0x0F	; 15
    5236:	10 e0       	ldi	r17, 0x00	; 0
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
    5238:	66 24       	eor	r6, r6
    523a:	63 94       	inc	r6
    523c:	71 2c       	mov	r7, r1
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
    523e:	2e e6       	ldi	r18, 0x6E	; 110
    5240:	22 2e       	mov	r2, r18
    5242:	28 e0       	ldi	r18, 0x08	; 8
    5244:	32 2e       	mov	r3, r18
    5246:	34 c0       	rjmp	.+104    	; 0x52b0 <useRnbData+0x112>
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
    5248:	c3 01       	movw	r24, r6
    524a:	08 2c       	mov	r0, r8
    524c:	02 c0       	rjmp	.+4      	; 0x5252 <useRnbData+0xb4>
    524e:	88 0f       	add	r24, r24
    5250:	99 1f       	adc	r25, r25
    5252:	0a 94       	dec	r0
    5254:	e2 f7       	brpl	.-8      	; 0x524e <useRnbData+0xb0>
    5256:	09 2e       	mov	r0, r25
    5258:	00 0c       	add	r0, r0
    525a:	aa 0b       	sbc	r26, r26
    525c:	bb 0b       	sbc	r27, r27
    525e:	84 0f       	add	r24, r20
    5260:	95 1f       	adc	r25, r21
    5262:	a6 1f       	adc	r26, r22
    5264:	b7 1f       	adc	r27, r23
    5266:	ac 01       	movw	r20, r24
    5268:	bd 01       	movw	r22, r26
    526a:	80 93 19 23 	sts	0x2319, r24	; 0x802319 <sensorHealthHistory>
    526e:	90 93 1a 23 	sts	0x231A, r25	; 0x80231a <sensorHealthHistory+0x1>
    5272:	a0 93 1b 23 	sts	0x231B, r26	; 0x80231b <sensorHealthHistory+0x2>
    5276:	b0 93 1c 23 	sts	0x231C, r27	; 0x80231c <sensorHealthHistory+0x3>
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
    527a:	05 2c       	mov	r0, r5
    527c:	04 c0       	rjmp	.+8      	; 0x5286 <useRnbData+0xe8>
    527e:	b6 95       	lsr	r27
    5280:	a7 95       	ror	r26
    5282:	97 95       	ror	r25
    5284:	87 95       	ror	r24
    5286:	0a 94       	dec	r0
    5288:	d2 f7       	brpl	.-12     	; 0x527e <useRnbData+0xe0>
    528a:	8f 70       	andi	r24, 0x0F	; 15
    528c:	99 27       	eor	r25, r25
    528e:	aa 27       	eor	r26, r26
    5290:	bb 27       	eor	r27, r27
    5292:	0f 97       	sbiw	r24, 0x0f	; 15
    5294:	a1 05       	cpc	r26, r1
    5296:	b1 05       	cpc	r27, r1
    5298:	09 f4       	brne	.+2      	; 0x529c <useRnbData+0xfe>
    529a:	8f c1       	rjmp	.+798    	; 0x55ba <useRnbData+0x41c>
    529c:	8f ef       	ldi	r24, 0xFF	; 255
    529e:	a8 1a       	sub	r10, r24
    52a0:	b8 0a       	sbc	r11, r24
    52a2:	94 e0       	ldi	r25, 0x04	; 4
    52a4:	89 0e       	add	r8, r25
    52a6:	91 1c       	adc	r9, r1
			valSum+=val;	
		}
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
    52a8:	a6 e0       	ldi	r26, 0x06	; 6
    52aa:	aa 16       	cp	r10, r26
    52ac:	b1 04       	cpc	r11, r1
    52ae:	39 f1       	breq	.+78     	; 0x52fe <useRnbData+0x160>
		if(allColZeroCheck&(1<<i)){
    52b0:	95 01       	movw	r18, r10
    52b2:	c7 01       	movw	r24, r14
    52b4:	0a 2c       	mov	r0, r10
    52b6:	02 c0       	rjmp	.+4      	; 0x52bc <useRnbData+0x11e>
    52b8:	95 95       	asr	r25
    52ba:	87 95       	ror	r24
    52bc:	0a 94       	dec	r0
    52be:	e2 f7       	brpl	.-8      	; 0x52b8 <useRnbData+0x11a>
			sensorHealthHistory+=(1<<(4*i));
    52c0:	58 2c       	mov	r5, r8
		}
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
    52c2:	80 fd       	sbrc	r24, 0
    52c4:	c1 cf       	rjmp	.-126    	; 0x5248 <useRnbData+0xaa>
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
    52c6:	c8 01       	movw	r24, r16
    52c8:	08 2c       	mov	r0, r8
    52ca:	02 c0       	rjmp	.+4      	; 0x52d0 <useRnbData+0x132>
    52cc:	88 0f       	add	r24, r24
    52ce:	99 1f       	adc	r25, r25
    52d0:	0a 94       	dec	r0
    52d2:	e2 f7       	brpl	.-8      	; 0x52cc <useRnbData+0x12e>
    52d4:	80 95       	com	r24
    52d6:	90 95       	com	r25
    52d8:	09 2e       	mov	r0, r25
    52da:	00 0c       	add	r0, r0
    52dc:	aa 0b       	sbc	r26, r26
    52de:	bb 0b       	sbc	r27, r27
    52e0:	84 23       	and	r24, r20
    52e2:	95 23       	and	r25, r21
    52e4:	a6 23       	and	r26, r22
    52e6:	b7 23       	and	r27, r23
    52e8:	ac 01       	movw	r20, r24
    52ea:	bd 01       	movw	r22, r26
    52ec:	80 93 19 23 	sts	0x2319, r24	; 0x802319 <sensorHealthHistory>
    52f0:	90 93 1a 23 	sts	0x231A, r25	; 0x80231a <sensorHealthHistory+0x1>
    52f4:	a0 93 1b 23 	sts	0x231B, r26	; 0x80231b <sensorHealthHistory+0x2>
    52f8:	b0 93 1c 23 	sts	0x231C, r27	; 0x80231c <sensorHealthHistory+0x3>
    52fc:	be cf       	rjmp	.-132    	; 0x527a <useRnbData+0xdc>
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
			sensorHealthHistory&=~(0xF<<(4*i));
			problem = 1;
		}		
	}
	if(problem){
    52fe:	ee 23       	and	r30, r30
    5300:	09 f4       	brne	.+2      	; 0x5304 <useRnbData+0x166>
    5302:	57 c0       	rjmp	.+174    	; 0x53b2 <useRnbData+0x214>
void setRGB(uint8_t r, uint8_t g, uint8_t b);
void setHSV(uint16_t h, uint8_t s, uint8_t v);
void hsvToRGB(uint16_t h, uint8_t s, uint8_t v, uint8_t* r, uint8_t* g, uint8_t* b);

inline void warningLightSequence(void){
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    5304:	44 e6       	ldi	r20, 0x64	; 100
    5306:	64 e6       	ldi	r22, 0x64	; 100
    5308:	80 e0       	ldi	r24, 0x00	; 0
    530a:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    530e:	8c e2       	ldi	r24, 0x2C	; 44
    5310:	91 e0       	ldi	r25, 0x01	; 1
    5312:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    5316:	44 e6       	ldi	r20, 0x64	; 100
    5318:	60 e0       	ldi	r22, 0x00	; 0
    531a:	84 e6       	ldi	r24, 0x64	; 100
    531c:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    5320:	8c e2       	ldi	r24, 0x2C	; 44
    5322:	91 e0       	ldi	r25, 0x01	; 1
    5324:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    5328:	40 e0       	ldi	r20, 0x00	; 0
    532a:	64 e6       	ldi	r22, 0x64	; 100
    532c:	84 e6       	ldi	r24, 0x64	; 100
    532e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    5332:	8c e2       	ldi	r24, 0x2C	; 44
    5334:	91 e0       	ldi	r25, 0x01	; 1
    5336:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    533a:	0e 94 c5 2c 	call	0x598a	; 0x598a <ledOff>
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    533e:	44 e6       	ldi	r20, 0x64	; 100
    5340:	64 e6       	ldi	r22, 0x64	; 100
    5342:	80 e0       	ldi	r24, 0x00	; 0
    5344:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    5348:	8c e2       	ldi	r24, 0x2C	; 44
    534a:	91 e0       	ldi	r25, 0x01	; 1
    534c:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    5350:	44 e6       	ldi	r20, 0x64	; 100
    5352:	60 e0       	ldi	r22, 0x00	; 0
    5354:	84 e6       	ldi	r24, 0x64	; 100
    5356:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    535a:	8c e2       	ldi	r24, 0x2C	; 44
    535c:	91 e0       	ldi	r25, 0x01	; 1
    535e:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    5362:	40 e0       	ldi	r20, 0x00	; 0
    5364:	64 e6       	ldi	r22, 0x64	; 100
    5366:	84 e6       	ldi	r24, 0x64	; 100
    5368:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    536c:	8c e2       	ldi	r24, 0x2C	; 44
    536e:	91 e0       	ldi	r25, 0x01	; 1
    5370:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    5374:	0e 94 c5 2c 	call	0x598a	; 0x598a <ledOff>
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    5378:	44 e6       	ldi	r20, 0x64	; 100
    537a:	64 e6       	ldi	r22, 0x64	; 100
    537c:	80 e0       	ldi	r24, 0x00	; 0
    537e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    5382:	8c e2       	ldi	r24, 0x2C	; 44
    5384:	91 e0       	ldi	r25, 0x01	; 1
    5386:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    538a:	44 e6       	ldi	r20, 0x64	; 100
    538c:	60 e0       	ldi	r22, 0x00	; 0
    538e:	84 e6       	ldi	r24, 0x64	; 100
    5390:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    5394:	8c e2       	ldi	r24, 0x2C	; 44
    5396:	91 e0       	ldi	r25, 0x01	; 1
    5398:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    539c:	40 e0       	ldi	r20, 0x00	; 0
    539e:	64 e6       	ldi	r22, 0x64	; 100
    53a0:	84 e6       	ldi	r24, 0x64	; 100
    53a2:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    53a6:	8c e2       	ldi	r24, 0x2C	; 44
    53a8:	91 e0       	ldi	r25, 0x01	; 1
    53aa:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    53ae:	0e 94 c5 2c 	call	0x598a	; 0x598a <ledOff>
	//uint32_t start = get_time();
	int16_t matrixSum = processBrightMeas();
	//if(rand_byte()%2) broadcastBrightMeas();
	float bearing, heading;
	float error;
	calculate_bearing_and_heading(&bearing, &heading);
    53b2:	be 01       	movw	r22, r28
    53b4:	6f 5f       	subi	r22, 0xFF	; 255
    53b6:	7f 4f       	sbci	r23, 0xFF	; 255
    53b8:	ce 01       	movw	r24, r28
    53ba:	05 96       	adiw	r24, 0x05	; 5
    53bc:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <calculate_bearing_and_heading>
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
    53c0:	b6 01       	movw	r22, r12
    53c2:	dd 0c       	add	r13, r13
    53c4:	88 0b       	sbc	r24, r24
    53c6:	99 0b       	sbc	r25, r25
    53c8:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__floatsisf>
    53cc:	20 e2       	ldi	r18, 0x20	; 32
    53ce:	3b eb       	ldi	r19, 0xBB	; 187
    53d0:	44 e0       	ldi	r20, 0x04	; 4
    53d2:	50 e4       	ldi	r21, 0x40	; 64
    53d4:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    53d8:	0e 94 43 22 	call	0x4486	; 0x4486 <magicRangeFunc>
    53dc:	4b 01       	movw	r8, r22
    53de:	5c 01       	movw	r10, r24
	if(initialRange!=0&&!isnanf(initialRange)){	
    53e0:	20 e0       	ldi	r18, 0x00	; 0
    53e2:	30 e0       	ldi	r19, 0x00	; 0
    53e4:	a9 01       	movw	r20, r18
    53e6:	0e 94 b8 44 	call	0x8970	; 0x8970 <__cmpsf2>
    53ea:	88 23       	and	r24, r24
    53ec:	09 f4       	brne	.+2      	; 0x53f0 <useRnbData+0x252>
    53ee:	ca c0       	rjmp	.+404    	; 0x5584 <useRnbData+0x3e6>
    53f0:	a5 01       	movw	r20, r10
    53f2:	94 01       	movw	r18, r8
    53f4:	c5 01       	movw	r24, r10
    53f6:	b4 01       	movw	r22, r8
    53f8:	0e 94 b2 48 	call	0x9164	; 0x9164 <__unordsf2>
    53fc:	81 11       	cpse	r24, r1
    53fe:	c2 c0       	rjmp	.+388    	; 0x5584 <useRnbData+0x3e6>
		float range = calculate_range(initialRange, bearing, heading);
    5400:	89 81       	ldd	r24, Y+1	; 0x01
    5402:	9a 81       	ldd	r25, Y+2	; 0x02
    5404:	ab 81       	ldd	r26, Y+3	; 0x03
    5406:	bc 81       	ldd	r27, Y+4	; 0x04
    5408:	89 87       	std	Y+9, r24	; 0x09
    540a:	9a 87       	std	Y+10, r25	; 0x0a
    540c:	ab 87       	std	Y+11, r26	; 0x0b
    540e:	bc 87       	std	Y+12, r27	; 0x0c
    5410:	4d 80       	ldd	r4, Y+5	; 0x05
    5412:	5e 80       	ldd	r5, Y+6	; 0x06
    5414:	6f 80       	ldd	r6, Y+7	; 0x07
    5416:	78 84       	ldd	r7, Y+8	; 0x08
    5418:	7c 01       	movw	r14, r24
    541a:	8d 01       	movw	r16, r26
    541c:	a3 01       	movw	r20, r6
    541e:	92 01       	movw	r18, r4
    5420:	c5 01       	movw	r24, r10
    5422:	b4 01       	movw	r22, r8
    5424:	0e 94 ab 22 	call	0x4556	; 0x4556 <calculate_range>
    5428:	4b 01       	movw	r8, r22
    542a:	5c 01       	movw	r10, r24
		if(!isnanf(range)){
    542c:	9b 01       	movw	r18, r22
    542e:	ac 01       	movw	r20, r24
    5430:	0e 94 b2 48 	call	0x9164	; 0x9164 <__unordsf2>
    5434:	81 11       	cpse	r24, r1
    5436:	a6 c0       	rjmp	.+332    	; 0x5584 <useRnbData+0x3e6>
			if(range<2*DROPLET_RADIUS) range=46;
    5438:	20 e0       	ldi	r18, 0x00	; 0
    543a:	30 e0       	ldi	r19, 0x00	; 0
    543c:	40 e3       	ldi	r20, 0x30	; 48
    543e:	52 e4       	ldi	r21, 0x42	; 66
    5440:	c5 01       	movw	r24, r10
    5442:	b4 01       	movw	r22, r8
    5444:	0e 94 b8 44 	call	0x8970	; 0x8970 <__cmpsf2>
    5448:	87 fd       	sbrc	r24, 7
    544a:	e3 c0       	rjmp	.+454    	; 0x5612 <useRnbData+0x474>
			error = calculate_error(range, bearing, heading);
    544c:	a3 01       	movw	r20, r6
    544e:	92 01       	movw	r18, r4
    5450:	c5 01       	movw	r24, r10
    5452:	b4 01       	movw	r22, r8
    5454:	0e 94 9a 24 	call	0x4934	; 0x4934 <calculate_error>
    5458:	6b 01       	movw	r12, r22
    545a:	7c 01       	movw	r14, r24
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    545c:	20 e0       	ldi	r18, 0x00	; 0
    545e:	30 e0       	ldi	r19, 0x00	; 0
    5460:	4c ed       	ldi	r20, 0xDC	; 220
    5462:	52 e4       	ldi	r21, 0x42	; 66
    5464:	c5 01       	movw	r24, r10
    5466:	b4 01       	movw	r22, r8
    5468:	0e 94 b8 44 	call	0x8970	; 0x8970 <__cmpsf2>
    546c:	87 fd       	sbrc	r24, 7
    546e:	1e c1       	rjmp	.+572    	; 0x56ac <useRnbData+0x50e>
    5470:	20 e0       	ldi	r18, 0x00	; 0
    5472:	30 e0       	ldi	r19, 0x00	; 0
    5474:	48 e4       	ldi	r20, 0x48	; 72
    5476:	53 e4       	ldi	r21, 0x43	; 67
    5478:	c5 01       	movw	r24, r10
    547a:	b4 01       	movw	r22, r8
    547c:	0e 94 b8 44 	call	0x8970	; 0x8970 <__cmpsf2>
    5480:	87 fd       	sbrc	r24, 7
    5482:	e4 c0       	rjmp	.+456    	; 0x564c <useRnbData+0x4ae>
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	48 e4       	ldi	r20, 0x48	; 72
    548a:	53 e4       	ldi	r21, 0x43	; 67
    548c:	c5 01       	movw	r24, r10
    548e:	b4 01       	movw	r22, r8
    5490:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <__gesf2>
    5494:	18 16       	cp	r1, r24
    5496:	0c f4       	brge	.+2      	; 0x549a <useRnbData+0x2fc>
    5498:	75 c0       	rjmp	.+234    	; 0x5584 <useRnbData+0x3e6>
				return;
			}else{
				//printf("\r\n");
			}
			
			last_good_rnb.id = rnbCmdID;
    549a:	80 91 81 25 	lds	r24, 0x2581	; 0x802581 <rnbCmdID>
    549e:	90 91 82 25 	lds	r25, 0x2582	; 0x802582 <rnbCmdID+0x1>
    54a2:	80 93 e3 23 	sts	0x23E3, r24	; 0x8023e3 <last_good_rnb+0x6>
    54a6:	90 93 e4 23 	sts	0x23E4, r25	; 0x8023e4 <last_good_rnb+0x7>
			last_good_rnb.range		= (uint16_t)(range);
    54aa:	c5 01       	movw	r24, r10
    54ac:	b4 01       	movw	r22, r8
    54ae:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    54b2:	60 93 dd 23 	sts	0x23DD, r22	; 0x8023dd <last_good_rnb>
    54b6:	70 93 de 23 	sts	0x23DE, r23	; 0x8023de <last_good_rnb+0x1>
inline int16_t prettyAngleDeg(int16_t angle){
	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
}

inline float prettyAngle(float angle){
	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) + M_PI );
    54ba:	20 e0       	ldi	r18, 0x00	; 0
    54bc:	30 e0       	ldi	r19, 0x00	; 0
    54be:	a9 01       	movw	r20, r18
    54c0:	c3 01       	movw	r24, r6
    54c2:	b2 01       	movw	r22, r4
    54c4:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <__gesf2>
    54c8:	2b ed       	ldi	r18, 0xDB	; 219
    54ca:	3f e0       	ldi	r19, 0x0F	; 15
    54cc:	49 e4       	ldi	r20, 0x49	; 73
    54ce:	50 e4       	ldi	r21, 0x40	; 64
    54d0:	87 fd       	sbrc	r24, 7
    54d2:	c8 c0       	rjmp	.+400    	; 0x5664 <useRnbData+0x4c6>
    54d4:	c3 01       	movw	r24, r6
    54d6:	b2 01       	movw	r22, r4
    54d8:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    54dc:	2b ed       	ldi	r18, 0xDB	; 219
    54de:	3f e0       	ldi	r19, 0x0F	; 15
    54e0:	49 ec       	ldi	r20, 0xC9	; 201
    54e2:	50 e4       	ldi	r21, 0x40	; 64
    54e4:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <fmod>
    54e8:	2b ed       	ldi	r18, 0xDB	; 219
    54ea:	3f e0       	ldi	r19, 0x0F	; 15
    54ec:	49 e4       	ldi	r20, 0x49	; 73
    54ee:	50 e4       	ldi	r21, 0x40	; 64
    54f0:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
			last_good_rnb.bearing	= (int16_t)radToDeg(bearing);
    54f4:	2b ed       	ldi	r18, 0xDB	; 219
    54f6:	3f e0       	ldi	r19, 0x0F	; 15
    54f8:	49 e4       	ldi	r20, 0x49	; 73
    54fa:	50 e4       	ldi	r21, 0x40	; 64
    54fc:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    5500:	20 e0       	ldi	r18, 0x00	; 0
    5502:	30 e0       	ldi	r19, 0x00	; 0
    5504:	44 e3       	ldi	r20, 0x34	; 52
    5506:	53 e4       	ldi	r21, 0x43	; 67
    5508:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    550c:	0e 94 6e 45 	call	0x8adc	; 0x8adc <__fixsfsi>
    5510:	60 93 df 23 	sts	0x23DF, r22	; 0x8023df <last_good_rnb+0x2>
    5514:	70 93 e0 23 	sts	0x23E0, r23	; 0x8023e0 <last_good_rnb+0x3>
    5518:	20 e0       	ldi	r18, 0x00	; 0
    551a:	30 e0       	ldi	r19, 0x00	; 0
    551c:	a9 01       	movw	r20, r18
    551e:	69 85       	ldd	r22, Y+9	; 0x09
    5520:	7a 85       	ldd	r23, Y+10	; 0x0a
    5522:	8b 85       	ldd	r24, Y+11	; 0x0b
    5524:	9c 85       	ldd	r25, Y+12	; 0x0c
    5526:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <__gesf2>
    552a:	2b ed       	ldi	r18, 0xDB	; 219
    552c:	3f e0       	ldi	r19, 0x0F	; 15
    552e:	49 e4       	ldi	r20, 0x49	; 73
    5530:	50 e4       	ldi	r21, 0x40	; 64
    5532:	87 fd       	sbrc	r24, 7
    5534:	a8 c0       	rjmp	.+336    	; 0x5686 <useRnbData+0x4e8>
    5536:	69 85       	ldd	r22, Y+9	; 0x09
    5538:	7a 85       	ldd	r23, Y+10	; 0x0a
    553a:	8b 85       	ldd	r24, Y+11	; 0x0b
    553c:	9c 85       	ldd	r25, Y+12	; 0x0c
    553e:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    5542:	2b ed       	ldi	r18, 0xDB	; 219
    5544:	3f e0       	ldi	r19, 0x0F	; 15
    5546:	49 ec       	ldi	r20, 0xC9	; 201
    5548:	50 e4       	ldi	r21, 0x40	; 64
    554a:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <fmod>
    554e:	2b ed       	ldi	r18, 0xDB	; 219
    5550:	3f e0       	ldi	r19, 0x0F	; 15
    5552:	49 e4       	ldi	r20, 0x49	; 73
    5554:	50 e4       	ldi	r21, 0x40	; 64
    5556:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
			last_good_rnb.heading	= (int16_t)radToDeg(heading);
    555a:	2b ed       	ldi	r18, 0xDB	; 219
    555c:	3f e0       	ldi	r19, 0x0F	; 15
    555e:	49 e4       	ldi	r20, 0x49	; 73
    5560:	50 e4       	ldi	r21, 0x40	; 64
    5562:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    5566:	20 e0       	ldi	r18, 0x00	; 0
    5568:	30 e0       	ldi	r19, 0x00	; 0
    556a:	44 e3       	ldi	r20, 0x34	; 52
    556c:	53 e4       	ldi	r21, 0x43	; 67
    556e:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5572:	0e 94 6e 45 	call	0x8adc	; 0x8adc <__fixsfsi>
    5576:	60 93 e1 23 	sts	0x23E1, r22	; 0x8023e1 <last_good_rnb+0x4>
    557a:	70 93 e2 23 	sts	0x23E2, r23	; 0x8023e2 <last_good_rnb+0x5>
			//print_brightMeas();
			rnb_updated=1;
    557e:	81 e0       	ldi	r24, 0x01	; 1
    5580:	80 93 e7 23 	sts	0x23E7, r24	; 0x8023e7 <rnb_updated>
		}
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5584:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5586:	f8 94       	cli
		processing_rnb_flag=0;
    5588:	10 92 f9 23 	sts	0x23F9, r1	; 0x8023f9 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    558c:	8f bf       	out	0x3f, r24	; 63
	}
}
    558e:	2c 96       	adiw	r28, 0x0c	; 12
    5590:	cd bf       	out	0x3d, r28	; 61
    5592:	de bf       	out	0x3e, r29	; 62
    5594:	df 91       	pop	r29
    5596:	cf 91       	pop	r28
    5598:	1f 91       	pop	r17
    559a:	0f 91       	pop	r16
    559c:	ff 90       	pop	r15
    559e:	ef 90       	pop	r14
    55a0:	df 90       	pop	r13
    55a2:	cf 90       	pop	r12
    55a4:	bf 90       	pop	r11
    55a6:	af 90       	pop	r10
    55a8:	9f 90       	pop	r9
    55aa:	8f 90       	pop	r8
    55ac:	7f 90       	pop	r7
    55ae:	6f 90       	pop	r6
    55b0:	5f 90       	pop	r5
    55b2:	4f 90       	pop	r4
    55b4:	3f 90       	pop	r3
    55b6:	2f 90       	pop	r2
    55b8:	08 95       	ret
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
    55ba:	3f 93       	push	r19
    55bc:	2f 93       	push	r18
    55be:	3f 92       	push	r3
    55c0:	2f 92       	push	r2
    55c2:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
			sensorHealthHistory&=~(0xF<<(4*i));
    55c6:	c8 01       	movw	r24, r16
    55c8:	02 c0       	rjmp	.+4      	; 0x55ce <useRnbData+0x430>
    55ca:	88 0f       	add	r24, r24
    55cc:	99 1f       	adc	r25, r25
    55ce:	5a 94       	dec	r5
    55d0:	e2 f7       	brpl	.-8      	; 0x55ca <useRnbData+0x42c>
    55d2:	80 95       	com	r24
    55d4:	90 95       	com	r25
    55d6:	09 2e       	mov	r0, r25
    55d8:	00 0c       	add	r0, r0
    55da:	aa 0b       	sbc	r26, r26
    55dc:	bb 0b       	sbc	r27, r27
    55de:	40 91 19 23 	lds	r20, 0x2319	; 0x802319 <sensorHealthHistory>
    55e2:	50 91 1a 23 	lds	r21, 0x231A	; 0x80231a <sensorHealthHistory+0x1>
    55e6:	60 91 1b 23 	lds	r22, 0x231B	; 0x80231b <sensorHealthHistory+0x2>
    55ea:	70 91 1c 23 	lds	r23, 0x231C	; 0x80231c <sensorHealthHistory+0x3>
    55ee:	48 23       	and	r20, r24
    55f0:	59 23       	and	r21, r25
    55f2:	6a 23       	and	r22, r26
    55f4:	7b 23       	and	r23, r27
    55f6:	40 93 19 23 	sts	0x2319, r20	; 0x802319 <sensorHealthHistory>
    55fa:	50 93 1a 23 	sts	0x231A, r21	; 0x80231a <sensorHealthHistory+0x1>
    55fe:	60 93 1b 23 	sts	0x231B, r22	; 0x80231b <sensorHealthHistory+0x2>
    5602:	70 93 1c 23 	sts	0x231C, r23	; 0x80231c <sensorHealthHistory+0x3>
    5606:	0f 90       	pop	r0
    5608:	0f 90       	pop	r0
    560a:	0f 90       	pop	r0
    560c:	0f 90       	pop	r0
			problem = 1;
    560e:	e1 e0       	ldi	r30, 0x01	; 1
    5610:	45 ce       	rjmp	.-886    	; 0x529c <useRnbData+0xfe>
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
	if(initialRange!=0&&!isnanf(initialRange)){	
		float range = calculate_range(initialRange, bearing, heading);
		if(!isnanf(range)){
			if(range<2*DROPLET_RADIUS) range=46;
			error = calculate_error(range, bearing, heading);
    5612:	e9 84       	ldd	r14, Y+9	; 0x09
    5614:	fa 84       	ldd	r15, Y+10	; 0x0a
    5616:	0b 85       	ldd	r16, Y+11	; 0x0b
    5618:	1c 85       	ldd	r17, Y+12	; 0x0c
    561a:	a3 01       	movw	r20, r6
    561c:	92 01       	movw	r18, r4
    561e:	60 e0       	ldi	r22, 0x00	; 0
    5620:	70 e0       	ldi	r23, 0x00	; 0
    5622:	88 e3       	ldi	r24, 0x38	; 56
    5624:	92 e4       	ldi	r25, 0x42	; 66
    5626:	0e 94 9a 24 	call	0x4934	; 0x4934 <calculate_error>
    562a:	6b 01       	movw	r12, r22
    562c:	7c 01       	movw	r14, r24
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    562e:	20 e0       	ldi	r18, 0x00	; 0
    5630:	30 e0       	ldi	r19, 0x00	; 0
    5632:	40 e8       	ldi	r20, 0x80	; 128
    5634:	5f e3       	ldi	r21, 0x3F	; 63
    5636:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <__gesf2>
    563a:	18 16       	cp	r1, r24
    563c:	0c f4       	brge	.+2      	; 0x5640 <useRnbData+0x4a2>
    563e:	a2 cf       	rjmp	.-188    	; 0x5584 <useRnbData+0x3e6>
	calculate_bearing_and_heading(&bearing, &heading);
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
	if(initialRange!=0&&!isnanf(initialRange)){	
		float range = calculate_range(initialRange, bearing, heading);
		if(!isnanf(range)){
			if(range<2*DROPLET_RADIUS) range=46;
    5640:	81 2c       	mov	r8, r1
    5642:	91 2c       	mov	r9, r1
    5644:	88 e3       	ldi	r24, 0x38	; 56
    5646:	a8 2e       	mov	r10, r24
    5648:	82 e4       	ldi	r24, 0x42	; 66
    564a:	b8 2e       	mov	r11, r24
			error = calculate_error(range, bearing, heading);
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    564c:	20 e0       	ldi	r18, 0x00	; 0
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	40 ec       	ldi	r20, 0xC0	; 192
    5652:	5f e3       	ldi	r21, 0x3F	; 63
    5654:	c7 01       	movw	r24, r14
    5656:	b6 01       	movw	r22, r12
    5658:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <__gesf2>
    565c:	18 16       	cp	r1, r24
    565e:	0c f0       	brlt	.+2      	; 0x5662 <useRnbData+0x4c4>
    5660:	11 cf       	rjmp	.-478    	; 0x5484 <useRnbData+0x2e6>
    5662:	90 cf       	rjmp	.-224    	; 0x5584 <useRnbData+0x3e6>
    5664:	c3 01       	movw	r24, r6
    5666:	b2 01       	movw	r22, r4
    5668:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    566c:	2b ed       	ldi	r18, 0xDB	; 219
    566e:	3f e0       	ldi	r19, 0x0F	; 15
    5670:	49 ec       	ldi	r20, 0xC9	; 201
    5672:	50 e4       	ldi	r21, 0x40	; 64
    5674:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <fmod>
    5678:	2b ed       	ldi	r18, 0xDB	; 219
    567a:	3f e0       	ldi	r19, 0x0F	; 15
    567c:	49 e4       	ldi	r20, 0x49	; 73
    567e:	50 e4       	ldi	r21, 0x40	; 64
    5680:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    5684:	37 cf       	rjmp	.-402    	; 0x54f4 <useRnbData+0x356>
    5686:	69 85       	ldd	r22, Y+9	; 0x09
    5688:	7a 85       	ldd	r23, Y+10	; 0x0a
    568a:	8b 85       	ldd	r24, Y+11	; 0x0b
    568c:	9c 85       	ldd	r25, Y+12	; 0x0c
    568e:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    5692:	2b ed       	ldi	r18, 0xDB	; 219
    5694:	3f e0       	ldi	r19, 0x0F	; 15
    5696:	49 ec       	ldi	r20, 0xC9	; 201
    5698:	50 e4       	ldi	r21, 0x40	; 64
    569a:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <fmod>
    569e:	2b ed       	ldi	r18, 0xDB	; 219
    56a0:	3f e0       	ldi	r19, 0x0F	; 15
    56a2:	49 e4       	ldi	r20, 0x49	; 73
    56a4:	50 e4       	ldi	r21, 0x40	; 64
    56a6:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    56aa:	57 cf       	rjmp	.-338    	; 0x555a <useRnbData+0x3bc>
    56ac:	20 e0       	ldi	r18, 0x00	; 0
    56ae:	30 e0       	ldi	r19, 0x00	; 0
    56b0:	40 e8       	ldi	r20, 0x80	; 128
    56b2:	5f e3       	ldi	r21, 0x3F	; 63
    56b4:	c7 01       	movw	r24, r14
    56b6:	b6 01       	movw	r22, r12
    56b8:	0e 94 1e 47 	call	0x8e3c	; 0x8e3c <__gesf2>
    56bc:	18 16       	cp	r1, r24
    56be:	0c f0       	brlt	.+2      	; 0x56c2 <useRnbData+0x524>
    56c0:	d7 ce       	rjmp	.-594    	; 0x5470 <useRnbData+0x2d2>
    56c2:	60 cf       	rjmp	.-320    	; 0x5584 <useRnbData+0x3e6>

000056c4 <irRangeMeas>:
		warningLightSequence();
	}	
	return valSum;
}

void irRangeMeas(uint32_t rnbCmdSentTime){
    56c4:	cf 92       	push	r12
    56c6:	df 92       	push	r13
    56c8:	ef 92       	push	r14
    56ca:	ff 92       	push	r15
    56cc:	1f 93       	push	r17
    56ce:	cf 93       	push	r28
    56d0:	df 93       	push	r29
    56d2:	28 e0       	ldi	r18, 0x08	; 8
    56d4:	c2 2e       	mov	r12, r18
    56d6:	d1 2c       	mov	r13, r1
    56d8:	e1 2c       	mov	r14, r1
    56da:	f1 2c       	mov	r15, r1
    56dc:	c6 1a       	sub	r12, r22
    56de:	d7 0a       	sbc	r13, r23
    56e0:	e8 0a       	sbc	r14, r24
    56e2:	f9 0a       	sbc	r15, r25
	//int32_t times[16] = {0};
	//times[0] = get_time();
	while((getTime()-rnbCmdSentTime+8)<POST_BROADCAST_DELAY);
    56e4:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    56e8:	dc 01       	movw	r26, r24
    56ea:	cb 01       	movw	r24, r22
    56ec:	8c 0d       	add	r24, r12
    56ee:	9d 1d       	adc	r25, r13
    56f0:	ae 1d       	adc	r26, r14
    56f2:	bf 1d       	adc	r27, r15
    56f4:	4e 97       	sbiw	r24, 0x1e	; 30
    56f6:	a1 05       	cpc	r26, r1
    56f8:	b1 05       	cpc	r27, r1
    56fa:	a0 f3       	brcs	.-24     	; 0x56e4 <irRangeMeas+0x20>
	//times[1] = get_time();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    56fc:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    56fe:	f8 94       	cli
		uint32_t pre_sync_op = getTime();
    5700:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    5704:	6b 01       	movw	r12, r22
    5706:	7c 01       	movw	r14, r24
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
    5708:	06 c0       	rjmp	.+12     	; 0x5716 <irRangeMeas+0x52>
    570a:	8f e9       	ldi	r24, 0x9F	; 159
    570c:	9f e0       	ldi	r25, 0x0F	; 15
    570e:	01 97       	sbiw	r24, 0x01	; 1
    5710:	f1 f7       	brne	.-4      	; 0x570e <irRangeMeas+0x4a>
    5712:	00 c0       	rjmp	.+0      	; 0x5714 <irRangeMeas+0x50>
    5714:	00 00       	nop
    5716:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    571a:	dc 01       	movw	r26, r24
    571c:	cb 01       	movw	r24, r22
    571e:	8c 19       	sub	r24, r12
    5720:	9d 09       	sbc	r25, r13
    5722:	ae 09       	sbc	r26, r14
    5724:	bf 09       	sbc	r27, r15
    5726:	02 97       	sbiw	r24, 0x02	; 2
    5728:	a1 05       	cpc	r26, r1
    572a:	b1 05       	cpc	r27, r1
    572c:	70 f3       	brcs	.-36     	; 0x570a <irRangeMeas+0x46>
    572e:	c1 ed       	ldi	r28, 0xD1	; 209
    5730:	d2 e2       	ldi	r29, 0x22	; 34
		//times[2] = get_time();
		for(uint8_t emitter_dir = 0; emitter_dir < 6; emitter_dir++){
			pre_sync_op = getTime();
    5732:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    5736:	6b 01       	movw	r12, r22
    5738:	7c 01       	movw	r14, r24
			//times[2*emitter_dir+3] = pre_sync_op;
			while((getTime() - pre_sync_op) < (TIME_FOR_GET_IR_VALS-TIME_FOR_IR_MEAS)/2) delay_us(500);
    573a:	06 c0       	rjmp	.+12     	; 0x5748 <irRangeMeas+0x84>
    573c:	8f e9       	ldi	r24, 0x9F	; 159
    573e:	9f e0       	ldi	r25, 0x0F	; 15
    5740:	01 97       	sbiw	r24, 0x01	; 1
    5742:	f1 f7       	brne	.-4      	; 0x5740 <irRangeMeas+0x7c>
    5744:	00 c0       	rjmp	.+0      	; 0x5746 <irRangeMeas+0x82>
    5746:	00 00       	nop
    5748:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    574c:	dc 01       	movw	r26, r24
    574e:	cb 01       	movw	r24, r22
    5750:	8c 19       	sub	r24, r12
    5752:	9d 09       	sbc	r25, r13
    5754:	ae 09       	sbc	r26, r14
    5756:	bf 09       	sbc	r27, r15
    5758:	02 97       	sbiw	r24, 0x02	; 2
    575a:	a1 05       	cpc	r26, r1
    575c:	b1 05       	cpc	r27, r1
    575e:	70 f3       	brcs	.-36     	; 0x573c <irRangeMeas+0x78>
			getIrSensors(brightMeas[emitter_dir] , 9); //11
    5760:	69 e0       	ldi	r22, 0x09	; 9
    5762:	ce 01       	movw	r24, r28
    5764:	0e 94 09 1b 	call	0x3612	; 0x3612 <getIrSensors>
			//times[2*emitter_dir+4] = get_time();			
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);		
    5768:	06 c0       	rjmp	.+12     	; 0x5776 <irRangeMeas+0xb2>
    576a:	8f e9       	ldi	r24, 0x9F	; 159
    576c:	9f e0       	ldi	r25, 0x0F	; 15
    576e:	01 97       	sbiw	r24, 0x01	; 1
    5770:	f1 f7       	brne	.-4      	; 0x576e <irRangeMeas+0xaa>
    5772:	00 c0       	rjmp	.+0      	; 0x5774 <irRangeMeas+0xb0>
    5774:	00 00       	nop
    5776:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    577a:	dc 01       	movw	r26, r24
    577c:	cb 01       	movw	r24, r22
    577e:	8c 19       	sub	r24, r12
    5780:	9d 09       	sbc	r25, r13
    5782:	ae 09       	sbc	r26, r14
    5784:	bf 09       	sbc	r27, r15
    5786:	40 97       	sbiw	r24, 0x10	; 16
    5788:	a1 05       	cpc	r26, r1
    578a:	b1 05       	cpc	r27, r1
    578c:	70 f3       	brcs	.-36     	; 0x576a <irRangeMeas+0xa6>
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
    578e:	8a e0       	ldi	r24, 0x0A	; 10
    5790:	90 e0       	ldi	r25, 0x00	; 0
    5792:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    5796:	2c 96       	adiw	r28, 0x0c	; 12
	//times[1] = get_time();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
		uint32_t pre_sync_op = getTime();
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
		//times[2] = get_time();
		for(uint8_t emitter_dir = 0; emitter_dir < 6; emitter_dir++){
    5798:	93 e2       	ldi	r25, 0x23	; 35
    579a:	c9 31       	cpi	r28, 0x19	; 25
    579c:	d9 07       	cpc	r29, r25
    579e:	49 f6       	brne	.-110    	; 0x5732 <irRangeMeas+0x6e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    57a0:	1f bf       	out	0x3f, r17	; 63
			//times[2*emitter_dir+4] = get_time();			
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);		
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
}
    57a2:	df 91       	pop	r29
    57a4:	cf 91       	pop	r28
    57a6:	1f 91       	pop	r17
    57a8:	ff 90       	pop	r15
    57aa:	ef 90       	pop	r14
    57ac:	df 90       	pop	r13
    57ae:	cf 90       	pop	r12
    57b0:	08 95       	ret

000057b2 <irRangeBlast>:

void irRangeBlast(uint32_t rnbCmdSentTime, uint8_t power __attribute__ ((unused))){
    57b2:	cf 92       	push	r12
    57b4:	df 92       	push	r13
    57b6:	ef 92       	push	r14
    57b8:	ff 92       	push	r15
    57ba:	0f 93       	push	r16
    57bc:	1f 93       	push	r17
    57be:	cf 93       	push	r28
    57c0:	df 93       	push	r29
    57c2:	6b 01       	movw	r12, r22
    57c4:	7c 01       	movw	r14, r24
	//int32_t times[16] = {0};
	//times[0] = get_time();
	while((getTime() - rnbCmdSentTime) < POST_BROADCAST_DELAY) delay_us(500);
    57c6:	06 c0       	rjmp	.+12     	; 0x57d4 <irRangeBlast+0x22>
    57c8:	8f e9       	ldi	r24, 0x9F	; 159
    57ca:	9f e0       	ldi	r25, 0x0F	; 15
    57cc:	01 97       	sbiw	r24, 0x01	; 1
    57ce:	f1 f7       	brne	.-4      	; 0x57cc <irRangeBlast+0x1a>
    57d0:	00 c0       	rjmp	.+0      	; 0x57d2 <irRangeBlast+0x20>
    57d2:	00 00       	nop
    57d4:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    57d8:	dc 01       	movw	r26, r24
    57da:	cb 01       	movw	r24, r22
    57dc:	8c 19       	sub	r24, r12
    57de:	9d 09       	sbc	r25, r13
    57e0:	ae 09       	sbc	r26, r14
    57e2:	bf 09       	sbc	r27, r15
    57e4:	4e 97       	sbiw	r24, 0x1e	; 30
    57e6:	a1 05       	cpc	r26, r1
    57e8:	b1 05       	cpc	r27, r1
    57ea:	70 f3       	brcs	.-36     	; 0x57c8 <irRangeBlast+0x16>
	//times[1] = get_time();
	uint32_t pre_sync_op = getTime();
    57ec:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    57f0:	6b 01       	movw	r12, r22
    57f2:	7c 01       	movw	r14, r24
	uint16_t prevPower = curr_ir_power;
    57f4:	c0 91 91 25 	lds	r28, 0x2591	; 0x802591 <curr_ir_power>
    57f8:	d0 91 92 25 	lds	r29, 0x2592	; 0x802592 <curr_ir_power+0x1>
	setAllirPowers(256);	
    57fc:	80 e0       	ldi	r24, 0x00	; 0
    57fe:	91 e0       	ldi	r25, 0x01	; 1
    5800:	0e 94 67 1a 	call	0x34ce	; 0x34ce <setAllirPowers>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    5804:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5806:	f8 94       	cli
    5808:	06 c0       	rjmp	.+12     	; 0x5816 <irRangeBlast+0x64>
    580a:	8f e9       	ldi	r24, 0x9F	; 159
    580c:	9f e0       	ldi	r25, 0x0F	; 15
    580e:	01 97       	sbiw	r24, 0x01	; 1
    5810:	f1 f7       	brne	.-4      	; 0x580e <irRangeBlast+0x5c>
    5812:	00 c0       	rjmp	.+0      	; 0x5814 <irRangeBlast+0x62>
    5814:	00 00       	nop
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
    5816:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    581a:	dc 01       	movw	r26, r24
    581c:	cb 01       	movw	r24, r22
    581e:	8c 19       	sub	r24, r12
    5820:	9d 09       	sbc	r25, r13
    5822:	ae 09       	sbc	r26, r14
    5824:	bf 09       	sbc	r27, r15
    5826:	02 97       	sbiw	r24, 0x02	; 2
    5828:	a1 05       	cpc	r26, r1
    582a:	b1 05       	cpc	r27, r1
    582c:	70 f3       	brcs	.-36     	; 0x580a <irRangeBlast+0x58>
    582e:	00 e0       	ldi	r16, 0x00	; 0
		//times[2] = get_time();
		for(uint8_t dir = 0; dir < 6; dir++){
			pre_sync_op = getTime();
    5830:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    5834:	6b 01       	movw	r12, r22
    5836:	7c 01       	movw	r14, r24
			//set_red_led(255);
			//times[2*dir+3] = pre_sync_op;			
			irLedOn(dir);
    5838:	80 2f       	mov	r24, r16
    583a:	0e 94 03 1a 	call	0x3406	; 0x3406 <irLedOn>
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);
    583e:	06 c0       	rjmp	.+12     	; 0x584c <irRangeBlast+0x9a>
    5840:	8f e9       	ldi	r24, 0x9F	; 159
    5842:	9f e0       	ldi	r25, 0x0F	; 15
    5844:	01 97       	sbiw	r24, 0x01	; 1
    5846:	f1 f7       	brne	.-4      	; 0x5844 <irRangeBlast+0x92>
    5848:	00 c0       	rjmp	.+0      	; 0x584a <irRangeBlast+0x98>
    584a:	00 00       	nop
    584c:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    5850:	dc 01       	movw	r26, r24
    5852:	cb 01       	movw	r24, r22
    5854:	8c 19       	sub	r24, r12
    5856:	9d 09       	sbc	r25, r13
    5858:	ae 09       	sbc	r26, r14
    585a:	bf 09       	sbc	r27, r15
    585c:	40 97       	sbiw	r24, 0x10	; 16
    585e:	a1 05       	cpc	r26, r1
    5860:	b1 05       	cpc	r27, r1
    5862:	70 f3       	brcs	.-36     	; 0x5840 <irRangeBlast+0x8e>
			irLedOff(dir);
    5864:	80 2f       	mov	r24, r16
    5866:	0e 94 3a 1a 	call	0x3474	; 0x3474 <irLedOff>
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
    586a:	8a e0       	ldi	r24, 0x0A	; 10
    586c:	90 e0       	ldi	r25, 0x00	; 0
    586e:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
	uint16_t prevPower = curr_ir_power;
	setAllirPowers(256);	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
		//times[2] = get_time();
		for(uint8_t dir = 0; dir < 6; dir++){
    5872:	0f 5f       	subi	r16, 0xFF	; 255
    5874:	06 30       	cpi	r16, 0x06	; 6
    5876:	e1 f6       	brne	.-72     	; 0x5830 <irRangeBlast+0x7e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5878:	1f bf       	out	0x3f, r17	; 63
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
	setAllirPowers(prevPower);
    587a:	ce 01       	movw	r24, r28
}
    587c:	df 91       	pop	r29
    587e:	cf 91       	pop	r28
    5880:	1f 91       	pop	r17
    5882:	0f 91       	pop	r16
    5884:	ff 90       	pop	r15
    5886:	ef 90       	pop	r14
    5888:	df 90       	pop	r13
    588a:	cf 90       	pop	r12
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
	setAllirPowers(prevPower);
    588c:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <setAllirPowers>

00005890 <broadcastRnbData>:
	rnbCmdID=0;
	processing_rnb_flag=0;
}

//TODO: handle variable power.
void broadcastRnbData(){
    5890:	cf 92       	push	r12
    5892:	df 92       	push	r13
    5894:	ef 92       	push	r14
    5896:	ff 92       	push	r15
    5898:	1f 93       	push	r17
    589a:	cf 93       	push	r28
    589c:	df 93       	push	r29
    589e:	1f 92       	push	r1
    58a0:	cd b7       	in	r28, 0x3d	; 61
    58a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t power = 255;
	uint8_t goAhead = 0;
	uint8_t result = 0;
	uint8_t irStatus = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    58a4:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    58a6:	f8 94       	cli
		irStatus = irIsBusy(ALL_DIRS);
    58a8:	8f e3       	ldi	r24, 0x3F	; 63
    58aa:	0e 94 2d 11 	call	0x225a	; 0x225a <irIsBusy>
		if(!processing_rnb_flag){
    58ae:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <processing_rnb_flag>
    58b2:	91 11       	cpse	r25, r1
    58b4:	22 c0       	rjmp	.+68     	; 0x58fa <broadcastRnbData+0x6a>
			processing_rnb_flag = 1;
    58b6:	91 e0       	ldi	r25, 0x01	; 1
    58b8:	90 93 f9 23 	sts	0x23F9, r25	; 0x8023f9 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    58bc:	1f bf       	out	0x3f, r17	; 63
			goAhead = 1;
		}
	}
	if(goAhead){
    58be:	91 11       	cpse	r25, r1
    58c0:	20 c0       	rjmp	.+64     	; 0x5902 <broadcastRnbData+0x72>
		}
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			processing_rnb_flag = 0;
		}
	}else{
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
    58c2:	90 91 f9 23 	lds	r25, 0x23F9	; 0x8023f9 <processing_rnb_flag>
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
    58c6:	40 e4       	ldi	r20, 0x40	; 64
    58c8:	94 9f       	mul	r25, r20
    58ca:	90 01       	movw	r18, r0
    58cc:	11 24       	eor	r1, r1
    58ce:	28 2b       	or	r18, r24
    58d0:	1f 92       	push	r1
    58d2:	2f 93       	push	r18
    58d4:	85 ea       	ldi	r24, 0xA5	; 165
    58d6:	98 e0       	ldi	r25, 0x08	; 8
    58d8:	9f 93       	push	r25
    58da:	8f 93       	push	r24
    58dc:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    58e0:	0f 90       	pop	r0
    58e2:	0f 90       	pop	r0
    58e4:	0f 90       	pop	r0
    58e6:	0f 90       	pop	r0
	}
}
    58e8:	0f 90       	pop	r0
    58ea:	df 91       	pop	r29
    58ec:	cf 91       	pop	r28
    58ee:	1f 91       	pop	r17
    58f0:	ff 90       	pop	r15
    58f2:	ef 90       	pop	r14
    58f4:	df 90       	pop	r13
    58f6:	cf 90       	pop	r12
    58f8:	08 95       	ret
    58fa:	90 e0       	ldi	r25, 0x00	; 0
    58fc:	1f bf       	out	0x3f, r17	; 63
		if(!processing_rnb_flag){
			processing_rnb_flag = 1;
			goAhead = 1;
		}
	}
	if(goAhead){
    58fe:	99 23       	and	r25, r25
    5900:	01 f3       	breq	.-64     	; 0x58c2 <broadcastRnbData+0x32>
		uint32_t rnbCmdSentTime = getTime();
    5902:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    5906:	6b 01       	movw	r12, r22
    5908:	7c 01       	movw	r14, r24
		char c = 'r';
    590a:	82 e7       	ldi	r24, 0x72	; 114
    590c:	89 83       	std	Y+1, r24	; 0x01
		result = hpIrTargetedCmd(ALL_DIRS, &c, 65, (uint16_t)(rnbCmdSentTime&0xFFFF));
    590e:	96 01       	movw	r18, r12
    5910:	41 e4       	ldi	r20, 0x41	; 65
    5912:	be 01       	movw	r22, r28
    5914:	6f 5f       	subi	r22, 0xFF	; 255
    5916:	7f 4f       	sbci	r23, 0xFF	; 255
    5918:	8f e3       	ldi	r24, 0x3F	; 63
    591a:	0e 94 c6 12 	call	0x258c	; 0x258c <hpIrTargetedCmd>
		if(result){
    591e:	88 23       	and	r24, r24
    5920:	81 f0       	breq	.+32     	; 0x5942 <broadcastRnbData+0xb2>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5922:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5924:	f8 94       	cli
				hpIrBlock_bm = 0x3F;
    5926:	9f e3       	ldi	r25, 0x3F	; 63
    5928:	90 93 bf 23 	sts	0x23BF, r25	; 0x8023bf <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    592c:	8f bf       	out	0x3f, r24	; 63
			}		
			irRangeBlast(rnbCmdSentTime, power);
    592e:	4f ef       	ldi	r20, 0xFF	; 255
    5930:	c7 01       	movw	r24, r14
    5932:	b6 01       	movw	r22, r12
    5934:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <irRangeBlast>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5938:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    593a:	f8 94       	cli
				hpIrBlock_bm = 0;
    593c:	10 92 bf 23 	sts	0x23BF, r1	; 0x8023bf <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5940:	8f bf       	out	0x3f, r24	; 63
			}
			//printf("rnb_b\r\n");
		}
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5942:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5944:	f8 94       	cli
			processing_rnb_flag = 0;
    5946:	10 92 f9 23 	sts	0x23F9, r1	; 0x8023f9 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    594a:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    594c:	cd cf       	rjmp	.-102    	; 0x58e8 <broadcastRnbData+0x58>

0000594e <rgbLEDinit>:
#include "rgb_led.h"

void rgbLEDinit()
{
	// LED Pins as output
	PORTE.DIRSET = LED_R_PIN_bm | LED_G_PIN_bm;
    594e:	80 e3       	ldi	r24, 0x30	; 48
    5950:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	PORTD.DIRSET = LED_B_PIN_bm;
    5954:	80 e1       	ldi	r24, 0x10	; 16
    5956:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	
	//-------RED&GREEN--------
	TCE1.PER = 255;							
    595a:	e0 e4       	ldi	r30, 0x40	; 64
    595c:	fa e0       	ldi	r31, 0x0A	; 10
    595e:	2f ef       	ldi	r18, 0xFF	; 255
    5960:	30 e0       	ldi	r19, 0x00	; 0
    5962:	26 a3       	std	Z+38, r18	; 0x26
    5964:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.CCA = 0;							
    5966:	10 a6       	std	Z+40, r1	; 0x28
    5968:	11 a6       	std	Z+41, r1	; 0x29
	TCE1.CCB = 0;							
    596a:	12 a6       	std	Z+42, r1	; 0x2a
    596c:	13 a6       	std	Z+43, r1	; 0x2b
	TCE1.CTRLA = TC_CLKSEL_DIV64_gc;		
    596e:	85 e0       	ldi	r24, 0x05	; 5
    5970:	80 83       	st	Z, r24
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm | TC1_CCAEN_bm;
    5972:	93 e3       	ldi	r25, 0x33	; 51
    5974:	91 83       	std	Z+1, r25	; 0x01
	
	//---------BLUE-----------
	
	TCD1.PER = 255;
    5976:	e0 e4       	ldi	r30, 0x40	; 64
    5978:	f9 e0       	ldi	r31, 0x09	; 9
    597a:	26 a3       	std	Z+38, r18	; 0x26
    597c:	37 a3       	std	Z+39, r19	; 0x27
	TCD1.CCA = 0;
    597e:	10 a6       	std	Z+40, r1	; 0x28
    5980:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CTRLA = TC_CLKSEL_DIV64_gc;
    5982:	80 83       	st	Z, r24
	TCD1.CTRLB = TC_WGMODE_SS_gc | TC1_CCAEN_bm;	
    5984:	83 e1       	ldi	r24, 0x13	; 19
    5986:	81 83       	std	Z+1, r24	; 0x01
    5988:	08 95       	ret

0000598a <ledOff>:
}

void ledOff()
{ 
	TCE1.CCABUF = 0;
    598a:	e0 e4       	ldi	r30, 0x40	; 64
    598c:	fa e0       	ldi	r31, 0x0A	; 10
    598e:	10 ae       	std	Z+56, r1	; 0x38
    5990:	11 ae       	std	Z+57, r1	; 0x39
	TCE1.CCBBUF = 0;
    5992:	12 ae       	std	Z+58, r1	; 0x3a
    5994:	13 ae       	std	Z+59, r1	; 0x3b
	TCD1.CCABUF = 0;	
    5996:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    599a:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    599e:	08 95       	ret

000059a0 <setRGB>:

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	e0 e4       	ldi	r30, 0x40	; 64
    59a4:	fa e0       	ldi	r31, 0x0A	; 10
    59a6:	82 af       	std	Z+58, r24	; 0x3a
    59a8:	93 af       	std	Z+59, r25	; 0x3b

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    59aa:	70 e0       	ldi	r23, 0x00	; 0
    59ac:	60 af       	std	Z+56, r22	; 0x38
    59ae:	71 af       	std	Z+57, r23	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    59b0:	50 e0       	ldi	r21, 0x00	; 0
    59b2:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    59b6:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    59ba:	08 95       	ret

000059bc <hsvToRGB>:
	setRGB(r,g,b);
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
    59bc:	2f 92       	push	r2
    59be:	3f 92       	push	r3
    59c0:	4f 92       	push	r4
    59c2:	5f 92       	push	r5
    59c4:	6f 92       	push	r6
    59c6:	7f 92       	push	r7
    59c8:	8f 92       	push	r8
    59ca:	9f 92       	push	r9
    59cc:	af 92       	push	r10
    59ce:	bf 92       	push	r11
    59d0:	cf 92       	push	r12
    59d2:	df 92       	push	r13
    59d4:	ef 92       	push	r14
    59d6:	ff 92       	push	r15
    59d8:	0f 93       	push	r16
    59da:	1f 93       	push	r17
    59dc:	cf 93       	push	r28
    59de:	df 93       	push	r29
    59e0:	cd b7       	in	r28, 0x3d	; 61
    59e2:	de b7       	in	r29, 0x3e	; 62
    59e4:	2c 97       	sbiw	r28, 0x0c	; 12
    59e6:	cd bf       	out	0x3d, r28	; 61
    59e8:	de bf       	out	0x3e, r29	; 62
    59ea:	8b 83       	std	Y+3, r24	; 0x03
    59ec:	9c 83       	std	Y+4, r25	; 0x04
    59ee:	b4 2e       	mov	r11, r20
    59f0:	19 01       	movw	r2, r18
    59f2:	e9 82       	std	Y+1, r14	; 0x01
    59f4:	fa 82       	std	Y+2, r15	; 0x02
	float h = (hue%360)*1.0;
	float s = (1.0*saturation)/255.0;
    59f6:	70 e0       	ldi	r23, 0x00	; 0
    59f8:	80 e0       	ldi	r24, 0x00	; 0
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__floatsisf>
    5a00:	20 e0       	ldi	r18, 0x00	; 0
    5a02:	30 e0       	ldi	r19, 0x00	; 0
    5a04:	4f e7       	ldi	r20, 0x7F	; 127
    5a06:	53 e4       	ldi	r21, 0x43	; 67
    5a08:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    5a0c:	6b 01       	movw	r12, r22
    5a0e:	7c 01       	movw	r14, r24
	float v = (1.0*val)/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (fabsf(s)<0.00001){
    5a10:	9f 77       	andi	r25, 0x7F	; 127
    5a12:	2c ea       	ldi	r18, 0xAC	; 172
    5a14:	35 ec       	ldi	r19, 0xC5	; 197
    5a16:	47 e2       	ldi	r20, 0x27	; 39
    5a18:	57 e3       	ldi	r21, 0x37	; 55
    5a1a:	0e 94 b8 44 	call	0x8970	; 0x8970 <__cmpsf2>
    5a1e:	87 fd       	sbrc	r24, 7
    5a20:	f0 c0       	rjmp	.+480    	; 0x5c02 <hsvToRGB+0x246>
//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
	float s = (1.0*saturation)/255.0;
	float v = (1.0*val)/255.0;
    5a22:	6b 2d       	mov	r22, r11
    5a24:	70 e0       	ldi	r23, 0x00	; 0
    5a26:	80 e0       	ldi	r24, 0x00	; 0
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__floatsisf>
    5a2e:	20 e0       	ldi	r18, 0x00	; 0
    5a30:	30 e0       	ldi	r19, 0x00	; 0
    5a32:	4f e7       	ldi	r20, 0x7F	; 127
    5a34:	53 e4       	ldi	r21, 0x43	; 67
    5a36:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    5a3a:	4b 01       	movw	r8, r22
    5a3c:	5c 01       	movw	r10, r24
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
    5a3e:	2b 81       	ldd	r18, Y+3	; 0x03
    5a40:	3c 81       	ldd	r19, Y+4	; 0x04
    5a42:	a3 e8       	ldi	r26, 0x83	; 131
    5a44:	bd e2       	ldi	r27, 0x2D	; 45
    5a46:	0e 94 2d 49 	call	0x925a	; 0x925a <__umulhisi3>
    5a4a:	00 24       	eor	r0, r0
    5a4c:	88 0f       	add	r24, r24
    5a4e:	99 1f       	adc	r25, r25
    5a50:	00 1c       	adc	r0, r0
    5a52:	88 0f       	add	r24, r24
    5a54:	99 1f       	adc	r25, r25
    5a56:	00 1c       	adc	r0, r0
    5a58:	89 2f       	mov	r24, r25
    5a5a:	90 2d       	mov	r25, r0
    5a5c:	48 e6       	ldi	r20, 0x68	; 104
    5a5e:	51 e0       	ldi	r21, 0x01	; 1
    5a60:	84 9f       	mul	r24, r20
    5a62:	90 01       	movw	r18, r0
    5a64:	85 9f       	mul	r24, r21
    5a66:	30 0d       	add	r19, r0
    5a68:	94 9f       	mul	r25, r20
    5a6a:	30 0d       	add	r19, r0
    5a6c:	11 24       	eor	r1, r1
    5a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a70:	9c 81       	ldd	r25, Y+4	; 0x04
    5a72:	82 1b       	sub	r24, r18
    5a74:	93 0b       	sbc	r25, r19
    5a76:	8b 83       	std	Y+3, r24	; 0x03
    5a78:	9c 83       	std	Y+4, r25	; 0x04
    5a7a:	bc 01       	movw	r22, r24
    5a7c:	80 e0       	ldi	r24, 0x00	; 0
    5a7e:	90 e0       	ldi	r25, 0x00	; 0
    5a80:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <__floatunsisf>
	if (fabsf(s)<0.00001){
		*red = *green = *blue = val;
		return;
	}
	
	h = h / 60.0;
    5a84:	20 e0       	ldi	r18, 0x00	; 0
    5a86:	30 e0       	ldi	r19, 0x00	; 0
    5a88:	40 e7       	ldi	r20, 0x70	; 112
    5a8a:	52 e4       	ldi	r21, 0x42	; 66
    5a8c:	0e 94 c2 44 	call	0x8984	; 0x8984 <__divsf3>
    5a90:	2b 01       	movw	r4, r22
    5a92:	3c 01       	movw	r6, r24
	uint8_t i = (uint8_t)h;
    5a94:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    5a98:	6b 87       	std	Y+11, r22	; 0x0b
	f = h - i;
    5a9a:	70 e0       	ldi	r23, 0x00	; 0
    5a9c:	80 e0       	ldi	r24, 0x00	; 0
    5a9e:	90 e0       	ldi	r25, 0x00	; 0
    5aa0:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__floatsisf>
    5aa4:	9b 01       	movw	r18, r22
    5aa6:	ac 01       	movw	r20, r24
    5aa8:	c3 01       	movw	r24, r6
    5aaa:	b2 01       	movw	r22, r4
    5aac:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    5ab0:	2b 01       	movw	r4, r22
    5ab2:	3c 01       	movw	r6, r24
	
	p = v*(1.0-s);
    5ab4:	a7 01       	movw	r20, r14
    5ab6:	96 01       	movw	r18, r12
    5ab8:	60 e0       	ldi	r22, 0x00	; 0
    5aba:	70 e0       	ldi	r23, 0x00	; 0
    5abc:	80 e8       	ldi	r24, 0x80	; 128
    5abe:	9f e3       	ldi	r25, 0x3F	; 63
    5ac0:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    5ac4:	a5 01       	movw	r20, r10
    5ac6:	94 01       	movw	r18, r8
    5ac8:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5acc:	6b 83       	std	Y+3, r22	; 0x03
    5ace:	7c 83       	std	Y+4, r23	; 0x04
    5ad0:	8d 83       	std	Y+5, r24	; 0x05
    5ad2:	9e 83       	std	Y+6, r25	; 0x06
	q = v*(1.0-s*f);
    5ad4:	a3 01       	movw	r20, r6
    5ad6:	92 01       	movw	r18, r4
    5ad8:	c7 01       	movw	r24, r14
    5ada:	b6 01       	movw	r22, r12
    5adc:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5ae0:	9b 01       	movw	r18, r22
    5ae2:	ac 01       	movw	r20, r24
    5ae4:	60 e0       	ldi	r22, 0x00	; 0
    5ae6:	70 e0       	ldi	r23, 0x00	; 0
    5ae8:	80 e8       	ldi	r24, 0x80	; 128
    5aea:	9f e3       	ldi	r25, 0x3F	; 63
    5aec:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    5af0:	a5 01       	movw	r20, r10
    5af2:	94 01       	movw	r18, r8
    5af4:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5af8:	6f 83       	std	Y+7, r22	; 0x07
    5afa:	78 87       	std	Y+8, r23	; 0x08
    5afc:	89 87       	std	Y+9, r24	; 0x09
    5afe:	9a 87       	std	Y+10, r25	; 0x0a
	t = v*(1.0-s*(1-f));
    5b00:	a3 01       	movw	r20, r6
    5b02:	92 01       	movw	r18, r4
    5b04:	60 e0       	ldi	r22, 0x00	; 0
    5b06:	70 e0       	ldi	r23, 0x00	; 0
    5b08:	80 e8       	ldi	r24, 0x80	; 128
    5b0a:	9f e3       	ldi	r25, 0x3F	; 63
    5b0c:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    5b10:	a7 01       	movw	r20, r14
    5b12:	96 01       	movw	r18, r12
    5b14:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5b18:	9b 01       	movw	r18, r22
    5b1a:	ac 01       	movw	r20, r24
    5b1c:	60 e0       	ldi	r22, 0x00	; 0
    5b1e:	70 e0       	ldi	r23, 0x00	; 0
    5b20:	80 e8       	ldi	r24, 0x80	; 128
    5b22:	9f e3       	ldi	r25, 0x3F	; 63
    5b24:	0e 94 d9 43 	call	0x87b2	; 0x87b2 <__subsf3>
    5b28:	a5 01       	movw	r20, r10
    5b2a:	94 01       	movw	r18, r8
    5b2c:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5b30:	6b 01       	movw	r12, r22
    5b32:	7c 01       	movw	r14, r24
	
	switch(i)
    5b34:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b36:	92 30       	cpi	r25, 0x02	; 2
    5b38:	09 f4       	brne	.+2      	; 0x5b3c <hsvToRGB+0x180>
    5b3a:	de c0       	rjmp	.+444    	; 0x5cf8 <hsvToRGB+0x33c>
    5b3c:	70 f1       	brcs	.+92     	; 0x5b9a <hsvToRGB+0x1de>
    5b3e:	eb 85       	ldd	r30, Y+11	; 0x0b
    5b40:	e4 30       	cpi	r30, 0x04	; 4
    5b42:	09 f4       	brne	.+2      	; 0x5b46 <hsvToRGB+0x18a>
    5b44:	c7 c0       	rjmp	.+398    	; 0x5cd4 <hsvToRGB+0x318>
    5b46:	08 f4       	brcc	.+2      	; 0x5b4a <hsvToRGB+0x18e>
    5b48:	9c c0       	rjmp	.+312    	; 0x5c82 <hsvToRGB+0x2c6>
    5b4a:	e5 30       	cpi	r30, 0x05	; 5
    5b4c:	09 f0       	breq	.+2      	; 0x5b50 <hsvToRGB+0x194>
    5b4e:	be c0       	rjmp	.+380    	; 0x5ccc <hsvToRGB+0x310>
    5b50:	20 e0       	ldi	r18, 0x00	; 0
    5b52:	30 e0       	ldi	r19, 0x00	; 0
    5b54:	4f e7       	ldi	r20, 0x7F	; 127
    5b56:	53 e4       	ldi	r21, 0x43	; 67
    5b58:	c5 01       	movw	r24, r10
    5b5a:	b4 01       	movw	r22, r8
    5b5c:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5b60:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    5b64:	6c 87       	std	Y+12, r22	; 0x0c
    5b66:	20 e0       	ldi	r18, 0x00	; 0
    5b68:	30 e0       	ldi	r19, 0x00	; 0
    5b6a:	4f e7       	ldi	r20, 0x7F	; 127
    5b6c:	53 e4       	ldi	r21, 0x43	; 67
    5b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    5b70:	78 85       	ldd	r23, Y+8	; 0x08
    5b72:	89 85       	ldd	r24, Y+9	; 0x09
    5b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b76:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5b7a:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    5b7e:	6b 87       	std	Y+11, r22	; 0x0b
    5b80:	20 e0       	ldi	r18, 0x00	; 0
    5b82:	30 e0       	ldi	r19, 0x00	; 0
    5b84:	4f e7       	ldi	r20, 0x7F	; 127
    5b86:	53 e4       	ldi	r21, 0x43	; 67
    5b88:	6b 81       	ldd	r22, Y+3	; 0x03
    5b8a:	7c 81       	ldd	r23, Y+4	; 0x04
    5b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    5b90:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5b94:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
			break;
		case 5:
			r = v;
			g = p;
			b = q;
			break;
    5b98:	2a c0       	rjmp	.+84     	; 0x5bee <hsvToRGB+0x232>
	
	p = v*(1.0-s);
	q = v*(1.0-s*f);
	t = v*(1.0-s*(1-f));
	
	switch(i)
    5b9a:	99 23       	and	r25, r25
    5b9c:	09 f4       	brne	.+2      	; 0x5ba0 <hsvToRGB+0x1e4>
    5b9e:	4e c0       	rjmp	.+156    	; 0x5c3c <hsvToRGB+0x280>
    5ba0:	91 30       	cpi	r25, 0x01	; 1
    5ba2:	09 f0       	breq	.+2      	; 0x5ba6 <hsvToRGB+0x1ea>
    5ba4:	93 c0       	rjmp	.+294    	; 0x5ccc <hsvToRGB+0x310>
    5ba6:	20 e0       	ldi	r18, 0x00	; 0
    5ba8:	30 e0       	ldi	r19, 0x00	; 0
    5baa:	4f e7       	ldi	r20, 0x7F	; 127
    5bac:	53 e4       	ldi	r21, 0x43	; 67
    5bae:	6f 81       	ldd	r22, Y+7	; 0x07
    5bb0:	78 85       	ldd	r23, Y+8	; 0x08
    5bb2:	89 85       	ldd	r24, Y+9	; 0x09
    5bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bb6:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5bba:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    5bbe:	6c 87       	std	Y+12, r22	; 0x0c
    5bc0:	20 e0       	ldi	r18, 0x00	; 0
    5bc2:	30 e0       	ldi	r19, 0x00	; 0
    5bc4:	4f e7       	ldi	r20, 0x7F	; 127
    5bc6:	53 e4       	ldi	r21, 0x43	; 67
    5bc8:	6b 81       	ldd	r22, Y+3	; 0x03
    5bca:	7c 81       	ldd	r23, Y+4	; 0x04
    5bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    5bce:	9e 81       	ldd	r25, Y+6	; 0x06
    5bd0:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5bd4:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    5bd8:	6b 87       	std	Y+11, r22	; 0x0b
    5bda:	20 e0       	ldi	r18, 0x00	; 0
    5bdc:	30 e0       	ldi	r19, 0x00	; 0
    5bde:	4f e7       	ldi	r20, 0x7F	; 127
    5be0:	53 e4       	ldi	r21, 0x43	; 67
    5be2:	c5 01       	movw	r24, r10
    5be4:	b4 01       	movw	r22, r8
    5be6:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5bea:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
			break;
		default:
			//printf("SHOULD NEVER SEE THIS. i: %hhu",i);
			break;
	}
	*red = (uint8_t)(r*255);
    5bee:	2c 85       	ldd	r18, Y+12	; 0x0c
    5bf0:	f1 01       	movw	r30, r2
    5bf2:	20 83       	st	Z, r18
	*blue = (uint8_t)(b*255);
    5bf4:	2b 85       	ldd	r18, Y+11	; 0x0b
    5bf6:	e9 81       	ldd	r30, Y+1	; 0x01
    5bf8:	fa 81       	ldd	r31, Y+2	; 0x02
    5bfa:	20 83       	st	Z, r18
	*green = (uint8_t)(g*255);
    5bfc:	f8 01       	movw	r30, r16
    5bfe:	60 83       	st	Z, r22
    5c00:	07 c0       	rjmp	.+14     	; 0x5c10 <hsvToRGB+0x254>
	float v = (1.0*val)/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (fabsf(s)<0.00001){
		*red = *green = *blue = val;
    5c02:	e9 81       	ldd	r30, Y+1	; 0x01
    5c04:	fa 81       	ldd	r31, Y+2	; 0x02
    5c06:	b0 82       	st	Z, r11
    5c08:	f8 01       	movw	r30, r16
    5c0a:	b0 82       	st	Z, r11
    5c0c:	f1 01       	movw	r30, r2
    5c0e:	b0 82       	st	Z, r11
			break;
	}
	*red = (uint8_t)(r*255);
	*blue = (uint8_t)(b*255);
	*green = (uint8_t)(g*255);
    5c10:	2c 96       	adiw	r28, 0x0c	; 12
    5c12:	cd bf       	out	0x3d, r28	; 61
    5c14:	de bf       	out	0x3e, r29	; 62
    5c16:	df 91       	pop	r29
    5c18:	cf 91       	pop	r28
    5c1a:	1f 91       	pop	r17
    5c1c:	0f 91       	pop	r16
    5c1e:	ff 90       	pop	r15
    5c20:	ef 90       	pop	r14
    5c22:	df 90       	pop	r13
    5c24:	cf 90       	pop	r12
    5c26:	bf 90       	pop	r11
    5c28:	af 90       	pop	r10
    5c2a:	9f 90       	pop	r9
    5c2c:	8f 90       	pop	r8
    5c2e:	7f 90       	pop	r7
    5c30:	6f 90       	pop	r6
    5c32:	5f 90       	pop	r5
    5c34:	4f 90       	pop	r4
    5c36:	3f 90       	pop	r3
    5c38:	2f 90       	pop	r2
    5c3a:	08 95       	ret
    5c3c:	20 e0       	ldi	r18, 0x00	; 0
    5c3e:	30 e0       	ldi	r19, 0x00	; 0
    5c40:	4f e7       	ldi	r20, 0x7F	; 127
    5c42:	53 e4       	ldi	r21, 0x43	; 67
    5c44:	c5 01       	movw	r24, r10
    5c46:	b4 01       	movw	r22, r8
    5c48:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5c4c:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    5c50:	6c 87       	std	Y+12, r22	; 0x0c
    5c52:	20 e0       	ldi	r18, 0x00	; 0
    5c54:	30 e0       	ldi	r19, 0x00	; 0
    5c56:	4f e7       	ldi	r20, 0x7F	; 127
    5c58:	53 e4       	ldi	r21, 0x43	; 67
    5c5a:	6b 81       	ldd	r22, Y+3	; 0x03
    5c5c:	7c 81       	ldd	r23, Y+4	; 0x04
    5c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5c60:	9e 81       	ldd	r25, Y+6	; 0x06
    5c62:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5c66:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    5c6a:	6b 87       	std	Y+11, r22	; 0x0b
    5c6c:	20 e0       	ldi	r18, 0x00	; 0
    5c6e:	30 e0       	ldi	r19, 0x00	; 0
    5c70:	4f e7       	ldi	r20, 0x7F	; 127
    5c72:	53 e4       	ldi	r21, 0x43	; 67
    5c74:	c7 01       	movw	r24, r14
    5c76:	b6 01       	movw	r22, r12
    5c78:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5c7c:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
	{
		case 0:
			r = v;
			g = t;
			b = p;
			break;
    5c80:	b6 cf       	rjmp	.-148    	; 0x5bee <hsvToRGB+0x232>
    5c82:	20 e0       	ldi	r18, 0x00	; 0
    5c84:	30 e0       	ldi	r19, 0x00	; 0
    5c86:	4f e7       	ldi	r20, 0x7F	; 127
    5c88:	53 e4       	ldi	r21, 0x43	; 67
    5c8a:	6b 81       	ldd	r22, Y+3	; 0x03
    5c8c:	7c 81       	ldd	r23, Y+4	; 0x04
    5c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    5c90:	9e 81       	ldd	r25, Y+6	; 0x06
    5c92:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5c96:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    5c9a:	6c 87       	std	Y+12, r22	; 0x0c
    5c9c:	20 e0       	ldi	r18, 0x00	; 0
    5c9e:	30 e0       	ldi	r19, 0x00	; 0
    5ca0:	4f e7       	ldi	r20, 0x7F	; 127
    5ca2:	53 e4       	ldi	r21, 0x43	; 67
    5ca4:	c5 01       	movw	r24, r10
    5ca6:	b4 01       	movw	r22, r8
    5ca8:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5cac:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    5cb0:	6b 87       	std	Y+11, r22	; 0x0b
    5cb2:	20 e0       	ldi	r18, 0x00	; 0
    5cb4:	30 e0       	ldi	r19, 0x00	; 0
    5cb6:	4f e7       	ldi	r20, 0x7F	; 127
    5cb8:	53 e4       	ldi	r21, 0x43	; 67
    5cba:	6f 81       	ldd	r22, Y+7	; 0x07
    5cbc:	78 85       	ldd	r23, Y+8	; 0x08
    5cbe:	89 85       	ldd	r24, Y+9	; 0x09
    5cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cc2:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5cc6:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
			break;
		case 3:
			r = p;
			g = q;
			b = v;
			break;
    5cca:	91 cf       	rjmp	.-222    	; 0x5bee <hsvToRGB+0x232>
	
	p = v*(1.0-s);
	q = v*(1.0-s*f);
	t = v*(1.0-s*(1-f));
	
	switch(i)
    5ccc:	60 e0       	ldi	r22, 0x00	; 0
    5cce:	1b 86       	std	Y+11, r1	; 0x0b
    5cd0:	1c 86       	std	Y+12, r1	; 0x0c
    5cd2:	8d cf       	rjmp	.-230    	; 0x5bee <hsvToRGB+0x232>
    5cd4:	20 e0       	ldi	r18, 0x00	; 0
    5cd6:	30 e0       	ldi	r19, 0x00	; 0
    5cd8:	4f e7       	ldi	r20, 0x7F	; 127
    5cda:	53 e4       	ldi	r21, 0x43	; 67
    5cdc:	c7 01       	movw	r24, r14
    5cde:	b6 01       	movw	r22, r12
    5ce0:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5ce4:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    5ce8:	6c 87       	std	Y+12, r22	; 0x0c
    5cea:	20 e0       	ldi	r18, 0x00	; 0
    5cec:	30 e0       	ldi	r19, 0x00	; 0
    5cee:	4f e7       	ldi	r20, 0x7F	; 127
    5cf0:	53 e4       	ldi	r21, 0x43	; 67
    5cf2:	c5 01       	movw	r24, r10
    5cf4:	b4 01       	movw	r22, r8
    5cf6:	3f cf       	rjmp	.-386    	; 0x5b76 <hsvToRGB+0x1ba>
    5cf8:	20 e0       	ldi	r18, 0x00	; 0
    5cfa:	30 e0       	ldi	r19, 0x00	; 0
    5cfc:	4f e7       	ldi	r20, 0x7F	; 127
    5cfe:	53 e4       	ldi	r21, 0x43	; 67
    5d00:	6b 81       	ldd	r22, Y+3	; 0x03
    5d02:	7c 81       	ldd	r23, Y+4	; 0x04
    5d04:	8d 81       	ldd	r24, Y+5	; 0x05
    5d06:	9e 81       	ldd	r25, Y+6	; 0x06
    5d08:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    5d0c:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    5d10:	6c 87       	std	Y+12, r22	; 0x0c
    5d12:	20 e0       	ldi	r18, 0x00	; 0
    5d14:	30 e0       	ldi	r19, 0x00	; 0
    5d16:	4f e7       	ldi	r20, 0x7F	; 127
    5d18:	53 e4       	ldi	r21, 0x43	; 67
    5d1a:	c7 01       	movw	r24, r14
    5d1c:	b6 01       	movw	r22, r12
    5d1e:	58 cf       	rjmp	.-336    	; 0x5bd0 <hsvToRGB+0x214>

00005d20 <setHSV>:
Hue should be between 0 and 360 (though it gets modulo'd with 360, so should be okay)
Saturation and value can be between 0 and 255, where 255 is brightest/most saturated,
and 0 is dimmest/least saturated.
*/
void setHSV(uint16_t h, uint8_t s, uint8_t v)
{
    5d20:	ef 92       	push	r14
    5d22:	ff 92       	push	r15
    5d24:	0f 93       	push	r16
    5d26:	1f 93       	push	r17
    5d28:	cf 93       	push	r28
    5d2a:	df 93       	push	r29
    5d2c:	00 d0       	rcall	.+0      	; 0x5d2e <setHSV+0xe>
    5d2e:	cd b7       	in	r28, 0x3d	; 61
    5d30:	de b7       	in	r29, 0x3e	; 62
	uint8_t r,g,b;
	hsvToRGB(h,s,v,&r,&g,&b);
    5d32:	9e 01       	movw	r18, r28
    5d34:	2f 5f       	subi	r18, 0xFF	; 255
    5d36:	3f 4f       	sbci	r19, 0xFF	; 255
    5d38:	79 01       	movw	r14, r18
    5d3a:	8e 01       	movw	r16, r28
    5d3c:	0e 5f       	subi	r16, 0xFE	; 254
    5d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d40:	2e 5f       	subi	r18, 0xFE	; 254
    5d42:	3f 4f       	sbci	r19, 0xFF	; 255
    5d44:	0e 94 de 2c 	call	0x59bc	; 0x59bc <hsvToRGB>
	setRGB(r,g,b);
    5d48:	89 81       	ldd	r24, Y+1	; 0x01
    5d4a:	2a 81       	ldd	r18, Y+2	; 0x02

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    5d4c:	4b 81       	ldd	r20, Y+3	; 0x03
    5d4e:	50 e0       	ldi	r21, 0x00	; 0
    5d50:	e0 e4       	ldi	r30, 0x40	; 64
    5d52:	fa e0       	ldi	r31, 0x0A	; 10
    5d54:	42 af       	std	Z+58, r20	; 0x3a
    5d56:	53 af       	std	Z+59, r21	; 0x3b

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    5d58:	30 e0       	ldi	r19, 0x00	; 0
    5d5a:	20 af       	std	Z+56, r18	; 0x38
    5d5c:	31 af       	std	Z+57, r19	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    5d64:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
}
    5d68:	23 96       	adiw	r28, 0x03	; 3
    5d6a:	cd bf       	out	0x3d, r28	; 61
    5d6c:	de bf       	out	0x3e, r29	; 62
    5d6e:	df 91       	pop	r29
    5d70:	cf 91       	pop	r28
    5d72:	1f 91       	pop	r17
    5d74:	0f 91       	pop	r16
    5d76:	ff 90       	pop	r15
    5d78:	ef 90       	pop	r14
    5d7a:	08 95       	ret

00005d7c <measFindMedian>:
	#endif
}

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
    5d7c:	cf 93       	push	r28
    5d7e:	df 93       	push	r29
    5d80:	ec 01       	movw	r28, r24
	if(arr_len==1) return meas[0];
    5d82:	61 30       	cpi	r22, 0x01	; 1
    5d84:	09 f4       	brne	.+2      	; 0x5d88 <measFindMedian+0xc>
    5d86:	48 c0       	rjmp	.+144    	; 0x5e18 <measFindMedian+0x9c>
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    5d88:	62 30       	cpi	r22, 0x02	; 2
    5d8a:	09 f4       	brne	.+2      	; 0x5d8e <measFindMedian+0x12>
    5d8c:	4a c0       	rjmp	.+148    	; 0x5e22 <measFindMedian+0xa6>
	
	for(uint8_t i=0; i<arr_len ; i++){
    5d8e:	66 23       	and	r22, r22
    5d90:	79 f1       	breq	.+94     	; 0x5df0 <measFindMedian+0x74>
    5d92:	de 01       	movw	r26, r28
    5d94:	80 e0       	ldi	r24, 0x00	; 0
		for(uint8_t j=i+1 ; j<arr_len ; j++){
    5d96:	8f 5f       	subi	r24, 0xFF	; 255
    5d98:	68 17       	cp	r22, r24
    5d9a:	d9 f0       	breq	.+54     	; 0x5dd2 <measFindMedian+0x56>
    5d9c:	98 2f       	mov	r25, r24
			if(meas[j] < meas[i]){
    5d9e:	e9 2f       	mov	r30, r25
    5da0:	f0 e0       	ldi	r31, 0x00	; 0
    5da2:	ee 0f       	add	r30, r30
    5da4:	ff 1f       	adc	r31, r31
    5da6:	ec 0f       	add	r30, r28
    5da8:	fd 1f       	adc	r31, r29
    5daa:	40 81       	ld	r20, Z
    5dac:	51 81       	ldd	r21, Z+1	; 0x01
    5dae:	2d 91       	ld	r18, X+
    5db0:	3c 91       	ld	r19, X
    5db2:	11 97       	sbiw	r26, 0x01	; 1
    5db4:	42 17       	cp	r20, r18
    5db6:	53 07       	cpc	r21, r19
    5db8:	2c f4       	brge	.+10     	; 0x5dc4 <measFindMedian+0x48>
				int16_t temp = meas[i];
				meas[i] = meas[j];
    5dba:	4d 93       	st	X+, r20
    5dbc:	5c 93       	st	X, r21
    5dbe:	11 97       	sbiw	r26, 0x01	; 1
				meas[j] = temp;
    5dc0:	20 83       	st	Z, r18
    5dc2:	31 83       	std	Z+1, r19	; 0x01
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++){
		for(uint8_t j=i+1 ; j<arr_len ; j++){
    5dc4:	9f 5f       	subi	r25, 0xFF	; 255
    5dc6:	69 13       	cpse	r22, r25
    5dc8:	ea cf       	rjmp	.-44     	; 0x5d9e <measFindMedian+0x22>
    5dca:	12 96       	adiw	r26, 0x02	; 2
    5dcc:	8f 5f       	subi	r24, 0xFF	; 255
    5dce:	68 13       	cpse	r22, r24
    5dd0:	e5 cf       	rjmp	.-54     	; 0x5d9c <measFindMedian+0x20>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    5dd2:	60 ff       	sbrs	r22, 0
    5dd4:	0d c0       	rjmp	.+26     	; 0x5df0 <measFindMedian+0x74>
	else return meas[arr_len/2];
    5dd6:	66 95       	lsr	r22
    5dd8:	26 2f       	mov	r18, r22
    5dda:	30 e0       	ldi	r19, 0x00	; 0
    5ddc:	22 0f       	add	r18, r18
    5dde:	33 1f       	adc	r19, r19
    5de0:	fe 01       	movw	r30, r28
    5de2:	e2 0f       	add	r30, r18
    5de4:	f3 1f       	adc	r31, r19
    5de6:	80 81       	ld	r24, Z
    5de8:	91 81       	ldd	r25, Z+1	; 0x01
    5dea:	df 91       	pop	r29
    5dec:	cf 91       	pop	r28
    5dee:	08 95       	ret
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    5df0:	66 95       	lsr	r22
    5df2:	fe 01       	movw	r30, r28
    5df4:	e6 0f       	add	r30, r22
    5df6:	f1 1d       	adc	r31, r1
    5df8:	e6 0f       	add	r30, r22
    5dfa:	f1 1d       	adc	r31, r1
    5dfc:	32 97       	sbiw	r30, 0x02	; 2
    5dfe:	22 81       	ldd	r18, Z+2	; 0x02
    5e00:	33 81       	ldd	r19, Z+3	; 0x03
    5e02:	80 81       	ld	r24, Z
    5e04:	91 81       	ldd	r25, Z+1	; 0x01
    5e06:	82 0f       	add	r24, r18
    5e08:	93 1f       	adc	r25, r19
    5e0a:	97 fd       	sbrc	r25, 7
    5e0c:	12 c0       	rjmp	.+36     	; 0x5e32 <measFindMedian+0xb6>
    5e0e:	95 95       	asr	r25
    5e10:	87 95       	ror	r24
	else return meas[arr_len/2];
    5e12:	df 91       	pop	r29
    5e14:	cf 91       	pop	r28
    5e16:	08 95       	ret
}

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
    5e18:	88 81       	ld	r24, Y
    5e1a:	99 81       	ldd	r25, Y+1	; 0x01
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
	else return meas[arr_len/2];
    5e1c:	df 91       	pop	r29
    5e1e:	cf 91       	pop	r28
    5e20:	08 95       	ret

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    5e22:	28 81       	ld	r18, Y
    5e24:	39 81       	ldd	r19, Y+1	; 0x01
    5e26:	8a 81       	ldd	r24, Y+2	; 0x02
    5e28:	9b 81       	ldd	r25, Y+3	; 0x03
    5e2a:	82 0f       	add	r24, r18
    5e2c:	93 1f       	adc	r25, r19
    5e2e:	97 ff       	sbrs	r25, 7
    5e30:	ee cf       	rjmp	.-36     	; 0x5e0e <measFindMedian+0x92>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    5e32:	01 96       	adiw	r24, 0x01	; 1
    5e34:	ec cf       	rjmp	.-40     	; 0x5e0e <measFindMedian+0x92>

00005e36 <getRedSensor>:
	#endif		
}

#ifndef AUDIO_DROPLET

int16_t getRedSensor(){
    5e36:	cf 93       	push	r28
    5e38:	df 93       	push	r29
    5e3a:	cd b7       	in	r28, 0x3d	; 61
    5e3c:	de b7       	in	r29, 0x3e	; 62
    5e3e:	2a 97       	sbiw	r28, 0x0a	; 10
    5e40:	cd bf       	out	0x3d, r28	; 61
    5e42:	de bf       	out	0x3e, r29	; 62
    5e44:	fe 01       	movw	r30, r28
    5e46:	31 96       	adiw	r30, 0x01	; 1
    5e48:	ae 01       	movw	r20, r28
    5e4a:	45 5f       	subi	r20, 0xF5	; 245
    5e4c:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    5e4e:	31 e0       	ldi	r19, 0x01	; 1
int16_t getRedSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    5e50:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
    5e54:	80 68       	ori	r24, 0x80	; 128
    5e56:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
    5e5a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
    5e5e:	88 23       	and	r24, r24
    5e60:	e1 f3       	breq	.-8      	; 0x5e5a <getRedSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
    5e62:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    5e66:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    5e6a:	90 e0       	ldi	r25, 0x00	; 0
    5e6c:	92 2b       	or	r25, r18
    5e6e:	95 95       	asr	r25
    5e70:	87 95       	ror	r24
    5e72:	95 95       	asr	r25
    5e74:	87 95       	ror	r24
    5e76:	95 95       	asr	r25
    5e78:	87 95       	ror	r24
    5e7a:	95 95       	asr	r25
    5e7c:	87 95       	ror	r24
    5e7e:	81 93       	st	Z+, r24
    5e80:	91 93       	st	Z+, r25
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    5e82:	30 93 23 02 	sts	0x0223, r19	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>

int16_t getRedSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
    5e86:	e4 17       	cp	r30, r20
    5e88:	f5 07       	cpc	r31, r21
    5e8a:	11 f7       	brne	.-60     	; 0x5e50 <getRedSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
		//printf("%6d ", meas[meas_count]);
	}
	//printf("\r\n");
	red_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    5e8c:	63 e0       	ldi	r22, 0x03	; 3
    5e8e:	ce 01       	movw	r24, r28
    5e90:	05 96       	adiw	r24, 0x05	; 5
    5e92:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <measFindMedian>
	return red_val;
}
    5e96:	2a 96       	adiw	r28, 0x0a	; 10
    5e98:	cd bf       	out	0x3d, r28	; 61
    5e9a:	de bf       	out	0x3e, r29	; 62
    5e9c:	df 91       	pop	r29
    5e9e:	cf 91       	pop	r28
    5ea0:	08 95       	ret

00005ea2 <getGreenSensor>:

int16_t getGreenSensor(){
    5ea2:	cf 93       	push	r28
    5ea4:	df 93       	push	r29
    5ea6:	cd b7       	in	r28, 0x3d	; 61
    5ea8:	de b7       	in	r29, 0x3e	; 62
    5eaa:	2a 97       	sbiw	r28, 0x0a	; 10
    5eac:	cd bf       	out	0x3d, r28	; 61
    5eae:	de bf       	out	0x3e, r29	; 62
    5eb0:	fe 01       	movw	r30, r28
    5eb2:	31 96       	adiw	r30, 0x01	; 1
    5eb4:	ae 01       	movw	r20, r28
    5eb6:	45 5f       	subi	r20, 0xF5	; 245
    5eb8:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
    5eba:	31 e0       	ldi	r19, 0x01	; 1
int16_t getGreenSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    5ebc:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
    5ec0:	80 68       	ori	r24, 0x80	; 128
    5ec2:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
    5ec6:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>
    5eca:	88 23       	and	r24, r24
    5ecc:	e1 f3       	breq	.-8      	; 0x5ec6 <getGreenSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
    5ece:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    5ed2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    5ed6:	90 e0       	ldi	r25, 0x00	; 0
    5ed8:	92 2b       	or	r25, r18
    5eda:	95 95       	asr	r25
    5edc:	87 95       	ror	r24
    5ede:	95 95       	asr	r25
    5ee0:	87 95       	ror	r24
    5ee2:	95 95       	asr	r25
    5ee4:	87 95       	ror	r24
    5ee6:	95 95       	asr	r25
    5ee8:	87 95       	ror	r24
    5eea:	81 93       	st	Z+, r24
    5eec:	91 93       	st	Z+, r25
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
    5eee:	30 93 2b 02 	sts	0x022B, r19	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>

int16_t getGreenSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
    5ef2:	e4 17       	cp	r30, r20
    5ef4:	f5 07       	cpc	r31, r21
    5ef6:	11 f7       	brne	.-60     	; 0x5ebc <getGreenSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
		//printf("%6d ", meas[meas_count]);
	}
	//printf("\r\n");
	green_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    5ef8:	63 e0       	ldi	r22, 0x03	; 3
    5efa:	ce 01       	movw	r24, r28
    5efc:	05 96       	adiw	r24, 0x05	; 5
    5efe:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <measFindMedian>

	return green_val;
}
    5f02:	2a 96       	adiw	r28, 0x0a	; 10
    5f04:	cd bf       	out	0x3d, r28	; 61
    5f06:	de bf       	out	0x3e, r29	; 62
    5f08:	df 91       	pop	r29
    5f0a:	cf 91       	pop	r28
    5f0c:	08 95       	ret

00005f0e <getBlueSensor>:

int16_t getBlueSensor(){
    5f0e:	cf 93       	push	r28
    5f10:	df 93       	push	r29
    5f12:	cd b7       	in	r28, 0x3d	; 61
    5f14:	de b7       	in	r29, 0x3e	; 62
    5f16:	2a 97       	sbiw	r28, 0x0a	; 10
    5f18:	cd bf       	out	0x3d, r28	; 61
    5f1a:	de bf       	out	0x3e, r29	; 62
    5f1c:	fe 01       	movw	r30, r28
    5f1e:	31 96       	adiw	r30, 0x01	; 1
    5f20:	ae 01       	movw	r20, r28
    5f22:	45 5f       	subi	r20, 0xF5	; 245
    5f24:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    5f26:	31 e0       	ldi	r19, 0x01	; 1
int16_t getBlueSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    5f28:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
    5f2c:	80 68       	ori	r24, 0x80	; 128
    5f2e:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
    5f32:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>
    5f36:	88 23       	and	r24, r24
    5f38:	e1 f3       	breq	.-8      	; 0x5f32 <getBlueSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
    5f3a:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    5f3e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	92 2b       	or	r25, r18
    5f46:	95 95       	asr	r25
    5f48:	87 95       	ror	r24
    5f4a:	95 95       	asr	r25
    5f4c:	87 95       	ror	r24
    5f4e:	95 95       	asr	r25
    5f50:	87 95       	ror	r24
    5f52:	95 95       	asr	r25
    5f54:	87 95       	ror	r24
    5f56:	81 93       	st	Z+, r24
    5f58:	91 93       	st	Z+, r25
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    5f5a:	30 93 33 02 	sts	0x0233, r19	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>

int16_t getBlueSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
    5f5e:	e4 17       	cp	r30, r20
    5f60:	f5 07       	cpc	r31, r21
    5f62:	11 f7       	brne	.-60     	; 0x5f28 <getBlueSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
		//printf("%6d ", meas[meas_count]);
	}		
	//printf("\r\n");
	blue_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    5f64:	63 e0       	ldi	r22, 0x03	; 3
    5f66:	ce 01       	movw	r24, r28
    5f68:	05 96       	adiw	r24, 0x05	; 5
    5f6a:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <measFindMedian>
		
	return blue_val;
}
    5f6e:	2a 96       	adiw	r28, 0x0a	; 10
    5f70:	cd bf       	out	0x3d, r28	; 61
    5f72:	de bf       	out	0x3e, r29	; 62
    5f74:	df 91       	pop	r29
    5f76:	cf 91       	pop	r28
    5f78:	08 95       	ret

00005f7a <rgbSensorInit>:
	uint32_t i;
	float f;
} u;

void rgbSensorInit()
{
    5f7a:	cf 93       	push	r28
		result = twiWriteWrapper(RGB_SENSE_ADDR, &(power_on_sequence[4]), 2, callerDescr);
		if(!result)	printf_P(RGB_SENSE_POWERON_FAILURE,3);
		result = twiWriteWrapper(RGB_SENSE_ADDR, &(power_on_sequence[6]), 2, callerDescr);
		if(!result)	printf_P(RGB_SENSE_POWERON_FAILURE,4);
	#else		
		RGB_SENSOR_PORT.DIRCLR = RGB_SENSOR_R_PIN_bm | RGB_SENSOR_G_PIN_bm | RGB_SENSOR_B_PIN_bm;
    5f7c:	80 ee       	ldi	r24, 0xE0	; 224
    5f7e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>

		ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    5f82:	80 e2       	ldi	r24, 0x20	; 32
    5f84:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
		ADCA.CTRLB = ADC_RESOLUTION_LEFT12BIT_gc | ADC_CONMODE_bm;
    5f88:	86 e1       	ldi	r24, 0x16	; 22
    5f8a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc;
    5f8e:	86 e0       	ldi	r24, 0x06	; 6
    5f90:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
		/* When differential input is used, signed mode must be used. (sec. 28.6 of Manual) */

		ADCA.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    5f94:	83 e0       	ldi	r24, 0x03	; 3
    5f96:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		ADCA.CH1.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    5f9a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
		ADCA.CH2.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_2X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    5f9e:	87 e0       	ldi	r24, 0x07	; 7
    5fa0:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
	
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Red sensor on ADC A channel 0
    5fa4:	8c e2       	ldi	r24, 0x2C	; 44
    5fa6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
		ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN6_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Green sensor on ADC A channel 1
    5faa:	84 e3       	ldi	r24, 0x34	; 52
    5fac:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <__TEXT_REGION_LENGTH__+0x700229>
		ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Blue sensor on ADC A channel 2
    5fb0:	8c e3       	ldi	r24, 0x3C	; 60
    5fb2:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__TEXT_REGION_LENGTH__+0x700231>
	
		ADCA.CALL = PRODSIGNATURES_ADCACAL0;
    5fb6:	80 b5       	in	r24, 0x20	; 32
    5fb8:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
		ADCA.CALH = PRODSIGNATURES_ADCACAL1;
    5fbc:	81 b5       	in	r24, 0x21	; 33
    5fbe:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>

		ADCA.CTRLA = ADC_ENABLE_bm;
    5fc2:	81 e0       	ldi	r24, 0x01	; 1
    5fc4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
    5fc8:	8f e8       	ldi	r24, 0x8F	; 143
    5fca:	91 e0       	ldi	r25, 0x01	; 1
    5fcc:	01 97       	sbiw	r24, 0x01	; 1
    5fce:	f1 f7       	brne	.-4      	; 0x5fcc <rgbSensorInit+0x52>
    5fd0:	00 c0       	rjmp	.+0      	; 0x5fd2 <rgbSensorInit+0x58>
    5fd2:	00 00       	nop
	
		//read_color_settings();
	
		delay_us(50);
		const int8_t num_samples = 3;
		getRedSensor(); getBlueSensor(); getGreenSensor();
    5fd4:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <getRedSensor>
    5fd8:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <getBlueSensor>
    5fdc:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <getGreenSensor>
		delayMS(10);
    5fe0:	8a e0       	ldi	r24, 0x0A	; 10
    5fe2:	90 e0       	ldi	r25, 0x00	; 0
    5fe4:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    5fe8:	c0 e0       	ldi	r28, 0x00	; 0
		int16_t r_avg=0, g_avg=0, b_avg=0;
		for(uint8_t i=0; i<num_samples; i++)
		{
			r_avg+=getRedSensor();
    5fea:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <getRedSensor>
			g_avg+=getGreenSensor();
    5fee:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <getGreenSensor>
			b_avg+=getBlueSensor();
    5ff2:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <getBlueSensor>
			delayMS(10);
    5ff6:	8a e0       	ldi	r24, 0x0A	; 10
    5ff8:	90 e0       	ldi	r25, 0x00	; 0
    5ffa:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
		delay_us(50);
		const int8_t num_samples = 3;
		getRedSensor(); getBlueSensor(); getGreenSensor();
		delayMS(10);
		int16_t r_avg=0, g_avg=0, b_avg=0;
		for(uint8_t i=0; i<num_samples; i++)
    5ffe:	cf 5f       	subi	r28, 0xFF	; 255
    6000:	c3 30       	cpi	r28, 0x03	; 3
    6002:	99 f7       	brne	.-26     	; 0x5fea <rgbSensorInit+0x70>
		}
		r_baseline= r_avg/num_samples;
		g_baseline= g_avg/num_samples;
		b_baseline= b_avg/num_samples;
		//printf("Baselines:\r\n%3d  %3d  %3d\r\n", r_baseline, g_baseline, b_baseline);
		r_baseline = 0;
    6004:	10 92 21 23 	sts	0x2321, r1	; 0x802321 <r_baseline>
    6008:	10 92 22 23 	sts	0x2322, r1	; 0x802322 <r_baseline+0x1>
		g_baseline = 0;
    600c:	10 92 1f 23 	sts	0x231F, r1	; 0x80231f <g_baseline>
    6010:	10 92 20 23 	sts	0x2320, r1	; 0x802320 <g_baseline+0x1>
		b_baseline = 0;	
    6014:	10 92 1d 23 	sts	0x231D, r1	; 0x80231d <b_baseline>
    6018:	10 92 1e 23 	sts	0x231E, r1	; 0x80231e <b_baseline+0x1>
	#endif		
}
    601c:	cf 91       	pop	r28
    601e:	08 95       	ret

00006020 <getRGB>:

#endif


void getRGB(int16_t *r, int16_t *g, int16_t *b)
{
    6020:	af 92       	push	r10
    6022:	bf 92       	push	r11
    6024:	cf 92       	push	r12
    6026:	df 92       	push	r13
    6028:	ef 92       	push	r14
    602a:	ff 92       	push	r15
    602c:	0f 93       	push	r16
    602e:	1f 93       	push	r17
    6030:	cf 93       	push	r28
    6032:	df 93       	push	r29
    6034:	5c 01       	movw	r10, r24
    6036:	6b 01       	movw	r12, r22
    6038:	7a 01       	movw	r14, r20
		}
		else printf_P(PSTR("Read failed.\r\n"));
	#else
		int16_t rTemp,gTemp,bTemp;
	
		rTemp = getRedSensor();
    603a:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <getRedSensor>
    603e:	8c 01       	movw	r16, r24
		gTemp = getGreenSensor();
    6040:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <getGreenSensor>
    6044:	ec 01       	movw	r28, r24
		bTemp = getBlueSensor();		
    6046:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <getBlueSensor>
		rTemp = rTemp - r_baseline;
    604a:	20 91 21 23 	lds	r18, 0x2321	; 0x802321 <r_baseline>
    604e:	30 91 22 23 	lds	r19, 0x2322	; 0x802322 <r_baseline+0x1>
    6052:	02 1b       	sub	r16, r18
    6054:	13 0b       	sbc	r17, r19
		gTemp = gTemp - g_baseline;
    6056:	20 91 1f 23 	lds	r18, 0x231F	; 0x80231f <g_baseline>
    605a:	30 91 20 23 	lds	r19, 0x2320	; 0x802320 <g_baseline+0x1>
    605e:	c2 1b       	sub	r28, r18
    6060:	d3 0b       	sbc	r29, r19
		bTemp = bTemp - b_baseline;
    6062:	20 91 1d 23 	lds	r18, 0x231D	; 0x80231d <b_baseline>
    6066:	30 91 1e 23 	lds	r19, 0x231E	; 0x80231e <b_baseline+0x1>
    606a:	82 1b       	sub	r24, r18
    606c:	93 0b       	sbc	r25, r19
		//if(rTemp<0)	rTemp=0;
		//if(gTemp<0)	gTemp=0;
		//if(bTemp<0)	bTemp=0;
		if(r!=NULL) *r = rTemp;
    606e:	a1 14       	cp	r10, r1
    6070:	b1 04       	cpc	r11, r1
    6072:	19 f0       	breq	.+6      	; 0x607a <getRGB+0x5a>
    6074:	f5 01       	movw	r30, r10
    6076:	00 83       	st	Z, r16
    6078:	11 83       	std	Z+1, r17	; 0x01
		if(g!=NULL) *g = gTemp;
    607a:	c1 14       	cp	r12, r1
    607c:	d1 04       	cpc	r13, r1
    607e:	19 f0       	breq	.+6      	; 0x6086 <getRGB+0x66>
    6080:	f6 01       	movw	r30, r12
    6082:	c0 83       	st	Z, r28
    6084:	d1 83       	std	Z+1, r29	; 0x01
		if(b!=NULL) *b = bTemp;
    6086:	e1 14       	cp	r14, r1
    6088:	f1 04       	cpc	r15, r1
    608a:	19 f0       	breq	.+6      	; 0x6092 <getRGB+0x72>
    608c:	f7 01       	movw	r30, r14
    608e:	80 83       	st	Z, r24
    6090:	91 83       	std	Z+1, r25	; 0x01
	#endif
}
    6092:	df 91       	pop	r29
    6094:	cf 91       	pop	r28
    6096:	1f 91       	pop	r17
    6098:	0f 91       	pop	r16
    609a:	ff 90       	pop	r15
    609c:	ef 90       	pop	r14
    609e:	df 90       	pop	r13
    60a0:	cf 90       	pop	r12
    60a2:	bf 90       	pop	r11
    60a4:	af 90       	pop	r10
    60a6:	08 95       	ret

000060a8 <scheduler_free>:
	
	return (volatile Task_t*)0xFFFF;

}

static void scheduler_free(volatile Task_t* tgt){
    60a8:	cf 93       	push	r28
    60aa:	df 93       	push	r29
    60ac:	ec 01       	movw	r28, r24
	if((tgt<task_storage_arr)||(tgt>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS])))){
    60ae:	83 e2       	ldi	r24, 0x23	; 35
    60b0:	c3 32       	cpi	r28, 0x23	; 35
    60b2:	d8 07       	cpc	r29, r24
    60b4:	28 f0       	brcs	.+10     	; 0x60c0 <scheduler_free+0x18>
    60b6:	83 e2       	ldi	r24, 0x23	; 35
    60b8:	cf 3a       	cpi	r28, 0xAF	; 175
    60ba:	d8 07       	cpc	r29, r24
    60bc:	b1 f0       	breq	.+44     	; 0x60ea <scheduler_free+0x42>
    60be:	a8 f0       	brcs	.+42     	; 0x60ea <scheduler_free+0x42>
		printf_P(PSTR("ERROR: In scheduler_free, tgt (%X) was outside valid Task* range.\r\n"),tgt);
    60c0:	df 93       	push	r29
    60c2:	cf 93       	push	r28
    60c4:	86 ed       	ldi	r24, 0xD6	; 214
    60c6:	9b e0       	ldi	r25, 0x0B	; 11
    60c8:	9f 93       	push	r25
    60ca:	8f 93       	push	r24
    60cc:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
		setRGB(0,0,255);
    60d0:	4f ef       	ldi	r20, 0xFF	; 255
    60d2:	60 e0       	ldi	r22, 0x00	; 0
    60d4:	80 e0       	ldi	r24, 0x00	; 0
    60d6:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
		delayMS(60000);
    60da:	80 e6       	ldi	r24, 0x60	; 96
    60dc:	9a ee       	ldi	r25, 0xEA	; 234
    60de:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    60e2:	0f 90       	pop	r0
    60e4:	0f 90       	pop	r0
    60e6:	0f 90       	pop	r0
    60e8:	0f 90       	pop	r0
	}
	tgt->arg = 0;
    60ea:	1a 86       	std	Y+10, r1	; 0x0a
    60ec:	1b 86       	std	Y+11, r1	; 0x0b
	tgt->period = 0;
    60ee:	1c 82       	std	Y+4, r1	; 0x04
    60f0:	1d 82       	std	Y+5, r1	; 0x05
    60f2:	1e 82       	std	Y+6, r1	; 0x06
    60f4:	1f 82       	std	Y+7, r1	; 0x07
	(tgt->func).noarg_func = ((void (*)(void))NULL);
    60f6:	18 86       	std	Y+8, r1	; 0x08
    60f8:	19 86       	std	Y+9, r1	; 0x09
	tgt->scheduled_time = 0;
    60fa:	18 82       	st	Y, r1
    60fc:	19 82       	std	Y+1, r1	; 0x01
    60fe:	1a 82       	std	Y+2, r1	; 0x02
    6100:	1b 82       	std	Y+3, r1	; 0x03
	tgt->next = NULL;
    6102:	1c 86       	std	Y+12, r1	; 0x0c
    6104:	1d 86       	std	Y+13, r1	; 0x0d
}
    6106:	df 91       	pop	r29
    6108:	cf 91       	pop	r28
    610a:	08 95       	ret

0000610c <schedulerInit>:

void schedulerInit(){
    610c:	0f 93       	push	r16
    610e:	1f 93       	push	r17
    6110:	cf 93       	push	r28
    6112:	df 93       	push	r29
	task_list = NULL;
    6114:	10 92 83 25 	sts	0x2583, r1	; 0x802583 <task_list>
    6118:	10 92 84 25 	sts	0x2584, r1	; 0x802584 <task_list+0x1>
	num_tasks = 0;
    611c:	10 92 c0 23 	sts	0x23C0, r1	; 0x8023c0 <num_tasks>
	task_executing = 0;
    6120:	10 92 7e 25 	sts	0x257E, r1	; 0x80257e <task_executing>
    6124:	c3 e2       	ldi	r28, 0x23	; 35
    6126:	d3 e2       	ldi	r29, 0x23	; 35
    6128:	0f ea       	ldi	r16, 0xAF	; 175
    612a:	13 e2       	ldi	r17, 0x23	; 35
	for(uint8_t i=0; i<MAX_NUM_SCHEDULED_TASKS; i++) scheduler_free(&task_storage_arr[i]);
    612c:	ce 01       	movw	r24, r28
    612e:	0e 94 54 30 	call	0x60a8	; 0x60a8 <scheduler_free>
    6132:	2e 96       	adiw	r28, 0x0e	; 14
    6134:	0c 17       	cp	r16, r28
    6136:	1d 07       	cpc	r17, r29
    6138:	c9 f7       	brne	.-14     	; 0x612c <schedulerInit+0x20>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){  // Disable interrupts during initialization
    613a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    613c:	f8 94       	cli
		// Set up real-time clock
		rtc_epoch = 0;
    613e:	10 92 b1 23 	sts	0x23B1, r1	; 0x8023b1 <rtc_epoch>
    6142:	10 92 b2 23 	sts	0x23B2, r1	; 0x8023b2 <rtc_epoch+0x1>
		CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    6146:	85 e0       	ldi	r24, 0x05	; 5
    6148:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
		RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;		// High level overflow interrupt to increment the epoch counter
    614c:	83 e0       	ldi	r24, 0x03	; 3
    614e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6152:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6156:	80 fd       	sbrc	r24, 0
    6158:	fc cf       	rjmp	.-8      	; 0x6152 <schedulerInit+0x46>
		RTC.PER = 0xFFFF;
    615a:	2f ef       	ldi	r18, 0xFF	; 255
    615c:	3f ef       	ldi	r19, 0xFF	; 255
    615e:	20 93 0a 04 	sts	0x040A, r18	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    6162:	30 93 0b 04 	sts	0x040B, r19	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6166:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    616a:	80 fd       	sbrc	r24, 0
    616c:	fc cf       	rjmp	.-8      	; 0x6166 <schedulerInit+0x5a>
		RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    616e:	81 e0       	ldi	r24, 0x01	; 1
    6170:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6174:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6178:	80 fd       	sbrc	r24, 0
    617a:	fc cf       	rjmp	.-8      	; 0x6174 <schedulerInit+0x68>
		RTC.CNT = 0;
    617c:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    6180:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6184:	9f bf       	out	0x3f, r25	; 63
	}
}
    6186:	df 91       	pop	r29
    6188:	cf 91       	pop	r28
    618a:	1f 91       	pop	r17
    618c:	0f 91       	pop	r16
    618e:	08 95       	ret

00006190 <taskListCleanup>:

//This function checks for errors or inconsistencies in the task list, and attempts to correct them.
void taskListCleanup(){
    6190:	cf 92       	push	r12
    6192:	df 92       	push	r13
    6194:	ef 92       	push	r14
    6196:	ff 92       	push	r15
    6198:	0f 93       	push	r16
    619a:	1f 93       	push	r17
    619c:	cf 93       	push	r28
    619e:	df 93       	push	r29
	printf_P(PSTR("\tAttempting to restore task_list.\r\n\tIf you only see this message rarely, don't worry too much.\r\n"));
    61a0:	85 e7       	ldi	r24, 0x75	; 117
    61a2:	9b e0       	ldi	r25, 0x0B	; 11
    61a4:	9f 93       	push	r25
    61a6:	8f 93       	push	r24
    61a8:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
	volatile Task_t* cur_task = task_list;
    61ac:	c0 91 83 25 	lds	r28, 0x2583	; 0x802583 <task_list>
    61b0:	d0 91 84 25 	lds	r29, 0x2584	; 0x802584 <task_list+0x1>
	//volatile Task_t* prev_task;
	uint32_t nextTime = getTime()+500;
    61b4:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    61b8:	ab 01       	movw	r20, r22
    61ba:	bc 01       	movw	r22, r24
    61bc:	4c 50       	subi	r20, 0x0C	; 12
    61be:	5e 4f       	sbci	r21, 0xFE	; 254
    61c0:	6f 4f       	sbci	r22, 0xFF	; 255
    61c2:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    61c4:	ef b7       	in	r30, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    61c6:	f8 94       	cli
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    61c8:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    61cc:	8b 7f       	andi	r24, 0xFB	; 251
    61ce:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		while (cur_task != NULL){
    61d2:	0f 90       	pop	r0
    61d4:	0f 90       	pop	r0
    61d6:	20 97       	sbiw	r28, 0x00	; 0
    61d8:	99 f1       	breq	.+102    	; 0x6240 <taskListCleanup+0xb0>
			cur_task->scheduled_time = nextTime;
    61da:	48 83       	st	Y, r20
    61dc:	59 83       	std	Y+1, r21	; 0x01
    61de:	6a 83       	std	Y+2, r22	; 0x02
    61e0:	7b 83       	std	Y+3, r23	; 0x03
			if(first){
				if (cur_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    61e2:	c8 80       	ld	r12, Y
    61e4:	d9 80       	ldd	r13, Y+1	; 0x01
    61e6:	ea 80       	ldd	r14, Y+2	; 0x02
    61e8:	fb 80       	ldd	r15, Y+3	; 0x03
    61ea:	80 91 b1 23 	lds	r24, 0x23B1	; 0x8023b1 <rtc_epoch>
    61ee:	90 91 b2 23 	lds	r25, 0x23B2	; 0x8023b2 <rtc_epoch+0x1>
    61f2:	00 91 0a 04 	lds	r16, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    61f6:	10 91 0b 04 	lds	r17, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    61fa:	a0 e0       	ldi	r26, 0x00	; 0
    61fc:	b0 e0       	ldi	r27, 0x00	; 0
    61fe:	dc 01       	movw	r26, r24
    6200:	99 27       	eor	r25, r25
    6202:	88 27       	eor	r24, r24
    6204:	20 e0       	ldi	r18, 0x00	; 0
    6206:	30 e0       	ldi	r19, 0x00	; 0
    6208:	80 2b       	or	r24, r16
    620a:	91 2b       	or	r25, r17
    620c:	a2 2b       	or	r26, r18
    620e:	b3 2b       	or	r27, r19
    6210:	8c 15       	cp	r24, r12
    6212:	9d 05       	cpc	r25, r13
    6214:	ae 05       	cpc	r26, r14
    6216:	bf 05       	cpc	r27, r15
    6218:	e8 f4       	brcc	.+58     	; 0x6254 <taskListCleanup+0xc4>
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
					RTC.COMP = ((uint16_t)(cur_task->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    621a:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    621e:	8b 7f       	andi	r24, 0xFB	; 251
    6220:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6224:	04 c0       	rjmp	.+8      	; 0x622e <taskListCleanup+0x9e>
	uint32_t nextTime = getTime()+500;
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
			cur_task->scheduled_time = nextTime;
    6226:	48 83       	st	Y, r20
    6228:	59 83       	std	Y+1, r21	; 0x01
    622a:	6a 83       	std	Y+2, r22	; 0x02
    622c:	7b 83       	std	Y+3, r23	; 0x03
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
				}
				first = 0;
			}
			nextTime += 500;
    622e:	4c 50       	subi	r20, 0x0C	; 12
    6230:	5e 4f       	sbci	r21, 0xFE	; 254
    6232:	6f 4f       	sbci	r22, 0xFF	; 255
    6234:	7f 4f       	sbci	r23, 0xFF	; 255
			cur_task = cur_task->next;
    6236:	0c 84       	ldd	r0, Y+12	; 0x0c
    6238:	dd 85       	ldd	r29, Y+13	; 0x0d
    623a:	c0 2d       	mov	r28, r0
	//volatile Task_t* prev_task;
	uint32_t nextTime = getTime()+500;
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
    623c:	20 97       	sbiw	r28, 0x00	; 0
    623e:	99 f7       	brne	.-26     	; 0x6226 <taskListCleanup+0x96>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6240:	ef bf       	out	0x3f, r30	; 63
			}
			nextTime += 500;
			cur_task = cur_task->next;
		}
	}
}
    6242:	df 91       	pop	r29
    6244:	cf 91       	pop	r28
    6246:	1f 91       	pop	r17
    6248:	0f 91       	pop	r16
    624a:	ff 90       	pop	r15
    624c:	ef 90       	pop	r14
    624e:	df 90       	pop	r13
    6250:	cf 90       	pop	r12
    6252:	08 95       	ret
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
			cur_task->scheduled_time = nextTime;
			if(first){
				if (cur_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6254:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6258:	80 fd       	sbrc	r24, 0
    625a:	fc cf       	rjmp	.-8      	; 0x6254 <taskListCleanup+0xc4>
					RTC.COMP = ((uint16_t)(cur_task->scheduled_time))|0x8;
    625c:	88 81       	ld	r24, Y
    625e:	99 81       	ldd	r25, Y+1	; 0x01
    6260:	aa 81       	ldd	r26, Y+2	; 0x02
    6262:	bb 81       	ldd	r27, Y+3	; 0x03
    6264:	88 60       	ori	r24, 0x08	; 8
    6266:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    626a:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    626e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6272:	84 60       	ori	r24, 0x04	; 4
    6274:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6278:	da cf       	rjmp	.-76     	; 0x622e <taskListCleanup+0x9e>

0000627a <removeTask>:
		//task_list_checkup();
	}
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
    627a:	cf 93       	push	r28
    627c:	dc 01       	movw	r26, r24
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
    627e:	83 e2       	ldi	r24, 0x23	; 35
    6280:	a3 32       	cpi	r26, 0x23	; 35
    6282:	b8 07       	cpc	r27, r24
    6284:	90 f1       	brcs	.+100    	; 0x62ea <removeTask+0x70>
    6286:	83 e2       	ldi	r24, 0x23	; 35
    6288:	a1 3a       	cpi	r26, 0xA1	; 161
    628a:	b8 07       	cpc	r27, r24
    628c:	09 f0       	breq	.+2      	; 0x6290 <removeTask+0x16>
    628e:	68 f5       	brcc	.+90     	; 0x62ea <removeTask+0x70>
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
		return;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6290:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6292:	f8 94       	cli
		if(task==NULL){
    6294:	10 97       	sbiw	r26, 0x00	; 0
    6296:	31 f1       	breq	.+76     	; 0x62e4 <removeTask+0x6a>
			continue;
		}
		if(task_list==task)	{
    6298:	e0 91 83 25 	lds	r30, 0x2583	; 0x802583 <task_list>
    629c:	f0 91 84 25 	lds	r31, 0x2584	; 0x802584 <task_list+0x1>
    62a0:	ae 17       	cp	r26, r30
    62a2:	bf 07       	cpc	r27, r31
    62a4:	49 f4       	brne	.+18     	; 0x62b8 <removeTask+0x3e>
    62a6:	26 c0       	rjmp	.+76     	; 0x62f4 <removeTask+0x7a>
			task_list=task->next;
			num_tasks--;
		}else{
			volatile Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    62a8:	24 85       	ldd	r18, Z+12	; 0x0c
    62aa:	35 85       	ldd	r19, Z+13	; 0x0d
    62ac:	a2 17       	cp	r26, r18
    62ae:	b3 07       	cpc	r27, r19
    62b0:	39 f0       	breq	.+14     	; 0x62c0 <removeTask+0x46>
    62b2:	04 84       	ldd	r0, Z+12	; 0x0c
    62b4:	f5 85       	ldd	r31, Z+13	; 0x0d
    62b6:	e0 2d       	mov	r30, r0
    62b8:	24 85       	ldd	r18, Z+12	; 0x0c
    62ba:	35 85       	ldd	r19, Z+13	; 0x0d
    62bc:	23 2b       	or	r18, r19
    62be:	a1 f7       	brne	.-24     	; 0x62a8 <removeTask+0x2e>
			if (tmp_task->next != NULL){
    62c0:	24 85       	ldd	r18, Z+12	; 0x0c
    62c2:	35 85       	ldd	r19, Z+13	; 0x0d
    62c4:	23 2b       	or	r18, r19
    62c6:	59 f0       	breq	.+22     	; 0x62de <removeTask+0x64>
				tmp_task->next = task->next;
    62c8:	1c 96       	adiw	r26, 0x0c	; 12
    62ca:	2d 91       	ld	r18, X+
    62cc:	3c 91       	ld	r19, X
    62ce:	1d 97       	sbiw	r26, 0x0d	; 13
    62d0:	24 87       	std	Z+12, r18	; 0x0c
    62d2:	35 87       	std	Z+13, r19	; 0x0d
				num_tasks--;
    62d4:	20 91 c0 23 	lds	r18, 0x23C0	; 0x8023c0 <num_tasks>
    62d8:	21 50       	subi	r18, 0x01	; 1
    62da:	20 93 c0 23 	sts	0x23C0, r18	; 0x8023c0 <num_tasks>
    62de:	cd 01       	movw	r24, r26
			}
		}
		scheduler_free(task);		
    62e0:	0e 94 54 30 	call	0x60a8	; 0x60a8 <scheduler_free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    62e4:	cf bf       	out	0x3f, r28	; 63
	}
}
    62e6:	cf 91       	pop	r28
    62e8:	08 95       	ret
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    62ea:	82 e4       	ldi	r24, 0x42	; 66
    62ec:	91 e2       	ldi	r25, 0x21	; 33
				num_tasks--;
			}
		}
		scheduler_free(task);		
	}
}
    62ee:	cf 91       	pop	r28
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    62f0:	0c 94 cc 4d 	jmp	0x9b98	; 0x9b98 <puts>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		if(task==NULL){
			continue;
		}
		if(task_list==task)	{
			task_list=task->next;
    62f4:	1c 96       	adiw	r26, 0x0c	; 12
    62f6:	2d 91       	ld	r18, X+
    62f8:	3c 91       	ld	r19, X
    62fa:	1d 97       	sbiw	r26, 0x0d	; 13
    62fc:	20 93 83 25 	sts	0x2583, r18	; 0x802583 <task_list>
    6300:	30 93 84 25 	sts	0x2584, r19	; 0x802584 <task_list+0x1>
			num_tasks--;
    6304:	20 91 c0 23 	lds	r18, 0x23C0	; 0x8023c0 <num_tasks>
    6308:	21 50       	subi	r18, 0x01	; 1
    630a:	20 93 c0 23 	sts	0x23C0, r18	; 0x8023c0 <num_tasks>
    630e:	e7 cf       	rjmp	.-50     	; 0x62de <removeTask+0x64>

00006310 <printTaskQueue>:
		}
		scheduler_free(task);		
	}
}

void printTaskQueue(){
    6310:	bf 92       	push	r11
    6312:	cf 92       	push	r12
    6314:	df 92       	push	r13
    6316:	ef 92       	push	r14
    6318:	ff 92       	push	r15
    631a:	0f 93       	push	r16
    631c:	1f 93       	push	r17
    631e:	cf 93       	push	r28
    6320:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){  // Disable interrupts during printing
    6322:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6324:	f8 94       	cli
		volatile Task_t* cur_task = task_list;
    6326:	c0 91 83 25 	lds	r28, 0x2583	; 0x802583 <task_list>
    632a:	d0 91 84 25 	lds	r29, 0x2584	; 0x802584 <task_list+0x1>
		
		printf_P(PSTR("Task Queue (%hu tasks, %hu executing):\r\n"), num_tasks, task_executing);
    632e:	90 91 7e 25 	lds	r25, 0x257E	; 0x80257e <task_executing>
    6332:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <num_tasks>
    6336:	1f 92       	push	r1
    6338:	9f 93       	push	r25
    633a:	1f 92       	push	r1
    633c:	8f 93       	push	r24
    633e:	83 ef       	ldi	r24, 0xF3	; 243
    6340:	99 e0       	ldi	r25, 0x09	; 9
    6342:	9f 93       	push	r25
    6344:	8f 93       	push	r24
    6346:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL){
    634a:	0f 90       	pop	r0
    634c:	0f 90       	pop	r0
    634e:	0f 90       	pop	r0
    6350:	0f 90       	pop	r0
    6352:	0f 90       	pop	r0
    6354:	0f 90       	pop	r0
    6356:	20 97       	sbiw	r28, 0x00	; 0
    6358:	a1 f1       	breq	.+104    	; 0x63c2 <printTaskQueue+0xb2>
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_func, cur_task->scheduled_time, cur_task->period, getTime());
    635a:	05 eb       	ldi	r16, 0xB5	; 181
    635c:	19 e0       	ldi	r17, 0x09	; 9
    635e:	05 c0       	rjmp	.+10     	; 0x636a <printTaskQueue+0x5a>
			if(cur_task==cur_task->next) break;
			cur_task = cur_task->next;
    6360:	0c 84       	ldd	r0, Y+12	; 0x0c
    6362:	dd 85       	ldd	r29, Y+13	; 0x0d
    6364:	c0 2d       	mov	r28, r0
		volatile Task_t* cur_task = task_list;
		
		printf_P(PSTR("Task Queue (%hu tasks, %hu executing):\r\n"), num_tasks, task_executing);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL){
    6366:	20 97       	sbiw	r28, 0x00	; 0
    6368:	61 f1       	breq	.+88     	; 0x63c2 <printTaskQueue+0xb2>
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_func, cur_task->scheduled_time, cur_task->period, getTime());
    636a:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    636e:	fb 01       	movw	r30, r22
    6370:	cc 80       	ldd	r12, Y+4	; 0x04
    6372:	dd 80       	ldd	r13, Y+5	; 0x05
    6374:	ee 80       	ldd	r14, Y+6	; 0x06
    6376:	ff 80       	ldd	r15, Y+7	; 0x07
    6378:	48 81       	ld	r20, Y
    637a:	59 81       	ldd	r21, Y+1	; 0x01
    637c:	6a 81       	ldd	r22, Y+2	; 0x02
    637e:	7b 81       	ldd	r23, Y+3	; 0x03
    6380:	28 85       	ldd	r18, Y+8	; 0x08
    6382:	39 85       	ldd	r19, Y+9	; 0x09
    6384:	9f 93       	push	r25
    6386:	8f 93       	push	r24
    6388:	ff 93       	push	r31
    638a:	ef 93       	push	r30
    638c:	ff 92       	push	r15
    638e:	ef 92       	push	r14
    6390:	df 92       	push	r13
    6392:	cf 92       	push	r12
    6394:	7f 93       	push	r23
    6396:	6f 93       	push	r22
    6398:	5f 93       	push	r21
    639a:	4f 93       	push	r20
    639c:	3f 93       	push	r19
    639e:	2f 93       	push	r18
    63a0:	df 93       	push	r29
    63a2:	cf 93       	push	r28
    63a4:	1f 93       	push	r17
    63a6:	0f 93       	push	r16
    63a8:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
			if(cur_task==cur_task->next) break;
    63ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    63ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    63b0:	2d b7       	in	r18, 0x3d	; 61
    63b2:	3e b7       	in	r19, 0x3e	; 62
    63b4:	2e 5e       	subi	r18, 0xEE	; 238
    63b6:	3f 4f       	sbci	r19, 0xFF	; 255
    63b8:	2d bf       	out	0x3d, r18	; 61
    63ba:	3e bf       	out	0x3e, r19	; 62
    63bc:	8c 17       	cp	r24, r28
    63be:	9d 07       	cpc	r25, r29
    63c0:	79 f6       	brne	.-98     	; 0x6360 <printTaskQueue+0x50>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    63c2:	bf be       	out	0x3f, r11	; 63
			cur_task = cur_task->next;
		}
	}
}
    63c4:	df 91       	pop	r29
    63c6:	cf 91       	pop	r28
    63c8:	1f 91       	pop	r17
    63ca:	0f 91       	pop	r16
    63cc:	ff 90       	pop	r15
    63ce:	ef 90       	pop	r14
    63d0:	df 90       	pop	r13
    63d2:	cf 90       	pop	r12
    63d4:	bf 90       	pop	r11
    63d6:	08 95       	ret

000063d8 <add_task_to_list>:
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
}

static void add_task_to_list(volatile Task_t* task){
    63d8:	8f 92       	push	r8
    63da:	9f 92       	push	r9
    63dc:	af 92       	push	r10
    63de:	bf 92       	push	r11
    63e0:	ff 92       	push	r15
    63e2:	0f 93       	push	r16
    63e4:	1f 93       	push	r17
    63e6:	cf 93       	push	r28
    63e8:	df 93       	push	r29
    63ea:	dc 01       	movw	r26, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    63ec:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    63ee:	f8 94       	cli
		// Find the new task's proper spot in the list of tasks
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
    63f0:	e0 91 83 25 	lds	r30, 0x2583	; 0x802583 <task_list>
    63f4:	f0 91 84 25 	lds	r31, 0x2584	; 0x802584 <task_list+0x1>
    63f8:	1c 96       	adiw	r26, 0x0c	; 12
    63fa:	ed 93       	st	X+, r30
    63fc:	fc 93       	st	X, r31
    63fe:	1d 97       	sbiw	r26, 0x0d	; 13
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
    6400:	30 97       	sbiw	r30, 0x00	; 0
    6402:	09 f4       	brne	.+2      	; 0x6406 <add_task_to_list+0x2e>
    6404:	48 c0       	rjmp	.+144    	; 0x6496 <add_task_to_list+0xbe>
    6406:	0d 91       	ld	r16, X+
    6408:	1d 91       	ld	r17, X+
    640a:	2d 91       	ld	r18, X+
    640c:	3c 91       	ld	r19, X
    640e:	13 97       	sbiw	r26, 0x03	; 3
    6410:	40 81       	ld	r20, Z
    6412:	51 81       	ldd	r21, Z+1	; 0x01
    6414:	62 81       	ldd	r22, Z+2	; 0x02
    6416:	73 81       	ldd	r23, Z+3	; 0x03
    6418:	40 17       	cp	r20, r16
    641a:	51 07       	cpc	r21, r17
    641c:	62 07       	cpc	r22, r18
    641e:	73 07       	cpc	r23, r19
    6420:	d0 f5       	brcc	.+116    	; 0x6496 <add_task_to_list+0xbe>
			}
		}else{
			// If the new task is not the next to be executed, iterate through the task_list,
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
    6422:	84 85       	ldd	r24, Z+12	; 0x0c
    6424:	95 85       	ldd	r25, Z+13	; 0x0d
    6426:	89 2b       	or	r24, r25
    6428:	71 f4       	brne	.+28     	; 0x6446 <add_task_to_list+0x6e>
    642a:	1d c0       	rjmp	.+58     	; 0x6466 <add_task_to_list+0x8e>
				if(tmp_task_ptr->next==tmp_task_ptr){
    642c:	84 85       	ldd	r24, Z+12	; 0x0c
    642e:	95 85       	ldd	r25, Z+13	; 0x0d
    6430:	8e 17       	cp	r24, r30
    6432:	9f 07       	cpc	r25, r31
    6434:	09 f4       	brne	.+2      	; 0x6438 <add_task_to_list+0x60>
    6436:	6e c0       	rjmp	.+220    	; 0x6514 <add_task_to_list+0x13c>
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_func, task->scheduled_time, task->period, getTime());
					printTaskQueue();
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
    6438:	04 84       	ldd	r0, Z+12	; 0x0c
    643a:	f5 85       	ldd	r31, Z+13	; 0x0d
    643c:	e0 2d       	mov	r30, r0
			}
		}else{
			// If the new task is not the next to be executed, iterate through the task_list,
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
    643e:	24 85       	ldd	r18, Z+12	; 0x0c
    6440:	35 85       	ldd	r19, Z+13	; 0x0d
    6442:	23 2b       	or	r18, r19
    6444:	81 f0       	breq	.+32     	; 0x6466 <add_task_to_list+0x8e>
    6446:	0d 91       	ld	r16, X+
    6448:	1d 91       	ld	r17, X+
    644a:	2d 91       	ld	r18, X+
    644c:	3c 91       	ld	r19, X
    644e:	13 97       	sbiw	r26, 0x03	; 3
    6450:	c4 85       	ldd	r28, Z+12	; 0x0c
    6452:	d5 85       	ldd	r29, Z+13	; 0x0d
    6454:	48 81       	ld	r20, Y
    6456:	59 81       	ldd	r21, Y+1	; 0x01
    6458:	6a 81       	ldd	r22, Y+2	; 0x02
    645a:	7b 81       	ldd	r23, Y+3	; 0x03
    645c:	40 17       	cp	r20, r16
    645e:	51 07       	cpc	r21, r17
    6460:	62 07       	cpc	r22, r18
    6462:	73 07       	cpc	r23, r19
    6464:	18 f3       	brcs	.-58     	; 0x642c <add_task_to_list+0x54>
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
			}
			//set_rgb(r, g, b);
			task->next = tmp_task_ptr->next;
    6466:	84 85       	ldd	r24, Z+12	; 0x0c
    6468:	95 85       	ldd	r25, Z+13	; 0x0d
    646a:	1c 96       	adiw	r26, 0x0c	; 12
    646c:	8d 93       	st	X+, r24
    646e:	9c 93       	st	X, r25
    6470:	1d 97       	sbiw	r26, 0x0d	; 13
			tmp_task_ptr->next = task;
    6472:	a4 87       	std	Z+12, r26	; 0x0c
    6474:	b5 87       	std	Z+13, r27	; 0x0d
			//while (RTC.STATUS & RTC_SYNCBUSY_bm);
			//RTC.COMP = RTC.CNT+5;
			//RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		//}

		num_tasks++;
    6476:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <num_tasks>
    647a:	8f 5f       	subi	r24, 0xFF	; 255
    647c:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <num_tasks>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6480:	ff be       	out	0x3f, r15	; 63
		
		//task_list_checkup();
	}
}
    6482:	df 91       	pop	r29
    6484:	cf 91       	pop	r28
    6486:	1f 91       	pop	r17
    6488:	0f 91       	pop	r16
    648a:	ff 90       	pop	r15
    648c:	bf 90       	pop	r11
    648e:	af 90       	pop	r10
    6490:	9f 90       	pop	r9
    6492:	8f 90       	pop	r8
    6494:	08 95       	ret
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
			task_list = task;
    6496:	a0 93 83 25 	sts	0x2583, r26	; 0x802583 <task_list>
    649a:	b0 93 84 25 	sts	0x2584, r27	; 0x802584 <task_list+0x1>
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0){			
    649e:	80 91 7e 25 	lds	r24, 0x257E	; 0x80257e <task_executing>
    64a2:	81 11       	cpse	r24, r1
    64a4:	e8 cf       	rjmp	.-48     	; 0x6476 <add_task_to_list+0x9e>
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    64a6:	8d 90       	ld	r8, X+
    64a8:	9d 90       	ld	r9, X+
    64aa:	ad 90       	ld	r10, X+
    64ac:	bc 90       	ld	r11, X
    64ae:	13 97       	sbiw	r26, 0x03	; 3
    64b0:	40 91 b1 23 	lds	r20, 0x23B1	; 0x8023b1 <rtc_epoch>
    64b4:	50 91 b2 23 	lds	r21, 0x23B2	; 0x8023b2 <rtc_epoch+0x1>
    64b8:	00 91 0a 04 	lds	r16, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    64bc:	10 91 0b 04 	lds	r17, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    64c0:	60 e0       	ldi	r22, 0x00	; 0
    64c2:	70 e0       	ldi	r23, 0x00	; 0
    64c4:	ba 01       	movw	r22, r20
    64c6:	55 27       	eor	r21, r21
    64c8:	44 27       	eor	r20, r20
    64ca:	20 e0       	ldi	r18, 0x00	; 0
    64cc:	30 e0       	ldi	r19, 0x00	; 0
    64ce:	40 2b       	or	r20, r16
    64d0:	51 2b       	or	r21, r17
    64d2:	62 2b       	or	r22, r18
    64d4:	73 2b       	or	r23, r19
    64d6:	48 15       	cp	r20, r8
    64d8:	59 05       	cpc	r21, r9
    64da:	6a 05       	cpc	r22, r10
    64dc:	7b 05       	cpc	r23, r11
    64de:	30 f4       	brcc	.+12     	; 0x64ec <add_task_to_list+0x114>
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;					
    64e0:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    64e4:	8b 7f       	andi	r24, 0xFB	; 251
    64e6:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    64ea:	c5 cf       	rjmp	.-118    	; 0x6476 <add_task_to_list+0x9e>
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
			task_list = task;
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0){			
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    64ec:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    64f0:	80 fd       	sbrc	r24, 0
    64f2:	fc cf       	rjmp	.-8      	; 0x64ec <add_task_to_list+0x114>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    64f4:	8d 91       	ld	r24, X+
    64f6:	9d 91       	ld	r25, X+
    64f8:	0d 90       	ld	r0, X+
    64fa:	bc 91       	ld	r27, X
    64fc:	a0 2d       	mov	r26, r0
    64fe:	88 60       	ori	r24, 0x08	; 8
    6500:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    6504:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    6508:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    650c:	84 60       	ori	r24, 0x04	; 4
    650e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6512:	b1 cf       	rjmp	.-158    	; 0x6476 <add_task_to_list+0x9e>
    6514:	ed 01       	movw	r28, r26
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
				if(tmp_task_ptr->next==tmp_task_ptr){
					//set_rgb(255, 50, 0);
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
    6516:	8d e5       	ldi	r24, 0x5D	; 93
    6518:	9a e0       	ldi	r25, 0x0A	; 10
    651a:	9f 93       	push	r25
    651c:	8f 93       	push	r24
    651e:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_func, task->scheduled_time, task->period, getTime());
    6522:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    6526:	db 01       	movw	r26, r22
    6528:	0c 81       	ldd	r16, Y+4	; 0x04
    652a:	1d 81       	ldd	r17, Y+5	; 0x05
    652c:	2e 81       	ldd	r18, Y+6	; 0x06
    652e:	3f 81       	ldd	r19, Y+7	; 0x07
    6530:	48 81       	ld	r20, Y
    6532:	59 81       	ldd	r21, Y+1	; 0x01
    6534:	6a 81       	ldd	r22, Y+2	; 0x02
    6536:	7b 81       	ldd	r23, Y+3	; 0x03
    6538:	e8 85       	ldd	r30, Y+8	; 0x08
    653a:	f9 85       	ldd	r31, Y+9	; 0x09
    653c:	9f 93       	push	r25
    653e:	8f 93       	push	r24
    6540:	bf 93       	push	r27
    6542:	af 93       	push	r26
    6544:	3f 93       	push	r19
    6546:	2f 93       	push	r18
    6548:	1f 93       	push	r17
    654a:	0f 93       	push	r16
    654c:	7f 93       	push	r23
    654e:	6f 93       	push	r22
    6550:	5f 93       	push	r21
    6552:	4f 93       	push	r20
    6554:	ff 93       	push	r31
    6556:	ef 93       	push	r30
    6558:	df 93       	push	r29
    655a:	cf 93       	push	r28
    655c:	8c e1       	ldi	r24, 0x1C	; 28
    655e:	9a e0       	ldi	r25, 0x0A	; 10
    6560:	9f 93       	push	r25
    6562:	8f 93       	push	r24
    6564:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
					printTaskQueue();
    6568:	0e 94 88 31 	call	0x6310	; 0x6310 <printTaskQueue>
    656c:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    656e:	8d b7       	in	r24, 0x3d	; 61
    6570:	9e b7       	in	r25, 0x3e	; 62
    6572:	44 96       	adiw	r24, 0x14	; 20
    6574:	8d bf       	out	0x3d, r24	; 61
    6576:	9e bf       	out	0x3e, r25	; 62
    6578:	84 cf       	rjmp	.-248    	; 0x6482 <add_task_to_list+0xaa>

0000657a <schedule_task_absolute_time>:
	volatile Task_t* new_task = schedule_task_absolute_time(time, function, arg);
	new_task->period = period;
	return new_task;
}

volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
    657a:	9f 92       	push	r9
    657c:	af 92       	push	r10
    657e:	bf 92       	push	r11
    6580:	cf 92       	push	r12
    6582:	df 92       	push	r13
    6584:	ef 92       	push	r14
    6586:	ff 92       	push	r15
    6588:	0f 93       	push	r16
    658a:	1f 93       	push	r17
    658c:	cf 93       	push	r28
    658e:	df 93       	push	r29
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6590:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6592:	f8 94       	cli
static volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg);
static void add_task_to_list(volatile Task_t* task);
static int8_t run_tasks(void);

static volatile Task_t* scheduler_malloc(void){
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
    6594:	e0 91 c0 23 	lds	r30, 0x23C0	; 0x8023c0 <num_tasks>
    6598:	ea 30       	cpi	r30, 0x0A	; 10
    659a:	08 f0       	brcs	.+2      	; 0x659e <schedule_task_absolute_time+0x24>
    659c:	69 c0       	rjmp	.+210    	; 0x6670 <schedule_task_absolute_time+0xf6>
    659e:	89 01       	movw	r16, r18
    65a0:	5a 01       	movw	r10, r20
    65a2:	6b 01       	movw	r12, r22
    65a4:	7c 01       	movw	r14, r24
    65a6:	80 e0       	ldi	r24, 0x00	; 0
    65a8:	90 e0       	ldi	r25, 0x00	; 0

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
		//This code assumes that all tasks will have non-null function pointers.
		if((task_storage_arr[tmp].func.noarg_func) == NULL){
    65aa:	9c 01       	movw	r18, r24
    65ac:	22 0f       	add	r18, r18
    65ae:	33 1f       	adc	r19, r19
    65b0:	f9 01       	movw	r30, r18
    65b2:	ee 0f       	add	r30, r30
    65b4:	ff 1f       	adc	r31, r31
    65b6:	ee 0f       	add	r30, r30
    65b8:	ff 1f       	adc	r31, r31
    65ba:	ee 0f       	add	r30, r30
    65bc:	ff 1f       	adc	r31, r31
    65be:	e2 1b       	sub	r30, r18
    65c0:	f3 0b       	sbc	r31, r19
    65c2:	ed 5d       	subi	r30, 0xDD	; 221
    65c4:	fc 4d       	sbci	r31, 0xDC	; 220
    65c6:	20 85       	ldd	r18, Z+8	; 0x08
    65c8:	31 85       	ldd	r19, Z+9	; 0x09
    65ca:	23 2b       	or	r18, r19
    65cc:	59 f1       	breq	.+86     	; 0x6624 <schedule_task_absolute_time+0xaa>
    65ce:	01 96       	adiw	r24, 0x01	; 1
static int8_t run_tasks(void);

static volatile Task_t* scheduler_malloc(void){
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
    65d0:	8a 30       	cpi	r24, 0x0A	; 10
    65d2:	91 05       	cpc	r25, r1
    65d4:	51 f7       	brne	.-44     	; 0x65aa <schedule_task_absolute_time+0x30>
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
    65d6:	8d e0       	ldi	r24, 0x0D	; 13
    65d8:	9b e0       	ldi	r25, 0x0B	; 11
    65da:	9f 93       	push	r25
    65dc:	8f 93       	push	r24
    65de:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
			taskListCleanup();
    65e2:	0e 94 c8 30 	call	0x6190	; 0x6190 <taskListCleanup>
    65e6:	0f 90       	pop	r0
    65e8:	0f 90       	pop	r0
    65ea:	cf ef       	ldi	r28, 0xFF	; 255
    65ec:	df ef       	ldi	r29, 0xFF	; 255
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
			}else if(time < getTime()){
			printf_P(PSTR("ERROR: Task scheduled for a time in the past.\r\n"));
		}
		new_task->scheduled_time = time;
    65ee:	c8 82       	st	Y, r12
    65f0:	d9 82       	std	Y+1, r13	; 0x01
    65f2:	ea 82       	std	Y+2, r14	; 0x02
    65f4:	fb 82       	std	Y+3, r15	; 0x03
		new_task->arg = arg;
    65f6:	0a 87       	std	Y+10, r16	; 0x0a
    65f8:	1b 87       	std	Y+11, r17	; 0x0b
		new_task->func = function;
    65fa:	a8 86       	std	Y+8, r10	; 0x08
    65fc:	b9 86       	std	Y+9, r11	; 0x09
		new_task->next = NULL;
    65fe:	1c 86       	std	Y+12, r1	; 0x0c
    6600:	1d 86       	std	Y+13, r1	; 0x0d
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6602:	9f be       	out	0x3f, r9	; 63
	}
	add_task_to_list(new_task);
    6604:	ce 01       	movw	r24, r28
    6606:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <add_task_to_list>
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
    660a:	ce 01       	movw	r24, r28
}
    660c:	df 91       	pop	r29
    660e:	cf 91       	pop	r28
    6610:	1f 91       	pop	r17
    6612:	0f 91       	pop	r16
    6614:	ff 90       	pop	r15
    6616:	ef 90       	pop	r14
    6618:	df 90       	pop	r13
    661a:	cf 90       	pop	r12
    661c:	bf 90       	pop	r11
    661e:	af 90       	pop	r10
    6620:	9f 90       	pop	r9
    6622:	08 95       	ret
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
		//This code assumes that all tasks will have non-null function pointers.
		if((task_storage_arr[tmp].func.noarg_func) == NULL){
			return &(task_storage_arr[tmp]);
    6624:	ef 01       	movw	r28, r30
volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
    6626:	ef 3f       	cpi	r30, 0xFF	; 255
    6628:	8f ef       	ldi	r24, 0xFF	; 255
    662a:	f8 07       	cpc	r31, r24
    662c:	a1 f2       	breq	.-88     	; 0x65d6 <schedule_task_absolute_time+0x5c>
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
			taskListCleanup();
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
    662e:	83 e2       	ldi	r24, 0x23	; 35
    6630:	e3 32       	cpi	r30, 0x23	; 35
    6632:	f8 07       	cpc	r31, r24
    6634:	a0 f0       	brcs	.+40     	; 0x665e <schedule_task_absolute_time+0xe4>
    6636:	e1 5a       	subi	r30, 0xA1	; 161
    6638:	f3 42       	sbci	r31, 0x23	; 35
    663a:	09 f0       	breq	.+2      	; 0x663e <schedule_task_absolute_time+0xc4>
    663c:	80 f4       	brcc	.+32     	; 0x665e <schedule_task_absolute_time+0xe4>
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
			}else if(time < getTime()){
    663e:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    6642:	c6 16       	cp	r12, r22
    6644:	d7 06       	cpc	r13, r23
    6646:	e8 06       	cpc	r14, r24
    6648:	f9 06       	cpc	r15, r25
    664a:	88 f6       	brcc	.-94     	; 0x65ee <schedule_task_absolute_time+0x74>
			printf_P(PSTR("ERROR: Task scheduled for a time in the past.\r\n"));
    664c:	84 e8       	ldi	r24, 0x84	; 132
    664e:	9a e0       	ldi	r25, 0x0A	; 10
    6650:	9f 93       	push	r25
    6652:	8f 93       	push	r24
    6654:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    6658:	0f 90       	pop	r0
    665a:	0f 90       	pop	r0
    665c:	c8 cf       	rjmp	.-112    	; 0x65ee <schedule_task_absolute_time+0x74>
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
			taskListCleanup();
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
    665e:	84 eb       	ldi	r24, 0xB4	; 180
    6660:	9a e0       	ldi	r25, 0x0A	; 10
    6662:	9f 93       	push	r25
    6664:	8f 93       	push	r24
    6666:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    666a:	0f 90       	pop	r0
    666c:	0f 90       	pop	r0
    666e:	bf cf       	rjmp	.-130    	; 0x65ee <schedule_task_absolute_time+0x74>
    6670:	9f be       	out	0x3f, r9	; 63

volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
    6672:	80 e0       	ldi	r24, 0x00	; 0
    6674:	90 e0       	ldi	r25, 0x00	; 0
    6676:	ca cf       	rjmp	.-108    	; 0x660c <schedule_task_absolute_time+0x92>

00006678 <scheduleTask>:

// Adds a new task to the task queue
// time is number of milliseconds until function is executed
// function is a function pointer to execute
// arg is the argument to supply to function
volatile Task_t* scheduleTask(uint32_t time, FlexFunction function, void* arg){
    6678:	8f 92       	push	r8
    667a:	9f 92       	push	r9
    667c:	af 92       	push	r10
    667e:	bf 92       	push	r11
    6680:	cf 92       	push	r12
    6682:	df 92       	push	r13
    6684:	ef 92       	push	r14
    6686:	ff 92       	push	r15
    6688:	0f 93       	push	r16
    668a:	1f 93       	push	r17
    668c:	cf 93       	push	r28
    668e:	df 93       	push	r29
    6690:	6b 01       	movw	r12, r22
    6692:	7c 01       	movw	r14, r24
    6694:	ea 01       	movw	r28, r20
    6696:	89 01       	movw	r16, r18
	time = (time<MIN_TASK_TIME_IN_FUTURE) ? MIN_TASK_TIME_IN_FUTURE : time;
	volatile Task_t* new_task = schedule_task_absolute_time(getTime()+time, function, arg);
    6698:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    669c:	46 01       	movw	r8, r12
    669e:	57 01       	movw	r10, r14
    66a0:	2a e0       	ldi	r18, 0x0A	; 10
    66a2:	82 16       	cp	r8, r18
    66a4:	91 04       	cpc	r9, r1
    66a6:	a1 04       	cpc	r10, r1
    66a8:	b1 04       	cpc	r11, r1
    66aa:	28 f4       	brcc	.+10     	; 0x66b6 <scheduleTask+0x3e>
    66ac:	2a e0       	ldi	r18, 0x0A	; 10
    66ae:	82 2e       	mov	r8, r18
    66b0:	91 2c       	mov	r9, r1
    66b2:	a1 2c       	mov	r10, r1
    66b4:	b1 2c       	mov	r11, r1
    66b6:	68 0d       	add	r22, r8
    66b8:	79 1d       	adc	r23, r9
    66ba:	8a 1d       	adc	r24, r10
    66bc:	9b 1d       	adc	r25, r11
    66be:	98 01       	movw	r18, r16
    66c0:	ae 01       	movw	r20, r28
    66c2:	0e 94 bd 32 	call	0x657a	; 0x657a <schedule_task_absolute_time>
	new_task->period = 0;
    66c6:	fc 01       	movw	r30, r24
    66c8:	14 82       	std	Z+4, r1	; 0x04
    66ca:	15 82       	std	Z+5, r1	; 0x05
    66cc:	16 82       	std	Z+6, r1	; 0x06
    66ce:	17 82       	std	Z+7, r1	; 0x07
	return new_task;
}
    66d0:	df 91       	pop	r29
    66d2:	cf 91       	pop	r28
    66d4:	1f 91       	pop	r17
    66d6:	0f 91       	pop	r16
    66d8:	ff 90       	pop	r15
    66da:	ef 90       	pop	r14
    66dc:	df 90       	pop	r13
    66de:	cf 90       	pop	r12
    66e0:	bf 90       	pop	r11
    66e2:	af 90       	pop	r10
    66e4:	9f 90       	pop	r9
    66e6:	8f 90       	pop	r8
    66e8:	08 95       	ret

000066ea <schedulePeriodicTask>:

volatile Task_t* schedulePeriodicTask(uint32_t period, FlexFunction function, void* arg){
    66ea:	cf 92       	push	r12
    66ec:	df 92       	push	r13
    66ee:	ef 92       	push	r14
    66f0:	ff 92       	push	r15
    66f2:	0f 93       	push	r16
    66f4:	1f 93       	push	r17
    66f6:	cf 93       	push	r28
    66f8:	df 93       	push	r29
    66fa:	ea 01       	movw	r28, r20
    66fc:	89 01       	movw	r16, r18
	period = (period<MIN_TASK_TIME_IN_FUTURE) ? MIN_TASK_TIME_IN_FUTURE : period;
    66fe:	6b 01       	movw	r12, r22
    6700:	7c 01       	movw	r14, r24
    6702:	8a e0       	ldi	r24, 0x0A	; 10
    6704:	c8 16       	cp	r12, r24
    6706:	d1 04       	cpc	r13, r1
    6708:	e1 04       	cpc	r14, r1
    670a:	f1 04       	cpc	r15, r1
    670c:	28 f4       	brcc	.+10     	; 0x6718 <schedulePeriodicTask+0x2e>
    670e:	8a e0       	ldi	r24, 0x0A	; 10
    6710:	c8 2e       	mov	r12, r24
    6712:	d1 2c       	mov	r13, r1
    6714:	e1 2c       	mov	r14, r1
    6716:	f1 2c       	mov	r15, r1
	uint32_t time = ((getTime()/period)+1)*period;
    6718:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
	volatile Task_t* new_task = schedule_task_absolute_time(time, function, arg);
    671c:	a7 01       	movw	r20, r14
    671e:	96 01       	movw	r18, r12
    6720:	0e 94 03 49 	call	0x9206	; 0x9206 <__udivmodsi4>
    6724:	2f 5f       	subi	r18, 0xFF	; 255
    6726:	3f 4f       	sbci	r19, 0xFF	; 255
    6728:	4f 4f       	sbci	r20, 0xFF	; 255
    672a:	5f 4f       	sbci	r21, 0xFF	; 255
    672c:	c7 01       	movw	r24, r14
    672e:	b6 01       	movw	r22, r12
    6730:	0e 94 cb 48 	call	0x9196	; 0x9196 <__mulsi3>
    6734:	98 01       	movw	r18, r16
    6736:	ae 01       	movw	r20, r28
    6738:	0e 94 bd 32 	call	0x657a	; 0x657a <schedule_task_absolute_time>
	new_task->period = period;
    673c:	fc 01       	movw	r30, r24
    673e:	c4 82       	std	Z+4, r12	; 0x04
    6740:	d5 82       	std	Z+5, r13	; 0x05
    6742:	e6 82       	std	Z+6, r14	; 0x06
    6744:	f7 82       	std	Z+7, r15	; 0x07
	return new_task;
}
    6746:	df 91       	pop	r29
    6748:	cf 91       	pop	r28
    674a:	1f 91       	pop	r17
    674c:	0f 91       	pop	r16
    674e:	ff 90       	pop	r15
    6750:	ef 90       	pop	r14
    6752:	df 90       	pop	r13
    6754:	cf 90       	pop	r12
    6756:	08 95       	ret

00006758 <__vector_11>:
		}
	}
	return 0;
}

ISR(RTC_COMP_vect){
    6758:	1f 92       	push	r1
    675a:	0f 92       	push	r0
    675c:	0f b6       	in	r0, 0x3f	; 63
    675e:	0f 92       	push	r0
    6760:	11 24       	eor	r1, r1
    6762:	0b b6       	in	r0, 0x3b	; 59
    6764:	0f 92       	push	r0
    6766:	4f 92       	push	r4
    6768:	5f 92       	push	r5
    676a:	6f 92       	push	r6
    676c:	7f 92       	push	r7
    676e:	8f 92       	push	r8
    6770:	9f 92       	push	r9
    6772:	af 92       	push	r10
    6774:	bf 92       	push	r11
    6776:	cf 92       	push	r12
    6778:	df 92       	push	r13
    677a:	ef 92       	push	r14
    677c:	ff 92       	push	r15
    677e:	0f 93       	push	r16
    6780:	1f 93       	push	r17
    6782:	2f 93       	push	r18
    6784:	3f 93       	push	r19
    6786:	4f 93       	push	r20
    6788:	5f 93       	push	r21
    678a:	6f 93       	push	r22
    678c:	7f 93       	push	r23
    678e:	8f 93       	push	r24
    6790:	9f 93       	push	r25
    6792:	af 93       	push	r26
    6794:	bf 93       	push	r27
    6796:	cf 93       	push	r28
    6798:	df 93       	push	r29
    679a:	ef 93       	push	r30
    679c:	ff 93       	push	r31
	SAVE_CONTEXT();	
    679e:	0f 92       	push	r0
    67a0:	0f b6       	in	r0, 0x3f	; 63
    67a2:	f8 94       	cli
    67a4:	0f 92       	push	r0
    67a6:	1f 92       	push	r1
    67a8:	11 24       	eor	r1, r1
    67aa:	2f 92       	push	r2
    67ac:	3f 92       	push	r3
    67ae:	4f 92       	push	r4
    67b0:	5f 92       	push	r5
    67b2:	6f 92       	push	r6
    67b4:	7f 92       	push	r7
    67b6:	8f 92       	push	r8
    67b8:	9f 92       	push	r9
    67ba:	af 92       	push	r10
    67bc:	bf 92       	push	r11
    67be:	cf 92       	push	r12
    67c0:	df 92       	push	r13
    67c2:	ef 92       	push	r14
    67c4:	ff 92       	push	r15
    67c6:	0f 93       	push	r16
    67c8:	1f 93       	push	r17
    67ca:	2f 93       	push	r18
    67cc:	3f 93       	push	r19
    67ce:	4f 93       	push	r20
    67d0:	5f 93       	push	r21
    67d2:	6f 93       	push	r22
    67d4:	7f 93       	push	r23
    67d6:	8f 93       	push	r24
    67d8:	9f 93       	push	r25
    67da:	af 93       	push	r26
    67dc:	bf 93       	push	r27
    67de:	cf 93       	push	r28
    67e0:	df 93       	push	r29
    67e2:	ef 93       	push	r30
    67e4:	ff 93       	push	r31
	task_executing=1;
    67e6:	81 e0       	ldi	r24, 0x01	; 1
    67e8:	80 93 7e 25 	sts	0x257E, r24	; 0x80257e <task_executing>

// TO BE CALLED FROM INTERRUPT HANDLER ONLY
// DO NOT CALL
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
    67ec:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    67ee:	f8 94       	cli
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    67f0:	3c e7       	ldi	r19, 0x7C	; 124
    67f2:	c3 2e       	mov	r12, r19
    67f4:	39 e0       	ldi	r19, 0x09	; 9
    67f6:	d3 2e       	mov	r13, r19
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    67f8:	48 e9       	ldi	r20, 0x98	; 152
    67fa:	e4 2e       	mov	r14, r20
    67fc:	41 e2       	ldi	r20, 0x21	; 33
    67fe:	f4 2e       	mov	r15, r20
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    6800:	54 e0       	ldi	r21, 0x04	; 4
    6802:	a5 2e       	mov	r10, r21
    6804:	59 e0       	ldi	r21, 0x09	; 9
    6806:	b5 2e       	mov	r11, r21
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
    6808:	e0 91 83 25 	lds	r30, 0x2583	; 0x802583 <task_list>
    680c:	f0 91 84 25 	lds	r31, 0x2584	; 0x802584 <task_list+0x1>
    6810:	30 97       	sbiw	r30, 0x00	; 0
    6812:	09 f4       	brne	.+2      	; 0x6816 <__vector_11+0xbe>
    6814:	2c c1       	rjmp	.+600    	; 0x6a6e <__vector_11+0x316>
    6816:	40 80       	ld	r4, Z
    6818:	51 80       	ldd	r5, Z+1	; 0x01
    681a:	62 80       	ldd	r6, Z+2	; 0x02
    681c:	73 80       	ldd	r7, Z+3	; 0x03
    681e:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    6822:	dc 01       	movw	r26, r24
    6824:	cb 01       	movw	r24, r22
    6826:	02 96       	adiw	r24, 0x02	; 2
    6828:	a1 1d       	adc	r26, r1
    682a:	b1 1d       	adc	r27, r1
    682c:	84 15       	cp	r24, r4
    682e:	95 05       	cpc	r25, r5
    6830:	a6 05       	cpc	r26, r6
    6832:	b7 05       	cpc	r27, r7
    6834:	08 f4       	brcc	.+2      	; 0x6838 <__vector_11+0xe0>
    6836:	f8 c0       	rjmp	.+496    	; 0x6a28 <__vector_11+0x2d0>
    6838:	03 e2       	ldi	r16, 0x23	; 35
    683a:	13 e2       	ldi	r17, 0x23	; 35
    683c:	c0 e0       	ldi	r28, 0x00	; 0
    683e:	d0 e0       	ldi	r29, 0x00	; 0
    6840:	81 2c       	mov	r8, r1
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
    6842:	ce 01       	movw	r24, r28
    6844:	88 0f       	add	r24, r24
    6846:	99 1f       	adc	r25, r25
    6848:	fc 01       	movw	r30, r24
    684a:	ee 0f       	add	r30, r30
    684c:	ff 1f       	adc	r31, r31
    684e:	ee 0f       	add	r30, r30
    6850:	ff 1f       	adc	r31, r31
    6852:	ee 0f       	add	r30, r30
    6854:	ff 1f       	adc	r31, r31
    6856:	e8 1b       	sub	r30, r24
    6858:	f9 0b       	sbc	r31, r25
    685a:	ed 5d       	subi	r30, 0xDD	; 221
    685c:	fc 4d       	sbci	r31, 0xDC	; 220
    685e:	80 85       	ldd	r24, Z+8	; 0x08
    6860:	91 85       	ldd	r25, Z+9	; 0x09
    6862:	89 2b       	or	r24, r25
    6864:	09 f1       	breq	.+66     	; 0x68a8 <__vector_11+0x150>
					num_slots_used++;
    6866:	83 94       	inc	r8
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    6868:	84 85       	ldd	r24, Z+12	; 0x0c
    686a:	95 85       	ldd	r25, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
    686c:	00 97       	sbiw	r24, 0x00	; 0
    686e:	e1 f0       	breq	.+56     	; 0x68a8 <__vector_11+0x150>
    6870:	23 e2       	ldi	r18, 0x23	; 35
    6872:	83 32       	cpi	r24, 0x23	; 35
    6874:	92 07       	cpc	r25, r18
    6876:	20 f0       	brcs	.+8      	; 0x6880 <__vector_11+0x128>
    6878:	81 5a       	subi	r24, 0xA1	; 161
    687a:	93 42       	sbci	r25, 0x23	; 35
    687c:	a9 f0       	breq	.+42     	; 0x68a8 <__vector_11+0x150>
    687e:	a0 f0       	brcs	.+40     	; 0x68a8 <__vector_11+0x150>
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    6880:	df 92       	push	r13
    6882:	cf 92       	push	r12
    6884:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    6888:	1f 93       	push	r17
    688a:	0f 93       	push	r16
    688c:	ff 92       	push	r15
    688e:	ef 92       	push	r14
    6890:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <printf>
						delayMS(10);
    6894:	8a e0       	ldi	r24, 0x0A	; 10
    6896:	90 e0       	ldi	r25, 0x00	; 0
    6898:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    689c:	0f 90       	pop	r0
    689e:	0f 90       	pop	r0
    68a0:	0f 90       	pop	r0
    68a2:	0f 90       	pop	r0
    68a4:	0f 90       	pop	r0
    68a6:	0f 90       	pop	r0
    68a8:	21 96       	adiw	r28, 0x01	; 1
    68aa:	02 5f       	subi	r16, 0xF2	; 242
    68ac:	1f 4f       	sbci	r17, 0xFF	; 255
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
    68ae:	ca 30       	cpi	r28, 0x0A	; 10
    68b0:	d1 05       	cpc	r29, r1
    68b2:	39 f6       	brne	.-114    	; 0x6842 <__vector_11+0xea>
						delayMS(10);
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
    68b4:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <num_tasks>
    68b8:	88 11       	cpse	r24, r8
    68ba:	39 c1       	rjmp	.+626    	; 0x6b2e <__vector_11+0x3d6>
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
				return -1;
			}
			cur_task = task_list;
    68bc:	c0 91 83 25 	lds	r28, 0x2583	; 0x802583 <task_list>
    68c0:	d0 91 84 25 	lds	r29, 0x2584	; 0x802584 <task_list+0x1>
			task_list = cur_task->next;
    68c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    68c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    68c8:	80 93 83 25 	sts	0x2583, r24	; 0x802583 <task_list>
    68cc:	90 93 84 25 	sts	0x2584, r25	; 0x802584 <task_list+0x1>

			if(cur_task->arg==NULL){
    68d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    68d2:	9b 85       	ldd	r25, Y+11	; 0x0b
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
    68d4:	1f b7       	in	r17, 0x3f	; 63
				return -1;
			}
			cur_task = task_list;
			task_list = cur_task->next;

			if(cur_task->arg==NULL){
    68d6:	89 2b       	or	r24, r25
    68d8:	09 f4       	brne	.+2      	; 0x68dc <__vector_11+0x184>
    68da:	8f c0       	rjmp	.+286    	; 0x69fa <__vector_11+0x2a2>

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    68dc:	78 94       	sei
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).noarg_func(); // run the task
				}
			}else{
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).arg_function(cur_task->arg); // run the task
    68de:	e8 85       	ldd	r30, Y+8	; 0x08
    68e0:	f9 85       	ldd	r31, Y+9	; 0x09
    68e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    68e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    68e6:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    68e8:	1f bf       	out	0x3f, r17	; 63
				}
			}
			
			if(cur_task->period>0){
    68ea:	8c 81       	ldd	r24, Y+4	; 0x04
    68ec:	9d 81       	ldd	r25, Y+5	; 0x05
    68ee:	ae 81       	ldd	r26, Y+6	; 0x06
    68f0:	bf 81       	ldd	r27, Y+7	; 0x07
    68f2:	89 2b       	or	r24, r25
    68f4:	8a 2b       	or	r24, r26
    68f6:	8b 2b       	or	r24, r27
    68f8:	09 f4       	brne	.+2      	; 0x68fc <__vector_11+0x1a4>
    68fa:	8d c0       	rjmp	.+282    	; 0x6a16 <__vector_11+0x2be>
				uint32_t nextTime = (((cur_task->scheduled_time)/(cur_task->period))+1)*(cur_task->period);
    68fc:	68 81       	ld	r22, Y
    68fe:	79 81       	ldd	r23, Y+1	; 0x01
    6900:	8a 81       	ldd	r24, Y+2	; 0x02
    6902:	9b 81       	ldd	r25, Y+3	; 0x03
    6904:	2c 81       	ldd	r18, Y+4	; 0x04
    6906:	3d 81       	ldd	r19, Y+5	; 0x05
    6908:	4e 81       	ldd	r20, Y+6	; 0x06
    690a:	5f 81       	ldd	r21, Y+7	; 0x07
    690c:	4c 80       	ldd	r4, Y+4	; 0x04
    690e:	5d 80       	ldd	r5, Y+5	; 0x05
    6910:	6e 80       	ldd	r6, Y+6	; 0x06
    6912:	7f 80       	ldd	r7, Y+7	; 0x07
    6914:	0e 94 03 49 	call	0x9206	; 0x9206 <__udivmodsi4>
    6918:	2f 5f       	subi	r18, 0xFF	; 255
    691a:	3f 4f       	sbci	r19, 0xFF	; 255
    691c:	4f 4f       	sbci	r20, 0xFF	; 255
    691e:	5f 4f       	sbci	r21, 0xFF	; 255
    6920:	c3 01       	movw	r24, r6
    6922:	b2 01       	movw	r22, r4
    6924:	0e 94 cb 48 	call	0x9196	; 0x9196 <__mulsi3>
				cur_task->scheduled_time = nextTime;
    6928:	68 83       	st	Y, r22
    692a:	79 83       	std	Y+1, r23	; 0x01
    692c:	8a 83       	std	Y+2, r24	; 0x02
    692e:	9b 83       	std	Y+3, r25	; 0x03
				cur_task->next=NULL;
    6930:	1c 86       	std	Y+12, r1	; 0x0c
    6932:	1d 86       	std	Y+13, r1	; 0x0d
				num_tasks--;
    6934:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <num_tasks>
    6938:	81 50       	subi	r24, 0x01	; 1
    693a:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <num_tasks>
				add_task_to_list(cur_task);
    693e:	ce 01       	movw	r24, r28
    6940:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <add_task_to_list>
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
    6944:	c0 e0       	ldi	r28, 0x00	; 0
    6946:	d0 e0       	ldi	r29, 0x00	; 0
    6948:	10 e0       	ldi	r17, 0x00	; 0
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
    694a:	ce 01       	movw	r24, r28
    694c:	88 0f       	add	r24, r24
    694e:	99 1f       	adc	r25, r25
    6950:	fc 01       	movw	r30, r24
    6952:	ee 0f       	add	r30, r30
    6954:	ff 1f       	adc	r31, r31
    6956:	ee 0f       	add	r30, r30
    6958:	ff 1f       	adc	r31, r31
    695a:	ee 0f       	add	r30, r30
    695c:	ff 1f       	adc	r31, r31
    695e:	e8 1b       	sub	r30, r24
    6960:	f9 0b       	sbc	r31, r25
    6962:	ed 5d       	subi	r30, 0xDD	; 221
    6964:	fc 4d       	sbci	r31, 0xDC	; 220
    6966:	20 85       	ldd	r18, Z+8	; 0x08
    6968:	31 85       	ldd	r19, Z+9	; 0x09
    696a:	23 2b       	or	r18, r19
    696c:	99 f1       	breq	.+102    	; 0x69d4 <__vector_11+0x27c>
					num_slots_used++;
    696e:	1f 5f       	subi	r17, 0xFF	; 255
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    6970:	24 85       	ldd	r18, Z+12	; 0x0c
    6972:	35 85       	ldd	r19, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
    6974:	21 15       	cp	r18, r1
    6976:	31 05       	cpc	r19, r1
    6978:	69 f1       	breq	.+90     	; 0x69d4 <__vector_11+0x27c>
    697a:	43 e2       	ldi	r20, 0x23	; 35
    697c:	23 32       	cpi	r18, 0x23	; 35
    697e:	34 07       	cpc	r19, r20
    6980:	20 f0       	brcs	.+8      	; 0x698a <__vector_11+0x232>
    6982:	21 5a       	subi	r18, 0xA1	; 161
    6984:	33 42       	sbci	r19, 0x23	; 35
    6986:	31 f1       	breq	.+76     	; 0x69d4 <__vector_11+0x27c>
    6988:	28 f1       	brcs	.+74     	; 0x69d4 <__vector_11+0x27c>
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    698a:	fc 01       	movw	r30, r24
    698c:	ee 0f       	add	r30, r30
    698e:	ff 1f       	adc	r31, r31
    6990:	ee 0f       	add	r30, r30
    6992:	ff 1f       	adc	r31, r31
    6994:	ee 0f       	add	r30, r30
    6996:	ff 1f       	adc	r31, r31
    6998:	e8 1b       	sub	r30, r24
    699a:	f9 0b       	sbc	r31, r25
    699c:	ed 5d       	subi	r30, 0xDD	; 221
    699e:	fc 4d       	sbci	r31, 0xDC	; 220
    69a0:	8d b7       	in	r24, 0x3d	; 61
    69a2:	9e b7       	in	r25, 0x3e	; 62
    69a4:	0e 97       	sbiw	r24, 0x0e	; 14
    69a6:	8d bf       	out	0x3d, r24	; 61
    69a8:	9e bf       	out	0x3e, r25	; 62
    69aa:	ad b7       	in	r26, 0x3d	; 61
    69ac:	be b7       	in	r27, 0x3e	; 62
    69ae:	11 96       	adiw	r26, 0x01	; 1
    69b0:	8e e0       	ldi	r24, 0x0E	; 14
    69b2:	01 90       	ld	r0, Z+
    69b4:	0d 92       	st	X+, r0
    69b6:	8a 95       	dec	r24
    69b8:	e1 f7       	brne	.-8      	; 0x69b2 <__vector_11+0x25a>
    69ba:	bf 92       	push	r11
    69bc:	af 92       	push	r10
    69be:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
						delayMS(10);
    69c2:	8a e0       	ldi	r24, 0x0A	; 10
    69c4:	90 e0       	ldi	r25, 0x00	; 0
    69c6:	0e 94 4e 08 	call	0x109c	; 0x109c <delayMS>
    69ca:	8d b7       	in	r24, 0x3d	; 61
    69cc:	9e b7       	in	r25, 0x3e	; 62
    69ce:	40 96       	adiw	r24, 0x10	; 16
    69d0:	8d bf       	out	0x3d, r24	; 61
    69d2:	9e bf       	out	0x3e, r25	; 62
    69d4:	21 96       	adiw	r28, 0x01	; 1
				cur_task = NULL;
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
    69d6:	ca 30       	cpi	r28, 0x0A	; 10
    69d8:	d1 05       	cpc	r29, r1
    69da:	09 f0       	breq	.+2      	; 0x69de <__vector_11+0x286>
    69dc:	b6 cf       	rjmp	.-148    	; 0x694a <__vector_11+0x1f2>
						delayMS(10);
					}
				}
			}
			//printf_P(PSTR("\tReturned %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
    69de:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <num_tasks>
    69e2:	81 17       	cp	r24, r17
    69e4:	09 f4       	brne	.+2      	; 0x69e8 <__vector_11+0x290>
    69e6:	10 cf       	rjmp	.-480    	; 0x6808 <__vector_11+0xb0>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
    69e8:	86 ec       	ldi	r24, 0xC6	; 198
    69ea:	98 e0       	ldi	r25, 0x08	; 8
    69ec:	9f 93       	push	r25
    69ee:	8f 93       	push	r24
    69f0:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    69f4:	0f 90       	pop	r0
    69f6:	0f 90       	pop	r0
    69f8:	3f c0       	rjmp	.+126    	; 0x6a78 <__vector_11+0x320>

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    69fa:	78 94       	sei
			cur_task = task_list;
			task_list = cur_task->next;

			if(cur_task->arg==NULL){
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).noarg_func(); // run the task
    69fc:	e8 85       	ldd	r30, Y+8	; 0x08
    69fe:	f9 85       	ldd	r31, Y+9	; 0x09
    6a00:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6a02:	1f bf       	out	0x3f, r17	; 63
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).arg_function(cur_task->arg); // run the task
				}
			}
			
			if(cur_task->period>0){
    6a04:	8c 81       	ldd	r24, Y+4	; 0x04
    6a06:	9d 81       	ldd	r25, Y+5	; 0x05
    6a08:	ae 81       	ldd	r26, Y+6	; 0x06
    6a0a:	bf 81       	ldd	r27, Y+7	; 0x07
    6a0c:	89 2b       	or	r24, r25
    6a0e:	8a 2b       	or	r24, r26
    6a10:	8b 2b       	or	r24, r27
    6a12:	09 f0       	breq	.+2      	; 0x6a16 <__vector_11+0x2be>
    6a14:	73 cf       	rjmp	.-282    	; 0x68fc <__vector_11+0x1a4>
				cur_task->scheduled_time = nextTime;
				cur_task->next=NULL;
				num_tasks--;
				add_task_to_list(cur_task);
			}else{
				scheduler_free(cur_task);
    6a16:	ce 01       	movw	r24, r28
    6a18:	0e 94 54 30 	call	0x60a8	; 0x60a8 <scheduler_free>
				cur_task = NULL;
				num_tasks--;
    6a1c:	80 91 c0 23 	lds	r24, 0x23C0	; 0x8023c0 <num_tasks>
    6a20:	81 50       	subi	r24, 0x01	; 1
    6a22:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <num_tasks>
    6a26:	8e cf       	rjmp	.-228    	; 0x6944 <__vector_11+0x1ec>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
				return -1;
			}
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    6a28:	e0 91 83 25 	lds	r30, 0x2583	; 0x802583 <task_list>
    6a2c:	f0 91 84 25 	lds	r31, 0x2584	; 0x802584 <task_list+0x1>
    6a30:	30 97       	sbiw	r30, 0x00	; 0
    6a32:	e9 f0       	breq	.+58     	; 0x6a6e <__vector_11+0x316>
    6a34:	00 81       	ld	r16, Z
    6a36:	11 81       	ldd	r17, Z+1	; 0x01
    6a38:	22 81       	ldd	r18, Z+2	; 0x02
    6a3a:	33 81       	ldd	r19, Z+3	; 0x03
    6a3c:	80 91 b1 23 	lds	r24, 0x23B1	; 0x8023b1 <rtc_epoch>
    6a40:	90 91 b2 23 	lds	r25, 0x23B2	; 0x8023b2 <rtc_epoch+0x1>
    6a44:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    6a48:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    6a4c:	a0 e0       	ldi	r26, 0x00	; 0
    6a4e:	b0 e0       	ldi	r27, 0x00	; 0
    6a50:	dc 01       	movw	r26, r24
    6a52:	99 27       	eor	r25, r25
    6a54:	88 27       	eor	r24, r24
    6a56:	60 e0       	ldi	r22, 0x00	; 0
    6a58:	70 e0       	ldi	r23, 0x00	; 0
    6a5a:	84 2b       	or	r24, r20
    6a5c:	95 2b       	or	r25, r21
    6a5e:	a6 2b       	or	r26, r22
    6a60:	b7 2b       	or	r27, r23
    6a62:	80 17       	cp	r24, r16
    6a64:	91 07       	cpc	r25, r17
    6a66:	a2 07       	cpc	r26, r18
    6a68:	b3 07       	cpc	r27, r19
    6a6a:	08 f0       	brcs	.+2      	; 0x6a6e <__vector_11+0x316>
    6a6c:	4d c0       	rjmp	.+154    	; 0x6b08 <__vector_11+0x3b0>
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		}else{
			RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    6a6e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6a72:	8b 7f       	andi	r24, 0xFB	; 251
    6a74:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6a78:	9f be       	out	0x3f, r9	; 63

ISR(RTC_COMP_vect){
	SAVE_CONTEXT();	
	task_executing=1;
	/*int8_t result =*/ run_tasks();
	task_executing=0;
    6a7a:	10 92 7e 25 	sts	0x257E, r1	; 0x80257e <task_executing>
	//if(result<0)
		//task_list_cleanup();		
	RESTORE_CONTEXT();	
    6a7e:	ff 91       	pop	r31
    6a80:	ef 91       	pop	r30
    6a82:	df 91       	pop	r29
    6a84:	cf 91       	pop	r28
    6a86:	bf 91       	pop	r27
    6a88:	af 91       	pop	r26
    6a8a:	9f 91       	pop	r25
    6a8c:	8f 91       	pop	r24
    6a8e:	7f 91       	pop	r23
    6a90:	6f 91       	pop	r22
    6a92:	5f 91       	pop	r21
    6a94:	4f 91       	pop	r20
    6a96:	3f 91       	pop	r19
    6a98:	2f 91       	pop	r18
    6a9a:	1f 91       	pop	r17
    6a9c:	0f 91       	pop	r16
    6a9e:	ff 90       	pop	r15
    6aa0:	ef 90       	pop	r14
    6aa2:	df 90       	pop	r13
    6aa4:	cf 90       	pop	r12
    6aa6:	bf 90       	pop	r11
    6aa8:	af 90       	pop	r10
    6aaa:	9f 90       	pop	r9
    6aac:	8f 90       	pop	r8
    6aae:	7f 90       	pop	r7
    6ab0:	6f 90       	pop	r6
    6ab2:	5f 90       	pop	r5
    6ab4:	4f 90       	pop	r4
    6ab6:	3f 90       	pop	r3
    6ab8:	2f 90       	pop	r2
    6aba:	1f 90       	pop	r1
    6abc:	0f 90       	pop	r0
    6abe:	0f be       	out	0x3f, r0	; 63
    6ac0:	0f 90       	pop	r0
}
    6ac2:	ff 91       	pop	r31
    6ac4:	ef 91       	pop	r30
    6ac6:	df 91       	pop	r29
    6ac8:	cf 91       	pop	r28
    6aca:	bf 91       	pop	r27
    6acc:	af 91       	pop	r26
    6ace:	9f 91       	pop	r25
    6ad0:	8f 91       	pop	r24
    6ad2:	7f 91       	pop	r23
    6ad4:	6f 91       	pop	r22
    6ad6:	5f 91       	pop	r21
    6ad8:	4f 91       	pop	r20
    6ada:	3f 91       	pop	r19
    6adc:	2f 91       	pop	r18
    6ade:	1f 91       	pop	r17
    6ae0:	0f 91       	pop	r16
    6ae2:	ff 90       	pop	r15
    6ae4:	ef 90       	pop	r14
    6ae6:	df 90       	pop	r13
    6ae8:	cf 90       	pop	r12
    6aea:	bf 90       	pop	r11
    6aec:	af 90       	pop	r10
    6aee:	9f 90       	pop	r9
    6af0:	8f 90       	pop	r8
    6af2:	7f 90       	pop	r7
    6af4:	6f 90       	pop	r6
    6af6:	5f 90       	pop	r5
    6af8:	4f 90       	pop	r4
    6afa:	0f 90       	pop	r0
    6afc:	0b be       	out	0x3b, r0	; 59
    6afe:	0f 90       	pop	r0
    6b00:	0f be       	out	0x3f, r0	; 63
    6b02:	0f 90       	pop	r0
    6b04:	1f 90       	pop	r1
    6b06:	18 95       	reti
				return -1;
			}
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6b08:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6b0c:	80 fd       	sbrc	r24, 0
    6b0e:	fc cf       	rjmp	.-8      	; 0x6b08 <__vector_11+0x3b0>
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    6b10:	80 81       	ld	r24, Z
    6b12:	91 81       	ldd	r25, Z+1	; 0x01
    6b14:	a2 81       	ldd	r26, Z+2	; 0x02
    6b16:	b3 81       	ldd	r27, Z+3	; 0x03
    6b18:	88 60       	ori	r24, 0x08	; 8
    6b1a:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    6b1e:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    6b22:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6b26:	84 60       	ori	r24, 0x04	; 4
    6b28:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6b2c:	a5 cf       	rjmp	.-182    	; 0x6a78 <__vector_11+0x320>
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
    6b2e:	81 e4       	ldi	r24, 0x41	; 65
    6b30:	99 e0       	ldi	r25, 0x09	; 9
    6b32:	9f 93       	push	r25
    6b34:	8f 93       	push	r24
    6b36:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    6b3a:	0f 90       	pop	r0
    6b3c:	0f 90       	pop	r0
    6b3e:	9c cf       	rjmp	.-200    	; 0x6a78 <__vector_11+0x320>

00006b40 <__vector_10>:
	RESTORE_CONTEXT();	
}

// Increment rtc_epoch on RTC overflow
// Must be atomic so no reads of get_time() occur between RTC overflow and updating of epoch
ISR( RTC_OVF_vect ){
    6b40:	1f 92       	push	r1
    6b42:	0f 92       	push	r0
    6b44:	0f b6       	in	r0, 0x3f	; 63
    6b46:	0f 92       	push	r0
    6b48:	11 24       	eor	r1, r1
    6b4a:	0b b6       	in	r0, 0x3b	; 59
    6b4c:	0f 92       	push	r0
    6b4e:	cf 92       	push	r12
    6b50:	df 92       	push	r13
    6b52:	ef 92       	push	r14
    6b54:	ff 92       	push	r15
    6b56:	0f 93       	push	r16
    6b58:	1f 93       	push	r17
    6b5a:	2f 93       	push	r18
    6b5c:	3f 93       	push	r19
    6b5e:	4f 93       	push	r20
    6b60:	5f 93       	push	r21
    6b62:	6f 93       	push	r22
    6b64:	7f 93       	push	r23
    6b66:	8f 93       	push	r24
    6b68:	9f 93       	push	r25
    6b6a:	af 93       	push	r26
    6b6c:	bf 93       	push	r27
    6b6e:	cf 93       	push	r28
    6b70:	ef 93       	push	r30
    6b72:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
    6b74:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6b76:	f8 94       	cli
		rtc_epoch++;
    6b78:	80 91 b1 23 	lds	r24, 0x23B1	; 0x8023b1 <rtc_epoch>
    6b7c:	90 91 b2 23 	lds	r25, 0x23B2	; 0x8023b2 <rtc_epoch+0x1>
    6b80:	01 96       	adiw	r24, 0x01	; 1
    6b82:	80 93 b1 23 	sts	0x23B1, r24	; 0x8023b1 <rtc_epoch>
    6b86:	90 93 b2 23 	sts	0x23B2, r25	; 0x8023b2 <rtc_epoch+0x1>
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    6b8a:	e0 91 83 25 	lds	r30, 0x2583	; 0x802583 <task_list>
    6b8e:	f0 91 84 25 	lds	r31, 0x2584	; 0x802584 <task_list+0x1>
    6b92:	30 97       	sbiw	r30, 0x00	; 0
    6b94:	e1 f1       	breq	.+120    	; 0x6c0e <__vector_10+0xce>
    6b96:	00 81       	ld	r16, Z
    6b98:	11 81       	ldd	r17, Z+1	; 0x01
    6b9a:	22 81       	ldd	r18, Z+2	; 0x02
    6b9c:	33 81       	ldd	r19, Z+3	; 0x03
    6b9e:	80 91 b1 23 	lds	r24, 0x23B1	; 0x8023b1 <rtc_epoch>
    6ba2:	90 91 b2 23 	lds	r25, 0x23B2	; 0x8023b2 <rtc_epoch+0x1>
    6ba6:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    6baa:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    6bae:	a0 e0       	ldi	r26, 0x00	; 0
    6bb0:	b0 e0       	ldi	r27, 0x00	; 0
    6bb2:	dc 01       	movw	r26, r24
    6bb4:	99 27       	eor	r25, r25
    6bb6:	88 27       	eor	r24, r24
    6bb8:	60 e0       	ldi	r22, 0x00	; 0
    6bba:	70 e0       	ldi	r23, 0x00	; 0
    6bbc:	84 2b       	or	r24, r20
    6bbe:	95 2b       	or	r25, r21
    6bc0:	a6 2b       	or	r26, r22
    6bc2:	b7 2b       	or	r27, r23
    6bc4:	08 17       	cp	r16, r24
    6bc6:	19 07       	cpc	r17, r25
    6bc8:	2a 07       	cpc	r18, r26
    6bca:	3b 07       	cpc	r19, r27
    6bcc:	00 f5       	brcc	.+64     	; 0x6c0e <__vector_10+0xce>
			if(!task_executing){
    6bce:	80 91 7e 25 	lds	r24, 0x257E	; 0x80257e <task_executing>
    6bd2:	88 23       	and	r24, r24
    6bd4:	09 f4       	brne	.+2      	; 0x6bd8 <__vector_10+0x98>
    6bd6:	3f c0       	rjmp	.+126    	; 0x6c56 <__vector_10+0x116>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6bd8:	cf bf       	out	0x3f, r28	; 63
			}
		}else{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, getTime());
		}
	}
    6bda:	ff 91       	pop	r31
    6bdc:	ef 91       	pop	r30
    6bde:	cf 91       	pop	r28
    6be0:	bf 91       	pop	r27
    6be2:	af 91       	pop	r26
    6be4:	9f 91       	pop	r25
    6be6:	8f 91       	pop	r24
    6be8:	7f 91       	pop	r23
    6bea:	6f 91       	pop	r22
    6bec:	5f 91       	pop	r21
    6bee:	4f 91       	pop	r20
    6bf0:	3f 91       	pop	r19
    6bf2:	2f 91       	pop	r18
    6bf4:	1f 91       	pop	r17
    6bf6:	0f 91       	pop	r16
    6bf8:	ff 90       	pop	r15
    6bfa:	ef 90       	pop	r14
    6bfc:	df 90       	pop	r13
    6bfe:	cf 90       	pop	r12
    6c00:	0f 90       	pop	r0
    6c02:	0b be       	out	0x3b, r0	; 59
    6c04:	0f 90       	pop	r0
    6c06:	0f be       	out	0x3f, r0	; 63
    6c08:	0f 90       	pop	r0
    6c0a:	1f 90       	pop	r1
    6c0c:	18 95       	reti
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}
			}
		}else{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, getTime());
    6c0e:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    6c12:	36 2f       	mov	r19, r22
    6c14:	e7 2f       	mov	r30, r23
    6c16:	a0 91 83 25 	lds	r26, 0x2583	; 0x802583 <task_list>
    6c1a:	b0 91 84 25 	lds	r27, 0x2584	; 0x802584 <task_list+0x1>
    6c1e:	4d 91       	ld	r20, X+
    6c20:	5d 91       	ld	r21, X+
    6c22:	6d 91       	ld	r22, X+
    6c24:	7c 91       	ld	r23, X
    6c26:	20 91 7e 25 	lds	r18, 0x257E	; 0x80257e <task_executing>
    6c2a:	9f 93       	push	r25
    6c2c:	8f 93       	push	r24
    6c2e:	ef 93       	push	r30
    6c30:	3f 93       	push	r19
    6c32:	7f 93       	push	r23
    6c34:	6f 93       	push	r22
    6c36:	5f 93       	push	r21
    6c38:	4f 93       	push	r20
    6c3a:	1f 92       	push	r1
    6c3c:	2f 93       	push	r18
    6c3e:	8e e9       	ldi	r24, 0x9E	; 158
    6c40:	91 e2       	ldi	r25, 0x21	; 33
    6c42:	9f 93       	push	r25
    6c44:	8f 93       	push	r24
    6c46:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <printf>
    6c4a:	8d b7       	in	r24, 0x3d	; 61
    6c4c:	9e b7       	in	r25, 0x3e	; 62
    6c4e:	0c 96       	adiw	r24, 0x0c	; 12
    6c50:	8d bf       	out	0x3d, r24	; 61
    6c52:	9e bf       	out	0x3e, r25	; 62
    6c54:	c1 cf       	rjmp	.-126    	; 0x6bd8 <__vector_10+0x98>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		rtc_epoch++;
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
			if(!task_executing){
				if(task_list->scheduled_time < getTime()){
    6c56:	c0 80       	ld	r12, Z
    6c58:	d1 80       	ldd	r13, Z+1	; 0x01
    6c5a:	e2 80       	ldd	r14, Z+2	; 0x02
    6c5c:	f3 80       	ldd	r15, Z+3	; 0x03
    6c5e:	0e 94 34 08 	call	0x1068	; 0x1068 <getTime>
    6c62:	c6 16       	cp	r12, r22
    6c64:	d7 06       	cpc	r13, r23
    6c66:	e8 06       	cpc	r14, r24
    6c68:	f9 06       	cpc	r15, r25
    6c6a:	08 f4       	brcc	.+2      	; 0x6c6e <__vector_10+0x12e>
    6c6c:	b5 cf       	rjmp	.-150    	; 0x6bd8 <__vector_10+0x98>
					//printf("In overflow, tasks need to have been executed!\r\n");
					//print_task_queue();
				}else{		
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6c6e:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6c72:	80 fd       	sbrc	r24, 0
    6c74:	fc cf       	rjmp	.-8      	; 0x6c6e <__vector_10+0x12e>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    6c76:	e0 91 83 25 	lds	r30, 0x2583	; 0x802583 <task_list>
    6c7a:	f0 91 84 25 	lds	r31, 0x2584	; 0x802584 <task_list+0x1>
    6c7e:	80 81       	ld	r24, Z
    6c80:	91 81       	ldd	r25, Z+1	; 0x01
    6c82:	a2 81       	ldd	r26, Z+2	; 0x02
    6c84:	b3 81       	ldd	r27, Z+3	; 0x03
    6c86:	88 60       	ori	r24, 0x08	; 8
    6c88:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    6c8c:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    6c90:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6c94:	84 60       	ori	r24, 0x04	; 4
    6c96:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6c9a:	9e cf       	rjmp	.-196    	; 0x6bd8 <__vector_10+0x98>

00006c9c <sendID>:
 */
static void handle_reset(void){
	dropletReboot();
}

void sendID(){
    6c9c:	0f 93       	push	r16
    6c9e:	1f 93       	push	r17
    6ca0:	cf 93       	push	r28
    6ca2:	df 93       	push	r29
    6ca4:	cd b7       	in	r28, 0x3d	; 61
    6ca6:	de b7       	in	r29, 0x3e	; 62
    6ca8:	25 97       	sbiw	r28, 0x05	; 5
    6caa:	cd bf       	out	0x3d, r28	; 61
    6cac:	de bf       	out	0x3e, r29	; 62
	char msg[5];
	sprintf(msg, "%04X", getDropletID());
    6cae:	80 91 b0 23 	lds	r24, 0x23B0	; 0x8023b0 <droplet_ID+0x1>
    6cb2:	8f 93       	push	r24
    6cb4:	80 91 af 23 	lds	r24, 0x23AF	; 0x8023af <droplet_ID>
    6cb8:	8f 93       	push	r24
    6cba:	8f ef       	ldi	r24, 0xFF	; 255
    6cbc:	91 e2       	ldi	r25, 0x21	; 33
    6cbe:	9f 93       	push	r25
    6cc0:	8f 93       	push	r24
    6cc2:	8e 01       	movw	r16, r28
    6cc4:	0f 5f       	subi	r16, 0xFF	; 255
    6cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    6cc8:	1f 93       	push	r17
    6cca:	0f 93       	push	r16
    6ccc:	0e 94 fc 4d 	call	0x9bf8	; 0x9bf8 <sprintf>
	irSend(ALL_DIRS, msg, 4);
    6cd0:	44 e0       	ldi	r20, 0x04	; 4
    6cd2:	b8 01       	movw	r22, r16
    6cd4:	8f e3       	ldi	r24, 0x3F	; 63
    6cd6:	0e 94 67 12 	call	0x24ce	; 0x24ce <irSend>
}
    6cda:	0f 90       	pop	r0
    6cdc:	0f 90       	pop	r0
    6cde:	0f 90       	pop	r0
    6ce0:	0f 90       	pop	r0
    6ce2:	0f 90       	pop	r0
    6ce4:	0f 90       	pop	r0
    6ce6:	25 96       	adiw	r28, 0x05	; 5
    6ce8:	cd bf       	out	0x3d, r28	; 61
    6cea:	de bf       	out	0x3e, r29	; 62
    6cec:	df 91       	pop	r29
    6cee:	cf 91       	pop	r28
    6cf0:	1f 91       	pop	r17
    6cf2:	0f 91       	pop	r16
    6cf4:	08 95       	ret

00006cf6 <handleSerialCommand>:
/*
 * This is where incoming commands are interpreted. The actual command is the string inside the PSTR function.
 * For example, move_steps, walk, or get_rgb. If the command matches the string, the function on the same line
 * will get called. See individual functions for further documentation on that command's syntax.
 */
void handleSerialCommand(char* command, uint16_t command_length){
    6cf6:	2f 92       	push	r2
    6cf8:	3f 92       	push	r3
    6cfa:	4f 92       	push	r4
    6cfc:	5f 92       	push	r5
    6cfe:	6f 92       	push	r6
    6d00:	7f 92       	push	r7
    6d02:	8f 92       	push	r8
    6d04:	9f 92       	push	r9
    6d06:	af 92       	push	r10
    6d08:	bf 92       	push	r11
    6d0a:	cf 92       	push	r12
    6d0c:	df 92       	push	r13
    6d0e:	ef 92       	push	r14
    6d10:	ff 92       	push	r15
    6d12:	0f 93       	push	r16
    6d14:	1f 93       	push	r17
    6d16:	cf 93       	push	r28
    6d18:	df 93       	push	r29
    6d1a:	cd b7       	in	r28, 0x3d	; 61
    6d1c:	de b7       	in	r29, 0x3e	; 62
    6d1e:	c7 5a       	subi	r28, 0xA7	; 167
    6d20:	d1 09       	sbc	r29, r1
    6d22:	cd bf       	out	0x3d, r28	; 61
    6d24:	de bf       	out	0x3e, r29	; 62
    6d26:	dc 01       	movw	r26, r24
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
    6d28:	9c 91       	ld	r25, X
    6d2a:	91 11       	cpse	r25, r1
    6d2c:	17 c0       	rjmp	.+46     	; 0x6d5c <handleSerialCommand+0x66>
		}else if(userHandleCommand){ //First, make sure the function is defined
			if(!userHandleCommand(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
		}
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}
    6d2e:	c9 55       	subi	r28, 0x59	; 89
    6d30:	df 4f       	sbci	r29, 0xFF	; 255
    6d32:	cd bf       	out	0x3d, r28	; 61
    6d34:	de bf       	out	0x3e, r29	; 62
    6d36:	df 91       	pop	r29
    6d38:	cf 91       	pop	r28
    6d3a:	1f 91       	pop	r17
    6d3c:	0f 91       	pop	r16
    6d3e:	ff 90       	pop	r15
    6d40:	ef 90       	pop	r14
    6d42:	df 90       	pop	r13
    6d44:	cf 90       	pop	r12
    6d46:	bf 90       	pop	r11
    6d48:	af 90       	pop	r10
    6d4a:	9f 90       	pop	r9
    6d4c:	8f 90       	pop	r8
    6d4e:	7f 90       	pop	r7
    6d50:	6f 90       	pop	r6
    6d52:	5f 90       	pop	r5
    6d54:	4f 90       	pop	r4
    6d56:	3f 90       	pop	r3
    6d58:	2f 90       	pop	r2
    6d5a:	08 95       	ret

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    6d5c:	61 15       	cp	r22, r1
    6d5e:	71 05       	cpc	r23, r1
    6d60:	09 f4       	brne	.+2      	; 0x6d64 <handleSerialCommand+0x6e>
    6d62:	f9 c1       	rjmp	.+1010   	; 0x7156 <handleSerialCommand+0x460>
    6d64:	fd 01       	movw	r30, r26
    6d66:	31 96       	adiw	r30, 0x01	; 1
    6d68:	6a 0f       	add	r22, r26
    6d6a:	7b 1f       	adc	r23, r27
    6d6c:	20 e0       	ldi	r18, 0x00	; 0
    6d6e:	30 e0       	ldi	r19, 0x00	; 0
    6d70:	81 e0       	ldi	r24, 0x01	; 1
    6d72:	8e 01       	movw	r16, r28
    6d74:	0f 5b       	subi	r16, 0xBF	; 191
    6d76:	1f 4f       	sbci	r17, 0xFF	; 255
    6d78:	12 c0       	rjmp	.+36     	; 0x6d9e <handleSerialCommand+0xa8>
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
			writing_word_boole = 0;
		}else{
			if(writing_word_boole==1){
    6d7a:	81 30       	cpi	r24, 0x01	; 1
    6d7c:	09 f4       	brne	.+2      	; 0x6d80 <handleSerialCommand+0x8a>
    6d7e:	ca c0       	rjmp	.+404    	; 0x6f14 <handleSerialCommand+0x21e>
				command_word[write_index] = command[i];
			}else{
				command_args[write_index] = command[i];
    6d80:	a1 e0       	ldi	r26, 0x01	; 1
    6d82:	b0 e0       	ldi	r27, 0x00	; 0
    6d84:	ac 0f       	add	r26, r28
    6d86:	bd 1f       	adc	r27, r29
    6d88:	a2 0f       	add	r26, r18
    6d8a:	b3 1f       	adc	r27, r19
    6d8c:	9c 93       	st	X, r25
			}
			write_index++;
    6d8e:	2f 5f       	subi	r18, 0xFF	; 255
    6d90:	3f 4f       	sbci	r19, 0xFF	; 255

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    6d92:	6e 17       	cp	r22, r30
    6d94:	7f 07       	cpc	r23, r31
    6d96:	89 f0       	breq	.+34     	; 0x6dba <handleSerialCommand+0xc4>
		if(command[i]=='\0'){
    6d98:	91 91       	ld	r25, Z+
    6d9a:	99 23       	and	r25, r25
    6d9c:	71 f0       	breq	.+28     	; 0x6dba <handleSerialCommand+0xc4>
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
    6d9e:	90 32       	cpi	r25, 0x20	; 32
    6da0:	61 f7       	brne	.-40     	; 0x6d7a <handleSerialCommand+0x84>
    6da2:	81 30       	cpi	r24, 0x01	; 1
    6da4:	69 f7       	brne	.-38     	; 0x6d80 <handleSerialCommand+0x8a>
			command_word[write_index]='\0';
    6da6:	d8 01       	movw	r26, r16
    6da8:	a2 0f       	add	r26, r18
    6daa:	b3 1f       	adc	r27, r19
    6dac:	1c 92       	st	X, r1
			write_index = 0;
			writing_word_boole = 0;
    6dae:	80 e0       	ldi	r24, 0x00	; 0
	for(uint16_t i=0 ; i<command_length ; i++){
		if(command[i]=='\0'){
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
    6db0:	20 e0       	ldi	r18, 0x00	; 0
    6db2:	30 e0       	ldi	r19, 0x00	; 0

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    6db4:	6e 17       	cp	r22, r30
    6db6:	7f 07       	cpc	r23, r31
    6db8:	79 f7       	brne	.-34     	; 0x6d98 <handleSerialCommand+0xa2>
				command_args[write_index] = command[i];
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
    6dba:	81 30       	cpi	r24, 0x01	; 1
    6dbc:	09 f4       	brne	.+2      	; 0x6dc0 <handleSerialCommand+0xca>
    6dbe:	72 c1       	rjmp	.+740    	; 0x70a4 <handleSerialCommand+0x3ae>
		command_word[write_index] = '\0';
		command_args[0] = '\0';
	}else{
		command_args[write_index] = '\0';
    6dc0:	fe 01       	movw	r30, r28
    6dc2:	e2 0f       	add	r30, r18
    6dc4:	f3 1f       	adc	r31, r19
    6dc6:	11 82       	std	Z+1, r1	; 0x01
void handleSerialCommand(char* command, uint16_t command_length){
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
		char command_word[SRL_BUFFER_SIZE];
		char command_args[SRL_BUFFER_SIZE];
		get_command_word_and_args(command,command_length,command_word,command_args);
			 if(strcmp_P(command_word,PSTR("move_steps"))==0)			handle_move_steps(command_args);
    6dc8:	68 ea       	ldi	r22, 0xA8	; 168
    6dca:	7f e0       	ldi	r23, 0x0F	; 15
    6dcc:	c8 01       	movw	r24, r16
    6dce:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6dd2:	89 2b       	or	r24, r25
    6dd4:	09 f4       	brne	.+2      	; 0x6dd8 <handleSerialCommand+0xe2>
    6dd6:	c3 c0       	rjmp	.+390    	; 0x6f5e <handleSerialCommand+0x268>
		else if(strcmp_P(command_word,PSTR("walk"))==0)					handle_walk(command_args);
    6dd8:	63 ea       	ldi	r22, 0xA3	; 163
    6dda:	7f e0       	ldi	r23, 0x0F	; 15
    6ddc:	c8 01       	movw	r24, r16
    6dde:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6de2:	89 2b       	or	r24, r25
    6de4:	09 f4       	brne	.+2      	; 0x6de8 <handleSerialCommand+0xf2>
    6de6:	9b c0       	rjmp	.+310    	; 0x6f1e <handleSerialCommand+0x228>
		else if(strcmp_P(command_word,PSTR("get_rgb"))==0)				handle_get_rgb();
    6de8:	6b e9       	ldi	r22, 0x9B	; 155
    6dea:	7f e0       	ldi	r23, 0x0F	; 15
    6dec:	c8 01       	movw	r24, r16
    6dee:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6df2:	89 2b       	or	r24, r25
    6df4:	09 f4       	brne	.+2      	; 0x6df8 <handleSerialCommand+0x102>
    6df6:	e8 c0       	rjmp	.+464    	; 0x6fc8 <handleSerialCommand+0x2d2>
		else if(strcmp_P(command_word,PSTR("set_ir"))==0)				handle_set_ir(command_args);
    6df8:	64 e9       	ldi	r22, 0x94	; 148
    6dfa:	7f e0       	ldi	r23, 0x0F	; 15
    6dfc:	c8 01       	movw	r24, r16
    6dfe:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6e02:	89 2b       	or	r24, r25
    6e04:	09 f4       	brne	.+2      	; 0x6e08 <handleSerialCommand+0x112>
    6e06:	54 c1       	rjmp	.+680    	; 0x70b0 <handleSerialCommand+0x3ba>
		else if(strcmp_P(command_word,PSTR("coll"))==0)					handle_check_collisions();
    6e08:	6f e8       	ldi	r22, 0x8F	; 143
    6e0a:	7f e0       	ldi	r23, 0x0F	; 15
    6e0c:	c8 01       	movw	r24, r16
    6e0e:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6e12:	89 2b       	or	r24, r25
    6e14:	09 f4       	brne	.+2      	; 0x6e18 <handleSerialCommand+0x122>
    6e16:	67 c1       	rjmp	.+718    	; 0x70e6 <handleSerialCommand+0x3f0>
		else if(strcmp_P(command_word,PSTR("stop_walk"))==0)			handle_stop_walk();
    6e18:	65 e8       	ldi	r22, 0x85	; 133
    6e1a:	7f e0       	ldi	r23, 0x0F	; 15
    6e1c:	c8 01       	movw	r24, r16
    6e1e:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6e22:	89 2b       	or	r24, r25
    6e24:	09 f4       	brne	.+2      	; 0x6e28 <handleSerialCommand+0x132>
    6e26:	94 c1       	rjmp	.+808    	; 0x7150 <handleSerialCommand+0x45a>
		else if(strcmp_P(command_word,PSTR("set_motors"))==0)			handle_set_motors(command_args);
    6e28:	6a e7       	ldi	r22, 0x7A	; 122
    6e2a:	7f e0       	ldi	r23, 0x0F	; 15
    6e2c:	c8 01       	movw	r24, r16
    6e2e:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6e32:	89 2b       	or	r24, r25
    6e34:	09 f4       	brne	.+2      	; 0x6e38 <handleSerialCommand+0x142>
    6e36:	00 c1       	rjmp	.+512    	; 0x7038 <handleSerialCommand+0x342>
		else if(strcmp_P(command_word,PSTR("adj_motors"))==0)			handle_adjust_motors(command_args);
    6e38:	6f e6       	ldi	r22, 0x6F	; 111
    6e3a:	7f e0       	ldi	r23, 0x0F	; 15
    6e3c:	c8 01       	movw	r24, r16
    6e3e:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6e42:	89 2b       	or	r24, r25
    6e44:	09 f4       	brne	.+2      	; 0x6e48 <handleSerialCommand+0x152>
    6e46:	8c c1       	rjmp	.+792    	; 0x7160 <handleSerialCommand+0x46a>
		else if(strcmp_P(command_word,PSTR("set_dist_per_step"))==0)	handle_set_mm_per_kilostep(command_args);
    6e48:	6d e5       	ldi	r22, 0x5D	; 93
    6e4a:	7f e0       	ldi	r23, 0x0F	; 15
    6e4c:	c8 01       	movw	r24, r16
    6e4e:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6e52:	89 2b       	or	r24, r25
    6e54:	09 f4       	brne	.+2      	; 0x6e58 <handleSerialCommand+0x162>
    6e56:	ba c1       	rjmp	.+884    	; 0x71cc <handleSerialCommand+0x4d6>
		else if(strcmp_P(command_word,PSTR("rnb_b"))==0)				handle_rnb_broadcast();
    6e58:	67 e5       	ldi	r22, 0x57	; 87
    6e5a:	7f e0       	ldi	r23, 0x0F	; 15
    6e5c:	c8 01       	movw	r24, r16
    6e5e:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6e62:	89 2b       	or	r24, r25
    6e64:	09 f4       	brne	.+2      	; 0x6e68 <handleSerialCommand+0x172>
    6e66:	25 c2       	rjmp	.+1098   	; 0x72b2 <handleSerialCommand+0x5bc>
		else if(strcmp_P(command_word,PSTR("set_led"))==0)				handle_set_led(command_args);
    6e68:	6f e4       	ldi	r22, 0x4F	; 79
    6e6a:	7f e0       	ldi	r23, 0x0F	; 15
    6e6c:	c8 01       	movw	r24, r16
    6e6e:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6e72:	89 2b       	or	r24, r25
    6e74:	09 f4       	brne	.+2      	; 0x6e78 <handleSerialCommand+0x182>
    6e76:	a4 c2       	rjmp	.+1352   	; 0x73c0 <handleSerialCommand+0x6ca>
		else if(strcmp_P(command_word,PSTR("get_id"))==0)				handle_get_id();
    6e78:	68 e4       	ldi	r22, 0x48	; 72
    6e7a:	7f e0       	ldi	r23, 0x0F	; 15
    6e7c:	c8 01       	movw	r24, r16
    6e7e:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6e82:	89 2b       	or	r24, r25
    6e84:	09 f4       	brne	.+2      	; 0x6e88 <handleSerialCommand+0x192>
    6e86:	ea c2       	rjmp	.+1492   	; 0x745c <handleSerialCommand+0x766>
		else if(strcmp_P(command_word,PSTR("broadcast_id"))==0)			handle_broadcast_id();
    6e88:	6b e3       	ldi	r22, 0x3B	; 59
    6e8a:	7f e0       	ldi	r23, 0x0F	; 15
    6e8c:	c8 01       	movw	r24, r16
    6e8e:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6e92:	89 2b       	or	r24, r25
    6e94:	09 f4       	brne	.+2      	; 0x6e98 <handleSerialCommand+0x1a2>
    6e96:	f3 c2       	rjmp	.+1510   	; 0x747e <handleSerialCommand+0x788>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
    6e98:	67 e3       	ldi	r22, 0x37	; 55
    6e9a:	7f e0       	ldi	r23, 0x0F	; 15
    6e9c:	c8 01       	movw	r24, r16
    6e9e:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6ea2:	89 2b       	or	r24, r25
    6ea4:	09 f4       	brne	.+2      	; 0x6ea8 <handleSerialCommand+0x1b2>
    6ea6:	f6 c2       	rjmp	.+1516   	; 0x7494 <handleSerialCommand+0x79e>
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
    6ea8:	6f e2       	ldi	r22, 0x2F	; 47
    6eaa:	7f e0       	ldi	r23, 0x0F	; 15
    6eac:	c8 01       	movw	r24, r16
    6eae:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6eb2:	89 2b       	or	r24, r25
    6eb4:	09 f4       	brne	.+2      	; 0x6eb8 <handleSerialCommand+0x1c2>
    6eb6:	42 c3       	rjmp	.+1668   	; 0x753c <handleSerialCommand+0x846>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
    6eb8:	6b e2       	ldi	r22, 0x2B	; 43
    6eba:	7f e0       	ldi	r23, 0x0F	; 15
    6ebc:	c8 01       	movw	r24, r16
    6ebe:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6ec2:	89 2b       	or	r24, r25
    6ec4:	09 f4       	brne	.+2      	; 0x6ec8 <handleSerialCommand+0x1d2>
    6ec6:	4e c4       	rjmp	.+2204   	; 0x7764 <handleSerialCommand+0xa6e>
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
    6ec8:	63 e2       	ldi	r22, 0x23	; 35
    6eca:	7f e0       	ldi	r23, 0x0F	; 15
    6ecc:	c8 01       	movw	r24, r16
    6ece:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6ed2:	89 2b       	or	r24, r25
    6ed4:	09 f4       	brne	.+2      	; 0x6ed8 <handleSerialCommand+0x1e2>
    6ed6:	31 c4       	rjmp	.+2146   	; 0x773a <handleSerialCommand+0xa44>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
    6ed8:	6f e1       	ldi	r22, 0x1F	; 31
    6eda:	7f e0       	ldi	r23, 0x0F	; 15
    6edc:	c8 01       	movw	r24, r16
    6ede:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6ee2:	89 2b       	or	r24, r25
    6ee4:	09 f4       	brne	.+2      	; 0x6ee8 <handleSerialCommand+0x1f2>
    6ee6:	f5 c3       	rjmp	.+2026   	; 0x76d2 <handleSerialCommand+0x9dc>
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
    6ee8:	69 e1       	ldi	r22, 0x19	; 25
    6eea:	7f e0       	ldi	r23, 0x0F	; 15
    6eec:	c8 01       	movw	r24, r16
    6eee:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6ef2:	89 2b       	or	r24, r25
    6ef4:	09 f4       	brne	.+2      	; 0x6ef8 <handleSerialCommand+0x202>
    6ef6:	ea c3       	rjmp	.+2004   	; 0x76cc <handleSerialCommand+0x9d6>
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
    6ef8:	63 e1       	ldi	r22, 0x13	; 19
    6efa:	7f e0       	ldi	r23, 0x0F	; 15
    6efc:	c8 01       	movw	r24, r16
    6efe:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    6f02:	89 2b       	or	r24, r25
    6f04:	09 f0       	breq	.+2      	; 0x6f08 <handleSerialCommand+0x212>
    6f06:	b9 c3       	rjmp	.+1906   	; 0x767a <handleSerialCommand+0x984>

/**
 * \brief Resets the Droplet's program counter and clears all low-level system buffers.
 */
inline void dropletReboot(void){
	CPU_CCP=CCP_IOREG_gc;
    6f08:	88 ed       	ldi	r24, 0xD8	; 216
    6f0a:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
    6f0c:	81 e0       	ldi	r24, 0x01	; 1
    6f0e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    6f12:	0d cf       	rjmp	.-486    	; 0x6d2e <handleSerialCommand+0x38>
			command_word[write_index]='\0';
			write_index = 0;
			writing_word_boole = 0;
		}else{
			if(writing_word_boole==1){
				command_word[write_index] = command[i];
    6f14:	d8 01       	movw	r26, r16
    6f16:	a2 0f       	add	r26, r18
    6f18:	b3 1f       	adc	r27, r19
    6f1a:	9c 93       	st	X, r25
    6f1c:	38 cf       	rjmp	.-400    	; 0x6d8e <handleSerialCommand+0x98>
 * Format:
 *     walk <dir> <distance>
 * Calls the walk function with arguments as described above.
 */
static void handle_walk(char* command_args){	
	const char delim[2] = " ";
    6f1e:	80 e2       	ldi	r24, 0x20	; 32
    6f20:	90 e0       	ldi	r25, 0x00	; 0
    6f22:	cf 57       	subi	r28, 0x7F	; 127
    6f24:	df 4f       	sbci	r29, 0xFF	; 255
    6f26:	88 83       	st	Y, r24
    6f28:	99 83       	std	Y+1, r25	; 0x01
    6f2a:	c1 58       	subi	r28, 0x81	; 129
    6f2c:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    6f2e:	be 01       	movw	r22, r28
    6f30:	6f 57       	subi	r22, 0x7F	; 127
    6f32:	7f 4f       	sbci	r23, 0xFF	; 255
    6f34:	ce 01       	movw	r24, r28
    6f36:	01 96       	adiw	r24, 0x01	; 1
    6f38:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	uint8_t direction = token[0]-'0';
    6f3c:	fc 01       	movw	r30, r24
    6f3e:	10 81       	ld	r17, Z
    6f40:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    6f42:	be 01       	movw	r22, r28
    6f44:	6f 57       	subi	r22, 0x7F	; 127
    6f46:	7f 4f       	sbci	r23, 0xFF	; 255
    6f48:	80 e0       	ldi	r24, 0x00	; 0
    6f4a:	90 e0       	ldi	r25, 0x00	; 0
    6f4c:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	uint16_t distance_mm = (uint16_t)atoi(token);
    6f50:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
	
	walk(direction, distance_mm);
    6f54:	bc 01       	movw	r22, r24
    6f56:	81 2f       	mov	r24, r17
    6f58:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <walk>
    6f5c:	e8 ce       	rjmp	.-560    	; 0x6d2e <handleSerialCommand+0x38>
 * Format:
 *     move_steps <dir> <num_steps>
 * Calls the move_steps function with arguments as described above.
 */
static void handle_move_steps(char* command_args){
	const char delim[2] = " ";
    6f5e:	80 e2       	ldi	r24, 0x20	; 32
    6f60:	90 e0       	ldi	r25, 0x00	; 0
    6f62:	cf 57       	subi	r28, 0x7F	; 127
    6f64:	df 4f       	sbci	r29, 0xFF	; 255
    6f66:	88 83       	st	Y, r24
    6f68:	99 83       	std	Y+1, r25	; 0x01
    6f6a:	c1 58       	subi	r28, 0x81	; 129
    6f6c:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    6f6e:	be 01       	movw	r22, r28
    6f70:	6f 57       	subi	r22, 0x7F	; 127
    6f72:	7f 4f       	sbci	r23, 0xFF	; 255
    6f74:	ce 01       	movw	r24, r28
    6f76:	01 96       	adiw	r24, 0x01	; 1
    6f78:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	uint8_t direction = token[0]-'0';
    6f7c:	fc 01       	movw	r30, r24
    6f7e:	f0 80       	ld	r15, Z

	token = strtok(NULL,delim);
    6f80:	be 01       	movw	r22, r28
    6f82:	6f 57       	subi	r22, 0x7F	; 127
    6f84:	7f 4f       	sbci	r23, 0xFF	; 255
    6f86:	80 e0       	ldi	r24, 0x00	; 0
    6f88:	90 e0       	ldi	r25, 0x00	; 0
    6f8a:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	uint16_t num_steps = (uint16_t)atoi(token);
    6f8e:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    6f92:	8c 01       	movw	r16, r24
	if (num_steps > 0){	
    6f94:	00 97       	sbiw	r24, 0x00	; 0
    6f96:	09 f4       	brne	.+2      	; 0x6f9a <handleSerialCommand+0x2a4>
    6f98:	ca ce       	rjmp	.-620    	; 0x6d2e <handleSerialCommand+0x38>
 */
static void handle_move_steps(char* command_args){
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	uint8_t direction = token[0]-'0';
    6f9a:	f0 ed       	ldi	r31, 0xD0	; 208
    6f9c:	ff 0e       	add	r15, r31

	token = strtok(NULL,delim);
	uint16_t num_steps = (uint16_t)atoi(token);
	if (num_steps > 0){	
		printf_P(PSTR("walk direction %hu, num_steps %u\r\n"), direction, num_steps);	
    6f9e:	1f 93       	push	r17
    6fa0:	8f 93       	push	r24
    6fa2:	1f 92       	push	r1
    6fa4:	ff 92       	push	r15
    6fa6:	86 ec       	ldi	r24, 0xC6	; 198
    6fa8:	9e e0       	ldi	r25, 0x0E	; 14
    6faa:	9f 93       	push	r25
    6fac:	8f 93       	push	r24
    6fae:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
		moveSteps(direction, num_steps);
    6fb2:	b8 01       	movw	r22, r16
    6fb4:	8f 2d       	mov	r24, r15
    6fb6:	0e 94 65 1d 	call	0x3aca	; 0x3aca <moveSteps>
    6fba:	0f 90       	pop	r0
    6fbc:	0f 90       	pop	r0
    6fbe:	0f 90       	pop	r0
    6fc0:	0f 90       	pop	r0
    6fc2:	0f 90       	pop	r0
    6fc4:	0f 90       	pop	r0
    6fc6:	b3 ce       	rjmp	.-666    	; 0x6d2e <handleSerialCommand+0x38>
 * No arguments.
 * Prints the sensed colors, as reported by get_rgb.
 */
static void handle_get_rgb(void){
	int16_t r, g, b;
	getRGB(&r, &g, &b);
    6fc8:	ae 01       	movw	r20, r28
    6fca:	4f 57       	subi	r20, 0x7F	; 127
    6fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    6fce:	be 01       	movw	r22, r28
    6fd0:	6f 55       	subi	r22, 0x5F	; 95
    6fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    6fd4:	ce 01       	movw	r24, r28
    6fd6:	8a 55       	subi	r24, 0x5A	; 90
    6fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    6fda:	0e 94 10 30 	call	0x6020	; 0x6020 <getRGB>
	printf_P(PSTR("r: %hu, g: %hu, b: %hu\r\n"), r, g, b);
    6fde:	ce 57       	subi	r28, 0x7E	; 126
    6fe0:	df 4f       	sbci	r29, 0xFF	; 255
    6fe2:	88 81       	ld	r24, Y
    6fe4:	c2 58       	subi	r28, 0x82	; 130
    6fe6:	d0 40       	sbci	r29, 0x00	; 0
    6fe8:	8f 93       	push	r24
    6fea:	cf 57       	subi	r28, 0x7F	; 127
    6fec:	df 4f       	sbci	r29, 0xFF	; 255
    6fee:	88 81       	ld	r24, Y
    6ff0:	c1 58       	subi	r28, 0x81	; 129
    6ff2:	d0 40       	sbci	r29, 0x00	; 0
    6ff4:	8f 93       	push	r24
    6ff6:	ce 55       	subi	r28, 0x5E	; 94
    6ff8:	df 4f       	sbci	r29, 0xFF	; 255
    6ffa:	88 81       	ld	r24, Y
    6ffc:	c2 5a       	subi	r28, 0xA2	; 162
    6ffe:	d0 40       	sbci	r29, 0x00	; 0
    7000:	8f 93       	push	r24
    7002:	cf 55       	subi	r28, 0x5F	; 95
    7004:	df 4f       	sbci	r29, 0xFF	; 255
    7006:	88 81       	ld	r24, Y
    7008:	c1 5a       	subi	r28, 0xA1	; 161
    700a:	d0 40       	sbci	r29, 0x00	; 0
    700c:	8f 93       	push	r24
    700e:	c9 55       	subi	r28, 0x59	; 89
    7010:	df 4f       	sbci	r29, 0xFF	; 255
    7012:	88 81       	ld	r24, Y
    7014:	c7 5a       	subi	r28, 0xA7	; 167
    7016:	d0 40       	sbci	r29, 0x00	; 0
    7018:	8f 93       	push	r24
    701a:	ca 55       	subi	r28, 0x5A	; 90
    701c:	df 4f       	sbci	r29, 0xFF	; 255
    701e:	88 81       	ld	r24, Y
    7020:	c6 5a       	subi	r28, 0xA6	; 166
    7022:	d0 40       	sbci	r29, 0x00	; 0
    7024:	8f 93       	push	r24
    7026:	8d ea       	ldi	r24, 0xAD	; 173
    7028:	9e e0       	ldi	r25, 0x0E	; 14
    702a:	9f 93       	push	r25
    702c:	8f 93       	push	r24
    702e:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    7032:	cd bf       	out	0x3d, r28	; 61
    7034:	de bf       	out	0x3e, r29	; 62
    7036:	7b ce       	rjmp	.-778    	; 0x6d2e <handleSerialCommand+0x38>
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    7038:	60 90 7a 0a 	lds	r6, 0x0A7A	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    703c:	70 90 7b 0a 	lds	r7, 0x0A7B	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    7040:	a0 90 78 0a 	lds	r10, 0x0A78	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    7044:	b0 90 79 0a 	lds	r11, 0x0A79	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    7048:	80 90 78 09 	lds	r8, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    704c:	90 90 79 09 	lds	r9, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
 * how long it spins for.
 * Note that Audio Droplets don't have a motor 0, so <mot0val> should always be 0 for them.
 */
static void handle_set_motors(char* command_args){	
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
    7050:	4f ef       	ldi	r20, 0xFF	; 255
    7052:	60 e0       	ldi	r22, 0x00	; 0
    7054:	80 e0       	ldi	r24, 0x00	; 0
    7056:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
	const char delim[2] = " ";
    705a:	8e 01       	movw	r16, r28
    705c:	0f 57       	subi	r16, 0x7F	; 127
    705e:	1f 4f       	sbci	r17, 0xFF	; 255
    7060:	80 e2       	ldi	r24, 0x20	; 32
    7062:	90 e0       	ldi	r25, 0x00	; 0
    7064:	f8 01       	movw	r30, r16
    7066:	80 83       	st	Z, r24
    7068:	91 83       	std	Z+1, r25	; 0x01
	
	char* token = strtok(command_args,delim);
    706a:	b8 01       	movw	r22, r16
    706c:	ce 01       	movw	r24, r28
    706e:	01 96       	adiw	r24, 0x01	; 1
    7070:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    7074:	00 97       	sbiw	r24, 0x00	; 0
    7076:	09 f4       	brne	.+2      	; 0x707a <handleSerialCommand+0x384>
    7078:	ca c2       	rjmp	.+1428   	; 0x760e <handleSerialCommand+0x918>
	uint8_t direction = atoi(token);
    707a:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    707e:	7c 01       	movw	r14, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}
    7080:	f7 e0       	ldi	r31, 0x07	; 7
    7082:	f8 17       	cp	r31, r24
    7084:	08 f0       	brcs	.+2      	; 0x7088 <handleSerialCommand+0x392>
    7086:	c2 c0       	rjmp	.+388    	; 0x720c <handleSerialCommand+0x516>
    7088:	ff 24       	eor	r15, r15
    708a:	ff 92       	push	r15
    708c:	ef 92       	push	r14
    708e:	8d e6       	ldi	r24, 0x6D	; 109
    7090:	9e e0       	ldi	r25, 0x0E	; 14
    7092:	9f 93       	push	r25
    7094:	8f 93       	push	r24
    7096:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    709a:	0f 90       	pop	r0
    709c:	0f 90       	pop	r0
    709e:	0f 90       	pop	r0
    70a0:	0f 90       	pop	r0
    70a2:	45 ce       	rjmp	.-886    	; 0x6d2e <handleSerialCommand+0x38>
    70a4:	f8 01       	movw	r30, r16
    70a6:	e2 0f       	add	r30, r18
    70a8:	f3 1f       	adc	r31, r19
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
		command_word[write_index] = '\0';
    70aa:	10 82       	st	Z, r1
		command_args[0] = '\0';
    70ac:	19 82       	std	Y+1, r1	; 0x01
    70ae:	8c ce       	rjmp	.-744    	; 0x6dc8 <handleSerialCommand+0xd2>
 * Format:
 *     set_ir <power>
 * Calls the set_all_ir_powers function with arguments as described above.
 */
static void handle_set_ir(char* command_args){
	const char delim[2] = " ";
    70b0:	80 e2       	ldi	r24, 0x20	; 32
    70b2:	90 e0       	ldi	r25, 0x00	; 0
    70b4:	cf 57       	subi	r28, 0x7F	; 127
    70b6:	df 4f       	sbci	r29, 0xFF	; 255
    70b8:	88 83       	st	Y, r24
    70ba:	99 83       	std	Y+1, r25	; 0x01
    70bc:	c1 58       	subi	r28, 0x81	; 129
    70be:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    70c0:	be 01       	movw	r22, r28
    70c2:	6f 57       	subi	r22, 0x7F	; 127
    70c4:	7f 4f       	sbci	r23, 0xFF	; 255
    70c6:	ce 01       	movw	r24, r28
    70c8:	01 96       	adiw	r24, 0x01	; 1
    70ca:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	uint16_t ir_val = (uint16_t)atoi(token);
    70ce:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>

	scheduleTask(10, (arg_func_t)setAllirPowers, (void*)ir_val);
    70d2:	9c 01       	movw	r18, r24
    70d4:	47 e6       	ldi	r20, 0x67	; 103
    70d6:	5a e1       	ldi	r21, 0x1A	; 26
    70d8:	6a e0       	ldi	r22, 0x0A	; 10
    70da:	70 e0       	ldi	r23, 0x00	; 0
    70dc:	80 e0       	ldi	r24, 0x00	; 0
    70de:	90 e0       	ldi	r25, 0x00	; 0
    70e0:	0e 94 3c 33 	call	0x6678	; 0x6678 <scheduleTask>
    70e4:	24 ce       	rjmp	.-952    	; 0x6d2e <handleSerialCommand+0x38>
/*
 * No arguments.
 * Prints each direction in which a collision was detected, or None.
 */
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
    70e6:	0e 94 9e 1c 	call	0x393c	; 0x393c <checkCollisions>
    70ea:	e8 2e       	mov	r14, r24
    70ec:	f1 2c       	mov	r15, r1
    70ee:	00 e0       	ldi	r16, 0x00	; 0
    70f0:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t found=0;
    70f2:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
			printf("%hu",i);
    70f4:	a5 e1       	ldi	r26, 0x15	; 21
    70f6:	ca 2e       	mov	r12, r26
    70f8:	a2 e2       	ldi	r26, 0x22	; 34
    70fa:	da 2e       	mov	r13, r26
    70fc:	05 c0       	rjmp	.+10     	; 0x7108 <handleSerialCommand+0x412>
    70fe:	0f 5f       	subi	r16, 0xFF	; 255
    7100:	1f 4f       	sbci	r17, 0xFF	; 255
 * Prints each direction in which a collision was detected, or None.
 */
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
    7102:	06 30       	cpi	r16, 0x06	; 6
    7104:	11 05       	cpc	r17, r1
    7106:	a9 f0       	breq	.+42     	; 0x7132 <handleSerialCommand+0x43c>
		if(dirs&(1<<i)){
    7108:	c7 01       	movw	r24, r14
    710a:	00 2e       	mov	r0, r16
    710c:	02 c0       	rjmp	.+4      	; 0x7112 <handleSerialCommand+0x41c>
    710e:	95 95       	asr	r25
    7110:	87 95       	ror	r24
    7112:	0a 94       	dec	r0
    7114:	e2 f7       	brpl	.-8      	; 0x710e <handleSerialCommand+0x418>
    7116:	80 ff       	sbrs	r24, 0
    7118:	f2 cf       	rjmp	.-28     	; 0x70fe <handleSerialCommand+0x408>
			found=1;
			printf("%hu",i);
    711a:	1f 93       	push	r17
    711c:	0f 93       	push	r16
    711e:	df 92       	push	r13
    7120:	cf 92       	push	r12
    7122:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <printf>
    7126:	0f 90       	pop	r0
    7128:	0f 90       	pop	r0
    712a:	0f 90       	pop	r0
    712c:	0f 90       	pop	r0
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
    712e:	21 e0       	ldi	r18, 0x01	; 1
    7130:	e6 cf       	rjmp	.-52     	; 0x70fe <handleSerialCommand+0x408>
			printf("%hu",i);
		}
	}
	if(!found) printf("None");
    7132:	21 11       	cpse	r18, r1
    7134:	08 c0       	rjmp	.+16     	; 0x7146 <handleSerialCommand+0x450>
    7136:	89 e1       	ldi	r24, 0x19	; 25
    7138:	92 e2       	ldi	r25, 0x22	; 34
    713a:	9f 93       	push	r25
    713c:	8f 93       	push	r24
    713e:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <printf>
    7142:	0f 90       	pop	r0
    7144:	0f 90       	pop	r0
	printf("\r\n");
    7146:	86 e9       	ldi	r24, 0x96	; 150
    7148:	91 e2       	ldi	r25, 0x21	; 33
    714a:	0e 94 cc 4d 	call	0x9b98	; 0x9b98 <puts>
    714e:	ef cd       	rjmp	.-1058   	; 0x6d2e <handleSerialCommand+0x38>
/*
 * No arguments.
 * Calls the stop_move function; the droplet stops moving.
 */
static void handle_stop_walk(void){
	stopMove();
    7150:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <stopMove>
    7154:	ec cd       	rjmp	.-1064   	; 0x6d2e <handleSerialCommand+0x38>

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    7156:	8e 01       	movw	r16, r28
    7158:	0f 5b       	subi	r16, 0xBF	; 191
    715a:	1f 4f       	sbci	r17, 0xFF	; 255
    715c:	f8 01       	movw	r30, r16
    715e:	a5 cf       	rjmp	.-182    	; 0x70aa <handleSerialCommand+0x3b4>
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    7160:	40 90 7a 0a 	lds	r4, 0x0A7A	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    7164:	50 90 7b 0a 	lds	r5, 0x0A7B	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    7168:	60 90 78 0a 	lds	r6, 0x0A78	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    716c:	70 90 79 0a 	lds	r7, 0x0A79	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    7170:	80 90 78 09 	lds	r8, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    7174:	90 90 79 09 	lds	r9, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
 * Same as set_motors, described above, except that the motor settings currently stored in volatile 
 * memory are changed by the indicated values.
 */
static void handle_adjust_motors(char* command_args){
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
    7178:	4f ef       	ldi	r20, 0xFF	; 255
    717a:	60 e0       	ldi	r22, 0x00	; 0
    717c:	80 e0       	ldi	r24, 0x00	; 0
    717e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
	const char delim[2] = " ";
    7182:	8e 01       	movw	r16, r28
    7184:	0f 57       	subi	r16, 0x7F	; 127
    7186:	1f 4f       	sbci	r17, 0xFF	; 255
    7188:	80 e2       	ldi	r24, 0x20	; 32
    718a:	90 e0       	ldi	r25, 0x00	; 0
    718c:	f8 01       	movw	r30, r16
    718e:	80 83       	st	Z, r24
    7190:	91 83       	std	Z+1, r25	; 0x01
	
	char* token = strtok(command_args,delim);
    7192:	b8 01       	movw	r22, r16
    7194:	ce 01       	movw	r24, r28
    7196:	01 96       	adiw	r24, 0x01	; 1
    7198:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    719c:	00 97       	sbiw	r24, 0x00	; 0
    719e:	09 f4       	brne	.+2      	; 0x71a2 <handleSerialCommand+0x4ac>
    71a0:	3f c2       	rjmp	.+1150   	; 0x7620 <handleSerialCommand+0x92a>
	uint8_t direction = atoi(token);
    71a2:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    71a6:	7c 01       	movw	r14, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}
    71a8:	f7 e0       	ldi	r31, 0x07	; 7
    71aa:	f8 17       	cp	r31, r24
    71ac:	08 f0       	brcs	.+2      	; 0x71b0 <handleSerialCommand+0x4ba>
    71ae:	8c c0       	rjmp	.+280    	; 0x72c8 <handleSerialCommand+0x5d2>
    71b0:	ff 24       	eor	r15, r15
    71b2:	ff 92       	push	r15
    71b4:	ef 92       	push	r14
    71b6:	80 e8       	ldi	r24, 0x80	; 128
    71b8:	9d e0       	ldi	r25, 0x0D	; 13
    71ba:	9f 93       	push	r25
    71bc:	8f 93       	push	r24
    71be:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    71c2:	0f 90       	pop	r0
    71c4:	0f 90       	pop	r0
    71c6:	0f 90       	pop	r0
    71c8:	0f 90       	pop	r0
    71ca:	b1 cd       	rjmp	.-1182   	; 0x6d2e <handleSerialCommand+0x38>
 * Adjusts the (volatile-memory-copy) walking distance settings for <dir>; the value should
 * be the distance in mm that the robot travels per thousand steps taken. For spinning
 * directions (6 & 7), the distance is in degrees.
 */
static void handle_set_mm_per_kilostep(char* command_args){
	const char delim[2] = " ";
    71cc:	80 e2       	ldi	r24, 0x20	; 32
    71ce:	90 e0       	ldi	r25, 0x00	; 0
    71d0:	cf 57       	subi	r28, 0x7F	; 127
    71d2:	df 4f       	sbci	r29, 0xFF	; 255
    71d4:	88 83       	st	Y, r24
    71d6:	99 83       	std	Y+1, r25	; 0x01
    71d8:	c1 58       	subi	r28, 0x81	; 129
    71da:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    71dc:	be 01       	movw	r22, r28
    71de:	6f 57       	subi	r22, 0x7F	; 127
    71e0:	7f 4f       	sbci	r23, 0xFF	; 255
    71e2:	ce 01       	movw	r24, r28
    71e4:	01 96       	adiw	r24, 0x01	; 1
    71e6:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	uint8_t direction = token[0]-'0';
    71ea:	fc 01       	movw	r30, r24
    71ec:	10 81       	ld	r17, Z
    71ee:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    71f0:	be 01       	movw	r22, r28
    71f2:	6f 57       	subi	r22, 0x7F	; 127
    71f4:	7f 4f       	sbci	r23, 0xFF	; 255
    71f6:	80 e0       	ldi	r24, 0x00	; 0
    71f8:	90 e0       	ldi	r25, 0x00	; 0
    71fa:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	uint16_t mm_per_kilostep = atoi(token);
    71fe:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>

	setMMperKilostep(direction, mm_per_kilostep);
    7202:	bc 01       	movw	r22, r24
    7204:	81 2f       	mov	r24, r17
    7206:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <setMMperKilostep>
    720a:	91 cd       	rjmp	.-1246   	; 0x6d2e <handleSerialCommand+0x38>
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
    720c:	b8 01       	movw	r22, r16
    720e:	80 e0       	ldi	r24, 0x00	; 0
    7210:	90 e0       	ldi	r25, 0x00	; 0
    7212:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    7216:	00 97       	sbiw	r24, 0x00	; 0
    7218:	09 f4       	brne	.+2      	; 0x721c <handleSerialCommand+0x526>
    721a:	e6 c1       	rjmp	.+972    	; 0x75e8 <handleSerialCommand+0x8f2>
    721c:	ff 24       	eor	r15, r15
	motorAdjusts[direction][0] = atoi(token);
    721e:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    7222:	97 01       	movw	r18, r14
    7224:	22 0f       	add	r18, r18
    7226:	33 1f       	adc	r19, r19
    7228:	2e 0d       	add	r18, r14
    722a:	3f 1d       	adc	r19, r15
    722c:	22 0f       	add	r18, r18
    722e:	33 1f       	adc	r19, r19
    7230:	a9 01       	movw	r20, r18
    7232:	42 5b       	subi	r20, 0xB2	; 178
    7234:	5a 4d       	sbci	r21, 0xDA	; 218
    7236:	6a 01       	movw	r12, r20
    7238:	fa 01       	movw	r30, r20
    723a:	80 83       	st	Z, r24
    723c:	91 83       	std	Z+1, r25	; 0x01
	
	token = strtok(NULL,delim);
    723e:	b8 01       	movw	r22, r16
    7240:	80 e0       	ldi	r24, 0x00	; 0
    7242:	90 e0       	ldi	r25, 0x00	; 0
    7244:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7248:	00 97       	sbiw	r24, 0x00	; 0
    724a:	09 f4       	brne	.+2      	; 0x724e <handleSerialCommand+0x558>
    724c:	c4 c1       	rjmp	.+904    	; 0x75d6 <handleSerialCommand+0x8e0>
	motorAdjusts[direction][1] = atoi(token);
    724e:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    7252:	26 01       	movw	r4, r12
    7254:	f2 e0       	ldi	r31, 0x02	; 2
    7256:	4f 0e       	add	r4, r31
    7258:	51 1c       	adc	r5, r1
    725a:	f6 01       	movw	r30, r12
    725c:	82 83       	std	Z+2, r24	; 0x02
    725e:	93 83       	std	Z+3, r25	; 0x03
	
	token = strtok(NULL,delim);
    7260:	b8 01       	movw	r22, r16
    7262:	80 e0       	ldi	r24, 0x00	; 0
    7264:	90 e0       	ldi	r25, 0x00	; 0
    7266:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    726a:	00 97       	sbiw	r24, 0x00	; 0
    726c:	09 f4       	brne	.+2      	; 0x7270 <handleSerialCommand+0x57a>
    726e:	e1 c1       	rjmp	.+962    	; 0x7632 <handleSerialCommand+0x93c>
	motorAdjusts[direction][2] = atoi(token);	
    7270:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    7274:	f6 01       	movw	r30, r12
    7276:	84 83       	std	Z+4, r24	; 0x04
    7278:	95 83       	std	Z+5, r25	; 0x05

	printf_P(PSTR("Got set_motors command. direction: %hu, vals: (%d, %d, %d)\r\n"), direction, motorAdjusts[direction][0], motorAdjusts[direction][1], motorAdjusts[direction][2]);
    727a:	9f 93       	push	r25
    727c:	8f 93       	push	r24
    727e:	f2 01       	movw	r30, r4
    7280:	81 81       	ldd	r24, Z+1	; 0x01
    7282:	8f 93       	push	r24
    7284:	f6 01       	movw	r30, r12
    7286:	82 81       	ldd	r24, Z+2	; 0x02
    7288:	8f 93       	push	r24
    728a:	81 81       	ldd	r24, Z+1	; 0x01
    728c:	8f 93       	push	r24
    728e:	80 81       	ld	r24, Z
    7290:	8f 93       	push	r24
    7292:	ff 92       	push	r15
    7294:	ef 92       	push	r14
    7296:	80 ec       	ldi	r24, 0xC0	; 192
    7298:	9d e0       	ldi	r25, 0x0D	; 13
    729a:	9f 93       	push	r25
    729c:	8f 93       	push	r24
    729e:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
	setRGB(r,g,b);
    72a2:	48 2d       	mov	r20, r8
    72a4:	6a 2d       	mov	r22, r10
    72a6:	86 2d       	mov	r24, r6
    72a8:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    72ac:	cd bf       	out	0x3d, r28	; 61
    72ae:	de bf       	out	0x3e, r29	; 62
    72b0:	3e cd       	rjmp	.-1412   	; 0x6d2e <handleSerialCommand+0x38>
/*
 * No arguments.
 * Calls broadcast_rnb_data.
 */
static void handle_rnb_broadcast(void){
	scheduleTask(5,broadcastRnbData,NULL);
    72b2:	20 e0       	ldi	r18, 0x00	; 0
    72b4:	30 e0       	ldi	r19, 0x00	; 0
    72b6:	48 e4       	ldi	r20, 0x48	; 72
    72b8:	5c e2       	ldi	r21, 0x2C	; 44
    72ba:	65 e0       	ldi	r22, 0x05	; 5
    72bc:	70 e0       	ldi	r23, 0x00	; 0
    72be:	80 e0       	ldi	r24, 0x00	; 0
    72c0:	90 e0       	ldi	r25, 0x00	; 0
    72c2:	0e 94 3c 33 	call	0x6678	; 0x6678 <scheduleTask>
    72c6:	33 cd       	rjmp	.-1434   	; 0x6d2e <handleSerialCommand+0x38>
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
    72c8:	b8 01       	movw	r22, r16
    72ca:	80 e0       	ldi	r24, 0x00	; 0
    72cc:	90 e0       	ldi	r25, 0x00	; 0
    72ce:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    72d2:	00 97       	sbiw	r24, 0x00	; 0
    72d4:	09 f4       	brne	.+2      	; 0x72d8 <handleSerialCommand+0x5e2>
    72d6:	bf c1       	rjmp	.+894    	; 0x7656 <handleSerialCommand+0x960>
    72d8:	ff 24       	eor	r15, r15
	if(motorAdjusts[direction][0]>=0)
    72da:	67 01       	movw	r12, r14
    72dc:	cc 0c       	add	r12, r12
    72de:	dd 1c       	adc	r13, r13
    72e0:	96 01       	movw	r18, r12
    72e2:	2e 0d       	add	r18, r14
    72e4:	3f 1d       	adc	r19, r15
    72e6:	22 0f       	add	r18, r18
    72e8:	33 1f       	adc	r19, r19
    72ea:	a9 01       	movw	r20, r18
    72ec:	42 5b       	subi	r20, 0xB2	; 178
    72ee:	5a 4d       	sbci	r21, 0xDA	; 218
    72f0:	1a 01       	movw	r2, r20
    72f2:	fa 01       	movw	r30, r20
    72f4:	a0 80       	ld	r10, Z
    72f6:	b1 80       	ldd	r11, Z+1	; 0x01
    72f8:	b7 fc       	sbrc	r11, 7
    72fa:	fb c0       	rjmp	.+502    	; 0x74f2 <handleSerialCommand+0x7fc>
		motorAdjusts[direction][0]+= atoi(token);
    72fc:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    7300:	8a 0d       	add	r24, r10
    7302:	9b 1d       	adc	r25, r11
    7304:	f1 01       	movw	r30, r2
    7306:	80 83       	st	Z, r24
    7308:	91 83       	std	Z+1, r25	; 0x01
	else
		motorAdjusts[direction][0]-= atoi(token);
	
	token = strtok(NULL,delim);
    730a:	b8 01       	movw	r22, r16
    730c:	80 e0       	ldi	r24, 0x00	; 0
    730e:	90 e0       	ldi	r25, 0x00	; 0
    7310:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7314:	00 97       	sbiw	r24, 0x00	; 0
    7316:	09 f4       	brne	.+2      	; 0x731a <handleSerialCommand+0x624>
    7318:	95 c1       	rjmp	.+810    	; 0x7644 <handleSerialCommand+0x94e>
	if(motorAdjusts[direction][1]>=0)
    731a:	96 01       	movw	r18, r12
    731c:	2e 0d       	add	r18, r14
    731e:	3f 1d       	adc	r19, r15
    7320:	22 0f       	add	r18, r18
    7322:	33 1f       	adc	r19, r19
    7324:	a9 01       	movw	r20, r18
    7326:	42 5b       	subi	r20, 0xB2	; 178
    7328:	5a 4d       	sbci	r21, 0xDA	; 218
    732a:	1a 01       	movw	r2, r20
    732c:	fa 01       	movw	r30, r20
    732e:	a2 80       	ldd	r10, Z+2	; 0x02
    7330:	b3 80       	ldd	r11, Z+3	; 0x03
    7332:	b7 fc       	sbrc	r11, 7
    7334:	d6 c0       	rjmp	.+428    	; 0x74e2 <handleSerialCommand+0x7ec>
	motorAdjusts[direction][1]+= atoi(token);
    7336:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    733a:	8a 0d       	add	r24, r10
    733c:	9b 1d       	adc	r25, r11
    733e:	f1 01       	movw	r30, r2
    7340:	82 83       	std	Z+2, r24	; 0x02
    7342:	93 83       	std	Z+3, r25	; 0x03
	else
	motorAdjusts[direction][1]-= atoi(token);
	
	token = strtok(NULL,delim);
    7344:	b8 01       	movw	r22, r16
    7346:	80 e0       	ldi	r24, 0x00	; 0
    7348:	90 e0       	ldi	r25, 0x00	; 0
    734a:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    734e:	00 97       	sbiw	r24, 0x00	; 0
    7350:	09 f4       	brne	.+2      	; 0x7354 <handleSerialCommand+0x65e>
    7352:	8a c1       	rjmp	.+788    	; 0x7668 <handleSerialCommand+0x972>
	if(motorAdjusts[direction][2]>=0)
    7354:	96 01       	movw	r18, r12
    7356:	2e 0d       	add	r18, r14
    7358:	3f 1d       	adc	r19, r15
    735a:	22 0f       	add	r18, r18
    735c:	33 1f       	adc	r19, r19
    735e:	a9 01       	movw	r20, r18
    7360:	42 5b       	subi	r20, 0xB2	; 178
    7362:	5a 4d       	sbci	r21, 0xDA	; 218
    7364:	5a 01       	movw	r10, r20
    7366:	fa 01       	movw	r30, r20
    7368:	04 81       	ldd	r16, Z+4	; 0x04
    736a:	15 81       	ldd	r17, Z+5	; 0x05
    736c:	17 fd       	sbrc	r17, 7
    736e:	45 c1       	rjmp	.+650    	; 0x75fa <handleSerialCommand+0x904>
	motorAdjusts[direction][2]+= atoi(token);
    7370:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    7374:	80 0f       	add	r24, r16
    7376:	91 1f       	adc	r25, r17
    7378:	f5 01       	movw	r30, r10
    737a:	84 83       	std	Z+4, r24	; 0x04
    737c:	95 83       	std	Z+5, r25	; 0x05
	else
	motorAdjusts[direction][2]-= atoi(token);

	printf_P(PSTR("Got adjust_motors command. direction: %hu, New Settings: (%d, %d, %d)\r\n"), direction, motorAdjusts[direction][0], motorAdjusts[direction][1], motorAdjusts[direction][2]);
    737e:	9f 93       	push	r25
    7380:	8f 93       	push	r24
    7382:	f6 01       	movw	r30, r12
    7384:	ee 0d       	add	r30, r14
    7386:	ff 1d       	adc	r31, r15
    7388:	ee 0f       	add	r30, r30
    738a:	ff 1f       	adc	r31, r31
    738c:	e2 5b       	subi	r30, 0xB2	; 178
    738e:	fa 4d       	sbci	r31, 0xDA	; 218
    7390:	83 81       	ldd	r24, Z+3	; 0x03
    7392:	8f 93       	push	r24
    7394:	82 81       	ldd	r24, Z+2	; 0x02
    7396:	8f 93       	push	r24
    7398:	81 81       	ldd	r24, Z+1	; 0x01
    739a:	8f 93       	push	r24
    739c:	80 81       	ld	r24, Z
    739e:	8f 93       	push	r24
    73a0:	ff 92       	push	r15
    73a2:	ef 92       	push	r14
    73a4:	88 ec       	ldi	r24, 0xC8	; 200
    73a6:	9c e0       	ldi	r25, 0x0C	; 12
    73a8:	9f 93       	push	r25
    73aa:	8f 93       	push	r24
    73ac:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
	setRGB(r,g,b);
    73b0:	48 2d       	mov	r20, r8
    73b2:	66 2d       	mov	r22, r6
    73b4:	84 2d       	mov	r24, r4
    73b6:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <setRGB>
    73ba:	cd bf       	out	0x3d, r28	; 61
    73bc:	de bf       	out	0x3e, r29	; 62
    73be:	b7 cc       	rjmp	.-1682   	; 0x6d2e <handleSerialCommand+0x38>
 *     set_led r 255           //Full red without effecting green or blue.
 *     set_led br 127 64       //Half-strength blue, quarter-strength red. (order is flexible)
 *     set_led hsv 0 255 255   //Set to fully saturated and bright hue 0 (red).
 */
static void handle_set_led(char* command_args){
	const char delim[2] = " ";
    73c0:	8e 01       	movw	r16, r28
    73c2:	0f 57       	subi	r16, 0x7F	; 127
    73c4:	1f 4f       	sbci	r17, 0xFF	; 255
    73c6:	80 e2       	ldi	r24, 0x20	; 32
    73c8:	90 e0       	ldi	r25, 0x00	; 0
    73ca:	f8 01       	movw	r30, r16
    73cc:	80 83       	st	Z, r24
    73ce:	91 83       	std	Z+1, r25	; 0x01
	char* token;	
	char* colors = strtok(command_args,delim);
    73d0:	b8 01       	movw	r22, r16
    73d2:	ce 01       	movw	r24, r28
    73d4:	01 96       	adiw	r24, 0x01	; 1
    73d6:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
    73da:	7c 01       	movw	r14, r24
	int length = strlen(colors);
    73dc:	fc 01       	movw	r30, r24
    73de:	01 90       	ld	r0, Z+
    73e0:	00 20       	and	r0, r0
    73e2:	e9 f7       	brne	.-6      	; 0x73de <handleSerialCommand+0x6e8>
    73e4:	31 97       	sbiw	r30, 0x01	; 1
    73e6:	6f 01       	movw	r12, r30
    73e8:	c8 1a       	sub	r12, r24
    73ea:	d9 0a       	sbc	r13, r25

	if(strcmp(colors,"hsv")==0){
    73ec:	6e e1       	ldi	r22, 0x1E	; 30
    73ee:	72 e2       	ldi	r23, 0x22	; 34
    73f0:	0e 94 a8 4c 	call	0x9950	; 0x9950 <strcmp>
    73f4:	89 2b       	or	r24, r25
    73f6:	09 f4       	brne	.+2      	; 0x73fa <handleSerialCommand+0x704>
    73f8:	84 c0       	rjmp	.+264    	; 0x7502 <handleSerialCommand+0x80c>
		sVal = atoi(token);
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		setHSV(hVal,sVal,vVal);
	}else{
		for(int i=0 ; i < length ; i++){
    73fa:	1c 14       	cp	r1, r12
    73fc:	1d 04       	cpc	r1, r13
    73fe:	0c f0       	brlt	.+2      	; 0x7402 <handleSerialCommand+0x70c>
    7400:	96 cc       	rjmp	.-1748   	; 0x6d2e <handleSerialCommand+0x38>
    7402:	ce 0c       	add	r12, r14
    7404:	df 1c       	adc	r13, r15
    7406:	10 c0       	rjmp	.+32     	; 0x7428 <handleSerialCommand+0x732>
			token = strtok(NULL,delim);
			if(colors[i]=='r'){
				setRedLED(atoi(token));
			}else if(colors[i]=='g'){
    7408:	27 36       	cpi	r18, 0x67	; 103
    740a:	01 f1       	breq	.+64     	; 0x744c <handleSerialCommand+0x756>
				setGreenLED(atoi(token));
			}else if(colors[i]=='b'){
    740c:	22 36       	cpi	r18, 0x62	; 98
    740e:	09 f0       	breq	.+2      	; 0x7412 <handleSerialCommand+0x71c>
    7410:	8e cc       	rjmp	.-1764   	; 0x6d2e <handleSerialCommand+0x38>
				setBlueLED(atoi(token));
    7412:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    7416:	99 27       	eor	r25, r25
    7418:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    741c:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
		sVal = atoi(token);
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		setHSV(hVal,sVal,vVal);
	}else{
		for(int i=0 ; i < length ; i++){
    7420:	ec 14       	cp	r14, r12
    7422:	fd 04       	cpc	r15, r13
    7424:	09 f4       	brne	.+2      	; 0x7428 <handleSerialCommand+0x732>
    7426:	83 cc       	rjmp	.-1786   	; 0x6d2e <handleSerialCommand+0x38>
			token = strtok(NULL,delim);
    7428:	b8 01       	movw	r22, r16
    742a:	80 e0       	ldi	r24, 0x00	; 0
    742c:	90 e0       	ldi	r25, 0x00	; 0
    742e:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
			if(colors[i]=='r'){
    7432:	f7 01       	movw	r30, r14
    7434:	21 91       	ld	r18, Z+
    7436:	7f 01       	movw	r14, r30
    7438:	22 37       	cpi	r18, 0x72	; 114
    743a:	31 f7       	brne	.-52     	; 0x7408 <handleSerialCommand+0x712>
				setRedLED(atoi(token));
    743c:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    7440:	99 27       	eor	r25, r25
    7442:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    7446:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
    744a:	ea cf       	rjmp	.-44     	; 0x7420 <handleSerialCommand+0x72a>
			}else if(colors[i]=='g'){
				setGreenLED(atoi(token));
    744c:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    7450:	99 27       	eor	r25, r25
    7452:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    7456:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
    745a:	e2 cf       	rjmp	.-60     	; 0x7420 <handleSerialCommand+0x72a>
/*
 * No arguments.
 * prints this Droplet's ID.
 */
static void handle_get_id(void){
	printf_P(PSTR("My ID is: %04X\r\n"),getDropletID());
    745c:	80 91 b0 23 	lds	r24, 0x23B0	; 0x8023b0 <droplet_ID+0x1>
    7460:	8f 93       	push	r24
    7462:	80 91 af 23 	lds	r24, 0x23AF	; 0x8023af <droplet_ID>
    7466:	8f 93       	push	r24
    7468:	87 eb       	ldi	r24, 0xB7	; 183
    746a:	9c e0       	ldi	r25, 0x0C	; 12
    746c:	9f 93       	push	r25
    746e:	8f 93       	push	r24
    7470:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    7474:	0f 90       	pop	r0
    7476:	0f 90       	pop	r0
    7478:	0f 90       	pop	r0
    747a:	0f 90       	pop	r0
    747c:	58 cc       	rjmp	.-1872   	; 0x6d2e <handleSerialCommand+0x38>
/*
 * No arguments.
 * Broadcasts the four-character readable form of this Droplet's ID.
 */
static void handle_broadcast_id(void){
	scheduleTask(5, sendID, NULL);
    747e:	20 e0       	ldi	r18, 0x00	; 0
    7480:	30 e0       	ldi	r19, 0x00	; 0
    7482:	4e e4       	ldi	r20, 0x4E	; 78
    7484:	56 e3       	ldi	r21, 0x36	; 54
    7486:	65 e0       	ldi	r22, 0x05	; 5
    7488:	70 e0       	ldi	r23, 0x00	; 0
    748a:	80 e0       	ldi	r24, 0x00	; 0
    748c:	90 e0       	ldi	r25, 0x00	; 0
    748e:	0e 94 3c 33 	call	0x6678	; 0x6678 <scheduleTask>
    7492:	4d cc       	rjmp	.-1894   	; 0x6d2e <handleSerialCommand+0x38>
 * Example:
 *     cmd reset
 *     All receiving Droplets will act as if they had 'reset' typed to them over the terminal, and reset.
 */
static void handle_cmd(char* command_args){
	printf_P(PSTR("Broadcasting command: \"%s\", of length %i.\r\n"), (uint8_t*)command_args, strlen(command_args));
    7494:	8e 01       	movw	r16, r28
    7496:	0f 5f       	subi	r16, 0xFF	; 255
    7498:	1f 4f       	sbci	r17, 0xFF	; 255
    749a:	f8 01       	movw	r30, r16
    749c:	01 90       	ld	r0, Z+
    749e:	00 20       	and	r0, r0
    74a0:	e9 f7       	brne	.-6      	; 0x749c <handleSerialCommand+0x7a6>
    74a2:	31 97       	sbiw	r30, 0x01	; 1
    74a4:	e0 1b       	sub	r30, r16
    74a6:	f1 0b       	sbc	r31, r17
    74a8:	ff 93       	push	r31
    74aa:	ef 93       	push	r30
    74ac:	1f 93       	push	r17
    74ae:	0f 93       	push	r16
    74b0:	8b e8       	ldi	r24, 0x8B	; 139
    74b2:	9c e0       	ldi	r25, 0x0C	; 12
    74b4:	9f 93       	push	r25
    74b6:	8f 93       	push	r24
    74b8:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
	irCmd(ALL_DIRS, command_args,strlen(command_args));
    74bc:	f8 01       	movw	r30, r16
    74be:	01 90       	ld	r0, Z+
    74c0:	00 20       	and	r0, r0
    74c2:	e9 f7       	brne	.-6      	; 0x74be <handleSerialCommand+0x7c8>
    74c4:	31 97       	sbiw	r30, 0x01	; 1
    74c6:	af 01       	movw	r20, r30
    74c8:	40 1b       	sub	r20, r16
    74ca:	51 0b       	sbc	r21, r17
    74cc:	b8 01       	movw	r22, r16
    74ce:	8f e3       	ldi	r24, 0x3F	; 63
    74d0:	0e 94 59 12 	call	0x24b2	; 0x24b2 <irCmd>
    74d4:	0f 90       	pop	r0
    74d6:	0f 90       	pop	r0
    74d8:	0f 90       	pop	r0
    74da:	0f 90       	pop	r0
    74dc:	0f 90       	pop	r0
    74de:	0f 90       	pop	r0
    74e0:	26 cc       	rjmp	.-1972   	; 0x6d2e <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
	if(motorAdjusts[direction][1]>=0)
	motorAdjusts[direction][1]+= atoi(token);
	else
	motorAdjusts[direction][1]-= atoi(token);
    74e2:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    74e6:	a8 1a       	sub	r10, r24
    74e8:	b9 0a       	sbc	r11, r25
    74ea:	f1 01       	movw	r30, r2
    74ec:	a2 82       	std	Z+2, r10	; 0x02
    74ee:	b3 82       	std	Z+3, r11	; 0x03
    74f0:	29 cf       	rjmp	.-430    	; 0x7344 <handleSerialCommand+0x64e>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
	if(motorAdjusts[direction][0]>=0)
		motorAdjusts[direction][0]+= atoi(token);
	else
		motorAdjusts[direction][0]-= atoi(token);
    74f2:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    74f6:	a8 1a       	sub	r10, r24
    74f8:	b9 0a       	sbc	r11, r25
    74fa:	f1 01       	movw	r30, r2
    74fc:	a0 82       	st	Z, r10
    74fe:	b1 82       	std	Z+1, r11	; 0x01
    7500:	04 cf       	rjmp	.-504    	; 0x730a <handleSerialCommand+0x614>
	int length = strlen(colors);

	if(strcmp(colors,"hsv")==0){
		uint16_t hVal;
		uint8_t sVal, vVal;
		token = strtok(NULL,delim);
    7502:	b8 01       	movw	r22, r16
    7504:	80 e0       	ldi	r24, 0x00	; 0
    7506:	90 e0       	ldi	r25, 0x00	; 0
    7508:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
		hVal = atoi(token);
    750c:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    7510:	7c 01       	movw	r14, r24
		token = strtok(NULL,delim);
    7512:	b8 01       	movw	r22, r16
    7514:	80 e0       	ldi	r24, 0x00	; 0
    7516:	90 e0       	ldi	r25, 0x00	; 0
    7518:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
		sVal = atoi(token);
    751c:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    7520:	d8 2e       	mov	r13, r24
		token = strtok(NULL,delim);	
    7522:	b8 01       	movw	r22, r16
    7524:	80 e0       	ldi	r24, 0x00	; 0
    7526:	90 e0       	ldi	r25, 0x00	; 0
    7528:	0e 94 9b 4c 	call	0x9936	; 0x9936 <strtok>
		vVal = atoi(token);
    752c:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
		setHSV(hVal,sVal,vVal);
    7530:	48 2f       	mov	r20, r24
    7532:	6d 2d       	mov	r22, r13
    7534:	c7 01       	movw	r24, r14
    7536:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <setHSV>
    753a:	f9 cb       	rjmp	.-2062   	; 0x6d2e <handleSerialCommand+0x38>
 *     tgt_cmd af6a reset
 *     The Droplet with ID 0xAF6A will act as if it had 'reset' typed to it over the terminal, and reset. Other
 *     Droplets will do nothing.)
 */
static void handle_targeted_cmd(char* command_args){
	uint8_t loc = strcspn(command_args, " ");
    753c:	65 e6       	ldi	r22, 0x65	; 101
    753e:	70 e2       	ldi	r23, 0x20	; 32
    7540:	ce 01       	movw	r24, r28
    7542:	01 96       	adiw	r24, 0x01	; 1
    7544:	0e 94 b8 4c 	call	0x9970	; 0x9970 <strcspn>
    7548:	8c 01       	movw	r16, r24
    754a:	11 27       	eor	r17, r17
	char targetString[5];
	char cmdString[32];
	
	strncpy(targetString, command_args, loc);
    754c:	a8 01       	movw	r20, r16
    754e:	be 01       	movw	r22, r28
    7550:	6f 5f       	subi	r22, 0xFF	; 255
    7552:	7f 4f       	sbci	r23, 0xFF	; 255
    7554:	ce 01       	movw	r24, r28
    7556:	8f 55       	subi	r24, 0x5F	; 95
    7558:	9f 4f       	sbci	r25, 0xFF	; 255
    755a:	0e 94 c7 4c 	call	0x998e	; 0x998e <strncpy>
	strcpy(cmdString, command_args+loc+1);
    755e:	b8 01       	movw	r22, r16
    7560:	6f 5f       	subi	r22, 0xFF	; 255
    7562:	7f 4f       	sbci	r23, 0xFF	; 255
    7564:	21 e0       	ldi	r18, 0x01	; 1
    7566:	30 e0       	ldi	r19, 0x00	; 0
    7568:	2c 0f       	add	r18, r28
    756a:	3d 1f       	adc	r19, r29
    756c:	62 0f       	add	r22, r18
    756e:	73 1f       	adc	r23, r19
    7570:	8e 01       	movw	r16, r28
    7572:	0f 57       	subi	r16, 0x7F	; 127
    7574:	1f 4f       	sbci	r17, 0xFF	; 255
    7576:	c8 01       	movw	r24, r16
    7578:	0e 94 b1 4c 	call	0x9962	; 0x9962 <strcpy>
	
	uint16_t target = strtoul(targetString, NULL, 16);
    757c:	40 e1       	ldi	r20, 0x10	; 16
    757e:	50 e0       	ldi	r21, 0x00	; 0
    7580:	60 e0       	ldi	r22, 0x00	; 0
    7582:	70 e0       	ldi	r23, 0x00	; 0
    7584:	ce 01       	movw	r24, r28
    7586:	8f 55       	subi	r24, 0x5F	; 95
    7588:	9f 4f       	sbci	r25, 0xFF	; 255
    758a:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <strtoul>
    758e:	7b 01       	movw	r14, r22
	printf_P(PSTR("Broadcasting command to %04X: \"%s\", of length %i.\r\n"), target, (uint8_t*)cmdString, strlen(cmdString));
    7590:	f8 01       	movw	r30, r16
    7592:	01 90       	ld	r0, Z+
    7594:	00 20       	and	r0, r0
    7596:	e9 f7       	brne	.-6      	; 0x7592 <handleSerialCommand+0x89c>
    7598:	31 97       	sbiw	r30, 0x01	; 1
    759a:	e0 1b       	sub	r30, r16
    759c:	f1 0b       	sbc	r31, r17
    759e:	ff 93       	push	r31
    75a0:	ef 93       	push	r30
    75a2:	1f 93       	push	r17
    75a4:	0f 93       	push	r16
    75a6:	ff 92       	push	r15
    75a8:	6f 93       	push	r22
    75aa:	87 e5       	ldi	r24, 0x57	; 87
    75ac:	9c e0       	ldi	r25, 0x0C	; 12
    75ae:	9f 93       	push	r25
    75b0:	8f 93       	push	r24
    75b2:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
	irTargetedCmd(ALL_DIRS, cmdString,strlen(cmdString), target);
    75b6:	f8 01       	movw	r30, r16
    75b8:	01 90       	ld	r0, Z+
    75ba:	00 20       	and	r0, r0
    75bc:	e9 f7       	brne	.-6      	; 0x75b8 <handleSerialCommand+0x8c2>
    75be:	31 97       	sbiw	r30, 0x01	; 1
    75c0:	af 01       	movw	r20, r30
    75c2:	40 1b       	sub	r20, r16
    75c4:	51 0b       	sbc	r21, r17
    75c6:	97 01       	movw	r18, r14
    75c8:	b8 01       	movw	r22, r16
    75ca:	8f e3       	ldi	r24, 0x3F	; 63
    75cc:	0e 94 53 12 	call	0x24a6	; 0x24a6 <irTargetedCmd>
    75d0:	cd bf       	out	0x3d, r28	; 61
    75d2:	de bf       	out	0x3e, r29	; 62
    75d4:	ac cb       	rjmp	.-2216   	; 0x6d2e <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
	motorAdjusts[direction][0] = atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    75d6:	82 e2       	ldi	r24, 0x22	; 34
    75d8:	9e e0       	ldi	r25, 0x0E	; 14
    75da:	9f 93       	push	r25
    75dc:	8f 93       	push	r24
    75de:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    75e2:	0f 90       	pop	r0
    75e4:	0f 90       	pop	r0
    75e6:	a3 cb       	rjmp	.-2234   	; 0x6d2e <handleSerialCommand+0x38>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    75e8:	88 e4       	ldi	r24, 0x48	; 72
    75ea:	9e e0       	ldi	r25, 0x0E	; 14
    75ec:	9f 93       	push	r25
    75ee:	8f 93       	push	r24
    75f0:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    75f4:	0f 90       	pop	r0
    75f6:	0f 90       	pop	r0
    75f8:	9a cb       	rjmp	.-2252   	; 0x6d2e <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
	if(motorAdjusts[direction][2]>=0)
	motorAdjusts[direction][2]+= atoi(token);
	else
	motorAdjusts[direction][2]-= atoi(token);
    75fa:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
    75fe:	98 01       	movw	r18, r16
    7600:	28 1b       	sub	r18, r24
    7602:	39 0b       	sbc	r19, r25
    7604:	c9 01       	movw	r24, r18
    7606:	f5 01       	movw	r30, r10
    7608:	24 83       	std	Z+4, r18	; 0x04
    760a:	35 83       	std	Z+5, r19	; 0x05
    760c:	b8 ce       	rjmp	.-656    	; 0x737e <handleSerialCommand+0x688>
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    760e:	88 e8       	ldi	r24, 0x88	; 136
    7610:	9e e0       	ldi	r25, 0x0E	; 14
    7612:	9f 93       	push	r25
    7614:	8f 93       	push	r24
    7616:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    761a:	0f 90       	pop	r0
    761c:	0f 90       	pop	r0
    761e:	87 cb       	rjmp	.-2290   	; 0x6d2e <handleSerialCommand+0x38>
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    7620:	8b e9       	ldi	r24, 0x9B	; 155
    7622:	9d e0       	ldi	r25, 0x0D	; 13
    7624:	9f 93       	push	r25
    7626:	8f 93       	push	r24
    7628:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    762c:	0f 90       	pop	r0
    762e:	0f 90       	pop	r0
    7630:	7e cb       	rjmp	.-2308   	; 0x6d2e <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
	motorAdjusts[direction][1] = atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    7632:	8d ef       	ldi	r24, 0xFD	; 253
    7634:	9d e0       	ldi	r25, 0x0D	; 13
    7636:	9f 93       	push	r25
    7638:	8f 93       	push	r24
    763a:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    763e:	0f 90       	pop	r0
    7640:	0f 90       	pop	r0
    7642:	75 cb       	rjmp	.-2326   	; 0x6d2e <handleSerialCommand+0x38>
		motorAdjusts[direction][0]+= atoi(token);
	else
		motorAdjusts[direction][0]-= atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7644:	85 e3       	ldi	r24, 0x35	; 53
    7646:	9d e0       	ldi	r25, 0x0D	; 13
    7648:	9f 93       	push	r25
    764a:	8f 93       	push	r24
    764c:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    7650:	0f 90       	pop	r0
    7652:	0f 90       	pop	r0
    7654:	6c cb       	rjmp	.-2344   	; 0x6d2e <handleSerialCommand+0x38>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    7656:	8b e5       	ldi	r24, 0x5B	; 91
    7658:	9d e0       	ldi	r25, 0x0D	; 13
    765a:	9f 93       	push	r25
    765c:	8f 93       	push	r24
    765e:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    7662:	0f 90       	pop	r0
    7664:	0f 90       	pop	r0
    7666:	63 cb       	rjmp	.-2362   	; 0x6d2e <handleSerialCommand+0x38>
	motorAdjusts[direction][1]+= atoi(token);
	else
	motorAdjusts[direction][1]-= atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    7668:	80 e1       	ldi	r24, 0x10	; 16
    766a:	9d e0       	ldi	r25, 0x0D	; 13
    766c:	9f 93       	push	r25
    766e:	8f 93       	push	r24
    7670:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    7674:	0f 90       	pop	r0
    7676:	0f 90       	pop	r0
    7678:	5a cb       	rjmp	.-2380   	; 0x6d2e <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
    767a:	6e ef       	ldi	r22, 0xFE	; 254
    767c:	7e e0       	ldi	r23, 0x0E	; 14
    767e:	c8 01       	movw	r24, r16
    7680:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    7684:	89 2b       	or	r24, r25
    7686:	09 f4       	brne	.+2      	; 0x768a <handleSerialCommand+0x994>
    7688:	8f c0       	rjmp	.+286    	; 0x77a8 <handleSerialCommand+0xab2>
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
    768a:	69 ee       	ldi	r22, 0xE9	; 233
    768c:	7e e0       	ldi	r23, 0x0E	; 14
    768e:	c8 01       	movw	r24, r16
    7690:	0e 94 87 4c 	call	0x990e	; 0x990e <strcmp_P>
    7694:	89 2b       	or	r24, r25
    7696:	09 f4       	brne	.+2      	; 0x769a <handleSerialCommand+0x9a4>
    7698:	82 c0       	rjmp	.+260    	; 0x779e <handleSerialCommand+0xaa8>
																		printMotorValues();
																		printDistPerStep();																	
		}else if(userHandleCommand){ //First, make sure the function is defined
    769a:	80 e0       	ldi	r24, 0x00	; 0
    769c:	90 e0       	ldi	r25, 0x00	; 0
    769e:	89 2b       	or	r24, r25
    76a0:	41 f0       	breq	.+16     	; 0x76b2 <handleSerialCommand+0x9bc>
			if(!userHandleCommand(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
    76a2:	be 01       	movw	r22, r28
    76a4:	6f 5f       	subi	r22, 0xFF	; 255
    76a6:	7f 4f       	sbci	r23, 0xFF	; 255
    76a8:	c8 01       	movw	r24, r16
    76aa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    76ae:	81 11       	cpse	r24, r1
    76b0:	3e cb       	rjmp	.-2436   	; 0x6d2e <handleSerialCommand+0x38>
    76b2:	1f 93       	push	r17
    76b4:	0f 93       	push	r16
    76b6:	83 eb       	ldi	r24, 0xB3	; 179
    76b8:	9f e0       	ldi	r25, 0x0F	; 15
    76ba:	9f 93       	push	r25
    76bc:	8f 93       	push	r24
    76be:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    76c2:	0f 90       	pop	r0
    76c4:	0f 90       	pop	r0
    76c6:	0f 90       	pop	r0
    76c8:	0f 90       	pop	r0
		}
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}
    76ca:	31 cb       	rjmp	.-2462   	; 0x6d2e <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
    76cc:	0e 94 88 31 	call	0x6310	; 0x6310 <printTaskQueue>
    76d0:	2e cb       	rjmp	.-2468   	; 0x6d2e <handleSerialCommand+0x38>
 * Behaves the same as the 'msg' command, described above, except the message is broadcast
 * to a specific Droplet with <ID>, and will be ignored by other Droplets. Also, this function
 * does not have a default message.
 */
static void handle_target(char* command_args){
	uint8_t loc = strcspn(command_args, " ");
    76d2:	65 e6       	ldi	r22, 0x65	; 101
    76d4:	70 e2       	ldi	r23, 0x20	; 32
    76d6:	ce 01       	movw	r24, r28
    76d8:	01 96       	adiw	r24, 0x01	; 1
    76da:	0e 94 b8 4c 	call	0x9970	; 0x9970 <strcspn>
    76de:	8c 01       	movw	r16, r24
    76e0:	11 27       	eor	r17, r17
	char targetString[5];
	char msgString[32];
	
	strncpy(targetString, command_args, loc);
    76e2:	a8 01       	movw	r20, r16
    76e4:	be 01       	movw	r22, r28
    76e6:	6f 5f       	subi	r22, 0xFF	; 255
    76e8:	7f 4f       	sbci	r23, 0xFF	; 255
    76ea:	ce 01       	movw	r24, r28
    76ec:	8f 55       	subi	r24, 0x5F	; 95
    76ee:	9f 4f       	sbci	r25, 0xFF	; 255
    76f0:	0e 94 c7 4c 	call	0x998e	; 0x998e <strncpy>
	strcpy(msgString, command_args+loc);
    76f4:	61 e0       	ldi	r22, 0x01	; 1
    76f6:	70 e0       	ldi	r23, 0x00	; 0
    76f8:	6c 0f       	add	r22, r28
    76fa:	7d 1f       	adc	r23, r29
    76fc:	60 0f       	add	r22, r16
    76fe:	71 1f       	adc	r23, r17
    7700:	8e 01       	movw	r16, r28
    7702:	0f 57       	subi	r16, 0x7F	; 127
    7704:	1f 4f       	sbci	r17, 0xFF	; 255
    7706:	c8 01       	movw	r24, r16
    7708:	0e 94 b1 4c 	call	0x9962	; 0x9962 <strcpy>
	
	
	uint16_t target = strtoul(targetString, NULL, 16);
    770c:	40 e1       	ldi	r20, 0x10	; 16
    770e:	50 e0       	ldi	r21, 0x00	; 0
    7710:	60 e0       	ldi	r22, 0x00	; 0
    7712:	70 e0       	ldi	r23, 0x00	; 0
    7714:	ce 01       	movw	r24, r28
    7716:	8f 55       	subi	r24, 0x5F	; 95
    7718:	9f 4f       	sbci	r25, 0xFF	; 255
    771a:	0e 94 68 4a 	call	0x94d0	; 0x94d0 <strtoul>
	
	//printf("Target: %04X\r\n",target);
	irTargetedSend(ALL_DIRS, msgString,strlen(msgString), target);
    771e:	f8 01       	movw	r30, r16
    7720:	01 90       	ld	r0, Z+
    7722:	00 20       	and	r0, r0
    7724:	e9 f7       	brne	.-6      	; 0x7720 <handleSerialCommand+0xa2a>
    7726:	31 97       	sbiw	r30, 0x01	; 1
    7728:	af 01       	movw	r20, r30
    772a:	40 1b       	sub	r20, r16
    772c:	51 0b       	sbc	r21, r17
    772e:	9b 01       	movw	r18, r22
    7730:	b8 01       	movw	r22, r16
    7732:	8f e3       	ldi	r24, 0x3F	; 63
    7734:	0e 94 61 12 	call	0x24c2	; 0x24c2 <irTargetedSend>
    7738:	fa ca       	rjmp	.-2572   	; 0x6d2e <handleSerialCommand+0x38>
 *     msg_tst <dir_mask>
 *     <dir_mask>: A direction mask indicating which direction(s) to send the message in.
 * Sends a simple test message in the indicated directions.
 */
static void handle_msg_test(char* command_args){
	uint8_t dir_mask = atoi(command_args);
    773a:	ce 01       	movw	r24, r28
    773c:	01 96       	adiw	r24, 0x01	; 1
    773e:	0e 94 75 4b 	call	0x96ea	; 0x96ea <atoi>
	char msg[16] = "Unique New York.";
    7742:	90 e1       	ldi	r25, 0x10	; 16
    7744:	e4 e0       	ldi	r30, 0x04	; 4
    7746:	f2 e2       	ldi	r31, 0x22	; 34
    7748:	de 01       	movw	r26, r28
    774a:	af 57       	subi	r26, 0x7F	; 127
    774c:	bf 4f       	sbci	r27, 0xFF	; 255
    774e:	01 90       	ld	r0, Z+
    7750:	0d 92       	st	X+, r0
    7752:	9a 95       	dec	r25
    7754:	e1 f7       	brne	.-8      	; 0x774e <handleSerialCommand+0xa58>
	
	irSend(dir_mask, msg,16);
    7756:	40 e1       	ldi	r20, 0x10	; 16
    7758:	be 01       	movw	r22, r28
    775a:	6f 57       	subi	r22, 0x7F	; 127
    775c:	7f 4f       	sbci	r23, 0xFF	; 255
    775e:	0e 94 67 12 	call	0x24ce	; 0x24ce <irSend>
    7762:	e5 ca       	rjmp	.-2614   	; 0x6d2e <handleSerialCommand+0x38>
 *
 * <MSG> will be treated as a string and broadcast over IR.
 * If <MSG> is not present, a simple test string will be broadcast instead.
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
    7764:	89 81       	ldd	r24, Y+1	; 0x01
    7766:	88 23       	and	r24, r24
    7768:	a1 f1       	breq	.+104    	; 0x77d2 <handleSerialCommand+0xadc>
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
    776a:	fe 01       	movw	r30, r28
    776c:	31 96       	adiw	r30, 0x01	; 1
    776e:	df 01       	movw	r26, r30
    7770:	0d 90       	ld	r0, X+
    7772:	00 20       	and	r0, r0
    7774:	e9 f7       	brne	.-6      	; 0x7770 <handleSerialCommand+0xa7a>
    7776:	11 97       	sbiw	r26, 0x01	; 1
    7778:	cd 01       	movw	r24, r26
    777a:	8e 1b       	sub	r24, r30
    777c:	9f 0b       	sbc	r25, r31
    777e:	89 32       	cpi	r24, 0x29	; 41
    7780:	91 05       	cpc	r25, r1
    7782:	a8 f4       	brcc	.+42     	; 0x77ae <handleSerialCommand+0xab8>
    7784:	bf 01       	movw	r22, r30
		printf_P(PSTR("Message length was %z chars, which exceeds the maximum of %u"), strlen(command_args), IR_BUFFER_SIZE);
		return;
	}
	irSend(ALL_DIRS, command_args,strlen(command_args));
    7786:	fb 01       	movw	r30, r22
    7788:	01 90       	ld	r0, Z+
    778a:	00 20       	and	r0, r0
    778c:	e9 f7       	brne	.-6      	; 0x7788 <handleSerialCommand+0xa92>
    778e:	31 97       	sbiw	r30, 0x01	; 1
    7790:	af 01       	movw	r20, r30
    7792:	46 1b       	sub	r20, r22
    7794:	57 0b       	sbc	r21, r23
    7796:	8f e3       	ldi	r24, 0x3F	; 63
    7798:	0e 94 67 12 	call	0x24ce	; 0x24ce <irSend>
    779c:	c8 ca       	rjmp	.-2672   	; 0x6d2e <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
																		printMotorValues();
    779e:	0e 94 22 20 	call	0x4044	; 0x4044 <printMotorValues>
																		printDistPerStep();																	
    77a2:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <printDistPerStep>
    77a6:	c3 ca       	rjmp	.-2682   	; 0x6d2e <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
    77a8:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <writeMotorSettings>
    77ac:	c0 ca       	rjmp	.-2688   	; 0x6d2e <handleSerialCommand+0x38>
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
		printf_P(PSTR("Message length was %z chars, which exceeds the maximum of %u"), strlen(command_args), IR_BUFFER_SIZE);
    77ae:	1f 92       	push	r1
    77b0:	28 e2       	ldi	r18, 0x28	; 40
    77b2:	2f 93       	push	r18
    77b4:	9f 93       	push	r25
    77b6:	8f 93       	push	r24
    77b8:	8a e1       	ldi	r24, 0x1A	; 26
    77ba:	9c e0       	ldi	r25, 0x0C	; 12
    77bc:	9f 93       	push	r25
    77be:	8f 93       	push	r24
    77c0:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <printf_P>
    77c4:	0f 90       	pop	r0
    77c6:	0f 90       	pop	r0
    77c8:	0f 90       	pop	r0
    77ca:	0f 90       	pop	r0
    77cc:	0f 90       	pop	r0
    77ce:	0f 90       	pop	r0
    77d0:	ae ca       	rjmp	.-2724   	; 0x6d2e <handleSerialCommand+0x38>
 * <MSG> will be treated as a string and broadcast over IR.
 * If <MSG> is not present, a simple test string will be broadcast instead.
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
    77d2:	64 e0       	ldi	r22, 0x04	; 4
    77d4:	72 e2       	ldi	r23, 0x22	; 34
    77d6:	d7 cf       	rjmp	.-82     	; 0x7786 <handleSerialCommand+0xa90>

000077d8 <vfprintf>:
    77d8:	2f 92       	push	r2
    77da:	3f 92       	push	r3
    77dc:	4f 92       	push	r4
    77de:	5f 92       	push	r5
    77e0:	6f 92       	push	r6
    77e2:	7f 92       	push	r7
    77e4:	8f 92       	push	r8
    77e6:	9f 92       	push	r9
    77e8:	af 92       	push	r10
    77ea:	bf 92       	push	r11
    77ec:	cf 92       	push	r12
    77ee:	df 92       	push	r13
    77f0:	ef 92       	push	r14
    77f2:	ff 92       	push	r15
    77f4:	0f 93       	push	r16
    77f6:	1f 93       	push	r17
    77f8:	cf 93       	push	r28
    77fa:	df 93       	push	r29
    77fc:	cd b7       	in	r28, 0x3d	; 61
    77fe:	de b7       	in	r29, 0x3e	; 62
    7800:	60 97       	sbiw	r28, 0x10	; 16
    7802:	cd bf       	out	0x3d, r28	; 61
    7804:	de bf       	out	0x3e, r29	; 62
    7806:	7c 01       	movw	r14, r24
    7808:	1b 01       	movw	r2, r22
    780a:	6a 01       	movw	r12, r20
    780c:	fc 01       	movw	r30, r24
    780e:	16 82       	std	Z+6, r1	; 0x06
    7810:	17 82       	std	Z+7, r1	; 0x07
    7812:	83 81       	ldd	r24, Z+3	; 0x03
    7814:	81 ff       	sbrs	r24, 1
    7816:	44 c3       	rjmp	.+1672   	; 0x7ea0 <vfprintf+0x6c8>
    7818:	9e 01       	movw	r18, r28
    781a:	2f 5f       	subi	r18, 0xFF	; 255
    781c:	3f 4f       	sbci	r19, 0xFF	; 255
    781e:	39 01       	movw	r6, r18
    7820:	f7 01       	movw	r30, r14
    7822:	93 81       	ldd	r25, Z+3	; 0x03
    7824:	f1 01       	movw	r30, r2
    7826:	93 fd       	sbrc	r25, 3
    7828:	85 91       	lpm	r24, Z+
    782a:	93 ff       	sbrs	r25, 3
    782c:	81 91       	ld	r24, Z+
    782e:	1f 01       	movw	r2, r30
    7830:	88 23       	and	r24, r24
    7832:	09 f4       	brne	.+2      	; 0x7836 <vfprintf+0x5e>
    7834:	31 c3       	rjmp	.+1634   	; 0x7e98 <vfprintf+0x6c0>
    7836:	85 32       	cpi	r24, 0x25	; 37
    7838:	39 f4       	brne	.+14     	; 0x7848 <vfprintf+0x70>
    783a:	93 fd       	sbrc	r25, 3
    783c:	85 91       	lpm	r24, Z+
    783e:	93 ff       	sbrs	r25, 3
    7840:	81 91       	ld	r24, Z+
    7842:	1f 01       	movw	r2, r30
    7844:	85 32       	cpi	r24, 0x25	; 37
    7846:	39 f4       	brne	.+14     	; 0x7856 <vfprintf+0x7e>
    7848:	b7 01       	movw	r22, r14
    784a:	90 e0       	ldi	r25, 0x00	; 0
    784c:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7850:	56 01       	movw	r10, r12
    7852:	65 01       	movw	r12, r10
    7854:	e5 cf       	rjmp	.-54     	; 0x7820 <vfprintf+0x48>
    7856:	10 e0       	ldi	r17, 0x00	; 0
    7858:	51 2c       	mov	r5, r1
    785a:	91 2c       	mov	r9, r1
    785c:	ff e1       	ldi	r31, 0x1F	; 31
    785e:	f9 15       	cp	r31, r9
    7860:	d8 f0       	brcs	.+54     	; 0x7898 <vfprintf+0xc0>
    7862:	8b 32       	cpi	r24, 0x2B	; 43
    7864:	79 f0       	breq	.+30     	; 0x7884 <vfprintf+0xac>
    7866:	38 f4       	brcc	.+14     	; 0x7876 <vfprintf+0x9e>
    7868:	80 32       	cpi	r24, 0x20	; 32
    786a:	79 f0       	breq	.+30     	; 0x788a <vfprintf+0xb2>
    786c:	83 32       	cpi	r24, 0x23	; 35
    786e:	a1 f4       	brne	.+40     	; 0x7898 <vfprintf+0xc0>
    7870:	f9 2d       	mov	r31, r9
    7872:	f0 61       	ori	r31, 0x10	; 16
    7874:	2e c0       	rjmp	.+92     	; 0x78d2 <vfprintf+0xfa>
    7876:	8d 32       	cpi	r24, 0x2D	; 45
    7878:	61 f0       	breq	.+24     	; 0x7892 <vfprintf+0xba>
    787a:	80 33       	cpi	r24, 0x30	; 48
    787c:	69 f4       	brne	.+26     	; 0x7898 <vfprintf+0xc0>
    787e:	29 2d       	mov	r18, r9
    7880:	21 60       	ori	r18, 0x01	; 1
    7882:	2d c0       	rjmp	.+90     	; 0x78de <vfprintf+0x106>
    7884:	39 2d       	mov	r19, r9
    7886:	32 60       	ori	r19, 0x02	; 2
    7888:	93 2e       	mov	r9, r19
    788a:	89 2d       	mov	r24, r9
    788c:	84 60       	ori	r24, 0x04	; 4
    788e:	98 2e       	mov	r9, r24
    7890:	2a c0       	rjmp	.+84     	; 0x78e6 <vfprintf+0x10e>
    7892:	e9 2d       	mov	r30, r9
    7894:	e8 60       	ori	r30, 0x08	; 8
    7896:	15 c0       	rjmp	.+42     	; 0x78c2 <vfprintf+0xea>
    7898:	97 fc       	sbrc	r9, 7
    789a:	2d c0       	rjmp	.+90     	; 0x78f6 <vfprintf+0x11e>
    789c:	20 ed       	ldi	r18, 0xD0	; 208
    789e:	28 0f       	add	r18, r24
    78a0:	2a 30       	cpi	r18, 0x0A	; 10
    78a2:	88 f4       	brcc	.+34     	; 0x78c6 <vfprintf+0xee>
    78a4:	96 fe       	sbrs	r9, 6
    78a6:	06 c0       	rjmp	.+12     	; 0x78b4 <vfprintf+0xdc>
    78a8:	3a e0       	ldi	r19, 0x0A	; 10
    78aa:	13 9f       	mul	r17, r19
    78ac:	20 0d       	add	r18, r0
    78ae:	11 24       	eor	r1, r1
    78b0:	12 2f       	mov	r17, r18
    78b2:	19 c0       	rjmp	.+50     	; 0x78e6 <vfprintf+0x10e>
    78b4:	8a e0       	ldi	r24, 0x0A	; 10
    78b6:	58 9e       	mul	r5, r24
    78b8:	20 0d       	add	r18, r0
    78ba:	11 24       	eor	r1, r1
    78bc:	52 2e       	mov	r5, r18
    78be:	e9 2d       	mov	r30, r9
    78c0:	e0 62       	ori	r30, 0x20	; 32
    78c2:	9e 2e       	mov	r9, r30
    78c4:	10 c0       	rjmp	.+32     	; 0x78e6 <vfprintf+0x10e>
    78c6:	8e 32       	cpi	r24, 0x2E	; 46
    78c8:	31 f4       	brne	.+12     	; 0x78d6 <vfprintf+0xfe>
    78ca:	96 fc       	sbrc	r9, 6
    78cc:	e5 c2       	rjmp	.+1482   	; 0x7e98 <vfprintf+0x6c0>
    78ce:	f9 2d       	mov	r31, r9
    78d0:	f0 64       	ori	r31, 0x40	; 64
    78d2:	9f 2e       	mov	r9, r31
    78d4:	08 c0       	rjmp	.+16     	; 0x78e6 <vfprintf+0x10e>
    78d6:	8c 36       	cpi	r24, 0x6C	; 108
    78d8:	21 f4       	brne	.+8      	; 0x78e2 <vfprintf+0x10a>
    78da:	29 2d       	mov	r18, r9
    78dc:	20 68       	ori	r18, 0x80	; 128
    78de:	92 2e       	mov	r9, r18
    78e0:	02 c0       	rjmp	.+4      	; 0x78e6 <vfprintf+0x10e>
    78e2:	88 36       	cpi	r24, 0x68	; 104
    78e4:	41 f4       	brne	.+16     	; 0x78f6 <vfprintf+0x11e>
    78e6:	f1 01       	movw	r30, r2
    78e8:	93 fd       	sbrc	r25, 3
    78ea:	85 91       	lpm	r24, Z+
    78ec:	93 ff       	sbrs	r25, 3
    78ee:	81 91       	ld	r24, Z+
    78f0:	1f 01       	movw	r2, r30
    78f2:	81 11       	cpse	r24, r1
    78f4:	b3 cf       	rjmp	.-154    	; 0x785c <vfprintf+0x84>
    78f6:	9b eb       	ldi	r25, 0xBB	; 187
    78f8:	98 0f       	add	r25, r24
    78fa:	93 30       	cpi	r25, 0x03	; 3
    78fc:	20 f4       	brcc	.+8      	; 0x7906 <vfprintf+0x12e>
    78fe:	99 2d       	mov	r25, r9
    7900:	90 61       	ori	r25, 0x10	; 16
    7902:	80 5e       	subi	r24, 0xE0	; 224
    7904:	07 c0       	rjmp	.+14     	; 0x7914 <vfprintf+0x13c>
    7906:	9b e9       	ldi	r25, 0x9B	; 155
    7908:	98 0f       	add	r25, r24
    790a:	93 30       	cpi	r25, 0x03	; 3
    790c:	08 f0       	brcs	.+2      	; 0x7910 <vfprintf+0x138>
    790e:	66 c1       	rjmp	.+716    	; 0x7bdc <vfprintf+0x404>
    7910:	99 2d       	mov	r25, r9
    7912:	9f 7e       	andi	r25, 0xEF	; 239
    7914:	96 ff       	sbrs	r25, 6
    7916:	16 e0       	ldi	r17, 0x06	; 6
    7918:	9f 73       	andi	r25, 0x3F	; 63
    791a:	99 2e       	mov	r9, r25
    791c:	85 36       	cpi	r24, 0x65	; 101
    791e:	19 f4       	brne	.+6      	; 0x7926 <vfprintf+0x14e>
    7920:	90 64       	ori	r25, 0x40	; 64
    7922:	99 2e       	mov	r9, r25
    7924:	08 c0       	rjmp	.+16     	; 0x7936 <vfprintf+0x15e>
    7926:	86 36       	cpi	r24, 0x66	; 102
    7928:	21 f4       	brne	.+8      	; 0x7932 <vfprintf+0x15a>
    792a:	39 2f       	mov	r19, r25
    792c:	30 68       	ori	r19, 0x80	; 128
    792e:	93 2e       	mov	r9, r19
    7930:	02 c0       	rjmp	.+4      	; 0x7936 <vfprintf+0x15e>
    7932:	11 11       	cpse	r17, r1
    7934:	11 50       	subi	r17, 0x01	; 1
    7936:	97 fe       	sbrs	r9, 7
    7938:	07 c0       	rjmp	.+14     	; 0x7948 <vfprintf+0x170>
    793a:	1c 33       	cpi	r17, 0x3C	; 60
    793c:	50 f4       	brcc	.+20     	; 0x7952 <vfprintf+0x17a>
    793e:	44 24       	eor	r4, r4
    7940:	43 94       	inc	r4
    7942:	41 0e       	add	r4, r17
    7944:	27 e0       	ldi	r18, 0x07	; 7
    7946:	0b c0       	rjmp	.+22     	; 0x795e <vfprintf+0x186>
    7948:	18 30       	cpi	r17, 0x08	; 8
    794a:	38 f0       	brcs	.+14     	; 0x795a <vfprintf+0x182>
    794c:	27 e0       	ldi	r18, 0x07	; 7
    794e:	17 e0       	ldi	r17, 0x07	; 7
    7950:	05 c0       	rjmp	.+10     	; 0x795c <vfprintf+0x184>
    7952:	27 e0       	ldi	r18, 0x07	; 7
    7954:	9c e3       	ldi	r25, 0x3C	; 60
    7956:	49 2e       	mov	r4, r25
    7958:	02 c0       	rjmp	.+4      	; 0x795e <vfprintf+0x186>
    795a:	21 2f       	mov	r18, r17
    795c:	41 2c       	mov	r4, r1
    795e:	56 01       	movw	r10, r12
    7960:	84 e0       	ldi	r24, 0x04	; 4
    7962:	a8 0e       	add	r10, r24
    7964:	b1 1c       	adc	r11, r1
    7966:	f6 01       	movw	r30, r12
    7968:	60 81       	ld	r22, Z
    796a:	71 81       	ldd	r23, Z+1	; 0x01
    796c:	82 81       	ldd	r24, Z+2	; 0x02
    796e:	93 81       	ldd	r25, Z+3	; 0x03
    7970:	04 2d       	mov	r16, r4
    7972:	a3 01       	movw	r20, r6
    7974:	0e 94 93 4b 	call	0x9726	; 0x9726 <__ftoa_engine>
    7978:	6c 01       	movw	r12, r24
    797a:	f9 81       	ldd	r31, Y+1	; 0x01
    797c:	fc 87       	std	Y+12, r31	; 0x0c
    797e:	f0 ff       	sbrs	r31, 0
    7980:	02 c0       	rjmp	.+4      	; 0x7986 <vfprintf+0x1ae>
    7982:	f3 ff       	sbrs	r31, 3
    7984:	06 c0       	rjmp	.+12     	; 0x7992 <vfprintf+0x1ba>
    7986:	91 fc       	sbrc	r9, 1
    7988:	06 c0       	rjmp	.+12     	; 0x7996 <vfprintf+0x1be>
    798a:	92 fe       	sbrs	r9, 2
    798c:	06 c0       	rjmp	.+12     	; 0x799a <vfprintf+0x1c2>
    798e:	00 e2       	ldi	r16, 0x20	; 32
    7990:	05 c0       	rjmp	.+10     	; 0x799c <vfprintf+0x1c4>
    7992:	0d e2       	ldi	r16, 0x2D	; 45
    7994:	03 c0       	rjmp	.+6      	; 0x799c <vfprintf+0x1c4>
    7996:	0b e2       	ldi	r16, 0x2B	; 43
    7998:	01 c0       	rjmp	.+2      	; 0x799c <vfprintf+0x1c4>
    799a:	00 e0       	ldi	r16, 0x00	; 0
    799c:	8c 85       	ldd	r24, Y+12	; 0x0c
    799e:	8c 70       	andi	r24, 0x0C	; 12
    79a0:	19 f0       	breq	.+6      	; 0x79a8 <vfprintf+0x1d0>
    79a2:	01 11       	cpse	r16, r1
    79a4:	5a c2       	rjmp	.+1204   	; 0x7e5a <vfprintf+0x682>
    79a6:	9b c2       	rjmp	.+1334   	; 0x7ede <vfprintf+0x706>
    79a8:	97 fe       	sbrs	r9, 7
    79aa:	10 c0       	rjmp	.+32     	; 0x79cc <vfprintf+0x1f4>
    79ac:	4c 0c       	add	r4, r12
    79ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    79b0:	f4 ff       	sbrs	r31, 4
    79b2:	04 c0       	rjmp	.+8      	; 0x79bc <vfprintf+0x1e4>
    79b4:	8a 81       	ldd	r24, Y+2	; 0x02
    79b6:	81 33       	cpi	r24, 0x31	; 49
    79b8:	09 f4       	brne	.+2      	; 0x79bc <vfprintf+0x1e4>
    79ba:	4a 94       	dec	r4
    79bc:	14 14       	cp	r1, r4
    79be:	74 f5       	brge	.+92     	; 0x7a1c <vfprintf+0x244>
    79c0:	28 e0       	ldi	r18, 0x08	; 8
    79c2:	24 15       	cp	r18, r4
    79c4:	78 f5       	brcc	.+94     	; 0x7a24 <vfprintf+0x24c>
    79c6:	88 e0       	ldi	r24, 0x08	; 8
    79c8:	48 2e       	mov	r4, r24
    79ca:	2c c0       	rjmp	.+88     	; 0x7a24 <vfprintf+0x24c>
    79cc:	96 fc       	sbrc	r9, 6
    79ce:	2a c0       	rjmp	.+84     	; 0x7a24 <vfprintf+0x24c>
    79d0:	81 2f       	mov	r24, r17
    79d2:	90 e0       	ldi	r25, 0x00	; 0
    79d4:	8c 15       	cp	r24, r12
    79d6:	9d 05       	cpc	r25, r13
    79d8:	9c f0       	brlt	.+38     	; 0x7a00 <vfprintf+0x228>
    79da:	3c ef       	ldi	r19, 0xFC	; 252
    79dc:	c3 16       	cp	r12, r19
    79de:	3f ef       	ldi	r19, 0xFF	; 255
    79e0:	d3 06       	cpc	r13, r19
    79e2:	74 f0       	brlt	.+28     	; 0x7a00 <vfprintf+0x228>
    79e4:	89 2d       	mov	r24, r9
    79e6:	80 68       	ori	r24, 0x80	; 128
    79e8:	98 2e       	mov	r9, r24
    79ea:	0a c0       	rjmp	.+20     	; 0x7a00 <vfprintf+0x228>
    79ec:	e2 e0       	ldi	r30, 0x02	; 2
    79ee:	f0 e0       	ldi	r31, 0x00	; 0
    79f0:	ec 0f       	add	r30, r28
    79f2:	fd 1f       	adc	r31, r29
    79f4:	e1 0f       	add	r30, r17
    79f6:	f1 1d       	adc	r31, r1
    79f8:	80 81       	ld	r24, Z
    79fa:	80 33       	cpi	r24, 0x30	; 48
    79fc:	19 f4       	brne	.+6      	; 0x7a04 <vfprintf+0x22c>
    79fe:	11 50       	subi	r17, 0x01	; 1
    7a00:	11 11       	cpse	r17, r1
    7a02:	f4 cf       	rjmp	.-24     	; 0x79ec <vfprintf+0x214>
    7a04:	97 fe       	sbrs	r9, 7
    7a06:	0e c0       	rjmp	.+28     	; 0x7a24 <vfprintf+0x24c>
    7a08:	44 24       	eor	r4, r4
    7a0a:	43 94       	inc	r4
    7a0c:	41 0e       	add	r4, r17
    7a0e:	81 2f       	mov	r24, r17
    7a10:	90 e0       	ldi	r25, 0x00	; 0
    7a12:	c8 16       	cp	r12, r24
    7a14:	d9 06       	cpc	r13, r25
    7a16:	2c f4       	brge	.+10     	; 0x7a22 <vfprintf+0x24a>
    7a18:	1c 19       	sub	r17, r12
    7a1a:	04 c0       	rjmp	.+8      	; 0x7a24 <vfprintf+0x24c>
    7a1c:	44 24       	eor	r4, r4
    7a1e:	43 94       	inc	r4
    7a20:	01 c0       	rjmp	.+2      	; 0x7a24 <vfprintf+0x24c>
    7a22:	10 e0       	ldi	r17, 0x00	; 0
    7a24:	97 fe       	sbrs	r9, 7
    7a26:	06 c0       	rjmp	.+12     	; 0x7a34 <vfprintf+0x25c>
    7a28:	1c 14       	cp	r1, r12
    7a2a:	1d 04       	cpc	r1, r13
    7a2c:	34 f4       	brge	.+12     	; 0x7a3a <vfprintf+0x262>
    7a2e:	c6 01       	movw	r24, r12
    7a30:	01 96       	adiw	r24, 0x01	; 1
    7a32:	05 c0       	rjmp	.+10     	; 0x7a3e <vfprintf+0x266>
    7a34:	85 e0       	ldi	r24, 0x05	; 5
    7a36:	90 e0       	ldi	r25, 0x00	; 0
    7a38:	02 c0       	rjmp	.+4      	; 0x7a3e <vfprintf+0x266>
    7a3a:	81 e0       	ldi	r24, 0x01	; 1
    7a3c:	90 e0       	ldi	r25, 0x00	; 0
    7a3e:	01 11       	cpse	r16, r1
    7a40:	01 96       	adiw	r24, 0x01	; 1
    7a42:	11 23       	and	r17, r17
    7a44:	31 f0       	breq	.+12     	; 0x7a52 <vfprintf+0x27a>
    7a46:	21 2f       	mov	r18, r17
    7a48:	30 e0       	ldi	r19, 0x00	; 0
    7a4a:	2f 5f       	subi	r18, 0xFF	; 255
    7a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a4e:	82 0f       	add	r24, r18
    7a50:	93 1f       	adc	r25, r19
    7a52:	25 2d       	mov	r18, r5
    7a54:	30 e0       	ldi	r19, 0x00	; 0
    7a56:	82 17       	cp	r24, r18
    7a58:	93 07       	cpc	r25, r19
    7a5a:	14 f4       	brge	.+4      	; 0x7a60 <vfprintf+0x288>
    7a5c:	58 1a       	sub	r5, r24
    7a5e:	01 c0       	rjmp	.+2      	; 0x7a62 <vfprintf+0x28a>
    7a60:	51 2c       	mov	r5, r1
    7a62:	89 2d       	mov	r24, r9
    7a64:	89 70       	andi	r24, 0x09	; 9
    7a66:	49 f4       	brne	.+18     	; 0x7a7a <vfprintf+0x2a2>
    7a68:	55 20       	and	r5, r5
    7a6a:	39 f0       	breq	.+14     	; 0x7a7a <vfprintf+0x2a2>
    7a6c:	b7 01       	movw	r22, r14
    7a6e:	80 e2       	ldi	r24, 0x20	; 32
    7a70:	90 e0       	ldi	r25, 0x00	; 0
    7a72:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7a76:	5a 94       	dec	r5
    7a78:	f7 cf       	rjmp	.-18     	; 0x7a68 <vfprintf+0x290>
    7a7a:	00 23       	and	r16, r16
    7a7c:	29 f0       	breq	.+10     	; 0x7a88 <vfprintf+0x2b0>
    7a7e:	b7 01       	movw	r22, r14
    7a80:	80 2f       	mov	r24, r16
    7a82:	90 e0       	ldi	r25, 0x00	; 0
    7a84:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7a88:	93 fc       	sbrc	r9, 3
    7a8a:	09 c0       	rjmp	.+18     	; 0x7a9e <vfprintf+0x2c6>
    7a8c:	55 20       	and	r5, r5
    7a8e:	39 f0       	breq	.+14     	; 0x7a9e <vfprintf+0x2c6>
    7a90:	b7 01       	movw	r22, r14
    7a92:	80 e3       	ldi	r24, 0x30	; 48
    7a94:	90 e0       	ldi	r25, 0x00	; 0
    7a96:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7a9a:	5a 94       	dec	r5
    7a9c:	f7 cf       	rjmp	.-18     	; 0x7a8c <vfprintf+0x2b4>
    7a9e:	97 fe       	sbrs	r9, 7
    7aa0:	4c c0       	rjmp	.+152    	; 0x7b3a <vfprintf+0x362>
    7aa2:	46 01       	movw	r8, r12
    7aa4:	d7 fe       	sbrs	r13, 7
    7aa6:	02 c0       	rjmp	.+4      	; 0x7aac <vfprintf+0x2d4>
    7aa8:	81 2c       	mov	r8, r1
    7aaa:	91 2c       	mov	r9, r1
    7aac:	c6 01       	movw	r24, r12
    7aae:	88 19       	sub	r24, r8
    7ab0:	99 09       	sbc	r25, r9
    7ab2:	f3 01       	movw	r30, r6
    7ab4:	e8 0f       	add	r30, r24
    7ab6:	f9 1f       	adc	r31, r25
    7ab8:	ed 87       	std	Y+13, r30	; 0x0d
    7aba:	fe 87       	std	Y+14, r31	; 0x0e
    7abc:	96 01       	movw	r18, r12
    7abe:	24 19       	sub	r18, r4
    7ac0:	31 09       	sbc	r19, r1
    7ac2:	2f 87       	std	Y+15, r18	; 0x0f
    7ac4:	38 8b       	std	Y+16, r19	; 0x10
    7ac6:	01 2f       	mov	r16, r17
    7ac8:	10 e0       	ldi	r17, 0x00	; 0
    7aca:	11 95       	neg	r17
    7acc:	01 95       	neg	r16
    7ace:	11 09       	sbc	r17, r1
    7ad0:	3f ef       	ldi	r19, 0xFF	; 255
    7ad2:	83 16       	cp	r8, r19
    7ad4:	93 06       	cpc	r9, r19
    7ad6:	29 f4       	brne	.+10     	; 0x7ae2 <vfprintf+0x30a>
    7ad8:	b7 01       	movw	r22, r14
    7ada:	8e e2       	ldi	r24, 0x2E	; 46
    7adc:	90 e0       	ldi	r25, 0x00	; 0
    7ade:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7ae2:	c8 14       	cp	r12, r8
    7ae4:	d9 04       	cpc	r13, r9
    7ae6:	4c f0       	brlt	.+18     	; 0x7afa <vfprintf+0x322>
    7ae8:	8f 85       	ldd	r24, Y+15	; 0x0f
    7aea:	98 89       	ldd	r25, Y+16	; 0x10
    7aec:	88 15       	cp	r24, r8
    7aee:	99 05       	cpc	r25, r9
    7af0:	24 f4       	brge	.+8      	; 0x7afa <vfprintf+0x322>
    7af2:	ed 85       	ldd	r30, Y+13	; 0x0d
    7af4:	fe 85       	ldd	r31, Y+14	; 0x0e
    7af6:	81 81       	ldd	r24, Z+1	; 0x01
    7af8:	01 c0       	rjmp	.+2      	; 0x7afc <vfprintf+0x324>
    7afa:	80 e3       	ldi	r24, 0x30	; 48
    7afc:	f1 e0       	ldi	r31, 0x01	; 1
    7afe:	8f 1a       	sub	r8, r31
    7b00:	91 08       	sbc	r9, r1
    7b02:	2d 85       	ldd	r18, Y+13	; 0x0d
    7b04:	3e 85       	ldd	r19, Y+14	; 0x0e
    7b06:	2f 5f       	subi	r18, 0xFF	; 255
    7b08:	3f 4f       	sbci	r19, 0xFF	; 255
    7b0a:	2d 87       	std	Y+13, r18	; 0x0d
    7b0c:	3e 87       	std	Y+14, r19	; 0x0e
    7b0e:	80 16       	cp	r8, r16
    7b10:	91 06       	cpc	r9, r17
    7b12:	2c f0       	brlt	.+10     	; 0x7b1e <vfprintf+0x346>
    7b14:	b7 01       	movw	r22, r14
    7b16:	90 e0       	ldi	r25, 0x00	; 0
    7b18:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7b1c:	d9 cf       	rjmp	.-78     	; 0x7ad0 <vfprintf+0x2f8>
    7b1e:	c8 14       	cp	r12, r8
    7b20:	d9 04       	cpc	r13, r9
    7b22:	41 f4       	brne	.+16     	; 0x7b34 <vfprintf+0x35c>
    7b24:	9a 81       	ldd	r25, Y+2	; 0x02
    7b26:	96 33       	cpi	r25, 0x36	; 54
    7b28:	20 f4       	brcc	.+8      	; 0x7b32 <vfprintf+0x35a>
    7b2a:	95 33       	cpi	r25, 0x35	; 53
    7b2c:	19 f4       	brne	.+6      	; 0x7b34 <vfprintf+0x35c>
    7b2e:	3c 85       	ldd	r19, Y+12	; 0x0c
    7b30:	34 ff       	sbrs	r19, 4
    7b32:	81 e3       	ldi	r24, 0x31	; 49
    7b34:	b7 01       	movw	r22, r14
    7b36:	90 e0       	ldi	r25, 0x00	; 0
    7b38:	4e c0       	rjmp	.+156    	; 0x7bd6 <vfprintf+0x3fe>
    7b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    7b3c:	81 33       	cpi	r24, 0x31	; 49
    7b3e:	19 f0       	breq	.+6      	; 0x7b46 <vfprintf+0x36e>
    7b40:	9c 85       	ldd	r25, Y+12	; 0x0c
    7b42:	9f 7e       	andi	r25, 0xEF	; 239
    7b44:	9c 87       	std	Y+12, r25	; 0x0c
    7b46:	b7 01       	movw	r22, r14
    7b48:	90 e0       	ldi	r25, 0x00	; 0
    7b4a:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7b4e:	11 11       	cpse	r17, r1
    7b50:	05 c0       	rjmp	.+10     	; 0x7b5c <vfprintf+0x384>
    7b52:	94 fc       	sbrc	r9, 4
    7b54:	18 c0       	rjmp	.+48     	; 0x7b86 <vfprintf+0x3ae>
    7b56:	85 e6       	ldi	r24, 0x65	; 101
    7b58:	90 e0       	ldi	r25, 0x00	; 0
    7b5a:	17 c0       	rjmp	.+46     	; 0x7b8a <vfprintf+0x3b2>
    7b5c:	b7 01       	movw	r22, r14
    7b5e:	8e e2       	ldi	r24, 0x2E	; 46
    7b60:	90 e0       	ldi	r25, 0x00	; 0
    7b62:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7b66:	1e 5f       	subi	r17, 0xFE	; 254
    7b68:	82 e0       	ldi	r24, 0x02	; 2
    7b6a:	01 e0       	ldi	r16, 0x01	; 1
    7b6c:	08 0f       	add	r16, r24
    7b6e:	f3 01       	movw	r30, r6
    7b70:	e8 0f       	add	r30, r24
    7b72:	f1 1d       	adc	r31, r1
    7b74:	80 81       	ld	r24, Z
    7b76:	b7 01       	movw	r22, r14
    7b78:	90 e0       	ldi	r25, 0x00	; 0
    7b7a:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7b7e:	80 2f       	mov	r24, r16
    7b80:	01 13       	cpse	r16, r17
    7b82:	f3 cf       	rjmp	.-26     	; 0x7b6a <vfprintf+0x392>
    7b84:	e6 cf       	rjmp	.-52     	; 0x7b52 <vfprintf+0x37a>
    7b86:	85 e4       	ldi	r24, 0x45	; 69
    7b88:	90 e0       	ldi	r25, 0x00	; 0
    7b8a:	b7 01       	movw	r22, r14
    7b8c:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7b90:	d7 fc       	sbrc	r13, 7
    7b92:	06 c0       	rjmp	.+12     	; 0x7ba0 <vfprintf+0x3c8>
    7b94:	c1 14       	cp	r12, r1
    7b96:	d1 04       	cpc	r13, r1
    7b98:	41 f4       	brne	.+16     	; 0x7baa <vfprintf+0x3d2>
    7b9a:	ec 85       	ldd	r30, Y+12	; 0x0c
    7b9c:	e4 ff       	sbrs	r30, 4
    7b9e:	05 c0       	rjmp	.+10     	; 0x7baa <vfprintf+0x3d2>
    7ba0:	d1 94       	neg	r13
    7ba2:	c1 94       	neg	r12
    7ba4:	d1 08       	sbc	r13, r1
    7ba6:	8d e2       	ldi	r24, 0x2D	; 45
    7ba8:	01 c0       	rjmp	.+2      	; 0x7bac <vfprintf+0x3d4>
    7baa:	8b e2       	ldi	r24, 0x2B	; 43
    7bac:	b7 01       	movw	r22, r14
    7bae:	90 e0       	ldi	r25, 0x00	; 0
    7bb0:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7bb4:	80 e3       	ldi	r24, 0x30	; 48
    7bb6:	2a e0       	ldi	r18, 0x0A	; 10
    7bb8:	c2 16       	cp	r12, r18
    7bba:	d1 04       	cpc	r13, r1
    7bbc:	2c f0       	brlt	.+10     	; 0x7bc8 <vfprintf+0x3f0>
    7bbe:	8f 5f       	subi	r24, 0xFF	; 255
    7bc0:	fa e0       	ldi	r31, 0x0A	; 10
    7bc2:	cf 1a       	sub	r12, r31
    7bc4:	d1 08       	sbc	r13, r1
    7bc6:	f7 cf       	rjmp	.-18     	; 0x7bb6 <vfprintf+0x3de>
    7bc8:	b7 01       	movw	r22, r14
    7bca:	90 e0       	ldi	r25, 0x00	; 0
    7bcc:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7bd0:	b7 01       	movw	r22, r14
    7bd2:	c6 01       	movw	r24, r12
    7bd4:	c0 96       	adiw	r24, 0x30	; 48
    7bd6:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7bda:	54 c1       	rjmp	.+680    	; 0x7e84 <vfprintf+0x6ac>
    7bdc:	83 36       	cpi	r24, 0x63	; 99
    7bde:	31 f0       	breq	.+12     	; 0x7bec <vfprintf+0x414>
    7be0:	83 37       	cpi	r24, 0x73	; 115
    7be2:	79 f0       	breq	.+30     	; 0x7c02 <vfprintf+0x42a>
    7be4:	83 35       	cpi	r24, 0x53	; 83
    7be6:	09 f0       	breq	.+2      	; 0x7bea <vfprintf+0x412>
    7be8:	56 c0       	rjmp	.+172    	; 0x7c96 <vfprintf+0x4be>
    7bea:	20 c0       	rjmp	.+64     	; 0x7c2c <vfprintf+0x454>
    7bec:	56 01       	movw	r10, r12
    7bee:	32 e0       	ldi	r19, 0x02	; 2
    7bf0:	a3 0e       	add	r10, r19
    7bf2:	b1 1c       	adc	r11, r1
    7bf4:	f6 01       	movw	r30, r12
    7bf6:	80 81       	ld	r24, Z
    7bf8:	89 83       	std	Y+1, r24	; 0x01
    7bfa:	01 e0       	ldi	r16, 0x01	; 1
    7bfc:	10 e0       	ldi	r17, 0x00	; 0
    7bfe:	63 01       	movw	r12, r6
    7c00:	12 c0       	rjmp	.+36     	; 0x7c26 <vfprintf+0x44e>
    7c02:	56 01       	movw	r10, r12
    7c04:	f2 e0       	ldi	r31, 0x02	; 2
    7c06:	af 0e       	add	r10, r31
    7c08:	b1 1c       	adc	r11, r1
    7c0a:	f6 01       	movw	r30, r12
    7c0c:	c0 80       	ld	r12, Z
    7c0e:	d1 80       	ldd	r13, Z+1	; 0x01
    7c10:	96 fe       	sbrs	r9, 6
    7c12:	03 c0       	rjmp	.+6      	; 0x7c1a <vfprintf+0x442>
    7c14:	61 2f       	mov	r22, r17
    7c16:	70 e0       	ldi	r23, 0x00	; 0
    7c18:	02 c0       	rjmp	.+4      	; 0x7c1e <vfprintf+0x446>
    7c1a:	6f ef       	ldi	r22, 0xFF	; 255
    7c1c:	7f ef       	ldi	r23, 0xFF	; 255
    7c1e:	c6 01       	movw	r24, r12
    7c20:	0e 94 d6 4c 	call	0x99ac	; 0x99ac <strnlen>
    7c24:	8c 01       	movw	r16, r24
    7c26:	f9 2d       	mov	r31, r9
    7c28:	ff 77       	andi	r31, 0x7F	; 127
    7c2a:	14 c0       	rjmp	.+40     	; 0x7c54 <vfprintf+0x47c>
    7c2c:	56 01       	movw	r10, r12
    7c2e:	22 e0       	ldi	r18, 0x02	; 2
    7c30:	a2 0e       	add	r10, r18
    7c32:	b1 1c       	adc	r11, r1
    7c34:	f6 01       	movw	r30, r12
    7c36:	c0 80       	ld	r12, Z
    7c38:	d1 80       	ldd	r13, Z+1	; 0x01
    7c3a:	96 fe       	sbrs	r9, 6
    7c3c:	03 c0       	rjmp	.+6      	; 0x7c44 <vfprintf+0x46c>
    7c3e:	61 2f       	mov	r22, r17
    7c40:	70 e0       	ldi	r23, 0x00	; 0
    7c42:	02 c0       	rjmp	.+4      	; 0x7c48 <vfprintf+0x470>
    7c44:	6f ef       	ldi	r22, 0xFF	; 255
    7c46:	7f ef       	ldi	r23, 0xFF	; 255
    7c48:	c6 01       	movw	r24, r12
    7c4a:	0e 94 90 4c 	call	0x9920	; 0x9920 <strnlen_P>
    7c4e:	8c 01       	movw	r16, r24
    7c50:	f9 2d       	mov	r31, r9
    7c52:	f0 68       	ori	r31, 0x80	; 128
    7c54:	9f 2e       	mov	r9, r31
    7c56:	f3 fd       	sbrc	r31, 3
    7c58:	1a c0       	rjmp	.+52     	; 0x7c8e <vfprintf+0x4b6>
    7c5a:	85 2d       	mov	r24, r5
    7c5c:	90 e0       	ldi	r25, 0x00	; 0
    7c5e:	08 17       	cp	r16, r24
    7c60:	19 07       	cpc	r17, r25
    7c62:	a8 f4       	brcc	.+42     	; 0x7c8e <vfprintf+0x4b6>
    7c64:	b7 01       	movw	r22, r14
    7c66:	80 e2       	ldi	r24, 0x20	; 32
    7c68:	90 e0       	ldi	r25, 0x00	; 0
    7c6a:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7c6e:	5a 94       	dec	r5
    7c70:	f4 cf       	rjmp	.-24     	; 0x7c5a <vfprintf+0x482>
    7c72:	f6 01       	movw	r30, r12
    7c74:	97 fc       	sbrc	r9, 7
    7c76:	85 91       	lpm	r24, Z+
    7c78:	97 fe       	sbrs	r9, 7
    7c7a:	81 91       	ld	r24, Z+
    7c7c:	6f 01       	movw	r12, r30
    7c7e:	b7 01       	movw	r22, r14
    7c80:	90 e0       	ldi	r25, 0x00	; 0
    7c82:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7c86:	51 10       	cpse	r5, r1
    7c88:	5a 94       	dec	r5
    7c8a:	01 50       	subi	r16, 0x01	; 1
    7c8c:	11 09       	sbc	r17, r1
    7c8e:	01 15       	cp	r16, r1
    7c90:	11 05       	cpc	r17, r1
    7c92:	79 f7       	brne	.-34     	; 0x7c72 <vfprintf+0x49a>
    7c94:	f7 c0       	rjmp	.+494    	; 0x7e84 <vfprintf+0x6ac>
    7c96:	84 36       	cpi	r24, 0x64	; 100
    7c98:	11 f0       	breq	.+4      	; 0x7c9e <vfprintf+0x4c6>
    7c9a:	89 36       	cpi	r24, 0x69	; 105
    7c9c:	61 f5       	brne	.+88     	; 0x7cf6 <vfprintf+0x51e>
    7c9e:	56 01       	movw	r10, r12
    7ca0:	97 fe       	sbrs	r9, 7
    7ca2:	09 c0       	rjmp	.+18     	; 0x7cb6 <vfprintf+0x4de>
    7ca4:	24 e0       	ldi	r18, 0x04	; 4
    7ca6:	a2 0e       	add	r10, r18
    7ca8:	b1 1c       	adc	r11, r1
    7caa:	f6 01       	movw	r30, r12
    7cac:	60 81       	ld	r22, Z
    7cae:	71 81       	ldd	r23, Z+1	; 0x01
    7cb0:	82 81       	ldd	r24, Z+2	; 0x02
    7cb2:	93 81       	ldd	r25, Z+3	; 0x03
    7cb4:	0a c0       	rjmp	.+20     	; 0x7cca <vfprintf+0x4f2>
    7cb6:	f2 e0       	ldi	r31, 0x02	; 2
    7cb8:	af 0e       	add	r10, r31
    7cba:	b1 1c       	adc	r11, r1
    7cbc:	f6 01       	movw	r30, r12
    7cbe:	60 81       	ld	r22, Z
    7cc0:	71 81       	ldd	r23, Z+1	; 0x01
    7cc2:	07 2e       	mov	r0, r23
    7cc4:	00 0c       	add	r0, r0
    7cc6:	88 0b       	sbc	r24, r24
    7cc8:	99 0b       	sbc	r25, r25
    7cca:	f9 2d       	mov	r31, r9
    7ccc:	ff 76       	andi	r31, 0x6F	; 111
    7cce:	9f 2e       	mov	r9, r31
    7cd0:	97 ff       	sbrs	r25, 7
    7cd2:	09 c0       	rjmp	.+18     	; 0x7ce6 <vfprintf+0x50e>
    7cd4:	90 95       	com	r25
    7cd6:	80 95       	com	r24
    7cd8:	70 95       	com	r23
    7cda:	61 95       	neg	r22
    7cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    7cde:	8f 4f       	sbci	r24, 0xFF	; 255
    7ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    7ce2:	f0 68       	ori	r31, 0x80	; 128
    7ce4:	9f 2e       	mov	r9, r31
    7ce6:	2a e0       	ldi	r18, 0x0A	; 10
    7ce8:	30 e0       	ldi	r19, 0x00	; 0
    7cea:	a3 01       	movw	r20, r6
    7cec:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <__ultoa_invert>
    7cf0:	c8 2e       	mov	r12, r24
    7cf2:	c6 18       	sub	r12, r6
    7cf4:	3f c0       	rjmp	.+126    	; 0x7d74 <vfprintf+0x59c>
    7cf6:	09 2d       	mov	r16, r9
    7cf8:	85 37       	cpi	r24, 0x75	; 117
    7cfa:	21 f4       	brne	.+8      	; 0x7d04 <vfprintf+0x52c>
    7cfc:	0f 7e       	andi	r16, 0xEF	; 239
    7cfe:	2a e0       	ldi	r18, 0x0A	; 10
    7d00:	30 e0       	ldi	r19, 0x00	; 0
    7d02:	1d c0       	rjmp	.+58     	; 0x7d3e <vfprintf+0x566>
    7d04:	09 7f       	andi	r16, 0xF9	; 249
    7d06:	8f 36       	cpi	r24, 0x6F	; 111
    7d08:	91 f0       	breq	.+36     	; 0x7d2e <vfprintf+0x556>
    7d0a:	18 f4       	brcc	.+6      	; 0x7d12 <vfprintf+0x53a>
    7d0c:	88 35       	cpi	r24, 0x58	; 88
    7d0e:	59 f0       	breq	.+22     	; 0x7d26 <vfprintf+0x54e>
    7d10:	c3 c0       	rjmp	.+390    	; 0x7e98 <vfprintf+0x6c0>
    7d12:	80 37       	cpi	r24, 0x70	; 112
    7d14:	19 f0       	breq	.+6      	; 0x7d1c <vfprintf+0x544>
    7d16:	88 37       	cpi	r24, 0x78	; 120
    7d18:	11 f0       	breq	.+4      	; 0x7d1e <vfprintf+0x546>
    7d1a:	be c0       	rjmp	.+380    	; 0x7e98 <vfprintf+0x6c0>
    7d1c:	00 61       	ori	r16, 0x10	; 16
    7d1e:	04 ff       	sbrs	r16, 4
    7d20:	09 c0       	rjmp	.+18     	; 0x7d34 <vfprintf+0x55c>
    7d22:	04 60       	ori	r16, 0x04	; 4
    7d24:	07 c0       	rjmp	.+14     	; 0x7d34 <vfprintf+0x55c>
    7d26:	94 fe       	sbrs	r9, 4
    7d28:	08 c0       	rjmp	.+16     	; 0x7d3a <vfprintf+0x562>
    7d2a:	06 60       	ori	r16, 0x06	; 6
    7d2c:	06 c0       	rjmp	.+12     	; 0x7d3a <vfprintf+0x562>
    7d2e:	28 e0       	ldi	r18, 0x08	; 8
    7d30:	30 e0       	ldi	r19, 0x00	; 0
    7d32:	05 c0       	rjmp	.+10     	; 0x7d3e <vfprintf+0x566>
    7d34:	20 e1       	ldi	r18, 0x10	; 16
    7d36:	30 e0       	ldi	r19, 0x00	; 0
    7d38:	02 c0       	rjmp	.+4      	; 0x7d3e <vfprintf+0x566>
    7d3a:	20 e1       	ldi	r18, 0x10	; 16
    7d3c:	32 e0       	ldi	r19, 0x02	; 2
    7d3e:	56 01       	movw	r10, r12
    7d40:	07 ff       	sbrs	r16, 7
    7d42:	09 c0       	rjmp	.+18     	; 0x7d56 <vfprintf+0x57e>
    7d44:	84 e0       	ldi	r24, 0x04	; 4
    7d46:	a8 0e       	add	r10, r24
    7d48:	b1 1c       	adc	r11, r1
    7d4a:	f6 01       	movw	r30, r12
    7d4c:	60 81       	ld	r22, Z
    7d4e:	71 81       	ldd	r23, Z+1	; 0x01
    7d50:	82 81       	ldd	r24, Z+2	; 0x02
    7d52:	93 81       	ldd	r25, Z+3	; 0x03
    7d54:	08 c0       	rjmp	.+16     	; 0x7d66 <vfprintf+0x58e>
    7d56:	f2 e0       	ldi	r31, 0x02	; 2
    7d58:	af 0e       	add	r10, r31
    7d5a:	b1 1c       	adc	r11, r1
    7d5c:	f6 01       	movw	r30, r12
    7d5e:	60 81       	ld	r22, Z
    7d60:	71 81       	ldd	r23, Z+1	; 0x01
    7d62:	80 e0       	ldi	r24, 0x00	; 0
    7d64:	90 e0       	ldi	r25, 0x00	; 0
    7d66:	a3 01       	movw	r20, r6
    7d68:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <__ultoa_invert>
    7d6c:	c8 2e       	mov	r12, r24
    7d6e:	c6 18       	sub	r12, r6
    7d70:	0f 77       	andi	r16, 0x7F	; 127
    7d72:	90 2e       	mov	r9, r16
    7d74:	96 fe       	sbrs	r9, 6
    7d76:	0b c0       	rjmp	.+22     	; 0x7d8e <vfprintf+0x5b6>
    7d78:	09 2d       	mov	r16, r9
    7d7a:	0e 7f       	andi	r16, 0xFE	; 254
    7d7c:	c1 16       	cp	r12, r17
    7d7e:	50 f4       	brcc	.+20     	; 0x7d94 <vfprintf+0x5bc>
    7d80:	94 fe       	sbrs	r9, 4
    7d82:	0a c0       	rjmp	.+20     	; 0x7d98 <vfprintf+0x5c0>
    7d84:	92 fc       	sbrc	r9, 2
    7d86:	08 c0       	rjmp	.+16     	; 0x7d98 <vfprintf+0x5c0>
    7d88:	09 2d       	mov	r16, r9
    7d8a:	0e 7e       	andi	r16, 0xEE	; 238
    7d8c:	05 c0       	rjmp	.+10     	; 0x7d98 <vfprintf+0x5c0>
    7d8e:	dc 2c       	mov	r13, r12
    7d90:	09 2d       	mov	r16, r9
    7d92:	03 c0       	rjmp	.+6      	; 0x7d9a <vfprintf+0x5c2>
    7d94:	dc 2c       	mov	r13, r12
    7d96:	01 c0       	rjmp	.+2      	; 0x7d9a <vfprintf+0x5c2>
    7d98:	d1 2e       	mov	r13, r17
    7d9a:	04 ff       	sbrs	r16, 4
    7d9c:	0d c0       	rjmp	.+26     	; 0x7db8 <vfprintf+0x5e0>
    7d9e:	fe 01       	movw	r30, r28
    7da0:	ec 0d       	add	r30, r12
    7da2:	f1 1d       	adc	r31, r1
    7da4:	80 81       	ld	r24, Z
    7da6:	80 33       	cpi	r24, 0x30	; 48
    7da8:	11 f4       	brne	.+4      	; 0x7dae <vfprintf+0x5d6>
    7daa:	09 7e       	andi	r16, 0xE9	; 233
    7dac:	09 c0       	rjmp	.+18     	; 0x7dc0 <vfprintf+0x5e8>
    7dae:	02 ff       	sbrs	r16, 2
    7db0:	06 c0       	rjmp	.+12     	; 0x7dbe <vfprintf+0x5e6>
    7db2:	d3 94       	inc	r13
    7db4:	d3 94       	inc	r13
    7db6:	04 c0       	rjmp	.+8      	; 0x7dc0 <vfprintf+0x5e8>
    7db8:	80 2f       	mov	r24, r16
    7dba:	86 78       	andi	r24, 0x86	; 134
    7dbc:	09 f0       	breq	.+2      	; 0x7dc0 <vfprintf+0x5e8>
    7dbe:	d3 94       	inc	r13
    7dc0:	03 fd       	sbrc	r16, 3
    7dc2:	11 c0       	rjmp	.+34     	; 0x7de6 <vfprintf+0x60e>
    7dc4:	00 ff       	sbrs	r16, 0
    7dc6:	06 c0       	rjmp	.+12     	; 0x7dd4 <vfprintf+0x5fc>
    7dc8:	1c 2d       	mov	r17, r12
    7dca:	d5 14       	cp	r13, r5
    7dcc:	80 f4       	brcc	.+32     	; 0x7dee <vfprintf+0x616>
    7dce:	15 0d       	add	r17, r5
    7dd0:	1d 19       	sub	r17, r13
    7dd2:	0d c0       	rjmp	.+26     	; 0x7dee <vfprintf+0x616>
    7dd4:	d5 14       	cp	r13, r5
    7dd6:	58 f4       	brcc	.+22     	; 0x7dee <vfprintf+0x616>
    7dd8:	b7 01       	movw	r22, r14
    7dda:	80 e2       	ldi	r24, 0x20	; 32
    7ddc:	90 e0       	ldi	r25, 0x00	; 0
    7dde:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7de2:	d3 94       	inc	r13
    7de4:	f7 cf       	rjmp	.-18     	; 0x7dd4 <vfprintf+0x5fc>
    7de6:	d5 14       	cp	r13, r5
    7de8:	10 f4       	brcc	.+4      	; 0x7dee <vfprintf+0x616>
    7dea:	5d 18       	sub	r5, r13
    7dec:	01 c0       	rjmp	.+2      	; 0x7df0 <vfprintf+0x618>
    7dee:	51 2c       	mov	r5, r1
    7df0:	04 ff       	sbrs	r16, 4
    7df2:	10 c0       	rjmp	.+32     	; 0x7e14 <vfprintf+0x63c>
    7df4:	b7 01       	movw	r22, r14
    7df6:	80 e3       	ldi	r24, 0x30	; 48
    7df8:	90 e0       	ldi	r25, 0x00	; 0
    7dfa:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7dfe:	02 ff       	sbrs	r16, 2
    7e00:	17 c0       	rjmp	.+46     	; 0x7e30 <vfprintf+0x658>
    7e02:	01 fd       	sbrc	r16, 1
    7e04:	03 c0       	rjmp	.+6      	; 0x7e0c <vfprintf+0x634>
    7e06:	88 e7       	ldi	r24, 0x78	; 120
    7e08:	90 e0       	ldi	r25, 0x00	; 0
    7e0a:	02 c0       	rjmp	.+4      	; 0x7e10 <vfprintf+0x638>
    7e0c:	88 e5       	ldi	r24, 0x58	; 88
    7e0e:	90 e0       	ldi	r25, 0x00	; 0
    7e10:	b7 01       	movw	r22, r14
    7e12:	0c c0       	rjmp	.+24     	; 0x7e2c <vfprintf+0x654>
    7e14:	80 2f       	mov	r24, r16
    7e16:	86 78       	andi	r24, 0x86	; 134
    7e18:	59 f0       	breq	.+22     	; 0x7e30 <vfprintf+0x658>
    7e1a:	01 ff       	sbrs	r16, 1
    7e1c:	02 c0       	rjmp	.+4      	; 0x7e22 <vfprintf+0x64a>
    7e1e:	8b e2       	ldi	r24, 0x2B	; 43
    7e20:	01 c0       	rjmp	.+2      	; 0x7e24 <vfprintf+0x64c>
    7e22:	80 e2       	ldi	r24, 0x20	; 32
    7e24:	07 fd       	sbrc	r16, 7
    7e26:	8d e2       	ldi	r24, 0x2D	; 45
    7e28:	b7 01       	movw	r22, r14
    7e2a:	90 e0       	ldi	r25, 0x00	; 0
    7e2c:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7e30:	c1 16       	cp	r12, r17
    7e32:	38 f4       	brcc	.+14     	; 0x7e42 <vfprintf+0x66a>
    7e34:	b7 01       	movw	r22, r14
    7e36:	80 e3       	ldi	r24, 0x30	; 48
    7e38:	90 e0       	ldi	r25, 0x00	; 0
    7e3a:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7e3e:	11 50       	subi	r17, 0x01	; 1
    7e40:	f7 cf       	rjmp	.-18     	; 0x7e30 <vfprintf+0x658>
    7e42:	ca 94       	dec	r12
    7e44:	f3 01       	movw	r30, r6
    7e46:	ec 0d       	add	r30, r12
    7e48:	f1 1d       	adc	r31, r1
    7e4a:	80 81       	ld	r24, Z
    7e4c:	b7 01       	movw	r22, r14
    7e4e:	90 e0       	ldi	r25, 0x00	; 0
    7e50:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7e54:	c1 10       	cpse	r12, r1
    7e56:	f5 cf       	rjmp	.-22     	; 0x7e42 <vfprintf+0x66a>
    7e58:	15 c0       	rjmp	.+42     	; 0x7e84 <vfprintf+0x6ac>
    7e5a:	f4 e0       	ldi	r31, 0x04	; 4
    7e5c:	f5 15       	cp	r31, r5
    7e5e:	60 f5       	brcc	.+88     	; 0x7eb8 <vfprintf+0x6e0>
    7e60:	84 e0       	ldi	r24, 0x04	; 4
    7e62:	58 1a       	sub	r5, r24
    7e64:	93 fe       	sbrs	r9, 3
    7e66:	1f c0       	rjmp	.+62     	; 0x7ea6 <vfprintf+0x6ce>
    7e68:	01 11       	cpse	r16, r1
    7e6a:	27 c0       	rjmp	.+78     	; 0x7eba <vfprintf+0x6e2>
    7e6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    7e6e:	23 ff       	sbrs	r18, 3
    7e70:	2a c0       	rjmp	.+84     	; 0x7ec6 <vfprintf+0x6ee>
    7e72:	0a e4       	ldi	r16, 0x4A	; 74
    7e74:	13 e0       	ldi	r17, 0x03	; 3
    7e76:	39 2d       	mov	r19, r9
    7e78:	30 71       	andi	r19, 0x10	; 16
    7e7a:	93 2e       	mov	r9, r19
    7e7c:	f8 01       	movw	r30, r16
    7e7e:	84 91       	lpm	r24, Z
    7e80:	81 11       	cpse	r24, r1
    7e82:	24 c0       	rjmp	.+72     	; 0x7ecc <vfprintf+0x6f4>
    7e84:	55 20       	and	r5, r5
    7e86:	09 f4       	brne	.+2      	; 0x7e8a <vfprintf+0x6b2>
    7e88:	e4 cc       	rjmp	.-1592   	; 0x7852 <vfprintf+0x7a>
    7e8a:	b7 01       	movw	r22, r14
    7e8c:	80 e2       	ldi	r24, 0x20	; 32
    7e8e:	90 e0       	ldi	r25, 0x00	; 0
    7e90:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7e94:	5a 94       	dec	r5
    7e96:	f6 cf       	rjmp	.-20     	; 0x7e84 <vfprintf+0x6ac>
    7e98:	f7 01       	movw	r30, r14
    7e9a:	86 81       	ldd	r24, Z+6	; 0x06
    7e9c:	97 81       	ldd	r25, Z+7	; 0x07
    7e9e:	26 c0       	rjmp	.+76     	; 0x7eec <vfprintf+0x714>
    7ea0:	8f ef       	ldi	r24, 0xFF	; 255
    7ea2:	9f ef       	ldi	r25, 0xFF	; 255
    7ea4:	23 c0       	rjmp	.+70     	; 0x7eec <vfprintf+0x714>
    7ea6:	b7 01       	movw	r22, r14
    7ea8:	80 e2       	ldi	r24, 0x20	; 32
    7eaa:	90 e0       	ldi	r25, 0x00	; 0
    7eac:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7eb0:	5a 94       	dec	r5
    7eb2:	51 10       	cpse	r5, r1
    7eb4:	f8 cf       	rjmp	.-16     	; 0x7ea6 <vfprintf+0x6ce>
    7eb6:	d8 cf       	rjmp	.-80     	; 0x7e68 <vfprintf+0x690>
    7eb8:	51 2c       	mov	r5, r1
    7eba:	b7 01       	movw	r22, r14
    7ebc:	80 2f       	mov	r24, r16
    7ebe:	90 e0       	ldi	r25, 0x00	; 0
    7ec0:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7ec4:	d3 cf       	rjmp	.-90     	; 0x7e6c <vfprintf+0x694>
    7ec6:	0e e4       	ldi	r16, 0x4E	; 78
    7ec8:	13 e0       	ldi	r17, 0x03	; 3
    7eca:	d5 cf       	rjmp	.-86     	; 0x7e76 <vfprintf+0x69e>
    7ecc:	91 10       	cpse	r9, r1
    7ece:	80 52       	subi	r24, 0x20	; 32
    7ed0:	b7 01       	movw	r22, r14
    7ed2:	90 e0       	ldi	r25, 0x00	; 0
    7ed4:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <fputc>
    7ed8:	0f 5f       	subi	r16, 0xFF	; 255
    7eda:	1f 4f       	sbci	r17, 0xFF	; 255
    7edc:	cf cf       	rjmp	.-98     	; 0x7e7c <vfprintf+0x6a4>
    7ede:	23 e0       	ldi	r18, 0x03	; 3
    7ee0:	25 15       	cp	r18, r5
    7ee2:	10 f4       	brcc	.+4      	; 0x7ee8 <vfprintf+0x710>
    7ee4:	83 e0       	ldi	r24, 0x03	; 3
    7ee6:	bd cf       	rjmp	.-134    	; 0x7e62 <vfprintf+0x68a>
    7ee8:	51 2c       	mov	r5, r1
    7eea:	c0 cf       	rjmp	.-128    	; 0x7e6c <vfprintf+0x694>
    7eec:	60 96       	adiw	r28, 0x10	; 16
    7eee:	cd bf       	out	0x3d, r28	; 61
    7ef0:	de bf       	out	0x3e, r29	; 62
    7ef2:	df 91       	pop	r29
    7ef4:	cf 91       	pop	r28
    7ef6:	1f 91       	pop	r17
    7ef8:	0f 91       	pop	r16
    7efa:	ff 90       	pop	r15
    7efc:	ef 90       	pop	r14
    7efe:	df 90       	pop	r13
    7f00:	cf 90       	pop	r12
    7f02:	bf 90       	pop	r11
    7f04:	af 90       	pop	r10
    7f06:	9f 90       	pop	r9
    7f08:	8f 90       	pop	r8
    7f0a:	7f 90       	pop	r7
    7f0c:	6f 90       	pop	r6
    7f0e:	5f 90       	pop	r5
    7f10:	4f 90       	pop	r4
    7f12:	3f 90       	pop	r3
    7f14:	2f 90       	pop	r2
    7f16:	08 95       	ret

00007f18 <putval>:
    7f18:	20 fd       	sbrc	r18, 0
    7f1a:	09 c0       	rjmp	.+18     	; 0x7f2e <putval+0x16>
    7f1c:	fc 01       	movw	r30, r24
    7f1e:	23 fd       	sbrc	r18, 3
    7f20:	05 c0       	rjmp	.+10     	; 0x7f2c <putval+0x14>
    7f22:	22 ff       	sbrs	r18, 2
    7f24:	02 c0       	rjmp	.+4      	; 0x7f2a <putval+0x12>
    7f26:	73 83       	std	Z+3, r23	; 0x03
    7f28:	62 83       	std	Z+2, r22	; 0x02
    7f2a:	51 83       	std	Z+1, r21	; 0x01
    7f2c:	40 83       	st	Z, r20
    7f2e:	08 95       	ret

00007f30 <mulacc>:
    7f30:	44 fd       	sbrc	r20, 4
    7f32:	17 c0       	rjmp	.+46     	; 0x7f62 <mulacc+0x32>
    7f34:	46 fd       	sbrc	r20, 6
    7f36:	17 c0       	rjmp	.+46     	; 0x7f66 <mulacc+0x36>
    7f38:	ab 01       	movw	r20, r22
    7f3a:	bc 01       	movw	r22, r24
    7f3c:	da 01       	movw	r26, r20
    7f3e:	fb 01       	movw	r30, r22
    7f40:	aa 0f       	add	r26, r26
    7f42:	bb 1f       	adc	r27, r27
    7f44:	ee 1f       	adc	r30, r30
    7f46:	ff 1f       	adc	r31, r31
    7f48:	10 94       	com	r1
    7f4a:	d1 f7       	brne	.-12     	; 0x7f40 <mulacc+0x10>
    7f4c:	4a 0f       	add	r20, r26
    7f4e:	5b 1f       	adc	r21, r27
    7f50:	6e 1f       	adc	r22, r30
    7f52:	7f 1f       	adc	r23, r31
    7f54:	cb 01       	movw	r24, r22
    7f56:	ba 01       	movw	r22, r20
    7f58:	66 0f       	add	r22, r22
    7f5a:	77 1f       	adc	r23, r23
    7f5c:	88 1f       	adc	r24, r24
    7f5e:	99 1f       	adc	r25, r25
    7f60:	09 c0       	rjmp	.+18     	; 0x7f74 <mulacc+0x44>
    7f62:	33 e0       	ldi	r19, 0x03	; 3
    7f64:	01 c0       	rjmp	.+2      	; 0x7f68 <mulacc+0x38>
    7f66:	34 e0       	ldi	r19, 0x04	; 4
    7f68:	66 0f       	add	r22, r22
    7f6a:	77 1f       	adc	r23, r23
    7f6c:	88 1f       	adc	r24, r24
    7f6e:	99 1f       	adc	r25, r25
    7f70:	31 50       	subi	r19, 0x01	; 1
    7f72:	d1 f7       	brne	.-12     	; 0x7f68 <mulacc+0x38>
    7f74:	62 0f       	add	r22, r18
    7f76:	71 1d       	adc	r23, r1
    7f78:	81 1d       	adc	r24, r1
    7f7a:	91 1d       	adc	r25, r1
    7f7c:	08 95       	ret

00007f7e <skip_spaces>:
    7f7e:	0f 93       	push	r16
    7f80:	1f 93       	push	r17
    7f82:	cf 93       	push	r28
    7f84:	df 93       	push	r29
    7f86:	8c 01       	movw	r16, r24
    7f88:	c8 01       	movw	r24, r16
    7f8a:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    7f8e:	ec 01       	movw	r28, r24
    7f90:	97 fd       	sbrc	r25, 7
    7f92:	08 c0       	rjmp	.+16     	; 0x7fa4 <skip_spaces+0x26>
    7f94:	0e 94 6b 4c 	call	0x98d6	; 0x98d6 <isspace>
    7f98:	89 2b       	or	r24, r25
    7f9a:	b1 f7       	brne	.-20     	; 0x7f88 <skip_spaces+0xa>
    7f9c:	b8 01       	movw	r22, r16
    7f9e:	ce 01       	movw	r24, r28
    7fa0:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <ungetc>
    7fa4:	ce 01       	movw	r24, r28
    7fa6:	df 91       	pop	r29
    7fa8:	cf 91       	pop	r28
    7faa:	1f 91       	pop	r17
    7fac:	0f 91       	pop	r16
    7fae:	08 95       	ret

00007fb0 <conv_int>:
    7fb0:	8f 92       	push	r8
    7fb2:	9f 92       	push	r9
    7fb4:	af 92       	push	r10
    7fb6:	bf 92       	push	r11
    7fb8:	cf 92       	push	r12
    7fba:	df 92       	push	r13
    7fbc:	ef 92       	push	r14
    7fbe:	ff 92       	push	r15
    7fc0:	0f 93       	push	r16
    7fc2:	1f 93       	push	r17
    7fc4:	cf 93       	push	r28
    7fc6:	df 93       	push	r29
    7fc8:	7c 01       	movw	r14, r24
    7fca:	8b 01       	movw	r16, r22
    7fcc:	6a 01       	movw	r12, r20
    7fce:	d2 2f       	mov	r29, r18
    7fd0:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    7fd4:	9c 01       	movw	r18, r24
    7fd6:	33 27       	eor	r19, r19
    7fd8:	2b 32       	cpi	r18, 0x2B	; 43
    7fda:	31 05       	cpc	r19, r1
    7fdc:	21 f0       	breq	.+8      	; 0x7fe6 <conv_int+0x36>
    7fde:	2d 32       	cpi	r18, 0x2D	; 45
    7fe0:	31 05       	cpc	r19, r1
    7fe2:	59 f4       	brne	.+22     	; 0x7ffa <conv_int+0x4a>
    7fe4:	d0 68       	ori	r29, 0x80	; 128
    7fe6:	01 50       	subi	r16, 0x01	; 1
    7fe8:	11 09       	sbc	r17, r1
    7fea:	11 f4       	brne	.+4      	; 0x7ff0 <conv_int+0x40>
    7fec:	80 e0       	ldi	r24, 0x00	; 0
    7fee:	6b c0       	rjmp	.+214    	; 0x80c6 <conv_int+0x116>
    7ff0:	c7 01       	movw	r24, r14
    7ff2:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    7ff6:	97 fd       	sbrc	r25, 7
    7ff8:	f9 cf       	rjmp	.-14     	; 0x7fec <conv_int+0x3c>
    7ffa:	cd 2f       	mov	r28, r29
    7ffc:	cd 7f       	andi	r28, 0xFD	; 253
    7ffe:	2d 2f       	mov	r18, r29
    8000:	20 73       	andi	r18, 0x30	; 48
    8002:	19 f5       	brne	.+70     	; 0x804a <conv_int+0x9a>
    8004:	80 33       	cpi	r24, 0x30	; 48
    8006:	09 f5       	brne	.+66     	; 0x804a <conv_int+0x9a>
    8008:	58 01       	movw	r10, r16
    800a:	81 e0       	ldi	r24, 0x01	; 1
    800c:	a8 1a       	sub	r10, r24
    800e:	b1 08       	sbc	r11, r1
    8010:	09 f4       	brne	.+2      	; 0x8014 <conv_int+0x64>
    8012:	45 c0       	rjmp	.+138    	; 0x809e <conv_int+0xee>
    8014:	c7 01       	movw	r24, r14
    8016:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    801a:	97 fd       	sbrc	r25, 7
    801c:	40 c0       	rjmp	.+128    	; 0x809e <conv_int+0xee>
    801e:	9c 01       	movw	r18, r24
    8020:	2f 7d       	andi	r18, 0xDF	; 223
    8022:	33 27       	eor	r19, r19
    8024:	28 35       	cpi	r18, 0x58	; 88
    8026:	31 05       	cpc	r19, r1
    8028:	51 f4       	brne	.+20     	; 0x803e <conv_int+0x8e>
    802a:	c2 64       	ori	r28, 0x42	; 66
    802c:	02 50       	subi	r16, 0x02	; 2
    802e:	11 09       	sbc	r17, r1
    8030:	b1 f1       	breq	.+108    	; 0x809e <conv_int+0xee>
    8032:	c7 01       	movw	r24, r14
    8034:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    8038:	97 ff       	sbrs	r25, 7
    803a:	07 c0       	rjmp	.+14     	; 0x804a <conv_int+0x9a>
    803c:	30 c0       	rjmp	.+96     	; 0x809e <conv_int+0xee>
    803e:	d6 ff       	sbrs	r29, 6
    8040:	02 c0       	rjmp	.+4      	; 0x8046 <conv_int+0x96>
    8042:	c2 60       	ori	r28, 0x02	; 2
    8044:	01 c0       	rjmp	.+2      	; 0x8048 <conv_int+0x98>
    8046:	c2 61       	ori	r28, 0x12	; 18
    8048:	85 01       	movw	r16, r10
    804a:	81 2c       	mov	r8, r1
    804c:	91 2c       	mov	r9, r1
    804e:	54 01       	movw	r10, r8
    8050:	20 ed       	ldi	r18, 0xD0	; 208
    8052:	28 0f       	add	r18, r24
    8054:	28 30       	cpi	r18, 0x08	; 8
    8056:	80 f0       	brcs	.+32     	; 0x8078 <conv_int+0xc8>
    8058:	c4 ff       	sbrs	r28, 4
    805a:	04 c0       	rjmp	.+8      	; 0x8064 <conv_int+0xb4>
    805c:	b7 01       	movw	r22, r14
    805e:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <ungetc>
    8062:	1a c0       	rjmp	.+52     	; 0x8098 <conv_int+0xe8>
    8064:	2a 30       	cpi	r18, 0x0A	; 10
    8066:	40 f0       	brcs	.+16     	; 0x8078 <conv_int+0xc8>
    8068:	c6 ff       	sbrs	r28, 6
    806a:	f8 cf       	rjmp	.-16     	; 0x805c <conv_int+0xac>
    806c:	2f 7d       	andi	r18, 0xDF	; 223
    806e:	3f ee       	ldi	r19, 0xEF	; 239
    8070:	32 0f       	add	r19, r18
    8072:	36 30       	cpi	r19, 0x06	; 6
    8074:	98 f7       	brcc	.-26     	; 0x805c <conv_int+0xac>
    8076:	27 50       	subi	r18, 0x07	; 7
    8078:	4c 2f       	mov	r20, r28
    807a:	c5 01       	movw	r24, r10
    807c:	b4 01       	movw	r22, r8
    807e:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <mulacc>
    8082:	4b 01       	movw	r8, r22
    8084:	5c 01       	movw	r10, r24
    8086:	c2 60       	ori	r28, 0x02	; 2
    8088:	01 50       	subi	r16, 0x01	; 1
    808a:	11 09       	sbc	r17, r1
    808c:	59 f0       	breq	.+22     	; 0x80a4 <conv_int+0xf4>
    808e:	c7 01       	movw	r24, r14
    8090:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    8094:	97 ff       	sbrs	r25, 7
    8096:	dc cf       	rjmp	.-72     	; 0x8050 <conv_int+0xa0>
    8098:	c1 fd       	sbrc	r28, 1
    809a:	04 c0       	rjmp	.+8      	; 0x80a4 <conv_int+0xf4>
    809c:	a7 cf       	rjmp	.-178    	; 0x7fec <conv_int+0x3c>
    809e:	81 2c       	mov	r8, r1
    80a0:	91 2c       	mov	r9, r1
    80a2:	54 01       	movw	r10, r8
    80a4:	c7 ff       	sbrs	r28, 7
    80a6:	08 c0       	rjmp	.+16     	; 0x80b8 <conv_int+0x108>
    80a8:	b0 94       	com	r11
    80aa:	a0 94       	com	r10
    80ac:	90 94       	com	r9
    80ae:	80 94       	com	r8
    80b0:	81 1c       	adc	r8, r1
    80b2:	91 1c       	adc	r9, r1
    80b4:	a1 1c       	adc	r10, r1
    80b6:	b1 1c       	adc	r11, r1
    80b8:	2c 2f       	mov	r18, r28
    80ba:	b5 01       	movw	r22, r10
    80bc:	a4 01       	movw	r20, r8
    80be:	c6 01       	movw	r24, r12
    80c0:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <putval>
    80c4:	81 e0       	ldi	r24, 0x01	; 1
    80c6:	df 91       	pop	r29
    80c8:	cf 91       	pop	r28
    80ca:	1f 91       	pop	r17
    80cc:	0f 91       	pop	r16
    80ce:	ff 90       	pop	r15
    80d0:	ef 90       	pop	r14
    80d2:	df 90       	pop	r13
    80d4:	cf 90       	pop	r12
    80d6:	bf 90       	pop	r11
    80d8:	af 90       	pop	r10
    80da:	9f 90       	pop	r9
    80dc:	8f 90       	pop	r8
    80de:	08 95       	ret

000080e0 <conv_brk>:
    80e0:	4f 92       	push	r4
    80e2:	5f 92       	push	r5
    80e4:	6f 92       	push	r6
    80e6:	7f 92       	push	r7
    80e8:	8f 92       	push	r8
    80ea:	9f 92       	push	r9
    80ec:	af 92       	push	r10
    80ee:	bf 92       	push	r11
    80f0:	cf 92       	push	r12
    80f2:	df 92       	push	r13
    80f4:	ef 92       	push	r14
    80f6:	ff 92       	push	r15
    80f8:	0f 93       	push	r16
    80fa:	1f 93       	push	r17
    80fc:	cf 93       	push	r28
    80fe:	df 93       	push	r29
    8100:	cd b7       	in	r28, 0x3d	; 61
    8102:	de b7       	in	r29, 0x3e	; 62
    8104:	a0 97       	sbiw	r28, 0x20	; 32
    8106:	cd bf       	out	0x3d, r28	; 61
    8108:	de bf       	out	0x3e, r29	; 62
    810a:	5c 01       	movw	r10, r24
    810c:	4b 01       	movw	r8, r22
    810e:	7a 01       	movw	r14, r20
    8110:	8e 01       	movw	r16, r28
    8112:	0f 5f       	subi	r16, 0xFF	; 255
    8114:	1f 4f       	sbci	r17, 0xFF	; 255
    8116:	68 01       	movw	r12, r16
    8118:	80 e2       	ldi	r24, 0x20	; 32
    811a:	f8 01       	movw	r30, r16
    811c:	11 92       	st	Z+, r1
    811e:	8a 95       	dec	r24
    8120:	e9 f7       	brne	.-6      	; 0x811c <conv_brk+0x3c>
    8122:	f5 01       	movw	r30, r10
    8124:	53 80       	ldd	r5, Z+3	; 0x03
    8126:	40 e0       	ldi	r20, 0x00	; 0
    8128:	50 e0       	ldi	r21, 0x00	; 0
    812a:	61 2c       	mov	r6, r1
    812c:	90 e0       	ldi	r25, 0x00	; 0
    812e:	71 2c       	mov	r7, r1
    8130:	a1 e0       	ldi	r26, 0x01	; 1
    8132:	b0 e0       	ldi	r27, 0x00	; 0
    8134:	f9 01       	movw	r30, r18
    8136:	53 fc       	sbrc	r5, 3
    8138:	85 91       	lpm	r24, Z+
    813a:	53 fe       	sbrs	r5, 3
    813c:	81 91       	ld	r24, Z+
    813e:	8f 01       	movw	r16, r30
    8140:	48 2e       	mov	r4, r24
    8142:	9f 01       	movw	r18, r30
    8144:	81 11       	cpse	r24, r1
    8146:	03 c0       	rjmp	.+6      	; 0x814e <conv_brk+0x6e>
    8148:	80 e0       	ldi	r24, 0x00	; 0
    814a:	90 e0       	ldi	r25, 0x00	; 0
    814c:	96 c0       	rjmp	.+300    	; 0x827a <conv_brk+0x19a>
    814e:	8e 35       	cpi	r24, 0x5E	; 94
    8150:	19 f4       	brne	.+6      	; 0x8158 <conv_brk+0x78>
    8152:	41 15       	cp	r20, r1
    8154:	51 05       	cpc	r21, r1
    8156:	51 f1       	breq	.+84     	; 0x81ac <conv_brk+0xcc>
    8158:	67 2d       	mov	r22, r7
    815a:	70 e0       	ldi	r23, 0x00	; 0
    815c:	64 17       	cp	r22, r20
    815e:	75 07       	cpc	r23, r21
    8160:	3c f4       	brge	.+14     	; 0x8170 <conv_brk+0x90>
    8162:	8d 35       	cpi	r24, 0x5D	; 93
    8164:	61 f1       	breq	.+88     	; 0x81be <conv_brk+0xde>
    8166:	8d 32       	cpi	r24, 0x2D	; 45
    8168:	19 f4       	brne	.+6      	; 0x8170 <conv_brk+0x90>
    816a:	99 23       	and	r25, r25
    816c:	11 f1       	breq	.+68     	; 0x81b2 <conv_brk+0xd2>
    816e:	03 c0       	rjmp	.+6      	; 0x8176 <conv_brk+0x96>
    8170:	99 23       	and	r25, r25
    8172:	09 f4       	brne	.+2      	; 0x8176 <conv_brk+0x96>
    8174:	6d c0       	rjmp	.+218    	; 0x8250 <conv_brk+0x170>
    8176:	84 2d       	mov	r24, r4
    8178:	86 95       	lsr	r24
    817a:	86 95       	lsr	r24
    817c:	86 95       	lsr	r24
    817e:	f6 01       	movw	r30, r12
    8180:	e8 0f       	add	r30, r24
    8182:	f1 1d       	adc	r31, r1
    8184:	84 2d       	mov	r24, r4
    8186:	87 70       	andi	r24, 0x07	; 7
    8188:	8d 01       	movw	r16, r26
    818a:	02 c0       	rjmp	.+4      	; 0x8190 <conv_brk+0xb0>
    818c:	00 0f       	add	r16, r16
    818e:	11 1f       	adc	r17, r17
    8190:	8a 95       	dec	r24
    8192:	e2 f7       	brpl	.-8      	; 0x818c <conv_brk+0xac>
    8194:	c8 01       	movw	r24, r16
    8196:	90 81       	ld	r25, Z
    8198:	89 2b       	or	r24, r25
    819a:	80 83       	st	Z, r24
    819c:	64 14       	cp	r6, r4
    819e:	59 f0       	breq	.+22     	; 0x81b6 <conv_brk+0xd6>
    81a0:	46 14       	cp	r4, r6
    81a2:	10 f4       	brcc	.+4      	; 0x81a8 <conv_brk+0xc8>
    81a4:	43 94       	inc	r4
    81a6:	e7 cf       	rjmp	.-50     	; 0x8176 <conv_brk+0x96>
    81a8:	4a 94       	dec	r4
    81aa:	e5 cf       	rjmp	.-54     	; 0x8176 <conv_brk+0x96>
    81ac:	77 24       	eor	r7, r7
    81ae:	73 94       	inc	r7
    81b0:	03 c0       	rjmp	.+6      	; 0x81b8 <conv_brk+0xd8>
    81b2:	91 e0       	ldi	r25, 0x01	; 1
    81b4:	01 c0       	rjmp	.+2      	; 0x81b8 <conv_brk+0xd8>
    81b6:	90 e0       	ldi	r25, 0x00	; 0
    81b8:	4f 5f       	subi	r20, 0xFF	; 255
    81ba:	5f 4f       	sbci	r21, 0xFF	; 255
    81bc:	bb cf       	rjmp	.-138    	; 0x8134 <conv_brk+0x54>
    81be:	99 23       	and	r25, r25
    81c0:	19 f0       	breq	.+6      	; 0x81c8 <conv_brk+0xe8>
    81c2:	8e 81       	ldd	r24, Y+6	; 0x06
    81c4:	80 62       	ori	r24, 0x20	; 32
    81c6:	8e 83       	std	Y+6, r24	; 0x06
    81c8:	71 10       	cpse	r7, r1
    81ca:	03 c0       	rjmp	.+6      	; 0x81d2 <conv_brk+0xf2>
    81cc:	77 24       	eor	r7, r7
    81ce:	73 94       	inc	r7
    81d0:	19 c0       	rjmp	.+50     	; 0x8204 <conv_brk+0x124>
    81d2:	f6 01       	movw	r30, r12
    81d4:	9e 01       	movw	r18, r28
    81d6:	2f 5d       	subi	r18, 0xDF	; 223
    81d8:	3f 4f       	sbci	r19, 0xFF	; 255
    81da:	80 81       	ld	r24, Z
    81dc:	80 95       	com	r24
    81de:	81 93       	st	Z+, r24
    81e0:	2e 17       	cp	r18, r30
    81e2:	3f 07       	cpc	r19, r31
    81e4:	d1 f7       	brne	.-12     	; 0x81da <conv_brk+0xfa>
    81e6:	f2 cf       	rjmp	.-28     	; 0x81cc <conv_brk+0xec>
    81e8:	e1 14       	cp	r14, r1
    81ea:	f1 04       	cpc	r15, r1
    81ec:	31 f0       	breq	.+12     	; 0x81fa <conv_brk+0x11a>
    81ee:	f7 01       	movw	r30, r14
    81f0:	80 83       	st	Z, r24
    81f2:	b7 01       	movw	r22, r14
    81f4:	6f 5f       	subi	r22, 0xFF	; 255
    81f6:	7f 4f       	sbci	r23, 0xFF	; 255
    81f8:	7b 01       	movw	r14, r22
    81fa:	71 e0       	ldi	r23, 0x01	; 1
    81fc:	87 1a       	sub	r8, r23
    81fe:	91 08       	sbc	r9, r1
    8200:	71 2c       	mov	r7, r1
    8202:	f9 f0       	breq	.+62     	; 0x8242 <conv_brk+0x162>
    8204:	c5 01       	movw	r24, r10
    8206:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    820a:	97 fd       	sbrc	r25, 7
    820c:	18 c0       	rjmp	.+48     	; 0x823e <conv_brk+0x15e>
    820e:	fc 01       	movw	r30, r24
    8210:	ff 27       	eor	r31, r31
    8212:	23 e0       	ldi	r18, 0x03	; 3
    8214:	f5 95       	asr	r31
    8216:	e7 95       	ror	r30
    8218:	2a 95       	dec	r18
    821a:	e1 f7       	brne	.-8      	; 0x8214 <conv_brk+0x134>
    821c:	ec 0d       	add	r30, r12
    821e:	fd 1d       	adc	r31, r13
    8220:	20 81       	ld	r18, Z
    8222:	30 e0       	ldi	r19, 0x00	; 0
    8224:	ac 01       	movw	r20, r24
    8226:	47 70       	andi	r20, 0x07	; 7
    8228:	55 27       	eor	r21, r21
    822a:	02 c0       	rjmp	.+4      	; 0x8230 <conv_brk+0x150>
    822c:	35 95       	asr	r19
    822e:	27 95       	ror	r18
    8230:	4a 95       	dec	r20
    8232:	e2 f7       	brpl	.-8      	; 0x822c <conv_brk+0x14c>
    8234:	20 fd       	sbrc	r18, 0
    8236:	d8 cf       	rjmp	.-80     	; 0x81e8 <conv_brk+0x108>
    8238:	b5 01       	movw	r22, r10
    823a:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <ungetc>
    823e:	71 10       	cpse	r7, r1
    8240:	83 cf       	rjmp	.-250    	; 0x8148 <conv_brk+0x68>
    8242:	e1 14       	cp	r14, r1
    8244:	f1 04       	cpc	r15, r1
    8246:	11 f0       	breq	.+4      	; 0x824c <conv_brk+0x16c>
    8248:	f7 01       	movw	r30, r14
    824a:	10 82       	st	Z, r1
    824c:	c8 01       	movw	r24, r16
    824e:	15 c0       	rjmp	.+42     	; 0x827a <conv_brk+0x19a>
    8250:	68 2f       	mov	r22, r24
    8252:	66 95       	lsr	r22
    8254:	66 95       	lsr	r22
    8256:	66 95       	lsr	r22
    8258:	f6 01       	movw	r30, r12
    825a:	e6 0f       	add	r30, r22
    825c:	f1 1d       	adc	r31, r1
    825e:	68 2f       	mov	r22, r24
    8260:	67 70       	andi	r22, 0x07	; 7
    8262:	8d 01       	movw	r16, r26
    8264:	02 c0       	rjmp	.+4      	; 0x826a <conv_brk+0x18a>
    8266:	00 0f       	add	r16, r16
    8268:	11 1f       	adc	r17, r17
    826a:	6a 95       	dec	r22
    826c:	e2 f7       	brpl	.-8      	; 0x8266 <conv_brk+0x186>
    826e:	b8 01       	movw	r22, r16
    8270:	70 81       	ld	r23, Z
    8272:	67 2b       	or	r22, r23
    8274:	60 83       	st	Z, r22
    8276:	68 2e       	mov	r6, r24
    8278:	9f cf       	rjmp	.-194    	; 0x81b8 <conv_brk+0xd8>
    827a:	a0 96       	adiw	r28, 0x20	; 32
    827c:	cd bf       	out	0x3d, r28	; 61
    827e:	de bf       	out	0x3e, r29	; 62
    8280:	df 91       	pop	r29
    8282:	cf 91       	pop	r28
    8284:	1f 91       	pop	r17
    8286:	0f 91       	pop	r16
    8288:	ff 90       	pop	r15
    828a:	ef 90       	pop	r14
    828c:	df 90       	pop	r13
    828e:	cf 90       	pop	r12
    8290:	bf 90       	pop	r11
    8292:	af 90       	pop	r10
    8294:	9f 90       	pop	r9
    8296:	8f 90       	pop	r8
    8298:	7f 90       	pop	r7
    829a:	6f 90       	pop	r6
    829c:	5f 90       	pop	r5
    829e:	4f 90       	pop	r4
    82a0:	08 95       	ret

000082a2 <conv_flt>:
    82a2:	2f 92       	push	r2
    82a4:	3f 92       	push	r3
    82a6:	4f 92       	push	r4
    82a8:	5f 92       	push	r5
    82aa:	6f 92       	push	r6
    82ac:	7f 92       	push	r7
    82ae:	9f 92       	push	r9
    82b0:	af 92       	push	r10
    82b2:	bf 92       	push	r11
    82b4:	cf 92       	push	r12
    82b6:	df 92       	push	r13
    82b8:	ef 92       	push	r14
    82ba:	ff 92       	push	r15
    82bc:	0f 93       	push	r16
    82be:	1f 93       	push	r17
    82c0:	cf 93       	push	r28
    82c2:	df 93       	push	r29
    82c4:	6c 01       	movw	r12, r24
    82c6:	8b 01       	movw	r16, r22
    82c8:	1a 01       	movw	r2, r20
    82ca:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    82ce:	ec 01       	movw	r28, r24
    82d0:	99 27       	eor	r25, r25
    82d2:	8b 32       	cpi	r24, 0x2B	; 43
    82d4:	91 05       	cpc	r25, r1
    82d6:	29 f0       	breq	.+10     	; 0x82e2 <conv_flt+0x40>
    82d8:	8d 97       	sbiw	r24, 0x2d	; 45
    82da:	81 f4       	brne	.+32     	; 0x82fc <conv_flt+0x5a>
    82dc:	30 e8       	ldi	r19, 0x80	; 128
    82de:	93 2e       	mov	r9, r19
    82e0:	01 c0       	rjmp	.+2      	; 0x82e4 <conv_flt+0x42>
    82e2:	91 2c       	mov	r9, r1
    82e4:	01 50       	subi	r16, 0x01	; 1
    82e6:	11 09       	sbc	r17, r1
    82e8:	11 f4       	brne	.+4      	; 0x82ee <conv_flt+0x4c>
    82ea:	80 e0       	ldi	r24, 0x00	; 0
    82ec:	0c c1       	rjmp	.+536    	; 0x8506 <conv_flt+0x264>
    82ee:	c6 01       	movw	r24, r12
    82f0:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    82f4:	ec 01       	movw	r28, r24
    82f6:	97 ff       	sbrs	r25, 7
    82f8:	02 c0       	rjmp	.+4      	; 0x82fe <conv_flt+0x5c>
    82fa:	f7 cf       	rjmp	.-18     	; 0x82ea <conv_flt+0x48>
    82fc:	91 2c       	mov	r9, r1
    82fe:	ce 01       	movw	r24, r28
    8300:	0e 94 74 4c 	call	0x98e8	; 0x98e8 <tolower>
    8304:	89 36       	cpi	r24, 0x69	; 105
    8306:	91 05       	cpc	r25, r1
    8308:	31 f0       	breq	.+12     	; 0x8316 <conv_flt+0x74>
    830a:	8e 36       	cpi	r24, 0x6E	; 110
    830c:	91 05       	cpc	r25, r1
    830e:	99 f5       	brne	.+102    	; 0x8376 <conv_flt+0xd4>
    8310:	c7 ee       	ldi	r28, 0xE7	; 231
    8312:	df e0       	ldi	r29, 0x0F	; 15
    8314:	02 c0       	rjmp	.+4      	; 0x831a <conv_flt+0x78>
    8316:	ca ee       	ldi	r28, 0xEA	; 234
    8318:	df e0       	ldi	r29, 0x0F	; 15
    831a:	21 96       	adiw	r28, 0x01	; 1
    831c:	fe 01       	movw	r30, r28
    831e:	31 97       	sbiw	r30, 0x01	; 1
    8320:	b4 90       	lpm	r11, Z
    8322:	bb 20       	and	r11, r11
    8324:	c9 f0       	breq	.+50     	; 0x8358 <conv_flt+0xb6>
    8326:	01 50       	subi	r16, 0x01	; 1
    8328:	11 09       	sbc	r17, r1
    832a:	91 f0       	breq	.+36     	; 0x8350 <conv_flt+0xae>
    832c:	c6 01       	movw	r24, r12
    832e:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    8332:	7c 01       	movw	r14, r24
    8334:	97 fd       	sbrc	r25, 7
    8336:	0c c0       	rjmp	.+24     	; 0x8350 <conv_flt+0xae>
    8338:	0e 94 74 4c 	call	0x98e8	; 0x98e8 <tolower>
    833c:	99 27       	eor	r25, r25
    833e:	eb 2d       	mov	r30, r11
    8340:	f0 e0       	ldi	r31, 0x00	; 0
    8342:	8e 17       	cp	r24, r30
    8344:	9f 07       	cpc	r25, r31
    8346:	49 f3       	breq	.-46     	; 0x831a <conv_flt+0x78>
    8348:	b6 01       	movw	r22, r12
    834a:	c7 01       	movw	r24, r14
    834c:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <ungetc>
    8350:	cd 5e       	subi	r28, 0xED	; 237
    8352:	df 40       	sbci	r29, 0x0F	; 15
    8354:	51 f6       	brne	.-108    	; 0x82ea <conv_flt+0x48>
    8356:	03 c0       	rjmp	.+6      	; 0x835e <conv_flt+0xbc>
    8358:	ca 5e       	subi	r28, 0xEA	; 234
    835a:	df 40       	sbci	r29, 0x0F	; 15
    835c:	29 f0       	breq	.+10     	; 0x8368 <conv_flt+0xc6>
    835e:	80 e0       	ldi	r24, 0x00	; 0
    8360:	90 e0       	ldi	r25, 0x00	; 0
    8362:	a0 e8       	ldi	r26, 0x80	; 128
    8364:	bf e7       	ldi	r27, 0x7F	; 127
    8366:	04 c0       	rjmp	.+8      	; 0x8370 <conv_flt+0xce>
    8368:	80 e0       	ldi	r24, 0x00	; 0
    836a:	90 e0       	ldi	r25, 0x00	; 0
    836c:	a0 ec       	ldi	r26, 0xC0	; 192
    836e:	bf e7       	ldi	r27, 0x7F	; 127
    8370:	bc 01       	movw	r22, r24
    8372:	cd 01       	movw	r24, r26
    8374:	b8 c0       	rjmp	.+368    	; 0x84e6 <conv_flt+0x244>
    8376:	41 2c       	mov	r4, r1
    8378:	51 2c       	mov	r5, r1
    837a:	32 01       	movw	r6, r4
    837c:	e1 2c       	mov	r14, r1
    837e:	f1 2c       	mov	r15, r1
    8380:	2c 2f       	mov	r18, r28
    8382:	20 53       	subi	r18, 0x30	; 48
    8384:	2a 30       	cpi	r18, 0x0A	; 10
    8386:	10 f5       	brcc	.+68     	; 0x83cc <conv_flt+0x12a>
    8388:	e9 2d       	mov	r30, r9
    838a:	e2 60       	ori	r30, 0x02	; 2
    838c:	be 2e       	mov	r11, r30
    838e:	89 2d       	mov	r24, r9
    8390:	88 70       	andi	r24, 0x08	; 8
    8392:	92 fe       	sbrs	r9, 2
    8394:	06 c0       	rjmp	.+12     	; 0x83a2 <conv_flt+0x100>
    8396:	81 11       	cpse	r24, r1
    8398:	20 c0       	rjmp	.+64     	; 0x83da <conv_flt+0x138>
    839a:	ff ef       	ldi	r31, 0xFF	; 255
    839c:	ef 1a       	sub	r14, r31
    839e:	ff 0a       	sbc	r15, r31
    83a0:	1c c0       	rjmp	.+56     	; 0x83da <conv_flt+0x138>
    83a2:	88 23       	and	r24, r24
    83a4:	19 f0       	breq	.+6      	; 0x83ac <conv_flt+0x10a>
    83a6:	81 e0       	ldi	r24, 0x01	; 1
    83a8:	e8 1a       	sub	r14, r24
    83aa:	f1 08       	sbc	r15, r1
    83ac:	40 e2       	ldi	r20, 0x20	; 32
    83ae:	c3 01       	movw	r24, r6
    83b0:	b2 01       	movw	r22, r4
    83b2:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <mulacc>
    83b6:	2b 01       	movw	r4, r22
    83b8:	3c 01       	movw	r6, r24
    83ba:	68 39       	cpi	r22, 0x98	; 152
    83bc:	79 49       	sbci	r23, 0x99	; 153
    83be:	89 49       	sbci	r24, 0x99	; 153
    83c0:	99 41       	sbci	r25, 0x19	; 25
    83c2:	58 f0       	brcs	.+22     	; 0x83da <conv_flt+0x138>
    83c4:	f9 2d       	mov	r31, r9
    83c6:	f6 60       	ori	r31, 0x06	; 6
    83c8:	bf 2e       	mov	r11, r31
    83ca:	07 c0       	rjmp	.+14     	; 0x83da <conv_flt+0x138>
    83cc:	2e 3f       	cpi	r18, 0xFE	; 254
    83ce:	89 f4       	brne	.+34     	; 0x83f2 <conv_flt+0x150>
    83d0:	93 fc       	sbrc	r9, 3
    83d2:	0f c0       	rjmp	.+30     	; 0x83f2 <conv_flt+0x150>
    83d4:	29 2d       	mov	r18, r9
    83d6:	28 60       	ori	r18, 0x08	; 8
    83d8:	b2 2e       	mov	r11, r18
    83da:	01 50       	subi	r16, 0x01	; 1
    83dc:	11 09       	sbc	r17, r1
    83de:	41 f0       	breq	.+16     	; 0x83f0 <conv_flt+0x14e>
    83e0:	c6 01       	movw	r24, r12
    83e2:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    83e6:	ec 01       	movw	r28, r24
    83e8:	9b 2c       	mov	r9, r11
    83ea:	97 ff       	sbrs	r25, 7
    83ec:	c9 cf       	rjmp	.-110    	; 0x8380 <conv_flt+0xde>
    83ee:	01 c0       	rjmp	.+2      	; 0x83f2 <conv_flt+0x150>
    83f0:	9b 2c       	mov	r9, r11
    83f2:	91 fe       	sbrs	r9, 1
    83f4:	7a cf       	rjmp	.-268    	; 0x82ea <conv_flt+0x48>
    83f6:	ce 01       	movw	r24, r28
    83f8:	8f 7d       	andi	r24, 0xDF	; 223
    83fa:	99 27       	eor	r25, r25
    83fc:	85 34       	cpi	r24, 0x45	; 69
    83fe:	91 05       	cpc	r25, r1
    8400:	09 f0       	breq	.+2      	; 0x8404 <conv_flt+0x162>
    8402:	42 c0       	rjmp	.+132    	; 0x8488 <conv_flt+0x1e6>
    8404:	58 01       	movw	r10, r16
    8406:	81 e0       	ldi	r24, 0x01	; 1
    8408:	a8 1a       	sub	r10, r24
    840a:	b1 08       	sbc	r11, r1
    840c:	09 f4       	brne	.+2      	; 0x8410 <conv_flt+0x16e>
    840e:	6d cf       	rjmp	.-294    	; 0x82ea <conv_flt+0x48>
    8410:	c6 01       	movw	r24, r12
    8412:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    8416:	ec 01       	movw	r28, r24
    8418:	97 fd       	sbrc	r25, 7
    841a:	67 cf       	rjmp	.-306    	; 0x82ea <conv_flt+0x48>
    841c:	99 27       	eor	r25, r25
    841e:	8b 32       	cpi	r24, 0x2B	; 43
    8420:	91 05       	cpc	r25, r1
    8422:	29 f0       	breq	.+10     	; 0x842e <conv_flt+0x18c>
    8424:	8d 97       	sbiw	r24, 0x2d	; 45
    8426:	69 f4       	brne	.+26     	; 0x8442 <conv_flt+0x1a0>
    8428:	e9 2d       	mov	r30, r9
    842a:	e0 61       	ori	r30, 0x10	; 16
    842c:	9e 2e       	mov	r9, r30
    842e:	58 01       	movw	r10, r16
    8430:	f2 e0       	ldi	r31, 0x02	; 2
    8432:	af 1a       	sub	r10, r31
    8434:	b1 08       	sbc	r11, r1
    8436:	09 f4       	brne	.+2      	; 0x843a <conv_flt+0x198>
    8438:	58 cf       	rjmp	.-336    	; 0x82ea <conv_flt+0x48>
    843a:	c6 01       	movw	r24, r12
    843c:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    8440:	ec 01       	movw	r28, r24
    8442:	ce 01       	movw	r24, r28
    8444:	c0 97       	sbiw	r24, 0x30	; 48
    8446:	0a 97       	sbiw	r24, 0x0a	; 10
    8448:	08 f0       	brcs	.+2      	; 0x844c <conv_flt+0x1aa>
    844a:	4f cf       	rjmp	.-354    	; 0x82ea <conv_flt+0x48>
    844c:	85 01       	movw	r16, r10
    844e:	a1 2c       	mov	r10, r1
    8450:	b1 2c       	mov	r11, r1
    8452:	b5 01       	movw	r22, r10
    8454:	bb 0c       	add	r11, r11
    8456:	88 0b       	sbc	r24, r24
    8458:	99 0b       	sbc	r25, r25
    845a:	2c 2f       	mov	r18, r28
    845c:	20 53       	subi	r18, 0x30	; 48
    845e:	40 e2       	ldi	r20, 0x20	; 32
    8460:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <mulacc>
    8464:	5b 01       	movw	r10, r22
    8466:	01 50       	subi	r16, 0x01	; 1
    8468:	11 09       	sbc	r17, r1
    846a:	39 f0       	breq	.+14     	; 0x847a <conv_flt+0x1d8>
    846c:	c6 01       	movw	r24, r12
    846e:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    8472:	ec 01       	movw	r28, r24
    8474:	c0 97       	sbiw	r24, 0x30	; 48
    8476:	0a 97       	sbiw	r24, 0x0a	; 10
    8478:	60 f3       	brcs	.-40     	; 0x8452 <conv_flt+0x1b0>
    847a:	94 fe       	sbrs	r9, 4
    847c:	03 c0       	rjmp	.+6      	; 0x8484 <conv_flt+0x1e2>
    847e:	b1 94       	neg	r11
    8480:	a1 94       	neg	r10
    8482:	b1 08       	sbc	r11, r1
    8484:	ea 0c       	add	r14, r10
    8486:	fb 1c       	adc	r15, r11
    8488:	01 2b       	or	r16, r17
    848a:	31 f0       	breq	.+12     	; 0x8498 <conv_flt+0x1f6>
    848c:	d7 fd       	sbrc	r29, 7
    848e:	04 c0       	rjmp	.+8      	; 0x8498 <conv_flt+0x1f6>
    8490:	b6 01       	movw	r22, r12
    8492:	ce 01       	movw	r24, r28
    8494:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <ungetc>
    8498:	c3 01       	movw	r24, r6
    849a:	b2 01       	movw	r22, r4
    849c:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <__floatunsisf>
    84a0:	f7 fe       	sbrs	r15, 7
    84a2:	06 c0       	rjmp	.+12     	; 0x84b0 <conv_flt+0x20e>
    84a4:	f1 94       	neg	r15
    84a6:	e1 94       	neg	r14
    84a8:	f1 08       	sbc	r15, r1
    84aa:	c6 e0       	ldi	r28, 0x06	; 6
    84ac:	d0 e1       	ldi	r29, 0x10	; 16
    84ae:	02 c0       	rjmp	.+4      	; 0x84b4 <conv_flt+0x212>
    84b0:	ce e1       	ldi	r28, 0x1E	; 30
    84b2:	d0 e1       	ldi	r29, 0x10	; 16
    84b4:	6e 01       	movw	r12, r28
    84b6:	28 e1       	ldi	r18, 0x18	; 24
    84b8:	c2 1a       	sub	r12, r18
    84ba:	d1 08       	sbc	r13, r1
    84bc:	00 e2       	ldi	r16, 0x20	; 32
    84be:	10 e0       	ldi	r17, 0x00	; 0
    84c0:	e0 16       	cp	r14, r16
    84c2:	f1 06       	cpc	r15, r17
    84c4:	50 f0       	brcs	.+20     	; 0x84da <conv_flt+0x238>
    84c6:	fe 01       	movw	r30, r28
    84c8:	25 91       	lpm	r18, Z+
    84ca:	35 91       	lpm	r19, Z+
    84cc:	45 91       	lpm	r20, Z+
    84ce:	54 91       	lpm	r21, Z
    84d0:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    84d4:	e0 1a       	sub	r14, r16
    84d6:	f1 0a       	sbc	r15, r17
    84d8:	f3 cf       	rjmp	.-26     	; 0x84c0 <conv_flt+0x21e>
    84da:	24 97       	sbiw	r28, 0x04	; 4
    84dc:	16 95       	lsr	r17
    84de:	07 95       	ror	r16
    84e0:	cc 16       	cp	r12, r28
    84e2:	dd 06       	cpc	r13, r29
    84e4:	69 f7       	brne	.-38     	; 0x84c0 <conv_flt+0x21e>
    84e6:	97 fe       	sbrs	r9, 7
    84e8:	05 c0       	rjmp	.+10     	; 0x84f4 <conv_flt+0x252>
    84ea:	dc 01       	movw	r26, r24
    84ec:	cb 01       	movw	r24, r22
    84ee:	b0 58       	subi	r27, 0x80	; 128
    84f0:	bc 01       	movw	r22, r24
    84f2:	cd 01       	movw	r24, r26
    84f4:	21 14       	cp	r2, r1
    84f6:	31 04       	cpc	r3, r1
    84f8:	29 f0       	breq	.+10     	; 0x8504 <conv_flt+0x262>
    84fa:	f1 01       	movw	r30, r2
    84fc:	60 83       	st	Z, r22
    84fe:	71 83       	std	Z+1, r23	; 0x01
    8500:	82 83       	std	Z+2, r24	; 0x02
    8502:	93 83       	std	Z+3, r25	; 0x03
    8504:	81 e0       	ldi	r24, 0x01	; 1
    8506:	df 91       	pop	r29
    8508:	cf 91       	pop	r28
    850a:	1f 91       	pop	r17
    850c:	0f 91       	pop	r16
    850e:	ff 90       	pop	r15
    8510:	ef 90       	pop	r14
    8512:	df 90       	pop	r13
    8514:	cf 90       	pop	r12
    8516:	bf 90       	pop	r11
    8518:	af 90       	pop	r10
    851a:	9f 90       	pop	r9
    851c:	7f 90       	pop	r7
    851e:	6f 90       	pop	r6
    8520:	5f 90       	pop	r5
    8522:	4f 90       	pop	r4
    8524:	3f 90       	pop	r3
    8526:	2f 90       	pop	r2
    8528:	08 95       	ret

0000852a <vfscanf>:
    852a:	6f 92       	push	r6
    852c:	7f 92       	push	r7
    852e:	8f 92       	push	r8
    8530:	9f 92       	push	r9
    8532:	af 92       	push	r10
    8534:	bf 92       	push	r11
    8536:	cf 92       	push	r12
    8538:	df 92       	push	r13
    853a:	ef 92       	push	r14
    853c:	ff 92       	push	r15
    853e:	0f 93       	push	r16
    8540:	1f 93       	push	r17
    8542:	cf 93       	push	r28
    8544:	df 93       	push	r29
    8546:	5c 01       	movw	r10, r24
    8548:	eb 01       	movw	r28, r22
    854a:	4a 01       	movw	r8, r20
    854c:	fc 01       	movw	r30, r24
    854e:	16 82       	std	Z+6, r1	; 0x06
    8550:	17 82       	std	Z+7, r1	; 0x07
    8552:	61 2c       	mov	r6, r1
    8554:	f5 01       	movw	r30, r10
    8556:	03 81       	ldd	r16, Z+3	; 0x03
    8558:	fe 01       	movw	r30, r28
    855a:	03 fd       	sbrc	r16, 3
    855c:	85 91       	lpm	r24, Z+
    855e:	03 ff       	sbrs	r16, 3
    8560:	81 91       	ld	r24, Z+
    8562:	18 2f       	mov	r17, r24
    8564:	ef 01       	movw	r28, r30
    8566:	88 23       	and	r24, r24
    8568:	09 f4       	brne	.+2      	; 0x856c <vfscanf+0x42>
    856a:	0f c1       	rjmp	.+542    	; 0x878a <vfscanf+0x260>
    856c:	90 e0       	ldi	r25, 0x00	; 0
    856e:	0e 94 6b 4c 	call	0x98d6	; 0x98d6 <isspace>
    8572:	89 2b       	or	r24, r25
    8574:	21 f0       	breq	.+8      	; 0x857e <vfscanf+0x54>
    8576:	c5 01       	movw	r24, r10
    8578:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <skip_spaces>
    857c:	eb cf       	rjmp	.-42     	; 0x8554 <vfscanf+0x2a>
    857e:	15 32       	cpi	r17, 0x25	; 37
    8580:	41 f4       	brne	.+16     	; 0x8592 <vfscanf+0x68>
    8582:	fe 01       	movw	r30, r28
    8584:	03 fd       	sbrc	r16, 3
    8586:	15 91       	lpm	r17, Z+
    8588:	03 ff       	sbrs	r16, 3
    858a:	11 91       	ld	r17, Z+
    858c:	ef 01       	movw	r28, r30
    858e:	15 32       	cpi	r17, 0x25	; 37
    8590:	81 f4       	brne	.+32     	; 0x85b2 <vfscanf+0x88>
    8592:	c5 01       	movw	r24, r10
    8594:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    8598:	97 fd       	sbrc	r25, 7
    859a:	f5 c0       	rjmp	.+490    	; 0x8786 <vfscanf+0x25c>
    859c:	41 2f       	mov	r20, r17
    859e:	50 e0       	ldi	r21, 0x00	; 0
    85a0:	9c 01       	movw	r18, r24
    85a2:	33 27       	eor	r19, r19
    85a4:	24 17       	cp	r18, r20
    85a6:	35 07       	cpc	r19, r21
    85a8:	a9 f2       	breq	.-86     	; 0x8554 <vfscanf+0x2a>
    85aa:	b5 01       	movw	r22, r10
    85ac:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <ungetc>
    85b0:	ec c0       	rjmp	.+472    	; 0x878a <vfscanf+0x260>
    85b2:	1a 32       	cpi	r17, 0x2A	; 42
    85b4:	41 f4       	brne	.+16     	; 0x85c6 <vfscanf+0x9c>
    85b6:	03 fd       	sbrc	r16, 3
    85b8:	15 91       	lpm	r17, Z+
    85ba:	03 ff       	sbrs	r16, 3
    85bc:	11 91       	ld	r17, Z+
    85be:	ef 01       	movw	r28, r30
    85c0:	77 24       	eor	r7, r7
    85c2:	73 94       	inc	r7
    85c4:	01 c0       	rjmp	.+2      	; 0x85c8 <vfscanf+0x9e>
    85c6:	71 2c       	mov	r7, r1
    85c8:	e1 2c       	mov	r14, r1
    85ca:	f1 2c       	mov	r15, r1
    85cc:	20 ed       	ldi	r18, 0xD0	; 208
    85ce:	21 0f       	add	r18, r17
    85d0:	2a 30       	cpi	r18, 0x0A	; 10
    85d2:	88 f4       	brcc	.+34     	; 0x85f6 <vfscanf+0xcc>
    85d4:	f7 2d       	mov	r31, r7
    85d6:	f2 60       	ori	r31, 0x02	; 2
    85d8:	7f 2e       	mov	r7, r31
    85da:	b7 01       	movw	r22, r14
    85dc:	80 e0       	ldi	r24, 0x00	; 0
    85de:	90 e0       	ldi	r25, 0x00	; 0
    85e0:	40 e2       	ldi	r20, 0x20	; 32
    85e2:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <mulacc>
    85e6:	7b 01       	movw	r14, r22
    85e8:	fe 01       	movw	r30, r28
    85ea:	03 fd       	sbrc	r16, 3
    85ec:	15 91       	lpm	r17, Z+
    85ee:	03 ff       	sbrs	r16, 3
    85f0:	11 91       	ld	r17, Z+
    85f2:	ef 01       	movw	r28, r30
    85f4:	eb cf       	rjmp	.-42     	; 0x85cc <vfscanf+0xa2>
    85f6:	71 fe       	sbrs	r7, 1
    85f8:	04 c0       	rjmp	.+8      	; 0x8602 <vfscanf+0xd8>
    85fa:	e1 14       	cp	r14, r1
    85fc:	f1 04       	cpc	r15, r1
    85fe:	21 f4       	brne	.+8      	; 0x8608 <vfscanf+0xde>
    8600:	c4 c0       	rjmp	.+392    	; 0x878a <vfscanf+0x260>
    8602:	ee 24       	eor	r14, r14
    8604:	ea 94       	dec	r14
    8606:	fe 2c       	mov	r15, r14
    8608:	18 36       	cpi	r17, 0x68	; 104
    860a:	19 f0       	breq	.+6      	; 0x8612 <vfscanf+0xe8>
    860c:	1c 36       	cpi	r17, 0x6C	; 108
    860e:	61 f0       	breq	.+24     	; 0x8628 <vfscanf+0xfe>
    8610:	14 c0       	rjmp	.+40     	; 0x863a <vfscanf+0x110>
    8612:	fe 01       	movw	r30, r28
    8614:	03 fd       	sbrc	r16, 3
    8616:	15 91       	lpm	r17, Z+
    8618:	03 ff       	sbrs	r16, 3
    861a:	11 91       	ld	r17, Z+
    861c:	ef 01       	movw	r28, r30
    861e:	18 36       	cpi	r17, 0x68	; 104
    8620:	61 f4       	brne	.+24     	; 0x863a <vfscanf+0x110>
    8622:	87 2d       	mov	r24, r7
    8624:	88 60       	ori	r24, 0x08	; 8
    8626:	78 2e       	mov	r7, r24
    8628:	97 2d       	mov	r25, r7
    862a:	94 60       	ori	r25, 0x04	; 4
    862c:	79 2e       	mov	r7, r25
    862e:	fe 01       	movw	r30, r28
    8630:	03 fd       	sbrc	r16, 3
    8632:	15 91       	lpm	r17, Z+
    8634:	03 ff       	sbrs	r16, 3
    8636:	11 91       	ld	r17, Z+
    8638:	ef 01       	movw	r28, r30
    863a:	11 23       	and	r17, r17
    863c:	09 f4       	brne	.+2      	; 0x8640 <vfscanf+0x116>
    863e:	a5 c0       	rjmp	.+330    	; 0x878a <vfscanf+0x260>
    8640:	61 2f       	mov	r22, r17
    8642:	70 e0       	ldi	r23, 0x00	; 0
    8644:	85 ed       	ldi	r24, 0xD5	; 213
    8646:	9f e0       	ldi	r25, 0x0F	; 15
    8648:	0e 94 7c 4c 	call	0x98f8	; 0x98f8 <strchr_P>
    864c:	89 2b       	or	r24, r25
    864e:	09 f4       	brne	.+2      	; 0x8652 <vfscanf+0x128>
    8650:	9c c0       	rjmp	.+312    	; 0x878a <vfscanf+0x260>
    8652:	70 fc       	sbrc	r7, 0
    8654:	07 c0       	rjmp	.+14     	; 0x8664 <vfscanf+0x13a>
    8656:	f4 01       	movw	r30, r8
    8658:	c0 80       	ld	r12, Z
    865a:	d1 80       	ldd	r13, Z+1	; 0x01
    865c:	c4 01       	movw	r24, r8
    865e:	02 96       	adiw	r24, 0x02	; 2
    8660:	4c 01       	movw	r8, r24
    8662:	02 c0       	rjmp	.+4      	; 0x8668 <vfscanf+0x13e>
    8664:	c1 2c       	mov	r12, r1
    8666:	d1 2c       	mov	r13, r1
    8668:	1e 36       	cpi	r17, 0x6E	; 110
    866a:	51 f4       	brne	.+20     	; 0x8680 <vfscanf+0x156>
    866c:	f5 01       	movw	r30, r10
    866e:	46 81       	ldd	r20, Z+6	; 0x06
    8670:	57 81       	ldd	r21, Z+7	; 0x07
    8672:	60 e0       	ldi	r22, 0x00	; 0
    8674:	70 e0       	ldi	r23, 0x00	; 0
    8676:	27 2d       	mov	r18, r7
    8678:	c6 01       	movw	r24, r12
    867a:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <putval>
    867e:	6a cf       	rjmp	.-300    	; 0x8554 <vfscanf+0x2a>
    8680:	13 36       	cpi	r17, 0x63	; 99
    8682:	b9 f4       	brne	.+46     	; 0x86b2 <vfscanf+0x188>
    8684:	71 fc       	sbrc	r7, 1
    8686:	03 c0       	rjmp	.+6      	; 0x868e <vfscanf+0x164>
    8688:	ee 24       	eor	r14, r14
    868a:	e3 94       	inc	r14
    868c:	f1 2c       	mov	r15, r1
    868e:	c5 01       	movw	r24, r10
    8690:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    8694:	97 fd       	sbrc	r25, 7
    8696:	77 c0       	rjmp	.+238    	; 0x8786 <vfscanf+0x25c>
    8698:	c1 14       	cp	r12, r1
    869a:	d1 04       	cpc	r13, r1
    869c:	29 f0       	breq	.+10     	; 0x86a8 <vfscanf+0x17e>
    869e:	f6 01       	movw	r30, r12
    86a0:	80 83       	st	Z, r24
    86a2:	c6 01       	movw	r24, r12
    86a4:	01 96       	adiw	r24, 0x01	; 1
    86a6:	6c 01       	movw	r12, r24
    86a8:	91 e0       	ldi	r25, 0x01	; 1
    86aa:	e9 1a       	sub	r14, r25
    86ac:	f1 08       	sbc	r15, r1
    86ae:	79 f7       	brne	.-34     	; 0x868e <vfscanf+0x164>
    86b0:	66 c0       	rjmp	.+204    	; 0x877e <vfscanf+0x254>
    86b2:	1b 35       	cpi	r17, 0x5B	; 91
    86b4:	59 f4       	brne	.+22     	; 0x86cc <vfscanf+0x1a2>
    86b6:	9e 01       	movw	r18, r28
    86b8:	a6 01       	movw	r20, r12
    86ba:	b7 01       	movw	r22, r14
    86bc:	c5 01       	movw	r24, r10
    86be:	0e 94 70 40 	call	0x80e0	; 0x80e0 <conv_brk>
    86c2:	ec 01       	movw	r28, r24
    86c4:	89 2b       	or	r24, r25
    86c6:	09 f0       	breq	.+2      	; 0x86ca <vfscanf+0x1a0>
    86c8:	5a c0       	rjmp	.+180    	; 0x877e <vfscanf+0x254>
    86ca:	54 c0       	rjmp	.+168    	; 0x8774 <vfscanf+0x24a>
    86cc:	c5 01       	movw	r24, r10
    86ce:	0e 94 bf 3f 	call	0x7f7e	; 0x7f7e <skip_spaces>
    86d2:	97 fd       	sbrc	r25, 7
    86d4:	58 c0       	rjmp	.+176    	; 0x8786 <vfscanf+0x25c>
    86d6:	1f 36       	cpi	r17, 0x6F	; 111
    86d8:	e1 f1       	breq	.+120    	; 0x8752 <vfscanf+0x228>
    86da:	40 f4       	brcc	.+16     	; 0x86ec <vfscanf+0x1c2>
    86dc:	14 36       	cpi	r17, 0x64	; 100
    86de:	a9 f1       	breq	.+106    	; 0x874a <vfscanf+0x220>
    86e0:	19 36       	cpi	r17, 0x69	; 105
    86e2:	d1 f1       	breq	.+116    	; 0x8758 <vfscanf+0x22e>
    86e4:	18 35       	cpi	r17, 0x58	; 88
    86e6:	09 f0       	breq	.+2      	; 0x86ea <vfscanf+0x1c0>
    86e8:	3e c0       	rjmp	.+124    	; 0x8766 <vfscanf+0x23c>
    86ea:	2b c0       	rjmp	.+86     	; 0x8742 <vfscanf+0x218>
    86ec:	13 37       	cpi	r17, 0x73	; 115
    86ee:	a9 f0       	breq	.+42     	; 0x871a <vfscanf+0x1f0>
    86f0:	18 f4       	brcc	.+6      	; 0x86f8 <vfscanf+0x1ce>
    86f2:	10 37       	cpi	r17, 0x70	; 112
    86f4:	31 f1       	breq	.+76     	; 0x8742 <vfscanf+0x218>
    86f6:	37 c0       	rjmp	.+110    	; 0x8766 <vfscanf+0x23c>
    86f8:	15 37       	cpi	r17, 0x75	; 117
    86fa:	39 f1       	breq	.+78     	; 0x874a <vfscanf+0x220>
    86fc:	18 37       	cpi	r17, 0x78	; 120
    86fe:	09 f1       	breq	.+66     	; 0x8742 <vfscanf+0x218>
    8700:	32 c0       	rjmp	.+100    	; 0x8766 <vfscanf+0x23c>
    8702:	c1 14       	cp	r12, r1
    8704:	d1 04       	cpc	r13, r1
    8706:	29 f0       	breq	.+10     	; 0x8712 <vfscanf+0x1e8>
    8708:	f6 01       	movw	r30, r12
    870a:	00 83       	st	Z, r16
    870c:	c6 01       	movw	r24, r12
    870e:	01 96       	adiw	r24, 0x01	; 1
    8710:	6c 01       	movw	r12, r24
    8712:	91 e0       	ldi	r25, 0x01	; 1
    8714:	e9 1a       	sub	r14, r25
    8716:	f1 08       	sbc	r15, r1
    8718:	71 f0       	breq	.+28     	; 0x8736 <vfscanf+0x20c>
    871a:	c5 01       	movw	r24, r10
    871c:	0e 94 10 4d 	call	0x9a20	; 0x9a20 <fgetc>
    8720:	8c 01       	movw	r16, r24
    8722:	97 fd       	sbrc	r25, 7
    8724:	08 c0       	rjmp	.+16     	; 0x8736 <vfscanf+0x20c>
    8726:	0e 94 6b 4c 	call	0x98d6	; 0x98d6 <isspace>
    872a:	89 2b       	or	r24, r25
    872c:	51 f3       	breq	.-44     	; 0x8702 <vfscanf+0x1d8>
    872e:	b5 01       	movw	r22, r10
    8730:	c8 01       	movw	r24, r16
    8732:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <ungetc>
    8736:	c1 14       	cp	r12, r1
    8738:	d1 04       	cpc	r13, r1
    873a:	09 f1       	breq	.+66     	; 0x877e <vfscanf+0x254>
    873c:	f6 01       	movw	r30, r12
    873e:	10 82       	st	Z, r1
    8740:	1e c0       	rjmp	.+60     	; 0x877e <vfscanf+0x254>
    8742:	f7 2d       	mov	r31, r7
    8744:	f0 64       	ori	r31, 0x40	; 64
    8746:	7f 2e       	mov	r7, r31
    8748:	07 c0       	rjmp	.+14     	; 0x8758 <vfscanf+0x22e>
    874a:	87 2d       	mov	r24, r7
    874c:	80 62       	ori	r24, 0x20	; 32
    874e:	78 2e       	mov	r7, r24
    8750:	03 c0       	rjmp	.+6      	; 0x8758 <vfscanf+0x22e>
    8752:	97 2d       	mov	r25, r7
    8754:	90 61       	ori	r25, 0x10	; 16
    8756:	79 2e       	mov	r7, r25
    8758:	27 2d       	mov	r18, r7
    875a:	a6 01       	movw	r20, r12
    875c:	b7 01       	movw	r22, r14
    875e:	c5 01       	movw	r24, r10
    8760:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <conv_int>
    8764:	05 c0       	rjmp	.+10     	; 0x8770 <vfscanf+0x246>
    8766:	a6 01       	movw	r20, r12
    8768:	b7 01       	movw	r22, r14
    876a:	c5 01       	movw	r24, r10
    876c:	0e 94 51 41 	call	0x82a2	; 0x82a2 <conv_flt>
    8770:	81 11       	cpse	r24, r1
    8772:	05 c0       	rjmp	.+10     	; 0x877e <vfscanf+0x254>
    8774:	f5 01       	movw	r30, r10
    8776:	83 81       	ldd	r24, Z+3	; 0x03
    8778:	80 73       	andi	r24, 0x30	; 48
    877a:	29 f4       	brne	.+10     	; 0x8786 <vfscanf+0x25c>
    877c:	06 c0       	rjmp	.+12     	; 0x878a <vfscanf+0x260>
    877e:	70 fc       	sbrc	r7, 0
    8780:	e9 ce       	rjmp	.-558    	; 0x8554 <vfscanf+0x2a>
    8782:	63 94       	inc	r6
    8784:	e7 ce       	rjmp	.-562    	; 0x8554 <vfscanf+0x2a>
    8786:	66 20       	and	r6, r6
    8788:	19 f0       	breq	.+6      	; 0x8790 <vfscanf+0x266>
    878a:	86 2d       	mov	r24, r6
    878c:	90 e0       	ldi	r25, 0x00	; 0
    878e:	02 c0       	rjmp	.+4      	; 0x8794 <vfscanf+0x26a>
    8790:	8f ef       	ldi	r24, 0xFF	; 255
    8792:	9f ef       	ldi	r25, 0xFF	; 255
    8794:	df 91       	pop	r29
    8796:	cf 91       	pop	r28
    8798:	1f 91       	pop	r17
    879a:	0f 91       	pop	r16
    879c:	ff 90       	pop	r15
    879e:	ef 90       	pop	r14
    87a0:	df 90       	pop	r13
    87a2:	cf 90       	pop	r12
    87a4:	bf 90       	pop	r11
    87a6:	af 90       	pop	r10
    87a8:	9f 90       	pop	r9
    87aa:	8f 90       	pop	r8
    87ac:	7f 90       	pop	r7
    87ae:	6f 90       	pop	r6
    87b0:	08 95       	ret

000087b2 <__subsf3>:
    87b2:	50 58       	subi	r21, 0x80	; 128

000087b4 <__addsf3>:
    87b4:	bb 27       	eor	r27, r27
    87b6:	aa 27       	eor	r26, r26
    87b8:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <__addsf3x>
    87bc:	0c 94 d0 46 	jmp	0x8da0	; 0x8da0 <__fp_round>
    87c0:	0e 94 97 46 	call	0x8d2e	; 0x8d2e <__fp_pscA>
    87c4:	38 f0       	brcs	.+14     	; 0x87d4 <__addsf3+0x20>
    87c6:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <__fp_pscB>
    87ca:	20 f0       	brcs	.+8      	; 0x87d4 <__addsf3+0x20>
    87cc:	39 f4       	brne	.+14     	; 0x87dc <__addsf3+0x28>
    87ce:	9f 3f       	cpi	r25, 0xFF	; 255
    87d0:	19 f4       	brne	.+6      	; 0x87d8 <__addsf3+0x24>
    87d2:	26 f4       	brtc	.+8      	; 0x87dc <__addsf3+0x28>
    87d4:	0c 94 6d 46 	jmp	0x8cda	; 0x8cda <__fp_nan>
    87d8:	0e f4       	brtc	.+2      	; 0x87dc <__addsf3+0x28>
    87da:	e0 95       	com	r30
    87dc:	e7 fb       	bst	r30, 7
    87de:	0c 94 59 46 	jmp	0x8cb2	; 0x8cb2 <__fp_inf>

000087e2 <__addsf3x>:
    87e2:	e9 2f       	mov	r30, r25
    87e4:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__fp_split3>
    87e8:	58 f3       	brcs	.-42     	; 0x87c0 <__addsf3+0xc>
    87ea:	ba 17       	cp	r27, r26
    87ec:	62 07       	cpc	r22, r18
    87ee:	73 07       	cpc	r23, r19
    87f0:	84 07       	cpc	r24, r20
    87f2:	95 07       	cpc	r25, r21
    87f4:	20 f0       	brcs	.+8      	; 0x87fe <__addsf3x+0x1c>
    87f6:	79 f4       	brne	.+30     	; 0x8816 <__addsf3x+0x34>
    87f8:	a6 f5       	brtc	.+104    	; 0x8862 <__addsf3x+0x80>
    87fa:	0c 94 17 47 	jmp	0x8e2e	; 0x8e2e <__fp_zero>
    87fe:	0e f4       	brtc	.+2      	; 0x8802 <__addsf3x+0x20>
    8800:	e0 95       	com	r30
    8802:	0b 2e       	mov	r0, r27
    8804:	ba 2f       	mov	r27, r26
    8806:	a0 2d       	mov	r26, r0
    8808:	0b 01       	movw	r0, r22
    880a:	b9 01       	movw	r22, r18
    880c:	90 01       	movw	r18, r0
    880e:	0c 01       	movw	r0, r24
    8810:	ca 01       	movw	r24, r20
    8812:	a0 01       	movw	r20, r0
    8814:	11 24       	eor	r1, r1
    8816:	ff 27       	eor	r31, r31
    8818:	59 1b       	sub	r21, r25
    881a:	99 f0       	breq	.+38     	; 0x8842 <__addsf3x+0x60>
    881c:	59 3f       	cpi	r21, 0xF9	; 249
    881e:	50 f4       	brcc	.+20     	; 0x8834 <__addsf3x+0x52>
    8820:	50 3e       	cpi	r21, 0xE0	; 224
    8822:	68 f1       	brcs	.+90     	; 0x887e <__addsf3x+0x9c>
    8824:	1a 16       	cp	r1, r26
    8826:	f0 40       	sbci	r31, 0x00	; 0
    8828:	a2 2f       	mov	r26, r18
    882a:	23 2f       	mov	r18, r19
    882c:	34 2f       	mov	r19, r20
    882e:	44 27       	eor	r20, r20
    8830:	58 5f       	subi	r21, 0xF8	; 248
    8832:	f3 cf       	rjmp	.-26     	; 0x881a <__addsf3x+0x38>
    8834:	46 95       	lsr	r20
    8836:	37 95       	ror	r19
    8838:	27 95       	ror	r18
    883a:	a7 95       	ror	r26
    883c:	f0 40       	sbci	r31, 0x00	; 0
    883e:	53 95       	inc	r21
    8840:	c9 f7       	brne	.-14     	; 0x8834 <__addsf3x+0x52>
    8842:	7e f4       	brtc	.+30     	; 0x8862 <__addsf3x+0x80>
    8844:	1f 16       	cp	r1, r31
    8846:	ba 0b       	sbc	r27, r26
    8848:	62 0b       	sbc	r22, r18
    884a:	73 0b       	sbc	r23, r19
    884c:	84 0b       	sbc	r24, r20
    884e:	ba f0       	brmi	.+46     	; 0x887e <__addsf3x+0x9c>
    8850:	91 50       	subi	r25, 0x01	; 1
    8852:	a1 f0       	breq	.+40     	; 0x887c <__addsf3x+0x9a>
    8854:	ff 0f       	add	r31, r31
    8856:	bb 1f       	adc	r27, r27
    8858:	66 1f       	adc	r22, r22
    885a:	77 1f       	adc	r23, r23
    885c:	88 1f       	adc	r24, r24
    885e:	c2 f7       	brpl	.-16     	; 0x8850 <__addsf3x+0x6e>
    8860:	0e c0       	rjmp	.+28     	; 0x887e <__addsf3x+0x9c>
    8862:	ba 0f       	add	r27, r26
    8864:	62 1f       	adc	r22, r18
    8866:	73 1f       	adc	r23, r19
    8868:	84 1f       	adc	r24, r20
    886a:	48 f4       	brcc	.+18     	; 0x887e <__addsf3x+0x9c>
    886c:	87 95       	ror	r24
    886e:	77 95       	ror	r23
    8870:	67 95       	ror	r22
    8872:	b7 95       	ror	r27
    8874:	f7 95       	ror	r31
    8876:	9e 3f       	cpi	r25, 0xFE	; 254
    8878:	08 f0       	brcs	.+2      	; 0x887c <__addsf3x+0x9a>
    887a:	b0 cf       	rjmp	.-160    	; 0x87dc <__addsf3+0x28>
    887c:	93 95       	inc	r25
    887e:	88 0f       	add	r24, r24
    8880:	08 f0       	brcs	.+2      	; 0x8884 <__addsf3x+0xa2>
    8882:	99 27       	eor	r25, r25
    8884:	ee 0f       	add	r30, r30
    8886:	97 95       	ror	r25
    8888:	87 95       	ror	r24
    888a:	08 95       	ret
    888c:	0e 94 97 46 	call	0x8d2e	; 0x8d2e <__fp_pscA>
    8890:	60 f0       	brcs	.+24     	; 0x88aa <__addsf3x+0xc8>
    8892:	80 e8       	ldi	r24, 0x80	; 128
    8894:	91 e0       	ldi	r25, 0x01	; 1
    8896:	09 f4       	brne	.+2      	; 0x889a <__addsf3x+0xb8>
    8898:	9e ef       	ldi	r25, 0xFE	; 254
    889a:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <__fp_pscB>
    889e:	28 f0       	brcs	.+10     	; 0x88aa <__addsf3x+0xc8>
    88a0:	40 e8       	ldi	r20, 0x80	; 128
    88a2:	51 e0       	ldi	r21, 0x01	; 1
    88a4:	71 f4       	brne	.+28     	; 0x88c2 <atan2+0x10>
    88a6:	5e ef       	ldi	r21, 0xFE	; 254
    88a8:	0c c0       	rjmp	.+24     	; 0x88c2 <atan2+0x10>
    88aa:	0c 94 6d 46 	jmp	0x8cda	; 0x8cda <__fp_nan>
    88ae:	0c 94 17 47 	jmp	0x8e2e	; 0x8e2e <__fp_zero>

000088b2 <atan2>:
    88b2:	e9 2f       	mov	r30, r25
    88b4:	e0 78       	andi	r30, 0x80	; 128
    88b6:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__fp_split3>
    88ba:	40 f3       	brcs	.-48     	; 0x888c <__addsf3x+0xaa>
    88bc:	09 2e       	mov	r0, r25
    88be:	05 2a       	or	r0, r21
    88c0:	b1 f3       	breq	.-20     	; 0x88ae <__addsf3x+0xcc>
    88c2:	26 17       	cp	r18, r22
    88c4:	37 07       	cpc	r19, r23
    88c6:	48 07       	cpc	r20, r24
    88c8:	59 07       	cpc	r21, r25
    88ca:	38 f0       	brcs	.+14     	; 0x88da <atan2+0x28>
    88cc:	0e 2e       	mov	r0, r30
    88ce:	07 f8       	bld	r0, 7
    88d0:	e0 25       	eor	r30, r0
    88d2:	69 f0       	breq	.+26     	; 0x88ee <atan2+0x3c>
    88d4:	e0 25       	eor	r30, r0
    88d6:	e0 64       	ori	r30, 0x40	; 64
    88d8:	0a c0       	rjmp	.+20     	; 0x88ee <atan2+0x3c>
    88da:	ef 63       	ori	r30, 0x3F	; 63
    88dc:	07 f8       	bld	r0, 7
    88de:	00 94       	com	r0
    88e0:	07 fa       	bst	r0, 7
    88e2:	db 01       	movw	r26, r22
    88e4:	b9 01       	movw	r22, r18
    88e6:	9d 01       	movw	r18, r26
    88e8:	dc 01       	movw	r26, r24
    88ea:	ca 01       	movw	r24, r20
    88ec:	ad 01       	movw	r20, r26
    88ee:	ef 93       	push	r30
    88f0:	0e 94 d9 44 	call	0x89b2	; 0x89b2 <__divsf3_pse>
    88f4:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <__fp_round>
    88f8:	0e 94 89 44 	call	0x8912	; 0x8912 <atan>
    88fc:	5f 91       	pop	r21
    88fe:	55 23       	and	r21, r21
    8900:	39 f0       	breq	.+14     	; 0x8910 <atan2+0x5e>
    8902:	2b ed       	ldi	r18, 0xDB	; 219
    8904:	3f e0       	ldi	r19, 0x0F	; 15
    8906:	49 e4       	ldi	r20, 0x49	; 73
    8908:	50 fd       	sbrc	r21, 0
    890a:	49 ec       	ldi	r20, 0xC9	; 201
    890c:	0c 94 da 43 	jmp	0x87b4	; 0x87b4 <__addsf3>
    8910:	08 95       	ret

00008912 <atan>:
    8912:	df 93       	push	r29
    8914:	dd 27       	eor	r29, r29
    8916:	b9 2f       	mov	r27, r25
    8918:	bf 77       	andi	r27, 0x7F	; 127
    891a:	40 e8       	ldi	r20, 0x80	; 128
    891c:	5f e3       	ldi	r21, 0x3F	; 63
    891e:	16 16       	cp	r1, r22
    8920:	17 06       	cpc	r1, r23
    8922:	48 07       	cpc	r20, r24
    8924:	5b 07       	cpc	r21, r27
    8926:	18 f4       	brcc	.+6      	; 0x892e <atan+0x1c>
    8928:	d9 2f       	mov	r29, r25
    892a:	0e 94 23 47 	call	0x8e46	; 0x8e46 <inverse>
    892e:	9f 93       	push	r25
    8930:	8f 93       	push	r24
    8932:	7f 93       	push	r23
    8934:	6f 93       	push	r22
    8936:	0e 94 ae 48 	call	0x915c	; 0x915c <square>
    893a:	e8 e1       	ldi	r30, 0x18	; 24
    893c:	f2 e0       	ldi	r31, 0x02	; 2
    893e:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__fp_powser>
    8942:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <__fp_round>
    8946:	2f 91       	pop	r18
    8948:	3f 91       	pop	r19
    894a:	4f 91       	pop	r20
    894c:	5f 91       	pop	r21
    894e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <__mulsf3x>
    8952:	dd 23       	and	r29, r29
    8954:	51 f0       	breq	.+20     	; 0x896a <atan+0x58>
    8956:	90 58       	subi	r25, 0x80	; 128
    8958:	a2 ea       	ldi	r26, 0xA2	; 162
    895a:	2a ed       	ldi	r18, 0xDA	; 218
    895c:	3f e0       	ldi	r19, 0x0F	; 15
    895e:	49 ec       	ldi	r20, 0xC9	; 201
    8960:	5f e3       	ldi	r21, 0x3F	; 63
    8962:	d0 78       	andi	r29, 0x80	; 128
    8964:	5d 27       	eor	r21, r29
    8966:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <__addsf3x>
    896a:	df 91       	pop	r29
    896c:	0c 94 d0 46 	jmp	0x8da0	; 0x8da0 <__fp_round>

00008970 <__cmpsf2>:
    8970:	0e 94 35 46 	call	0x8c6a	; 0x8c6a <__fp_cmp>
    8974:	08 f4       	brcc	.+2      	; 0x8978 <__cmpsf2+0x8>
    8976:	81 e0       	ldi	r24, 0x01	; 1
    8978:	08 95       	ret

0000897a <cos>:
    897a:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__fp_rempio2>
    897e:	e3 95       	inc	r30
    8980:	0c 94 e1 46 	jmp	0x8dc2	; 0x8dc2 <__fp_sinus>

00008984 <__divsf3>:
    8984:	0e 94 d6 44 	call	0x89ac	; 0x89ac <__divsf3x>
    8988:	0c 94 d0 46 	jmp	0x8da0	; 0x8da0 <__fp_round>
    898c:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <__fp_pscB>
    8990:	58 f0       	brcs	.+22     	; 0x89a8 <__divsf3+0x24>
    8992:	0e 94 97 46 	call	0x8d2e	; 0x8d2e <__fp_pscA>
    8996:	40 f0       	brcs	.+16     	; 0x89a8 <__divsf3+0x24>
    8998:	29 f4       	brne	.+10     	; 0x89a4 <__divsf3+0x20>
    899a:	5f 3f       	cpi	r21, 0xFF	; 255
    899c:	29 f0       	breq	.+10     	; 0x89a8 <__divsf3+0x24>
    899e:	0c 94 59 46 	jmp	0x8cb2	; 0x8cb2 <__fp_inf>
    89a2:	51 11       	cpse	r21, r1
    89a4:	0c 94 18 47 	jmp	0x8e30	; 0x8e30 <__fp_szero>
    89a8:	0c 94 6d 46 	jmp	0x8cda	; 0x8cda <__fp_nan>

000089ac <__divsf3x>:
    89ac:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__fp_split3>
    89b0:	68 f3       	brcs	.-38     	; 0x898c <__divsf3+0x8>

000089b2 <__divsf3_pse>:
    89b2:	99 23       	and	r25, r25
    89b4:	b1 f3       	breq	.-20     	; 0x89a2 <__divsf3+0x1e>
    89b6:	55 23       	and	r21, r21
    89b8:	91 f3       	breq	.-28     	; 0x899e <__divsf3+0x1a>
    89ba:	95 1b       	sub	r25, r21
    89bc:	55 0b       	sbc	r21, r21
    89be:	bb 27       	eor	r27, r27
    89c0:	aa 27       	eor	r26, r26
    89c2:	62 17       	cp	r22, r18
    89c4:	73 07       	cpc	r23, r19
    89c6:	84 07       	cpc	r24, r20
    89c8:	38 f0       	brcs	.+14     	; 0x89d8 <__divsf3_pse+0x26>
    89ca:	9f 5f       	subi	r25, 0xFF	; 255
    89cc:	5f 4f       	sbci	r21, 0xFF	; 255
    89ce:	22 0f       	add	r18, r18
    89d0:	33 1f       	adc	r19, r19
    89d2:	44 1f       	adc	r20, r20
    89d4:	aa 1f       	adc	r26, r26
    89d6:	a9 f3       	breq	.-22     	; 0x89c2 <__divsf3_pse+0x10>
    89d8:	35 d0       	rcall	.+106    	; 0x8a44 <__divsf3_pse+0x92>
    89da:	0e 2e       	mov	r0, r30
    89dc:	3a f0       	brmi	.+14     	; 0x89ec <__divsf3_pse+0x3a>
    89de:	e0 e8       	ldi	r30, 0x80	; 128
    89e0:	32 d0       	rcall	.+100    	; 0x8a46 <__divsf3_pse+0x94>
    89e2:	91 50       	subi	r25, 0x01	; 1
    89e4:	50 40       	sbci	r21, 0x00	; 0
    89e6:	e6 95       	lsr	r30
    89e8:	00 1c       	adc	r0, r0
    89ea:	ca f7       	brpl	.-14     	; 0x89de <__divsf3_pse+0x2c>
    89ec:	2b d0       	rcall	.+86     	; 0x8a44 <__divsf3_pse+0x92>
    89ee:	fe 2f       	mov	r31, r30
    89f0:	29 d0       	rcall	.+82     	; 0x8a44 <__divsf3_pse+0x92>
    89f2:	66 0f       	add	r22, r22
    89f4:	77 1f       	adc	r23, r23
    89f6:	88 1f       	adc	r24, r24
    89f8:	bb 1f       	adc	r27, r27
    89fa:	26 17       	cp	r18, r22
    89fc:	37 07       	cpc	r19, r23
    89fe:	48 07       	cpc	r20, r24
    8a00:	ab 07       	cpc	r26, r27
    8a02:	b0 e8       	ldi	r27, 0x80	; 128
    8a04:	09 f0       	breq	.+2      	; 0x8a08 <__divsf3_pse+0x56>
    8a06:	bb 0b       	sbc	r27, r27
    8a08:	80 2d       	mov	r24, r0
    8a0a:	bf 01       	movw	r22, r30
    8a0c:	ff 27       	eor	r31, r31
    8a0e:	93 58       	subi	r25, 0x83	; 131
    8a10:	5f 4f       	sbci	r21, 0xFF	; 255
    8a12:	3a f0       	brmi	.+14     	; 0x8a22 <__divsf3_pse+0x70>
    8a14:	9e 3f       	cpi	r25, 0xFE	; 254
    8a16:	51 05       	cpc	r21, r1
    8a18:	78 f0       	brcs	.+30     	; 0x8a38 <__divsf3_pse+0x86>
    8a1a:	0c 94 59 46 	jmp	0x8cb2	; 0x8cb2 <__fp_inf>
    8a1e:	0c 94 18 47 	jmp	0x8e30	; 0x8e30 <__fp_szero>
    8a22:	5f 3f       	cpi	r21, 0xFF	; 255
    8a24:	e4 f3       	brlt	.-8      	; 0x8a1e <__divsf3_pse+0x6c>
    8a26:	98 3e       	cpi	r25, 0xE8	; 232
    8a28:	d4 f3       	brlt	.-12     	; 0x8a1e <__divsf3_pse+0x6c>
    8a2a:	86 95       	lsr	r24
    8a2c:	77 95       	ror	r23
    8a2e:	67 95       	ror	r22
    8a30:	b7 95       	ror	r27
    8a32:	f7 95       	ror	r31
    8a34:	9f 5f       	subi	r25, 0xFF	; 255
    8a36:	c9 f7       	brne	.-14     	; 0x8a2a <__divsf3_pse+0x78>
    8a38:	88 0f       	add	r24, r24
    8a3a:	91 1d       	adc	r25, r1
    8a3c:	96 95       	lsr	r25
    8a3e:	87 95       	ror	r24
    8a40:	97 f9       	bld	r25, 7
    8a42:	08 95       	ret
    8a44:	e1 e0       	ldi	r30, 0x01	; 1
    8a46:	66 0f       	add	r22, r22
    8a48:	77 1f       	adc	r23, r23
    8a4a:	88 1f       	adc	r24, r24
    8a4c:	bb 1f       	adc	r27, r27
    8a4e:	62 17       	cp	r22, r18
    8a50:	73 07       	cpc	r23, r19
    8a52:	84 07       	cpc	r24, r20
    8a54:	ba 07       	cpc	r27, r26
    8a56:	20 f0       	brcs	.+8      	; 0x8a60 <__divsf3_pse+0xae>
    8a58:	62 1b       	sub	r22, r18
    8a5a:	73 0b       	sbc	r23, r19
    8a5c:	84 0b       	sbc	r24, r20
    8a5e:	ba 0b       	sbc	r27, r26
    8a60:	ee 1f       	adc	r30, r30
    8a62:	88 f7       	brcc	.-30     	; 0x8a46 <__divsf3_pse+0x94>
    8a64:	e0 95       	com	r30
    8a66:	08 95       	ret
    8a68:	29 f4       	brne	.+10     	; 0x8a74 <__divsf3_pse+0xc2>
    8a6a:	16 f0       	brts	.+4      	; 0x8a70 <__divsf3_pse+0xbe>
    8a6c:	0c 94 59 46 	jmp	0x8cb2	; 0x8cb2 <__fp_inf>
    8a70:	0c 94 17 47 	jmp	0x8e2e	; 0x8e2e <__fp_zero>
    8a74:	0c 94 6d 46 	jmp	0x8cda	; 0x8cda <__fp_nan>

00008a78 <exp>:
    8a78:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fp_splitA>
    8a7c:	a8 f3       	brcs	.-22     	; 0x8a68 <__divsf3_pse+0xb6>
    8a7e:	96 38       	cpi	r25, 0x86	; 134
    8a80:	a0 f7       	brcc	.-24     	; 0x8a6a <__divsf3_pse+0xb8>
    8a82:	07 f8       	bld	r0, 7
    8a84:	0f 92       	push	r0
    8a86:	e8 94       	clt
    8a88:	2b e3       	ldi	r18, 0x3B	; 59
    8a8a:	3a ea       	ldi	r19, 0xAA	; 170
    8a8c:	48 eb       	ldi	r20, 0xB8	; 184
    8a8e:	5f e7       	ldi	r21, 0x7F	; 127
    8a90:	0e 94 ff 47 	call	0x8ffe	; 0x8ffe <__mulsf3_pse>
    8a94:	0f 92       	push	r0
    8a96:	0f 92       	push	r0
    8a98:	0f 92       	push	r0
    8a9a:	4d b7       	in	r20, 0x3d	; 61
    8a9c:	5e b7       	in	r21, 0x3e	; 62
    8a9e:	0f 92       	push	r0
    8aa0:	0e 94 b5 47 	call	0x8f6a	; 0x8f6a <modf>
    8aa4:	e5 e4       	ldi	r30, 0x45	; 69
    8aa6:	f2 e0       	ldi	r31, 0x02	; 2
    8aa8:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__fp_powser>
    8aac:	4f 91       	pop	r20
    8aae:	5f 91       	pop	r21
    8ab0:	ef 91       	pop	r30
    8ab2:	ff 91       	pop	r31
    8ab4:	e5 95       	asr	r30
    8ab6:	ee 1f       	adc	r30, r30
    8ab8:	ff 1f       	adc	r31, r31
    8aba:	49 f0       	breq	.+18     	; 0x8ace <exp+0x56>
    8abc:	fe 57       	subi	r31, 0x7E	; 126
    8abe:	e0 68       	ori	r30, 0x80	; 128
    8ac0:	44 27       	eor	r20, r20
    8ac2:	ee 0f       	add	r30, r30
    8ac4:	44 1f       	adc	r20, r20
    8ac6:	fa 95       	dec	r31
    8ac8:	e1 f7       	brne	.-8      	; 0x8ac2 <exp+0x4a>
    8aca:	41 95       	neg	r20
    8acc:	55 0b       	sbc	r21, r21
    8ace:	0e 94 2f 47 	call	0x8e5e	; 0x8e5e <ldexp>
    8ad2:	0f 90       	pop	r0
    8ad4:	07 fe       	sbrs	r0, 7
    8ad6:	0c 94 23 47 	jmp	0x8e46	; 0x8e46 <inverse>
    8ada:	08 95       	ret

00008adc <__fixsfsi>:
    8adc:	0e 94 75 45 	call	0x8aea	; 0x8aea <__fixunssfsi>
    8ae0:	68 94       	set
    8ae2:	b1 11       	cpse	r27, r1
    8ae4:	0c 94 18 47 	jmp	0x8e30	; 0x8e30 <__fp_szero>
    8ae8:	08 95       	ret

00008aea <__fixunssfsi>:
    8aea:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fp_splitA>
    8aee:	88 f0       	brcs	.+34     	; 0x8b12 <__fixunssfsi+0x28>
    8af0:	9f 57       	subi	r25, 0x7F	; 127
    8af2:	98 f0       	brcs	.+38     	; 0x8b1a <__fixunssfsi+0x30>
    8af4:	b9 2f       	mov	r27, r25
    8af6:	99 27       	eor	r25, r25
    8af8:	b7 51       	subi	r27, 0x17	; 23
    8afa:	b0 f0       	brcs	.+44     	; 0x8b28 <__fixunssfsi+0x3e>
    8afc:	e1 f0       	breq	.+56     	; 0x8b36 <__fixunssfsi+0x4c>
    8afe:	66 0f       	add	r22, r22
    8b00:	77 1f       	adc	r23, r23
    8b02:	88 1f       	adc	r24, r24
    8b04:	99 1f       	adc	r25, r25
    8b06:	1a f0       	brmi	.+6      	; 0x8b0e <__fixunssfsi+0x24>
    8b08:	ba 95       	dec	r27
    8b0a:	c9 f7       	brne	.-14     	; 0x8afe <__fixunssfsi+0x14>
    8b0c:	14 c0       	rjmp	.+40     	; 0x8b36 <__fixunssfsi+0x4c>
    8b0e:	b1 30       	cpi	r27, 0x01	; 1
    8b10:	91 f0       	breq	.+36     	; 0x8b36 <__fixunssfsi+0x4c>
    8b12:	0e 94 17 47 	call	0x8e2e	; 0x8e2e <__fp_zero>
    8b16:	b1 e0       	ldi	r27, 0x01	; 1
    8b18:	08 95       	ret
    8b1a:	0c 94 17 47 	jmp	0x8e2e	; 0x8e2e <__fp_zero>
    8b1e:	67 2f       	mov	r22, r23
    8b20:	78 2f       	mov	r23, r24
    8b22:	88 27       	eor	r24, r24
    8b24:	b8 5f       	subi	r27, 0xF8	; 248
    8b26:	39 f0       	breq	.+14     	; 0x8b36 <__fixunssfsi+0x4c>
    8b28:	b9 3f       	cpi	r27, 0xF9	; 249
    8b2a:	cc f3       	brlt	.-14     	; 0x8b1e <__fixunssfsi+0x34>
    8b2c:	86 95       	lsr	r24
    8b2e:	77 95       	ror	r23
    8b30:	67 95       	ror	r22
    8b32:	b3 95       	inc	r27
    8b34:	d9 f7       	brne	.-10     	; 0x8b2c <__fixunssfsi+0x42>
    8b36:	3e f4       	brtc	.+14     	; 0x8b46 <__fixunssfsi+0x5c>
    8b38:	90 95       	com	r25
    8b3a:	80 95       	com	r24
    8b3c:	70 95       	com	r23
    8b3e:	61 95       	neg	r22
    8b40:	7f 4f       	sbci	r23, 0xFF	; 255
    8b42:	8f 4f       	sbci	r24, 0xFF	; 255
    8b44:	9f 4f       	sbci	r25, 0xFF	; 255
    8b46:	08 95       	ret

00008b48 <__floatunsisf>:
    8b48:	e8 94       	clt
    8b4a:	09 c0       	rjmp	.+18     	; 0x8b5e <__floatsisf+0x12>

00008b4c <__floatsisf>:
    8b4c:	97 fb       	bst	r25, 7
    8b4e:	3e f4       	brtc	.+14     	; 0x8b5e <__floatsisf+0x12>
    8b50:	90 95       	com	r25
    8b52:	80 95       	com	r24
    8b54:	70 95       	com	r23
    8b56:	61 95       	neg	r22
    8b58:	7f 4f       	sbci	r23, 0xFF	; 255
    8b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    8b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    8b5e:	99 23       	and	r25, r25
    8b60:	a9 f0       	breq	.+42     	; 0x8b8c <__floatsisf+0x40>
    8b62:	f9 2f       	mov	r31, r25
    8b64:	96 e9       	ldi	r25, 0x96	; 150
    8b66:	bb 27       	eor	r27, r27
    8b68:	93 95       	inc	r25
    8b6a:	f6 95       	lsr	r31
    8b6c:	87 95       	ror	r24
    8b6e:	77 95       	ror	r23
    8b70:	67 95       	ror	r22
    8b72:	b7 95       	ror	r27
    8b74:	f1 11       	cpse	r31, r1
    8b76:	f8 cf       	rjmp	.-16     	; 0x8b68 <__floatsisf+0x1c>
    8b78:	fa f4       	brpl	.+62     	; 0x8bb8 <__floatsisf+0x6c>
    8b7a:	bb 0f       	add	r27, r27
    8b7c:	11 f4       	brne	.+4      	; 0x8b82 <__floatsisf+0x36>
    8b7e:	60 ff       	sbrs	r22, 0
    8b80:	1b c0       	rjmp	.+54     	; 0x8bb8 <__floatsisf+0x6c>
    8b82:	6f 5f       	subi	r22, 0xFF	; 255
    8b84:	7f 4f       	sbci	r23, 0xFF	; 255
    8b86:	8f 4f       	sbci	r24, 0xFF	; 255
    8b88:	9f 4f       	sbci	r25, 0xFF	; 255
    8b8a:	16 c0       	rjmp	.+44     	; 0x8bb8 <__floatsisf+0x6c>
    8b8c:	88 23       	and	r24, r24
    8b8e:	11 f0       	breq	.+4      	; 0x8b94 <__floatsisf+0x48>
    8b90:	96 e9       	ldi	r25, 0x96	; 150
    8b92:	11 c0       	rjmp	.+34     	; 0x8bb6 <__floatsisf+0x6a>
    8b94:	77 23       	and	r23, r23
    8b96:	21 f0       	breq	.+8      	; 0x8ba0 <__floatsisf+0x54>
    8b98:	9e e8       	ldi	r25, 0x8E	; 142
    8b9a:	87 2f       	mov	r24, r23
    8b9c:	76 2f       	mov	r23, r22
    8b9e:	05 c0       	rjmp	.+10     	; 0x8baa <__floatsisf+0x5e>
    8ba0:	66 23       	and	r22, r22
    8ba2:	71 f0       	breq	.+28     	; 0x8bc0 <__floatsisf+0x74>
    8ba4:	96 e8       	ldi	r25, 0x86	; 134
    8ba6:	86 2f       	mov	r24, r22
    8ba8:	70 e0       	ldi	r23, 0x00	; 0
    8baa:	60 e0       	ldi	r22, 0x00	; 0
    8bac:	2a f0       	brmi	.+10     	; 0x8bb8 <__floatsisf+0x6c>
    8bae:	9a 95       	dec	r25
    8bb0:	66 0f       	add	r22, r22
    8bb2:	77 1f       	adc	r23, r23
    8bb4:	88 1f       	adc	r24, r24
    8bb6:	da f7       	brpl	.-10     	; 0x8bae <__floatsisf+0x62>
    8bb8:	88 0f       	add	r24, r24
    8bba:	96 95       	lsr	r25
    8bbc:	87 95       	ror	r24
    8bbe:	97 f9       	bld	r25, 7
    8bc0:	08 95       	ret
    8bc2:	0e 94 97 46 	call	0x8d2e	; 0x8d2e <__fp_pscA>
    8bc6:	20 f0       	brcs	.+8      	; 0x8bd0 <__floatsisf+0x84>
    8bc8:	19 f0       	breq	.+6      	; 0x8bd0 <__floatsisf+0x84>
    8bca:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <__fp_pscB>
    8bce:	50 f4       	brcc	.+20     	; 0x8be4 <fmod+0xc>
    8bd0:	0c 94 6d 46 	jmp	0x8cda	; 0x8cda <__fp_nan>
    8bd4:	0c 94 18 47 	jmp	0x8e30	; 0x8e30 <__fp_szero>

00008bd8 <fmod>:
    8bd8:	e9 2f       	mov	r30, r25
    8bda:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__fp_split3>
    8bde:	88 f3       	brcs	.-30     	; 0x8bc2 <__floatsisf+0x76>
    8be0:	55 23       	and	r21, r21
    8be2:	b1 f3       	breq	.-20     	; 0x8bd0 <__floatsisf+0x84>
    8be4:	e7 fb       	bst	r30, 7
    8be6:	62 17       	cp	r22, r18
    8be8:	73 07       	cpc	r23, r19
    8bea:	84 07       	cpc	r24, r20
    8bec:	95 07       	cpc	r25, r21
    8bee:	a8 f1       	brcs	.+106    	; 0x8c5a <fmod+0x82>
    8bf0:	89 f3       	breq	.-30     	; 0x8bd4 <__floatsisf+0x88>
    8bf2:	e9 2f       	mov	r30, r25
    8bf4:	ff 27       	eor	r31, r31
    8bf6:	88 23       	and	r24, r24
    8bf8:	2a f0       	brmi	.+10     	; 0x8c04 <fmod+0x2c>
    8bfa:	31 97       	sbiw	r30, 0x01	; 1
    8bfc:	66 0f       	add	r22, r22
    8bfe:	77 1f       	adc	r23, r23
    8c00:	88 1f       	adc	r24, r24
    8c02:	da f7       	brpl	.-10     	; 0x8bfa <fmod+0x22>
    8c04:	95 2f       	mov	r25, r21
    8c06:	55 27       	eor	r21, r21
    8c08:	44 23       	and	r20, r20
    8c0a:	32 f0       	brmi	.+12     	; 0x8c18 <fmod+0x40>
    8c0c:	91 50       	subi	r25, 0x01	; 1
    8c0e:	50 40       	sbci	r21, 0x00	; 0
    8c10:	22 0f       	add	r18, r18
    8c12:	33 1f       	adc	r19, r19
    8c14:	44 1f       	adc	r20, r20
    8c16:	d2 f7       	brpl	.-12     	; 0x8c0c <fmod+0x34>
    8c18:	bb 27       	eor	r27, r27
    8c1a:	e9 1b       	sub	r30, r25
    8c1c:	f5 0b       	sbc	r31, r21
    8c1e:	62 1b       	sub	r22, r18
    8c20:	73 0b       	sbc	r23, r19
    8c22:	84 0b       	sbc	r24, r20
    8c24:	b1 09       	sbc	r27, r1
    8c26:	b1 f2       	breq	.-84     	; 0x8bd4 <__floatsisf+0x88>
    8c28:	22 f4       	brpl	.+8      	; 0x8c32 <fmod+0x5a>
    8c2a:	62 0f       	add	r22, r18
    8c2c:	73 1f       	adc	r23, r19
    8c2e:	84 1f       	adc	r24, r20
    8c30:	b1 1d       	adc	r27, r1
    8c32:	31 97       	sbiw	r30, 0x01	; 1
    8c34:	2a f0       	brmi	.+10     	; 0x8c40 <fmod+0x68>
    8c36:	66 0f       	add	r22, r22
    8c38:	77 1f       	adc	r23, r23
    8c3a:	88 1f       	adc	r24, r24
    8c3c:	bb 1f       	adc	r27, r27
    8c3e:	ef cf       	rjmp	.-34     	; 0x8c1e <fmod+0x46>
    8c40:	91 50       	subi	r25, 0x01	; 1
    8c42:	50 40       	sbci	r21, 0x00	; 0
    8c44:	62 f0       	brmi	.+24     	; 0x8c5e <fmod+0x86>
    8c46:	41 f0       	breq	.+16     	; 0x8c58 <fmod+0x80>
    8c48:	88 23       	and	r24, r24
    8c4a:	32 f0       	brmi	.+12     	; 0x8c58 <fmod+0x80>
    8c4c:	66 0f       	add	r22, r22
    8c4e:	77 1f       	adc	r23, r23
    8c50:	88 1f       	adc	r24, r24
    8c52:	91 50       	subi	r25, 0x01	; 1
    8c54:	50 40       	sbci	r21, 0x00	; 0
    8c56:	c1 f7       	brne	.-16     	; 0x8c48 <fmod+0x70>
    8c58:	93 95       	inc	r25
    8c5a:	0c 94 5f 46 	jmp	0x8cbe	; 0x8cbe <__fp_mpack>
    8c5e:	86 95       	lsr	r24
    8c60:	77 95       	ror	r23
    8c62:	67 95       	ror	r22
    8c64:	9f 5f       	subi	r25, 0xFF	; 255
    8c66:	d9 f7       	brne	.-10     	; 0x8c5e <fmod+0x86>
    8c68:	f7 cf       	rjmp	.-18     	; 0x8c58 <fmod+0x80>

00008c6a <__fp_cmp>:
    8c6a:	99 0f       	add	r25, r25
    8c6c:	00 08       	sbc	r0, r0
    8c6e:	55 0f       	add	r21, r21
    8c70:	aa 0b       	sbc	r26, r26
    8c72:	e0 e8       	ldi	r30, 0x80	; 128
    8c74:	fe ef       	ldi	r31, 0xFE	; 254
    8c76:	16 16       	cp	r1, r22
    8c78:	17 06       	cpc	r1, r23
    8c7a:	e8 07       	cpc	r30, r24
    8c7c:	f9 07       	cpc	r31, r25
    8c7e:	c0 f0       	brcs	.+48     	; 0x8cb0 <__fp_cmp+0x46>
    8c80:	12 16       	cp	r1, r18
    8c82:	13 06       	cpc	r1, r19
    8c84:	e4 07       	cpc	r30, r20
    8c86:	f5 07       	cpc	r31, r21
    8c88:	98 f0       	brcs	.+38     	; 0x8cb0 <__fp_cmp+0x46>
    8c8a:	62 1b       	sub	r22, r18
    8c8c:	73 0b       	sbc	r23, r19
    8c8e:	84 0b       	sbc	r24, r20
    8c90:	95 0b       	sbc	r25, r21
    8c92:	39 f4       	brne	.+14     	; 0x8ca2 <__fp_cmp+0x38>
    8c94:	0a 26       	eor	r0, r26
    8c96:	61 f0       	breq	.+24     	; 0x8cb0 <__fp_cmp+0x46>
    8c98:	23 2b       	or	r18, r19
    8c9a:	24 2b       	or	r18, r20
    8c9c:	25 2b       	or	r18, r21
    8c9e:	21 f4       	brne	.+8      	; 0x8ca8 <__fp_cmp+0x3e>
    8ca0:	08 95       	ret
    8ca2:	0a 26       	eor	r0, r26
    8ca4:	09 f4       	brne	.+2      	; 0x8ca8 <__fp_cmp+0x3e>
    8ca6:	a1 40       	sbci	r26, 0x01	; 1
    8ca8:	a6 95       	lsr	r26
    8caa:	8f ef       	ldi	r24, 0xFF	; 255
    8cac:	81 1d       	adc	r24, r1
    8cae:	81 1d       	adc	r24, r1
    8cb0:	08 95       	ret

00008cb2 <__fp_inf>:
    8cb2:	97 f9       	bld	r25, 7
    8cb4:	9f 67       	ori	r25, 0x7F	; 127
    8cb6:	80 e8       	ldi	r24, 0x80	; 128
    8cb8:	70 e0       	ldi	r23, 0x00	; 0
    8cba:	60 e0       	ldi	r22, 0x00	; 0
    8cbc:	08 95       	ret

00008cbe <__fp_mpack>:
    8cbe:	9f 3f       	cpi	r25, 0xFF	; 255
    8cc0:	31 f0       	breq	.+12     	; 0x8cce <__fp_mpack_finite+0xc>

00008cc2 <__fp_mpack_finite>:
    8cc2:	91 50       	subi	r25, 0x01	; 1
    8cc4:	20 f4       	brcc	.+8      	; 0x8cce <__fp_mpack_finite+0xc>
    8cc6:	87 95       	ror	r24
    8cc8:	77 95       	ror	r23
    8cca:	67 95       	ror	r22
    8ccc:	b7 95       	ror	r27
    8cce:	88 0f       	add	r24, r24
    8cd0:	91 1d       	adc	r25, r1
    8cd2:	96 95       	lsr	r25
    8cd4:	87 95       	ror	r24
    8cd6:	97 f9       	bld	r25, 7
    8cd8:	08 95       	ret

00008cda <__fp_nan>:
    8cda:	9f ef       	ldi	r25, 0xFF	; 255
    8cdc:	80 ec       	ldi	r24, 0xC0	; 192
    8cde:	08 95       	ret

00008ce0 <__fp_powser>:
    8ce0:	df 93       	push	r29
    8ce2:	cf 93       	push	r28
    8ce4:	1f 93       	push	r17
    8ce6:	0f 93       	push	r16
    8ce8:	ff 92       	push	r15
    8cea:	ef 92       	push	r14
    8cec:	df 92       	push	r13
    8cee:	7b 01       	movw	r14, r22
    8cf0:	8c 01       	movw	r16, r24
    8cf2:	68 94       	set
    8cf4:	06 c0       	rjmp	.+12     	; 0x8d02 <__fp_powser+0x22>
    8cf6:	da 2e       	mov	r13, r26
    8cf8:	ef 01       	movw	r28, r30
    8cfa:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <__mulsf3x>
    8cfe:	fe 01       	movw	r30, r28
    8d00:	e8 94       	clt
    8d02:	a5 91       	lpm	r26, Z+
    8d04:	25 91       	lpm	r18, Z+
    8d06:	35 91       	lpm	r19, Z+
    8d08:	45 91       	lpm	r20, Z+
    8d0a:	55 91       	lpm	r21, Z+
    8d0c:	a6 f3       	brts	.-24     	; 0x8cf6 <__fp_powser+0x16>
    8d0e:	ef 01       	movw	r28, r30
    8d10:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <__addsf3x>
    8d14:	fe 01       	movw	r30, r28
    8d16:	97 01       	movw	r18, r14
    8d18:	a8 01       	movw	r20, r16
    8d1a:	da 94       	dec	r13
    8d1c:	69 f7       	brne	.-38     	; 0x8cf8 <__fp_powser+0x18>
    8d1e:	df 90       	pop	r13
    8d20:	ef 90       	pop	r14
    8d22:	ff 90       	pop	r15
    8d24:	0f 91       	pop	r16
    8d26:	1f 91       	pop	r17
    8d28:	cf 91       	pop	r28
    8d2a:	df 91       	pop	r29
    8d2c:	08 95       	ret

00008d2e <__fp_pscA>:
    8d2e:	00 24       	eor	r0, r0
    8d30:	0a 94       	dec	r0
    8d32:	16 16       	cp	r1, r22
    8d34:	17 06       	cpc	r1, r23
    8d36:	18 06       	cpc	r1, r24
    8d38:	09 06       	cpc	r0, r25
    8d3a:	08 95       	ret

00008d3c <__fp_pscB>:
    8d3c:	00 24       	eor	r0, r0
    8d3e:	0a 94       	dec	r0
    8d40:	12 16       	cp	r1, r18
    8d42:	13 06       	cpc	r1, r19
    8d44:	14 06       	cpc	r1, r20
    8d46:	05 06       	cpc	r0, r21
    8d48:	08 95       	ret
    8d4a:	0c 94 6d 46 	jmp	0x8cda	; 0x8cda <__fp_nan>

00008d4e <__fp_rempio2>:
    8d4e:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fp_splitA>
    8d52:	d8 f3       	brcs	.-10     	; 0x8d4a <__fp_pscB+0xe>
    8d54:	e8 94       	clt
    8d56:	e0 e0       	ldi	r30, 0x00	; 0
    8d58:	bb 27       	eor	r27, r27
    8d5a:	9f 57       	subi	r25, 0x7F	; 127
    8d5c:	f0 f0       	brcs	.+60     	; 0x8d9a <__fp_rempio2+0x4c>
    8d5e:	2a ed       	ldi	r18, 0xDA	; 218
    8d60:	3f e0       	ldi	r19, 0x0F	; 15
    8d62:	49 ec       	ldi	r20, 0xC9	; 201
    8d64:	06 c0       	rjmp	.+12     	; 0x8d72 <__fp_rempio2+0x24>
    8d66:	ee 0f       	add	r30, r30
    8d68:	bb 0f       	add	r27, r27
    8d6a:	66 1f       	adc	r22, r22
    8d6c:	77 1f       	adc	r23, r23
    8d6e:	88 1f       	adc	r24, r24
    8d70:	28 f0       	brcs	.+10     	; 0x8d7c <__fp_rempio2+0x2e>
    8d72:	b2 3a       	cpi	r27, 0xA2	; 162
    8d74:	62 07       	cpc	r22, r18
    8d76:	73 07       	cpc	r23, r19
    8d78:	84 07       	cpc	r24, r20
    8d7a:	28 f0       	brcs	.+10     	; 0x8d86 <__fp_rempio2+0x38>
    8d7c:	b2 5a       	subi	r27, 0xA2	; 162
    8d7e:	62 0b       	sbc	r22, r18
    8d80:	73 0b       	sbc	r23, r19
    8d82:	84 0b       	sbc	r24, r20
    8d84:	e3 95       	inc	r30
    8d86:	9a 95       	dec	r25
    8d88:	72 f7       	brpl	.-36     	; 0x8d66 <__fp_rempio2+0x18>
    8d8a:	80 38       	cpi	r24, 0x80	; 128
    8d8c:	30 f4       	brcc	.+12     	; 0x8d9a <__fp_rempio2+0x4c>
    8d8e:	9a 95       	dec	r25
    8d90:	bb 0f       	add	r27, r27
    8d92:	66 1f       	adc	r22, r22
    8d94:	77 1f       	adc	r23, r23
    8d96:	88 1f       	adc	r24, r24
    8d98:	d2 f7       	brpl	.-12     	; 0x8d8e <__fp_rempio2+0x40>
    8d9a:	90 48       	sbci	r25, 0x80	; 128
    8d9c:	0c 94 61 46 	jmp	0x8cc2	; 0x8cc2 <__fp_mpack_finite>

00008da0 <__fp_round>:
    8da0:	09 2e       	mov	r0, r25
    8da2:	03 94       	inc	r0
    8da4:	00 0c       	add	r0, r0
    8da6:	11 f4       	brne	.+4      	; 0x8dac <__fp_round+0xc>
    8da8:	88 23       	and	r24, r24
    8daa:	52 f0       	brmi	.+20     	; 0x8dc0 <__fp_round+0x20>
    8dac:	bb 0f       	add	r27, r27
    8dae:	40 f4       	brcc	.+16     	; 0x8dc0 <__fp_round+0x20>
    8db0:	bf 2b       	or	r27, r31
    8db2:	11 f4       	brne	.+4      	; 0x8db8 <__fp_round+0x18>
    8db4:	60 ff       	sbrs	r22, 0
    8db6:	04 c0       	rjmp	.+8      	; 0x8dc0 <__fp_round+0x20>
    8db8:	6f 5f       	subi	r22, 0xFF	; 255
    8dba:	7f 4f       	sbci	r23, 0xFF	; 255
    8dbc:	8f 4f       	sbci	r24, 0xFF	; 255
    8dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    8dc0:	08 95       	ret

00008dc2 <__fp_sinus>:
    8dc2:	ef 93       	push	r30
    8dc4:	e0 ff       	sbrs	r30, 0
    8dc6:	07 c0       	rjmp	.+14     	; 0x8dd6 <__fp_sinus+0x14>
    8dc8:	a2 ea       	ldi	r26, 0xA2	; 162
    8dca:	2a ed       	ldi	r18, 0xDA	; 218
    8dcc:	3f e0       	ldi	r19, 0x0F	; 15
    8dce:	49 ec       	ldi	r20, 0xC9	; 201
    8dd0:	5f eb       	ldi	r21, 0xBF	; 191
    8dd2:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <__addsf3x>
    8dd6:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <__fp_round>
    8dda:	0f 90       	pop	r0
    8ddc:	03 94       	inc	r0
    8dde:	01 fc       	sbrc	r0, 1
    8de0:	90 58       	subi	r25, 0x80	; 128
    8de2:	ed e6       	ldi	r30, 0x6D	; 109
    8de4:	f2 e0       	ldi	r31, 0x02	; 2
    8de6:	0c 94 b7 48 	jmp	0x916e	; 0x916e <__fp_powsodd>

00008dea <__fp_split3>:
    8dea:	57 fd       	sbrc	r21, 7
    8dec:	90 58       	subi	r25, 0x80	; 128
    8dee:	44 0f       	add	r20, r20
    8df0:	55 1f       	adc	r21, r21
    8df2:	59 f0       	breq	.+22     	; 0x8e0a <__fp_splitA+0x10>
    8df4:	5f 3f       	cpi	r21, 0xFF	; 255
    8df6:	71 f0       	breq	.+28     	; 0x8e14 <__fp_splitA+0x1a>
    8df8:	47 95       	ror	r20

00008dfa <__fp_splitA>:
    8dfa:	88 0f       	add	r24, r24
    8dfc:	97 fb       	bst	r25, 7
    8dfe:	99 1f       	adc	r25, r25
    8e00:	61 f0       	breq	.+24     	; 0x8e1a <__fp_splitA+0x20>
    8e02:	9f 3f       	cpi	r25, 0xFF	; 255
    8e04:	79 f0       	breq	.+30     	; 0x8e24 <__fp_splitA+0x2a>
    8e06:	87 95       	ror	r24
    8e08:	08 95       	ret
    8e0a:	12 16       	cp	r1, r18
    8e0c:	13 06       	cpc	r1, r19
    8e0e:	14 06       	cpc	r1, r20
    8e10:	55 1f       	adc	r21, r21
    8e12:	f2 cf       	rjmp	.-28     	; 0x8df8 <__fp_split3+0xe>
    8e14:	46 95       	lsr	r20
    8e16:	f1 df       	rcall	.-30     	; 0x8dfa <__fp_splitA>
    8e18:	08 c0       	rjmp	.+16     	; 0x8e2a <__fp_splitA+0x30>
    8e1a:	16 16       	cp	r1, r22
    8e1c:	17 06       	cpc	r1, r23
    8e1e:	18 06       	cpc	r1, r24
    8e20:	99 1f       	adc	r25, r25
    8e22:	f1 cf       	rjmp	.-30     	; 0x8e06 <__fp_splitA+0xc>
    8e24:	86 95       	lsr	r24
    8e26:	71 05       	cpc	r23, r1
    8e28:	61 05       	cpc	r22, r1
    8e2a:	08 94       	sec
    8e2c:	08 95       	ret

00008e2e <__fp_zero>:
    8e2e:	e8 94       	clt

00008e30 <__fp_szero>:
    8e30:	bb 27       	eor	r27, r27
    8e32:	66 27       	eor	r22, r22
    8e34:	77 27       	eor	r23, r23
    8e36:	cb 01       	movw	r24, r22
    8e38:	97 f9       	bld	r25, 7
    8e3a:	08 95       	ret

00008e3c <__gesf2>:
    8e3c:	0e 94 35 46 	call	0x8c6a	; 0x8c6a <__fp_cmp>
    8e40:	08 f4       	brcc	.+2      	; 0x8e44 <__gesf2+0x8>
    8e42:	8f ef       	ldi	r24, 0xFF	; 255
    8e44:	08 95       	ret

00008e46 <inverse>:
    8e46:	9b 01       	movw	r18, r22
    8e48:	ac 01       	movw	r20, r24
    8e4a:	60 e0       	ldi	r22, 0x00	; 0
    8e4c:	70 e0       	ldi	r23, 0x00	; 0
    8e4e:	80 e8       	ldi	r24, 0x80	; 128
    8e50:	9f e3       	ldi	r25, 0x3F	; 63
    8e52:	0c 94 c2 44 	jmp	0x8984	; 0x8984 <__divsf3>
    8e56:	0c 94 59 46 	jmp	0x8cb2	; 0x8cb2 <__fp_inf>
    8e5a:	0c 94 5f 46 	jmp	0x8cbe	; 0x8cbe <__fp_mpack>

00008e5e <ldexp>:
    8e5e:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fp_splitA>
    8e62:	d8 f3       	brcs	.-10     	; 0x8e5a <inverse+0x14>
    8e64:	99 23       	and	r25, r25
    8e66:	c9 f3       	breq	.-14     	; 0x8e5a <inverse+0x14>
    8e68:	94 0f       	add	r25, r20
    8e6a:	51 1d       	adc	r21, r1
    8e6c:	a3 f3       	brvs	.-24     	; 0x8e56 <inverse+0x10>
    8e6e:	91 50       	subi	r25, 0x01	; 1
    8e70:	50 40       	sbci	r21, 0x00	; 0
    8e72:	94 f0       	brlt	.+36     	; 0x8e98 <ldexp+0x3a>
    8e74:	59 f0       	breq	.+22     	; 0x8e8c <ldexp+0x2e>
    8e76:	88 23       	and	r24, r24
    8e78:	32 f0       	brmi	.+12     	; 0x8e86 <ldexp+0x28>
    8e7a:	66 0f       	add	r22, r22
    8e7c:	77 1f       	adc	r23, r23
    8e7e:	88 1f       	adc	r24, r24
    8e80:	91 50       	subi	r25, 0x01	; 1
    8e82:	50 40       	sbci	r21, 0x00	; 0
    8e84:	c1 f7       	brne	.-16     	; 0x8e76 <ldexp+0x18>
    8e86:	9e 3f       	cpi	r25, 0xFE	; 254
    8e88:	51 05       	cpc	r21, r1
    8e8a:	2c f7       	brge	.-54     	; 0x8e56 <inverse+0x10>
    8e8c:	88 0f       	add	r24, r24
    8e8e:	91 1d       	adc	r25, r1
    8e90:	96 95       	lsr	r25
    8e92:	87 95       	ror	r24
    8e94:	97 f9       	bld	r25, 7
    8e96:	08 95       	ret
    8e98:	5f 3f       	cpi	r21, 0xFF	; 255
    8e9a:	ac f0       	brlt	.+42     	; 0x8ec6 <ldexp+0x68>
    8e9c:	98 3e       	cpi	r25, 0xE8	; 232
    8e9e:	9c f0       	brlt	.+38     	; 0x8ec6 <ldexp+0x68>
    8ea0:	bb 27       	eor	r27, r27
    8ea2:	86 95       	lsr	r24
    8ea4:	77 95       	ror	r23
    8ea6:	67 95       	ror	r22
    8ea8:	b7 95       	ror	r27
    8eaa:	08 f4       	brcc	.+2      	; 0x8eae <ldexp+0x50>
    8eac:	b1 60       	ori	r27, 0x01	; 1
    8eae:	93 95       	inc	r25
    8eb0:	c1 f7       	brne	.-16     	; 0x8ea2 <ldexp+0x44>
    8eb2:	bb 0f       	add	r27, r27
    8eb4:	58 f7       	brcc	.-42     	; 0x8e8c <ldexp+0x2e>
    8eb6:	11 f4       	brne	.+4      	; 0x8ebc <ldexp+0x5e>
    8eb8:	60 ff       	sbrs	r22, 0
    8eba:	e8 cf       	rjmp	.-48     	; 0x8e8c <ldexp+0x2e>
    8ebc:	6f 5f       	subi	r22, 0xFF	; 255
    8ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    8ec0:	8f 4f       	sbci	r24, 0xFF	; 255
    8ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    8ec4:	e3 cf       	rjmp	.-58     	; 0x8e8c <ldexp+0x2e>
    8ec6:	0c 94 18 47 	jmp	0x8e30	; 0x8e30 <__fp_szero>
    8eca:	16 f0       	brts	.+4      	; 0x8ed0 <ldexp+0x72>
    8ecc:	0c 94 5f 46 	jmp	0x8cbe	; 0x8cbe <__fp_mpack>
    8ed0:	0c 94 6d 46 	jmp	0x8cda	; 0x8cda <__fp_nan>
    8ed4:	68 94       	set
    8ed6:	0c 94 59 46 	jmp	0x8cb2	; 0x8cb2 <__fp_inf>

00008eda <log>:
    8eda:	0e 94 fd 46 	call	0x8dfa	; 0x8dfa <__fp_splitA>
    8ede:	a8 f3       	brcs	.-22     	; 0x8eca <ldexp+0x6c>
    8ee0:	99 23       	and	r25, r25
    8ee2:	c1 f3       	breq	.-16     	; 0x8ed4 <ldexp+0x76>
    8ee4:	ae f3       	brts	.-22     	; 0x8ed0 <ldexp+0x72>
    8ee6:	df 93       	push	r29
    8ee8:	cf 93       	push	r28
    8eea:	1f 93       	push	r17
    8eec:	0f 93       	push	r16
    8eee:	ff 92       	push	r15
    8ef0:	c9 2f       	mov	r28, r25
    8ef2:	dd 27       	eor	r29, r29
    8ef4:	88 23       	and	r24, r24
    8ef6:	2a f0       	brmi	.+10     	; 0x8f02 <log+0x28>
    8ef8:	21 97       	sbiw	r28, 0x01	; 1
    8efa:	66 0f       	add	r22, r22
    8efc:	77 1f       	adc	r23, r23
    8efe:	88 1f       	adc	r24, r24
    8f00:	da f7       	brpl	.-10     	; 0x8ef8 <log+0x1e>
    8f02:	20 e0       	ldi	r18, 0x00	; 0
    8f04:	30 e0       	ldi	r19, 0x00	; 0
    8f06:	40 e8       	ldi	r20, 0x80	; 128
    8f08:	5f eb       	ldi	r21, 0xBF	; 191
    8f0a:	9f e3       	ldi	r25, 0x3F	; 63
    8f0c:	88 39       	cpi	r24, 0x98	; 152
    8f0e:	20 f0       	brcs	.+8      	; 0x8f18 <log+0x3e>
    8f10:	80 3e       	cpi	r24, 0xE0	; 224
    8f12:	38 f0       	brcs	.+14     	; 0x8f22 <log+0x48>
    8f14:	21 96       	adiw	r28, 0x01	; 1
    8f16:	8f 77       	andi	r24, 0x7F	; 127
    8f18:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    8f1c:	eb e8       	ldi	r30, 0x8B	; 139
    8f1e:	f2 e0       	ldi	r31, 0x02	; 2
    8f20:	04 c0       	rjmp	.+8      	; 0x8f2a <log+0x50>
    8f22:	0e 94 da 43 	call	0x87b4	; 0x87b4 <__addsf3>
    8f26:	e8 eb       	ldi	r30, 0xB8	; 184
    8f28:	f2 e0       	ldi	r31, 0x02	; 2
    8f2a:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__fp_powser>
    8f2e:	8b 01       	movw	r16, r22
    8f30:	be 01       	movw	r22, r28
    8f32:	ec 01       	movw	r28, r24
    8f34:	fb 2e       	mov	r15, r27
    8f36:	6f 57       	subi	r22, 0x7F	; 127
    8f38:	71 09       	sbc	r23, r1
    8f3a:	75 95       	asr	r23
    8f3c:	77 1f       	adc	r23, r23
    8f3e:	88 0b       	sbc	r24, r24
    8f40:	99 0b       	sbc	r25, r25
    8f42:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <__floatsisf>
    8f46:	28 e1       	ldi	r18, 0x18	; 24
    8f48:	32 e7       	ldi	r19, 0x72	; 114
    8f4a:	41 e3       	ldi	r20, 0x31	; 49
    8f4c:	5f e3       	ldi	r21, 0x3F	; 63
    8f4e:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <__mulsf3x>
    8f52:	af 2d       	mov	r26, r15
    8f54:	98 01       	movw	r18, r16
    8f56:	ae 01       	movw	r20, r28
    8f58:	ff 90       	pop	r15
    8f5a:	0f 91       	pop	r16
    8f5c:	1f 91       	pop	r17
    8f5e:	cf 91       	pop	r28
    8f60:	df 91       	pop	r29
    8f62:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <__addsf3x>
    8f66:	0c 94 d0 46 	jmp	0x8da0	; 0x8da0 <__fp_round>

00008f6a <modf>:
    8f6a:	fa 01       	movw	r30, r20
    8f6c:	dc 01       	movw	r26, r24
    8f6e:	aa 0f       	add	r26, r26
    8f70:	bb 1f       	adc	r27, r27
    8f72:	9b 01       	movw	r18, r22
    8f74:	ac 01       	movw	r20, r24
    8f76:	bf 57       	subi	r27, 0x7F	; 127
    8f78:	28 f4       	brcc	.+10     	; 0x8f84 <modf+0x1a>
    8f7a:	22 27       	eor	r18, r18
    8f7c:	33 27       	eor	r19, r19
    8f7e:	44 27       	eor	r20, r20
    8f80:	50 78       	andi	r21, 0x80	; 128
    8f82:	20 c0       	rjmp	.+64     	; 0x8fc4 <modf+0x5a>
    8f84:	b7 51       	subi	r27, 0x17	; 23
    8f86:	90 f4       	brcc	.+36     	; 0x8fac <modf+0x42>
    8f88:	ab 2f       	mov	r26, r27
    8f8a:	00 24       	eor	r0, r0
    8f8c:	46 95       	lsr	r20
    8f8e:	37 95       	ror	r19
    8f90:	27 95       	ror	r18
    8f92:	01 1c       	adc	r0, r1
    8f94:	a3 95       	inc	r26
    8f96:	d2 f3       	brmi	.-12     	; 0x8f8c <modf+0x22>
    8f98:	00 20       	and	r0, r0
    8f9a:	71 f0       	breq	.+28     	; 0x8fb8 <modf+0x4e>
    8f9c:	22 0f       	add	r18, r18
    8f9e:	33 1f       	adc	r19, r19
    8fa0:	44 1f       	adc	r20, r20
    8fa2:	b3 95       	inc	r27
    8fa4:	da f3       	brmi	.-10     	; 0x8f9c <modf+0x32>
    8fa6:	0e d0       	rcall	.+28     	; 0x8fc4 <modf+0x5a>
    8fa8:	0c 94 d9 43 	jmp	0x87b2	; 0x87b2 <__subsf3>
    8fac:	61 30       	cpi	r22, 0x01	; 1
    8fae:	71 05       	cpc	r23, r1
    8fb0:	a0 e8       	ldi	r26, 0x80	; 128
    8fb2:	8a 07       	cpc	r24, r26
    8fb4:	b9 46       	sbci	r27, 0x69	; 105
    8fb6:	30 f4       	brcc	.+12     	; 0x8fc4 <modf+0x5a>
    8fb8:	9b 01       	movw	r18, r22
    8fba:	ac 01       	movw	r20, r24
    8fbc:	66 27       	eor	r22, r22
    8fbe:	77 27       	eor	r23, r23
    8fc0:	88 27       	eor	r24, r24
    8fc2:	90 78       	andi	r25, 0x80	; 128
    8fc4:	30 96       	adiw	r30, 0x00	; 0
    8fc6:	21 f0       	breq	.+8      	; 0x8fd0 <modf+0x66>
    8fc8:	20 83       	st	Z, r18
    8fca:	31 83       	std	Z+1, r19	; 0x01
    8fcc:	42 83       	std	Z+2, r20	; 0x02
    8fce:	53 83       	std	Z+3, r21	; 0x03
    8fd0:	08 95       	ret

00008fd2 <__mulsf3>:
    8fd2:	0e 94 fc 47 	call	0x8ff8	; 0x8ff8 <__mulsf3x>
    8fd6:	0c 94 d0 46 	jmp	0x8da0	; 0x8da0 <__fp_round>
    8fda:	0e 94 97 46 	call	0x8d2e	; 0x8d2e <__fp_pscA>
    8fde:	38 f0       	brcs	.+14     	; 0x8fee <__mulsf3+0x1c>
    8fe0:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <__fp_pscB>
    8fe4:	20 f0       	brcs	.+8      	; 0x8fee <__mulsf3+0x1c>
    8fe6:	95 23       	and	r25, r21
    8fe8:	11 f0       	breq	.+4      	; 0x8fee <__mulsf3+0x1c>
    8fea:	0c 94 59 46 	jmp	0x8cb2	; 0x8cb2 <__fp_inf>
    8fee:	0c 94 6d 46 	jmp	0x8cda	; 0x8cda <__fp_nan>
    8ff2:	11 24       	eor	r1, r1
    8ff4:	0c 94 18 47 	jmp	0x8e30	; 0x8e30 <__fp_szero>

00008ff8 <__mulsf3x>:
    8ff8:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__fp_split3>
    8ffc:	70 f3       	brcs	.-36     	; 0x8fda <__mulsf3+0x8>

00008ffe <__mulsf3_pse>:
    8ffe:	95 9f       	mul	r25, r21
    9000:	c1 f3       	breq	.-16     	; 0x8ff2 <__mulsf3+0x20>
    9002:	95 0f       	add	r25, r21
    9004:	50 e0       	ldi	r21, 0x00	; 0
    9006:	55 1f       	adc	r21, r21
    9008:	62 9f       	mul	r22, r18
    900a:	f0 01       	movw	r30, r0
    900c:	72 9f       	mul	r23, r18
    900e:	bb 27       	eor	r27, r27
    9010:	f0 0d       	add	r31, r0
    9012:	b1 1d       	adc	r27, r1
    9014:	63 9f       	mul	r22, r19
    9016:	aa 27       	eor	r26, r26
    9018:	f0 0d       	add	r31, r0
    901a:	b1 1d       	adc	r27, r1
    901c:	aa 1f       	adc	r26, r26
    901e:	64 9f       	mul	r22, r20
    9020:	66 27       	eor	r22, r22
    9022:	b0 0d       	add	r27, r0
    9024:	a1 1d       	adc	r26, r1
    9026:	66 1f       	adc	r22, r22
    9028:	82 9f       	mul	r24, r18
    902a:	22 27       	eor	r18, r18
    902c:	b0 0d       	add	r27, r0
    902e:	a1 1d       	adc	r26, r1
    9030:	62 1f       	adc	r22, r18
    9032:	73 9f       	mul	r23, r19
    9034:	b0 0d       	add	r27, r0
    9036:	a1 1d       	adc	r26, r1
    9038:	62 1f       	adc	r22, r18
    903a:	83 9f       	mul	r24, r19
    903c:	a0 0d       	add	r26, r0
    903e:	61 1d       	adc	r22, r1
    9040:	22 1f       	adc	r18, r18
    9042:	74 9f       	mul	r23, r20
    9044:	33 27       	eor	r19, r19
    9046:	a0 0d       	add	r26, r0
    9048:	61 1d       	adc	r22, r1
    904a:	23 1f       	adc	r18, r19
    904c:	84 9f       	mul	r24, r20
    904e:	60 0d       	add	r22, r0
    9050:	21 1d       	adc	r18, r1
    9052:	82 2f       	mov	r24, r18
    9054:	76 2f       	mov	r23, r22
    9056:	6a 2f       	mov	r22, r26
    9058:	11 24       	eor	r1, r1
    905a:	9f 57       	subi	r25, 0x7F	; 127
    905c:	50 40       	sbci	r21, 0x00	; 0
    905e:	9a f0       	brmi	.+38     	; 0x9086 <__mulsf3_pse+0x88>
    9060:	f1 f0       	breq	.+60     	; 0x909e <__mulsf3_pse+0xa0>
    9062:	88 23       	and	r24, r24
    9064:	4a f0       	brmi	.+18     	; 0x9078 <__mulsf3_pse+0x7a>
    9066:	ee 0f       	add	r30, r30
    9068:	ff 1f       	adc	r31, r31
    906a:	bb 1f       	adc	r27, r27
    906c:	66 1f       	adc	r22, r22
    906e:	77 1f       	adc	r23, r23
    9070:	88 1f       	adc	r24, r24
    9072:	91 50       	subi	r25, 0x01	; 1
    9074:	50 40       	sbci	r21, 0x00	; 0
    9076:	a9 f7       	brne	.-22     	; 0x9062 <__mulsf3_pse+0x64>
    9078:	9e 3f       	cpi	r25, 0xFE	; 254
    907a:	51 05       	cpc	r21, r1
    907c:	80 f0       	brcs	.+32     	; 0x909e <__mulsf3_pse+0xa0>
    907e:	0c 94 59 46 	jmp	0x8cb2	; 0x8cb2 <__fp_inf>
    9082:	0c 94 18 47 	jmp	0x8e30	; 0x8e30 <__fp_szero>
    9086:	5f 3f       	cpi	r21, 0xFF	; 255
    9088:	e4 f3       	brlt	.-8      	; 0x9082 <__mulsf3_pse+0x84>
    908a:	98 3e       	cpi	r25, 0xE8	; 232
    908c:	d4 f3       	brlt	.-12     	; 0x9082 <__mulsf3_pse+0x84>
    908e:	86 95       	lsr	r24
    9090:	77 95       	ror	r23
    9092:	67 95       	ror	r22
    9094:	b7 95       	ror	r27
    9096:	f7 95       	ror	r31
    9098:	e7 95       	ror	r30
    909a:	9f 5f       	subi	r25, 0xFF	; 255
    909c:	c1 f7       	brne	.-16     	; 0x908e <__mulsf3_pse+0x90>
    909e:	fe 2b       	or	r31, r30
    90a0:	88 0f       	add	r24, r24
    90a2:	91 1d       	adc	r25, r1
    90a4:	96 95       	lsr	r25
    90a6:	87 95       	ror	r24
    90a8:	97 f9       	bld	r25, 7
    90aa:	08 95       	ret

000090ac <pow>:
    90ac:	fa 01       	movw	r30, r20
    90ae:	ee 0f       	add	r30, r30
    90b0:	ff 1f       	adc	r31, r31
    90b2:	30 96       	adiw	r30, 0x00	; 0
    90b4:	21 05       	cpc	r18, r1
    90b6:	31 05       	cpc	r19, r1
    90b8:	a1 f1       	breq	.+104    	; 0x9122 <pow+0x76>
    90ba:	61 15       	cp	r22, r1
    90bc:	71 05       	cpc	r23, r1
    90be:	61 f4       	brne	.+24     	; 0x90d8 <pow+0x2c>
    90c0:	80 38       	cpi	r24, 0x80	; 128
    90c2:	bf e3       	ldi	r27, 0x3F	; 63
    90c4:	9b 07       	cpc	r25, r27
    90c6:	49 f1       	breq	.+82     	; 0x911a <pow+0x6e>
    90c8:	68 94       	set
    90ca:	90 38       	cpi	r25, 0x80	; 128
    90cc:	81 05       	cpc	r24, r1
    90ce:	61 f0       	breq	.+24     	; 0x90e8 <pow+0x3c>
    90d0:	80 38       	cpi	r24, 0x80	; 128
    90d2:	bf ef       	ldi	r27, 0xFF	; 255
    90d4:	9b 07       	cpc	r25, r27
    90d6:	41 f0       	breq	.+16     	; 0x90e8 <pow+0x3c>
    90d8:	99 23       	and	r25, r25
    90da:	4a f5       	brpl	.+82     	; 0x912e <pow+0x82>
    90dc:	ff 3f       	cpi	r31, 0xFF	; 255
    90de:	e1 05       	cpc	r30, r1
    90e0:	31 05       	cpc	r19, r1
    90e2:	21 05       	cpc	r18, r1
    90e4:	19 f1       	breq	.+70     	; 0x912c <pow+0x80>
    90e6:	e8 94       	clt
    90e8:	08 94       	sec
    90ea:	e7 95       	ror	r30
    90ec:	d9 01       	movw	r26, r18
    90ee:	aa 23       	and	r26, r26
    90f0:	29 f4       	brne	.+10     	; 0x90fc <pow+0x50>
    90f2:	ab 2f       	mov	r26, r27
    90f4:	be 2f       	mov	r27, r30
    90f6:	f8 5f       	subi	r31, 0xF8	; 248
    90f8:	d0 f3       	brcs	.-12     	; 0x90ee <pow+0x42>
    90fa:	10 c0       	rjmp	.+32     	; 0x911c <pow+0x70>
    90fc:	ff 5f       	subi	r31, 0xFF	; 255
    90fe:	70 f4       	brcc	.+28     	; 0x911c <pow+0x70>
    9100:	a6 95       	lsr	r26
    9102:	e0 f7       	brcc	.-8      	; 0x90fc <pow+0x50>
    9104:	f7 39       	cpi	r31, 0x97	; 151
    9106:	50 f0       	brcs	.+20     	; 0x911c <pow+0x70>
    9108:	19 f0       	breq	.+6      	; 0x9110 <pow+0x64>
    910a:	ff 3a       	cpi	r31, 0xAF	; 175
    910c:	38 f4       	brcc	.+14     	; 0x911c <pow+0x70>
    910e:	9f 77       	andi	r25, 0x7F	; 127
    9110:	9f 93       	push	r25
    9112:	0d d0       	rcall	.+26     	; 0x912e <pow+0x82>
    9114:	0f 90       	pop	r0
    9116:	07 fc       	sbrc	r0, 7
    9118:	90 58       	subi	r25, 0x80	; 128
    911a:	08 95       	ret
    911c:	46 f0       	brts	.+16     	; 0x912e <pow+0x82>
    911e:	0c 94 6d 46 	jmp	0x8cda	; 0x8cda <__fp_nan>
    9122:	60 e0       	ldi	r22, 0x00	; 0
    9124:	70 e0       	ldi	r23, 0x00	; 0
    9126:	80 e8       	ldi	r24, 0x80	; 128
    9128:	9f e3       	ldi	r25, 0x3F	; 63
    912a:	08 95       	ret
    912c:	4f e7       	ldi	r20, 0x7F	; 127
    912e:	9f 77       	andi	r25, 0x7F	; 127
    9130:	5f 93       	push	r21
    9132:	4f 93       	push	r20
    9134:	3f 93       	push	r19
    9136:	2f 93       	push	r18
    9138:	0e 94 6d 47 	call	0x8eda	; 0x8eda <log>
    913c:	2f 91       	pop	r18
    913e:	3f 91       	pop	r19
    9140:	4f 91       	pop	r20
    9142:	5f 91       	pop	r21
    9144:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    9148:	0c 94 3c 45 	jmp	0x8a78	; 0x8a78 <exp>

0000914c <sin>:
    914c:	9f 93       	push	r25
    914e:	0e 94 a7 46 	call	0x8d4e	; 0x8d4e <__fp_rempio2>
    9152:	0f 90       	pop	r0
    9154:	07 fc       	sbrc	r0, 7
    9156:	ee 5f       	subi	r30, 0xFE	; 254
    9158:	0c 94 e1 46 	jmp	0x8dc2	; 0x8dc2 <__fp_sinus>

0000915c <square>:
    915c:	9b 01       	movw	r18, r22
    915e:	ac 01       	movw	r20, r24
    9160:	0c 94 e9 47 	jmp	0x8fd2	; 0x8fd2 <__mulsf3>

00009164 <__unordsf2>:
    9164:	0e 94 35 46 	call	0x8c6a	; 0x8c6a <__fp_cmp>
    9168:	88 0b       	sbc	r24, r24
    916a:	99 0b       	sbc	r25, r25
    916c:	08 95       	ret

0000916e <__fp_powsodd>:
    916e:	9f 93       	push	r25
    9170:	8f 93       	push	r24
    9172:	7f 93       	push	r23
    9174:	6f 93       	push	r22
    9176:	ff 93       	push	r31
    9178:	ef 93       	push	r30
    917a:	9b 01       	movw	r18, r22
    917c:	ac 01       	movw	r20, r24
    917e:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <__mulsf3>
    9182:	ef 91       	pop	r30
    9184:	ff 91       	pop	r31
    9186:	0e 94 70 46 	call	0x8ce0	; 0x8ce0 <__fp_powser>
    918a:	2f 91       	pop	r18
    918c:	3f 91       	pop	r19
    918e:	4f 91       	pop	r20
    9190:	5f 91       	pop	r21
    9192:	0c 94 e9 47 	jmp	0x8fd2	; 0x8fd2 <__mulsf3>

00009196 <__mulsi3>:
    9196:	db 01       	movw	r26, r22
    9198:	8f 93       	push	r24
    919a:	9f 93       	push	r25
    919c:	0e 94 3c 49 	call	0x9278	; 0x9278 <__muluhisi3>
    91a0:	bf 91       	pop	r27
    91a2:	af 91       	pop	r26
    91a4:	a2 9f       	mul	r26, r18
    91a6:	80 0d       	add	r24, r0
    91a8:	91 1d       	adc	r25, r1
    91aa:	a3 9f       	mul	r26, r19
    91ac:	90 0d       	add	r25, r0
    91ae:	b2 9f       	mul	r27, r18
    91b0:	90 0d       	add	r25, r0
    91b2:	11 24       	eor	r1, r1
    91b4:	08 95       	ret

000091b6 <__udivmodhi4>:
    91b6:	aa 1b       	sub	r26, r26
    91b8:	bb 1b       	sub	r27, r27
    91ba:	51 e1       	ldi	r21, 0x11	; 17
    91bc:	07 c0       	rjmp	.+14     	; 0x91cc <__udivmodhi4_ep>

000091be <__udivmodhi4_loop>:
    91be:	aa 1f       	adc	r26, r26
    91c0:	bb 1f       	adc	r27, r27
    91c2:	a6 17       	cp	r26, r22
    91c4:	b7 07       	cpc	r27, r23
    91c6:	10 f0       	brcs	.+4      	; 0x91cc <__udivmodhi4_ep>
    91c8:	a6 1b       	sub	r26, r22
    91ca:	b7 0b       	sbc	r27, r23

000091cc <__udivmodhi4_ep>:
    91cc:	88 1f       	adc	r24, r24
    91ce:	99 1f       	adc	r25, r25
    91d0:	5a 95       	dec	r21
    91d2:	a9 f7       	brne	.-22     	; 0x91be <__udivmodhi4_loop>
    91d4:	80 95       	com	r24
    91d6:	90 95       	com	r25
    91d8:	bc 01       	movw	r22, r24
    91da:	cd 01       	movw	r24, r26
    91dc:	08 95       	ret

000091de <__divmodhi4>:
    91de:	97 fb       	bst	r25, 7
    91e0:	07 2e       	mov	r0, r23
    91e2:	16 f4       	brtc	.+4      	; 0x91e8 <__divmodhi4+0xa>
    91e4:	00 94       	com	r0
    91e6:	07 d0       	rcall	.+14     	; 0x91f6 <__divmodhi4_neg1>
    91e8:	77 fd       	sbrc	r23, 7
    91ea:	09 d0       	rcall	.+18     	; 0x91fe <__divmodhi4_neg2>
    91ec:	0e 94 db 48 	call	0x91b6	; 0x91b6 <__udivmodhi4>
    91f0:	07 fc       	sbrc	r0, 7
    91f2:	05 d0       	rcall	.+10     	; 0x91fe <__divmodhi4_neg2>
    91f4:	3e f4       	brtc	.+14     	; 0x9204 <__divmodhi4_exit>

000091f6 <__divmodhi4_neg1>:
    91f6:	90 95       	com	r25
    91f8:	81 95       	neg	r24
    91fa:	9f 4f       	sbci	r25, 0xFF	; 255
    91fc:	08 95       	ret

000091fe <__divmodhi4_neg2>:
    91fe:	70 95       	com	r23
    9200:	61 95       	neg	r22
    9202:	7f 4f       	sbci	r23, 0xFF	; 255

00009204 <__divmodhi4_exit>:
    9204:	08 95       	ret

00009206 <__udivmodsi4>:
    9206:	a1 e2       	ldi	r26, 0x21	; 33
    9208:	1a 2e       	mov	r1, r26
    920a:	aa 1b       	sub	r26, r26
    920c:	bb 1b       	sub	r27, r27
    920e:	fd 01       	movw	r30, r26
    9210:	0d c0       	rjmp	.+26     	; 0x922c <__udivmodsi4_ep>

00009212 <__udivmodsi4_loop>:
    9212:	aa 1f       	adc	r26, r26
    9214:	bb 1f       	adc	r27, r27
    9216:	ee 1f       	adc	r30, r30
    9218:	ff 1f       	adc	r31, r31
    921a:	a2 17       	cp	r26, r18
    921c:	b3 07       	cpc	r27, r19
    921e:	e4 07       	cpc	r30, r20
    9220:	f5 07       	cpc	r31, r21
    9222:	20 f0       	brcs	.+8      	; 0x922c <__udivmodsi4_ep>
    9224:	a2 1b       	sub	r26, r18
    9226:	b3 0b       	sbc	r27, r19
    9228:	e4 0b       	sbc	r30, r20
    922a:	f5 0b       	sbc	r31, r21

0000922c <__udivmodsi4_ep>:
    922c:	66 1f       	adc	r22, r22
    922e:	77 1f       	adc	r23, r23
    9230:	88 1f       	adc	r24, r24
    9232:	99 1f       	adc	r25, r25
    9234:	1a 94       	dec	r1
    9236:	69 f7       	brne	.-38     	; 0x9212 <__udivmodsi4_loop>
    9238:	60 95       	com	r22
    923a:	70 95       	com	r23
    923c:	80 95       	com	r24
    923e:	90 95       	com	r25
    9240:	9b 01       	movw	r18, r22
    9242:	ac 01       	movw	r20, r24
    9244:	bd 01       	movw	r22, r26
    9246:	cf 01       	movw	r24, r30
    9248:	08 95       	ret

0000924a <__tablejump2__>:
    924a:	ee 0f       	add	r30, r30
    924c:	ff 1f       	adc	r31, r31
    924e:	88 1f       	adc	r24, r24
    9250:	8b bf       	out	0x3b, r24	; 59
    9252:	07 90       	elpm	r0, Z+
    9254:	f6 91       	elpm	r31, Z
    9256:	e0 2d       	mov	r30, r0
    9258:	19 94       	eijmp

0000925a <__umulhisi3>:
    925a:	a2 9f       	mul	r26, r18
    925c:	b0 01       	movw	r22, r0
    925e:	b3 9f       	mul	r27, r19
    9260:	c0 01       	movw	r24, r0
    9262:	a3 9f       	mul	r26, r19
    9264:	70 0d       	add	r23, r0
    9266:	81 1d       	adc	r24, r1
    9268:	11 24       	eor	r1, r1
    926a:	91 1d       	adc	r25, r1
    926c:	b2 9f       	mul	r27, r18
    926e:	70 0d       	add	r23, r0
    9270:	81 1d       	adc	r24, r1
    9272:	11 24       	eor	r1, r1
    9274:	91 1d       	adc	r25, r1
    9276:	08 95       	ret

00009278 <__muluhisi3>:
    9278:	0e 94 2d 49 	call	0x925a	; 0x925a <__umulhisi3>
    927c:	a5 9f       	mul	r26, r21
    927e:	90 0d       	add	r25, r0
    9280:	b4 9f       	mul	r27, r20
    9282:	90 0d       	add	r25, r0
    9284:	a4 9f       	mul	r26, r20
    9286:	80 0d       	add	r24, r0
    9288:	91 1d       	adc	r25, r1
    928a:	11 24       	eor	r1, r1
    928c:	08 95       	ret

0000928e <malloc>:
    928e:	0f 93       	push	r16
    9290:	1f 93       	push	r17
    9292:	cf 93       	push	r28
    9294:	df 93       	push	r29
    9296:	82 30       	cpi	r24, 0x02	; 2
    9298:	91 05       	cpc	r25, r1
    929a:	10 f4       	brcc	.+4      	; 0x92a0 <malloc+0x12>
    929c:	82 e0       	ldi	r24, 0x02	; 2
    929e:	90 e0       	ldi	r25, 0x00	; 0
    92a0:	e0 91 95 25 	lds	r30, 0x2595	; 0x802595 <__flp>
    92a4:	f0 91 96 25 	lds	r31, 0x2596	; 0x802596 <__flp+0x1>
    92a8:	20 e0       	ldi	r18, 0x00	; 0
    92aa:	30 e0       	ldi	r19, 0x00	; 0
    92ac:	a0 e0       	ldi	r26, 0x00	; 0
    92ae:	b0 e0       	ldi	r27, 0x00	; 0
    92b0:	30 97       	sbiw	r30, 0x00	; 0
    92b2:	19 f1       	breq	.+70     	; 0x92fa <malloc+0x6c>
    92b4:	40 81       	ld	r20, Z
    92b6:	51 81       	ldd	r21, Z+1	; 0x01
    92b8:	02 81       	ldd	r16, Z+2	; 0x02
    92ba:	13 81       	ldd	r17, Z+3	; 0x03
    92bc:	48 17       	cp	r20, r24
    92be:	59 07       	cpc	r21, r25
    92c0:	c8 f0       	brcs	.+50     	; 0x92f4 <malloc+0x66>
    92c2:	84 17       	cp	r24, r20
    92c4:	95 07       	cpc	r25, r21
    92c6:	69 f4       	brne	.+26     	; 0x92e2 <malloc+0x54>
    92c8:	10 97       	sbiw	r26, 0x00	; 0
    92ca:	31 f0       	breq	.+12     	; 0x92d8 <malloc+0x4a>
    92cc:	12 96       	adiw	r26, 0x02	; 2
    92ce:	0c 93       	st	X, r16
    92d0:	12 97       	sbiw	r26, 0x02	; 2
    92d2:	13 96       	adiw	r26, 0x03	; 3
    92d4:	1c 93       	st	X, r17
    92d6:	27 c0       	rjmp	.+78     	; 0x9326 <malloc+0x98>
    92d8:	00 93 95 25 	sts	0x2595, r16	; 0x802595 <__flp>
    92dc:	10 93 96 25 	sts	0x2596, r17	; 0x802596 <__flp+0x1>
    92e0:	22 c0       	rjmp	.+68     	; 0x9326 <malloc+0x98>
    92e2:	21 15       	cp	r18, r1
    92e4:	31 05       	cpc	r19, r1
    92e6:	19 f0       	breq	.+6      	; 0x92ee <malloc+0x60>
    92e8:	42 17       	cp	r20, r18
    92ea:	53 07       	cpc	r21, r19
    92ec:	18 f4       	brcc	.+6      	; 0x92f4 <malloc+0x66>
    92ee:	9a 01       	movw	r18, r20
    92f0:	bd 01       	movw	r22, r26
    92f2:	ef 01       	movw	r28, r30
    92f4:	df 01       	movw	r26, r30
    92f6:	f8 01       	movw	r30, r16
    92f8:	db cf       	rjmp	.-74     	; 0x92b0 <malloc+0x22>
    92fa:	21 15       	cp	r18, r1
    92fc:	31 05       	cpc	r19, r1
    92fe:	f9 f0       	breq	.+62     	; 0x933e <malloc+0xb0>
    9300:	28 1b       	sub	r18, r24
    9302:	39 0b       	sbc	r19, r25
    9304:	24 30       	cpi	r18, 0x04	; 4
    9306:	31 05       	cpc	r19, r1
    9308:	80 f4       	brcc	.+32     	; 0x932a <malloc+0x9c>
    930a:	8a 81       	ldd	r24, Y+2	; 0x02
    930c:	9b 81       	ldd	r25, Y+3	; 0x03
    930e:	61 15       	cp	r22, r1
    9310:	71 05       	cpc	r23, r1
    9312:	21 f0       	breq	.+8      	; 0x931c <malloc+0x8e>
    9314:	fb 01       	movw	r30, r22
    9316:	82 83       	std	Z+2, r24	; 0x02
    9318:	93 83       	std	Z+3, r25	; 0x03
    931a:	04 c0       	rjmp	.+8      	; 0x9324 <malloc+0x96>
    931c:	80 93 95 25 	sts	0x2595, r24	; 0x802595 <__flp>
    9320:	90 93 96 25 	sts	0x2596, r25	; 0x802596 <__flp+0x1>
    9324:	fe 01       	movw	r30, r28
    9326:	32 96       	adiw	r30, 0x02	; 2
    9328:	44 c0       	rjmp	.+136    	; 0x93b2 <malloc+0x124>
    932a:	fe 01       	movw	r30, r28
    932c:	e2 0f       	add	r30, r18
    932e:	f3 1f       	adc	r31, r19
    9330:	81 93       	st	Z+, r24
    9332:	91 93       	st	Z+, r25
    9334:	22 50       	subi	r18, 0x02	; 2
    9336:	31 09       	sbc	r19, r1
    9338:	28 83       	st	Y, r18
    933a:	39 83       	std	Y+1, r19	; 0x01
    933c:	3a c0       	rjmp	.+116    	; 0x93b2 <malloc+0x124>
    933e:	20 91 93 25 	lds	r18, 0x2593	; 0x802593 <__brkval>
    9342:	30 91 94 25 	lds	r19, 0x2594	; 0x802594 <__brkval+0x1>
    9346:	23 2b       	or	r18, r19
    9348:	41 f4       	brne	.+16     	; 0x935a <malloc+0xcc>
    934a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    934e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    9352:	20 93 93 25 	sts	0x2593, r18	; 0x802593 <__brkval>
    9356:	30 93 94 25 	sts	0x2594, r19	; 0x802594 <__brkval+0x1>
    935a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    935e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    9362:	21 15       	cp	r18, r1
    9364:	31 05       	cpc	r19, r1
    9366:	41 f4       	brne	.+16     	; 0x9378 <malloc+0xea>
    9368:	2d b7       	in	r18, 0x3d	; 61
    936a:	3e b7       	in	r19, 0x3e	; 62
    936c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    9370:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    9374:	24 1b       	sub	r18, r20
    9376:	35 0b       	sbc	r19, r21
    9378:	e0 91 93 25 	lds	r30, 0x2593	; 0x802593 <__brkval>
    937c:	f0 91 94 25 	lds	r31, 0x2594	; 0x802594 <__brkval+0x1>
    9380:	e2 17       	cp	r30, r18
    9382:	f3 07       	cpc	r31, r19
    9384:	a0 f4       	brcc	.+40     	; 0x93ae <malloc+0x120>
    9386:	2e 1b       	sub	r18, r30
    9388:	3f 0b       	sbc	r19, r31
    938a:	28 17       	cp	r18, r24
    938c:	39 07       	cpc	r19, r25
    938e:	78 f0       	brcs	.+30     	; 0x93ae <malloc+0x120>
    9390:	ac 01       	movw	r20, r24
    9392:	4e 5f       	subi	r20, 0xFE	; 254
    9394:	5f 4f       	sbci	r21, 0xFF	; 255
    9396:	24 17       	cp	r18, r20
    9398:	35 07       	cpc	r19, r21
    939a:	48 f0       	brcs	.+18     	; 0x93ae <malloc+0x120>
    939c:	4e 0f       	add	r20, r30
    939e:	5f 1f       	adc	r21, r31
    93a0:	40 93 93 25 	sts	0x2593, r20	; 0x802593 <__brkval>
    93a4:	50 93 94 25 	sts	0x2594, r21	; 0x802594 <__brkval+0x1>
    93a8:	81 93       	st	Z+, r24
    93aa:	91 93       	st	Z+, r25
    93ac:	02 c0       	rjmp	.+4      	; 0x93b2 <malloc+0x124>
    93ae:	e0 e0       	ldi	r30, 0x00	; 0
    93b0:	f0 e0       	ldi	r31, 0x00	; 0
    93b2:	cf 01       	movw	r24, r30
    93b4:	df 91       	pop	r29
    93b6:	cf 91       	pop	r28
    93b8:	1f 91       	pop	r17
    93ba:	0f 91       	pop	r16
    93bc:	08 95       	ret

000093be <free>:
    93be:	cf 93       	push	r28
    93c0:	df 93       	push	r29
    93c2:	00 97       	sbiw	r24, 0x00	; 0
    93c4:	09 f4       	brne	.+2      	; 0x93c8 <free+0xa>
    93c6:	81 c0       	rjmp	.+258    	; 0x94ca <free+0x10c>
    93c8:	fc 01       	movw	r30, r24
    93ca:	32 97       	sbiw	r30, 0x02	; 2
    93cc:	12 82       	std	Z+2, r1	; 0x02
    93ce:	13 82       	std	Z+3, r1	; 0x03
    93d0:	a0 91 95 25 	lds	r26, 0x2595	; 0x802595 <__flp>
    93d4:	b0 91 96 25 	lds	r27, 0x2596	; 0x802596 <__flp+0x1>
    93d8:	10 97       	sbiw	r26, 0x00	; 0
    93da:	81 f4       	brne	.+32     	; 0x93fc <free+0x3e>
    93dc:	20 81       	ld	r18, Z
    93de:	31 81       	ldd	r19, Z+1	; 0x01
    93e0:	82 0f       	add	r24, r18
    93e2:	93 1f       	adc	r25, r19
    93e4:	20 91 93 25 	lds	r18, 0x2593	; 0x802593 <__brkval>
    93e8:	30 91 94 25 	lds	r19, 0x2594	; 0x802594 <__brkval+0x1>
    93ec:	28 17       	cp	r18, r24
    93ee:	39 07       	cpc	r19, r25
    93f0:	51 f5       	brne	.+84     	; 0x9446 <free+0x88>
    93f2:	e0 93 93 25 	sts	0x2593, r30	; 0x802593 <__brkval>
    93f6:	f0 93 94 25 	sts	0x2594, r31	; 0x802594 <__brkval+0x1>
    93fa:	67 c0       	rjmp	.+206    	; 0x94ca <free+0x10c>
    93fc:	ed 01       	movw	r28, r26
    93fe:	20 e0       	ldi	r18, 0x00	; 0
    9400:	30 e0       	ldi	r19, 0x00	; 0
    9402:	ce 17       	cp	r28, r30
    9404:	df 07       	cpc	r29, r31
    9406:	40 f4       	brcc	.+16     	; 0x9418 <free+0x5a>
    9408:	4a 81       	ldd	r20, Y+2	; 0x02
    940a:	5b 81       	ldd	r21, Y+3	; 0x03
    940c:	9e 01       	movw	r18, r28
    940e:	41 15       	cp	r20, r1
    9410:	51 05       	cpc	r21, r1
    9412:	f1 f0       	breq	.+60     	; 0x9450 <free+0x92>
    9414:	ea 01       	movw	r28, r20
    9416:	f5 cf       	rjmp	.-22     	; 0x9402 <free+0x44>
    9418:	c2 83       	std	Z+2, r28	; 0x02
    941a:	d3 83       	std	Z+3, r29	; 0x03
    941c:	40 81       	ld	r20, Z
    941e:	51 81       	ldd	r21, Z+1	; 0x01
    9420:	84 0f       	add	r24, r20
    9422:	95 1f       	adc	r25, r21
    9424:	c8 17       	cp	r28, r24
    9426:	d9 07       	cpc	r29, r25
    9428:	59 f4       	brne	.+22     	; 0x9440 <free+0x82>
    942a:	88 81       	ld	r24, Y
    942c:	99 81       	ldd	r25, Y+1	; 0x01
    942e:	84 0f       	add	r24, r20
    9430:	95 1f       	adc	r25, r21
    9432:	02 96       	adiw	r24, 0x02	; 2
    9434:	80 83       	st	Z, r24
    9436:	91 83       	std	Z+1, r25	; 0x01
    9438:	8a 81       	ldd	r24, Y+2	; 0x02
    943a:	9b 81       	ldd	r25, Y+3	; 0x03
    943c:	82 83       	std	Z+2, r24	; 0x02
    943e:	93 83       	std	Z+3, r25	; 0x03
    9440:	21 15       	cp	r18, r1
    9442:	31 05       	cpc	r19, r1
    9444:	29 f4       	brne	.+10     	; 0x9450 <free+0x92>
    9446:	e0 93 95 25 	sts	0x2595, r30	; 0x802595 <__flp>
    944a:	f0 93 96 25 	sts	0x2596, r31	; 0x802596 <__flp+0x1>
    944e:	3d c0       	rjmp	.+122    	; 0x94ca <free+0x10c>
    9450:	e9 01       	movw	r28, r18
    9452:	ea 83       	std	Y+2, r30	; 0x02
    9454:	fb 83       	std	Y+3, r31	; 0x03
    9456:	49 91       	ld	r20, Y+
    9458:	59 91       	ld	r21, Y+
    945a:	c4 0f       	add	r28, r20
    945c:	d5 1f       	adc	r29, r21
    945e:	ec 17       	cp	r30, r28
    9460:	fd 07       	cpc	r31, r29
    9462:	61 f4       	brne	.+24     	; 0x947c <free+0xbe>
    9464:	80 81       	ld	r24, Z
    9466:	91 81       	ldd	r25, Z+1	; 0x01
    9468:	84 0f       	add	r24, r20
    946a:	95 1f       	adc	r25, r21
    946c:	02 96       	adiw	r24, 0x02	; 2
    946e:	e9 01       	movw	r28, r18
    9470:	88 83       	st	Y, r24
    9472:	99 83       	std	Y+1, r25	; 0x01
    9474:	82 81       	ldd	r24, Z+2	; 0x02
    9476:	93 81       	ldd	r25, Z+3	; 0x03
    9478:	8a 83       	std	Y+2, r24	; 0x02
    947a:	9b 83       	std	Y+3, r25	; 0x03
    947c:	e0 e0       	ldi	r30, 0x00	; 0
    947e:	f0 e0       	ldi	r31, 0x00	; 0
    9480:	12 96       	adiw	r26, 0x02	; 2
    9482:	8d 91       	ld	r24, X+
    9484:	9c 91       	ld	r25, X
    9486:	13 97       	sbiw	r26, 0x03	; 3
    9488:	00 97       	sbiw	r24, 0x00	; 0
    948a:	19 f0       	breq	.+6      	; 0x9492 <free+0xd4>
    948c:	fd 01       	movw	r30, r26
    948e:	dc 01       	movw	r26, r24
    9490:	f7 cf       	rjmp	.-18     	; 0x9480 <free+0xc2>
    9492:	8d 91       	ld	r24, X+
    9494:	9c 91       	ld	r25, X
    9496:	11 97       	sbiw	r26, 0x01	; 1
    9498:	9d 01       	movw	r18, r26
    949a:	2e 5f       	subi	r18, 0xFE	; 254
    949c:	3f 4f       	sbci	r19, 0xFF	; 255
    949e:	82 0f       	add	r24, r18
    94a0:	93 1f       	adc	r25, r19
    94a2:	20 91 93 25 	lds	r18, 0x2593	; 0x802593 <__brkval>
    94a6:	30 91 94 25 	lds	r19, 0x2594	; 0x802594 <__brkval+0x1>
    94aa:	28 17       	cp	r18, r24
    94ac:	39 07       	cpc	r19, r25
    94ae:	69 f4       	brne	.+26     	; 0x94ca <free+0x10c>
    94b0:	30 97       	sbiw	r30, 0x00	; 0
    94b2:	29 f4       	brne	.+10     	; 0x94be <free+0x100>
    94b4:	10 92 95 25 	sts	0x2595, r1	; 0x802595 <__flp>
    94b8:	10 92 96 25 	sts	0x2596, r1	; 0x802596 <__flp+0x1>
    94bc:	02 c0       	rjmp	.+4      	; 0x94c2 <free+0x104>
    94be:	12 82       	std	Z+2, r1	; 0x02
    94c0:	13 82       	std	Z+3, r1	; 0x03
    94c2:	a0 93 93 25 	sts	0x2593, r26	; 0x802593 <__brkval>
    94c6:	b0 93 94 25 	sts	0x2594, r27	; 0x802594 <__brkval+0x1>
    94ca:	df 91       	pop	r29
    94cc:	cf 91       	pop	r28
    94ce:	08 95       	ret

000094d0 <strtoul>:
    94d0:	3f 92       	push	r3
    94d2:	4f 92       	push	r4
    94d4:	5f 92       	push	r5
    94d6:	6f 92       	push	r6
    94d8:	7f 92       	push	r7
    94da:	8f 92       	push	r8
    94dc:	9f 92       	push	r9
    94de:	af 92       	push	r10
    94e0:	bf 92       	push	r11
    94e2:	cf 92       	push	r12
    94e4:	df 92       	push	r13
    94e6:	ef 92       	push	r14
    94e8:	ff 92       	push	r15
    94ea:	0f 93       	push	r16
    94ec:	1f 93       	push	r17
    94ee:	cf 93       	push	r28
    94f0:	df 93       	push	r29
    94f2:	5c 01       	movw	r10, r24
    94f4:	6b 01       	movw	r12, r22
    94f6:	7a 01       	movw	r14, r20
    94f8:	61 15       	cp	r22, r1
    94fa:	71 05       	cpc	r23, r1
    94fc:	19 f0       	breq	.+6      	; 0x9504 <strtoul+0x34>
    94fe:	fb 01       	movw	r30, r22
    9500:	80 83       	st	Z, r24
    9502:	91 83       	std	Z+1, r25	; 0x01
    9504:	e1 14       	cp	r14, r1
    9506:	f1 04       	cpc	r15, r1
    9508:	29 f0       	breq	.+10     	; 0x9514 <strtoul+0x44>
    950a:	c7 01       	movw	r24, r14
    950c:	02 97       	sbiw	r24, 0x02	; 2
    950e:	83 97       	sbiw	r24, 0x23	; 35
    9510:	08 f0       	brcs	.+2      	; 0x9514 <strtoul+0x44>
    9512:	c9 c0       	rjmp	.+402    	; 0x96a6 <strtoul+0x1d6>
    9514:	e5 01       	movw	r28, r10
    9516:	21 96       	adiw	r28, 0x01	; 1
    9518:	f5 01       	movw	r30, r10
    951a:	10 81       	ld	r17, Z
    951c:	81 2f       	mov	r24, r17
    951e:	90 e0       	ldi	r25, 0x00	; 0
    9520:	0e 94 6b 4c 	call	0x98d6	; 0x98d6 <isspace>
    9524:	89 2b       	or	r24, r25
    9526:	11 f0       	breq	.+4      	; 0x952c <strtoul+0x5c>
    9528:	5e 01       	movw	r10, r28
    952a:	f4 cf       	rjmp	.-24     	; 0x9514 <strtoul+0x44>
    952c:	1d 32       	cpi	r17, 0x2D	; 45
    952e:	29 f4       	brne	.+10     	; 0x953a <strtoul+0x6a>
    9530:	21 96       	adiw	r28, 0x01	; 1
    9532:	f5 01       	movw	r30, r10
    9534:	11 81       	ldd	r17, Z+1	; 0x01
    9536:	01 e0       	ldi	r16, 0x01	; 1
    9538:	07 c0       	rjmp	.+14     	; 0x9548 <strtoul+0x78>
    953a:	1b 32       	cpi	r17, 0x2B	; 43
    953c:	21 f4       	brne	.+8      	; 0x9546 <strtoul+0x76>
    953e:	e5 01       	movw	r28, r10
    9540:	22 96       	adiw	r28, 0x02	; 2
    9542:	f5 01       	movw	r30, r10
    9544:	11 81       	ldd	r17, Z+1	; 0x01
    9546:	00 e0       	ldi	r16, 0x00	; 0
    9548:	e1 14       	cp	r14, r1
    954a:	f1 04       	cpc	r15, r1
    954c:	b1 f0       	breq	.+44     	; 0x957a <strtoul+0xaa>
    954e:	f0 e1       	ldi	r31, 0x10	; 16
    9550:	ef 16       	cp	r14, r31
    9552:	f1 04       	cpc	r15, r1
    9554:	29 f4       	brne	.+10     	; 0x9560 <strtoul+0x90>
    9556:	b0 c0       	rjmp	.+352    	; 0x96b8 <strtoul+0x1e8>
    9558:	10 e3       	ldi	r17, 0x30	; 48
    955a:	e1 14       	cp	r14, r1
    955c:	f1 04       	cpc	r15, r1
    955e:	01 f1       	breq	.+64     	; 0x95a0 <strtoul+0xd0>
    9560:	2a e0       	ldi	r18, 0x0A	; 10
    9562:	e2 16       	cp	r14, r18
    9564:	f1 04       	cpc	r15, r1
    9566:	b1 f1       	breq	.+108    	; 0x95d4 <strtoul+0x104>
    9568:	80 e1       	ldi	r24, 0x10	; 16
    956a:	e8 16       	cp	r14, r24
    956c:	f1 04       	cpc	r15, r1
    956e:	71 f0       	breq	.+28     	; 0x958c <strtoul+0xbc>
    9570:	e8 e0       	ldi	r30, 0x08	; 8
    9572:	ee 16       	cp	r14, r30
    9574:	f1 04       	cpc	r15, r1
    9576:	f1 f4       	brne	.+60     	; 0x95b4 <strtoul+0xe4>
    9578:	13 c0       	rjmp	.+38     	; 0x95a0 <strtoul+0xd0>
    957a:	10 33       	cpi	r17, 0x30	; 48
    957c:	41 f5       	brne	.+80     	; 0x95ce <strtoul+0xfe>
    957e:	88 81       	ld	r24, Y
    9580:	8f 7d       	andi	r24, 0xDF	; 223
    9582:	88 35       	cpi	r24, 0x58	; 88
    9584:	49 f7       	brne	.-46     	; 0x9558 <strtoul+0x88>
    9586:	19 81       	ldd	r17, Y+1	; 0x01
    9588:	22 96       	adiw	r28, 0x02	; 2
    958a:	02 60       	ori	r16, 0x02	; 2
    958c:	f0 e1       	ldi	r31, 0x10	; 16
    958e:	ef 2e       	mov	r14, r31
    9590:	f1 2c       	mov	r15, r1
    9592:	88 24       	eor	r8, r8
    9594:	8a 94       	dec	r8
    9596:	98 2c       	mov	r9, r8
    9598:	a8 2c       	mov	r10, r8
    959a:	af e0       	ldi	r26, 0x0F	; 15
    959c:	ba 2e       	mov	r11, r26
    959e:	20 c0       	rjmp	.+64     	; 0x95e0 <strtoul+0x110>
    95a0:	78 e0       	ldi	r23, 0x08	; 8
    95a2:	e7 2e       	mov	r14, r23
    95a4:	f1 2c       	mov	r15, r1
    95a6:	88 24       	eor	r8, r8
    95a8:	8a 94       	dec	r8
    95aa:	98 2c       	mov	r9, r8
    95ac:	a8 2c       	mov	r10, r8
    95ae:	ef e1       	ldi	r30, 0x1F	; 31
    95b0:	be 2e       	mov	r11, r30
    95b2:	16 c0       	rjmp	.+44     	; 0x95e0 <strtoul+0x110>
    95b4:	6f ef       	ldi	r22, 0xFF	; 255
    95b6:	7f ef       	ldi	r23, 0xFF	; 255
    95b8:	cb 01       	movw	r24, r22
    95ba:	97 01       	movw	r18, r14
    95bc:	0f 2c       	mov	r0, r15
    95be:	00 0c       	add	r0, r0
    95c0:	44 0b       	sbc	r20, r20
    95c2:	55 0b       	sbc	r21, r21
    95c4:	0e 94 03 49 	call	0x9206	; 0x9206 <__udivmodsi4>
    95c8:	49 01       	movw	r8, r18
    95ca:	5a 01       	movw	r10, r20
    95cc:	09 c0       	rjmp	.+18     	; 0x95e0 <strtoul+0x110>
    95ce:	8a e0       	ldi	r24, 0x0A	; 10
    95d0:	e8 2e       	mov	r14, r24
    95d2:	f1 2c       	mov	r15, r1
    95d4:	69 e9       	ldi	r22, 0x99	; 153
    95d6:	86 2e       	mov	r8, r22
    95d8:	98 2c       	mov	r9, r8
    95da:	a8 2c       	mov	r10, r8
    95dc:	69 e1       	ldi	r22, 0x19	; 25
    95de:	b6 2e       	mov	r11, r22
    95e0:	40 e0       	ldi	r20, 0x00	; 0
    95e2:	60 e0       	ldi	r22, 0x00	; 0
    95e4:	70 e0       	ldi	r23, 0x00	; 0
    95e6:	cb 01       	movw	r24, r22
    95e8:	27 01       	movw	r4, r14
    95ea:	0f 2c       	mov	r0, r15
    95ec:	00 0c       	add	r0, r0
    95ee:	66 08       	sbc	r6, r6
    95f0:	77 08       	sbc	r7, r7
    95f2:	fe 01       	movw	r30, r28
    95f4:	50 ed       	ldi	r21, 0xD0	; 208
    95f6:	35 2e       	mov	r3, r21
    95f8:	31 0e       	add	r3, r17
    95fa:	29 e0       	ldi	r18, 0x09	; 9
    95fc:	23 15       	cp	r18, r3
    95fe:	70 f4       	brcc	.+28     	; 0x961c <strtoul+0x14c>
    9600:	2f eb       	ldi	r18, 0xBF	; 191
    9602:	21 0f       	add	r18, r17
    9604:	2a 31       	cpi	r18, 0x1A	; 26
    9606:	18 f4       	brcc	.+6      	; 0x960e <strtoul+0x13e>
    9608:	39 ec       	ldi	r19, 0xC9	; 201
    960a:	33 2e       	mov	r3, r19
    960c:	06 c0       	rjmp	.+12     	; 0x961a <strtoul+0x14a>
    960e:	2f e9       	ldi	r18, 0x9F	; 159
    9610:	21 0f       	add	r18, r17
    9612:	2a 31       	cpi	r18, 0x1A	; 26
    9614:	30 f5       	brcc	.+76     	; 0x9662 <strtoul+0x192>
    9616:	29 ea       	ldi	r18, 0xA9	; 169
    9618:	32 2e       	mov	r3, r18
    961a:	31 0e       	add	r3, r17
    961c:	23 2d       	mov	r18, r3
    961e:	30 e0       	ldi	r19, 0x00	; 0
    9620:	2e 15       	cp	r18, r14
    9622:	3f 05       	cpc	r19, r15
    9624:	f4 f4       	brge	.+60     	; 0x9662 <strtoul+0x192>
    9626:	4f 3f       	cpi	r20, 0xFF	; 255
    9628:	c9 f0       	breq	.+50     	; 0x965c <strtoul+0x18c>
    962a:	86 16       	cp	r8, r22
    962c:	97 06       	cpc	r9, r23
    962e:	a8 06       	cpc	r10, r24
    9630:	b9 06       	cpc	r11, r25
    9632:	88 f0       	brcs	.+34     	; 0x9656 <strtoul+0x186>
    9634:	a3 01       	movw	r20, r6
    9636:	92 01       	movw	r18, r4
    9638:	0e 94 cb 48 	call	0x9196	; 0x9196 <__mulsi3>
    963c:	23 2d       	mov	r18, r3
    963e:	30 e0       	ldi	r19, 0x00	; 0
    9640:	40 e0       	ldi	r20, 0x00	; 0
    9642:	50 e0       	ldi	r21, 0x00	; 0
    9644:	62 0f       	add	r22, r18
    9646:	73 1f       	adc	r23, r19
    9648:	84 1f       	adc	r24, r20
    964a:	95 1f       	adc	r25, r21
    964c:	62 17       	cp	r22, r18
    964e:	73 07       	cpc	r23, r19
    9650:	84 07       	cpc	r24, r20
    9652:	95 07       	cpc	r25, r21
    9654:	10 f4       	brcc	.+4      	; 0x965a <strtoul+0x18a>
    9656:	4f ef       	ldi	r20, 0xFF	; 255
    9658:	01 c0       	rjmp	.+2      	; 0x965c <strtoul+0x18c>
    965a:	41 e0       	ldi	r20, 0x01	; 1
    965c:	21 96       	adiw	r28, 0x01	; 1
    965e:	10 81       	ld	r17, Z
    9660:	c8 cf       	rjmp	.-112    	; 0x95f2 <strtoul+0x122>
    9662:	c1 14       	cp	r12, r1
    9664:	d1 04       	cpc	r13, r1
    9666:	51 f0       	breq	.+20     	; 0x967c <strtoul+0x1ac>
    9668:	44 23       	and	r20, r20
    966a:	11 f0       	breq	.+4      	; 0x9670 <strtoul+0x1a0>
    966c:	21 97       	sbiw	r28, 0x01	; 1
    966e:	03 c0       	rjmp	.+6      	; 0x9676 <strtoul+0x1a6>
    9670:	01 ff       	sbrs	r16, 1
    9672:	04 c0       	rjmp	.+8      	; 0x967c <strtoul+0x1ac>
    9674:	22 97       	sbiw	r28, 0x02	; 2
    9676:	f6 01       	movw	r30, r12
    9678:	c0 83       	st	Z, r28
    967a:	d1 83       	std	Z+1, r29	; 0x01
    967c:	00 ff       	sbrs	r16, 0
    967e:	07 c0       	rjmp	.+14     	; 0x968e <strtoul+0x1be>
    9680:	90 95       	com	r25
    9682:	80 95       	com	r24
    9684:	70 95       	com	r23
    9686:	61 95       	neg	r22
    9688:	7f 4f       	sbci	r23, 0xFF	; 255
    968a:	8f 4f       	sbci	r24, 0xFF	; 255
    968c:	9f 4f       	sbci	r25, 0xFF	; 255
    968e:	4f 3f       	cpi	r20, 0xFF	; 255
    9690:	79 f4       	brne	.+30     	; 0x96b0 <strtoul+0x1e0>
    9692:	82 e2       	ldi	r24, 0x22	; 34
    9694:	90 e0       	ldi	r25, 0x00	; 0
    9696:	80 93 9d 25 	sts	0x259D, r24	; 0x80259d <errno>
    969a:	90 93 9e 25 	sts	0x259E, r25	; 0x80259e <errno+0x1>
    969e:	3f ef       	ldi	r19, 0xFF	; 255
    96a0:	2f ef       	ldi	r18, 0xFF	; 255
    96a2:	9f ef       	ldi	r25, 0xFF	; 255
    96a4:	0d c0       	rjmp	.+26     	; 0x96c0 <strtoul+0x1f0>
    96a6:	40 e0       	ldi	r20, 0x00	; 0
    96a8:	30 e0       	ldi	r19, 0x00	; 0
    96aa:	20 e0       	ldi	r18, 0x00	; 0
    96ac:	90 e0       	ldi	r25, 0x00	; 0
    96ae:	08 c0       	rjmp	.+16     	; 0x96c0 <strtoul+0x1f0>
    96b0:	46 2f       	mov	r20, r22
    96b2:	37 2f       	mov	r19, r23
    96b4:	28 2f       	mov	r18, r24
    96b6:	04 c0       	rjmp	.+8      	; 0x96c0 <strtoul+0x1f0>
    96b8:	10 33       	cpi	r17, 0x30	; 48
    96ba:	09 f0       	breq	.+2      	; 0x96be <strtoul+0x1ee>
    96bc:	67 cf       	rjmp	.-306    	; 0x958c <strtoul+0xbc>
    96be:	5f cf       	rjmp	.-322    	; 0x957e <strtoul+0xae>
    96c0:	64 2f       	mov	r22, r20
    96c2:	73 2f       	mov	r23, r19
    96c4:	82 2f       	mov	r24, r18
    96c6:	df 91       	pop	r29
    96c8:	cf 91       	pop	r28
    96ca:	1f 91       	pop	r17
    96cc:	0f 91       	pop	r16
    96ce:	ff 90       	pop	r15
    96d0:	ef 90       	pop	r14
    96d2:	df 90       	pop	r13
    96d4:	cf 90       	pop	r12
    96d6:	bf 90       	pop	r11
    96d8:	af 90       	pop	r10
    96da:	9f 90       	pop	r9
    96dc:	8f 90       	pop	r8
    96de:	7f 90       	pop	r7
    96e0:	6f 90       	pop	r6
    96e2:	5f 90       	pop	r5
    96e4:	4f 90       	pop	r4
    96e6:	3f 90       	pop	r3
    96e8:	08 95       	ret

000096ea <atoi>:
    96ea:	fc 01       	movw	r30, r24
    96ec:	88 27       	eor	r24, r24
    96ee:	99 27       	eor	r25, r25
    96f0:	e8 94       	clt
    96f2:	21 91       	ld	r18, Z+
    96f4:	20 32       	cpi	r18, 0x20	; 32
    96f6:	e9 f3       	breq	.-6      	; 0x96f2 <atoi+0x8>
    96f8:	29 30       	cpi	r18, 0x09	; 9
    96fa:	10 f0       	brcs	.+4      	; 0x9700 <atoi+0x16>
    96fc:	2e 30       	cpi	r18, 0x0E	; 14
    96fe:	c8 f3       	brcs	.-14     	; 0x96f2 <atoi+0x8>
    9700:	2b 32       	cpi	r18, 0x2B	; 43
    9702:	41 f0       	breq	.+16     	; 0x9714 <atoi+0x2a>
    9704:	2d 32       	cpi	r18, 0x2D	; 45
    9706:	39 f4       	brne	.+14     	; 0x9716 <atoi+0x2c>
    9708:	68 94       	set
    970a:	04 c0       	rjmp	.+8      	; 0x9714 <atoi+0x2a>
    970c:	0e 94 08 4d 	call	0x9a10	; 0x9a10 <__mulhi_const_10>
    9710:	82 0f       	add	r24, r18
    9712:	91 1d       	adc	r25, r1
    9714:	21 91       	ld	r18, Z+
    9716:	20 53       	subi	r18, 0x30	; 48
    9718:	2a 30       	cpi	r18, 0x0A	; 10
    971a:	c0 f3       	brcs	.-16     	; 0x970c <atoi+0x22>
    971c:	1e f4       	brtc	.+6      	; 0x9724 <atoi+0x3a>
    971e:	90 95       	com	r25
    9720:	81 95       	neg	r24
    9722:	9f 4f       	sbci	r25, 0xFF	; 255
    9724:	08 95       	ret

00009726 <__ftoa_engine>:
    9726:	28 30       	cpi	r18, 0x08	; 8
    9728:	08 f0       	brcs	.+2      	; 0x972c <__ftoa_engine+0x6>
    972a:	27 e0       	ldi	r18, 0x07	; 7
    972c:	33 27       	eor	r19, r19
    972e:	da 01       	movw	r26, r20
    9730:	99 0f       	add	r25, r25
    9732:	31 1d       	adc	r19, r1
    9734:	87 fd       	sbrc	r24, 7
    9736:	91 60       	ori	r25, 0x01	; 1
    9738:	00 96       	adiw	r24, 0x00	; 0
    973a:	61 05       	cpc	r22, r1
    973c:	71 05       	cpc	r23, r1
    973e:	39 f4       	brne	.+14     	; 0x974e <__ftoa_engine+0x28>
    9740:	32 60       	ori	r19, 0x02	; 2
    9742:	2e 5f       	subi	r18, 0xFE	; 254
    9744:	3d 93       	st	X+, r19
    9746:	30 e3       	ldi	r19, 0x30	; 48
    9748:	2a 95       	dec	r18
    974a:	e1 f7       	brne	.-8      	; 0x9744 <__ftoa_engine+0x1e>
    974c:	08 95       	ret
    974e:	9f 3f       	cpi	r25, 0xFF	; 255
    9750:	30 f0       	brcs	.+12     	; 0x975e <__ftoa_engine+0x38>
    9752:	80 38       	cpi	r24, 0x80	; 128
    9754:	71 05       	cpc	r23, r1
    9756:	61 05       	cpc	r22, r1
    9758:	09 f0       	breq	.+2      	; 0x975c <__ftoa_engine+0x36>
    975a:	3c 5f       	subi	r19, 0xFC	; 252
    975c:	3c 5f       	subi	r19, 0xFC	; 252
    975e:	3d 93       	st	X+, r19
    9760:	91 30       	cpi	r25, 0x01	; 1
    9762:	08 f0       	brcs	.+2      	; 0x9766 <__ftoa_engine+0x40>
    9764:	80 68       	ori	r24, 0x80	; 128
    9766:	91 1d       	adc	r25, r1
    9768:	df 93       	push	r29
    976a:	cf 93       	push	r28
    976c:	1f 93       	push	r17
    976e:	0f 93       	push	r16
    9770:	ff 92       	push	r15
    9772:	ef 92       	push	r14
    9774:	19 2f       	mov	r17, r25
    9776:	98 7f       	andi	r25, 0xF8	; 248
    9778:	96 95       	lsr	r25
    977a:	e9 2f       	mov	r30, r25
    977c:	96 95       	lsr	r25
    977e:	96 95       	lsr	r25
    9780:	e9 0f       	add	r30, r25
    9782:	ff 27       	eor	r31, r31
    9784:	e4 55       	subi	r30, 0x54	; 84
    9786:	fc 4f       	sbci	r31, 0xFC	; 252
    9788:	99 27       	eor	r25, r25
    978a:	33 27       	eor	r19, r19
    978c:	ee 24       	eor	r14, r14
    978e:	ff 24       	eor	r15, r15
    9790:	a7 01       	movw	r20, r14
    9792:	e7 01       	movw	r28, r14
    9794:	05 90       	lpm	r0, Z+
    9796:	08 94       	sec
    9798:	07 94       	ror	r0
    979a:	28 f4       	brcc	.+10     	; 0x97a6 <__ftoa_engine+0x80>
    979c:	36 0f       	add	r19, r22
    979e:	e7 1e       	adc	r14, r23
    97a0:	f8 1e       	adc	r15, r24
    97a2:	49 1f       	adc	r20, r25
    97a4:	51 1d       	adc	r21, r1
    97a6:	66 0f       	add	r22, r22
    97a8:	77 1f       	adc	r23, r23
    97aa:	88 1f       	adc	r24, r24
    97ac:	99 1f       	adc	r25, r25
    97ae:	06 94       	lsr	r0
    97b0:	a1 f7       	brne	.-24     	; 0x979a <__ftoa_engine+0x74>
    97b2:	05 90       	lpm	r0, Z+
    97b4:	07 94       	ror	r0
    97b6:	28 f4       	brcc	.+10     	; 0x97c2 <__ftoa_engine+0x9c>
    97b8:	e7 0e       	add	r14, r23
    97ba:	f8 1e       	adc	r15, r24
    97bc:	49 1f       	adc	r20, r25
    97be:	56 1f       	adc	r21, r22
    97c0:	c1 1d       	adc	r28, r1
    97c2:	77 0f       	add	r23, r23
    97c4:	88 1f       	adc	r24, r24
    97c6:	99 1f       	adc	r25, r25
    97c8:	66 1f       	adc	r22, r22
    97ca:	06 94       	lsr	r0
    97cc:	a1 f7       	brne	.-24     	; 0x97b6 <__ftoa_engine+0x90>
    97ce:	05 90       	lpm	r0, Z+
    97d0:	07 94       	ror	r0
    97d2:	28 f4       	brcc	.+10     	; 0x97de <__ftoa_engine+0xb8>
    97d4:	f8 0e       	add	r15, r24
    97d6:	49 1f       	adc	r20, r25
    97d8:	56 1f       	adc	r21, r22
    97da:	c7 1f       	adc	r28, r23
    97dc:	d1 1d       	adc	r29, r1
    97de:	88 0f       	add	r24, r24
    97e0:	99 1f       	adc	r25, r25
    97e2:	66 1f       	adc	r22, r22
    97e4:	77 1f       	adc	r23, r23
    97e6:	06 94       	lsr	r0
    97e8:	a1 f7       	brne	.-24     	; 0x97d2 <__ftoa_engine+0xac>
    97ea:	05 90       	lpm	r0, Z+
    97ec:	07 94       	ror	r0
    97ee:	20 f4       	brcc	.+8      	; 0x97f8 <__ftoa_engine+0xd2>
    97f0:	49 0f       	add	r20, r25
    97f2:	56 1f       	adc	r21, r22
    97f4:	c7 1f       	adc	r28, r23
    97f6:	d8 1f       	adc	r29, r24
    97f8:	99 0f       	add	r25, r25
    97fa:	66 1f       	adc	r22, r22
    97fc:	77 1f       	adc	r23, r23
    97fe:	88 1f       	adc	r24, r24
    9800:	06 94       	lsr	r0
    9802:	a9 f7       	brne	.-22     	; 0x97ee <__ftoa_engine+0xc8>
    9804:	84 91       	lpm	r24, Z
    9806:	10 95       	com	r17
    9808:	17 70       	andi	r17, 0x07	; 7
    980a:	41 f0       	breq	.+16     	; 0x981c <__ftoa_engine+0xf6>
    980c:	d6 95       	lsr	r29
    980e:	c7 95       	ror	r28
    9810:	57 95       	ror	r21
    9812:	47 95       	ror	r20
    9814:	f7 94       	ror	r15
    9816:	e7 94       	ror	r14
    9818:	1a 95       	dec	r17
    981a:	c1 f7       	brne	.-16     	; 0x980c <__ftoa_engine+0xe6>
    981c:	e2 e5       	ldi	r30, 0x52	; 82
    981e:	f3 e0       	ldi	r31, 0x03	; 3
    9820:	68 94       	set
    9822:	15 90       	lpm	r1, Z+
    9824:	15 91       	lpm	r17, Z+
    9826:	35 91       	lpm	r19, Z+
    9828:	65 91       	lpm	r22, Z+
    982a:	95 91       	lpm	r25, Z+
    982c:	05 90       	lpm	r0, Z+
    982e:	7f e2       	ldi	r23, 0x2F	; 47
    9830:	73 95       	inc	r23
    9832:	e1 18       	sub	r14, r1
    9834:	f1 0a       	sbc	r15, r17
    9836:	43 0b       	sbc	r20, r19
    9838:	56 0b       	sbc	r21, r22
    983a:	c9 0b       	sbc	r28, r25
    983c:	d0 09       	sbc	r29, r0
    983e:	c0 f7       	brcc	.-16     	; 0x9830 <__ftoa_engine+0x10a>
    9840:	e1 0c       	add	r14, r1
    9842:	f1 1e       	adc	r15, r17
    9844:	43 1f       	adc	r20, r19
    9846:	56 1f       	adc	r21, r22
    9848:	c9 1f       	adc	r28, r25
    984a:	d0 1d       	adc	r29, r0
    984c:	7e f4       	brtc	.+30     	; 0x986c <__ftoa_engine+0x146>
    984e:	70 33       	cpi	r23, 0x30	; 48
    9850:	11 f4       	brne	.+4      	; 0x9856 <__ftoa_engine+0x130>
    9852:	8a 95       	dec	r24
    9854:	e6 cf       	rjmp	.-52     	; 0x9822 <__ftoa_engine+0xfc>
    9856:	e8 94       	clt
    9858:	01 50       	subi	r16, 0x01	; 1
    985a:	30 f0       	brcs	.+12     	; 0x9868 <__ftoa_engine+0x142>
    985c:	08 0f       	add	r16, r24
    985e:	0a f4       	brpl	.+2      	; 0x9862 <__ftoa_engine+0x13c>
    9860:	00 27       	eor	r16, r16
    9862:	02 17       	cp	r16, r18
    9864:	08 f4       	brcc	.+2      	; 0x9868 <__ftoa_engine+0x142>
    9866:	20 2f       	mov	r18, r16
    9868:	23 95       	inc	r18
    986a:	02 2f       	mov	r16, r18
    986c:	7a 33       	cpi	r23, 0x3A	; 58
    986e:	28 f0       	brcs	.+10     	; 0x987a <__ftoa_engine+0x154>
    9870:	79 e3       	ldi	r23, 0x39	; 57
    9872:	7d 93       	st	X+, r23
    9874:	2a 95       	dec	r18
    9876:	e9 f7       	brne	.-6      	; 0x9872 <__ftoa_engine+0x14c>
    9878:	10 c0       	rjmp	.+32     	; 0x989a <__ftoa_engine+0x174>
    987a:	7d 93       	st	X+, r23
    987c:	2a 95       	dec	r18
    987e:	89 f6       	brne	.-94     	; 0x9822 <__ftoa_engine+0xfc>
    9880:	06 94       	lsr	r0
    9882:	97 95       	ror	r25
    9884:	67 95       	ror	r22
    9886:	37 95       	ror	r19
    9888:	17 95       	ror	r17
    988a:	17 94       	ror	r1
    988c:	e1 18       	sub	r14, r1
    988e:	f1 0a       	sbc	r15, r17
    9890:	43 0b       	sbc	r20, r19
    9892:	56 0b       	sbc	r21, r22
    9894:	c9 0b       	sbc	r28, r25
    9896:	d0 09       	sbc	r29, r0
    9898:	98 f0       	brcs	.+38     	; 0x98c0 <__ftoa_engine+0x19a>
    989a:	23 95       	inc	r18
    989c:	7e 91       	ld	r23, -X
    989e:	73 95       	inc	r23
    98a0:	7a 33       	cpi	r23, 0x3A	; 58
    98a2:	08 f0       	brcs	.+2      	; 0x98a6 <__ftoa_engine+0x180>
    98a4:	70 e3       	ldi	r23, 0x30	; 48
    98a6:	7c 93       	st	X, r23
    98a8:	20 13       	cpse	r18, r16
    98aa:	b8 f7       	brcc	.-18     	; 0x989a <__ftoa_engine+0x174>
    98ac:	7e 91       	ld	r23, -X
    98ae:	70 61       	ori	r23, 0x10	; 16
    98b0:	7d 93       	st	X+, r23
    98b2:	30 f0       	brcs	.+12     	; 0x98c0 <__ftoa_engine+0x19a>
    98b4:	83 95       	inc	r24
    98b6:	71 e3       	ldi	r23, 0x31	; 49
    98b8:	7d 93       	st	X+, r23
    98ba:	70 e3       	ldi	r23, 0x30	; 48
    98bc:	2a 95       	dec	r18
    98be:	e1 f7       	brne	.-8      	; 0x98b8 <__ftoa_engine+0x192>
    98c0:	11 24       	eor	r1, r1
    98c2:	ef 90       	pop	r14
    98c4:	ff 90       	pop	r15
    98c6:	0f 91       	pop	r16
    98c8:	1f 91       	pop	r17
    98ca:	cf 91       	pop	r28
    98cc:	df 91       	pop	r29
    98ce:	99 27       	eor	r25, r25
    98d0:	87 fd       	sbrc	r24, 7
    98d2:	90 95       	com	r25
    98d4:	08 95       	ret

000098d6 <isspace>:
    98d6:	91 11       	cpse	r25, r1
    98d8:	0c 94 9c 4e 	jmp	0x9d38	; 0x9d38 <__ctype_isfalse>
    98dc:	80 32       	cpi	r24, 0x20	; 32
    98de:	19 f0       	breq	.+6      	; 0x98e6 <isspace+0x10>
    98e0:	89 50       	subi	r24, 0x09	; 9
    98e2:	85 50       	subi	r24, 0x05	; 5
    98e4:	c8 f7       	brcc	.-14     	; 0x98d8 <isspace+0x2>
    98e6:	08 95       	ret

000098e8 <tolower>:
    98e8:	91 11       	cpse	r25, r1
    98ea:	08 95       	ret
    98ec:	81 54       	subi	r24, 0x41	; 65
    98ee:	8a 51       	subi	r24, 0x1A	; 26
    98f0:	08 f4       	brcc	.+2      	; 0x98f4 <tolower+0xc>
    98f2:	80 5e       	subi	r24, 0xE0	; 224
    98f4:	85 5a       	subi	r24, 0xA5	; 165
    98f6:	08 95       	ret

000098f8 <strchr_P>:
    98f8:	fc 01       	movw	r30, r24
    98fa:	05 90       	lpm	r0, Z+
    98fc:	06 16       	cp	r0, r22
    98fe:	21 f0       	breq	.+8      	; 0x9908 <strchr_P+0x10>
    9900:	00 20       	and	r0, r0
    9902:	d9 f7       	brne	.-10     	; 0x98fa <strchr_P+0x2>
    9904:	c0 01       	movw	r24, r0
    9906:	08 95       	ret
    9908:	31 97       	sbiw	r30, 0x01	; 1
    990a:	cf 01       	movw	r24, r30
    990c:	08 95       	ret

0000990e <strcmp_P>:
    990e:	fb 01       	movw	r30, r22
    9910:	dc 01       	movw	r26, r24
    9912:	8d 91       	ld	r24, X+
    9914:	05 90       	lpm	r0, Z+
    9916:	80 19       	sub	r24, r0
    9918:	01 10       	cpse	r0, r1
    991a:	d9 f3       	breq	.-10     	; 0x9912 <strcmp_P+0x4>
    991c:	99 0b       	sbc	r25, r25
    991e:	08 95       	ret

00009920 <strnlen_P>:
    9920:	fc 01       	movw	r30, r24
    9922:	05 90       	lpm	r0, Z+
    9924:	61 50       	subi	r22, 0x01	; 1
    9926:	70 40       	sbci	r23, 0x00	; 0
    9928:	01 10       	cpse	r0, r1
    992a:	d8 f7       	brcc	.-10     	; 0x9922 <strnlen_P+0x2>
    992c:	80 95       	com	r24
    992e:	90 95       	com	r25
    9930:	8e 0f       	add	r24, r30
    9932:	9f 1f       	adc	r25, r31
    9934:	08 95       	ret

00009936 <strtok>:
    9936:	42 e2       	ldi	r20, 0x22	; 34
    9938:	52 e2       	ldi	r21, 0x22	; 34
    993a:	0c 94 e1 4c 	jmp	0x99c2	; 0x99c2 <strtok_r>

0000993e <memcpy>:
    993e:	fb 01       	movw	r30, r22
    9940:	dc 01       	movw	r26, r24
    9942:	02 c0       	rjmp	.+4      	; 0x9948 <memcpy+0xa>
    9944:	01 90       	ld	r0, Z+
    9946:	0d 92       	st	X+, r0
    9948:	41 50       	subi	r20, 0x01	; 1
    994a:	50 40       	sbci	r21, 0x00	; 0
    994c:	d8 f7       	brcc	.-10     	; 0x9944 <memcpy+0x6>
    994e:	08 95       	ret

00009950 <strcmp>:
    9950:	fb 01       	movw	r30, r22
    9952:	dc 01       	movw	r26, r24
    9954:	8d 91       	ld	r24, X+
    9956:	01 90       	ld	r0, Z+
    9958:	80 19       	sub	r24, r0
    995a:	01 10       	cpse	r0, r1
    995c:	d9 f3       	breq	.-10     	; 0x9954 <strcmp+0x4>
    995e:	99 0b       	sbc	r25, r25
    9960:	08 95       	ret

00009962 <strcpy>:
    9962:	fb 01       	movw	r30, r22
    9964:	dc 01       	movw	r26, r24
    9966:	01 90       	ld	r0, Z+
    9968:	0d 92       	st	X+, r0
    996a:	00 20       	and	r0, r0
    996c:	e1 f7       	brne	.-8      	; 0x9966 <strcpy+0x4>
    996e:	08 95       	ret

00009970 <strcspn>:
    9970:	dc 01       	movw	r26, r24
    9972:	5d 91       	ld	r21, X+
    9974:	55 23       	and	r21, r21
    9976:	31 f0       	breq	.+12     	; 0x9984 <strcspn+0x14>
    9978:	fb 01       	movw	r30, r22
    997a:	01 90       	ld	r0, Z+
    997c:	05 16       	cp	r0, r21
    997e:	01 10       	cpse	r0, r1
    9980:	e1 f7       	brne	.-8      	; 0x997a <strcspn+0xa>
    9982:	b9 f7       	brne	.-18     	; 0x9972 <strcspn+0x2>
    9984:	80 95       	com	r24
    9986:	90 95       	com	r25
    9988:	8a 0f       	add	r24, r26
    998a:	9b 1f       	adc	r25, r27
    998c:	08 95       	ret

0000998e <strncpy>:
    998e:	fb 01       	movw	r30, r22
    9990:	dc 01       	movw	r26, r24
    9992:	41 50       	subi	r20, 0x01	; 1
    9994:	50 40       	sbci	r21, 0x00	; 0
    9996:	48 f0       	brcs	.+18     	; 0x99aa <strncpy+0x1c>
    9998:	01 90       	ld	r0, Z+
    999a:	0d 92       	st	X+, r0
    999c:	00 20       	and	r0, r0
    999e:	c9 f7       	brne	.-14     	; 0x9992 <strncpy+0x4>
    99a0:	01 c0       	rjmp	.+2      	; 0x99a4 <strncpy+0x16>
    99a2:	1d 92       	st	X+, r1
    99a4:	41 50       	subi	r20, 0x01	; 1
    99a6:	50 40       	sbci	r21, 0x00	; 0
    99a8:	e0 f7       	brcc	.-8      	; 0x99a2 <strncpy+0x14>
    99aa:	08 95       	ret

000099ac <strnlen>:
    99ac:	fc 01       	movw	r30, r24
    99ae:	61 50       	subi	r22, 0x01	; 1
    99b0:	70 40       	sbci	r23, 0x00	; 0
    99b2:	01 90       	ld	r0, Z+
    99b4:	01 10       	cpse	r0, r1
    99b6:	d8 f7       	brcc	.-10     	; 0x99ae <strnlen+0x2>
    99b8:	80 95       	com	r24
    99ba:	90 95       	com	r25
    99bc:	8e 0f       	add	r24, r30
    99be:	9f 1f       	adc	r25, r31
    99c0:	08 95       	ret

000099c2 <strtok_r>:
    99c2:	fa 01       	movw	r30, r20
    99c4:	a1 91       	ld	r26, Z+
    99c6:	b0 81       	ld	r27, Z
    99c8:	00 97       	sbiw	r24, 0x00	; 0
    99ca:	19 f4       	brne	.+6      	; 0x99d2 <strtok_r+0x10>
    99cc:	10 97       	sbiw	r26, 0x00	; 0
    99ce:	e1 f0       	breq	.+56     	; 0x9a08 <strtok_r+0x46>
    99d0:	cd 01       	movw	r24, r26
    99d2:	dc 01       	movw	r26, r24
    99d4:	cd 01       	movw	r24, r26
    99d6:	0d 90       	ld	r0, X+
    99d8:	00 20       	and	r0, r0
    99da:	11 f4       	brne	.+4      	; 0x99e0 <strtok_r+0x1e>
    99dc:	c0 01       	movw	r24, r0
    99de:	13 c0       	rjmp	.+38     	; 0x9a06 <strtok_r+0x44>
    99e0:	fb 01       	movw	r30, r22
    99e2:	21 91       	ld	r18, Z+
    99e4:	22 23       	and	r18, r18
    99e6:	19 f0       	breq	.+6      	; 0x99ee <strtok_r+0x2c>
    99e8:	20 15       	cp	r18, r0
    99ea:	d9 f7       	brne	.-10     	; 0x99e2 <strtok_r+0x20>
    99ec:	f3 cf       	rjmp	.-26     	; 0x99d4 <strtok_r+0x12>
    99ee:	fb 01       	movw	r30, r22
    99f0:	21 91       	ld	r18, Z+
    99f2:	20 15       	cp	r18, r0
    99f4:	19 f4       	brne	.+6      	; 0x99fc <strtok_r+0x3a>
    99f6:	1e 92       	st	-X, r1
    99f8:	11 96       	adiw	r26, 0x01	; 1
    99fa:	06 c0       	rjmp	.+12     	; 0x9a08 <strtok_r+0x46>
    99fc:	22 23       	and	r18, r18
    99fe:	c1 f7       	brne	.-16     	; 0x99f0 <strtok_r+0x2e>
    9a00:	0d 90       	ld	r0, X+
    9a02:	00 20       	and	r0, r0
    9a04:	a1 f7       	brne	.-24     	; 0x99ee <strtok_r+0x2c>
    9a06:	d0 01       	movw	r26, r0
    9a08:	fa 01       	movw	r30, r20
    9a0a:	a1 93       	st	Z+, r26
    9a0c:	b0 83       	st	Z, r27
    9a0e:	08 95       	ret

00009a10 <__mulhi_const_10>:
    9a10:	7a e0       	ldi	r23, 0x0A	; 10
    9a12:	97 9f       	mul	r25, r23
    9a14:	90 2d       	mov	r25, r0
    9a16:	87 9f       	mul	r24, r23
    9a18:	80 2d       	mov	r24, r0
    9a1a:	91 0d       	add	r25, r1
    9a1c:	11 24       	eor	r1, r1
    9a1e:	08 95       	ret

00009a20 <fgetc>:
    9a20:	cf 93       	push	r28
    9a22:	df 93       	push	r29
    9a24:	ec 01       	movw	r28, r24
    9a26:	2b 81       	ldd	r18, Y+3	; 0x03
    9a28:	20 ff       	sbrs	r18, 0
    9a2a:	33 c0       	rjmp	.+102    	; 0x9a92 <fgetc+0x72>
    9a2c:	26 ff       	sbrs	r18, 6
    9a2e:	0a c0       	rjmp	.+20     	; 0x9a44 <fgetc+0x24>
    9a30:	2f 7b       	andi	r18, 0xBF	; 191
    9a32:	2b 83       	std	Y+3, r18	; 0x03
    9a34:	8e 81       	ldd	r24, Y+6	; 0x06
    9a36:	9f 81       	ldd	r25, Y+7	; 0x07
    9a38:	01 96       	adiw	r24, 0x01	; 1
    9a3a:	8e 83       	std	Y+6, r24	; 0x06
    9a3c:	9f 83       	std	Y+7, r25	; 0x07
    9a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    9a40:	90 e0       	ldi	r25, 0x00	; 0
    9a42:	29 c0       	rjmp	.+82     	; 0x9a96 <fgetc+0x76>
    9a44:	22 ff       	sbrs	r18, 2
    9a46:	0f c0       	rjmp	.+30     	; 0x9a66 <fgetc+0x46>
    9a48:	e8 81       	ld	r30, Y
    9a4a:	f9 81       	ldd	r31, Y+1	; 0x01
    9a4c:	80 81       	ld	r24, Z
    9a4e:	08 2e       	mov	r0, r24
    9a50:	00 0c       	add	r0, r0
    9a52:	99 0b       	sbc	r25, r25
    9a54:	00 97       	sbiw	r24, 0x00	; 0
    9a56:	19 f4       	brne	.+6      	; 0x9a5e <fgetc+0x3e>
    9a58:	20 62       	ori	r18, 0x20	; 32
    9a5a:	2b 83       	std	Y+3, r18	; 0x03
    9a5c:	1a c0       	rjmp	.+52     	; 0x9a92 <fgetc+0x72>
    9a5e:	31 96       	adiw	r30, 0x01	; 1
    9a60:	e8 83       	st	Y, r30
    9a62:	f9 83       	std	Y+1, r31	; 0x01
    9a64:	0e c0       	rjmp	.+28     	; 0x9a82 <fgetc+0x62>
    9a66:	ea 85       	ldd	r30, Y+10	; 0x0a
    9a68:	fb 85       	ldd	r31, Y+11	; 0x0b
    9a6a:	19 95       	eicall
    9a6c:	97 ff       	sbrs	r25, 7
    9a6e:	09 c0       	rjmp	.+18     	; 0x9a82 <fgetc+0x62>
    9a70:	2b 81       	ldd	r18, Y+3	; 0x03
    9a72:	01 96       	adiw	r24, 0x01	; 1
    9a74:	11 f0       	breq	.+4      	; 0x9a7a <fgetc+0x5a>
    9a76:	80 e2       	ldi	r24, 0x20	; 32
    9a78:	01 c0       	rjmp	.+2      	; 0x9a7c <fgetc+0x5c>
    9a7a:	80 e1       	ldi	r24, 0x10	; 16
    9a7c:	82 2b       	or	r24, r18
    9a7e:	8b 83       	std	Y+3, r24	; 0x03
    9a80:	08 c0       	rjmp	.+16     	; 0x9a92 <fgetc+0x72>
    9a82:	2e 81       	ldd	r18, Y+6	; 0x06
    9a84:	3f 81       	ldd	r19, Y+7	; 0x07
    9a86:	2f 5f       	subi	r18, 0xFF	; 255
    9a88:	3f 4f       	sbci	r19, 0xFF	; 255
    9a8a:	2e 83       	std	Y+6, r18	; 0x06
    9a8c:	3f 83       	std	Y+7, r19	; 0x07
    9a8e:	99 27       	eor	r25, r25
    9a90:	02 c0       	rjmp	.+4      	; 0x9a96 <fgetc+0x76>
    9a92:	8f ef       	ldi	r24, 0xFF	; 255
    9a94:	9f ef       	ldi	r25, 0xFF	; 255
    9a96:	df 91       	pop	r29
    9a98:	cf 91       	pop	r28
    9a9a:	08 95       	ret

00009a9c <fputc>:
    9a9c:	0f 93       	push	r16
    9a9e:	1f 93       	push	r17
    9aa0:	cf 93       	push	r28
    9aa2:	df 93       	push	r29
    9aa4:	fb 01       	movw	r30, r22
    9aa6:	23 81       	ldd	r18, Z+3	; 0x03
    9aa8:	21 fd       	sbrc	r18, 1
    9aaa:	03 c0       	rjmp	.+6      	; 0x9ab2 <fputc+0x16>
    9aac:	8f ef       	ldi	r24, 0xFF	; 255
    9aae:	9f ef       	ldi	r25, 0xFF	; 255
    9ab0:	2c c0       	rjmp	.+88     	; 0x9b0a <fputc+0x6e>
    9ab2:	22 ff       	sbrs	r18, 2
    9ab4:	16 c0       	rjmp	.+44     	; 0x9ae2 <fputc+0x46>
    9ab6:	46 81       	ldd	r20, Z+6	; 0x06
    9ab8:	57 81       	ldd	r21, Z+7	; 0x07
    9aba:	24 81       	ldd	r18, Z+4	; 0x04
    9abc:	35 81       	ldd	r19, Z+5	; 0x05
    9abe:	42 17       	cp	r20, r18
    9ac0:	53 07       	cpc	r21, r19
    9ac2:	44 f4       	brge	.+16     	; 0x9ad4 <fputc+0x38>
    9ac4:	a0 81       	ld	r26, Z
    9ac6:	b1 81       	ldd	r27, Z+1	; 0x01
    9ac8:	9d 01       	movw	r18, r26
    9aca:	2f 5f       	subi	r18, 0xFF	; 255
    9acc:	3f 4f       	sbci	r19, 0xFF	; 255
    9ace:	20 83       	st	Z, r18
    9ad0:	31 83       	std	Z+1, r19	; 0x01
    9ad2:	8c 93       	st	X, r24
    9ad4:	26 81       	ldd	r18, Z+6	; 0x06
    9ad6:	37 81       	ldd	r19, Z+7	; 0x07
    9ad8:	2f 5f       	subi	r18, 0xFF	; 255
    9ada:	3f 4f       	sbci	r19, 0xFF	; 255
    9adc:	26 83       	std	Z+6, r18	; 0x06
    9ade:	37 83       	std	Z+7, r19	; 0x07
    9ae0:	14 c0       	rjmp	.+40     	; 0x9b0a <fputc+0x6e>
    9ae2:	8b 01       	movw	r16, r22
    9ae4:	ec 01       	movw	r28, r24
    9ae6:	fb 01       	movw	r30, r22
    9ae8:	00 84       	ldd	r0, Z+8	; 0x08
    9aea:	f1 85       	ldd	r31, Z+9	; 0x09
    9aec:	e0 2d       	mov	r30, r0
    9aee:	19 95       	eicall
    9af0:	89 2b       	or	r24, r25
    9af2:	e1 f6       	brne	.-72     	; 0x9aac <fputc+0x10>
    9af4:	d8 01       	movw	r26, r16
    9af6:	16 96       	adiw	r26, 0x06	; 6
    9af8:	8d 91       	ld	r24, X+
    9afa:	9c 91       	ld	r25, X
    9afc:	17 97       	sbiw	r26, 0x07	; 7
    9afe:	01 96       	adiw	r24, 0x01	; 1
    9b00:	16 96       	adiw	r26, 0x06	; 6
    9b02:	8d 93       	st	X+, r24
    9b04:	9c 93       	st	X, r25
    9b06:	17 97       	sbiw	r26, 0x07	; 7
    9b08:	ce 01       	movw	r24, r28
    9b0a:	df 91       	pop	r29
    9b0c:	cf 91       	pop	r28
    9b0e:	1f 91       	pop	r17
    9b10:	0f 91       	pop	r16
    9b12:	08 95       	ret

00009b14 <printf>:
    9b14:	cf 93       	push	r28
    9b16:	df 93       	push	r29
    9b18:	cd b7       	in	r28, 0x3d	; 61
    9b1a:	de b7       	in	r29, 0x3e	; 62
    9b1c:	ae 01       	movw	r20, r28
    9b1e:	4a 5f       	subi	r20, 0xFA	; 250
    9b20:	5f 4f       	sbci	r21, 0xFF	; 255
    9b22:	fa 01       	movw	r30, r20
    9b24:	61 91       	ld	r22, Z+
    9b26:	71 91       	ld	r23, Z+
    9b28:	af 01       	movw	r20, r30
    9b2a:	80 91 99 25 	lds	r24, 0x2599	; 0x802599 <__iob+0x2>
    9b2e:	90 91 9a 25 	lds	r25, 0x259A	; 0x80259a <__iob+0x3>
    9b32:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <vfprintf>
    9b36:	df 91       	pop	r29
    9b38:	cf 91       	pop	r28
    9b3a:	08 95       	ret

00009b3c <printf_P>:
    9b3c:	0f 93       	push	r16
    9b3e:	1f 93       	push	r17
    9b40:	cf 93       	push	r28
    9b42:	df 93       	push	r29
    9b44:	cd b7       	in	r28, 0x3d	; 61
    9b46:	de b7       	in	r29, 0x3e	; 62
    9b48:	ae 01       	movw	r20, r28
    9b4a:	48 5f       	subi	r20, 0xF8	; 248
    9b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    9b4e:	da 01       	movw	r26, r20
    9b50:	6d 91       	ld	r22, X+
    9b52:	7d 91       	ld	r23, X+
    9b54:	ad 01       	movw	r20, r26
    9b56:	07 e9       	ldi	r16, 0x97	; 151
    9b58:	15 e2       	ldi	r17, 0x25	; 37
    9b5a:	f8 01       	movw	r30, r16
    9b5c:	82 81       	ldd	r24, Z+2	; 0x02
    9b5e:	93 81       	ldd	r25, Z+3	; 0x03
    9b60:	dc 01       	movw	r26, r24
    9b62:	13 96       	adiw	r26, 0x03	; 3
    9b64:	2c 91       	ld	r18, X
    9b66:	13 97       	sbiw	r26, 0x03	; 3
    9b68:	28 60       	ori	r18, 0x08	; 8
    9b6a:	13 96       	adiw	r26, 0x03	; 3
    9b6c:	2c 93       	st	X, r18
    9b6e:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <vfprintf>
    9b72:	d8 01       	movw	r26, r16
    9b74:	12 96       	adiw	r26, 0x02	; 2
    9b76:	ed 91       	ld	r30, X+
    9b78:	fc 91       	ld	r31, X
    9b7a:	13 97       	sbiw	r26, 0x03	; 3
    9b7c:	23 81       	ldd	r18, Z+3	; 0x03
    9b7e:	27 7f       	andi	r18, 0xF7	; 247
    9b80:	23 83       	std	Z+3, r18	; 0x03
    9b82:	df 91       	pop	r29
    9b84:	cf 91       	pop	r28
    9b86:	1f 91       	pop	r17
    9b88:	0f 91       	pop	r16
    9b8a:	08 95       	ret

00009b8c <putchar>:
    9b8c:	60 91 99 25 	lds	r22, 0x2599	; 0x802599 <__iob+0x2>
    9b90:	70 91 9a 25 	lds	r23, 0x259A	; 0x80259a <__iob+0x3>
    9b94:	0c 94 4e 4d 	jmp	0x9a9c	; 0x9a9c <fputc>

00009b98 <puts>:
    9b98:	0f 93       	push	r16
    9b9a:	1f 93       	push	r17
    9b9c:	cf 93       	push	r28
    9b9e:	df 93       	push	r29
    9ba0:	e0 91 99 25 	lds	r30, 0x2599	; 0x802599 <__iob+0x2>
    9ba4:	f0 91 9a 25 	lds	r31, 0x259A	; 0x80259a <__iob+0x3>
    9ba8:	23 81       	ldd	r18, Z+3	; 0x03
    9baa:	21 ff       	sbrs	r18, 1
    9bac:	1b c0       	rjmp	.+54     	; 0x9be4 <puts+0x4c>
    9bae:	8c 01       	movw	r16, r24
    9bb0:	d0 e0       	ldi	r29, 0x00	; 0
    9bb2:	c0 e0       	ldi	r28, 0x00	; 0
    9bb4:	f8 01       	movw	r30, r16
    9bb6:	81 91       	ld	r24, Z+
    9bb8:	8f 01       	movw	r16, r30
    9bba:	60 91 99 25 	lds	r22, 0x2599	; 0x802599 <__iob+0x2>
    9bbe:	70 91 9a 25 	lds	r23, 0x259A	; 0x80259a <__iob+0x3>
    9bc2:	db 01       	movw	r26, r22
    9bc4:	18 96       	adiw	r26, 0x08	; 8
    9bc6:	ed 91       	ld	r30, X+
    9bc8:	fc 91       	ld	r31, X
    9bca:	19 97       	sbiw	r26, 0x09	; 9
    9bcc:	88 23       	and	r24, r24
    9bce:	31 f0       	breq	.+12     	; 0x9bdc <puts+0x44>
    9bd0:	19 95       	eicall
    9bd2:	89 2b       	or	r24, r25
    9bd4:	79 f3       	breq	.-34     	; 0x9bb4 <puts+0x1c>
    9bd6:	df ef       	ldi	r29, 0xFF	; 255
    9bd8:	cf ef       	ldi	r28, 0xFF	; 255
    9bda:	ec cf       	rjmp	.-40     	; 0x9bb4 <puts+0x1c>
    9bdc:	8a e0       	ldi	r24, 0x0A	; 10
    9bde:	19 95       	eicall
    9be0:	89 2b       	or	r24, r25
    9be2:	19 f0       	breq	.+6      	; 0x9bea <puts+0x52>
    9be4:	8f ef       	ldi	r24, 0xFF	; 255
    9be6:	9f ef       	ldi	r25, 0xFF	; 255
    9be8:	02 c0       	rjmp	.+4      	; 0x9bee <puts+0x56>
    9bea:	8d 2f       	mov	r24, r29
    9bec:	9c 2f       	mov	r25, r28
    9bee:	df 91       	pop	r29
    9bf0:	cf 91       	pop	r28
    9bf2:	1f 91       	pop	r17
    9bf4:	0f 91       	pop	r16
    9bf6:	08 95       	ret

00009bf8 <sprintf>:
    9bf8:	0f 93       	push	r16
    9bfa:	1f 93       	push	r17
    9bfc:	cf 93       	push	r28
    9bfe:	df 93       	push	r29
    9c00:	cd b7       	in	r28, 0x3d	; 61
    9c02:	de b7       	in	r29, 0x3e	; 62
    9c04:	2e 97       	sbiw	r28, 0x0e	; 14
    9c06:	cd bf       	out	0x3d, r28	; 61
    9c08:	de bf       	out	0x3e, r29	; 62
    9c0a:	0e 89       	ldd	r16, Y+22	; 0x16
    9c0c:	1f 89       	ldd	r17, Y+23	; 0x17
    9c0e:	86 e0       	ldi	r24, 0x06	; 6
    9c10:	8c 83       	std	Y+4, r24	; 0x04
    9c12:	09 83       	std	Y+1, r16	; 0x01
    9c14:	1a 83       	std	Y+2, r17	; 0x02
    9c16:	8f ef       	ldi	r24, 0xFF	; 255
    9c18:	9f e7       	ldi	r25, 0x7F	; 127
    9c1a:	8d 83       	std	Y+5, r24	; 0x05
    9c1c:	9e 83       	std	Y+6, r25	; 0x06
    9c1e:	ae 01       	movw	r20, r28
    9c20:	46 5e       	subi	r20, 0xE6	; 230
    9c22:	5f 4f       	sbci	r21, 0xFF	; 255
    9c24:	68 8d       	ldd	r22, Y+24	; 0x18
    9c26:	79 8d       	ldd	r23, Y+25	; 0x19
    9c28:	ce 01       	movw	r24, r28
    9c2a:	01 96       	adiw	r24, 0x01	; 1
    9c2c:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <vfprintf>
    9c30:	ef 81       	ldd	r30, Y+7	; 0x07
    9c32:	f8 85       	ldd	r31, Y+8	; 0x08
    9c34:	e0 0f       	add	r30, r16
    9c36:	f1 1f       	adc	r31, r17
    9c38:	10 82       	st	Z, r1
    9c3a:	2e 96       	adiw	r28, 0x0e	; 14
    9c3c:	cd bf       	out	0x3d, r28	; 61
    9c3e:	de bf       	out	0x3e, r29	; 62
    9c40:	df 91       	pop	r29
    9c42:	cf 91       	pop	r28
    9c44:	1f 91       	pop	r17
    9c46:	0f 91       	pop	r16
    9c48:	08 95       	ret

00009c4a <ungetc>:
    9c4a:	fb 01       	movw	r30, r22
    9c4c:	23 81       	ldd	r18, Z+3	; 0x03
    9c4e:	20 ff       	sbrs	r18, 0
    9c50:	12 c0       	rjmp	.+36     	; 0x9c76 <ungetc+0x2c>
    9c52:	26 fd       	sbrc	r18, 6
    9c54:	10 c0       	rjmp	.+32     	; 0x9c76 <ungetc+0x2c>
    9c56:	8f 3f       	cpi	r24, 0xFF	; 255
    9c58:	3f ef       	ldi	r19, 0xFF	; 255
    9c5a:	93 07       	cpc	r25, r19
    9c5c:	61 f0       	breq	.+24     	; 0x9c76 <ungetc+0x2c>
    9c5e:	82 83       	std	Z+2, r24	; 0x02
    9c60:	2f 7d       	andi	r18, 0xDF	; 223
    9c62:	20 64       	ori	r18, 0x40	; 64
    9c64:	23 83       	std	Z+3, r18	; 0x03
    9c66:	26 81       	ldd	r18, Z+6	; 0x06
    9c68:	37 81       	ldd	r19, Z+7	; 0x07
    9c6a:	21 50       	subi	r18, 0x01	; 1
    9c6c:	31 09       	sbc	r19, r1
    9c6e:	26 83       	std	Z+6, r18	; 0x06
    9c70:	37 83       	std	Z+7, r19	; 0x07
    9c72:	99 27       	eor	r25, r25
    9c74:	08 95       	ret
    9c76:	8f ef       	ldi	r24, 0xFF	; 255
    9c78:	9f ef       	ldi	r25, 0xFF	; 255
    9c7a:	08 95       	ret

00009c7c <__ultoa_invert>:
    9c7c:	fa 01       	movw	r30, r20
    9c7e:	aa 27       	eor	r26, r26
    9c80:	28 30       	cpi	r18, 0x08	; 8
    9c82:	51 f1       	breq	.+84     	; 0x9cd8 <__ultoa_invert+0x5c>
    9c84:	20 31       	cpi	r18, 0x10	; 16
    9c86:	81 f1       	breq	.+96     	; 0x9ce8 <__ultoa_invert+0x6c>
    9c88:	e8 94       	clt
    9c8a:	6f 93       	push	r22
    9c8c:	6e 7f       	andi	r22, 0xFE	; 254
    9c8e:	6e 5f       	subi	r22, 0xFE	; 254
    9c90:	7f 4f       	sbci	r23, 0xFF	; 255
    9c92:	8f 4f       	sbci	r24, 0xFF	; 255
    9c94:	9f 4f       	sbci	r25, 0xFF	; 255
    9c96:	af 4f       	sbci	r26, 0xFF	; 255
    9c98:	b1 e0       	ldi	r27, 0x01	; 1
    9c9a:	3e d0       	rcall	.+124    	; 0x9d18 <__ultoa_invert+0x9c>
    9c9c:	b4 e0       	ldi	r27, 0x04	; 4
    9c9e:	3c d0       	rcall	.+120    	; 0x9d18 <__ultoa_invert+0x9c>
    9ca0:	67 0f       	add	r22, r23
    9ca2:	78 1f       	adc	r23, r24
    9ca4:	89 1f       	adc	r24, r25
    9ca6:	9a 1f       	adc	r25, r26
    9ca8:	a1 1d       	adc	r26, r1
    9caa:	68 0f       	add	r22, r24
    9cac:	79 1f       	adc	r23, r25
    9cae:	8a 1f       	adc	r24, r26
    9cb0:	91 1d       	adc	r25, r1
    9cb2:	a1 1d       	adc	r26, r1
    9cb4:	6a 0f       	add	r22, r26
    9cb6:	71 1d       	adc	r23, r1
    9cb8:	81 1d       	adc	r24, r1
    9cba:	91 1d       	adc	r25, r1
    9cbc:	a1 1d       	adc	r26, r1
    9cbe:	20 d0       	rcall	.+64     	; 0x9d00 <__ultoa_invert+0x84>
    9cc0:	09 f4       	brne	.+2      	; 0x9cc4 <__ultoa_invert+0x48>
    9cc2:	68 94       	set
    9cc4:	3f 91       	pop	r19
    9cc6:	2a e0       	ldi	r18, 0x0A	; 10
    9cc8:	26 9f       	mul	r18, r22
    9cca:	11 24       	eor	r1, r1
    9ccc:	30 19       	sub	r19, r0
    9cce:	30 5d       	subi	r19, 0xD0	; 208
    9cd0:	31 93       	st	Z+, r19
    9cd2:	de f6       	brtc	.-74     	; 0x9c8a <__ultoa_invert+0xe>
    9cd4:	cf 01       	movw	r24, r30
    9cd6:	08 95       	ret
    9cd8:	46 2f       	mov	r20, r22
    9cda:	47 70       	andi	r20, 0x07	; 7
    9cdc:	40 5d       	subi	r20, 0xD0	; 208
    9cde:	41 93       	st	Z+, r20
    9ce0:	b3 e0       	ldi	r27, 0x03	; 3
    9ce2:	0f d0       	rcall	.+30     	; 0x9d02 <__ultoa_invert+0x86>
    9ce4:	c9 f7       	brne	.-14     	; 0x9cd8 <__ultoa_invert+0x5c>
    9ce6:	f6 cf       	rjmp	.-20     	; 0x9cd4 <__ultoa_invert+0x58>
    9ce8:	46 2f       	mov	r20, r22
    9cea:	4f 70       	andi	r20, 0x0F	; 15
    9cec:	40 5d       	subi	r20, 0xD0	; 208
    9cee:	4a 33       	cpi	r20, 0x3A	; 58
    9cf0:	18 f0       	brcs	.+6      	; 0x9cf8 <__ultoa_invert+0x7c>
    9cf2:	49 5d       	subi	r20, 0xD9	; 217
    9cf4:	31 fd       	sbrc	r19, 1
    9cf6:	40 52       	subi	r20, 0x20	; 32
    9cf8:	41 93       	st	Z+, r20
    9cfa:	02 d0       	rcall	.+4      	; 0x9d00 <__ultoa_invert+0x84>
    9cfc:	a9 f7       	brne	.-22     	; 0x9ce8 <__ultoa_invert+0x6c>
    9cfe:	ea cf       	rjmp	.-44     	; 0x9cd4 <__ultoa_invert+0x58>
    9d00:	b4 e0       	ldi	r27, 0x04	; 4
    9d02:	a6 95       	lsr	r26
    9d04:	97 95       	ror	r25
    9d06:	87 95       	ror	r24
    9d08:	77 95       	ror	r23
    9d0a:	67 95       	ror	r22
    9d0c:	ba 95       	dec	r27
    9d0e:	c9 f7       	brne	.-14     	; 0x9d02 <__ultoa_invert+0x86>
    9d10:	00 97       	sbiw	r24, 0x00	; 0
    9d12:	61 05       	cpc	r22, r1
    9d14:	71 05       	cpc	r23, r1
    9d16:	08 95       	ret
    9d18:	9b 01       	movw	r18, r22
    9d1a:	ac 01       	movw	r20, r24
    9d1c:	0a 2e       	mov	r0, r26
    9d1e:	06 94       	lsr	r0
    9d20:	57 95       	ror	r21
    9d22:	47 95       	ror	r20
    9d24:	37 95       	ror	r19
    9d26:	27 95       	ror	r18
    9d28:	ba 95       	dec	r27
    9d2a:	c9 f7       	brne	.-14     	; 0x9d1e <__ultoa_invert+0xa2>
    9d2c:	62 0f       	add	r22, r18
    9d2e:	73 1f       	adc	r23, r19
    9d30:	84 1f       	adc	r24, r20
    9d32:	95 1f       	adc	r25, r21
    9d34:	a0 1d       	adc	r26, r0
    9d36:	08 95       	ret

00009d38 <__ctype_isfalse>:
    9d38:	99 27       	eor	r25, r25
    9d3a:	88 27       	eor	r24, r24

00009d3c <__ctype_istrue>:
    9d3c:	08 95       	ret

00009d3e <_exit>:
    9d3e:	f8 94       	cli

00009d40 <__stop_program>:
    9d40:	ff cf       	rjmp	.-2      	; 0x9d40 <__stop_program>
