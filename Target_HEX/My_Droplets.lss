
My_Droplets.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000044  00020000  00020000  0000a6d2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .USERCODE     0000002a  0000c000  0000c000  0000a6a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000a2f8  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         000002dc  00802000  0000a2f8  0000a3cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000003bf  008022dc  008022dc  0000a716  2**0
                  ALLOC
  5 .comment      0000005c  00000000  00000000  0000a716  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a774  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000708  00000000  00000000  0000a7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001ba81  00000000  00000000  0000aec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007321  00000000  00000000  00026941  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000076fb  00000000  00000000  0002dc62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000027c4  00000000  00000000  00035360  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000750f  00000000  00000000  00037b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000e5be  00000000  00000000  0003f033  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001230  00000000  00000000  0004d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20000:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20002:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   20004:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   20006:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   2000a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   2000e:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   20010:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   20014:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   20016:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   2001a:	9b bf       	out	0x3b, r25	; 59

	ret
   2001c:	08 95       	ret

0002001e <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   2001e:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   20022:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   20024:	fc cf       	rjmp	.-8      	; 0x2001e <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20026:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20028:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   2002a:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   2002c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   20030:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   20032:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   20036:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   20038:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   2003a:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   2003c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   20040:	9b bf       	out	0x3b, r25	; 59

	ret
   20042:	08 95       	ret

Disassembly of section .USERCODE:

0000c000 <init>:
 */




void init(){
    c000:	cf 93       	push	r28
    c002:	df 93       	push	r29
	//volatile int dummyArray[512];
	//memset(dummyArray, 0x55, 512);
	
	//for (int i= 0;i<512;i++)
	//dummyArray[i] = i;
	for(uint16_t i=0;i<360;i++){
    c004:	c0 e0       	ldi	r28, 0x00	; 0
    c006:	d0 e0       	ldi	r29, 0x00	; 0
		setHSV(i,255,200);	
    c008:	48 ec       	ldi	r20, 0xC8	; 200
    c00a:	6f ef       	ldi	r22, 0xFF	; 255
    c00c:	ce 01       	movw	r24, r28
    c00e:	0e 94 2e 31 	call	0x625c	; 0x625c <setHSV>
		delayMS(50);
    c012:	82 e3       	ldi	r24, 0x32	; 50
    c014:	90 e0       	ldi	r25, 0x00	; 0
    c016:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
	//volatile int dummyArray[512];
	//memset(dummyArray, 0x55, 512);
	
	//for (int i= 0;i<512;i++)
	//dummyArray[i] = i;
	for(uint16_t i=0;i<360;i++){
    c01a:	21 96       	adiw	r28, 0x01	; 1
    c01c:	c8 36       	cpi	r28, 0x68	; 104
    c01e:	81 e0       	ldi	r24, 0x01	; 1
    c020:	d8 07       	cpc	r29, r24
    c022:	91 f7       	brne	.-28     	; 0xc008 <init+0x8>
		setHSV(i,255,200);	
		delayMS(50);
	}
	
}
    c024:	df 91       	pop	r29
    c026:	cf 91       	pop	r28
    c028:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__ctors_end>
       4:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
       8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
       c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      10:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      14:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      18:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      1c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      20:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      24:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      28:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__vector_10>
      2c:	0c 94 4a 36 	jmp	0x6c94	; 0x6c94 <__vector_11>
      30:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      34:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      38:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      3c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      40:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      44:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      48:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      4c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      50:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      54:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      58:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      5c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      60:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      64:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__vector_25>
      68:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__vector_26>
      6c:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__vector_27>
      70:	0c 94 15 19 	jmp	0x322a	; 0x322a <__vector_28>
      74:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__vector_29>
      78:	0c 94 3e 19 	jmp	0x327c	; 0x327c <__vector_30>
      7c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      80:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      84:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      88:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      8c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      90:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      94:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      98:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      9c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      a0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      a4:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      a8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      ac:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      b0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      b4:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      b8:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__vector_46>
      bc:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__vector_47>
      c0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      c4:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <__vector_49>
      c8:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__vector_50>
      cc:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      d0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      d4:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      d8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      dc:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      e0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      e4:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
      e8:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__vector_58>
      ec:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__vector_59>
      f0:	0c 94 34 1a 	jmp	0x3468	; 0x3468 <__vector_60>
      f4:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__vector_61>
      f8:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__vector_62>
      fc:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__vector_63>
     100:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     104:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     108:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     10c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     110:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     114:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     118:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     11c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     120:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     124:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     128:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     12c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     130:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     134:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     138:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     13c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     140:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     144:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     148:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     14c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     150:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     154:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     158:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     15c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     160:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__vector_88>
     164:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__vector_89>
     168:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__vector_90>
     16c:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__vector_91>
     170:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     174:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     178:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     17c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     180:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     184:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     188:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     18c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     190:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     194:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     198:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     19c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1a0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1a4:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1a8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1ac:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1b0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1b4:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1b8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1bc:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1c0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1c4:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1c8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1cc:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1d0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1d4:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1d8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1dc:	0c 94 01 1b 	jmp	0x3602	; 0x3602 <__vector_119>
     1e0:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__vector_120>
     1e4:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__vector_121>
     1e8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1ec:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1f0:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1f4:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1f8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__bad_interrupt>
     1fc:	be 10       	cpse	r11, r14
     1fe:	cb 10       	cpse	r12, r11
     200:	d8 10       	cpse	r13, r8
     202:	e5 10       	cpse	r14, r5
     204:	f2 10       	cpse	r15, r2
     206:	98 10       	cpse	r9, r8
     208:	a5 10       	cpse	r10, r5
     20a:	0d 16       	cp	r0, r29
     20c:	1a 16       	cp	r1, r26
     20e:	90 15       	cp	r25, r0
     210:	9d 15       	cp	r25, r13
     212:	ab 15       	cp	r26, r11
     214:	df 15       	cp	r29, r15
     216:	83 15       	cp	r24, r3
     218:	08 4a       	sbci	r16, 0xA8	; 168
     21a:	d7 3b       	cpi	r29, 0xB7	; 183
     21c:	3b ce       	rjmp	.-906    	; 0xfffffe94 <__eeprom_end+0xff7efe94>
     21e:	01 6e       	ori	r16, 0xE1	; 225
     220:	84 bc       	out	0x24, r8	; 36
     222:	bf fd       	.word	0xfdbf	; ????
     224:	c1 2f       	mov	r28, r17
     226:	3d 6c       	ori	r19, 0xCD	; 205
     228:	74 31       	cpi	r23, 0x14	; 20
     22a:	9a bd       	out	0x2a, r25	; 42
     22c:	56 83       	std	Z+6, r21	; 0x06
     22e:	3d da       	rcall	.-2950   	; 0xfffff6aa <__eeprom_end+0xff7ef6aa>
     230:	3d 00       	.word	0x003d	; ????
     232:	c7 7f       	andi	r28, 0xF7	; 247
     234:	11 be       	out	0x31, r1	; 49
     236:	d9 e4       	ldi	r29, 0x49	; 73
     238:	bb 4c       	sbci	r27, 0xCB	; 203
     23a:	3e 91       	ld	r19, -X
     23c:	6b aa       	std	Y+51, r6	; 0x33
     23e:	aa be       	out	0x3a, r10	; 58
     240:	00 00       	nop
     242:	00 80       	ld	r0, Z
     244:	3f 07       	cpc	r19, r31
     246:	63 42       	sbci	r22, 0x23	; 35
     248:	36 b7       	in	r19, 0x36	; 54
     24a:	9b d8       	rcall	.-3786   	; 0xfffff382 <__eeprom_end+0xff7ef382>
     24c:	a7 1a       	sub	r10, r23
     24e:	39 68       	ori	r19, 0x89	; 137
     250:	56 18       	sub	r5, r6
     252:	ae ba       	out	0x1e, r10	; 30
     254:	ab 55       	subi	r26, 0x5B	; 91
     256:	8c 1d       	adc	r24, r12
     258:	3c b7       	in	r19, 0x3c	; 60
     25a:	cc 57       	subi	r28, 0x7C	; 124
     25c:	63 bd       	out	0x23, r22	; 35
     25e:	6d ed       	ldi	r22, 0xDD	; 221
     260:	fd 75       	andi	r31, 0x5D	; 93
     262:	3e f6       	brtc	.-114    	; 0x1f2 <__SREG__+0x1b3>
     264:	17 72       	andi	r17, 0x27	; 39
     266:	31 bf       	out	0x31, r19	; 49
     268:	00 00       	nop
     26a:	00 80       	ld	r0, Z
     26c:	3f 05       	cpc	r19, r15
     26e:	a8 4c       	sbci	r26, 0xC8	; 200
     270:	cd b2       	in	r12, 0x1d	; 29
     272:	d4 4e       	sbci	r29, 0xE4	; 228
     274:	b9 38       	cpi	r27, 0x89	; 137
     276:	36 a9       	ldd	r19, Z+54	; 0x36
     278:	02 0c       	add	r0, r2
     27a:	50 b9       	out	0x00, r21	; 0
     27c:	91 86       	std	Z+9, r9	; 0x09
     27e:	88 08       	sbc	r8, r8
     280:	3c a6       	std	Y+44, r3	; 0x2c
     282:	aa aa       	std	Y+50, r10	; 0x32
     284:	2a be       	out	0x3a, r2	; 58
     286:	00 00       	nop
     288:	00 80       	ld	r0, Z
     28a:	3f 08       	sbc	r3, r15
     28c:	00 00       	nop
     28e:	00 be       	out	0x30, r0	; 48
     290:	92 24       	eor	r9, r2
     292:	49 12       	cpse	r4, r25
     294:	3e ab       	std	Y+54, r19	; 0x36
     296:	aa aa       	std	Y+50, r10	; 0x32
     298:	2a be       	out	0x3a, r2	; 58
     29a:	cd cc       	rjmp	.-1638   	; 0xfffffc36 <__eeprom_end+0xff7efc36>
     29c:	cc 4c       	sbci	r28, 0xCC	; 204
     29e:	3e 00       	.word	0x003e	; ????
     2a0:	00 00       	nop
     2a2:	80 be       	out	0x30, r8	; 48
     2a4:	ab aa       	std	Y+51, r10	; 0x33
     2a6:	aa aa       	std	Y+50, r10	; 0x32
     2a8:	3e 00       	.word	0x003e	; ????
     2aa:	00 00       	nop
     2ac:	00 bf       	out	0x30, r16	; 48
     2ae:	00 00       	nop
     2b0:	00 80       	ld	r0, Z
     2b2:	3f 00       	.word	0x003f	; ????
     2b4:	00 00       	nop
     2b6:	00 00       	nop
     2b8:	08 41       	sbci	r16, 0x18	; 24
     2ba:	78 d3       	rcall	.+1776   	; 0x9ac <__c.4892+0x2c>
     2bc:	bb 43       	sbci	r27, 0x3B	; 59
     2be:	87 d1       	rcall	.+782    	; 0x5ce <__c.5226+0x68>
     2c0:	13 3d       	cpi	r17, 0xD3	; 211
     2c2:	19 0e       	add	r1, r25
     2c4:	3c c3       	rjmp	.+1656   	; 0x93e <__c.4912+0x36>
     2c6:	bd 42       	sbci	r27, 0x2D	; 45
     2c8:	82 ad       	ldd	r24, Z+58	; 0x3a
     2ca:	2b 3e       	cpi	r18, 0xEB	; 235
     2cc:	68 ec       	ldi	r22, 0xC8	; 200
     2ce:	82 76       	andi	r24, 0x62	; 98
     2d0:	be d9       	rcall	.-3204   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     2d2:	8f e1       	ldi	r24, 0x1F	; 31
     2d4:	a9 3e       	cpi	r26, 0xE9	; 233
     2d6:	4c 80       	ldd	r4, Y+4	; 0x04
     2d8:	ef ff       	.word	0xffef	; ????
     2da:	be 01       	movw	r22, r28
     2dc:	c4 ff       	sbrs	r28, 4
     2de:	7f 3f       	cpi	r23, 0xFF	; 255
     2e0:	00 00       	nop
     2e2:	00 00       	nop
     2e4:	00 00       	nop

000002e6 <__trampolines_start>:
     2e6:	0c 94 4d 23 	jmp	0x469a	; 0x469a <pc_comm_putchar>
     2ea:	0c 94 be 10 	jmp	0x217c	; 0x217c <irTransmit+0x130>
     2ee:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <handleCmdWrapper>
     2f2:	0c 94 ec 38 	jmp	0x71d8	; 0x71d8 <sendID>
     2f6:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <irReceive+0x256>
     2fa:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <irTransmit+0x198>
     2fe:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <irTransmit+0x14a>
     302:	0c 94 1f 1c 	jmp	0x383e	; 0x383e <setAllirPowers>
     306:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <irReceive+0x2be>
     30a:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <sendPing>
     30e:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <send_hex>
     312:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <irReceive+0x31a>
     316:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <irReceive+0x206>
     31a:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <irReceive+0x334>
     31e:	0c 94 6d 2b 	jmp	0x56da	; 0x56da <useRnbData>
     322:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <updateIrBaselines>
     326:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <irReceive+0x220>
     32a:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <irTransmit+0x17e>
     32e:	0c 94 e6 2e 	jmp	0x5dcc	; 0x5dcc <broadcastRnbData>
     332:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <stopMove>
     336:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <irTransmit+0x164>
     33a:	0c 94 a5 10 	jmp	0x214a	; 0x214a <irTransmit+0xfe>
     33e:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <processObsQueue>
     342:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <irReceive+0x23a>
     346:	0c 94 75 1d 	jmp	0x3aea	; 0x3aea <initIrBaselines>
     34a:	0c 94 98 10 	jmp	0x2130	; 0x2130 <irTransmit+0xe4>

0000034e <__trampolines_end>:
     34e:	6e 61       	ori	r22, 0x1E	; 30
     350:	6e 00       	.word	0x006e	; ????

00000352 <__c.2332>:
     352:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     362:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     372:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     382:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     392:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     3a2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     3b2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     3c2:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     3d2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     3e2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     3f2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     402:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     412:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     422:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     432:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     442:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000450 <__c.5344>:
     450:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 6c     ERROR: Message l
     460:	65 6e 67 74 68 20 30 20 66 6f 72 20 6d 73 67 5f     ength 0 for msg_
     470:	6e 6f 64 65 2e 0d 0a 00                             node....

00000478 <__c.5338>:
     478:	45 72 72 6f 72 3a 20 4d 65 73 73 61 67 65 73 20     Error: Messages 
     488:	6f 76 65 72 66 6c 6f 77 2e 20 54 6f 6f 20 6d 61     overflow. Too ma
     498:	6e 79 20 6d 65 73 73 61 67 65 73 20 72 65 63 65     ny messages rece
     4a8:	69 76 65 64 2e 20 54 72 79 20 73 70 65 65 64 69     ived. Try speedi
     4b8:	6e 67 20 75 70 20 79 6f 75 72 20 6c 6f 6f 70 20     ng up your loop 
     4c8:	69 66 20 79 6f 75 20 73 65 65 20 74 68 69 73 20     if you see this 
     4d8:	61 20 6c 6f 74 2e 0d 0a 00                          a lot....

000004e1 <__c.5331>:
     4e1:	45 72 72 6f 72 21 20 57 65 20 67 6f 74 20 61 68     Error! We got ah
     4f1:	65 61 64 20 6f 66 20 74 68 65 20 74 61 73 6b 20     ead of the task 
     501:	6c 69 73 74 20 61 6e 64 20 6e 6f 77 20 6e 6f 74     list and now not
     511:	68 69 6e 67 20 77 69 6c 6c 20 65 78 65 63 75 74     hing will execut
     521:	65 2e 0d 0a 00                                      e....

00000526 <__c.4802>:
     526:	09 54 57 49 20 77 61 73 6e 27 74 20 72 65 61 64     .TWI wasn't read
     536:	79 2e 0d 0a 00                                      y....

0000053b <__c.4769>:
     53b:	57 61 69 74 69 6e 67 20 66 6f 72 20 54 57 49 20     Waiting for TWI 
     54b:	7c 20 25 73 0d 0a 00                                | %s...

00000552 <__c.4767>:
     552:	09 54 57 49 20 74 69 6d 65 6f 75 74 20 7c 20 25     .TWI timeout | %
     562:	73 0d 0a 00                                         s...

00000566 <__c.5226>:
     566:	45 52 52 4f 52 21 20 42 75 66 66 65 72 65 64 20     ERROR! Buffered 
     576:	69 6e 63 6f 6d 69 6e 67 20 6d 65 73 73 61 67 65     incoming message
     586:	73 20 63 6f 6e 73 75 6d 69 6e 67 20 74 6f 6f 20     s consuming too 
     596:	6d 75 63 68 20 6d 65 6d 6f 72 79 2e 20 41 6c 6c     much memory. All
     5a6:	6f 77 20 68 61 6e 64 6c 65 5f 6d 73 67 20 74 6f     ow handle_msg to
     5b6:	20 62 65 20 63 61 6c 6c 65 64 20 6d 6f 72 65 20      be called more 
     5c6:	66 72 65 71 75 65 6e 74 6c 79 2e 0d 0a 00           frequently....

000005d4 <__c.5224>:
     5d4:	45 52 52 4f 52 21 20 53 68 6f 75 6c 64 20 4e 4f     ERROR! Should NO
     5e4:	54 20 62 65 20 61 64 64 69 6e 67 20 61 20 6d 65     T be adding a me
     5f4:	73 73 61 67 65 20 77 69 74 68 20 6c 65 6e 67 74     ssage with lengt
     604:	68 20 67 72 65 61 74 65 72 20 74 68 61 6e 20 62     h greater than b
     614:	75 66 66 65 72 20 73 69 7a 65 20 74 6f 20 71 75     uffer size to qu
     624:	65 75 65 2e 0d 0a 00                                eue....

0000062b <__c.5222>:
     62b:	45 52 52 4f 52 21 20 53 68 6f 75 6c 64 20 4e 4f     ERROR! Should NO
     63b:	54 20 62 65 20 61 64 64 69 6e 67 20 30 2d 6c 65     T be adding 0-le
     64b:	6e 67 74 68 20 6d 65 73 73 61 67 65 20 74 6f 20     ngth message to 
     65b:	71 75 65 75 65 2e 0d 0a 00                          queue....

00000664 <__c.5145>:
     664:	41 62 6f 72 74 69 6e 67 20 49 52 20 73 65 6e 64     Aborting IR send
     674:	20 5b 25 30 32 68 78 5d 20 77 68 69 6c 65 20 74      [%02hx] while t
     684:	72 79 69 6e 67 3a 20 00                             rying: .

0000068c <__c.5118>:
     68c:	45 52 52 4f 52 3a 20 4d 65 73 73 61 67 65 20 65     ERROR: Message e
     69c:	78 63 65 65 64 73 20 49 52 5f 42 55 46 46 45 52     xceeds IR_BUFFER
     6ac:	5f 53 49 5a 45 2e 0d 0a 00                          _SIZE....

000006b5 <__c.4740>:
     6b5:	09 44 6f 6e 65 20 77 61 69 74 69 6e 67 20 66 6f     .Done waiting fo
     6c5:	72 20 54 57 49 2e 20 49 52 20 70 6f 77 65 72 73     r TWI. IR powers
     6d5:	20 73 65 74 20 73 75 63 63 65 73 73 66 75 6c 6c      set successfull
     6e5:	79 2e 0d 0a 00                                      y....

000006ea <__c.5112>:
     6ea:	49 52 20 48 61 72 64 77 61 72 65 20 62 75 73 79     IR Hardware busy
     6fa:	2e 20 43 61 6e 27 74 20 63 68 65 63 6b 20 63 6f     . Can't check co
     70a:	6c 6c 69 73 69 6f 6e 73 2e 0d 0a 00                 llisions....

00000716 <__c.4920>:
     716:	09 25 68 75 09 25 75 0d 0a 00                       .%hu.%u...

00000720 <__c.4917>:
     720:	44 69 73 74 20 28 6d 6d 29 20 70 65 72 20 6b 69     Dist (mm) per ki
     730:	6c 6f 73 74 65 70 0d 0a 00                          lostep...

00000739 <__c.4904>:
     739:	09 64 69 72 3a 20 25 68 75 09 00                    .dir: %hu..

00000744 <__c.4901>:
     744:	4d 6f 74 6f 72 20 56 61 6c 75 65 73 0d 0a 00        Motor Values...

00000753 <__c.4856>:
     753:	49 6e 20 6f 72 64 65 72 20 74 6f 20 67 6f 20 69     In order to go i
     763:	6e 20 64 69 72 65 63 74 69 6f 6e 20 25 68 75 20     n direction %hu 
     773:	66 6f 72 20 25 75 20 6d 6d 2c 20 74 61 6b 69 6e     for %u mm, takin
     783:	67 20 25 75 20 73 74 65 70 73 2e 0d 0a 00           g %u steps....

00000791 <__c.4852>:
     791:	45 72 72 6f 72 3a 20 44 6f 6e 27 74 20 68 61 76     Error: Don't hav
     7a1:	65 20 63 61 6c 69 62 72 61 74 65 64 20 76 61 6c     e calibrated val
     7b1:	75 65 73 20 66 6f 72 20 74 68 69 73 20 64 69 72     ues for this dir
     7c1:	65 63 74 69 6f 6e 2e 0d 0a 00                       ection....

000007cb <__c.4845>:
     7cb:	45 72 72 6f 72 21 20 46 61 69 6c 65 64 20 74 6f     Error! Failed to
     7db:	20 73 63 68 65 64 75 6c 65 20 73 74 6f 70 5f 6d      schedule stop_m
     7eb:	6f 76 65 20 74 61 73 6b 2e 00                       ove task..

000007f5 <__c.4838>:
     7f5:	45 52 52 4f 52 3a 20 63 75 72 72 65 6e 74 5f 6f     ERROR: current_o
     805:	66 66 73 65 74 3a 20 25 75 20 61 6e 64 20 74 6f     ffset: %u and to
     815:	74 61 6c 5f 74 69 6d 65 3a 20 25 75 20 6e 6f 74     tal_time: %u not
     825:	20 65 71 75 61 6c 21 0d 0a 00                        equal!...

0000082f <__c.5065>:
     82f:	0d 0a 45 52 52 4f 52 3a 20 53 65 72 69 61 6c 20     ..ERROR: Serial 
     83f:	69 6e 70 75 74 20 62 75 66 66 65 72 20 63 61 70     input buffer cap
     84f:	61 63 69 74 79 20 6f 66 20 25 75 20 63 68 61 72     acity of %u char
     85f:	61 63 74 65 72 73 20 65 78 63 65 65 64 65 64 2e     acters exceeded.
     86f:	0d 0a 00                                            ...

00000872 <__c.5223>:
     872:	21 21 21 09 47 6f 74 20 31 35 20 63 6f 6e 73 65     !!!.Got 15 conse
     882:	63 75 74 69 76 65 20 6e 6f 74 68 69 6e 67 73 20     cutive nothings 
     892:	66 72 6f 6d 20 73 65 6e 73 6f 72 20 25 68 75 2e     from sensor %hu.
     8a2:	09 21 21 21 0d 0a 00                                .!!!...

000008a9 <__c.5119>:
     8a9:	52 4e 42 20 42 72 6f 61 64 63 61 73 74 20 66 61     RNB Broadcast fa
     8b9:	69 6c 65 64 20 5b 20 25 30 32 68 58 20 5d 0d 0a     iled [ %02hX ]..
     8c9:	00                                                  .

000008ca <__c.4917>:
     8ca:	45 52 52 4f 52 3a 20 50 6f 73 74 2d 72 65 74 75     ERROR: Post-retu
     8da:	72 6e 2c 20 74 61 73 6b 20 73 74 6f 72 61 67 65     rn, task storage
     8ea:	20 63 6f 6e 73 69 73 74 65 6e 63 79 20 63 68 65      consistency che
     8fa:	63 6b 20 66 61 69 6c 75 72 65 2e 0d 0a 00           ck failure....

00000908 <__c.4912>:
     908:	50 6f 73 74 2d 63 61 6c 6c 2c 20 74 61 73 6b 20     Post-call, task 
     918:	25 58 20 68 61 73 20 6e 65 78 74 5f 70 74 72 20     %X has next_ptr 
     928:	70 6f 69 6e 74 69 6e 67 20 6f 75 74 73 69 64 65     pointing outside
     938:	20 6f 66 20 61 72 72 61 79 2e 0d 0a 00               of array....

00000945 <__c.4897>:
     945:	45 52 52 4f 52 3a 20 50 72 65 2d 63 61 6c 6c 2c     ERROR: Pre-call,
     955:	20 74 61 73 6b 20 73 74 6f 72 61 67 65 20 63 6f      task storage co
     965:	6e 73 69 73 74 65 6e 63 79 20 63 68 65 63 6b 20     nsistency check 
     975:	66 61 69 6c 75 72 65 2e 0d 0a 00                    failure....

00000980 <__c.4892>:
     980:	50 72 65 2d 63 61 6c 6c 2c 20 74 61 73 6b 20 68     Pre-call, task h
     990:	61 73 20 6e 65 78 74 5f 70 74 72 20 70 6f 69 6e     as next_ptr poin
     9a0:	74 69 6e 67 20 6f 75 74 73 69 64 65 20 6f 66 20     ting outside of 
     9b0:	61 72 72 61 79 2e 0d 0a 00                          array....

000009b9 <__c.4876>:
     9b9:	09 54 61 73 6b 20 25 70 20 28 25 70 29 20 73 63     .Task %p (%p) sc
     9c9:	68 65 64 75 6c 65 64 20 61 74 20 25 6c 75 20 77     heduled at %lu w
     9d9:	69 74 68 20 70 65 72 69 6f 64 20 25 6c 75 2c 20     ith period %lu, 
     9e9:	25 6c 75 20 63 75 72 72 65 6e 74 0d 0a 00           %lu current...

000009f7 <__c.4874>:
     9f7:	54 61 73 6b 20 51 75 65 75 65 20 28 25 68 75 20     Task Queue (%hu 
     a07:	74 61 73 6b 73 2c 20 25 68 75 20 65 78 65 63 75     tasks, %hu execu
     a17:	74 69 6e 67 29 3a 0d 0a 00                          ting):...

00000a20 <__c.4848>:
     a20:	4e 65 77 20 54 61 73 6b 20 25 70 20 28 25 70 29     New Task %p (%p)
     a30:	20 73 63 68 65 64 75 6c 65 64 20 61 74 20 25 6c      scheduled at %l
     a40:	75 20 77 69 74 68 20 70 65 72 69 6f 64 20 25 6c     u with period %l
     a50:	75 2c 20 25 6c 75 20 63 75 72 72 65 6e 74 0d 0a     u, %lu current..
     a60:	00                                                  .

00000a61 <__c.4846>:
     a61:	45 52 52 4f 52 21 20 54 61 73 6b 20 6c 69 73 74     ERROR! Task list
     a71:	20 68 61 73 20 73 65 6c 66 2d 72 65 66 65 72 65      has self-refere
     a81:	6e 63 65 2e 0d 0a 00                                nce....

00000a88 <__c.4832>:
     a88:	45 52 52 4f 52 3a 20 54 61 73 6b 20 73 63 68 65     ERROR: Task sche
     a98:	64 75 6c 65 64 20 66 6f 72 20 61 20 74 69 6d 65     duled for a time
     aa8:	20 69 6e 20 74 68 65 20 70 61 73 74 2e 0d 0a 00      in the past....

00000ab8 <__c.4830>:
     ab8:	45 52 52 4f 52 3a 20 73 63 68 65 64 75 6c 65 72     ERROR: scheduler
     ac8:	5f 6d 61 6c 6c 6f 63 20 72 65 74 75 72 6e 65 64     _malloc returned
     ad8:	20 61 20 6e 65 77 5f 74 61 73 6b 20 70 6f 69 6e      a new_task poin
     ae8:	74 65 72 20 6f 75 74 73 69 64 65 20 6f 66 20 74     ter outside of t
     af8:	68 65 20 74 61 73 6b 20 73 74 6f 72 61 67 65 20     he task storage 
     b08:	61 72 72 61 79 2e 0d 0a 00                          array....

00000b11 <__c.4828>:
     b11:	45 52 52 4f 52 3a 20 4e 6f 20 65 6d 70 74 79 20     ERROR: No empty 
     b21:	73 70 6f 74 20 66 6f 75 6e 64 20 69 6e 20 73 63     spot found in sc
     b31:	68 65 64 75 6c 65 72 5f 6d 61 6c 6c 6f 63 2c 20     heduler_malloc, 
     b41:	62 75 74 20 6e 75 6d 5f 74 61 73 6b 73 20 77 61     but num_tasks wa
     b51:	73 6e 27 74 20 67 72 65 61 74 65 72 20 74 68 61     sn't greater tha
     b61:	6e 20 6f 72 20 65 71 75 61 6c 20 6d 61 78 5f 74     n or equal max_t
     b71:	61 73 6b 73 2e 0d 0a 00                             asks....

00000b79 <__c.4791>:
     b79:	09 41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 72     .Attempting to r
     b89:	65 73 74 6f 72 65 20 74 61 73 6b 5f 6c 69 73 74     estore task_list
     b99:	2e 0d 0a 09 49 66 20 79 6f 75 20 6f 6e 6c 79 20     ....If you only 
     ba9:	73 65 65 20 74 68 69 73 20 6d 65 73 73 61 67 65     see this message
     bb9:	20 72 61 72 65 6c 79 2c 20 64 6f 6e 27 74 20 77      rarely, don't w
     bc9:	6f 72 72 79 20 74 6f 6f 20 6d 75 63 68 2e 0d 0a     orry too much...
     bd9:	00                                                  .

00000bda <__c.4766>:
     bda:	45 52 52 4f 52 3a 20 49 6e 20 73 63 68 65 64 75     ERROR: In schedu
     bea:	6c 65 72 5f 66 72 65 65 2c 20 74 67 74 20 28 25     ler_free, tgt (%
     bfa:	58 29 20 77 61 73 20 6f 75 74 73 69 64 65 20 76     X) was outside v
     c0a:	61 6c 69 64 20 54 61 73 6b 2a 20 72 61 6e 67 65     alid Task* range
     c1a:	2e 0d 0a 00                                         ....

00000c1e <__c.5548>:
     c1e:	4d 65 73 73 61 67 65 20 6c 65 6e 67 74 68 20 77     Message length w
     c2e:	61 73 20 25 7a 20 63 68 61 72 73 2c 20 77 68 69     as %z chars, whi
     c3e:	63 68 20 65 78 63 65 65 64 73 20 74 68 65 20 6d     ch exceeds the m
     c4e:	61 78 69 6d 75 6d 20 6f 66 20 25 75 00              aximum of %u.

00000c5b <__c.5543>:
     c5b:	42 72 6f 61 64 63 61 73 74 69 6e 67 20 63 6f 6d     Broadcasting com
     c6b:	6d 61 6e 64 20 74 6f 20 25 30 34 58 3a 20 22 25     mand to %04X: "%
     c7b:	73 22 2c 20 6f 66 20 6c 65 6e 67 74 68 20 25 69     s", of length %i
     c8b:	2e 0d 0a 00                                         ....

00000c8f <__c.5534>:
     c8f:	42 72 6f 61 64 63 61 73 74 69 6e 67 20 63 6f 6d     Broadcasting com
     c9f:	6d 61 6e 64 3a 20 22 25 73 22 2c 20 6f 66 20 6c     mand: "%s", of l
     caf:	65 6e 67 74 68 20 25 69 2e 0d 0a 00                 ength %i....

00000cbb <__c.5529>:
     cbb:	4d 79 20 49 44 20 69 73 3a 20 25 30 34 58 0d 0a     My ID is: %04X..
     ccb:	00                                                  .

00000ccc <__c.5497>:
     ccc:	47 6f 74 20 61 64 6a 75 73 74 5f 6d 6f 74 6f 72     Got adjust_motor
     cdc:	73 20 63 6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63     s command. direc
     cec:	74 69 6f 6e 3a 20 25 68 75 2c 20 4e 65 77 20 53     tion: %hu, New S
     cfc:	65 74 74 69 6e 67 73 3a 20 28 25 64 2c 20 25 64     ettings: (%d, %d
     d0c:	2c 20 25 64 29 0d 0a 00                             , %d)...

00000d14 <__c.5495>:
     d14:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d24:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     d34:	6c 2e 0d 0a 00                                      l....

00000d39 <__c.5493>:
     d39:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d49:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     d59:	61 6c 2e 0d 0a 00                                   al....

00000d5f <__c.5491>:
     d5f:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     d6f:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     d7f:	6c 2e 0d 0a 00                                      l....

00000d84 <__c.5489>:
     d84:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     d94:	6f 74 3a 20 25 68 75 2e 0d 0a 00                    ot: %hu....

00000d9f <__c.5486>:
     d9f:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     daf:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     dbf:	6e 2e 0d 0a 00                                      n....

00000dc4 <__c.5476>:
     dc4:	47 6f 74 20 73 65 74 5f 6d 6f 74 6f 72 73 20 63     Got set_motors c
     dd4:	6f 6d 6d 61 6e 64 2e 20 64 69 72 65 63 74 69 6f     ommand. directio
     de4:	6e 3a 20 25 68 75 2c 20 76 61 6c 73 3a 20 28 25     n: %hu, vals: (%
     df4:	64 2c 20 25 64 2c 20 25 64 29 0d 0a 00              d, %d, %d)...

00000e01 <__c.5474>:
     e01:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e11:	4e 55 4c 4c 20 6f 6e 20 74 68 69 72 64 20 76 61     NULL on third va
     e21:	6c 2e 0d 0a 00                                      l....

00000e26 <__c.5472>:
     e26:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e36:	4e 55 4c 4c 20 6f 6e 20 73 65 63 6f 6e 64 20 76     NULL on second v
     e46:	61 6c 2e 0d 0a 00                                   al....

00000e4c <__c.5470>:
     e4c:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e5c:	4e 55 4c 4c 20 6f 6e 20 66 69 72 73 74 20 76 61     NULL on first va
     e6c:	6c 2e 0d 0a 00                                      l....

00000e71 <__c.5468>:
     e71:	42 61 64 20 64 69 72 65 63 74 69 6f 6e 2e 20 47     Bad direction. G
     e81:	6f 74 3a 20 25 68 75 2e 0d 0a 00                    ot: %hu....

00000e8c <__c.5465>:
     e8c:	73 74 72 74 6f 6b 20 72 65 74 75 72 6e 65 64 20     strtok returned 
     e9c:	4e 55 4c 4c 20 6f 6e 20 64 69 72 65 63 74 69 6f     NULL on directio
     eac:	6e 2e 0d 0a 00                                      n....

00000eb1 <__c.5446>:
     eb1:	72 3a 20 25 68 75 2c 20 67 3a 20 25 68 75 2c 20     r: %hu, g: %hu, 
     ec1:	62 3a 20 25 68 75 0d 0a 00                          b: %hu...

00000eca <__c.5431>:
     eca:	77 61 6c 6b 20 64 69 72 65 63 74 69 6f 6e 20 25     walk direction %
     eda:	68 75 2c 20 6e 75 6d 5f 73 74 65 70 73 20 25 75     hu, num_steps %u
     eea:	0d 0a 00                                            ...

00000eed <__c.5413>:
     eed:	72 5f 73 74 61 72 74 00                             r_start.

00000ef5 <__c.5411>:
     ef5:	72 65 70 72 6f 67 5f 62 65 67 69 6e 00              reprog_begin.

00000f02 <__c.5409>:
     f02:	70 72 69 6e 74 5f 6d 6f 74 6f 72 5f 73 65 74 74     print_motor_sett
     f12:	69 6e 67 73 00                                      ings.

00000f17 <__c.5407>:
     f17:	77 72 69 74 65 5f 6d 6f 74 6f 72 5f 73 65 74 74     write_motor_sett
     f27:	69 6e 67 73 00                                      ings.

00000f2c <__c.5405>:
     f2c:	72 65 73 65 74 00                                   reset.

00000f32 <__c.5403>:
     f32:	74 61 73 6b 73 00                                   tasks.

00000f38 <__c.5401>:
     f38:	74 67 74 00                                         tgt.

00000f3c <__c.5399>:
     f3c:	6d 73 67 5f 74 73 74 00                             msg_tst.

00000f44 <__c.5397>:
     f44:	6d 73 67 00                                         msg.

00000f48 <__c.5395>:
     f48:	74 67 74 5f 63 6d 64 00                             tgt_cmd.

00000f50 <__c.5393>:
     f50:	63 6d 64 00                                         cmd.

00000f54 <__c.5391>:
     f54:	62 72 6f 61 64 63 61 73 74 5f 69 64 00              broadcast_id.

00000f61 <__c.5389>:
     f61:	67 65 74 5f 69 64 00                                get_id.

00000f68 <__c.5387>:
     f68:	73 65 74 5f 6c 65 64 00                             set_led.

00000f70 <__c.5385>:
     f70:	72 6e 62 5f 62 00                                   rnb_b.

00000f76 <__c.5383>:
     f76:	73 65 74 5f 64 69 73 74 5f 70 65 72 5f 73 74 65     set_dist_per_ste
     f86:	70 00                                               p.

00000f88 <__c.5381>:
     f88:	61 64 6a 5f 6d 6f 74 6f 72 73 00                    adj_motors.

00000f93 <__c.5379>:
     f93:	73 65 74 5f 6d 6f 74 6f 72 73 00                    set_motors.

00000f9e <__c.5377>:
     f9e:	73 74 6f 70 5f 77 61 6c 6b 00                       stop_walk.

00000fa8 <__c.5375>:
     fa8:	63 6f 6c 6c 00                                      coll.

00000fad <__c.5373>:
     fad:	73 65 74 5f 69 72 00                                set_ir.

00000fb4 <__c.5371>:
     fb4:	67 65 74 5f 72 67 62 00                             get_rgb.

00000fbc <__c.5369>:
     fbc:	77 61 6c 6b 00                                      walk.

00000fc1 <__c.5367>:
     fc1:	6d 6f 76 65 5f 73 74 65 70 73 00                    move_steps.

00000fcc <CMD_NOT_RECOGNIZED_STR>:
     fcc:	09 43 6f 6d 6d 61 6e 64 20 28 20 25 73 20 29 20     .Command ( %s ) 
     fdc:	6e 6f 74 20 72 65 63 6f 67 6e 69 7a 65 64 2e 0d     not recognized..
     fec:	0a 00                                               ..

00000fee <__c.2529>:
     fee:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     ffe:	47 00                                               G.

00001000 <pstr_an>:
    1000:	61 6e 00                                            an.

00001003 <pstr_nfinity>:
    1003:	6e 66 69 6e 69 74 79 00                             nfinity.

0000100b <pwr_m10>:
    100b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    101b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001023 <pwr_p10>:
    1023:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1033:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000103c <__ctors_end>:
    103c:	11 24       	eor	r1, r1
    103e:	1f be       	out	0x3f, r1	; 63
    1040:	cf ef       	ldi	r28, 0xFF	; 255
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	df e3       	ldi	r29, 0x3F	; 63
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	00 e0       	ldi	r16, 0x00	; 0
    104a:	0c bf       	out	0x3c, r16	; 60

0000104c <__do_copy_data>:
    104c:	12 e2       	ldi	r17, 0x22	; 34
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	b0 e2       	ldi	r27, 0x20	; 32
    1052:	e8 ef       	ldi	r30, 0xF8	; 248
    1054:	f2 ea       	ldi	r31, 0xA2	; 162
    1056:	00 e0       	ldi	r16, 0x00	; 0
    1058:	0b bf       	out	0x3b, r16	; 59
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <__do_copy_data+0x14>
    105c:	07 90       	elpm	r0, Z+
    105e:	0d 92       	st	X+, r0
    1060:	ac 3d       	cpi	r26, 0xDC	; 220
    1062:	b1 07       	cpc	r27, r17
    1064:	d9 f7       	brne	.-10     	; 0x105c <__do_copy_data+0x10>

00001066 <__do_clear_bss>:
    1066:	26 e2       	ldi	r18, 0x26	; 38
    1068:	ac ed       	ldi	r26, 0xDC	; 220
    106a:	b2 e2       	ldi	r27, 0x22	; 34
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <.do_clear_bss_start>

0000106e <.do_clear_bss_loop>:
    106e:	1d 92       	st	X+, r1

00001070 <.do_clear_bss_start>:
    1070:	ab 39       	cpi	r26, 0x9B	; 155
    1072:	b2 07       	cpc	r27, r18
    1074:	e1 f7       	brne	.-8      	; 0x106e <.do_clear_bss_loop>
    1076:	0e 94 4b 0a 	call	0x1496	; 0x1496 <main>
    107a:	0c 94 7a 51 	jmp	0xa2f4	; 0xa2f4 <_exit>

0000107e <__bad_interrupt>:
    107e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001082 <getTime>:

.extern rtc_epoch
; Gets the time as an atomic operation
.global getTime
getTime:
	in		r0,_SFR_IO_ADDR(SREG)		; Save the state of the status register
    1082:	0f b6       	in	r0, 0x3f	; 63
	cli									; Disable interrupts
    1084:	f8 94       	cli
	lds		r22, RTC_CNT				; Load low byte into return value
    1086:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
	lds		r23, RTC_CNT+1
    108a:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	lds		r24, rtc_epoch				; epoch 16-bit high word
    108e:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <rtc_epoch>
	lds		r25, rtc_epoch+1
    1092:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <rtc_epoch+0x1>
	out		_SFR_IO_ADDR(SREG), r0		; Restore status register (including re-enabling interrupts if necessary)
    1096:	0f be       	out	0x3f, r0	; 63
	ret
    1098:	08 95       	ret

0000109a <loop>:


/*
 * the code in this function will be called repeatedly, as fast as it can execute.
 */
void loop(){
    109a:	08 95       	ret

0000109c <handleMsg>:

/*
 * after each pass through loop(), the robot checks for all mes sages it has 
 * received, and calls this function once for each message.
 */
void handleMsg(irMsg* msgStruct){
    109c:	08 95       	ret

0000109e <delayMS>:
#include "droplet_base.h"

void delayMS(uint16_t ms){
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	7c 01       	movw	r14, r24
	uint32_t cur_time, end_time;
	cli(); cur_time = getTime(); sei();
    10a8:	f8 94       	cli
    10aa:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    10ae:	78 94       	sei
	end_time = cur_time + ms;
    10b0:	9b 01       	movw	r18, r22
    10b2:	ac 01       	movw	r20, r24
    10b4:	2e 0d       	add	r18, r14
    10b6:	3f 1d       	adc	r19, r15
    10b8:	41 1d       	adc	r20, r1
    10ba:	51 1d       	adc	r21, r1
    10bc:	69 01       	movw	r12, r18
    10be:	7a 01       	movw	r14, r20
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <delayMS+0x2e>
		cli();
		if (getTime() >= end_time){
			sei();
			return;
		}
		sei();
    10c2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c4:	3a e6       	ldi	r19, 0x6A	; 106
    10c6:	3a 95       	dec	r19
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <delayMS+0x28>
    10ca:	00 c0       	rjmp	.+0      	; 0x10cc <delayMS+0x2e>
void delayMS(uint16_t ms){
	uint32_t cur_time, end_time;
	cli(); cur_time = getTime(); sei();
	end_time = cur_time + ms;
	while (1){
		cli();
    10cc:	f8 94       	cli
		if (getTime() >= end_time){
    10ce:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    10d2:	6c 15       	cp	r22, r12
    10d4:	7d 05       	cpc	r23, r13
    10d6:	8e 05       	cpc	r24, r14
    10d8:	9f 05       	cpc	r25, r15
    10da:	98 f3       	brcs	.-26     	; 0x10c2 <delayMS+0x24>
			sei();
    10dc:	78 94       	sei
			return;
		}
		sei();
		delay_us(10);
	}
}
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	08 95       	ret

000010e8 <handle_reprogramming>:
	
	return calc_page_number;
}

void handle_reprogramming(irMsg *msg_struct_hex)
{
    10e8:	2f 92       	push	r2
    10ea:	3f 92       	push	r3
    10ec:	4f 92       	push	r4
    10ee:	5f 92       	push	r5
    10f0:	6f 92       	push	r6
    10f2:	7f 92       	push	r7
    10f4:	8f 92       	push	r8
    10f6:	9f 92       	push	r9
    10f8:	af 92       	push	r10
    10fa:	bf 92       	push	r11
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	2a 97       	sbiw	r28, 0x0a	; 10
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	1c 01       	movw	r2, r24
		}
		printf("\r\n");
		reprogramming=0;
		dropletReboot();
		
}
    1118:	8d b7       	in	r24, 0x3d	; 61
    111a:	9e b7       	in	r25, 0x3e	; 62
    111c:	89 87       	std	Y+9, r24	; 0x09
    111e:	9a 87       	std	Y+10, r25	; 0x0a
	uint8_t Numberofbytes;
	char str[3], str1[5];
	int i=0;
	for(i=0; i<2; i++)
	{
		str[i] = msg_struct_hex->msg[i];
    1120:	d1 01       	movw	r26, r2
    1122:	16 96       	adiw	r26, 0x06	; 6
    1124:	ed 91       	ld	r30, X+
    1126:	fc 91       	ld	r31, X
    1128:	17 97       	sbiw	r26, 0x07	; 7
    112a:	80 81       	ld	r24, Z
    112c:	8e 83       	std	Y+6, r24	; 0x06
    112e:	81 81       	ldd	r24, Z+1	; 0x01
    1130:	8f 83       	std	Y+7, r24	; 0x07
	}
	str[2] = '\0';
    1132:	18 86       	std	Y+8, r1	; 0x08
	Numberofbytes = strtoul(str, NULL, 16);
    1134:	40 e1       	ldi	r20, 0x10	; 16
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	ce 01       	movw	r24, r28
    113e:	06 96       	adiw	r24, 0x06	; 6
    1140:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <strtoul>
	printf("Number of data bytes = %d\r\n", Numberofbytes);
    1144:	e6 2e       	mov	r14, r22
    1146:	f1 2c       	mov	r15, r1
    1148:	1f 92       	push	r1
    114a:	6f 93       	push	r22
    114c:	87 e7       	ldi	r24, 0x77	; 119
    114e:	90 e2       	ldi	r25, 0x20	; 32
    1150:	9f 93       	push	r25
    1152:	8f 93       	push	r24
    1154:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
    1158:	f1 01       	movw	r30, r2
    115a:	a6 81       	ldd	r26, Z+6	; 0x06
    115c:	b7 81       	ldd	r27, Z+7	; 0x07
    115e:	12 96       	adiw	r26, 0x02	; 2
    1160:	fe 01       	movw	r30, r28
    1162:	31 96       	adiw	r30, 0x01	; 1
    1164:	9e 01       	movw	r18, r28
    1166:	2b 5f       	subi	r18, 0xFB	; 251
    1168:	3f 4f       	sbci	r19, 0xFF	; 255
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
	for(i=2; i<6; i++)
	{
		str1[i-2] = msg_struct_hex->msg[i];
    1172:	8d 91       	ld	r24, X+
    1174:	81 93       	st	Z+, r24
		str[i] = msg_struct_hex->msg[i];
	}
	str[2] = '\0';
	Numberofbytes = strtoul(str, NULL, 16);
	printf("Number of data bytes = %d\r\n", Numberofbytes);
	for(i=2; i<6; i++)
    1176:	e2 17       	cp	r30, r18
    1178:	f3 07       	cpc	r31, r19
    117a:	d9 f7       	brne	.-10     	; 0x1172 <handle_reprogramming+0x8a>
	{
		str1[i-2] = msg_struct_hex->msg[i];
	}
	str1[4] = '\0';
    117c:	1d 82       	std	Y+5, r1	; 0x05
	 startaddr[0] = strtoul(str1, NULL, 16);
    117e:	40 e1       	ldi	r20, 0x10	; 16
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	ce 01       	movw	r24, r28
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <strtoul>
    118e:	2b 01       	movw	r4, r22
    1190:	3c 01       	movw	r6, r24
	 uint16_t addrstart = startaddr[0];
	printf("page start : %u\n",addrstart);
    1192:	5f 92       	push	r5
    1194:	6f 93       	push	r22
    1196:	83 e9       	ldi	r24, 0x93	; 147
    1198:	90 e2       	ldi	r25, 0x20	; 32
    119a:	9f 93       	push	r25
    119c:	8f 93       	push	r24
    119e:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
	
	uint8_t FlashBuffer[Numberofbytes];
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	8d b7       	in	r24, 0x3d	; 61
    11ac:	9e b7       	in	r25, 0x3e	; 62
    11ae:	8e 19       	sub	r24, r14
    11b0:	9f 09       	sbc	r25, r15
    11b2:	8d bf       	out	0x3d, r24	; 61
    11b4:	9e bf       	out	0x3e, r25	; 62
    11b6:	ad b7       	in	r26, 0x3d	; 61
    11b8:	be b7       	in	r27, 0x3e	; 62
    11ba:	11 96       	adiw	r26, 0x01	; 1
    11bc:	5d 01       	movw	r10, r26
    11be:	66 24       	eor	r6, r6
    11c0:	77 24       	eor	r7, r7
	uint32_t targetAddr =addrstart;
	nvm_flash_read_buffer(targetAddr, FlashBuffer, Numberofbytes);
    11c2:	97 01       	movw	r18, r14
    11c4:	ad 01       	movw	r20, r26
    11c6:	c3 01       	movw	r24, r6
    11c8:	b2 01       	movw	r22, r4
    11ca:	0e 94 67 22 	call	0x44ce	; 0x44ce <nvm_flash_read_buffer>
	for(int j=0; j<Numberofbytes; j++)
    11ce:	e1 14       	cp	r14, r1
    11d0:	f1 04       	cpc	r15, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <handle_reprogramming+0xee>
    11d4:	cc c0       	rjmp	.+408    	; 0x136e <handle_reprogramming+0x286>
    11d6:	85 01       	movw	r16, r10
    11d8:	45 01       	movw	r8, r10
    11da:	8e 0c       	add	r8, r14
    11dc:	9f 1c       	adc	r9, r15
	{
		printf("%02hx ", FlashBuffer[j]);
    11de:	44 ea       	ldi	r20, 0xA4	; 164
    11e0:	c4 2e       	mov	r12, r20
    11e2:	40 e2       	ldi	r20, 0x20	; 32
    11e4:	d4 2e       	mov	r13, r20
    11e6:	f8 01       	movw	r30, r16
    11e8:	81 91       	ld	r24, Z+
    11ea:	8f 01       	movw	r16, r30
    11ec:	1f 92       	push	r1
    11ee:	8f 93       	push	r24
    11f0:	df 92       	push	r13
    11f2:	cf 92       	push	r12
    11f4:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
	printf("page start : %u\n",addrstart);
	
	uint8_t FlashBuffer[Numberofbytes];
	uint32_t targetAddr =addrstart;
	nvm_flash_read_buffer(targetAddr, FlashBuffer, Numberofbytes);
	for(int j=0; j<Numberofbytes; j++)
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	80 16       	cp	r8, r16
    1202:	91 06       	cpc	r9, r17
    1204:	81 f7       	brne	.-32     	; 0x11e6 <handle_reprogramming+0xfe>
	{
		printf("%02hx ", FlashBuffer[j]);

	}
	printf("\r\n");
    1206:	8a ec       	ldi	r24, 0xCA	; 202
    1208:	90 e2       	ldi	r25, 0x20	; 32
    120a:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
	
	
	// keep on filling the buffer
	for(uint8_t i=6;i<(6+(2*Numberofbytes));i+=2)    // 0-5 are length and address, the last two char (1 byte) is for checksum
    120e:	87 01       	movw	r16, r14
    1210:	0d 5f       	subi	r16, 0xFD	; 253
    1212:	1f 4f       	sbci	r17, 0xFF	; 255
    1214:	00 0f       	add	r16, r16
    1216:	11 1f       	adc	r17, r17
    1218:	d0 90 de 22 	lds	r13, 0x22DE	; 0x8022de <flashBufferPos>
    121c:	26 e0       	ldi	r18, 0x06	; 6
    121e:	c2 2e       	mov	r12, r18
    1220:	86 e0       	ldi	r24, 0x06	; 6
    1222:	90 e0       	ldi	r25, 0x00	; 0
	{
		//convert pair of chars to byte.
		str[0] = msg_struct_hex->msg[i];
    1224:	d1 01       	movw	r26, r2
    1226:	16 96       	adiw	r26, 0x06	; 6
    1228:	ed 91       	ld	r30, X+
    122a:	fc 91       	ld	r31, X
    122c:	17 97       	sbiw	r26, 0x07	; 7
    122e:	e8 0f       	add	r30, r24
    1230:	f9 1f       	adc	r31, r25
    1232:	80 81       	ld	r24, Z
    1234:	8e 83       	std	Y+6, r24	; 0x06
		str[1] = msg_struct_hex->msg[i+1];
    1236:	81 81       	ldd	r24, Z+1	; 0x01
    1238:	8f 83       	std	Y+7, r24	; 0x07
		str[2] = '\0';
    123a:	18 86       	std	Y+8, r1	; 0x08
		FlashBuffer[flashBufferPos] = strtoul(str, NULL, 16);
    123c:	40 e1       	ldi	r20, 0x10	; 16
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	ce 01       	movw	r24, r28
    1246:	06 96       	adiw	r24, 0x06	; 6
    1248:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <strtoul>
    124c:	f5 01       	movw	r30, r10
    124e:	ed 0d       	add	r30, r13
    1250:	f1 1d       	adc	r31, r1
    1252:	60 83       	st	Z, r22
		flashBufferPos = flashBufferPos + 1;
    1254:	d0 90 de 22 	lds	r13, 0x22DE	; 0x8022de <flashBufferPos>
    1258:	d3 94       	inc	r13
    125a:	d0 92 de 22 	sts	0x22DE, r13	; 0x8022de <flashBufferPos>
	}
	printf("\r\n");
	
	
	// keep on filling the buffer
	for(uint8_t i=6;i<(6+(2*Numberofbytes));i+=2)    // 0-5 are length and address, the last two char (1 byte) is for checksum
    125e:	c3 94       	inc	r12
    1260:	c3 94       	inc	r12
    1262:	8c 2d       	mov	r24, r12
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	80 17       	cp	r24, r16
    1268:	91 07       	cpc	r25, r17
    126a:	e4 f2       	brlt	.-72     	; 0x1224 <handle_reprogramming+0x13c>
	
	FlashBuffer[3]=0xE0;*/
	
	
	
	printf("Printing written FlashBuffer:\r\n\r\n");
    126c:	8b ea       	ldi	r24, 0xAB	; 171
    126e:	90 e2       	ldi	r25, 0x20	; 32
    1270:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
	for(int l=0; l<Numberofbytes; l++)
    1274:	e1 14       	cp	r14, r1
    1276:	f1 04       	cpc	r15, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <handle_reprogramming+0x194>
    127a:	81 c0       	rjmp	.+258    	; 0x137e <handle_reprogramming+0x296>
    127c:	15 01       	movw	r2, r10
    127e:	65 01       	movw	r12, r10
    1280:	00 e0       	ldi	r16, 0x00	; 0
    1282:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("%02hx ", FlashBuffer[l]);
    1284:	34 ea       	ldi	r19, 0xA4	; 164
    1286:	83 2e       	mov	r8, r19
    1288:	30 e2       	ldi	r19, 0x20	; 32
    128a:	93 2e       	mov	r9, r19
    128c:	f6 01       	movw	r30, r12
    128e:	81 91       	ld	r24, Z+
    1290:	6f 01       	movw	r12, r30
    1292:	1f 92       	push	r1
    1294:	8f 93       	push	r24
    1296:	9f 92       	push	r9
    1298:	8f 92       	push	r8
    129a:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
	FlashBuffer[3]=0xE0;*/
	
	
	
	printf("Printing written FlashBuffer:\r\n\r\n");
	for(int l=0; l<Numberofbytes; l++)
    129e:	0f 5f       	subi	r16, 0xFF	; 255
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0e 15       	cp	r16, r14
    12ac:	1f 05       	cpc	r17, r15
    12ae:	74 f3       	brlt	.-36     	; 0x128c <handle_reprogramming+0x1a4>
	{
		printf("%02hx ", FlashBuffer[l]);
	
	}
	printf("\r\n");
    12b0:	8a ec       	ldi	r24, 0xCA	; 202
    12b2:	90 e2       	ldi	r25, 0x20	; 32
    12b4:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
	
		printf("About to write. Address: %lu\r\n\r\n\r\n", targetAddr);
    12b8:	7f 92       	push	r7
    12ba:	6f 92       	push	r6
    12bc:	5f 92       	push	r5
    12be:	4f 92       	push	r4
    12c0:	8c ec       	ldi	r24, 0xCC	; 204
    12c2:	90 e2       	ldi	r25, 0x20	; 32
    12c4:	9f 93       	push	r25
    12c6:	8f 93       	push	r24
    12c8:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
		nvm_flash_erase_and_write_buffer(targetAddr, FlashBuffer, Numberofbytes, 1);
    12cc:	01 e0       	ldi	r16, 0x01	; 1
    12ce:	97 01       	movw	r18, r14
    12d0:	a5 01       	movw	r20, r10
    12d2:	c3 01       	movw	r24, r6
    12d4:	b2 01       	movw	r22, r4
    12d6:	0e 94 7e 22 	call	0x44fc	; 0x44fc <nvm_flash_erase_and_write_buffer>
		
		nvm_flash_read_buffer(targetAddr, FlashBuffer, 4);
    12da:	24 e0       	ldi	r18, 0x04	; 4
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	a5 01       	movw	r20, r10
    12e0:	c3 01       	movw	r24, r6
    12e2:	b2 01       	movw	r22, r4
    12e4:	0e 94 67 22 	call	0x44ce	; 0x44ce <nvm_flash_read_buffer>
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	00 e0       	ldi	r16, 0x00	; 0
    12f6:	10 e0       	ldi	r17, 0x00	; 0
		for(int j=0; j<Numberofbytes; j++)
		{
			printf("%02hx ", FlashBuffer[j]);
    12f8:	84 ea       	ldi	r24, 0xA4	; 164
    12fa:	c8 2e       	mov	r12, r24
    12fc:	80 e2       	ldi	r24, 0x20	; 32
    12fe:	d8 2e       	mov	r13, r24
    1300:	d1 01       	movw	r26, r2
    1302:	8d 91       	ld	r24, X+
    1304:	1d 01       	movw	r2, r26
    1306:	1f 92       	push	r1
    1308:	8f 93       	push	r24
    130a:	df 92       	push	r13
    130c:	cf 92       	push	r12
    130e:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
	
		printf("About to write. Address: %lu\r\n\r\n\r\n", targetAddr);
		nvm_flash_erase_and_write_buffer(targetAddr, FlashBuffer, Numberofbytes, 1);
		
		nvm_flash_read_buffer(targetAddr, FlashBuffer, 4);
		for(int j=0; j<Numberofbytes; j++)
    1312:	0f 5f       	subi	r16, 0xFF	; 255
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0e 15       	cp	r16, r14
    1320:	1f 05       	cpc	r17, r15
    1322:	74 f3       	brlt	.-36     	; 0x1300 <handle_reprogramming+0x218>
		{
			printf("%02hx ", FlashBuffer[j]);
		}
		printf("\r\n");
    1324:	8a ec       	ldi	r24, 0xCA	; 202
    1326:	90 e2       	ldi	r25, 0x20	; 32
    1328:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
		reprogramming=0;
    132c:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <reprogramming>

/**
 * \brief Resets the Droplet's program counter and clears all low-level system buffers.
 */
inline void dropletReboot(void){
	CPU_CCP=CCP_IOREG_gc;
    1330:	88 ed       	ldi	r24, 0xD8	; 216
    1332:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		dropletReboot();
		
}
    133a:	e9 85       	ldd	r30, Y+9	; 0x09
    133c:	fa 85       	ldd	r31, Y+10	; 0x0a
    133e:	ed bf       	out	0x3d, r30	; 61
    1340:	fe bf       	out	0x3e, r31	; 62
    1342:	2a 96       	adiw	r28, 0x0a	; 10
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	bf 90       	pop	r11
    135a:	af 90       	pop	r10
    135c:	9f 90       	pop	r9
    135e:	8f 90       	pop	r8
    1360:	7f 90       	pop	r7
    1362:	6f 90       	pop	r6
    1364:	5f 90       	pop	r5
    1366:	4f 90       	pop	r4
    1368:	3f 90       	pop	r3
    136a:	2f 90       	pop	r2
    136c:	08 95       	ret
	for(int j=0; j<Numberofbytes; j++)
	{
		printf("%02hx ", FlashBuffer[j]);

	}
	printf("\r\n");
    136e:	8a ec       	ldi	r24, 0xCA	; 202
    1370:	90 e2       	ldi	r25, 0x20	; 32
    1372:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
	
	FlashBuffer[3]=0xE0;*/
	
	
	
	printf("Printing written FlashBuffer:\r\n\r\n");
    1376:	8b ea       	ldi	r24, 0xAB	; 171
    1378:	90 e2       	ldi	r25, 0x20	; 32
    137a:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
	for(int l=0; l<Numberofbytes; l++)
	{
		printf("%02hx ", FlashBuffer[l]);
	
	}
	printf("\r\n");
    137e:	8a ec       	ldi	r24, 0xCA	; 202
    1380:	90 e2       	ldi	r25, 0x20	; 32
    1382:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
	
		printf("About to write. Address: %lu\r\n\r\n\r\n", targetAddr);
    1386:	7f 92       	push	r7
    1388:	6f 92       	push	r6
    138a:	5f 92       	push	r5
    138c:	4f 92       	push	r4
    138e:	8c ec       	ldi	r24, 0xCC	; 204
    1390:	90 e2       	ldi	r25, 0x20	; 32
    1392:	9f 93       	push	r25
    1394:	8f 93       	push	r24
    1396:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
		nvm_flash_erase_and_write_buffer(targetAddr, FlashBuffer, Numberofbytes, 1);
    139a:	01 e0       	ldi	r16, 0x01	; 1
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	a5 01       	movw	r20, r10
    13a2:	c3 01       	movw	r24, r6
    13a4:	b2 01       	movw	r22, r4
    13a6:	0e 94 7e 22 	call	0x44fc	; 0x44fc <nvm_flash_erase_and_write_buffer>
		
		nvm_flash_read_buffer(targetAddr, FlashBuffer, 4);
    13aa:	24 e0       	ldi	r18, 0x04	; 4
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	a5 01       	movw	r20, r10
    13b0:	c3 01       	movw	r24, r6
    13b2:	b2 01       	movw	r22, r4
    13b4:	0e 94 67 22 	call	0x44ce	; 0x44ce <nvm_flash_read_buffer>
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	af cf       	rjmp	.-162    	; 0x1324 <handle_reprogramming+0x23c>

000013c6 <send_hex>:
		
}

void send_hex(void)
{
	uint8_t len = strlen(dataHEX);
    13c6:	e4 eb       	ldi	r30, 0xB4	; 180
    13c8:	f4 e2       	ldi	r31, 0x24	; 36
    13ca:	01 90       	ld	r0, Z+
    13cc:	00 20       	and	r0, r0
    13ce:	e9 f7       	brne	.-6      	; 0x13ca <send_hex+0x4>
    13d0:	31 97       	sbiw	r30, 0x01	; 1
    13d2:	af 01       	movw	r20, r30
    13d4:	44 5b       	subi	r20, 0xB4	; 180
    13d6:	54 42       	sbci	r21, 0x24	; 36
	irSend(ALL_DIRS,dataHEX,len);
    13d8:	64 eb       	ldi	r22, 0xB4	; 180
    13da:	74 e2       	ldi	r23, 0x24	; 36
    13dc:	8f e3       	ldi	r24, 0x3F	; 63
    13de:	0e 94 1f 14 	call	0x283e	; 0x283e <irSend>
	
	waitForTransmission(ALL_DIRS);
    13e2:	8f e3       	ldi	r24, 0x3F	; 63
    13e4:	0c 94 bf 12 	jmp	0x257e	; 0x257e <waitForTransmission>

000013e8 <startupLightSequence>:
	PMIC.CTRL |= PMIC_RREN_bm;
	sei();
}

void startupLightSequence(){
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	84 e6       	ldi	r24, 0x64	; 100
    13ee:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    13f2:	84 e6       	ldi	r24, 0x64	; 100
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	64 e6       	ldi	r22, 0x64	; 100
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    1404:	84 e6       	ldi	r24, 0x64	; 100
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    140c:	44 e6       	ldi	r20, 0x64	; 100
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    1416:	84 e6       	ldi	r24, 0x64	; 100
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    141e:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <ledOff>
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	84 e6       	ldi	r24, 0x64	; 100
    1428:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    142c:	84 e6       	ldi	r24, 0x64	; 100
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	64 e6       	ldi	r22, 0x64	; 100
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    143e:	84 e6       	ldi	r24, 0x64	; 100
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    1446:	44 e6       	ldi	r20, 0x64	; 100
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    1450:	84 e6       	ldi	r24, 0x64	; 100
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    1458:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <ledOff>
	setRGB(100,0,0); delayMS(100); setRGB(0,100,0); delayMS(100); setRGB(0,0,100); delayMS(100); ledOff();
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	84 e6       	ldi	r24, 0x64	; 100
    1462:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    1466:	84 e6       	ldi	r24, 0x64	; 100
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	64 e6       	ldi	r22, 0x64	; 100
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    1478:	84 e6       	ldi	r24, 0x64	; 100
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    1480:	44 e6       	ldi	r20, 0x64	; 100
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    148a:	84 e6       	ldi	r24, 0x64	; 100
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    1492:	0c 94 63 2f 	jmp	0x5ec6	; 0x5ec6 <ledOff>

00001496 <main>:
	startupLightSequence();
	
	irCommInit();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
}

int main(void){
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	c0 54       	subi	r28, 0x40	; 64
    14a0:	d1 09       	sbc	r29, r1
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	de bf       	out	0x3e, r29	; 62
/**
 * \brief Initializes all the subsystems for this Droplet. This function MUST be called
 * by the user before using any other functions in the API.
 */ 
static void initAllSystems(void){
	cli();
    14a6:	f8 94       	cli
	}
}

inline void Config32MHzClock(void){
	// Set system clock to 32 MHz
	CCP = CCP_IOREG_gc;
    14a8:	88 ed       	ldi	r24, 0xD8	; 216
    14aa:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    14b2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    14b6:	81 ff       	sbrs	r24, 1
    14b8:	fc cf       	rjmp	.-8      	; 0x14b2 <main+0x1c>
	CCP = CCP_IOREG_gc;
    14ba:	88 ed       	ldi	r24, 0xD8	; 216
    14bc:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	//OSC.RC32KCAL = PRODSIGNATURES_RCOSC32K;
	// Set up real-time clock
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    14c4:	85 e0       	ldi	r24, 0x05	; 5
    14c6:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	while (RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    14ca:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    14ce:	80 fd       	sbrc	r24, 0
    14d0:	fc cf       	rjmp	.-8      	; 0x14ca <main+0x34>
	
	RTC.PER = 0xFFFF;		//(2^16)-1 milliseconds is 65.535 seconds
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	9f ef       	ldi	r25, 0xFF	; 255
    14d6:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    14da:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>

	// reset RTC to 0, important for after a reboot:
	while(RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    14e4:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    14e8:	80 fd       	sbrc	r24, 0
    14ea:	fc cf       	rjmp	.-8      	; 0x14e4 <main+0x4e>
	RTC.CNT = 0;
    14ec:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    14f0:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
	uint16_t crc = 0;
	
	// calculate local id
	// simply crc of user sig row
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};
    14fa:	80 e4       	ldi	r24, 0x40	; 64
    14fc:	e0 e2       	ldi	r30, 0x20	; 32
    14fe:	f0 e2       	ldi	r31, 0x20	; 32
    1500:	de 01       	movw	r26, r28
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	01 90       	ld	r0, Z+
    1506:	0d 92       	st	X+, r0
    1508:	8a 95       	dec	r24
    150a:	e1 f7       	brne	.-8      	; 0x1504 <main+0x6e>
    150c:	de 01       	movw	r26, r28
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	9e 01       	movw	r18, r28
    1512:	2f 5b       	subi	r18, 0xBF	; 191
    1514:	3f 4f       	sbci	r19, 0xFF	; 255
}
static void calculateIdNumber(void){
	INIT_DEBUG_PRINT("get id number\r\n");

	uint32_t pgm_bytes = 0;
	uint16_t crc = 0;
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++){
		pgm_bytes = pgm_read_word_far(addrs[i]);
    151a:	4d 91       	ld	r20, X+
    151c:	5d 91       	ld	r21, X+
    151e:	6d 91       	ld	r22, X+
    1520:	7d 91       	ld	r23, X+
    1522:	6b bf       	out	0x3b, r22	; 59
    1524:	fa 01       	movw	r30, r20
    1526:	47 91       	elpm	r20, Z+
    1528:	56 91       	elpm	r21, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    152a:	84 27       	eor	r24, r20
    152c:	48 2f       	mov	r20, r24
    152e:	42 95       	swap	r20
    1530:	48 27       	eor	r20, r24
    1532:	04 2e       	mov	r0, r20
    1534:	46 95       	lsr	r20
    1536:	46 95       	lsr	r20
    1538:	40 25       	eor	r20, r0
    153a:	04 2e       	mov	r0, r20
    153c:	46 95       	lsr	r20
    153e:	40 25       	eor	r20, r0
    1540:	47 70       	andi	r20, 0x07	; 7
    1542:	08 2e       	mov	r0, r24
    1544:	89 2f       	mov	r24, r25
    1546:	46 95       	lsr	r20
    1548:	07 94       	ror	r0
    154a:	47 95       	ror	r20
    154c:	90 2d       	mov	r25, r0
    154e:	84 27       	eor	r24, r20
    1550:	06 94       	lsr	r0
    1552:	47 95       	ror	r20
    1554:	90 25       	eor	r25, r0
    1556:	84 27       	eor	r24, r20
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++){
    1558:	2a 17       	cp	r18, r26
    155a:	3b 07       	cpc	r19, r27
    155c:	f1 f6       	brne	.-68     	; 0x151a <main+0x84>
		pgm_bytes = pgm_read_word_far(addrs[i]);
		crc = _crc16_update(crc, (uint16_t)(pgm_bytes&0xFF));
	}

	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    155e:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	droplet_ID = crc;
    1562:	80 93 6a 24 	sts	0x246A, r24	; 0x80246a <droplet_ID>
    1566:	90 93 6b 24 	sts	0x246B, r25	; 0x80246b <droplet_ID+0x1>
	cli();
	Config32MHzClock();
	
	calculateIdNumber();
	
	schedulerInit();			INIT_DEBUG_PRINT("SCHEDULER INIT\r\n");
    156a:	0e 94 24 33 	call	0x6648	; 0x6648 <schedulerInit>
	pcCommInit();				INIT_DEBUG_PRINT("PC COM INIT\r\n");
    156e:	0e 94 56 23 	call	0x46ac	; 0x46ac <pcCommInit>
	rgbLEDinit();				INIT_DEBUG_PRINT("LED INIT\r\n");
    1572:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <rgbLEDinit>
	powerInit();				INIT_DEBUG_PRINT("POWER INIT\r\n");
    1576:	0e 94 46 24 	call	0x488c	; 0x488c <powerInit>
	i2cInit();					INIT_DEBUG_PRINT("I2C INIT\r\n");
    157a:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <i2cInit>

	droplet_ID = crc;
}

static void enableInterrupts(void){
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// enable low level interrupts
    157e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1582:	81 60       	ori	r24, 0x01	; 1
    1584:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// enable medium level interrupts	(e.g. TXCIF)
    1588:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    158c:	82 60       	ori	r24, 0x02	; 2
    158e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// enable high level interrupts		(e.g. RTC_OVF)
    1592:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1596:	84 60       	ori	r24, 0x04	; 4
    1598:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	PMIC.CTRL |= PMIC_RREN_bm;
    159c:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    15a0:	80 68       	ori	r24, 0x80	; 128
    15a2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    15a6:	78 94       	sei
	powerInit();				INIT_DEBUG_PRINT("POWER INIT\r\n");
	i2cInit();					INIT_DEBUG_PRINT("I2C INIT\r\n");
	
	enableInterrupts();	
	
	rangeAlgsInit();			INIT_DEBUG_PRINT("RANGE ALGORITHMS INIT\r\n");
    15a8:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <rangeAlgsInit>
	rgbSensorInit();			INIT_DEBUG_PRINT("RGB SENSE INIT\r\n");
    15ac:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <rgbSensorInit>
	irLedInit();				INIT_DEBUG_PRINT("IR LED INIT\r\n");
    15b0:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <irLedInit>
	irSensorInit();			INIT_DEBUG_PRINT("IR SENSE INIT\r\n");
    15b4:	0e 94 82 1c 	call	0x3904	; 0x3904 <irSensorInit>
	#ifdef AUDIO_DROPLET
		speakerInit();			INIT_DEBUG_PRINT("SPEAKER INIT\r\n");
		micInit();				INIT_DEBUG_PRINT("MIC INIT\r\n"); //Must occur after ir_sensor_init.
	#endif
	
	motorInit();				INIT_DEBUG_PRINT("MOTOR INIT\r\n");
    15b8:	0e 94 5e 21 	call	0x42bc	; 0x42bc <motorInit>
	randomInit();				INIT_DEBUG_PRINT("RAND INIT\r\n"); //This uses adc readings for a random seed, and so requires that the adcs have been initialized.
    15bc:	0e 94 67 24 	call	0x48ce	; 0x48ce <randomInit>
	localizationInit();		INIT_DEBUG_PRINT("LOCALIZATION INIT\r\n"); 
    15c0:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <localizationInit>
	
	#ifdef SYNCHRONIZED
		fireflySyncInit();
    15c4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <fireflySyncInit>
	#endif

	reprogramming = 0;
    15c8:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <reprogramming>
	
	setAllirPowers(256);
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	0e 94 1f 1c 	call	0x383e	; 0x383e <setAllirPowers>

	startupLightSequence();
    15d4:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <startupLightSequence>
	
	irCommInit();				INIT_DEBUG_PRINT("IR COM INIT\r\n");
    15d8:	0e 94 35 11 	call	0x226a	; 0x226a <irCommInit>
}

int main(void){
	initAllSystems();
	init();
    15dc:	0e 94 00 60 	call	0xc000	; 0xc000 <init>
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    15e0:	88 e7       	ldi	r24, 0x78	; 120
    15e2:	28 2e       	mov	r2, r24
    15e4:	84 e0       	ldi	r24, 0x04	; 4
    15e6:	38 2e       	mov	r3, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    15e8:	90 e5       	ldi	r25, 0x50	; 80
    15ea:	89 2e       	mov	r8, r25
    15ec:	94 e0       	ldi	r25, 0x04	; 4
    15ee:	99 2e       	mov	r9, r25
	init();
	while(1){
		loop();
		checkMessages();
		if(taskListCheck()){
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    15f0:	21 ee       	ldi	r18, 0xE1	; 225
    15f2:	42 2e       	mov	r4, r18
    15f4:	24 e0       	ldi	r18, 0x04	; 4
    15f6:	52 2e       	mov	r5, r18

int main(void){
	initAllSystems();
	init();
	while(1){
		loop();
    15f8:	0e 94 4d 08 	call	0x109a	; 0x109a <loop>
 * For each message, it populates an ir_msg struct and calls handle_msg with it.
 */
static void checkMessages(void){
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
    15fc:	80 91 49 26 	lds	r24, 0x2649	; 0x802649 <userFacingMessagesOvf>
    1600:	81 11       	cpse	r24, r1
    1602:	a2 c0       	rjmp	.+324    	; 0x1748 <main+0x2b2>
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
    1604:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1606:	f8 94       	cli
		uint16_t crc;
		while(incomingMsgHead != NULL){
    1608:	00 91 7b 26 	lds	r16, 0x267B	; 0x80267b <incomingMsgHead>
    160c:	10 91 7c 26 	lds	r17, 0x267C	; 0x80267c <incomingMsgHead+0x1>
    1610:	01 15       	cp	r16, r1
    1612:	11 05       	cpc	r17, r1
    1614:	09 f4       	brne	.+2      	; 0x1618 <main+0x182>
    1616:	87 c0       	rjmp	.+270    	; 0x1726 <main+0x290>
    1618:	ad b6       	in	r10, 0x3d	; 61
    161a:	be b6       	in	r11, 0x3e	; 62
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
    161c:	d8 01       	movw	r26, r16
    161e:	1c 96       	adiw	r26, 0x0c	; 12
    1620:	4c 91       	ld	r20, X
    1622:	44 23       	and	r20, r20
    1624:	09 f4       	brne	.+2      	; 0x1628 <main+0x192>
    1626:	c2 c0       	rjmp	.+388    	; 0x17ac <main+0x316>
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
			}
			char msgData[node->length];
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	8d b7       	in	r24, 0x3d	; 61
    162c:	9e b7       	in	r25, 0x3e	; 62
    162e:	84 1b       	sub	r24, r20
    1630:	95 0b       	sbc	r25, r21
    1632:	8d bf       	out	0x3d, r24	; 61
    1634:	9e bf       	out	0x3e, r25	; 62
    1636:	ad b7       	in	r26, 0x3d	; 61
    1638:	be b7       	in	r27, 0x3e	; 62
    163a:	11 96       	adiw	r26, 0x01	; 1
    163c:	7d 01       	movw	r14, r26
			memcpy(msgData, node->msg, node->length);
    163e:	f8 01       	movw	r30, r16
    1640:	60 85       	ldd	r22, Z+8	; 0x08
    1642:	71 85       	ldd	r23, Z+9	; 0x09
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <memcpy>
			msgStruct.msg			= msgData;
    164a:	ef 82       	std	Y+7, r14	; 0x07
    164c:	f8 86       	std	Y+8, r15	; 0x08
			msgStruct.arrivalTime	= node->arrivalTime;
    164e:	f8 01       	movw	r30, r16
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	a2 81       	ldd	r26, Z+2	; 0x02
    1656:	b3 81       	ldd	r27, Z+3	; 0x03
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	ab 83       	std	Y+3, r26	; 0x03
    165e:	bc 83       	std	Y+4, r27	; 0x04
			msgStruct.senderID		= node->senderID;
    1660:	84 81       	ldd	r24, Z+4	; 0x04
    1662:	95 81       	ldd	r25, Z+5	; 0x05
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	9e 83       	std	Y+6, r25	; 0x06
			msgStruct.length		= node->length;
    1668:	84 85       	ldd	r24, Z+12	; 0x0c
    166a:	89 87       	std	Y+9, r24	; 0x09
			crc						= node->crc;
    166c:	c6 80       	ldd	r12, Z+6	; 0x06
    166e:	d7 80       	ldd	r13, Z+7	; 0x07
			//While we let user code handle the message we want interrupts to be back on. At this point everything relevant has been copied out of the buffer.
			NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){
    1670:	ff b6       	in	r15, 0x3f	; 63

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    1672:	78 94       	sei
				if(reprogramming)
    1674:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <reprogramming>
    1678:	88 23       	and	r24, r24
    167a:	09 f4       	brne	.+2      	; 0x167e <main+0x1e8>
    167c:	71 c0       	rjmp	.+226    	; 0x1760 <main+0x2ca>
				{
					setRGB(0,0,250);
    167e:	4a ef       	ldi	r20, 0xFA	; 250
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
					//handle_serial_comm(&msgStruct);
					handle_reprogramming(&msgStruct);
    1688:	ce 01       	movw	r24, r28
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <handle_reprogramming>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1690:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    1692:	78 01       	movw	r14, r16
				else handleMsg(&msgStruct);
			}
			
			MsgNode* tmp = node;
			MsgNode* deleteMe;
			while(tmp->next !=NULL){
    1694:	d7 01       	movw	r26, r14
    1696:	1a 96       	adiw	r26, 0x0a	; 10
    1698:	ed 91       	ld	r30, X+
    169a:	fc 91       	ld	r31, X
    169c:	1b 97       	sbiw	r26, 0x0b	; 11
    169e:	30 97       	sbiw	r30, 0x00	; 0
    16a0:	d1 f0       	breq	.+52     	; 0x16d6 <main+0x240>
				uint8_t crcMatches = (tmp->next->crc == crc);
				uint8_t closeTimes = (abs((int32_t)(tmp->next->arrivalTime) - (int32_t)(msgStruct.arrivalTime))) < 30;
    16a2:	80 81       	ld	r24, Z
    16a4:	91 81       	ldd	r25, Z+1	; 0x01
    16a6:	29 81       	ldd	r18, Y+1	; 0x01
    16a8:	3a 81       	ldd	r19, Y+2	; 0x02
    16aa:	82 1b       	sub	r24, r18
    16ac:	93 0b       	sbc	r25, r19
    16ae:	83 3e       	cpi	r24, 0xE3	; 227
    16b0:	2f ef       	ldi	r18, 0xFF	; 255
    16b2:	92 07       	cpc	r25, r18
    16b4:	44 f0       	brlt	.+16     	; 0x16c6 <main+0x230>
    16b6:	4e 97       	sbiw	r24, 0x1e	; 30
    16b8:	34 f4       	brge	.+12     	; 0x16c6 <main+0x230>
				if(crcMatches && closeTimes){
    16ba:	86 81       	ldd	r24, Z+6	; 0x06
    16bc:	97 81       	ldd	r25, Z+7	; 0x07
    16be:	c8 16       	cp	r12, r24
    16c0:	d9 06       	cpc	r13, r25
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <main+0x230>
    16c4:	52 c0       	rjmp	.+164    	; 0x176a <main+0x2d4>
    16c6:	7f 01       	movw	r14, r30
				else handleMsg(&msgStruct);
			}
			
			MsgNode* tmp = node;
			MsgNode* deleteMe;
			while(tmp->next !=NULL){
    16c8:	d7 01       	movw	r26, r14
    16ca:	1a 96       	adiw	r26, 0x0a	; 10
    16cc:	ed 91       	ld	r30, X+
    16ce:	fc 91       	ld	r31, X
    16d0:	1b 97       	sbiw	r26, 0x0b	; 11
    16d2:	30 97       	sbiw	r30, 0x00	; 0
    16d4:	31 f7       	brne	.-52     	; 0x16a2 <main+0x20c>
				}else{
					tmp = tmp->next;
				}

			}
			incomingMsgHead = (volatile MsgNode*)(node->next);
    16d6:	f8 01       	movw	r30, r16
    16d8:	82 85       	ldd	r24, Z+10	; 0x0a
    16da:	93 85       	ldd	r25, Z+11	; 0x0b
    16dc:	80 93 7b 26 	sts	0x267B, r24	; 0x80267b <incomingMsgHead>
    16e0:	90 93 7c 26 	sts	0x267C, r25	; 0x80267c <incomingMsgHead+0x1>
			numWaitingMsgs--;
    16e4:	80 91 f6 24 	lds	r24, 0x24F6	; 0x8024f6 <numWaitingMsgs>
    16e8:	81 50       	subi	r24, 0x01	; 1
    16ea:	80 93 f6 24 	sts	0x24F6, r24	; 0x8024f6 <numWaitingMsgs>
			memoryConsumedByBuffer -= (sizeof(MsgNode) + msgStruct.length);
    16ee:	80 91 a1 24 	lds	r24, 0x24A1	; 0x8024a1 <memoryConsumedByBuffer>
    16f2:	90 91 a2 24 	lds	r25, 0x24A2	; 0x8024a2 <memoryConsumedByBuffer+0x1>
    16f6:	0d 97       	sbiw	r24, 0x0d	; 13
    16f8:	29 85       	ldd	r18, Y+9	; 0x09
    16fa:	82 1b       	sub	r24, r18
    16fc:	91 09       	sbc	r25, r1
    16fe:	80 93 a1 24 	sts	0x24A1, r24	; 0x8024a1 <memoryConsumedByBuffer>
    1702:	90 93 a2 24 	sts	0x24A2, r25	; 0x8024a2 <memoryConsumedByBuffer+0x1>
	}
	return tmp;
}

inline void myFree(void* ptr){
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1706:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1708:	f8 94       	cli
		free(ptr);
    170a:	c8 01       	movw	r24, r16
    170c:	0e 94 ba 4c 	call	0x9974	; 0x9974 <free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1710:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    1712:	ad be       	out	0x3d, r10	; 61
    1714:	be be       	out	0x3e, r11	; 62
		userFacingMessagesOvf=0;
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
    1716:	00 91 7b 26 	lds	r16, 0x267B	; 0x80267b <incomingMsgHead>
    171a:	10 91 7c 26 	lds	r17, 0x267C	; 0x80267c <incomingMsgHead+0x1>
    171e:	01 15       	cp	r16, r1
    1720:	11 05       	cpc	r17, r1
    1722:	09 f0       	breq	.+2      	; 0x1726 <main+0x290>
    1724:	79 cf       	rjmp	.-270    	; 0x1618 <main+0x182>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1726:	7f be       	out	0x3f, r7	; 63
void removeTask(volatile Task_t*); // Removes a task from the queue
void printTaskQueue(void);

//Returns '1' if the next task to run is scheduled for more than 255ms in the past. If this occurs, call task_list_cleanup.
inline uint8_t taskListCheck(void){ 
	if(task_executing)	return 0;
    1728:	80 91 7a 26 	lds	r24, 0x267A	; 0x80267a <task_executing>
    172c:	88 23       	and	r24, r24
    172e:	09 f4       	brne	.+2      	; 0x1732 <main+0x29c>
    1730:	46 c0       	rjmp	.+140    	; 0x17be <main+0x328>
		if(taskListCheck()){
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
			printTaskQueue();
			taskListCleanup();
		}
		delayMS(1);	
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>

int main(void){
	initAllSystems();
	init();
	while(1){
		loop();
    173a:	0e 94 4d 08 	call	0x109a	; 0x109a <loop>
 * For each message, it populates an ir_msg struct and calls handle_msg with it.
 */
static void checkMessages(void){
	irMsg msgStruct;	

	if(userFacingMessagesOvf){
    173e:	80 91 49 26 	lds	r24, 0x2649	; 0x802649 <userFacingMessagesOvf>
    1742:	88 23       	and	r24, r24
    1744:	09 f4       	brne	.+2      	; 0x1748 <main+0x2b2>
    1746:	5e cf       	rjmp	.-324    	; 0x1604 <main+0x16e>
		numWaitingMsgs=MAX_USER_FACING_MESSAGES;
    1748:	26 e0       	ldi	r18, 0x06	; 6
    174a:	20 93 f6 24 	sts	0x24F6, r18	; 0x8024f6 <numWaitingMsgs>
		userFacingMessagesOvf=0;
    174e:	10 92 49 26 	sts	0x2649, r1	; 0x802649 <userFacingMessagesOvf>
		printf_P(PSTR("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n"));
    1752:	3f 92       	push	r3
    1754:	2f 92       	push	r2
    1756:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	52 cf       	rjmp	.-348    	; 0x1604 <main+0x16e>
				{
					setRGB(0,0,250);
					//handle_serial_comm(&msgStruct);
					handle_reprogramming(&msgStruct);
				} 
				else handleMsg(&msgStruct);
    1760:	ce 01       	movw	r24, r28
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	0e 94 4e 08 	call	0x109c	; 0x109c <handleMsg>
    1768:	93 cf       	rjmp	.-218    	; 0x1690 <main+0x1fa>
			while(tmp->next !=NULL){
				uint8_t crcMatches = (tmp->next->crc == crc);
				uint8_t closeTimes = (abs((int32_t)(tmp->next->arrivalTime) - (int32_t)(msgStruct.arrivalTime))) < 30;
				if(crcMatches && closeTimes){
					deleteMe = tmp->next;
					tmp->next = tmp->next->next;
    176a:	82 85       	ldd	r24, Z+10	; 0x0a
    176c:	93 85       	ldd	r25, Z+11	; 0x0b
    176e:	d7 01       	movw	r26, r14
    1770:	1a 96       	adiw	r26, 0x0a	; 10
    1772:	8d 93       	st	X+, r24
    1774:	9c 93       	st	X, r25
    1776:	1b 97       	sbiw	r26, 0x0b	; 11
					memoryConsumedByBuffer -= (sizeof(MsgNode) + msgStruct.length);
    1778:	80 91 a1 24 	lds	r24, 0x24A1	; 0x8024a1 <memoryConsumedByBuffer>
    177c:	90 91 a2 24 	lds	r25, 0x24A2	; 0x8024a2 <memoryConsumedByBuffer+0x1>
    1780:	0d 97       	sbiw	r24, 0x0d	; 13
    1782:	29 85       	ldd	r18, Y+9	; 0x09
    1784:	82 1b       	sub	r24, r18
    1786:	91 09       	sbc	r25, r1
    1788:	80 93 a1 24 	sts	0x24A1, r24	; 0x8024a1 <memoryConsumedByBuffer>
    178c:	90 93 a2 24 	sts	0x24A2, r25	; 0x8024a2 <memoryConsumedByBuffer+0x1>
					numWaitingMsgs--;
    1790:	80 91 f6 24 	lds	r24, 0x24F6	; 0x8024f6 <numWaitingMsgs>
    1794:	81 50       	subi	r24, 0x01	; 1
    1796:	80 93 f6 24 	sts	0x24F6, r24	; 0x8024f6 <numWaitingMsgs>
	}
	return tmp;
}

inline void myFree(void* ptr){
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    179a:	6f b6       	in	r6, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    179c:	f8 94       	cli
		free(ptr);
    179e:	cf 01       	movw	r24, r30
    17a0:	0e 94 ba 4c 	call	0x9974	; 0x9974 <free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    17a4:	6f be       	out	0x3f, r6	; 63
    __asm__ volatile ("" ::: "memory");
    17a6:	f7 01       	movw	r30, r14
    17a8:	7f 01       	movw	r14, r30
    17aa:	8e cf       	rjmp	.-228    	; 0x16c8 <main+0x232>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ //We want to amke sure that this block doesn't get interrupted by stuff trying to add more messages to the buffer.
		uint16_t crc;
		while(incomingMsgHead != NULL){
			MsgNode* node = (MsgNode*)incomingMsgHead;
			if(node->length==0){
				printf_P(PSTR("ERROR: Message length 0 for msg_node.\r\n"));
    17ac:	9f 92       	push	r9
    17ae:	8f 92       	push	r8
    17b0:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    17b4:	f8 01       	movw	r30, r16
    17b6:	44 85       	ldd	r20, Z+12	; 0x0c
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	35 cf       	rjmp	.-406    	; 0x1628 <main+0x192>
	else				return (((int32_t)(getTime()-(task_list->scheduled_time)))>3000); 
    17be:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    17c2:	e0 91 7f 26 	lds	r30, 0x267F	; 0x80267f <task_list>
    17c6:	f0 91 80 26 	lds	r31, 0x2680	; 0x802680 <task_list+0x1>
    17ca:	00 81       	ld	r16, Z
    17cc:	11 81       	ldd	r17, Z+1	; 0x01
    17ce:	22 81       	ldd	r18, Z+2	; 0x02
    17d0:	33 81       	ldd	r19, Z+3	; 0x03
	initAllSystems();
	init();
	while(1){
		loop();
		checkMessages();
		if(taskListCheck()){
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	80 1b       	sub	r24, r16
    17d8:	91 0b       	sbc	r25, r17
    17da:	a2 0b       	sbc	r26, r18
    17dc:	b3 0b       	sbc	r27, r19
    17de:	89 3b       	cpi	r24, 0xB9	; 185
    17e0:	9b 40       	sbci	r25, 0x0B	; 11
    17e2:	a1 05       	cpc	r26, r1
    17e4:	b1 05       	cpc	r27, r1
    17e6:	0c f4       	brge	.+2      	; 0x17ea <main+0x354>
    17e8:	a4 cf       	rjmp	.-184    	; 0x1732 <main+0x29c>
			printf_P(PSTR("Error! We got ahead of the task list and now nothing will execute.\r\n"));
    17ea:	5f 92       	push	r5
    17ec:	4f 92       	push	r4
    17ee:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
			printTaskQueue();
    17f2:	0e 94 26 34 	call	0x684c	; 0x684c <printTaskQueue>
			taskListCleanup();
    17f6:	0e 94 66 33 	call	0x66cc	; 0x66cc <taskListCleanup>
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	99 cf       	rjmp	.-206    	; 0x1732 <main+0x29c>

00001800 <EEPROM_read_byte>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    1800:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    1804:	27 fd       	sbrc	r18, 7
    1806:	fc cf       	rjmp	.-8      	; 0x1800 <EEPROM_read_byte>

uint8_t EEPROM_read_byte(uint16_t addr)
{
        wait_for_nvm();
        
        NVM.ADDR0 = addr & 0xFF;
    1808:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    180c:	9f 71       	andi	r25, 0x1F	; 31
    180e:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
        NVM.ADDR2 = 0;
    1812:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    1816:	86 e0       	ldi	r24, 0x06	; 6
    1818:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    181c:	eb ec       	ldi	r30, 0xCB	; 203
    181e:	f1 e0       	ldi	r31, 0x01	; 1
    1820:	21 e0       	ldi	r18, 0x01	; 1
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	88 ed       	ldi	r24, 0xD8	; 216
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	84 bf       	out	0x34, r24	; 52
    182a:	20 83       	st	Z, r18
        NVM.ADDR2 = 0;
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();
        
        return NVM.DATA0;
    182c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
}
    1830:	08 95       	ret

00001832 <EEPROM_write_byte>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
    1832:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    1836:	27 fd       	sbrc	r18, 7
    1838:	fc cf       	rjmp	.-8      	; 0x1832 <EEPROM_write_byte>

void flush_buffer(void)
{
        wait_for_nvm();
        
        if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    183a:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    183e:	21 ff       	sbrs	r18, 1
    1840:	0b c0       	rjmp	.+22     	; 0x1858 <EEPROM_write_byte+0x26>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    1842:	26 e3       	ldi	r18, 0x36	; 54
    1844:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    1848:	eb ec       	ldi	r30, 0xCB	; 203
    184a:	f1 e0       	ldi	r31, 0x01	; 1
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	28 ed       	ldi	r18, 0xD8	; 216
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	24 bf       	out	0x34, r18	; 52
    1856:	40 83       	st	Z, r20


void EEPROM_write_byte(uint16_t addr, uint8_t byte)
{
        flush_buffer();
        NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1858:	23 e3       	ldi	r18, 0x33	; 51
    185a:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
        
        NVM.ADDR0 = addr & 0xFF;
    185e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
        NVM.ADDR1 = (addr >> 8) & 0x1F;
    1862:	9f 71       	andi	r25, 0x1F	; 31
    1864:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
        NVM.ADDR2 = 0;
    1868:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
        
        NVM.DATA0 = byte;
    186c:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    1870:	85 e3       	ldi	r24, 0x35	; 53
    1872:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    1876:	eb ec       	ldi	r30, 0xCB	; 203
    1878:	f1 e0       	ldi	r31, 0x01	; 1
    187a:	21 e0       	ldi	r18, 0x01	; 1
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	88 ed       	ldi	r24, 0xD8	; 216
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	84 bf       	out	0x34, r24	; 52
    1884:	20 83       	st	Z, r18
    1886:	08 95       	ret

00001888 <processObsQueue>:
}

void disableSyncBlink(){
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc;
	TCE0.CCA = 0;
	TCE0.CCB = 0;
    1888:	bf 92       	push	r11
    188a:	cf 92       	push	r12
    188c:	df 92       	push	r13
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	e0 91 7d 24 	lds	r30, 0x247D	; 0x80247d <obsStart>
    189e:	f0 91 7e 24 	lds	r31, 0x247E	; 0x80247e <obsStart+0x1>
    18a2:	c2 81       	ldd	r28, Z+2	; 0x02
    18a4:	d3 81       	ldd	r29, Z+3	; 0x03
    18a6:	ec 17       	cp	r30, r28
    18a8:	fd 07       	cpc	r31, r29
    18aa:	09 f4       	brne	.+2      	; 0x18ae <processObsQueue+0x26>
    18ac:	6f c0       	rjmp	.+222    	; 0x198c <processObsQueue+0x104>
    18ae:	c1 2c       	mov	r12, r1
    18b0:	d1 2c       	mov	r13, r1
    18b2:	76 01       	movw	r14, r12
    18b4:	68 81       	ld	r22, Y
    18b6:	79 81       	ldd	r23, Y+1	; 0x01
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__floatunsisf>
    18c0:	a7 01       	movw	r20, r14
    18c2:	96 01       	movw	r18, r12
    18c4:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e7       	ldi	r20, 0x70	; 112
    18ce:	52 e4       	ldi	r21, 0x42	; 66
    18d0:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    18d4:	9b 01       	movw	r18, r22
    18d6:	ac 01       	movw	r20, r24
    18d8:	c7 01       	movw	r24, r14
    18da:	b6 01       	movw	r22, r12
    18dc:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    18e0:	6b 01       	movw	r12, r22
    18e2:	7c 01       	movw	r14, r24
    18e4:	0a 81       	ldd	r16, Y+2	; 0x02
    18e6:	1b 81       	ldd	r17, Y+3	; 0x03
    18e8:	bf b6       	in	r11, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	ce 01       	movw	r24, r28
    18ee:	0e 94 ba 4c 	call	0x9974	; 0x9974 <free>
    18f2:	bf be       	out	0x3f, r11	; 63
    18f4:	e8 01       	movw	r28, r16
    18f6:	80 91 7d 24 	lds	r24, 0x247D	; 0x80247d <obsStart>
    18fa:	90 91 7e 24 	lds	r25, 0x247E	; 0x80247e <obsStart+0x1>
    18fe:	80 17       	cp	r24, r16
    1900:	91 07       	cpc	r25, r17
    1902:	c1 f6       	brne	.-80     	; 0x18b4 <processObsQueue+0x2c>
    1904:	c7 01       	movw	r24, r14
    1906:	b6 01       	movw	r22, r12
    1908:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    190c:	f8 01       	movw	r30, r16
    190e:	02 83       	std	Z+2, r16	; 0x02
    1910:	13 83       	std	Z+3, r17	; 0x03
    1912:	04 83       	std	Z+4, r16	; 0x04
    1914:	15 83       	std	Z+5, r17	; 0x05
    1916:	c0 91 20 0a 	lds	r28, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    191a:	d0 91 21 0a 	lds	r29, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    191e:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
    1922:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
    1926:	c8 17       	cp	r28, r24
    1928:	d9 07       	cpc	r29, r25
    192a:	a0 f0       	brcs	.+40     	; 0x1954 <processObsQueue+0xcc>
    192c:	c6 0f       	add	r28, r22
    192e:	d7 1f       	adc	r29, r23
    1930:	c1 34       	cpi	r28, 0x41	; 65
    1932:	fd e9       	ldi	r31, 0x9D	; 157
    1934:	df 07       	cpc	r29, r31
    1936:	18 f5       	brcc	.+70     	; 0x197e <processObsQueue+0xf6>
    1938:	c0 93 20 0a 	sts	0x0A20, r28	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    193c:	d0 93 21 0a 	sts	0x0A21, r29	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	cf 90       	pop	r12
    1950:	bf 90       	pop	r11
    1952:	08 95       	ret
    1954:	c6 0f       	add	r28, r22
    1956:	d7 1f       	adc	r29, r23
    1958:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__TEXT_REGION_LENGTH__+0x700a2a>
    195c:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__TEXT_REGION_LENGTH__+0x700a2b>
    1960:	8c 17       	cp	r24, r28
    1962:	9d 07       	cpc	r25, r29
    1964:	28 f7       	brcc	.-54     	; 0x1930 <processObsQueue+0xa8>
    1966:	40 91 e1 22 	lds	r20, 0x22E1	; 0x8022e1 <ffsync_blink_prev_b>
    196a:	60 91 e2 22 	lds	r22, 0x22E2	; 0x8022e2 <ffsync_blink_prev_g>
    196e:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <ffsync_blink_prev_r>
    1972:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    1976:	c1 34       	cpi	r28, 0x41	; 65
    1978:	fd e9       	ldi	r31, 0x9D	; 157
    197a:	df 07       	cpc	r29, r31
    197c:	e8 f2       	brcs	.-70     	; 0x1938 <processObsQueue+0xb0>
    197e:	80 e4       	ldi	r24, 0x40	; 64
    1980:	9d e9       	ldi	r25, 0x9D	; 157
    1982:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    1986:	90 93 21 0a 	sts	0x0A21, r25	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
    198a:	da cf       	rjmp	.-76     	; 0x1940 <processObsQueue+0xb8>
    198c:	8f 01       	movw	r16, r30
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	bc cf       	rjmp	.-136    	; 0x190c <processObsQueue+0x84>

00001994 <sendPing>:
    1994:	9c 01       	movw	r18, r24
    1996:	40 e4       	ldi	r20, 0x40	; 64
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	8f e3       	ldi	r24, 0x3F	; 63
    199e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <hpIrTargetedCmd>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	44 e4       	ldi	r20, 0x44	; 68
    19a8:	5c e0       	ldi	r21, 0x0C	; 12
    19aa:	68 ec       	ldi	r22, 0xC8	; 200
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <scheduleTask>
    19b6:	08 95       	ret

000019b8 <__vector_49>:
}


ISR(TCE0_CCA_vect){
    19b8:	1f 92       	push	r1
    19ba:	0f 92       	push	r0
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	0f 92       	push	r0
    19c0:	11 24       	eor	r1, r1
    19c2:	0b b6       	in	r0, 0x3b	; 59
    19c4:	0f 92       	push	r0
    19c6:	2f 93       	push	r18
    19c8:	3f 93       	push	r19
    19ca:	4f 93       	push	r20
    19cc:	5f 93       	push	r21
    19ce:	6f 93       	push	r22
    19d0:	7f 93       	push	r23
    19d2:	8f 93       	push	r24
    19d4:	9f 93       	push	r25
    19d6:	af 93       	push	r26
    19d8:	bf 93       	push	r27
    19da:	ef 93       	push	r30
    19dc:	ff 93       	push	r31
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    19de:	e0 e4       	ldi	r30, 0x40	; 64
    19e0:	fa e0       	ldi	r31, 0x0A	; 10
    19e2:	82 ad       	ldd	r24, Z+58	; 0x3a
    19e4:	93 ad       	ldd	r25, Z+59	; 0x3b
	ffsync_blink_prev_r = getRedLED();
    19e6:	80 93 e3 22 	sts	0x22E3, r24	; 0x8022e3 <ffsync_blink_prev_r>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    19ea:	80 ad       	ldd	r24, Z+56	; 0x38
    19ec:	91 ad       	ldd	r25, Z+57	; 0x39
	ffsync_blink_prev_g = getGreenLED();
    19ee:	80 93 e2 22 	sts	0x22E2, r24	; 0x8022e2 <ffsync_blink_prev_g>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    19f2:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    19f6:	90 91 79 09 	lds	r25, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
	ffsync_blink_prev_b = getBlueLED();
    19fa:	80 93 e1 22 	sts	0x22E1, r24	; 0x8022e1 <ffsync_blink_prev_b>
	setRGB(ffsync_blink_r,ffsync_blink_g,ffsync_blink_b);
    19fe:	40 91 e4 22 	lds	r20, 0x22E4	; 0x8022e4 <ffsync_blink_b>
    1a02:	60 91 e5 22 	lds	r22, 0x22E5	; 0x8022e5 <ffsync_blink_g>
    1a06:	80 91 e6 22 	lds	r24, 0x22E6	; 0x8022e6 <ffsync_blink_r>
    1a0a:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
}
    1a0e:	ff 91       	pop	r31
    1a10:	ef 91       	pop	r30
    1a12:	bf 91       	pop	r27
    1a14:	af 91       	pop	r26
    1a16:	9f 91       	pop	r25
    1a18:	8f 91       	pop	r24
    1a1a:	7f 91       	pop	r23
    1a1c:	6f 91       	pop	r22
    1a1e:	5f 91       	pop	r21
    1a20:	4f 91       	pop	r20
    1a22:	3f 91       	pop	r19
    1a24:	2f 91       	pop	r18
    1a26:	0f 90       	pop	r0
    1a28:	0b be       	out	0x3b, r0	; 59
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	0f 90       	pop	r0
    1a30:	1f 90       	pop	r1
    1a32:	18 95       	reti

00001a34 <__vector_50>:

ISR(TCE0_CCB_vect){
    1a34:	1f 92       	push	r1
    1a36:	0f 92       	push	r0
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	0f 92       	push	r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	0b b6       	in	r0, 0x3b	; 59
    1a40:	0f 92       	push	r0
    1a42:	2f 93       	push	r18
    1a44:	3f 93       	push	r19
    1a46:	4f 93       	push	r20
    1a48:	5f 93       	push	r21
    1a4a:	6f 93       	push	r22
    1a4c:	7f 93       	push	r23
    1a4e:	8f 93       	push	r24
    1a50:	9f 93       	push	r25
    1a52:	af 93       	push	r26
    1a54:	bf 93       	push	r27
    1a56:	ef 93       	push	r30
    1a58:	ff 93       	push	r31
	setRGB(ffsync_blink_prev_r, ffsync_blink_prev_g, ffsync_blink_prev_b);	
    1a5a:	40 91 e1 22 	lds	r20, 0x22E1	; 0x8022e1 <ffsync_blink_prev_b>
    1a5e:	60 91 e2 22 	lds	r22, 0x22E2	; 0x8022e2 <ffsync_blink_prev_g>
    1a62:	80 91 e3 22 	lds	r24, 0x22E3	; 0x8022e3 <ffsync_blink_prev_r>
    1a66:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
}
    1a6a:	ff 91       	pop	r31
    1a6c:	ef 91       	pop	r30
    1a6e:	bf 91       	pop	r27
    1a70:	af 91       	pop	r26
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	7f 91       	pop	r23
    1a78:	6f 91       	pop	r22
    1a7a:	5f 91       	pop	r21
    1a7c:	4f 91       	pop	r20
    1a7e:	3f 91       	pop	r19
    1a80:	2f 91       	pop	r18
    1a82:	0f 90       	pop	r0
    1a84:	0b be       	out	0x3b, r0	; 59
    1a86:	0f 90       	pop	r0
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	0f 90       	pop	r0
    1a8c:	1f 90       	pop	r1
    1a8e:	18 95       	reti

00001a90 <fireflySyncInit>:

void fireflySyncInit()
{
    1a90:	cf 93       	push	r28
	ffsync_blink_r = 255;
    1a92:	8f ef       	ldi	r24, 0xFF	; 255
    1a94:	80 93 e6 22 	sts	0x22E6, r24	; 0x8022e6 <ffsync_blink_r>
	ffsync_blink_g = 255;
    1a98:	80 93 e5 22 	sts	0x22E5, r24	; 0x8022e5 <ffsync_blink_g>
	ffsync_blink_b = 255;
    1a9c:	80 93 e4 22 	sts	0x22E4, r24	; 0x8022e4 <ffsync_blink_b>
	ffsync_blink_dur = 200;
    1aa0:	88 ec       	ldi	r24, 0xC8	; 200
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	80 93 df 22 	sts	0x22DF, r24	; 0x8022df <ffsync_blink_dur>
    1aa8:	90 93 e0 22 	sts	0x22E0, r25	; 0x8022e0 <ffsync_blink_dur+0x1>
	
	ffsync_blink_phase_offset_ms = 0;

	EVSYS.CH0MUX = EVSYS_CHMUX_PRESCALER_4096_gc;
    1aac:	8c e8       	ldi	r24, 0x8C	; 140
    1aae:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	TCE0.CTRLA = TC_CLKSEL_EVCH0_gc;
    1ab2:	e0 e0       	ldi	r30, 0x00	; 0
    1ab4:	fa e0       	ldi	r31, 0x0A	; 10
    1ab6:	88 e0       	ldi	r24, 0x08	; 8
    1ab8:	80 83       	st	Z, r24
	TCE0.CTRLB = TC_WGMODE_NORMAL_gc;
    1aba:	11 82       	std	Z+1, r1	; 0x01

	TCE0.PER =  FFSYNC_FULL_PERIOD;
    1abc:	81 e4       	ldi	r24, 0x41	; 65
    1abe:	9d e9       	ldi	r25, 0x9D	; 157
    1ac0:	86 a3       	std	Z+38, r24	; 0x26
    1ac2:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    1ac4:	83 e0       	ldi	r24, 0x03	; 3
    1ac6:	86 83       	std	Z+6, r24	; 0x06
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc;	
    1ac8:	17 82       	std	Z+7, r1	; 0x07
	TCE0.CNT = 0;
    1aca:	10 a2       	std	Z+32, r1	; 0x20
    1acc:	11 a2       	std	Z+33, r1	; 0x21
		TCE0.CCA = 0;
    1ace:	10 a6       	std	Z+40, r1	; 0x28
    1ad0:	11 a6       	std	Z+41, r1	; 0x29
		TCE0.CCB = 0;
    1ad2:	12 a6       	std	Z+42, r1	; 0x2a
    1ad4:	13 a6       	std	Z+43, r1	; 0x2b
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1ad6:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ad8:	f8 94       	cli
		tmp = malloc(size);
    1ada:	86 e0       	ldi	r24, 0x06	; 6
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 22 4c 	call	0x9844	; 0x9844 <malloc>
    1ae2:	fc 01       	movw	r30, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ae4:	cf bf       	out	0x3f, r28	; 63
	
	obsStart = (ObsQueue*)myMalloc(sizeof(ObsQueue));
    1ae6:	80 93 7d 24 	sts	0x247D, r24	; 0x80247d <obsStart>
    1aea:	90 93 7e 24 	sts	0x247E, r25	; 0x80247e <obsStart+0x1>
	obsStart->obs = 0;
    1aee:	10 82       	st	Z, r1
    1af0:	11 82       	std	Z+1, r1	; 0x01
	obsStart->next = obsStart;
    1af2:	82 83       	std	Z+2, r24	; 0x02
    1af4:	93 83       	std	Z+3, r25	; 0x03
	obsStart->prev = obsStart;
    1af6:	84 83       	std	Z+4, r24	; 0x04
    1af8:	95 83       	std	Z+5, r25	; 0x05
}
    1afa:	cf 91       	pop	r28
    1afc:	08 95       	ret

00001afe <__vector_47>:

ISR(TCE0_OVF_vect){
    1afe:	1f 92       	push	r1
    1b00:	0f 92       	push	r0
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	0f 92       	push	r0
    1b06:	11 24       	eor	r1, r1
    1b08:	0b b6       	in	r0, 0x3b	; 59
    1b0a:	0f 92       	push	r0
    1b0c:	af 92       	push	r10
    1b0e:	bf 92       	push	r11
    1b10:	cf 92       	push	r12
    1b12:	df 92       	push	r13
    1b14:	ef 92       	push	r14
    1b16:	ff 92       	push	r15
    1b18:	1f 93       	push	r17
    1b1a:	2f 93       	push	r18
    1b1c:	3f 93       	push	r19
    1b1e:	4f 93       	push	r20
    1b20:	5f 93       	push	r21
    1b22:	6f 93       	push	r22
    1b24:	7f 93       	push	r23
    1b26:	8f 93       	push	r24
    1b28:	9f 93       	push	r25
    1b2a:	af 93       	push	r26
    1b2c:	bf 93       	push	r27
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	ef 93       	push	r30
    1b34:	ff 93       	push	r31
	uint32_t randomWait = (randShort()%32)*20; //between 0 and 640ms
    1b36:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <randShort>
    1b3a:	ec 01       	movw	r28, r24
}

static void updateRTC(void){
	int16_t change;
	uint16_t remainder;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1b3c:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b3e:	f8 94       	cli
	{
		uint32_t currTime = getTime();
    1b40:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    1b44:	6b 01       	movw	r12, r22
    1b46:	7c 01       	movw	r14, r24
		uint16_t theCount = currTime&0xFFFF;		
		remainder = (int16_t)(currTime%FFSYNC_FULL_PERIOD_MS);
    1b48:	21 e2       	ldi	r18, 0x21	; 33
    1b4a:	34 e1       	ldi	r19, 0x14	; 20
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	0e 94 de 4b 	call	0x97bc	; 0x97bc <__udivmodsi4>
		//printf("%u.\r\n", remainder);
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
    1b54:	61 31       	cpi	r22, 0x11	; 17
    1b56:	2a e0       	ldi	r18, 0x0A	; 10
    1b58:	72 07       	cpc	r23, r18
    1b5a:	08 f4       	brcc	.+2      	; 0x1b5e <__vector_47+0x60>
    1b5c:	69 c0       	rjmp	.+210    	; 0x1c30 <__vector_47+0x132>
			change = FFSYNC_FULL_PERIOD_MS-((int16_t)remainder);
    1b5e:	21 e2       	ldi	r18, 0x21	; 33
    1b60:	34 e1       	ldi	r19, 0x14	; 20
    1b62:	26 1b       	sub	r18, r22
    1b64:	37 0b       	sbc	r19, r23
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
    1b66:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    1b6a:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    1b6e:	82 1b       	sub	r24, r18
    1b70:	93 0b       	sbc	r25, r19
    1b72:	8c 15       	cp	r24, r12
    1b74:	9d 05       	cpc	r25, r13
    1b76:	48 f4       	brcc	.+18     	; 0x1b8a <__vector_47+0x8c>
    1b78:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <rtc_epoch>
    1b7c:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <rtc_epoch+0x1>
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <rtc_epoch>
    1b86:	90 93 6d 24 	sts	0x246D, r25	; 0x80246d <rtc_epoch+0x1>
		}else{
			change = -(int16_t)remainder;
			if(theCount<remainder) rtc_epoch--;
		}
		while(RTC.STATUS & RTC_SYNCBUSY_bm);
    1b8a:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    1b8e:	80 fd       	sbrc	r24, 0
    1b90:	fc cf       	rjmp	.-8      	; 0x1b8a <__vector_47+0x8c>
		RTC.CNT =  (theCount+change);
    1b92:	c2 0e       	add	r12, r18
    1b94:	d3 1e       	adc	r13, r19
    1b96:	c0 92 08 04 	sts	0x0408, r12	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    1b9a:	d0 92 09 04 	sts	0x0409, r13	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
		RTC.COMP = (RTC.COMP+change);
    1b9e:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    1ba2:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
    1ba6:	82 0f       	add	r24, r18
    1ba8:	93 1f       	adc	r25, r19
    1baa:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    1bae:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bb2:	1f bf       	out	0x3f, r17	; 63
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    1bb4:	c9 01       	movw	r24, r18
    1bb6:	37 fd       	sbrc	r19, 7
    1bb8:	4d c0       	rjmp	.+154    	; 0x1c54 <__vector_47+0x156>
    1bba:	81 39       	cpi	r24, 0x91	; 145
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	4c f4       	brge	.+18     	; 0x1bd2 <__vector_47+0xd4>
		if(change>0) OSC.RC32KCAL++;
    1bc0:	12 16       	cp	r1, r18
    1bc2:	13 06       	cpc	r1, r19
    1bc4:	0c f0       	brlt	.+2      	; 0x1bc8 <__vector_47+0xca>
    1bc6:	4b c0       	rjmp	.+150    	; 0x1c5e <__vector_47+0x160>
    1bc8:	80 91 54 00 	lds	r24, 0x0054	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    1bcc:	8f 5f       	subi	r24, 0xFF	; 255
    1bce:	80 93 54 00 	sts	0x0054, r24	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>

ISR(TCE0_OVF_vect){
	uint32_t randomWait = (randShort()%32)*20; //between 0 and 640ms
	//sendPing( (void*)((uint16_t)(get_time()&0xFFFF)));
	updateRTC();
	scheduleTask(randomWait, (arg_func_t)sendPing, (void*)((uint16_t)(getTime()&0xFFFF)));
    1bd2:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    1bd6:	9b 01       	movw	r18, r22
    1bd8:	ac 01       	movw	r20, r24
    1bda:	cf 71       	andi	r28, 0x1F	; 31
    1bdc:	dd 27       	eor	r29, r29
    1bde:	64 e1       	ldi	r22, 0x14	; 20
    1be0:	6c 9f       	mul	r22, r28
    1be2:	c0 01       	movw	r24, r0
    1be4:	6d 9f       	mul	r22, r29
    1be6:	90 0d       	add	r25, r0
    1be8:	11 24       	eor	r1, r1
    1bea:	bc 01       	movw	r22, r24
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	4a ec       	ldi	r20, 0xCA	; 202
    1bf2:	5c e0       	ldi	r21, 0x0C	; 12
    1bf4:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <scheduleTask>
	//printf("ovf @ %lu\r\n",get_time());
}
    1bf8:	ff 91       	pop	r31
    1bfa:	ef 91       	pop	r30
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	bf 91       	pop	r27
    1c02:	af 91       	pop	r26
    1c04:	9f 91       	pop	r25
    1c06:	8f 91       	pop	r24
    1c08:	7f 91       	pop	r23
    1c0a:	6f 91       	pop	r22
    1c0c:	5f 91       	pop	r21
    1c0e:	4f 91       	pop	r20
    1c10:	3f 91       	pop	r19
    1c12:	2f 91       	pop	r18
    1c14:	1f 91       	pop	r17
    1c16:	ff 90       	pop	r15
    1c18:	ef 90       	pop	r14
    1c1a:	df 90       	pop	r13
    1c1c:	cf 90       	pop	r12
    1c1e:	bf 90       	pop	r11
    1c20:	af 90       	pop	r10
    1c22:	0f 90       	pop	r0
    1c24:	0b be       	out	0x3b, r0	; 59
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	0f 90       	pop	r0
    1c2c:	1f 90       	pop	r1
    1c2e:	18 95       	reti
	
		if(remainder>(FFSYNC_FULL_PERIOD_MS/2)){
			change = FFSYNC_FULL_PERIOD_MS-((int16_t)remainder);
			if((RTC.PER-change)<theCount) rtc_epoch++;			//0xFFFF: RTC.PER
		}else{
			change = -(int16_t)remainder;
    1c30:	22 27       	eor	r18, r18
    1c32:	33 27       	eor	r19, r19
    1c34:	26 1b       	sub	r18, r22
    1c36:	37 0b       	sbc	r19, r23
			if(theCount<remainder) rtc_epoch--;
    1c38:	c6 16       	cp	r12, r22
    1c3a:	d7 06       	cpc	r13, r23
    1c3c:	08 f0       	brcs	.+2      	; 0x1c40 <__vector_47+0x142>
    1c3e:	a5 cf       	rjmp	.-182    	; 0x1b8a <__vector_47+0x8c>
    1c40:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <rtc_epoch>
    1c44:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <rtc_epoch+0x1>
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <rtc_epoch>
    1c4e:	90 93 6d 24 	sts	0x246D, r25	; 0x80246d <rtc_epoch+0x1>
    1c52:	9b cf       	rjmp	.-202    	; 0x1b8a <__vector_47+0x8c>
	 * If change is quite large, then probably we're still getting sync'd - so no implications about the RTC clock.
	 * If it's smallish, though, the code below adjusts the factory-set calibration value to minimize this difference.
	 * (From observations, changing the calibration by one seemed to effect the change by about 10ms, so if we're within
	 * 11ms, we won't get any better.)
	 */
	if(abs(change)<(FFSYNC_MAX_DEVIATION*5)){
    1c54:	88 27       	eor	r24, r24
    1c56:	99 27       	eor	r25, r25
    1c58:	82 1b       	sub	r24, r18
    1c5a:	93 0b       	sbc	r25, r19
    1c5c:	ae cf       	rjmp	.-164    	; 0x1bba <__vector_47+0xbc>
		if(change>0) OSC.RC32KCAL++;
		else if(abs(change)<FFSYNC_MAX_DEVIATION) OSC.RC32KCAL--;
    1c5e:	4d 97       	sbiw	r24, 0x1d	; 29
    1c60:	0c f0       	brlt	.+2      	; 0x1c64 <__vector_47+0x166>
    1c62:	b7 cf       	rjmp	.-146    	; 0x1bd2 <__vector_47+0xd4>
    1c64:	80 91 54 00 	lds	r24, 0x0054	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    1c68:	81 50       	subi	r24, 0x01	; 1
    1c6a:	80 93 54 00 	sts	0x0054, r24	; 0x800054 <__TEXT_REGION_LENGTH__+0x700054>
    1c6e:	b1 cf       	rjmp	.-158    	; 0x1bd2 <__vector_47+0xd4>

00001c70 <waitForTWIReady>:
	uint8_t printed = 0;
	while(!result){
		if((printed = waitForTWIReady(startTime, callerDescr))){
			result = TWI_MasterWriteRead(addr, writeData, bytesToWrite, bytesToRead);
		}else{
			return 0;
    1c70:	bf 92       	push	r11
    1c72:	cf 92       	push	r12
    1c74:	df 92       	push	r13
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	6b 01       	movw	r12, r22
    1c84:	7c 01       	movw	r14, r24
    1c86:	04 2f       	mov	r16, r20
    1c88:	b5 2e       	mov	r11, r21
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
    1c8c:	cb e3       	ldi	r28, 0x3B	; 59
    1c8e:	d5 e0       	ldi	r29, 0x05	; 5
    1c90:	1a c0       	rjmp	.+52     	; 0x1cc6 <waitForTWIReady+0x56>
    1c92:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	8c 19       	sub	r24, r12
    1c9c:	9d 09       	sbc	r25, r13
    1c9e:	ae 09       	sbc	r26, r14
    1ca0:	bf 09       	sbc	r27, r15
    1ca2:	89 3e       	cpi	r24, 0xE9	; 233
    1ca4:	93 40       	sbci	r25, 0x03	; 3
    1ca6:	a1 05       	cpc	r26, r1
    1ca8:	b1 05       	cpc	r27, r1
    1caa:	00 f5       	brcc	.+64     	; 0x1cec <waitForTWIReady+0x7c>
    1cac:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8c 19       	sub	r24, r12
    1cb6:	9d 09       	sbc	r25, r13
    1cb8:	ae 09       	sbc	r26, r14
    1cba:	bf 09       	sbc	r27, r15
    1cbc:	85 36       	cpi	r24, 0x65	; 101
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	a1 05       	cpc	r26, r1
    1cc2:	b1 05       	cpc	r27, r1
    1cc4:	08 f5       	brcc	.+66     	; 0x1d08 <waitForTWIReady+0x98>
    1cc6:	e0 91 87 26 	lds	r30, 0x2687	; 0x802687 <twi>
    1cca:	f0 91 88 26 	lds	r31, 0x2688	; 0x802688 <twi+0x1>
    1cce:	87 89       	ldd	r24, Z+23	; 0x17
    1cd0:	81 11       	cpse	r24, r1
    1cd2:	df cf       	rjmp	.-66     	; 0x1c92 <waitForTWIReady+0x22>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	81 0f       	add	r24, r17
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	ff 90       	pop	r15
    1ce2:	ef 90       	pop	r14
    1ce4:	df 90       	pop	r13
    1ce6:	cf 90       	pop	r12
    1ce8:	bf 90       	pop	r11
    1cea:	08 95       	ret
    1cec:	bf 92       	push	r11
    1cee:	0f 93       	push	r16
    1cf0:	82 e5       	ldi	r24, 0x52	; 82
    1cf2:	95 e0       	ldi	r25, 0x05	; 5
    1cf4:	9f 93       	push	r25
    1cf6:	8f 93       	push	r24
    1cf8:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	e8 cf       	rjmp	.-48     	; 0x1cd8 <waitForTWIReady+0x68>
    1d08:	11 23       	and	r17, r17
    1d0a:	31 f0       	breq	.+12     	; 0x1d18 <waitForTWIReady+0xa8>
    1d0c:	8a e0       	ldi	r24, 0x0A	; 10
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    1d14:	11 e0       	ldi	r17, 0x01	; 1
    1d16:	d7 cf       	rjmp	.-82     	; 0x1cc6 <waitForTWIReady+0x56>
    1d18:	bf 92       	push	r11
    1d1a:	0f 93       	push	r16
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	ef cf       	rjmp	.-34     	; 0x1d0c <waitForTWIReady+0x9c>

00001d2e <TWI_MasterWriteRead.part.0>:
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	e0 91 87 26 	lds	r30, 0x2687	; 0x802687 <twi>
    1d36:	f0 91 88 26 	lds	r31, 0x2688	; 0x802688 <twi+0x1>
    1d3a:	97 89       	ldd	r25, Z+23	; 0x17
    1d3c:	91 11       	cpse	r25, r1
    1d3e:	30 c0       	rjmp	.+96     	; 0x1da0 <TWI_MasterWriteRead.part.0+0x72>
    1d40:	91 e0       	ldi	r25, 0x01	; 1
    1d42:	97 8b       	std	Z+23, r25	; 0x17
    1d44:	10 8e       	std	Z+24, r1	; 0x18
    1d46:	88 0f       	add	r24, r24
    1d48:	82 83       	std	Z+2, r24	; 0x02
    1d4a:	44 23       	and	r20, r20
    1d4c:	59 f0       	breq	.+22     	; 0x1d64 <TWI_MasterWriteRead.part.0+0x36>
    1d4e:	db 01       	movw	r26, r22
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	3d 91       	ld	r19, X+
    1d56:	ef 01       	movw	r28, r30
    1d58:	c8 0f       	add	r28, r24
    1d5a:	d9 1f       	adc	r29, r25
    1d5c:	3b 83       	std	Y+3, r19	; 0x03
    1d5e:	01 96       	adiw	r24, 0x01	; 1
    1d60:	84 17       	cp	r24, r20
    1d62:	c0 f3       	brcs	.-16     	; 0x1d54 <TWI_MasterWriteRead.part.0+0x26>
    1d64:	43 8b       	std	Z+19, r20	; 0x13
    1d66:	24 8b       	std	Z+20, r18	; 0x14
    1d68:	15 8a       	std	Z+21, r1	; 0x15
    1d6a:	16 8a       	std	Z+22, r1	; 0x16
    1d6c:	83 89       	ldd	r24, Z+19	; 0x13
    1d6e:	81 11       	cpse	r24, r1
    1d70:	0d c0       	rjmp	.+26     	; 0x1d8c <TWI_MasterWriteRead.part.0+0x5e>
    1d72:	84 89       	ldd	r24, Z+20	; 0x14
    1d74:	88 23       	and	r24, r24
    1d76:	01 f1       	breq	.+64     	; 0x1db8 <TWI_MasterWriteRead.part.0+0x8a>
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	81 60       	ori	r24, 0x01	; 1
    1d7c:	01 90       	ld	r0, Z+
    1d7e:	f0 81       	ld	r31, Z
    1d80:	e0 2d       	mov	r30, r0
    1d82:	86 83       	std	Z+6, r24	; 0x06
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	08 95       	ret
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	8e 7f       	andi	r24, 0xFE	; 254
    1d90:	01 90       	ld	r0, Z+
    1d92:	f0 81       	ld	r31, Z
    1d94:	e0 2d       	mov	r30, r0
    1d96:	86 83       	std	Z+6, r24	; 0x06
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	08 95       	ret
    1da0:	86 e2       	ldi	r24, 0x26	; 38
    1da2:	95 e0       	ldi	r25, 0x05	; 5
    1da4:	9f 93       	push	r25
    1da6:	8f 93       	push	r24
    1da8:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	08 95       	ret
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	08 95       	ret

00001dc0 <i2cInit>:
    1dc0:	e0 e2       	ldi	r30, 0x20	; 32
    1dc2:	f6 e0       	ldi	r31, 0x06	; 6
    1dc4:	80 e2       	ldi	r24, 0x20	; 32
    1dc6:	82 83       	std	Z+2, r24	; 0x02
    1dc8:	85 8b       	std	Z+21, r24	; 0x15
    1dca:	83 e0       	ldi	r24, 0x03	; 3
    1dcc:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    1dd0:	af e7       	ldi	r26, 0x7F	; 127
    1dd2:	b4 e2       	ldi	r27, 0x24	; 36
    1dd4:	a0 93 87 26 	sts	0x2687, r26	; 0x802687 <twi>
    1dd8:	b0 93 88 26 	sts	0x2688, r27	; 0x802688 <twi+0x1>
    1ddc:	e0 ea       	ldi	r30, 0xA0	; 160
    1dde:	f4 e0       	ldi	r31, 0x04	; 4
    1de0:	ed 93       	st	X+, r30
    1de2:	fc 93       	st	X, r31
    1de4:	88 ef       	ldi	r24, 0xF8	; 248
    1de6:	81 83       	std	Z+1, r24	; 0x01
    1de8:	8b e9       	ldi	r24, 0x9B	; 155
    1dea:	85 83       	std	Z+5, r24	; 0x05
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	84 83       	std	Z+4, r24	; 0x04
    1df0:	08 95       	ret

00001df2 <twiWriteWrapper>:
    1df2:	9f 92       	push	r9
    1df4:	af 92       	push	r10
    1df6:	bf 92       	push	r11
    1df8:	cf 92       	push	r12
    1dfa:	df 92       	push	r13
    1dfc:	ef 92       	push	r14
    1dfe:	ff 92       	push	r15
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	98 2e       	mov	r9, r24
    1e0a:	5b 01       	movw	r10, r22
    1e0c:	d4 2f       	mov	r29, r20
    1e0e:	89 01       	movw	r16, r18
    1e10:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    1e14:	6b 01       	movw	r12, r22
    1e16:	7c 01       	movw	r14, r24
    1e18:	a8 01       	movw	r20, r16
    1e1a:	c7 01       	movw	r24, r14
    1e1c:	b6 01       	movw	r22, r12
    1e1e:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <waitForTWIReady>
    1e22:	c8 2f       	mov	r28, r24
    1e24:	88 23       	and	r24, r24
    1e26:	c1 f0       	breq	.+48     	; 0x1e58 <twiWriteWrapper+0x66>
    1e28:	d9 30       	cpi	r29, 0x09	; 9
    1e2a:	b0 f7       	brcc	.-20     	; 0x1e18 <twiWriteWrapper+0x26>
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	4d 2f       	mov	r20, r29
    1e30:	b5 01       	movw	r22, r10
    1e32:	89 2d       	mov	r24, r9
    1e34:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_MasterWriteRead.part.0>
    1e38:	88 23       	and	r24, r24
    1e3a:	71 f3       	breq	.-36     	; 0x1e18 <twiWriteWrapper+0x26>
    1e3c:	8c 0f       	add	r24, r28
    1e3e:	81 50       	subi	r24, 0x01	; 1
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	df 90       	pop	r13
    1e4e:	cf 90       	pop	r12
    1e50:	bf 90       	pop	r11
    1e52:	af 90       	pop	r10
    1e54:	9f 90       	pop	r9
    1e56:	08 95       	ret
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	f2 cf       	rjmp	.-28     	; 0x1e40 <twiWriteWrapper+0x4e>

00001e5c <__vector_46>:
	twi->result = result;
	twi->status = TWIM_STATUS_READY;
}

ISR(TWIE_TWIM_vect)
{
    1e5c:	1f 92       	push	r1
    1e5e:	0f 92       	push	r0
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	0f 92       	push	r0
    1e64:	11 24       	eor	r1, r1
    1e66:	0b b6       	in	r0, 0x3b	; 59
    1e68:	0f 92       	push	r0
    1e6a:	2f 93       	push	r18
    1e6c:	8f 93       	push	r24
    1e6e:	9f 93       	push	r25
    1e70:	af 93       	push	r26
    1e72:	bf 93       	push	r27
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	ef 93       	push	r30
    1e7a:	ff 93       	push	r31
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
static void TWI_MasterInterruptHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1e7c:	e0 91 87 26 	lds	r30, 0x2687	; 0x802687 <twi>
    1e80:	f0 91 88 26 	lds	r31, 0x2688	; 0x802688 <twi+0x1>
    1e84:	a0 81       	ld	r26, Z
    1e86:	b1 81       	ldd	r27, Z+1	; 0x01
    1e88:	14 96       	adiw	r26, 0x04	; 4
    1e8a:	8c 91       	ld	r24, X
    1e8c:	14 97       	sbiw	r26, 0x04	; 4
	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    1e8e:	98 2f       	mov	r25, r24
    1e90:	9c 70       	andi	r25, 0x0C	; 12
    1e92:	41 f4       	brne	.+16     	; 0x1ea4 <__vector_46+0x48>

		TWI_MasterArbitrationLostBusErrorHandler();
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    1e94:	86 fd       	sbrc	r24, 6
    1e96:	24 c0       	rjmp	.+72     	; 0x1ee0 <__vector_46+0x84>
		TWI_MasterWriteHandler();
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    1e98:	87 fd       	sbrc	r24, 7
    1e9a:	3d c0       	rjmp	.+122    	; 0x1f16 <__vector_46+0xba>
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1e9c:	86 e0       	ldi	r24, 0x06	; 6
    1e9e:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1ea0:	17 8a       	std	Z+23, r1	; 0x17
}

ISR(TWIE_TWIM_vect)
{
	TWI_MasterInterruptHandler();
    1ea2:	0b c0       	rjmp	.+22     	; 0x1eba <__vector_46+0x5e>
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
static void TWI_MasterArbitrationLostBusErrorHandler()
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    1ea4:	14 96       	adiw	r26, 0x04	; 4
    1ea6:	8c 91       	ld	r24, X
    1ea8:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    1eaa:	82 fd       	sbrc	r24, 2
    1eac:	16 c0       	rjmp	.+44     	; 0x1eda <__vector_46+0x7e>
		twi->result = TWIM_RESULT_BUS_ERROR;
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    1eae:	93 e0       	ldi	r25, 0x03	; 3
    1eb0:	90 8f       	std	Z+24, r25	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    1eb2:	88 60       	ori	r24, 0x08	; 8
    1eb4:	14 96       	adiw	r26, 0x04	; 4
    1eb6:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    1eb8:	17 8a       	std	Z+23, r1	; 0x17
}

ISR(TWIE_TWIM_vect)
{
	TWI_MasterInterruptHandler();
    1eba:	ff 91       	pop	r31
    1ebc:	ef 91       	pop	r30
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	bf 91       	pop	r27
    1ec4:	af 91       	pop	r26
    1ec6:	9f 91       	pop	r25
    1ec8:	8f 91       	pop	r24
    1eca:	2f 91       	pop	r18
    1ecc:	0f 90       	pop	r0
    1ece:	0b be       	out	0x3b, r0	; 59
    1ed0:	0f 90       	pop	r0
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	0f 90       	pop	r0
    1ed6:	1f 90       	pop	r1
    1ed8:	18 95       	reti
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
		twi->result = TWIM_RESULT_BUS_ERROR;
    1eda:	94 e0       	ldi	r25, 0x04	; 4
    1edc:	90 8f       	std	Z+24, r25	; 0x18
    1ede:	e9 cf       	rjmp	.-46     	; 0x1eb2 <__vector_46+0x56>
 *  \param twi The TWI_Master_t struct instance.
 */
static void TWI_MasterWriteHandler()
{
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    1ee0:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
    1ee2:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    1ee4:	14 96       	adiw	r26, 0x04	; 4
    1ee6:	8c 91       	ld	r24, X
    1ee8:	14 97       	sbiw	r26, 0x04	; 4
    1eea:	84 fd       	sbrc	r24, 4
    1eec:	0d c0       	rjmp	.+26     	; 0x1f08 <__vector_46+0xac>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		twi->result = TWIM_RESULT_NACK_RECEIVED;
		twi->status = TWIM_STATUS_READY;
	}
	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    1eee:	85 89       	ldd	r24, Z+21	; 0x15
    1ef0:	89 17       	cp	r24, r25
    1ef2:	50 f1       	brcs	.+84     	; 0x1f48 <__vector_46+0xec>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    1ef4:	86 89       	ldd	r24, Z+22	; 0x16
    1ef6:	82 17       	cp	r24, r18
    1ef8:	d8 f1       	brcs	.+118    	; 0x1f70 <__vector_46+0x114>
		twi->interface->MASTER.ADDR = readAddress;
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1efa:	83 e0       	ldi	r24, 0x03	; 3
    1efc:	13 96       	adiw	r26, 0x03	; 3
    1efe:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1f04:	17 8a       	std	Z+23, r1	; 0x17
    1f06:	d9 cf       	rjmp	.-78     	; 0x1eba <__vector_46+0x5e>
	uint8_t bytesToWrite  = twi->bytesToWrite;
	uint8_t bytesToRead   = twi->bytesToRead;

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1f08:	83 e0       	ldi	r24, 0x03	; 3
    1f0a:	13 96       	adiw	r26, 0x03	; 3
    1f0c:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    1f0e:	85 e0       	ldi	r24, 0x05	; 5
    1f10:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
    1f12:	17 8a       	std	Z+23, r1	; 0x17
    1f14:	d2 cf       	rjmp	.-92     	; 0x1eba <__vector_46+0x5e>
 *  \param twi The TWI_Master_t struct instance.
 */
static void TWI_MasterReadHandler()
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    1f16:	86 89       	ldd	r24, Z+22	; 0x16
    1f18:	88 30       	cpi	r24, 0x08	; 8
    1f1a:	08 f5       	brcc	.+66     	; 0x1f5e <__vector_46+0x102>
		uint8_t data = twi->interface->MASTER.DATA;
    1f1c:	17 96       	adiw	r26, 0x07	; 7
    1f1e:	8c 91       	ld	r24, X
    1f20:	17 97       	sbiw	r26, 0x07	; 7
		twi->readData[twi->bytesRead] = data;
    1f22:	96 89       	ldd	r25, Z+22	; 0x16
    1f24:	ef 01       	movw	r28, r30
    1f26:	c9 0f       	add	r28, r25
    1f28:	d1 1d       	adc	r29, r1
    1f2a:	8b 87       	std	Y+11, r24	; 0x0b
		twi->bytesRead++;
    1f2c:	86 89       	ldd	r24, Z+22	; 0x16
    1f2e:	8f 5f       	subi	r24, 0xFF	; 255
    1f30:	86 8b       	std	Z+22, r24	; 0x16
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    1f32:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    1f34:	86 89       	ldd	r24, Z+22	; 0x16
    1f36:	89 17       	cp	r24, r25
    1f38:	00 f1       	brcs	.+64     	; 0x1f7a <__vector_46+0x11e>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    1f3a:	87 e0       	ldi	r24, 0x07	; 7
    1f3c:	13 96       	adiw	r26, 0x03	; 3
    1f3e:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1f44:	17 8a       	std	Z+23, r1	; 0x17
    1f46:	b9 cf       	rjmp	.-142    	; 0x1eba <__vector_46+0x5e>
		twi->result = TWIM_RESULT_NACK_RECEIVED;
		twi->status = TWIM_STATUS_READY;
	}
	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
		uint8_t data = twi->writeData[twi->bytesWritten];
    1f48:	85 89       	ldd	r24, Z+21	; 0x15
    1f4a:	ef 01       	movw	r28, r30
    1f4c:	c8 0f       	add	r28, r24
    1f4e:	d1 1d       	adc	r29, r1
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    1f52:	17 96       	adiw	r26, 0x07	; 7
    1f54:	8c 93       	st	X, r24
		++twi->bytesWritten;
    1f56:	85 89       	ldd	r24, Z+21	; 0x15
    1f58:	8f 5f       	subi	r24, 0xFF	; 255
    1f5a:	85 8b       	std	Z+21, r24	; 0x15
    1f5c:	ae cf       	rjmp	.-164    	; 0x1eba <__vector_46+0x5e>
		twi->bytesRead++;
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1f5e:	83 e0       	ldi	r24, 0x03	; 3
    1f60:	13 96       	adiw	r26, 0x03	; 3
    1f62:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
static void TWI_MasterTransactionFinished(uint8_t result)
{
	twi->result = result;
    1f64:	82 e0       	ldi	r24, 0x02	; 2
    1f66:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1f68:	17 8a       	std	Z+23, r1	; 0x17
    1f6a:	a0 81       	ld	r26, Z
    1f6c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f6e:	e1 cf       	rjmp	.-62     	; 0x1f32 <__vector_46+0xd6>

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
		uint8_t readAddress = twi->address | 0x01;
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    1f74:	16 96       	adiw	r26, 0x06	; 6
    1f76:	8c 93       	st	X, r24
    1f78:	a0 cf       	rjmp	.-192    	; 0x1eba <__vector_46+0x5e>
	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	13 96       	adiw	r26, 0x03	; 3
    1f7e:	8c 93       	st	X, r24
    1f80:	9c cf       	rjmp	.-200    	; 0x1eba <__vector_46+0x5e>

00001f82 <irTransmitComplete>:
    send_msg(dirs, data, dataLength, 1);
	return 1;
}

uint8_t hpIrCmd(uint8_t dirs, char *data, uint8_t dataLength){
	return all_hp_ir_cmds(dirs, data, dataLength, 0);
    1f82:	4f b7       	in	r20, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	e0 e0       	ldi	r30, 0x00	; 0
    1f88:	fb e0       	ldi	r31, 0x0B	; 11
    1f8a:	31 81       	ldd	r19, Z+1	; 0x01
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	dc 01       	movw	r26, r24
    1f90:	aa 50       	subi	r26, 0x0A	; 10
    1f92:	bf 4d       	sbci	r27, 0xDF	; 223
    1f94:	2c 91       	ld	r18, X
    1f96:	20 95       	com	r18
    1f98:	23 23       	and	r18, r19
    1f9a:	21 83       	std	Z+1, r18	; 0x01
    1f9c:	28 e3       	ldi	r18, 0x38	; 56
    1f9e:	28 9f       	mul	r18, r24
    1fa0:	f0 01       	movw	r30, r0
    1fa2:	29 9f       	mul	r18, r25
    1fa4:	f0 0d       	add	r31, r0
    1fa6:	11 24       	eor	r1, r1
    1fa8:	e7 50       	subi	r30, 0x07	; 7
    1faa:	fb 4d       	sbci	r31, 0xDB	; 219
    1fac:	17 aa       	std	Z+55, r1	; 0x37
    1fae:	16 aa       	std	Z+54, r1	; 0x36
    1fb0:	12 86       	std	Z+10, r1	; 0x0a
    1fb2:	13 86       	std	Z+11, r1	; 0x0b
    1fb4:	10 86       	std	Z+8, r1	; 0x08
    1fb6:	11 86       	std	Z+9, r1	; 0x09
    1fb8:	16 82       	std	Z+6, r1	; 0x06
    1fba:	17 82       	std	Z+7, r1	; 0x07
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	ea 5f       	subi	r30, 0xFA	; 250
    1fc4:	ff 4d       	sbci	r31, 0xDF	; 223
    1fc6:	01 90       	ld	r0, Z+
    1fc8:	f0 81       	ld	r31, Z
    1fca:	e0 2d       	mov	r30, r0
    1fcc:	81 81       	ldd	r24, Z+1	; 0x01
    1fce:	80 64       	ori	r24, 0x40	; 64
    1fd0:	81 83       	std	Z+1, r24	; 0x01
    1fd2:	84 81       	ldd	r24, Z+4	; 0x04
    1fd4:	80 61       	ori	r24, 0x10	; 16
    1fd6:	84 83       	std	Z+4, r24	; 0x04
    1fd8:	4f bf       	out	0x3f, r20	; 63
    1fda:	08 95       	ret

00001fdc <handleCmdWrapper>:
    1fdc:	ef 92       	push	r14
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	0d b7       	in	r16, 0x3d	; 61
    1fee:	1e b7       	in	r17, 0x3e	; 62
    1ff0:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <cmdLength>
    1ff4:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <cmdLength+0x1>
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	2d b7       	in	r18, 0x3d	; 61
    1ffc:	3e b7       	in	r19, 0x3e	; 62
    1ffe:	28 1b       	sub	r18, r24
    2000:	39 0b       	sbc	r19, r25
    2002:	2d bf       	out	0x3d, r18	; 61
    2004:	3e bf       	out	0x3e, r19	; 62
    2006:	8d b7       	in	r24, 0x3d	; 61
    2008:	9e b7       	in	r25, 0x3e	; 62
    200a:	01 96       	adiw	r24, 0x01	; 1
    200c:	7c 01       	movw	r14, r24
    200e:	40 91 28 23 	lds	r20, 0x2328	; 0x802328 <cmdLength>
    2012:	50 91 29 23 	lds	r21, 0x2329	; 0x802329 <cmdLength+0x1>
    2016:	4f 5f       	subi	r20, 0xFF	; 255
    2018:	5f 4f       	sbci	r21, 0xFF	; 255
    201a:	68 ee       	ldi	r22, 0xE8	; 232
    201c:	72 e2       	ldi	r23, 0x22	; 34
    201e:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <memcpy>
    2022:	60 91 28 23 	lds	r22, 0x2328	; 0x802328 <cmdLength>
    2026:	70 91 29 23 	lds	r23, 0x2329	; 0x802329 <cmdLength+0x1>
    202a:	c7 01       	movw	r24, r14
    202c:	0e 94 19 39 	call	0x7232	; 0x7232 <handleSerialCommand>
    2030:	8f b7       	in	r24, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	10 92 2b 23 	sts	0x232B, r1	; 0x80232b <processingCmdFlag>
    2038:	8f bf       	out	0x3f, r24	; 63
    203a:	0d bf       	out	0x3d, r16	; 61
    203c:	1e bf       	out	0x3e, r17	; 62
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	ef 90       	pop	r14
    204a:	08 95       	ret

0000204c <irTransmit>:
    204c:	8f 92       	push	r8
    204e:	9f 92       	push	r9
    2050:	af 92       	push	r10
    2052:	bf 92       	push	r11
    2054:	cf 92       	push	r12
    2056:	df 92       	push	r13
    2058:	ef 92       	push	r14
    205a:	ff 92       	push	r15
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	c8 2f       	mov	r28, r24
    2066:	d0 e0       	ldi	r29, 0x00	; 0
    2068:	98 e3       	ldi	r25, 0x38	; 56
    206a:	89 9f       	mul	r24, r25
    206c:	d0 01       	movw	r26, r0
    206e:	11 24       	eor	r1, r1
    2070:	a7 50       	subi	r26, 0x07	; 7
    2072:	bb 4d       	sbci	r27, 0xDB	; 219
    2074:	1a 96       	adiw	r26, 0x0a	; 10
    2076:	ed 91       	ld	r30, X+
    2078:	fc 91       	ld	r31, X
    207a:	1b 97       	sbiw	r26, 0x0b	; 11
    207c:	e7 30       	cpi	r30, 0x07	; 7
    207e:	f1 05       	cpc	r31, r1
    2080:	08 f4       	brcc	.+2      	; 0x2084 <irTransmit+0x38>
    2082:	50 c0       	rjmp	.+160    	; 0x2124 <irTransmit+0xd8>
    2084:	1a 96       	adiw	r26, 0x0a	; 10
    2086:	8d 91       	ld	r24, X+
    2088:	9c 91       	ld	r25, X
    208a:	1b 97       	sbiw	r26, 0x0b	; 11
    208c:	07 97       	sbiw	r24, 0x07	; 7
    208e:	a8 0f       	add	r26, r24
    2090:	b9 1f       	adc	r27, r25
    2092:	1e 96       	adiw	r26, 0x0e	; 14
    2094:	8c 91       	ld	r24, X
    2096:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <next_byte>
    209a:	fe 01       	movw	r30, r28
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	ea 5f       	subi	r30, 0xFA	; 250
    20a2:	ff 4d       	sbci	r31, 0xDF	; 223
    20a4:	a0 81       	ld	r26, Z
    20a6:	b1 81       	ldd	r27, Z+1	; 0x01
    20a8:	80 91 e7 22 	lds	r24, 0x22E7	; 0x8022e7 <next_byte>
    20ac:	8c 93       	st	X, r24
    20ae:	88 e3       	ldi	r24, 0x38	; 56
    20b0:	8c 9f       	mul	r24, r28
    20b2:	f0 01       	movw	r30, r0
    20b4:	8d 9f       	mul	r24, r29
    20b6:	f0 0d       	add	r31, r0
    20b8:	11 24       	eor	r1, r1
    20ba:	e7 50       	subi	r30, 0x07	; 7
    20bc:	fb 4d       	sbci	r31, 0xDB	; 219
    20be:	82 85       	ldd	r24, Z+10	; 0x0a
    20c0:	93 85       	ldd	r25, Z+11	; 0x0b
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	82 87       	std	Z+10, r24	; 0x0a
    20c6:	93 87       	std	Z+11, r25	; 0x0b
    20c8:	22 85       	ldd	r18, Z+10	; 0x0a
    20ca:	33 85       	ldd	r19, Z+11	; 0x0b
    20cc:	86 a9       	ldd	r24, Z+54	; 0x36
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	07 96       	adiw	r24, 0x07	; 7
    20d2:	28 17       	cp	r18, r24
    20d4:	39 07       	cpc	r19, r25
    20d6:	c8 f0       	brcs	.+50     	; 0x210a <irTransmit+0xbe>
    20d8:	14 82       	std	Z+4, r1	; 0x04
    20da:	15 82       	std	Z+5, r1	; 0x05
    20dc:	16 82       	std	Z+6, r1	; 0x06
    20de:	17 82       	std	Z+7, r1	; 0x07
    20e0:	10 86       	std	Z+8, r1	; 0x08
    20e2:	11 86       	std	Z+9, r1	; 0x09
    20e4:	12 86       	std	Z+10, r1	; 0x0a
    20e6:	13 86       	std	Z+11, r1	; 0x0b
    20e8:	14 86       	std	Z+12, r1	; 0x0c
    20ea:	15 86       	std	Z+13, r1	; 0x0d
    20ec:	16 aa       	std	Z+54, r1	; 0x36
    20ee:	17 aa       	std	Z+55, r1	; 0x37
    20f0:	14 96       	adiw	r26, 0x04	; 4
    20f2:	8c 91       	ld	r24, X
    20f4:	14 97       	sbiw	r26, 0x04	; 4
    20f6:	80 61       	ori	r24, 0x10	; 16
    20f8:	14 96       	adiw	r26, 0x04	; 4
    20fa:	8c 93       	st	X, r24
    20fc:	14 97       	sbiw	r26, 0x04	; 4
    20fe:	13 96       	adiw	r26, 0x03	; 3
    2100:	8c 91       	ld	r24, X
    2102:	13 97       	sbiw	r26, 0x03	; 3
    2104:	8c 7f       	andi	r24, 0xFC	; 252
    2106:	13 96       	adiw	r26, 0x03	; 3
    2108:	8c 93       	st	X, r24
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	ff 90       	pop	r15
    2114:	ef 90       	pop	r14
    2116:	df 90       	pop	r13
    2118:	cf 90       	pop	r12
    211a:	bf 90       	pop	r11
    211c:	af 90       	pop	r10
    211e:	9f 90       	pop	r9
    2120:	8f 90       	pop	r8
    2122:	08 95       	ret
    2124:	88 27       	eor	r24, r24
    2126:	e2 50       	subi	r30, 0x02	; 2
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	8f 4f       	sbci	r24, 0xFF	; 255
    212c:	0c 94 00 4c 	jmp	0x9800	; 0x9800 <__tablejump2__>
    2130:	88 e3       	ldi	r24, 0x38	; 56
    2132:	8c 9f       	mul	r24, r28
    2134:	f0 01       	movw	r30, r0
    2136:	8d 9f       	mul	r24, r29
    2138:	f0 0d       	add	r31, r0
    213a:	11 24       	eor	r1, r1
    213c:	e7 50       	subi	r30, 0x07	; 7
    213e:	fb 4d       	sbci	r31, 0xDB	; 219
    2140:	80 85       	ldd	r24, Z+8	; 0x08
    2142:	91 85       	ldd	r25, Z+9	; 0x09
    2144:	90 93 e7 22 	sts	0x22E7, r25	; 0x8022e7 <next_byte>
    2148:	a8 cf       	rjmp	.-176    	; 0x209a <irTransmit+0x4e>
    214a:	88 e3       	ldi	r24, 0x38	; 56
    214c:	8c 9f       	mul	r24, r28
    214e:	80 01       	movw	r16, r0
    2150:	8d 9f       	mul	r24, r29
    2152:	10 0d       	add	r17, r0
    2154:	11 24       	eor	r1, r1
    2156:	07 50       	subi	r16, 0x07	; 7
    2158:	1b 4d       	sbci	r17, 0xDB	; 219
    215a:	f8 01       	movw	r30, r16
    215c:	87 a9       	ldd	r24, Z+55	; 0x37
    215e:	86 fd       	sbrc	r24, 6
    2160:	5c c0       	rjmp	.+184    	; 0x221a <irTransmit+0x1ce>
    2162:	88 e3       	ldi	r24, 0x38	; 56
    2164:	8c 9f       	mul	r24, r28
    2166:	f0 01       	movw	r30, r0
    2168:	8d 9f       	mul	r24, r29
    216a:	f0 0d       	add	r31, r0
    216c:	11 24       	eor	r1, r1
    216e:	e7 50       	subi	r30, 0x07	; 7
    2170:	fb 4d       	sbci	r31, 0xDB	; 219
    2172:	80 85       	ldd	r24, Z+8	; 0x08
    2174:	91 85       	ldd	r25, Z+9	; 0x09
    2176:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <next_byte>
    217a:	8f cf       	rjmp	.-226    	; 0x209a <irTransmit+0x4e>
    217c:	88 e3       	ldi	r24, 0x38	; 56
    217e:	8c 9f       	mul	r24, r28
    2180:	f0 01       	movw	r30, r0
    2182:	8d 9f       	mul	r24, r29
    2184:	f0 0d       	add	r31, r0
    2186:	11 24       	eor	r1, r1
    2188:	e7 50       	subi	r30, 0x07	; 7
    218a:	fb 4d       	sbci	r31, 0xDB	; 219
    218c:	86 81       	ldd	r24, Z+6	; 0x06
    218e:	97 81       	ldd	r25, Z+7	; 0x07
    2190:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <next_byte>
    2194:	82 cf       	rjmp	.-252    	; 0x209a <irTransmit+0x4e>
    2196:	88 e3       	ldi	r24, 0x38	; 56
    2198:	8c 9f       	mul	r24, r28
    219a:	f0 01       	movw	r30, r0
    219c:	8d 9f       	mul	r24, r29
    219e:	f0 0d       	add	r31, r0
    21a0:	11 24       	eor	r1, r1
    21a2:	e7 50       	subi	r30, 0x07	; 7
    21a4:	fb 4d       	sbci	r31, 0xDB	; 219
    21a6:	86 81       	ldd	r24, Z+6	; 0x06
    21a8:	97 81       	ldd	r25, Z+7	; 0x07
    21aa:	90 93 e7 22 	sts	0x22E7, r25	; 0x8022e7 <next_byte>
    21ae:	75 cf       	rjmp	.-278    	; 0x209a <irTransmit+0x4e>
    21b0:	88 e3       	ldi	r24, 0x38	; 56
    21b2:	8c 9f       	mul	r24, r28
    21b4:	f0 01       	movw	r30, r0
    21b6:	8d 9f       	mul	r24, r29
    21b8:	f0 0d       	add	r31, r0
    21ba:	11 24       	eor	r1, r1
    21bc:	e7 50       	subi	r30, 0x07	; 7
    21be:	fb 4d       	sbci	r31, 0xDB	; 219
    21c0:	84 81       	ldd	r24, Z+4	; 0x04
    21c2:	95 81       	ldd	r25, Z+5	; 0x05
    21c4:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <next_byte>
    21c8:	68 cf       	rjmp	.-304    	; 0x209a <irTransmit+0x4e>
    21ca:	88 e3       	ldi	r24, 0x38	; 56
    21cc:	8c 9f       	mul	r24, r28
    21ce:	f0 01       	movw	r30, r0
    21d0:	8d 9f       	mul	r24, r29
    21d2:	f0 0d       	add	r31, r0
    21d4:	11 24       	eor	r1, r1
    21d6:	e7 50       	subi	r30, 0x07	; 7
    21d8:	fb 4d       	sbci	r31, 0xDB	; 219
    21da:	84 81       	ldd	r24, Z+4	; 0x04
    21dc:	95 81       	ldd	r25, Z+5	; 0x05
    21de:	90 93 e7 22 	sts	0x22E7, r25	; 0x8022e7 <next_byte>
    21e2:	5b cf       	rjmp	.-330    	; 0x209a <irTransmit+0x4e>
    21e4:	88 e3       	ldi	r24, 0x38	; 56
    21e6:	8c 9f       	mul	r24, r28
    21e8:	f0 01       	movw	r30, r0
    21ea:	8d 9f       	mul	r24, r29
    21ec:	f0 0d       	add	r31, r0
    21ee:	11 24       	eor	r1, r1
    21f0:	e7 50       	subi	r30, 0x07	; 7
    21f2:	fb 4d       	sbci	r31, 0xDB	; 219
    21f4:	86 a9       	ldd	r24, Z+54	; 0x36
    21f6:	8f 73       	andi	r24, 0x3F	; 63
    21f8:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <next_byte>
    21fc:	87 a9       	ldd	r24, Z+55	; 0x37
    21fe:	90 91 e7 22 	lds	r25, 0x22E7	; 0x8022e7 <next_byte>
    2202:	80 78       	andi	r24, 0x80	; 128
    2204:	89 2b       	or	r24, r25
    2206:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <next_byte>
    220a:	87 a9       	ldd	r24, Z+55	; 0x37
    220c:	90 91 e7 22 	lds	r25, 0x22E7	; 0x8022e7 <next_byte>
    2210:	80 74       	andi	r24, 0x40	; 64
    2212:	89 2b       	or	r24, r25
    2214:	80 93 e7 22 	sts	0x22E7, r24	; 0x8022e7 <next_byte>
    2218:	40 cf       	rjmp	.-384    	; 0x209a <irTransmit+0x4e>
    221a:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    221e:	f8 01       	movw	r30, r16
    2220:	c0 84       	ldd	r12, Z+8	; 0x08
    2222:	d1 84       	ldd	r13, Z+9	; 0x09
    2224:	4b 01       	movw	r8, r22
    2226:	5c 01       	movw	r10, r24
    2228:	aa 24       	eor	r10, r10
    222a:	bb 24       	eor	r11, r11
    222c:	e1 2c       	mov	r14, r1
    222e:	f1 2c       	mov	r15, r1
    2230:	8c 14       	cp	r8, r12
    2232:	9d 04       	cpc	r9, r13
    2234:	ae 04       	cpc	r10, r14
    2236:	bf 04       	cpc	r11, r15
    2238:	a8 f0       	brcs	.+42     	; 0x2264 <irTransmit+0x218>
    223a:	20 85       	ldd	r18, Z+8	; 0x08
    223c:	31 85       	ldd	r19, Z+9	; 0x09
    223e:	62 1b       	sub	r22, r18
    2240:	73 0b       	sbc	r23, r19
    2242:	61 33       	cpi	r22, 0x31	; 49
    2244:	f5 e7       	ldi	r31, 0x75	; 117
    2246:	7f 07       	cpc	r23, r31
    2248:	10 f0       	brcs	.+4      	; 0x224e <irTransmit+0x202>
    224a:	60 ef       	ldi	r22, 0xF0	; 240
    224c:	7f ef       	ldi	r23, 0xFF	; 255
    224e:	88 e3       	ldi	r24, 0x38	; 56
    2250:	8c 9f       	mul	r24, r28
    2252:	f0 01       	movw	r30, r0
    2254:	8d 9f       	mul	r24, r29
    2256:	f0 0d       	add	r31, r0
    2258:	11 24       	eor	r1, r1
    225a:	e7 50       	subi	r30, 0x07	; 7
    225c:	fb 4d       	sbci	r31, 0xDB	; 219
    225e:	60 87       	std	Z+8, r22	; 0x08
    2260:	71 87       	std	Z+9, r23	; 0x09
    2262:	7f cf       	rjmp	.-258    	; 0x2162 <irTransmit+0x116>
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	f2 cf       	rjmp	.-28     	; 0x224e <irTransmit+0x202>

0000226a <irCommInit>:
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	94 e4       	ldi	r25, 0x44	; 68
    2270:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    2274:	84 e0       	ldi	r24, 0x04	; 4
    2276:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
    227a:	90 93 82 06 	sts	0x0682, r25	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
    227e:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    2282:	8f b7       	in	r24, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	9f e3       	ldi	r25, 0x3F	; 63
    2288:	90 93 7b 24 	sts	0x247B, r25	; 0x80247b <hpIrBlock_bm>
    228c:	8f bf       	out	0x3f, r24	; 63
    228e:	c6 e0       	ldi	r28, 0x06	; 6
    2290:	d0 e2       	ldi	r29, 0x20	; 32
    2292:	62 e1       	ldi	r22, 0x12	; 18
    2294:	70 e2       	ldi	r23, 0x20	; 32
    2296:	de 01       	movw	r26, r28
    2298:	48 e2       	ldi	r20, 0x28	; 40
    229a:	33 e0       	ldi	r19, 0x03	; 3
    229c:	20 e7       	ldi	r18, 0x70	; 112
    229e:	92 e0       	ldi	r25, 0x02	; 2
    22a0:	ed 91       	ld	r30, X+
    22a2:	fd 91       	ld	r31, X+
    22a4:	43 83       	std	Z+3, r20	; 0x03
    22a6:	35 83       	std	Z+5, r19	; 0x05
    22a8:	26 83       	std	Z+6, r18	; 0x06
    22aa:	97 83       	std	Z+7, r25	; 0x07
    22ac:	84 81       	ldd	r24, Z+4	; 0x04
    22ae:	80 61       	ori	r24, 0x10	; 16
    22b0:	84 83       	std	Z+4, r24	; 0x04
    22b2:	84 81       	ldd	r24, Z+4	; 0x04
    22b4:	88 60       	ori	r24, 0x08	; 8
    22b6:	84 83       	std	Z+4, r24	; 0x04
    22b8:	6a 17       	cp	r22, r26
    22ba:	7b 07       	cpc	r23, r27
    22bc:	89 f7       	brne	.-30     	; 0x22a0 <irCommInit+0x36>
    22be:	10 92 89 26 	sts	0x2689, r1	; 0x802689 <cmdArrivalTime>
    22c2:	10 92 8a 26 	sts	0x268A, r1	; 0x80268a <cmdArrivalTime+0x1>
    22c6:	10 92 8b 26 	sts	0x268B, r1	; 0x80268b <cmdArrivalTime+0x2>
    22ca:	10 92 8c 26 	sts	0x268C, r1	; 0x80268c <cmdArrivalTime+0x3>
    22ce:	10 92 f6 24 	sts	0x24F6, r1	; 0x8024f6 <numWaitingMsgs>
    22d2:	10 92 49 26 	sts	0x2649, r1	; 0x802649 <userFacingMessagesOvf>
    22d6:	10 92 2b 23 	sts	0x232B, r1	; 0x80232b <processingCmdFlag>
    22da:	10 92 2a 23 	sts	0x232A, r1	; 0x80232a <processingFFsyncFlag>
    22de:	10 92 7b 26 	sts	0x267B, r1	; 0x80267b <incomingMsgHead>
    22e2:	10 92 7c 26 	sts	0x267C, r1	; 0x80267c <incomingMsgHead+0x1>
    22e6:	10 92 a1 24 	sts	0x24A1, r1	; 0x8024a1 <memoryConsumedByBuffer>
    22ea:	10 92 a2 24 	sts	0x24A2, r1	; 0x8024a2 <memoryConsumedByBuffer+0x1>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	38 e3       	ldi	r19, 0x38	; 56
    22f4:	38 9f       	mul	r19, r24
    22f6:	f0 01       	movw	r30, r0
    22f8:	39 9f       	mul	r19, r25
    22fa:	f0 0d       	add	r31, r0
    22fc:	11 24       	eor	r1, r1
    22fe:	e7 50       	subi	r30, 0x07	; 7
    2300:	fb 4d       	sbci	r31, 0xDB	; 219
    2302:	14 82       	std	Z+4, r1	; 0x04
    2304:	15 82       	std	Z+5, r1	; 0x05
    2306:	16 82       	std	Z+6, r1	; 0x06
    2308:	17 82       	std	Z+7, r1	; 0x07
    230a:	10 86       	std	Z+8, r1	; 0x08
    230c:	11 86       	std	Z+9, r1	; 0x09
    230e:	12 86       	std	Z+10, r1	; 0x0a
    2310:	13 86       	std	Z+11, r1	; 0x0b
    2312:	14 86       	std	Z+12, r1	; 0x0c
    2314:	15 86       	std	Z+13, r1	; 0x0d
    2316:	16 aa       	std	Z+54, r1	; 0x36
    2318:	17 aa       	std	Z+55, r1	; 0x37
    231a:	e9 91       	ld	r30, Y+
    231c:	f9 91       	ld	r31, Y+
    231e:	24 81       	ldd	r18, Z+4	; 0x04
    2320:	20 61       	ori	r18, 0x10	; 16
    2322:	24 83       	std	Z+4, r18	; 0x04
    2324:	01 96       	adiw	r24, 0x01	; 1
    2326:	86 30       	cpi	r24, 0x06	; 6
    2328:	91 05       	cpc	r25, r1
    232a:	21 f7       	brne	.-56     	; 0x22f4 <irCommInit+0x8a>
    232c:	8f b7       	in	r24, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	10 92 7b 24 	sts	0x247B, r1	; 0x80247b <hpIrBlock_bm>
    2334:	8f bf       	out	0x3f, r24	; 63
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	08 95       	ret

0000233c <send_msg>:
    233c:	2f 92       	push	r2
    233e:	3f 92       	push	r3
    2340:	4f 92       	push	r4
    2342:	5f 92       	push	r5
    2344:	6f 92       	push	r6
    2346:	7f 92       	push	r7
    2348:	8f 92       	push	r8
    234a:	9f 92       	push	r9
    234c:	af 92       	push	r10
    234e:	bf 92       	push	r11
    2350:	cf 92       	push	r12
    2352:	df 92       	push	r13
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	e8 2e       	mov	r14, r24
    2362:	4b 01       	movw	r8, r22
    2364:	34 2e       	mov	r3, r20
    2366:	22 2e       	mov	r2, r18
    2368:	88 e2       	ldi	r24, 0x28	; 40
    236a:	84 17       	cp	r24, r20
    236c:	08 f4       	brcc	.+2      	; 0x2370 <send_msg+0x34>
    236e:	bf c0       	rjmp	.+382    	; 0x24ee <send_msg+0x1b2>
    2370:	60 90 6a 24 	lds	r6, 0x246A	; 0x80246a <droplet_ID>
    2374:	70 90 6b 24 	lds	r7, 0x246B	; 0x80246b <droplet_ID+0x1>
    2378:	f1 2c       	mov	r15, r1
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	97 01       	movw	r18, r14
    2380:	08 2e       	mov	r0, r24
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <send_msg+0x4c>
    2384:	35 95       	asr	r19
    2386:	27 95       	ror	r18
    2388:	0a 94       	dec	r0
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <send_msg+0x48>
    238c:	20 fd       	sbrc	r18, 0
    238e:	b8 c0       	rjmp	.+368    	; 0x2500 <send_msg+0x1c4>
    2390:	01 96       	adiw	r24, 0x01	; 1
    2392:	86 30       	cpi	r24, 0x06	; 6
    2394:	91 05       	cpc	r25, r1
    2396:	99 f7       	brne	.-26     	; 0x237e <send_msg+0x42>
    2398:	e3 01       	movw	r28, r6
    239a:	33 20       	and	r3, r3
    239c:	19 f1       	breq	.+70     	; 0x23e4 <send_msg+0xa8>
    239e:	f4 01       	movw	r30, r8
    23a0:	2f ef       	ldi	r18, 0xFF	; 255
    23a2:	23 0d       	add	r18, r3
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	2f 5f       	subi	r18, 0xFF	; 255
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	28 0d       	add	r18, r8
    23ac:	39 1d       	adc	r19, r9
    23ae:	81 91       	ld	r24, Z+
    23b0:	c8 27       	eor	r28, r24
    23b2:	8c 2f       	mov	r24, r28
    23b4:	82 95       	swap	r24
    23b6:	8c 27       	eor	r24, r28
    23b8:	08 2e       	mov	r0, r24
    23ba:	86 95       	lsr	r24
    23bc:	86 95       	lsr	r24
    23be:	80 25       	eor	r24, r0
    23c0:	08 2e       	mov	r0, r24
    23c2:	86 95       	lsr	r24
    23c4:	80 25       	eor	r24, r0
    23c6:	87 70       	andi	r24, 0x07	; 7
    23c8:	0c 2e       	mov	r0, r28
    23ca:	cd 2f       	mov	r28, r29
    23cc:	86 95       	lsr	r24
    23ce:	07 94       	ror	r0
    23d0:	87 95       	ror	r24
    23d2:	d0 2d       	mov	r29, r0
    23d4:	c8 27       	eor	r28, r24
    23d6:	06 94       	lsr	r0
    23d8:	87 95       	ror	r24
    23da:	d0 25       	eor	r29, r0
    23dc:	c8 27       	eor	r28, r24
    23de:	e2 17       	cp	r30, r18
    23e0:	f3 07       	cpc	r31, r19
    23e2:	29 f7       	brne	.-54     	; 0x23ae <send_msg+0x72>
    23e4:	87 e0       	ldi	r24, 0x07	; 7
    23e6:	a8 2e       	mov	r10, r24
    23e8:	85 e2       	ldi	r24, 0x25	; 37
    23ea:	b8 2e       	mov	r11, r24
    23ec:	96 ef       	ldi	r25, 0xF6	; 246
    23ee:	c9 2e       	mov	r12, r25
    23f0:	90 e2       	ldi	r25, 0x20	; 32
    23f2:	d9 2e       	mov	r13, r25
    23f4:	00 e0       	ldi	r16, 0x00	; 0
    23f6:	10 e0       	ldi	r17, 0x00	; 0
    23f8:	43 2c       	mov	r4, r3
    23fa:	51 2c       	mov	r5, r1
    23fc:	0b c0       	rjmp	.+22     	; 0x2414 <send_msg+0xd8>
    23fe:	0f 5f       	subi	r16, 0xFF	; 255
    2400:	1f 4f       	sbci	r17, 0xFF	; 255
    2402:	f8 e3       	ldi	r31, 0x38	; 56
    2404:	af 0e       	add	r10, r31
    2406:	b1 1c       	adc	r11, r1
    2408:	8f ef       	ldi	r24, 0xFF	; 255
    240a:	c8 1a       	sub	r12, r24
    240c:	d8 0a       	sbc	r13, r24
    240e:	06 30       	cpi	r16, 0x06	; 6
    2410:	11 05       	cpc	r17, r1
    2412:	41 f1       	breq	.+80     	; 0x2464 <send_msg+0x128>
    2414:	c7 01       	movw	r24, r14
    2416:	00 2e       	mov	r0, r16
    2418:	02 c0       	rjmp	.+4      	; 0x241e <send_msg+0xe2>
    241a:	95 95       	asr	r25
    241c:	87 95       	ror	r24
    241e:	0a 94       	dec	r0
    2420:	e2 f7       	brpl	.-8      	; 0x241a <send_msg+0xde>
    2422:	80 ff       	sbrs	r24, 0
    2424:	ec cf       	rjmp	.-40     	; 0x23fe <send_msg+0xc2>
    2426:	88 e3       	ldi	r24, 0x38	; 56
    2428:	80 9f       	mul	r24, r16
    242a:	f0 01       	movw	r30, r0
    242c:	81 9f       	mul	r24, r17
    242e:	f0 0d       	add	r31, r0
    2430:	11 24       	eor	r1, r1
    2432:	e7 50       	subi	r30, 0x07	; 7
    2434:	fb 4d       	sbci	r31, 0xDB	; 219
    2436:	87 a9       	ldd	r24, Z+55	; 0x37
    2438:	80 62       	ori	r24, 0x20	; 32
    243a:	87 ab       	std	Z+55, r24	; 0x37
    243c:	36 aa       	std	Z+54, r3	; 0x36
    243e:	c4 83       	std	Z+4, r28	; 0x04
    2440:	d5 83       	std	Z+5, r29	; 0x05
    2442:	12 86       	std	Z+10, r1	; 0x0a
    2444:	13 86       	std	Z+11, r1	; 0x0b
    2446:	66 82       	std	Z+6, r6	; 0x06
    2448:	77 82       	std	Z+7, r7	; 0x07
    244a:	a2 01       	movw	r20, r4
    244c:	b4 01       	movw	r22, r8
    244e:	c5 01       	movw	r24, r10
    2450:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <memcpy>
    2454:	90 91 01 0b 	lds	r25, 0x0B01	; 0x800b01 <__TEXT_REGION_LENGTH__+0x700b01>
    2458:	f6 01       	movw	r30, r12
    245a:	80 81       	ld	r24, Z
    245c:	89 2b       	or	r24, r25
    245e:	80 93 01 0b 	sts	0x0B01, r24	; 0x800b01 <__TEXT_REGION_LENGTH__+0x700b01>
    2462:	cd cf       	rjmp	.-102    	; 0x23fe <send_msg+0xc2>
    2464:	e6 e0       	ldi	r30, 0x06	; 6
    2466:	f0 e2       	ldi	r31, 0x20	; 32
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	48 e3       	ldi	r20, 0x38	; 56
    246e:	08 c0       	rjmp	.+16     	; 0x2480 <send_msg+0x144>
    2470:	23 60       	ori	r18, 0x03	; 3
    2472:	13 96       	adiw	r26, 0x03	; 3
    2474:	2c 93       	st	X, r18
    2476:	01 96       	adiw	r24, 0x01	; 1
    2478:	32 96       	adiw	r30, 0x02	; 2
    247a:	86 30       	cpi	r24, 0x06	; 6
    247c:	91 05       	cpc	r25, r1
    247e:	21 f1       	breq	.+72     	; 0x24c8 <send_msg+0x18c>
    2480:	97 01       	movw	r18, r14
    2482:	08 2e       	mov	r0, r24
    2484:	02 c0       	rjmp	.+4      	; 0x248a <send_msg+0x14e>
    2486:	35 95       	asr	r19
    2488:	27 95       	ror	r18
    248a:	0a 94       	dec	r0
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <send_msg+0x14a>
    248e:	20 ff       	sbrs	r18, 0
    2490:	f2 cf       	rjmp	.-28     	; 0x2476 <send_msg+0x13a>
    2492:	48 9f       	mul	r20, r24
    2494:	d0 01       	movw	r26, r0
    2496:	49 9f       	mul	r20, r25
    2498:	b0 0d       	add	r27, r0
    249a:	11 24       	eor	r1, r1
    249c:	a7 50       	subi	r26, 0x07	; 7
    249e:	bb 4d       	sbci	r27, 0xDB	; 219
    24a0:	1d 92       	st	X+, r1
    24a2:	1d 92       	st	X+, r1
    24a4:	1d 92       	st	X+, r1
    24a6:	1c 92       	st	X, r1
    24a8:	13 97       	sbiw	r26, 0x03	; 3
    24aa:	a0 81       	ld	r26, Z
    24ac:	b1 81       	ldd	r27, Z+1	; 0x01
    24ae:	13 96       	adiw	r26, 0x03	; 3
    24b0:	2c 91       	ld	r18, X
    24b2:	13 97       	sbiw	r26, 0x03	; 3
    24b4:	21 10       	cpse	r2, r1
    24b6:	dc cf       	rjmp	.-72     	; 0x2470 <send_msg+0x134>
    24b8:	22 60       	ori	r18, 0x02	; 2
    24ba:	13 96       	adiw	r26, 0x03	; 3
    24bc:	2c 93       	st	X, r18
    24be:	01 96       	adiw	r24, 0x01	; 1
    24c0:	32 96       	adiw	r30, 0x02	; 2
    24c2:	86 30       	cpi	r24, 0x06	; 6
    24c4:	91 05       	cpc	r25, r1
    24c6:	e1 f6       	brne	.-72     	; 0x2480 <send_msg+0x144>
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	df 90       	pop	r13
    24d6:	cf 90       	pop	r12
    24d8:	bf 90       	pop	r11
    24da:	af 90       	pop	r10
    24dc:	9f 90       	pop	r9
    24de:	8f 90       	pop	r8
    24e0:	7f 90       	pop	r7
    24e2:	6f 90       	pop	r6
    24e4:	5f 90       	pop	r5
    24e6:	4f 90       	pop	r4
    24e8:	3f 90       	pop	r3
    24ea:	2f 90       	pop	r2
    24ec:	08 95       	ret
    24ee:	8c e8       	ldi	r24, 0x8C	; 140
    24f0:	96 e0       	ldi	r25, 0x06	; 6
    24f2:	9f 93       	push	r25
    24f4:	8f 93       	push	r24
    24f6:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	38 cf       	rjmp	.-400    	; 0x2370 <send_msg+0x34>
    2500:	28 e3       	ldi	r18, 0x38	; 56
    2502:	28 9f       	mul	r18, r24
    2504:	f0 01       	movw	r30, r0
    2506:	29 9f       	mul	r18, r25
    2508:	f0 0d       	add	r31, r0
    250a:	11 24       	eor	r1, r1
    250c:	e7 50       	subi	r30, 0x07	; 7
    250e:	fb 4d       	sbci	r31, 0xDB	; 219
    2510:	87 a9       	ldd	r24, Z+55	; 0x37
    2512:	80 7c       	andi	r24, 0xC0	; 192
    2514:	e3 01       	movw	r28, r6
    2516:	c8 27       	eor	r28, r24
    2518:	8c 2f       	mov	r24, r28
    251a:	82 95       	swap	r24
    251c:	8c 27       	eor	r24, r28
    251e:	08 2e       	mov	r0, r24
    2520:	86 95       	lsr	r24
    2522:	86 95       	lsr	r24
    2524:	80 25       	eor	r24, r0
    2526:	08 2e       	mov	r0, r24
    2528:	86 95       	lsr	r24
    252a:	80 25       	eor	r24, r0
    252c:	87 70       	andi	r24, 0x07	; 7
    252e:	0c 2e       	mov	r0, r28
    2530:	cd 2f       	mov	r28, r29
    2532:	86 95       	lsr	r24
    2534:	07 94       	ror	r0
    2536:	87 95       	ror	r24
    2538:	d0 2d       	mov	r29, r0
    253a:	c8 27       	eor	r28, r24
    253c:	06 94       	lsr	r0
    253e:	87 95       	ror	r24
    2540:	d0 25       	eor	r29, r0
    2542:	c8 27       	eor	r28, r24
    2544:	87 a9       	ldd	r24, Z+55	; 0x37
    2546:	86 fd       	sbrc	r24, 6
    2548:	28 cf       	rjmp	.-432    	; 0x239a <send_msg+0x5e>
    254a:	80 85       	ldd	r24, Z+8	; 0x08
    254c:	91 85       	ldd	r25, Z+9	; 0x09
    254e:	c8 27       	eor	r28, r24
    2550:	8c 2f       	mov	r24, r28
    2552:	82 95       	swap	r24
    2554:	8c 27       	eor	r24, r28
    2556:	08 2e       	mov	r0, r24
    2558:	86 95       	lsr	r24
    255a:	86 95       	lsr	r24
    255c:	80 25       	eor	r24, r0
    255e:	08 2e       	mov	r0, r24
    2560:	86 95       	lsr	r24
    2562:	80 25       	eor	r24, r0
    2564:	87 70       	andi	r24, 0x07	; 7
    2566:	0c 2e       	mov	r0, r28
    2568:	cd 2f       	mov	r28, r29
    256a:	86 95       	lsr	r24
    256c:	07 94       	ror	r0
    256e:	87 95       	ror	r24
    2570:	d0 2d       	mov	r29, r0
    2572:	c8 27       	eor	r28, r24
    2574:	06 94       	lsr	r0
    2576:	87 95       	ror	r24
    2578:	d0 25       	eor	r29, r0
    257a:	c8 27       	eor	r28, r24
    257c:	0e cf       	rjmp	.-484    	; 0x239a <send_msg+0x5e>

0000257e <waitForTransmission>:
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	78 e3       	ldi	r23, 0x38	; 56
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	ac 01       	movw	r20, r24
    258a:	02 2e       	mov	r0, r18
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <waitForTransmission+0x14>
    258e:	55 95       	asr	r21
    2590:	47 95       	ror	r20
    2592:	0a 94       	dec	r0
    2594:	e2 f7       	brpl	.-8      	; 0x258e <waitForTransmission+0x10>
    2596:	40 ff       	sbrs	r20, 0
    2598:	0a c0       	rjmp	.+20     	; 0x25ae <waitForTransmission+0x30>
    259a:	72 9f       	mul	r23, r18
    259c:	f0 01       	movw	r30, r0
    259e:	73 9f       	mul	r23, r19
    25a0:	f0 0d       	add	r31, r0
    25a2:	11 24       	eor	r1, r1
    25a4:	e7 50       	subi	r30, 0x07	; 7
    25a6:	fb 4d       	sbci	r31, 0xDB	; 219
    25a8:	47 a9       	ldd	r20, Z+55	; 0x37
    25aa:	45 fd       	sbrc	r20, 5
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	2f 5f       	subi	r18, 0xFF	; 255
    25b0:	3f 4f       	sbci	r19, 0xFF	; 255
    25b2:	26 30       	cpi	r18, 0x06	; 6
    25b4:	31 05       	cpc	r19, r1
    25b6:	41 f7       	brne	.-48     	; 0x2588 <waitForTransmission+0xa>
    25b8:	ef e1       	ldi	r30, 0x1F	; 31
    25ba:	f3 e0       	ldi	r31, 0x03	; 3
    25bc:	31 97       	sbiw	r30, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <waitForTransmission+0x3e>
    25c0:	00 c0       	rjmp	.+0      	; 0x25c2 <waitForTransmission+0x44>
    25c2:	00 00       	nop
    25c4:	61 11       	cpse	r22, r1
    25c6:	dd cf       	rjmp	.-70     	; 0x2582 <waitForTransmission+0x4>
    25c8:	08 95       	ret

000025ca <irIsBusy>:
    25ca:	4f 92       	push	r4
    25cc:	5f 92       	push	r5
    25ce:	6f 92       	push	r6
    25d0:	7f 92       	push	r7
    25d2:	8f 92       	push	r8
    25d4:	9f 92       	push	r9
    25d6:	af 92       	push	r10
    25d8:	bf 92       	push	r11
    25da:	ff 92       	push	r15
    25dc:	0f 93       	push	r16
    25de:	1f 93       	push	r17
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	c8 2f       	mov	r28, r24
    25e6:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    25ea:	20 91 7b 24 	lds	r18, 0x247B	; 0x80247b <hpIrBlock_bm>
    25ee:	2c 23       	and	r18, r28
    25f0:	09 f0       	breq	.+2      	; 0x25f4 <irIsBusy+0x2a>
    25f2:	59 c0       	rjmp	.+178    	; 0x26a6 <irIsBusy+0xdc>
    25f4:	d0 e0       	ldi	r29, 0x00	; 0
    25f6:	ac 2f       	mov	r26, r28
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	10 e0       	ldi	r17, 0x00	; 0
    2600:	00 e0       	ldi	r16, 0x00	; 0
    2602:	c0 e0       	ldi	r28, 0x00	; 0
    2604:	48 e3       	ldi	r20, 0x38	; 56
    2606:	f4 2e       	mov	r15, r20
    2608:	ad 01       	movw	r20, r26
    260a:	02 2e       	mov	r0, r18
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <irIsBusy+0x48>
    260e:	55 95       	asr	r21
    2610:	47 95       	ror	r20
    2612:	0a 94       	dec	r0
    2614:	e2 f7       	brpl	.-8      	; 0x260e <irIsBusy+0x44>
    2616:	40 ff       	sbrs	r20, 0
    2618:	2f c0       	rjmp	.+94     	; 0x2678 <irIsBusy+0xae>
    261a:	f2 9e       	mul	r15, r18
    261c:	f0 01       	movw	r30, r0
    261e:	f3 9e       	mul	r15, r19
    2620:	f0 0d       	add	r31, r0
    2622:	11 24       	eor	r1, r1
    2624:	e7 50       	subi	r30, 0x07	; 7
    2626:	fb 4d       	sbci	r31, 0xDB	; 219
    2628:	47 a9       	ldd	r20, Z+55	; 0x37
    262a:	46 ff       	sbrs	r20, 6
    262c:	03 c0       	rjmp	.+6      	; 0x2634 <irIsBusy+0x6a>
    262e:	47 a9       	ldd	r20, Z+55	; 0x37
    2630:	47 fd       	sbrc	r20, 7
    2632:	3b c0       	rjmp	.+118    	; 0x26aa <irIsBusy+0xe0>
    2634:	f2 9e       	mul	r15, r18
    2636:	f0 01       	movw	r30, r0
    2638:	f3 9e       	mul	r15, r19
    263a:	f0 0d       	add	r31, r0
    263c:	11 24       	eor	r1, r1
    263e:	e7 50       	subi	r30, 0x07	; 7
    2640:	fb 4d       	sbci	r31, 0xDB	; 219
    2642:	47 a9       	ldd	r20, Z+55	; 0x37
    2644:	45 fd       	sbrc	r20, 5
    2646:	c2 e0       	ldi	r28, 0x02	; 2
    2648:	f2 9e       	mul	r15, r18
    264a:	f0 01       	movw	r30, r0
    264c:	f3 9e       	mul	r15, r19
    264e:	f0 0d       	add	r31, r0
    2650:	11 24       	eor	r1, r1
    2652:	e7 50       	subi	r30, 0x07	; 7
    2654:	fb 4d       	sbci	r31, 0xDB	; 219
    2656:	80 80       	ld	r8, Z
    2658:	91 80       	ldd	r9, Z+1	; 0x01
    265a:	a2 80       	ldd	r10, Z+2	; 0x02
    265c:	b3 80       	ldd	r11, Z+3	; 0x03
    265e:	2b 01       	movw	r4, r22
    2660:	3c 01       	movw	r6, r24
    2662:	48 18       	sub	r4, r8
    2664:	59 08       	sbc	r5, r9
    2666:	6a 08       	sbc	r6, r10
    2668:	7b 08       	sbc	r7, r11
    266a:	40 e1       	ldi	r20, 0x10	; 16
    266c:	44 16       	cp	r4, r20
    266e:	51 04       	cpc	r5, r1
    2670:	61 04       	cpc	r6, r1
    2672:	71 04       	cpc	r7, r1
    2674:	08 f4       	brcc	.+2      	; 0x2678 <irIsBusy+0xae>
    2676:	01 e0       	ldi	r16, 0x01	; 1
    2678:	2f 5f       	subi	r18, 0xFF	; 255
    267a:	3f 4f       	sbci	r19, 0xFF	; 255
    267c:	26 30       	cpi	r18, 0x06	; 6
    267e:	31 05       	cpc	r19, r1
    2680:	19 f6       	brne	.-122    	; 0x2608 <irIsBusy+0x3e>
    2682:	80 2f       	mov	r24, r16
    2684:	81 2b       	or	r24, r17
    2686:	8d 2b       	or	r24, r29
    2688:	8c 2b       	or	r24, r28
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	ff 90       	pop	r15
    2694:	bf 90       	pop	r11
    2696:	af 90       	pop	r10
    2698:	9f 90       	pop	r9
    269a:	8f 90       	pop	r8
    269c:	7f 90       	pop	r7
    269e:	6f 90       	pop	r6
    26a0:	5f 90       	pop	r5
    26a2:	4f 90       	pop	r4
    26a4:	08 95       	ret
    26a6:	d8 e0       	ldi	r29, 0x08	; 8
    26a8:	a6 cf       	rjmp	.-180    	; 0x25f6 <irIsBusy+0x2c>
    26aa:	14 e0       	ldi	r17, 0x04	; 4
    26ac:	c3 cf       	rjmp	.-122    	; 0x2634 <irIsBusy+0x6a>

000026ae <all_ir_sends>:
    26ae:	df 92       	push	r13
    26b0:	ef 92       	push	r14
    26b2:	ff 92       	push	r15
    26b4:	0f 93       	push	r16
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	d8 2e       	mov	r13, r24
    26be:	eb 01       	movw	r28, r22
    26c0:	14 2f       	mov	r17, r20
    26c2:	79 01       	movw	r14, r18
    26c4:	0e 94 e5 12 	call	0x25ca	; 0x25ca <irIsBusy>
    26c8:	82 30       	cpi	r24, 0x02	; 2
    26ca:	08 f4       	brcc	.+2      	; 0x26ce <all_ir_sends+0x20>
    26cc:	5e c0       	rjmp	.+188    	; 0x278a <all_ir_sends+0xdc>
    26ce:	1f 92       	push	r1
    26d0:	8f 93       	push	r24
    26d2:	84 e6       	ldi	r24, 0x64	; 100
    26d4:	96 e0       	ldi	r25, 0x06	; 6
    26d6:	9f 93       	push	r25
    26d8:	8f 93       	push	r24
    26da:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	11 23       	and	r17, r17
    26e8:	09 f4       	brne	.+2      	; 0x26ec <all_ir_sends+0x3e>
    26ea:	42 c0       	rjmp	.+132    	; 0x2770 <all_ir_sends+0xc2>
    26ec:	88 81       	ld	r24, Y
    26ee:	80 52       	subi	r24, 0x20	; 32
    26f0:	8f 35       	cpi	r24, 0x5F	; 95
    26f2:	08 f0       	brcs	.+2      	; 0x26f6 <all_ir_sends+0x48>
    26f4:	8d c0       	rjmp	.+282    	; 0x2810 <all_ir_sends+0x162>
    26f6:	fe 01       	movw	r30, r28
    26f8:	31 96       	adiw	r30, 0x01	; 1
    26fa:	11 50       	subi	r17, 0x01	; 1
    26fc:	21 2f       	mov	r18, r17
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	2f 5f       	subi	r18, 0xFF	; 255
    2702:	3f 4f       	sbci	r19, 0xFF	; 255
    2704:	2c 0f       	add	r18, r28
    2706:	3d 1f       	adc	r19, r29
    2708:	05 c0       	rjmp	.+10     	; 0x2714 <all_ir_sends+0x66>
    270a:	81 91       	ld	r24, Z+
    270c:	80 52       	subi	r24, 0x20	; 32
    270e:	8f 35       	cpi	r24, 0x5F	; 95
    2710:	08 f0       	brcs	.+2      	; 0x2714 <all_ir_sends+0x66>
    2712:	7c c0       	rjmp	.+248    	; 0x280c <all_ir_sends+0x15e>
    2714:	e2 17       	cp	r30, r18
    2716:	f3 07       	cpc	r31, r19
    2718:	c1 f7       	brne	.-16     	; 0x270a <all_ir_sends+0x5c>
    271a:	dd 24       	eor	r13, r13
    271c:	d3 94       	inc	r13
    271e:	01 2f       	mov	r16, r17
    2720:	10 e0       	ldi	r17, 0x00	; 0
    2722:	0f 5f       	subi	r16, 0xFF	; 255
    2724:	1f 4f       	sbci	r17, 0xFF	; 255
    2726:	0c 0f       	add	r16, r28
    2728:	1d 1f       	adc	r17, r29
    272a:	8f ee       	ldi	r24, 0xEF	; 239
    272c:	e8 2e       	mov	r14, r24
    272e:	80 e2       	ldi	r24, 0x20	; 32
    2730:	f8 2e       	mov	r15, r24
    2732:	12 c0       	rjmp	.+36     	; 0x2758 <all_ir_sends+0xaa>
    2734:	28 2f       	mov	r18, r24
    2736:	08 2e       	mov	r0, r24
    2738:	00 0c       	add	r0, r0
    273a:	33 0b       	sbc	r19, r19
    273c:	3f 93       	push	r19
    273e:	8f 93       	push	r24
    2740:	ff 92       	push	r15
    2742:	ef 92       	push	r14
    2744:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	21 96       	adiw	r28, 0x01	; 1
    2752:	c0 17       	cp	r28, r16
    2754:	d1 07       	cpc	r29, r17
    2756:	61 f0       	breq	.+24     	; 0x2770 <all_ir_sends+0xc2>
    2758:	88 81       	ld	r24, Y
    275a:	dd 20       	and	r13, r13
    275c:	59 f3       	breq	.-42     	; 0x2734 <all_ir_sends+0x86>
    275e:	08 2e       	mov	r0, r24
    2760:	00 0c       	add	r0, r0
    2762:	99 0b       	sbc	r25, r25
    2764:	0e 94 a1 50 	call	0xa142	; 0xa142 <putchar>
    2768:	21 96       	adiw	r28, 0x01	; 1
    276a:	c0 17       	cp	r28, r16
    276c:	d1 07       	cpc	r29, r17
    276e:	a1 f7       	brne	.-24     	; 0x2758 <all_ir_sends+0xaa>
    2770:	8a ec       	ldi	r24, 0xCA	; 202
    2772:	90 e2       	ldi	r25, 0x20	; 32
    2774:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	1f 91       	pop	r17
    2780:	0f 91       	pop	r16
    2782:	ff 90       	pop	r15
    2784:	ef 90       	pop	r14
    2786:	df 90       	pop	r13
    2788:	08 95       	ret
    278a:	4d 2d       	mov	r20, r13
    278c:	50 e0       	ldi	r21, 0x00	; 0
    278e:	a6 e0       	ldi	r26, 0x06	; 6
    2790:	b0 e2       	ldi	r27, 0x20	; 32
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	68 e3       	ldi	r22, 0x38	; 56
    2798:	71 e0       	ldi	r23, 0x01	; 1
    279a:	9a 01       	movw	r18, r20
    279c:	08 2e       	mov	r0, r24
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <all_ir_sends+0xf6>
    27a0:	35 95       	asr	r19
    27a2:	27 95       	ror	r18
    27a4:	0a 94       	dec	r0
    27a6:	e2 f7       	brpl	.-8      	; 0x27a0 <all_ir_sends+0xf2>
    27a8:	20 ff       	sbrs	r18, 0
    27aa:	1c c0       	rjmp	.+56     	; 0x27e4 <all_ir_sends+0x136>
    27ac:	ed 91       	ld	r30, X+
    27ae:	fc 91       	ld	r31, X
    27b0:	11 97       	sbiw	r26, 0x01	; 1
    27b2:	24 81       	ldd	r18, Z+4	; 0x04
    27b4:	2f 7e       	andi	r18, 0xEF	; 239
    27b6:	24 83       	std	Z+4, r18	; 0x04
    27b8:	68 9f       	mul	r22, r24
    27ba:	f0 01       	movw	r30, r0
    27bc:	69 9f       	mul	r22, r25
    27be:	f0 0d       	add	r31, r0
    27c0:	11 24       	eor	r1, r1
    27c2:	e7 50       	subi	r30, 0x07	; 7
    27c4:	fb 4d       	sbci	r31, 0xDB	; 219
    27c6:	77 ab       	std	Z+55, r23	; 0x37
    27c8:	00 23       	and	r16, r16
    27ca:	19 f0       	breq	.+6      	; 0x27d2 <all_ir_sends+0x124>
    27cc:	27 a9       	ldd	r18, Z+55	; 0x37
    27ce:	20 68       	ori	r18, 0x80	; 128
    27d0:	27 ab       	std	Z+55, r18	; 0x37
    27d2:	68 9f       	mul	r22, r24
    27d4:	f0 01       	movw	r30, r0
    27d6:	69 9f       	mul	r22, r25
    27d8:	f0 0d       	add	r31, r0
    27da:	11 24       	eor	r1, r1
    27dc:	e7 50       	subi	r30, 0x07	; 7
    27de:	fb 4d       	sbci	r31, 0xDB	; 219
    27e0:	e0 86       	std	Z+8, r14	; 0x08
    27e2:	f1 86       	std	Z+9, r15	; 0x09
    27e4:	01 96       	adiw	r24, 0x01	; 1
    27e6:	12 96       	adiw	r26, 0x02	; 2
    27e8:	86 30       	cpi	r24, 0x06	; 6
    27ea:	91 05       	cpc	r25, r1
    27ec:	b1 f6       	brne	.-84     	; 0x279a <all_ir_sends+0xec>
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	41 2f       	mov	r20, r17
    27f2:	be 01       	movw	r22, r28
    27f4:	8d 2d       	mov	r24, r13
    27f6:	0e 94 9e 11 	call	0x233c	; 0x233c <send_msg>
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	1f 91       	pop	r17
    2802:	0f 91       	pop	r16
    2804:	ff 90       	pop	r15
    2806:	ef 90       	pop	r14
    2808:	df 90       	pop	r13
    280a:	08 95       	ret
    280c:	d1 2c       	mov	r13, r1
    280e:	87 cf       	rjmp	.-242    	; 0x271e <all_ir_sends+0x70>
    2810:	d1 2c       	mov	r13, r1
    2812:	11 50       	subi	r17, 0x01	; 1
    2814:	84 cf       	rjmp	.-248    	; 0x271e <all_ir_sends+0x70>

00002816 <irTargetedCmd>:
    2816:	0f 93       	push	r16
    2818:	01 e0       	ldi	r16, 0x01	; 1
    281a:	0e 94 57 13 	call	0x26ae	; 0x26ae <all_ir_sends>
    281e:	0f 91       	pop	r16
    2820:	08 95       	ret

00002822 <irCmd>:
    2822:	0f 93       	push	r16
    2824:	01 e0       	ldi	r16, 0x01	; 1
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	0e 94 57 13 	call	0x26ae	; 0x26ae <all_ir_sends>
    282e:	0f 91       	pop	r16
    2830:	08 95       	ret

00002832 <irTargetedSend>:
    2832:	0f 93       	push	r16
    2834:	00 e0       	ldi	r16, 0x00	; 0
    2836:	0e 94 57 13 	call	0x26ae	; 0x26ae <all_ir_sends>
    283a:	0f 91       	pop	r16
    283c:	08 95       	ret

0000283e <irSend>:
    283e:	0f 93       	push	r16
    2840:	00 e0       	ldi	r16, 0x00	; 0
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	0e 94 57 13 	call	0x26ae	; 0x26ae <all_ir_sends>
    284a:	0f 91       	pop	r16
    284c:	08 95       	ret

0000284e <all_hp_ir_cmds>:
    284e:	af 92       	push	r10
    2850:	bf 92       	push	r11
    2852:	df 92       	push	r13
    2854:	ef 92       	push	r14
    2856:	1f 93       	push	r17
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
    285c:	e8 2e       	mov	r14, r24
    285e:	5b 01       	movw	r10, r22
    2860:	14 2f       	mov	r17, r20
    2862:	e9 01       	movw	r28, r18
    2864:	df b6       	in	r13, 0x3f	; 63
    2866:	f8 94       	cli
    2868:	0e 94 e5 12 	call	0x25ca	; 0x25ca <irIsBusy>
    286c:	84 30       	cpi	r24, 0x04	; 4
    286e:	e0 f5       	brcc	.+120    	; 0x28e8 <all_hp_ir_cmds+0x9a>
    2870:	10 34       	cpi	r17, 0x40	; 64
    2872:	08 f0       	brcs	.+2      	; 0x2876 <all_hp_ir_cmds+0x28>
    2874:	10 54       	subi	r17, 0x40	; 64
    2876:	4e 2d       	mov	r20, r14
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	a6 e0       	ldi	r26, 0x06	; 6
    287c:	b0 e2       	ldi	r27, 0x20	; 32
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	78 e3       	ldi	r23, 0x38	; 56
    2884:	61 e8       	ldi	r22, 0x81	; 129
    2886:	9a 01       	movw	r18, r20
    2888:	08 2e       	mov	r0, r24
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <all_hp_ir_cmds+0x42>
    288c:	35 95       	asr	r19
    288e:	27 95       	ror	r18
    2890:	0a 94       	dec	r0
    2892:	e2 f7       	brpl	.-8      	; 0x288c <all_hp_ir_cmds+0x3e>
    2894:	20 ff       	sbrs	r18, 0
    2896:	13 c0       	rjmp	.+38     	; 0x28be <all_hp_ir_cmds+0x70>
    2898:	ed 91       	ld	r30, X+
    289a:	fc 91       	ld	r31, X
    289c:	11 97       	sbiw	r26, 0x01	; 1
    289e:	24 81       	ldd	r18, Z+4	; 0x04
    28a0:	2f 7e       	andi	r18, 0xEF	; 239
    28a2:	24 83       	std	Z+4, r18	; 0x04
    28a4:	78 9f       	mul	r23, r24
    28a6:	f0 01       	movw	r30, r0
    28a8:	79 9f       	mul	r23, r25
    28aa:	f0 0d       	add	r31, r0
    28ac:	11 24       	eor	r1, r1
    28ae:	e7 50       	subi	r30, 0x07	; 7
    28b0:	fb 4d       	sbci	r31, 0xDB	; 219
    28b2:	67 ab       	std	Z+55, r22	; 0x37
    28b4:	27 a9       	ldd	r18, Z+55	; 0x37
    28b6:	20 64       	ori	r18, 0x40	; 64
    28b8:	27 ab       	std	Z+55, r18	; 0x37
    28ba:	c0 87       	std	Z+8, r28	; 0x08
    28bc:	d1 87       	std	Z+9, r29	; 0x09
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	12 96       	adiw	r26, 0x02	; 2
    28c2:	86 30       	cpi	r24, 0x06	; 6
    28c4:	91 05       	cpc	r25, r1
    28c6:	f9 f6       	brne	.-66     	; 0x2886 <all_hp_ir_cmds+0x38>
    28c8:	df be       	out	0x3f, r13	; 63
    28ca:	21 e0       	ldi	r18, 0x01	; 1
    28cc:	41 2f       	mov	r20, r17
    28ce:	b5 01       	movw	r22, r10
    28d0:	8e 2d       	mov	r24, r14
    28d2:	0e 94 9e 11 	call	0x233c	; 0x233c <send_msg>
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	1f 91       	pop	r17
    28de:	ef 90       	pop	r14
    28e0:	df 90       	pop	r13
    28e2:	bf 90       	pop	r11
    28e4:	af 90       	pop	r10
    28e6:	08 95       	ret
    28e8:	df be       	out	0x3f, r13	; 63
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	1f 91       	pop	r17
    28f2:	ef 90       	pop	r14
    28f4:	df 90       	pop	r13
    28f6:	bf 90       	pop	r11
    28f8:	af 90       	pop	r10
    28fa:	08 95       	ret

000028fc <hpIrTargetedCmd>:
}

uint8_t hpIrTargetedCmd(uint8_t dirs, char *data, uint8_t dataLength, id_t target){
	return all_hp_ir_cmds(dirs, data, dataLength, target);
    28fc:	0c 94 27 14 	jmp	0x284e	; 0x284e <all_hp_ir_cmds>

00002900 <irReceive>:
	clearIrBuffer(dir);
}


// To be called from interrupt handler only. Do not call.
static void irReceive(uint8_t dir){
    2900:	6f 92       	push	r6
    2902:	7f 92       	push	r7
    2904:	8f 92       	push	r8
    2906:	9f 92       	push	r9
    2908:	af 92       	push	r10
    290a:	bf 92       	push	r11
    290c:	cf 92       	push	r12
    290e:	df 92       	push	r13
    2910:	ef 92       	push	r14
    2912:	ff 92       	push	r15
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	d8 2e       	mov	r13, r24
	uint8_t in_byte = channel[dir]->DATA;				// Some data just came in
    291e:	c8 2f       	mov	r28, r24
    2920:	d0 e0       	ldi	r29, 0x00	; 0
    2922:	8e 01       	movw	r16, r28
    2924:	00 0f       	add	r16, r16
    2926:	11 1f       	adc	r17, r17
    2928:	98 01       	movw	r18, r16
    292a:	2a 5f       	subi	r18, 0xFA	; 250
    292c:	3f 4d       	sbci	r19, 0xDF	; 223
    292e:	79 01       	movw	r14, r18
    2930:	d9 01       	movw	r26, r18
    2932:	ed 91       	ld	r30, X+
    2934:	fc 91       	ld	r31, X
    2936:	c0 80       	ld	r12, Z
	#ifdef AUDIO_DROPLET
		//ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_HI_gc;
	#endif	
	
	uint32_t now = getTime();
    2938:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
    293c:	28 e3       	ldi	r18, 0x38	; 56
    293e:	2c 9f       	mul	r18, r28
    2940:	f0 01       	movw	r30, r0
    2942:	2d 9f       	mul	r18, r29
    2944:	f0 0d       	add	r31, r0
    2946:	11 24       	eor	r1, r1
    2948:	e7 50       	subi	r30, 0x07	; 7
    294a:	fb 4d       	sbci	r31, 0xDB	; 219
    294c:	80 80       	ld	r8, Z
    294e:	91 80       	ldd	r9, Z+1	; 0x01
    2950:	a2 80       	ldd	r10, Z+2	; 0x02
    2952:	b3 80       	ldd	r11, Z+3	; 0x03
    2954:	9b 01       	movw	r18, r22
    2956:	ac 01       	movw	r20, r24
    2958:	28 19       	sub	r18, r8
    295a:	39 09       	sbc	r19, r9
    295c:	4a 09       	sbc	r20, r10
    295e:	5b 09       	sbc	r21, r11
    2960:	49 01       	movw	r8, r18
    2962:	5a 01       	movw	r10, r20
    2964:	31 e1       	ldi	r19, 0x11	; 17
    2966:	83 16       	cp	r8, r19
    2968:	91 04       	cpc	r9, r1
    296a:	a1 04       	cpc	r10, r1
    296c:	b1 04       	cpc	r11, r1
    296e:	90 f0       	brcs	.+36     	; 0x2994 <irReceive+0x94>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2970:	14 82       	std	Z+4, r1	; 0x04
    2972:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2974:	16 82       	std	Z+6, r1	; 0x06
    2976:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2978:	10 86       	std	Z+8, r1	; 0x08
    297a:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    297c:	12 86       	std	Z+10, r1	; 0x0a
    297e:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2980:	14 86       	std	Z+12, r1	; 0x0c
    2982:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2984:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2986:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2988:	d7 01       	movw	r26, r14
    298a:	ed 91       	ld	r30, X+
    298c:	fc 91       	ld	r31, X
    298e:	24 81       	ldd	r18, Z+4	; 0x04
    2990:	20 61       	ori	r18, 0x10	; 16
    2992:	24 83       	std	Z+4, r18	; 0x04
		//ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_HI_gc;
	#endif	
	
	uint32_t now = getTime();
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
	ir_rxtx[dir].last_byte = now;
    2994:	28 e3       	ldi	r18, 0x38	; 56
    2996:	2c 9f       	mul	r18, r28
    2998:	d0 01       	movw	r26, r0
    299a:	2d 9f       	mul	r18, r29
    299c:	b0 0d       	add	r27, r0
    299e:	11 24       	eor	r1, r1
    29a0:	a7 50       	subi	r26, 0x07	; 7
    29a2:	bb 4d       	sbci	r27, 0xDB	; 219
    29a4:	6d 93       	st	X+, r22
    29a6:	7d 93       	st	X+, r23
    29a8:	8d 93       	st	X+, r24
    29aa:	9c 93       	st	X, r25
    29ac:	13 97       	sbiw	r26, 0x03	; 3
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
    29ae:	1a 96       	adiw	r26, 0x0a	; 10
    29b0:	ed 91       	ld	r30, X+
    29b2:	fc 91       	ld	r31, X
    29b4:	1b 97       	sbiw	r26, 0x0b	; 11
    29b6:	e7 30       	cpi	r30, 0x07	; 7
    29b8:	f1 05       	cpc	r31, r1
    29ba:	08 f4       	brcc	.+2      	; 0x29be <irReceive+0xbe>
    29bc:	4b c0       	rjmp	.+150    	; 0x2a54 <irReceive+0x154>
										if(!(ir_rxtx[dir].status & IR_STATUS_TIMED_bm)){
											ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].calc_crc, ir_rxtx[dir].target_ID);
										}
										break;								
		default:
			ir_rxtx[dir].buf[ir_rxtx[dir].curr_pos-HEADER_LEN] = in_byte;
    29be:	1a 96       	adiw	r26, 0x0a	; 10
    29c0:	ed 91       	ld	r30, X+
    29c2:	fc 91       	ld	r31, X
    29c4:	1b 97       	sbiw	r26, 0x0b	; 11
    29c6:	37 97       	sbiw	r30, 0x07	; 7
    29c8:	ea 0f       	add	r30, r26
    29ca:	fb 1f       	adc	r31, r27
    29cc:	c6 86       	std	Z+14, r12	; 0x0e
			ir_rxtx[dir].calc_crc = _crc16_update(ir_rxtx[dir].calc_crc, in_byte);
    29ce:	1c 96       	adiw	r26, 0x0c	; 12
    29d0:	8d 91       	ld	r24, X+
    29d2:	9c 91       	ld	r25, X
    29d4:	1d 97       	sbiw	r26, 0x0d	; 13
    29d6:	8c 25       	eor	r24, r12
    29d8:	28 2f       	mov	r18, r24
    29da:	22 95       	swap	r18
    29dc:	28 27       	eor	r18, r24
    29de:	02 2e       	mov	r0, r18
    29e0:	26 95       	lsr	r18
    29e2:	26 95       	lsr	r18
    29e4:	20 25       	eor	r18, r0
    29e6:	02 2e       	mov	r0, r18
    29e8:	26 95       	lsr	r18
    29ea:	20 25       	eor	r18, r0
    29ec:	27 70       	andi	r18, 0x07	; 7
    29ee:	08 2e       	mov	r0, r24
    29f0:	89 2f       	mov	r24, r25
    29f2:	26 95       	lsr	r18
    29f4:	07 94       	ror	r0
    29f6:	27 95       	ror	r18
    29f8:	90 2d       	mov	r25, r0
    29fa:	82 27       	eor	r24, r18
    29fc:	06 94       	lsr	r0
    29fe:	27 95       	ror	r18
    2a00:	90 25       	eor	r25, r0
    2a02:	82 27       	eor	r24, r18
    2a04:	1c 96       	adiw	r26, 0x0c	; 12
    2a06:	8d 93       	st	X+, r24
    2a08:	9c 93       	st	X, r25
    2a0a:	1d 97       	sbiw	r26, 0x0d	; 13
	}
	ir_rxtx[dir].curr_pos++;
    2a0c:	88 e3       	ldi	r24, 0x38	; 56
    2a0e:	8c 9f       	mul	r24, r28
    2a10:	f0 01       	movw	r30, r0
    2a12:	8d 9f       	mul	r24, r29
    2a14:	f0 0d       	add	r31, r0
    2a16:	11 24       	eor	r1, r1
    2a18:	e7 50       	subi	r30, 0x07	; 7
    2a1a:	fb 4d       	sbci	r31, 0xDB	; 219
    2a1c:	82 85       	ldd	r24, Z+10	; 0x0a
    2a1e:	93 85       	ldd	r25, Z+11	; 0x0b
    2a20:	01 96       	adiw	r24, 0x01	; 1
    2a22:	82 87       	std	Z+10, r24	; 0x0a
    2a24:	93 87       	std	Z+11, r25	; 0x0b
	
	if(ir_rxtx[dir].curr_pos>=(ir_rxtx[dir].data_length+HEADER_LEN)){
    2a26:	22 85       	ldd	r18, Z+10	; 0x0a
    2a28:	33 85       	ldd	r19, Z+11	; 0x0b
    2a2a:	86 a9       	ldd	r24, Z+54	; 0x36
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	07 96       	adiw	r24, 0x07	; 7
    2a30:	28 17       	cp	r18, r24
    2a32:	39 07       	cpc	r19, r25
    2a34:	a8 f4       	brcc	.+42     	; 0x2a60 <irReceive+0x160>
		handleCompletedMsg(dir);
	}
}
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	ff 90       	pop	r15
    2a40:	ef 90       	pop	r14
    2a42:	df 90       	pop	r13
    2a44:	cf 90       	pop	r12
    2a46:	bf 90       	pop	r11
    2a48:	af 90       	pop	r10
    2a4a:	9f 90       	pop	r9
    2a4c:	8f 90       	pop	r8
    2a4e:	7f 90       	pop	r7
    2a50:	6f 90       	pop	r6
    2a52:	08 95       	ret
	if(now-ir_rxtx[dir].last_byte > IR_MSG_TIMEOUT)	clearIrBuffer(dir);	
	ir_rxtx[dir].last_byte = now;
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
    2a54:	88 27       	eor	r24, r24
    2a56:	eb 5f       	subi	r30, 0xFB	; 251
    2a58:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a5c:	0c 94 00 4c 	jmp	0x9800	; 0x9800 <__tablejump2__>
		}
	}
}

static void handleCompletedMsg(uint8_t dir){
	ir_rxtx[dir].status |= ir_rxtx[dir].target_ID ? IR_STATUS_TARGETED_bm : 0;
    2a60:	80 85       	ldd	r24, Z+8	; 0x08
    2a62:	91 85       	ldd	r25, Z+9	; 0x09
    2a64:	89 2b       	or	r24, r25
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <irReceive+0x16a>
    2a68:	4c c0       	rjmp	.+152    	; 0x2b02 <irReceive+0x202>
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	98 e3       	ldi	r25, 0x38	; 56
    2a6e:	9c 9f       	mul	r25, r28
    2a70:	f0 01       	movw	r30, r0
    2a72:	9d 9f       	mul	r25, r29
    2a74:	f0 0d       	add	r31, r0
    2a76:	11 24       	eor	r1, r1
    2a78:	e7 50       	subi	r30, 0x07	; 7
    2a7a:	fb 4d       	sbci	r31, 0xDB	; 219
    2a7c:	97 a9       	ldd	r25, Z+55	; 0x37
    2a7e:	89 2b       	or	r24, r25
    2a80:	87 ab       	std	Z+55, r24	; 0x37
	//pre checks.
	const uint8_t crcMismatch = ir_rxtx[dir].calc_crc!=ir_rxtx[dir].data_crc;
    2a82:	24 85       	ldd	r18, Z+12	; 0x0c
    2a84:	35 85       	ldd	r19, Z+13	; 0x0d
    2a86:	84 81       	ldd	r24, Z+4	; 0x04
    2a88:	95 81       	ldd	r25, Z+5	; 0x05
	const uint8_t nullCrc	  = ir_rxtx[dir].calc_crc==0;
    2a8a:	64 85       	ldd	r22, Z+12	; 0x0c
    2a8c:	75 85       	ldd	r23, Z+13	; 0x0d
	const uint8_t selfSender  = ir_rxtx[dir].senderID == getDropletID();
    2a8e:	a6 80       	ldd	r10, Z+6	; 0x06
    2a90:	b7 80       	ldd	r11, Z+7	; 0x07
// Returns the number of ms elapsed since the last reset. (Defined in droplet_base_asm.s)
uint32_t getTime(void);

// Returns this Droplet's unique 16-bit identifier. 0 will never be an identifier.
inline id_t getDropletID(void){ 
	return droplet_ID;
    2a92:	40 91 6a 24 	lds	r20, 0x246A	; 0x80246a <droplet_ID>
    2a96:	50 91 6b 24 	lds	r21, 0x246B	; 0x80246b <droplet_ID+0x1>
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
    2a9a:	f7 a8       	ldd	r15, Z+55	; 0x37
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
    2a9c:	bf 2d       	mov	r27, r15
    2a9e:	b0 74       	andi	r27, 0x40	; 64
    2aa0:	cb 2e       	mov	r12, r27
    2aa2:	f6 fc       	sbrc	r15, 6
    2aa4:	d5 c0       	rjmp	.+426    	; 0x2c50 <irReceive+0x350>
    2aa6:	e0 84       	ldd	r14, Z+8	; 0x08
    2aa8:	f1 84       	ldd	r15, Z+9	; 0x09
    2aaa:	ef 28       	or	r14, r15
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <irReceive+0x1b0>
    2aae:	d0 c0       	rjmp	.+416    	; 0x2c50 <irReceive+0x350>
    2ab0:	e0 84       	ldd	r14, Z+8	; 0x08
    2ab2:	f1 84       	ldd	r15, Z+9	; 0x09
    2ab4:	e1 e0       	ldi	r30, 0x01	; 1
    2ab6:	4e 15       	cp	r20, r14
    2ab8:	5f 05       	cpc	r21, r15
    2aba:	09 f4       	brne	.+2      	; 0x2abe <irReceive+0x1be>
    2abc:	c9 c0       	rjmp	.+402    	; 0x2c50 <irReceive+0x350>
	
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
    2abe:	28 17       	cp	r18, r24
    2ac0:	39 07       	cpc	r19, r25
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <irReceive+0x1c6>
    2ac4:	ca c0       	rjmp	.+404    	; 0x2c5a <irReceive+0x35a>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2ac6:	88 e3       	ldi	r24, 0x38	; 56
    2ac8:	8c 9f       	mul	r24, r28
    2aca:	f0 01       	movw	r30, r0
    2acc:	8d 9f       	mul	r24, r29
    2ace:	f0 0d       	add	r31, r0
    2ad0:	11 24       	eor	r1, r1
    2ad2:	e7 50       	subi	r30, 0x07	; 7
    2ad4:	fb 4d       	sbci	r31, 0xDB	; 219
    2ad6:	14 82       	std	Z+4, r1	; 0x04
    2ad8:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2ada:	16 82       	std	Z+6, r1	; 0x06
    2adc:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2ade:	10 86       	std	Z+8, r1	; 0x08
    2ae0:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2ae2:	12 86       	std	Z+10, r1	; 0x0a
    2ae4:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2ae6:	14 86       	std	Z+12, r1	; 0x0c
    2ae8:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2aea:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2aec:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2aee:	f8 01       	movw	r30, r16
    2af0:	ea 5f       	subi	r30, 0xFA	; 250
    2af2:	ff 4d       	sbci	r31, 0xDF	; 223
    2af4:	01 90       	ld	r0, Z+
    2af6:	f0 81       	ld	r31, Z
    2af8:	e0 2d       	mov	r30, r0
    2afa:	84 81       	ldd	r24, Z+4	; 0x04
    2afc:	80 61       	ori	r24, 0x10	; 16
    2afe:	84 83       	std	Z+4, r24	; 0x04
	ir_rxtx[dir].curr_pos++;
	
	if(ir_rxtx[dir].curr_pos>=(ir_rxtx[dir].data_length+HEADER_LEN)){
		handleCompletedMsg(dir);
	}
}
    2b00:	9a cf       	rjmp	.-204    	; 0x2a36 <irReceive+0x136>
		}
	}
}

static void handleCompletedMsg(uint8_t dir){
	ir_rxtx[dir].status |= ir_rxtx[dir].target_ID ? IR_STATUS_TARGETED_bm : 0;
    2b02:	80 e1       	ldi	r24, 0x10	; 16
    2b04:	b3 cf       	rjmp	.-154    	; 0x2a6c <irReceive+0x16c>
										ir_rxtx[dir].status		   |= (in_byte&DATA_LEN_STATUS_BITS_bm);
										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].senderID, ir_rxtx[dir].status & IR_STATUS_CRC_BITS_bm);
										ir_rxtx[dir].data_length	= in_byte&DATA_LEN_VAL_bm;
										if(ir_rxtx[dir].data_length>IR_BUFFER_SIZE) ir_rxtx[dir].data_length=1; //basically, this will cause the message to get aborted.
																								break;
		case HEADER_POS_TARGET_ID_LOW:  ir_rxtx[dir].target_ID		= (uint16_t)in_byte;		break;
    2b06:	8c 2d       	mov	r24, r12
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	28 e3       	ldi	r18, 0x38	; 56
    2b0c:	2c 9f       	mul	r18, r28
    2b0e:	f0 01       	movw	r30, r0
    2b10:	2d 9f       	mul	r18, r29
    2b12:	f0 0d       	add	r31, r0
    2b14:	11 24       	eor	r1, r1
    2b16:	e7 50       	subi	r30, 0x07	; 7
    2b18:	fb 4d       	sbci	r31, 0xDB	; 219
    2b1a:	80 87       	std	Z+8, r24	; 0x08
    2b1c:	91 87       	std	Z+9, r25	; 0x09
    2b1e:	76 cf       	rjmp	.-276    	; 0x2a0c <irReceive+0x10c>
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
		case HEADER_POS_SENDER_ID_LOW:	ir_rxtx[dir].senderID		= (uint16_t)in_byte;		break;
		case HEADER_POS_SENDER_ID_HIGH:	ir_rxtx[dir].senderID	   |= (((uint16_t)in_byte)<<8);	break;
		case HEADER_POS_CRC_LOW:		ir_rxtx[dir].data_crc		= (uint16_t)in_byte;		break;
    2b20:	8c 2d       	mov	r24, r12
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	28 e3       	ldi	r18, 0x38	; 56
    2b26:	2c 9f       	mul	r18, r28
    2b28:	f0 01       	movw	r30, r0
    2b2a:	2d 9f       	mul	r18, r29
    2b2c:	f0 0d       	add	r31, r0
    2b2e:	11 24       	eor	r1, r1
    2b30:	e7 50       	subi	r30, 0x07	; 7
    2b32:	fb 4d       	sbci	r31, 0xDB	; 219
    2b34:	84 83       	std	Z+4, r24	; 0x04
    2b36:	95 83       	std	Z+5, r25	; 0x05
    2b38:	69 cf       	rjmp	.-302    	; 0x2a0c <irReceive+0x10c>
		case HEADER_POS_CRC_HIGH:		ir_rxtx[dir].data_crc	   |= (((uint16_t)in_byte)<<8); break;																								
    2b3a:	88 e3       	ldi	r24, 0x38	; 56
    2b3c:	8c 9f       	mul	r24, r28
    2b3e:	f0 01       	movw	r30, r0
    2b40:	8d 9f       	mul	r24, r29
    2b42:	f0 0d       	add	r31, r0
    2b44:	11 24       	eor	r1, r1
    2b46:	e7 50       	subi	r30, 0x07	; 7
    2b48:	fb 4d       	sbci	r31, 0xDB	; 219
    2b4a:	84 81       	ldd	r24, Z+4	; 0x04
    2b4c:	95 81       	ldd	r25, Z+5	; 0x05
    2b4e:	9c 29       	or	r25, r12
    2b50:	84 83       	std	Z+4, r24	; 0x04
    2b52:	95 83       	std	Z+5, r25	; 0x05
    2b54:	5b cf       	rjmp	.-330    	; 0x2a0c <irReceive+0x10c>
		case HEADER_POS_MSG_LENGTH:
										ir_rxtx[dir].status		   |= (in_byte&DATA_LEN_STATUS_BITS_bm);
    2b56:	88 e3       	ldi	r24, 0x38	; 56
    2b58:	8c 9f       	mul	r24, r28
    2b5a:	f0 01       	movw	r30, r0
    2b5c:	8d 9f       	mul	r24, r29
    2b5e:	f0 0d       	add	r31, r0
    2b60:	11 24       	eor	r1, r1
    2b62:	e7 50       	subi	r30, 0x07	; 7
    2b64:	fb 4d       	sbci	r31, 0xDB	; 219
    2b66:	87 a9       	ldd	r24, Z+55	; 0x37
    2b68:	9c 2d       	mov	r25, r12
    2b6a:	90 7c       	andi	r25, 0xC0	; 192
    2b6c:	89 2b       	or	r24, r25
    2b6e:	87 ab       	std	Z+55, r24	; 0x37
										ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].senderID, ir_rxtx[dir].status & IR_STATUS_CRC_BITS_bm);
    2b70:	27 a9       	ldd	r18, Z+55	; 0x37
    2b72:	86 81       	ldd	r24, Z+6	; 0x06
    2b74:	97 81       	ldd	r25, Z+7	; 0x07
    2b76:	20 7c       	andi	r18, 0xC0	; 192
    2b78:	82 27       	eor	r24, r18
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	22 95       	swap	r18
    2b7e:	28 27       	eor	r18, r24
    2b80:	02 2e       	mov	r0, r18
    2b82:	26 95       	lsr	r18
    2b84:	26 95       	lsr	r18
    2b86:	20 25       	eor	r18, r0
    2b88:	02 2e       	mov	r0, r18
    2b8a:	26 95       	lsr	r18
    2b8c:	20 25       	eor	r18, r0
    2b8e:	27 70       	andi	r18, 0x07	; 7
    2b90:	08 2e       	mov	r0, r24
    2b92:	89 2f       	mov	r24, r25
    2b94:	26 95       	lsr	r18
    2b96:	07 94       	ror	r0
    2b98:	27 95       	ror	r18
    2b9a:	90 2d       	mov	r25, r0
    2b9c:	82 27       	eor	r24, r18
    2b9e:	06 94       	lsr	r0
    2ba0:	27 95       	ror	r18
    2ba2:	90 25       	eor	r25, r0
    2ba4:	82 27       	eor	r24, r18
    2ba6:	84 87       	std	Z+12, r24	; 0x0c
    2ba8:	95 87       	std	Z+13, r25	; 0x0d
										ir_rxtx[dir].data_length	= in_byte&DATA_LEN_VAL_bm;
    2baa:	8c 2d       	mov	r24, r12
    2bac:	8f 73       	andi	r24, 0x3F	; 63
    2bae:	86 ab       	std	Z+54, r24	; 0x36
										if(ir_rxtx[dir].data_length>IR_BUFFER_SIZE) ir_rxtx[dir].data_length=1; //basically, this will cause the message to get aborted.
    2bb0:	86 a9       	ldd	r24, Z+54	; 0x36
    2bb2:	89 32       	cpi	r24, 0x29	; 41
    2bb4:	08 f4       	brcc	.+2      	; 0x2bb8 <irReceive+0x2b8>
    2bb6:	2a cf       	rjmp	.-428    	; 0x2a0c <irReceive+0x10c>
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	86 ab       	std	Z+54, r24	; 0x36
    2bbc:	27 cf       	rjmp	.-434    	; 0x2a0c <irReceive+0x10c>
																								break;
		case HEADER_POS_TARGET_ID_LOW:  ir_rxtx[dir].target_ID		= (uint16_t)in_byte;		break;
		case HEADER_POS_TARGET_ID_HIGH:
										ir_rxtx[dir].target_ID	   |= (((uint16_t)in_byte)<<8);
    2bbe:	88 e3       	ldi	r24, 0x38	; 56
    2bc0:	8c 9f       	mul	r24, r28
    2bc2:	f0 01       	movw	r30, r0
    2bc4:	8d 9f       	mul	r24, r29
    2bc6:	f0 0d       	add	r31, r0
    2bc8:	11 24       	eor	r1, r1
    2bca:	e7 50       	subi	r30, 0x07	; 7
    2bcc:	fb 4d       	sbci	r31, 0xDB	; 219
    2bce:	80 85       	ldd	r24, Z+8	; 0x08
    2bd0:	91 85       	ldd	r25, Z+9	; 0x09
    2bd2:	9c 29       	or	r25, r12
    2bd4:	80 87       	std	Z+8, r24	; 0x08
    2bd6:	91 87       	std	Z+9, r25	; 0x09
										if(!(ir_rxtx[dir].status & IR_STATUS_TIMED_bm)){
    2bd8:	87 a9       	ldd	r24, Z+55	; 0x37
    2bda:	86 fd       	sbrc	r24, 6
    2bdc:	17 cf       	rjmp	.-466    	; 0x2a0c <irReceive+0x10c>
											ir_rxtx[dir].calc_crc		= _crc16_update(ir_rxtx[dir].calc_crc, ir_rxtx[dir].target_ID);
    2bde:	20 85       	ldd	r18, Z+8	; 0x08
    2be0:	31 85       	ldd	r19, Z+9	; 0x09
    2be2:	84 85       	ldd	r24, Z+12	; 0x0c
    2be4:	95 85       	ldd	r25, Z+13	; 0x0d
    2be6:	82 27       	eor	r24, r18
    2be8:	28 2f       	mov	r18, r24
    2bea:	22 95       	swap	r18
    2bec:	28 27       	eor	r18, r24
    2bee:	02 2e       	mov	r0, r18
    2bf0:	26 95       	lsr	r18
    2bf2:	26 95       	lsr	r18
    2bf4:	20 25       	eor	r18, r0
    2bf6:	02 2e       	mov	r0, r18
    2bf8:	26 95       	lsr	r18
    2bfa:	20 25       	eor	r18, r0
    2bfc:	27 70       	andi	r18, 0x07	; 7
    2bfe:	08 2e       	mov	r0, r24
    2c00:	89 2f       	mov	r24, r25
    2c02:	26 95       	lsr	r18
    2c04:	07 94       	ror	r0
    2c06:	27 95       	ror	r18
    2c08:	90 2d       	mov	r25, r0
    2c0a:	82 27       	eor	r24, r18
    2c0c:	06 94       	lsr	r0
    2c0e:	27 95       	ror	r18
    2c10:	90 25       	eor	r25, r0
    2c12:	82 27       	eor	r24, r18
    2c14:	84 87       	std	Z+12, r24	; 0x0c
    2c16:	95 87       	std	Z+13, r25	; 0x0d
    2c18:	f9 ce       	rjmp	.-526    	; 0x2a0c <irReceive+0x10c>
	ir_rxtx[dir].last_byte = now;
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("%02hx ", in_byte); //Used for debugging - prints raw bytes as we get them.
	#endif	
	switch(ir_rxtx[dir].curr_pos){
		case HEADER_POS_SENDER_ID_LOW:	ir_rxtx[dir].senderID		= (uint16_t)in_byte;		break;
    2c1a:	8c 2d       	mov	r24, r12
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	28 e3       	ldi	r18, 0x38	; 56
    2c20:	2c 9f       	mul	r18, r28
    2c22:	f0 01       	movw	r30, r0
    2c24:	2d 9f       	mul	r18, r29
    2c26:	f0 0d       	add	r31, r0
    2c28:	11 24       	eor	r1, r1
    2c2a:	e7 50       	subi	r30, 0x07	; 7
    2c2c:	fb 4d       	sbci	r31, 0xDB	; 219
    2c2e:	86 83       	std	Z+6, r24	; 0x06
    2c30:	97 83       	std	Z+7, r25	; 0x07
    2c32:	ec ce       	rjmp	.-552    	; 0x2a0c <irReceive+0x10c>
		case HEADER_POS_SENDER_ID_HIGH:	ir_rxtx[dir].senderID	   |= (((uint16_t)in_byte)<<8);	break;
    2c34:	88 e3       	ldi	r24, 0x38	; 56
    2c36:	8c 9f       	mul	r24, r28
    2c38:	f0 01       	movw	r30, r0
    2c3a:	8d 9f       	mul	r24, r29
    2c3c:	f0 0d       	add	r31, r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	e7 50       	subi	r30, 0x07	; 7
    2c42:	fb 4d       	sbci	r31, 0xDB	; 219
    2c44:	86 81       	ldd	r24, Z+6	; 0x06
    2c46:	97 81       	ldd	r25, Z+7	; 0x07
    2c48:	9c 29       	or	r25, r12
    2c4a:	86 83       	std	Z+6, r24	; 0x06
    2c4c:	97 83       	std	Z+7, r25	; 0x07
    2c4e:	de ce       	rjmp	.-580    	; 0x2a0c <irReceive+0x10c>
	//pre checks.
	const uint8_t crcMismatch = ir_rxtx[dir].calc_crc!=ir_rxtx[dir].data_crc;
	const uint8_t nullCrc	  = ir_rxtx[dir].calc_crc==0;
	const uint8_t selfSender  = ir_rxtx[dir].senderID == getDropletID();
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
    2c50:	e0 e0       	ldi	r30, 0x00	; 0
	
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
    2c52:	28 17       	cp	r18, r24
    2c54:	39 07       	cpc	r19, r25
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <irReceive+0x35a>
    2c58:	36 cf       	rjmp	.-404    	; 0x2ac6 <irReceive+0x1c6>
    2c5a:	67 2b       	or	r22, r23
    2c5c:	09 f4       	brne	.+2      	; 0x2c60 <irReceive+0x360>
    2c5e:	33 cf       	rjmp	.-410    	; 0x2ac6 <irReceive+0x1c6>
    2c60:	a4 16       	cp	r10, r20
    2c62:	b5 06       	cpc	r11, r21
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <irReceive+0x368>
    2c66:	2f cf       	rjmp	.-418    	; 0x2ac6 <irReceive+0x1c6>
    2c68:	e1 11       	cpse	r30, r1
    2c6a:	2d cf       	rjmp	.-422    	; 0x2ac6 <irReceive+0x1c6>
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
    2c6c:	88 e3       	ldi	r24, 0x38	; 56
    2c6e:	8c 9f       	mul	r24, r28
    2c70:	b0 01       	movw	r22, r0
    2c72:	8d 9f       	mul	r24, r29
    2c74:	70 0d       	add	r23, r0
    2c76:	11 24       	eor	r1, r1
    2c78:	fb 01       	movw	r30, r22
    2c7a:	e7 50       	subi	r30, 0x07	; 7
    2c7c:	fb 4d       	sbci	r31, 0xDB	; 219
    2c7e:	7f 01       	movw	r14, r30
    2c80:	87 a9       	ldd	r24, Z+55	; 0x37
    2c82:	87 fd       	sbrc	r24, 7
    2c84:	a1 c0       	rjmp	.+322    	; 0x2dc8 <irReceive+0x4c8>
		   delay_us(100);
	   } while (busy);
}

static void addMsgToMsgQueue(uint8_t dir){
	if(ir_rxtx[dir].data_length == 0){
    2c86:	86 a9       	ldd	r24, Z+54	; 0x36
    2c88:	88 23       	and	r24, r24
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <irReceive+0x38e>
    2c8c:	35 c2       	rjmp	.+1130   	; 0x30f8 <irReceive+0x7f8>
		printf_P(PSTR("ERROR! Should NOT be adding 0-length message to queue.\r\n"));
	}else if(ir_rxtx[dir].data_length > IR_BUFFER_SIZE){
    2c8e:	86 a9       	ldd	r24, Z+54	; 0x36
    2c90:	89 32       	cpi	r24, 0x29	; 41
    2c92:	08 f0       	brcs	.+2      	; 0x2c96 <irReceive+0x396>
    2c94:	3a c2       	rjmp	.+1140   	; 0x310a <irReceive+0x80a>
		printf_P(PSTR("ERROR! Should NOT be adding a message with length greater than buffer size to queue.\r\n"));
	}else if(memoryConsumedByBuffer > 500){
    2c96:	80 91 a1 24 	lds	r24, 0x24A1	; 0x8024a1 <memoryConsumedByBuffer>
    2c9a:	90 91 a2 24 	lds	r25, 0x24A2	; 0x8024a2 <memoryConsumedByBuffer+0x1>
    2c9e:	85 3f       	cpi	r24, 0xF5	; 245
    2ca0:	91 40       	sbci	r25, 0x01	; 1
    2ca2:	08 f0       	brcs	.+2      	; 0x2ca6 <irReceive+0x3a6>
    2ca4:	3b c2       	rjmp	.+1142   	; 0x311c <irReceive+0x81c>
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
	}else{
		volatile MsgNode* node = incomingMsgHead;
    2ca6:	c0 90 7b 26 	lds	r12, 0x267B	; 0x80267b <incomingMsgHead>
    2caa:	d0 90 7c 26 	lds	r13, 0x267C	; 0x80267c <incomingMsgHead+0x1>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2cae:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cb0:	f8 94       	cli
			if(incomingMsgHead==NULL){
    2cb2:	80 91 7b 26 	lds	r24, 0x267B	; 0x80267b <incomingMsgHead>
    2cb6:	90 91 7c 26 	lds	r25, 0x267C	; 0x80267c <incomingMsgHead+0x1>
    2cba:	89 2b       	or	r24, r25
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <irReceive+0x3c0>
    2cbe:	75 c0       	rjmp	.+234    	; 0x2daa <irReceive+0x4aa>
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
				node = (MsgNode*)incomingMsgHead;
			}else{
				while(node->next != NULL){
    2cc0:	d6 01       	movw	r26, r12
    2cc2:	1a 96       	adiw	r26, 0x0a	; 10
    2cc4:	8d 91       	ld	r24, X+
    2cc6:	9c 91       	ld	r25, X
    2cc8:	1b 97       	sbiw	r26, 0x0b	; 11
    2cca:	89 2b       	or	r24, r25
    2ccc:	51 f0       	breq	.+20     	; 0x2ce2 <irReceive+0x3e2>
					node = node->next;
    2cce:	d6 01       	movw	r26, r12
    2cd0:	1a 96       	adiw	r26, 0x0a	; 10
    2cd2:	cd 90       	ld	r12, X+
    2cd4:	dc 90       	ld	r13, X
    2cd6:	1b 97       	sbiw	r26, 0x0b	; 11
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			if(incomingMsgHead==NULL){
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
				node = (MsgNode*)incomingMsgHead;
			}else{
				while(node->next != NULL){
    2cd8:	f6 01       	movw	r30, r12
    2cda:	82 85       	ldd	r24, Z+10	; 0x0a
    2cdc:	93 85       	ldd	r25, Z+11	; 0x0b
    2cde:	89 2b       	or	r24, r25
    2ce0:	b1 f7       	brne	.-20     	; 0x2cce <irReceive+0x3ce>
					node = node->next;
				}
				node->next = (MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2ce2:	88 e3       	ldi	r24, 0x38	; 56
    2ce4:	8c 9f       	mul	r24, r28
    2ce6:	f0 01       	movw	r30, r0
    2ce8:	8d 9f       	mul	r24, r29
    2cea:	f0 0d       	add	r31, r0
    2cec:	11 24       	eor	r1, r1
    2cee:	e7 50       	subi	r30, 0x07	; 7
    2cf0:	fb 4d       	sbci	r31, 0xDB	; 219
    2cf2:	86 a9       	ldd	r24, Z+54	; 0x36
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2cf4:	ff b6       	in	r15, 0x3f	; 63
    2cf6:	f8 94       	cli
		tmp = malloc(size);
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	0d 96       	adiw	r24, 0x0d	; 13
    2cfc:	0e 94 22 4c 	call	0x9844	; 0x9844 <malloc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d00:	ff be       	out	0x3f, r15	; 63
    2d02:	d6 01       	movw	r26, r12
    2d04:	1a 96       	adiw	r26, 0x0a	; 10
    2d06:	8d 93       	st	X+, r24
    2d08:	9c 93       	st	X, r25
    2d0a:	1b 97       	sbiw	r26, 0x0b	; 11
				node = node->next;
    2d0c:	1a 96       	adiw	r26, 0x0a	; 10
    2d0e:	ed 90       	ld	r14, X+
    2d10:	fc 90       	ld	r15, X
    2d12:	1b 97       	sbiw	r26, 0x0b	; 11
			}
			char* dataAddr = ((char*)node + sizeof(MsgNode));
    2d14:	47 01       	movw	r8, r14
    2d16:	bd e0       	ldi	r27, 0x0D	; 13
    2d18:	8b 0e       	add	r8, r27
    2d1a:	91 1c       	adc	r9, r1
			memcpy(dataAddr, (const void*)ir_rxtx[dir].buf, ir_rxtx[dir].data_length);
    2d1c:	88 e3       	ldi	r24, 0x38	; 56
    2d1e:	8c 9f       	mul	r24, r28
    2d20:	b0 01       	movw	r22, r0
    2d22:	8d 9f       	mul	r24, r29
    2d24:	70 0d       	add	r23, r0
    2d26:	11 24       	eor	r1, r1
    2d28:	fb 01       	movw	r30, r22
    2d2a:	e7 50       	subi	r30, 0x07	; 7
    2d2c:	fb 4d       	sbci	r31, 0xDB	; 219
    2d2e:	6f 01       	movw	r12, r30
    2d30:	46 a9       	ldd	r20, Z+54	; 0x36
    2d32:	50 e0       	ldi	r21, 0x00	; 0
    2d34:	69 5f       	subi	r22, 0xF9	; 249
    2d36:	7a 4d       	sbci	r23, 0xDA	; 218
    2d38:	c4 01       	movw	r24, r8
    2d3a:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <memcpy>
			node->msg			= dataAddr;
    2d3e:	d7 01       	movw	r26, r14
    2d40:	18 96       	adiw	r26, 0x08	; 8
    2d42:	8d 92       	st	X+, r8
    2d44:	9c 92       	st	X, r9
    2d46:	19 97       	sbiw	r26, 0x09	; 9
			node->arrivalTime	= ir_rxtx[dir].last_byte;
    2d48:	f6 01       	movw	r30, r12
    2d4a:	80 81       	ld	r24, Z
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	a2 81       	ldd	r26, Z+2	; 0x02
    2d50:	b3 81       	ldd	r27, Z+3	; 0x03
    2d52:	f7 01       	movw	r30, r14
    2d54:	80 83       	st	Z, r24
    2d56:	91 83       	std	Z+1, r25	; 0x01
    2d58:	a2 83       	std	Z+2, r26	; 0x02
    2d5a:	b3 83       	std	Z+3, r27	; 0x03
			node->length		= ir_rxtx[dir].data_length;
    2d5c:	d6 01       	movw	r26, r12
    2d5e:	d6 96       	adiw	r26, 0x36	; 54
    2d60:	8c 91       	ld	r24, X
    2d62:	d6 97       	sbiw	r26, 0x36	; 54
    2d64:	84 87       	std	Z+12, r24	; 0x0c
			node->senderID		= ir_rxtx[dir].senderID;
    2d66:	16 96       	adiw	r26, 0x06	; 6
    2d68:	8d 91       	ld	r24, X+
    2d6a:	9c 91       	ld	r25, X
    2d6c:	17 97       	sbiw	r26, 0x07	; 7
    2d6e:	84 83       	std	Z+4, r24	; 0x04
    2d70:	95 83       	std	Z+5, r25	; 0x05
			node->crc			= ir_rxtx[dir].calc_crc;
    2d72:	1c 96       	adiw	r26, 0x0c	; 12
    2d74:	8d 91       	ld	r24, X+
    2d76:	9c 91       	ld	r25, X
    2d78:	1d 97       	sbiw	r26, 0x0d	; 13
    2d7a:	86 83       	std	Z+6, r24	; 0x06
    2d7c:	97 83       	std	Z+7, r25	; 0x07
			node->next			= NULL;
    2d7e:	12 86       	std	Z+10, r1	; 0x0a
    2d80:	13 86       	std	Z+11, r1	; 0x0b
			memoryConsumedByBuffer += (sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2d82:	d6 96       	adiw	r26, 0x36	; 54
    2d84:	2c 91       	ld	r18, X
    2d86:	80 91 a1 24 	lds	r24, 0x24A1	; 0x8024a1 <memoryConsumedByBuffer>
    2d8a:	90 91 a2 24 	lds	r25, 0x24A2	; 0x8024a2 <memoryConsumedByBuffer+0x1>
    2d8e:	0d 96       	adiw	r24, 0x0d	; 13
    2d90:	82 0f       	add	r24, r18
    2d92:	91 1d       	adc	r25, r1
    2d94:	80 93 a1 24 	sts	0x24A1, r24	; 0x8024a1 <memoryConsumedByBuffer>
    2d98:	90 93 a2 24 	sts	0x24A2, r25	; 0x8024a2 <memoryConsumedByBuffer+0x1>
			numWaitingMsgs++;
    2d9c:	80 91 f6 24 	lds	r24, 0x24F6	; 0x8024f6 <numWaitingMsgs>
    2da0:	8f 5f       	subi	r24, 0xFF	; 255
    2da2:	80 93 f6 24 	sts	0x24F6, r24	; 0x8024f6 <numWaitingMsgs>
    2da6:	bf be       	out	0x3f, r11	; 63
    __asm__ volatile ("" ::: "memory");
    2da8:	8e ce       	rjmp	.-740    	; 0x2ac6 <irReceive+0x1c6>
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
	}else{
		volatile MsgNode* node = incomingMsgHead;
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			if(incomingMsgHead==NULL){
				incomingMsgHead = (volatile MsgNode*)myMalloc(sizeof(MsgNode) + ir_rxtx[dir].data_length);
    2daa:	f7 01       	movw	r30, r14
    2dac:	86 a9       	ldd	r24, Z+54	; 0x36
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2dae:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2db0:	f8 94       	cli
		tmp = malloc(size);
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	0d 96       	adiw	r24, 0x0d	; 13
    2db6:	0e 94 22 4c 	call	0x9844	; 0x9844 <malloc>
    2dba:	7c 01       	movw	r14, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dbc:	df be       	out	0x3f, r13	; 63
    2dbe:	80 93 7b 26 	sts	0x267B, r24	; 0x80267b <incomingMsgHead>
    2dc2:	90 93 7c 26 	sts	0x267C, r25	; 0x80267c <incomingMsgHead+0x1>
    2dc6:	a6 cf       	rjmp	.-180    	; 0x2d14 <irReceive+0x414>
	const uint8_t notTimed	  = !(ir_rxtx[dir].status & IR_STATUS_TIMED_bm);
	const uint8_t wrongTarget = (notTimed && ir_rxtx[dir].target_ID && ir_rxtx[dir].target_ID!=getDropletID());
	
	if(!((crcMismatch||nullCrc)||(selfSender||wrongTarget))){
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
			if(notTimed){
    2dc8:	cc 20       	and	r12, r12
    2dca:	09 f4       	brne	.+2      	; 0x2dce <irReceive+0x4ce>
    2dcc:	0e c1       	rjmp	.+540    	; 0x2fea <irReceive+0x6ea>
				receivedIrCmd(dir);
			}else{
				switch(ir_rxtx[dir].data_length){
    2dce:	86 a9       	ldd	r24, Z+54	; 0x36
    2dd0:	88 23       	and	r24, r24
    2dd2:	09 f4       	brne	.+2      	; 0x2dd6 <irReceive+0x4d6>
    2dd4:	6a c0       	rjmp	.+212    	; 0x2eaa <irReceive+0x5aa>
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <irReceive+0x4dc>
    2dda:	75 ce       	rjmp	.-790    	; 0x2ac6 <irReceive+0x1c6>
					case 0: receivedIrSyncCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
					case 1: receivedRnbCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
    2ddc:	c6 80       	ldd	r12, Z+6	; 0x06
    2dde:	d7 80       	ldd	r13, Z+7	; 0x07
    2de0:	80 80       	ld	r8, Z
    2de2:	91 80       	ldd	r9, Z+1	; 0x01
    2de4:	a2 80       	ldd	r10, Z+2	; 0x02
    2de6:	b3 80       	ldd	r11, Z+3	; 0x03
    2de8:	e0 84       	ldd	r14, Z+8	; 0x08
    2dea:	f1 84       	ldd	r15, Z+9	; 0x09
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
	uint32_t rnbCmdSentTime = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2dec:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2dee:	f8 94       	cli
		if(!processing_rnb_flag && (irIsBusy(ALL_DIRS)<8)){
    2df0:	80 91 f5 24 	lds	r24, 0x24F5	; 0x8024f5 <processing_rnb_flag>
    2df4:	81 11       	cpse	r24, r1
    2df6:	f4 c0       	rjmp	.+488    	; 0x2fe0 <irReceive+0x6e0>
    2df8:	8f e3       	ldi	r24, 0x3F	; 63
    2dfa:	0e 94 e5 12 	call	0x25ca	; 0x25ca <irIsBusy>
    2dfe:	88 30       	cpi	r24, 0x08	; 8
    2e00:	08 f0       	brcs	.+2      	; 0x2e04 <irReceive+0x504>
    2e02:	ee c0       	rjmp	.+476    	; 0x2fe0 <irReceive+0x6e0>
			if(delay!=0xFFFF){
    2e04:	ff ef       	ldi	r31, 0xFF	; 255
    2e06:	ef 16       	cp	r14, r31
    2e08:	ff 06       	cpc	r15, r31
    2e0a:	09 f4       	brne	.+2      	; 0x2e0e <irReceive+0x50e>
    2e0c:	e9 c0       	rjmp	.+466    	; 0x2fe0 <irReceive+0x6e0>
				rnbCmdID = senderID;
    2e0e:	c0 92 7d 26 	sts	0x267D, r12	; 0x80267d <rnbCmdID>
    2e12:	d0 92 7e 26 	sts	0x267E, r13	; 0x80267e <rnbCmdID+0x1>
				//printf("%04X: %hu\r\n", rnbCmdID, delay+5);			
				if(delay<5) delay = 20-delay;
    2e16:	25 e0       	ldi	r18, 0x05	; 5
    2e18:	e2 16       	cp	r14, r18
    2e1a:	f1 04       	cpc	r15, r1
    2e1c:	30 f4       	brcc	.+12     	; 0x2e2a <irReceive+0x52a>
    2e1e:	84 e1       	ldi	r24, 0x14	; 20
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	ac 01       	movw	r20, r24
    2e24:	4e 19       	sub	r20, r14
    2e26:	5f 09       	sbc	r21, r15
    2e28:	7a 01       	movw	r14, r20
				rnbCmdSentTime = last_byte-(delay+5);
    2e2a:	55 e0       	ldi	r21, 0x05	; 5
    2e2c:	e5 0e       	add	r14, r21
    2e2e:	f1 1c       	adc	r15, r1
    2e30:	8e 18       	sub	r8, r14
    2e32:	9f 08       	sbc	r9, r15
    2e34:	a1 08       	sbc	r10, r1
    2e36:	b1 08       	sbc	r11, r1
				processThisRNB = 1;
				processing_rnb_flag = 1;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	80 93 f5 24 	sts	0x24F5, r24	; 0x8024f5 <processing_rnb_flag>
				hpIrBlock_bm = 0x3F;
    2e3e:	8f e3       	ldi	r24, 0x3F	; 63
    2e40:	80 93 7b 24 	sts	0x247B, r24	; 0x80247b <hpIrBlock_bm>
			if(delay!=0xFFFF){
				rnbCmdID = senderID;
				//printf("%04X: %hu\r\n", rnbCmdID, delay+5);			
				if(delay<5) delay = 20-delay;
				rnbCmdSentTime = last_byte-(delay+5);
				processThisRNB = 1;
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e46:	7f be       	out	0x3f, r7	; 63
				processing_rnb_flag = 1;
				hpIrBlock_bm = 0x3F;
			}
		}
	}
	if(processThisRNB){
    2e48:	88 23       	and	r24, r24
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <irReceive+0x54e>
    2e4c:	3c ce       	rjmp	.-904    	; 0x2ac6 <irReceive+0x1c6>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2e4e:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e50:	f8 94       	cli
    2e52:	a6 e0       	ldi	r26, 0x06	; 6
    2e54:	b0 e2       	ldi	r27, 0x20	; 32
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
    2e5a:	48 e3       	ldi	r20, 0x38	; 56
    2e5c:	07 c0       	rjmp	.+14     	; 0x2e6c <irReceive+0x56c>
    2e5e:	2f 5f       	subi	r18, 0xFF	; 255
    2e60:	3f 4f       	sbci	r19, 0xFF	; 255
    2e62:	12 96       	adiw	r26, 0x02	; 2
			}
		}
	}
	if(processThisRNB){
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t dir=0;dir<6;dir++){
    2e64:	26 30       	cpi	r18, 0x06	; 6
    2e66:	31 05       	cpc	r19, r1
    2e68:	09 f4       	brne	.+2      	; 0x2e6c <irReceive+0x56c>
    2e6a:	31 c1       	rjmp	.+610    	; 0x30ce <irReceive+0x7ce>
				if(ir_rxtx[dir].senderID==senderID){
    2e6c:	42 9f       	mul	r20, r18
    2e6e:	f0 01       	movw	r30, r0
    2e70:	43 9f       	mul	r20, r19
    2e72:	f0 0d       	add	r31, r0
    2e74:	11 24       	eor	r1, r1
    2e76:	e7 50       	subi	r30, 0x07	; 7
    2e78:	fb 4d       	sbci	r31, 0xDB	; 219
    2e7a:	86 81       	ldd	r24, Z+6	; 0x06
    2e7c:	97 81       	ldd	r25, Z+7	; 0x07
    2e7e:	c8 16       	cp	r12, r24
    2e80:	d9 06       	cpc	r13, r25
    2e82:	69 f7       	brne	.-38     	; 0x2e5e <irReceive+0x55e>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2e84:	14 82       	std	Z+4, r1	; 0x04
    2e86:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2e88:	16 82       	std	Z+6, r1	; 0x06
    2e8a:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2e8c:	10 86       	std	Z+8, r1	; 0x08
    2e8e:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2e90:	12 86       	std	Z+10, r1	; 0x0a
    2e92:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2e94:	14 86       	std	Z+12, r1	; 0x0c
    2e96:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2e98:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2e9a:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2e9c:	ed 91       	ld	r30, X+
    2e9e:	fc 91       	ld	r31, X
    2ea0:	11 97       	sbiw	r26, 0x01	; 1
    2ea2:	84 81       	ldd	r24, Z+4	; 0x04
    2ea4:	80 61       	ori	r24, 0x10	; 16
    2ea6:	84 83       	std	Z+4, r24	; 0x04
    2ea8:	da cf       	rjmp	.-76     	; 0x2e5e <irReceive+0x55e>
		if(ir_rxtx[dir].status & IR_STATUS_COMMAND_bm){
			if(notTimed){
				receivedIrCmd(dir);
			}else{
				switch(ir_rxtx[dir].data_length){
					case 0: receivedIrSyncCmd(ir_rxtx[dir].target_ID, ir_rxtx[dir].last_byte, ir_rxtx[dir].senderID); break;
    2eaa:	c6 80       	ldd	r12, Z+6	; 0x06
    2eac:	d7 80       	ldd	r13, Z+7	; 0x07
    2eae:	80 80       	ld	r8, Z
    2eb0:	91 80       	ldd	r9, Z+1	; 0x01
    2eb2:	a2 80       	ldd	r10, Z+2	; 0x02
    2eb4:	b3 80       	ldd	r11, Z+3	; 0x03
    2eb6:	e0 84       	ldd	r14, Z+8	; 0x08
    2eb8:	f1 84       	ldd	r15, Z+9	; 0x09
}

static void receivedIrSyncCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisFFSync = 0;
	uint16_t count;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2eba:	9f b7       	in	r25, 0x3f	; 63
    2ebc:	f8 94       	cli
		if(!processingFFsyncFlag){
    2ebe:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <processingFFsyncFlag>
    2ec2:	81 11       	cpse	r24, r1
    2ec4:	fc c0       	rjmp	.+504    	; 0x30be <irReceive+0x7be>
			count = TCE0.CNT;
    2ec6:	60 90 20 0a 	lds	r6, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    2eca:	70 90 21 0a 	lds	r7, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
			if(delay!=0xFFFF){
    2ece:	ff ef       	ldi	r31, 0xFF	; 255
    2ed0:	ef 16       	cp	r14, r31
    2ed2:	ff 06       	cpc	r15, r31
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <irReceive+0x5d8>
    2ed6:	f3 c0       	rjmp	.+486    	; 0x30be <irReceive+0x7be>
				processThisFFSync = 1;
				processingFFsyncFlag = 1;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <processingFFsyncFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ede:	9f bf       	out	0x3f, r25	; 63
			}
		}
	}
	if(processThisFFSync){
    2ee0:	88 23       	and	r24, r24
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <irReceive+0x5e6>
    2ee4:	f0 cd       	rjmp	.-1056   	; 0x2ac6 <irReceive+0x1c6>
		//printf("senderID: %04X\tdelay: %hu\r\n", ir_rxtx[dir].sender_ID, delay);
		delay = delay+5+(getTime()-last_byte); //The time is measured right before sending and is the last two bytes of the message. Our baud rate means that it takes 5ms to send two bytes.
    2ee6:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    2eea:	97 01       	movw	r18, r14
    2eec:	2b 5f       	subi	r18, 0xFB	; 251
    2eee:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef0:	28 19       	sub	r18, r8
    2ef2:	39 09       	sbc	r19, r9
    2ef4:	62 0f       	add	r22, r18
    2ef6:	73 1f       	adc	r23, r19

ObsQueue* obsStart;

inline void updateFireflyCounter(volatile uint16_t count, volatile uint16_t delay){
	//printf("%u\r\n", delay);
	uint16_t theDelay = delay*FFSYNC_MS_CONVERSION_FACTOR;
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__floatunsisf>
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	4a ef       	ldi	r20, 0xFA	; 250
    2f06:	50 e4       	ldi	r21, 0x40	; 64
    2f08:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    2f0c:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
	uint16_t obs;
	ObsQueue* node;
	if(count<=theDelay){
    2f10:	66 15       	cp	r22, r6
    2f12:	77 05       	cpc	r23, r7
    2f14:	08 f4       	brcc	.+2      	; 0x2f18 <irReceive+0x618>
    2f16:	0b c1       	rjmp	.+534    	; 0x312e <irReceive+0x82e>
		obs = count + (FFSYNC_FULL_PERIOD-theDelay);
    2f18:	2f eb       	ldi	r18, 0xBF	; 191
    2f1a:	62 1a       	sub	r6, r18
    2f1c:	22 e6       	ldi	r18, 0x62	; 98
    2f1e:	72 0a       	sbc	r7, r18
    2f20:	66 1a       	sub	r6, r22
    2f22:	77 0a       	sbc	r7, r23
	return droplet_ID;
}

inline void* myMalloc(size_t size){
	void* tmp = NULL;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2f24:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f26:	f8 94       	cli
		tmp = malloc(size);
    2f28:	86 e0       	ldi	r24, 0x06	; 6
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	0e 94 22 4c 	call	0x9844	; 0x9844 <malloc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f30:	ff be       	out	0x3f, r15	; 63
	}else{
		obs = count - theDelay;
	}
	node = (ObsQueue*)myMalloc(sizeof(ObsQueue));
	if(node==NULL){
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	41 f1       	breq	.+80     	; 0x2f86 <irReceive+0x686>
		return;
	}
	ObsQueue* curr = obsStart->prev;
    2f36:	e0 91 7d 24 	lds	r30, 0x247D	; 0x80247d <obsStart>
    2f3a:	f0 91 7e 24 	lds	r31, 0x247E	; 0x80247e <obsStart+0x1>
    2f3e:	04 80       	ldd	r0, Z+4	; 0x04
    2f40:	f5 81       	ldd	r31, Z+5	; 0x05
    2f42:	e0 2d       	mov	r30, r0
	while(obs < curr->obs){
    2f44:	20 81       	ld	r18, Z
    2f46:	31 81       	ldd	r19, Z+1	; 0x01
    2f48:	62 16       	cp	r6, r18
    2f4a:	73 06       	cpc	r7, r19
    2f4c:	40 f4       	brcc	.+16     	; 0x2f5e <irReceive+0x65e>
		curr = curr->prev;
    2f4e:	04 80       	ldd	r0, Z+4	; 0x04
    2f50:	f5 81       	ldd	r31, Z+5	; 0x05
    2f52:	e0 2d       	mov	r30, r0
	node = (ObsQueue*)myMalloc(sizeof(ObsQueue));
	if(node==NULL){
		return;
	}
	ObsQueue* curr = obsStart->prev;
	while(obs < curr->obs){
    2f54:	20 81       	ld	r18, Z
    2f56:	31 81       	ldd	r19, Z+1	; 0x01
    2f58:	62 16       	cp	r6, r18
    2f5a:	73 06       	cpc	r7, r19
    2f5c:	c0 f3       	brcs	.-16     	; 0x2f4e <irReceive+0x64e>
		curr = curr->prev;
	}
	(curr->next)->prev = node;
    2f5e:	22 81       	ldd	r18, Z+2	; 0x02
    2f60:	33 81       	ldd	r19, Z+3	; 0x03
    2f62:	d9 01       	movw	r26, r18
    2f64:	14 96       	adiw	r26, 0x04	; 4
    2f66:	8d 93       	st	X+, r24
    2f68:	9c 93       	st	X, r25
    2f6a:	15 97       	sbiw	r26, 0x05	; 5
	node->next = curr->next;
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	12 96       	adiw	r26, 0x02	; 2
    2f70:	2d 93       	st	X+, r18
    2f72:	3c 93       	st	X, r19
    2f74:	13 97       	sbiw	r26, 0x03	; 3
	node->prev = curr;
    2f76:	14 96       	adiw	r26, 0x04	; 4
    2f78:	ed 93       	st	X+, r30
    2f7a:	fc 93       	st	X, r31
    2f7c:	15 97       	sbiw	r26, 0x05	; 5
	curr->next = node;
    2f7e:	82 83       	std	Z+2, r24	; 0x02
    2f80:	93 83       	std	Z+3, r25	; 0x03
			
	node->obs = obs;
    2f82:	6d 92       	st	X+, r6
    2f84:	7c 92       	st	X, r7
		updateFireflyCounter(count, delay);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2f86:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f88:	f8 94       	cli
    2f8a:	a6 e0       	ldi	r26, 0x06	; 6
    2f8c:	b0 e2       	ldi	r27, 0x20	; 32
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
    2f92:	48 e3       	ldi	r20, 0x38	; 56
    2f94:	06 c0       	rjmp	.+12     	; 0x2fa2 <irReceive+0x6a2>
    2f96:	01 96       	adiw	r24, 0x01	; 1
    2f98:	12 96       	adiw	r26, 0x02	; 2
	if(processThisFFSync){
		//printf("senderID: %04X\tdelay: %hu\r\n", ir_rxtx[dir].sender_ID, delay);
		delay = delay+5+(getTime()-last_byte); //The time is measured right before sending and is the last two bytes of the message. Our baud rate means that it takes 5ms to send two bytes.
		updateFireflyCounter(count, delay);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t dir=0;dir<6;dir++){
    2f9a:	86 30       	cpi	r24, 0x06	; 6
    2f9c:	91 05       	cpc	r25, r1
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <irReceive+0x6a2>
    2fa0:	92 c0       	rjmp	.+292    	; 0x30c6 <irReceive+0x7c6>
				if(ir_rxtx[dir].senderID==senderID){
    2fa2:	48 9f       	mul	r20, r24
    2fa4:	f0 01       	movw	r30, r0
    2fa6:	49 9f       	mul	r20, r25
    2fa8:	f0 0d       	add	r31, r0
    2faa:	11 24       	eor	r1, r1
    2fac:	e7 50       	subi	r30, 0x07	; 7
    2fae:	fb 4d       	sbci	r31, 0xDB	; 219
    2fb0:	26 81       	ldd	r18, Z+6	; 0x06
    2fb2:	37 81       	ldd	r19, Z+7	; 0x07
    2fb4:	c2 16       	cp	r12, r18
    2fb6:	d3 06       	cpc	r13, r19
    2fb8:	71 f7       	brne	.-36     	; 0x2f96 <irReceive+0x696>
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    2fba:	14 82       	std	Z+4, r1	; 0x04
    2fbc:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    2fbe:	16 82       	std	Z+6, r1	; 0x06
    2fc0:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    2fc2:	10 86       	std	Z+8, r1	; 0x08
    2fc4:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    2fc6:	12 86       	std	Z+10, r1	; 0x0a
    2fc8:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    2fca:	14 86       	std	Z+12, r1	; 0x0c
    2fcc:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    2fce:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    2fd0:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    2fd2:	ed 91       	ld	r30, X+
    2fd4:	fc 91       	ld	r31, X
    2fd6:	11 97       	sbiw	r26, 0x01	; 1
    2fd8:	24 81       	ldd	r18, Z+4	; 0x04
    2fda:	20 61       	ori	r18, 0x10	; 16
    2fdc:	24 83       	std	Z+4, r18	; 0x04
    2fde:	db cf       	rjmp	.-74     	; 0x2f96 <irReceive+0x696>
	//printf("F\r\n");
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
	uint32_t rnbCmdSentTime = 0;
    2fe0:	81 2c       	mov	r8, r1
    2fe2:	91 2c       	mov	r9, r1
    2fe4:	54 01       	movw	r10, r8
	}
	//printf("F\r\n");
}

static void receivedRnbCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisRNB = 0;
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	2e cf       	rjmp	.-420    	; 0x2e46 <irReceive+0x546>
	}
}

static void receivedIrCmd(uint8_t dir){
	uint8_t processThisCommand = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    2fea:	cf b6       	in	r12, 0x3f	; 63
    2fec:	f8 94       	cli
		if(!processingCmdFlag){
    2fee:	80 91 2b 23 	lds	r24, 0x232B	; 0x80232b <processingCmdFlag>
    2ff2:	81 11       	cpse	r24, r1
    2ff4:	66 c0       	rjmp	.+204    	; 0x30c2 <irReceive+0x7c2>
			processThisCommand = 1;
			memcpy((void*)cmdBuffer, (char*)ir_rxtx[dir].buf, ir_rxtx[dir].data_length);
    2ff6:	46 a9       	ldd	r20, Z+54	; 0x36
    2ff8:	50 e0       	ldi	r21, 0x00	; 0
    2ffa:	69 5f       	subi	r22, 0xF9	; 249
    2ffc:	7a 4d       	sbci	r23, 0xDA	; 218
    2ffe:	88 ee       	ldi	r24, 0xE8	; 232
    3000:	92 e2       	ldi	r25, 0x22	; 34
    3002:	0e 94 7a 4f 	call	0x9ef4	; 0x9ef4 <memcpy>
			cmdBuffer[ir_rxtx[dir].data_length]='\0';
    3006:	d7 01       	movw	r26, r14
    3008:	d6 96       	adiw	r26, 0x36	; 54
    300a:	ec 91       	ld	r30, X
    300c:	d6 97       	sbiw	r26, 0x36	; 54
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	e8 51       	subi	r30, 0x18	; 24
    3012:	fd 4d       	sbci	r31, 0xDD	; 221
    3014:	10 82       	st	Z, r1
			cmdLength = ir_rxtx[dir].data_length;
    3016:	d6 96       	adiw	r26, 0x36	; 54
    3018:	8c 91       	ld	r24, X
    301a:	d6 97       	sbiw	r26, 0x36	; 54
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	80 93 28 23 	sts	0x2328, r24	; 0x802328 <cmdLength>
    3022:	90 93 29 23 	sts	0x2329, r25	; 0x802329 <cmdLength+0x1>
			cmdArrivalTime = ir_rxtx[dir].last_byte;	//This is a 'global' value, referenced by other *.c files.
    3026:	8d 91       	ld	r24, X+
    3028:	9d 91       	ld	r25, X+
    302a:	0d 90       	ld	r0, X+
    302c:	bc 91       	ld	r27, X
    302e:	a0 2d       	mov	r26, r0
    3030:	80 93 89 26 	sts	0x2689, r24	; 0x802689 <cmdArrivalTime>
    3034:	90 93 8a 26 	sts	0x268A, r25	; 0x80268a <cmdArrivalTime+0x1>
    3038:	a0 93 8b 26 	sts	0x268B, r26	; 0x80268b <cmdArrivalTime+0x2>
    303c:	b0 93 8c 26 	sts	0x268C, r27	; 0x80268c <cmdArrivalTime+0x3>
			cmdSenderId = ir_rxtx[dir].senderID;		//This is a 'global' value, referenced by other *.c files.
    3040:	f7 01       	movw	r30, r14
    3042:	86 81       	ldd	r24, Z+6	; 0x06
    3044:	97 81       	ldd	r25, Z+7	; 0x07
    3046:	80 93 f7 24 	sts	0x24F7, r24	; 0x8024f7 <cmdSenderId>
    304a:	90 93 f8 24 	sts	0x24F8, r25	; 0x8024f8 <cmdSenderId+0x1>
			cmdArrivalDir = dir;
    304e:	d0 92 98 24 	sts	0x2498, r13	; 0x802498 <cmdArrivalDir>
			processingCmdFlag = 1;
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	80 93 2b 23 	sts	0x232B, r24	; 0x80232b <processingCmdFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3058:	cf be       	out	0x3f, r12	; 63
		}
	}
	if(processThisCommand){
    305a:	88 23       	and	r24, r24
    305c:	09 f4       	brne	.+2      	; 0x3060 <irReceive+0x760>
    305e:	33 cd       	rjmp	.-1434   	; 0x2ac6 <irReceive+0x1c6>
		scheduleTask(5, handleCmdWrapper, NULL);
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	4e ee       	ldi	r20, 0xEE	; 238
    3066:	5f e0       	ldi	r21, 0x0F	; 15
    3068:	65 e0       	ldi	r22, 0x05	; 5
    306a:	70 e0       	ldi	r23, 0x00	; 0
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <scheduleTask>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3074:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3076:	f8 94       	cli
    3078:	a6 e0       	ldi	r26, 0x06	; 6
    307a:	b0 e2       	ldi	r27, 0x20	; 32
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	90 e0       	ldi	r25, 0x00	; 0
		ir_sense_channels[dir]->INTCTRL = ADC_CH_INTLVL_OFF_gc;
	#endif
	#ifdef HARDCORE_DEBUG_DIR
		if(dir==HARDCORE_DEBUG_DIR) printf("\r\n");
	#endif
	ir_rxtx[dir].data_crc		= 0;
    3080:	38 e3       	ldi	r19, 0x38	; 56
    3082:	38 9f       	mul	r19, r24
    3084:	f0 01       	movw	r30, r0
    3086:	39 9f       	mul	r19, r25
    3088:	f0 0d       	add	r31, r0
    308a:	11 24       	eor	r1, r1
    308c:	e7 50       	subi	r30, 0x07	; 7
    308e:	fb 4d       	sbci	r31, 0xDB	; 219
    3090:	14 82       	std	Z+4, r1	; 0x04
    3092:	15 82       	std	Z+5, r1	; 0x05
	ir_rxtx[dir].senderID		= 0;
    3094:	16 82       	std	Z+6, r1	; 0x06
    3096:	17 82       	std	Z+7, r1	; 0x07
	
	ir_rxtx[dir].target_ID		= 0;	
    3098:	10 86       	std	Z+8, r1	; 0x08
    309a:	11 86       	std	Z+9, r1	; 0x09
	ir_rxtx[dir].curr_pos		= 0;
    309c:	12 86       	std	Z+10, r1	; 0x0a
    309e:	13 86       	std	Z+11, r1	; 0x0b
	ir_rxtx[dir].calc_crc		= 0;
    30a0:	14 86       	std	Z+12, r1	; 0x0c
    30a2:	15 86       	std	Z+13, r1	; 0x0d
	ir_rxtx[dir].data_length	= 0;	
    30a4:	16 aa       	std	Z+54, r1	; 0x36
	
	ir_rxtx[dir].status			= 0;	
    30a6:	17 aa       	std	Z+55, r1	; 0x37
	
	channel[dir]->CTRLB |= USART_RXEN_bm; //this enables receive on the USART
    30a8:	ed 91       	ld	r30, X+
    30aa:	fd 91       	ld	r31, X+
    30ac:	24 81       	ldd	r18, Z+4	; 0x04
    30ae:	20 61       	ori	r18, 0x10	; 16
    30b0:	24 83       	std	Z+4, r18	; 0x04
    30b2:	01 96       	adiw	r24, 0x01	; 1
		}
	}
	if(processThisCommand){
		scheduleTask(5, handleCmdWrapper, NULL);
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(uint8_t other_dir=0;other_dir<6;other_dir++){
    30b4:	86 30       	cpi	r24, 0x06	; 6
    30b6:	91 05       	cpc	r25, r1
    30b8:	21 f7       	brne	.-56     	; 0x3082 <irReceive+0x782>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    30ba:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    30bc:	04 cd       	rjmp	.-1528   	; 0x2ac6 <irReceive+0x1c6>
		}
	}
}

static void receivedIrSyncCmd(uint16_t delay, uint32_t last_byte, id_t senderID){
	uint8_t processThisFFSync = 0;
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	0e cf       	rjmp	.-484    	; 0x2ede <irReceive+0x5de>
		handleCompletedMsg(dir);
	}
}

static void receivedIrCmd(uint8_t dir){
	uint8_t processThisCommand = 0;
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	c9 cf       	rjmp	.-110    	; 0x3058 <irReceive+0x758>
			for(uint8_t dir=0;dir<6;dir++){
				if(ir_rxtx[dir].senderID==senderID){
					clearIrBuffer(dir);
				}
			}
			processingFFsyncFlag = 0;
    30c6:	10 92 2a 23 	sts	0x232A, r1	; 0x80232a <processingFFsyncFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    30ca:	5f bf       	out	0x3f, r21	; 63
    __asm__ volatile ("" ::: "memory");
    30cc:	fc cc       	rjmp	.-1544   	; 0x2ac6 <irReceive+0x1c6>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    30ce:	5f bf       	out	0x3f, r21	; 63
				if(ir_rxtx[dir].senderID==senderID){
					clearIrBuffer(dir);
				}
			}
		}
		irRangeMeas(rnbCmdSentTime);	
    30d0:	c5 01       	movw	r24, r10
    30d2:	b4 01       	movw	r22, r8
    30d4:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <irRangeMeas>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    30d8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    30da:	f8 94       	cli
			hpIrBlock_bm = 0;
    30dc:	10 92 7b 24 	sts	0x247B, r1	; 0x80247b <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    30e0:	8f bf       	out	0x3f, r24	; 63
		}
		scheduleTask(10, useRnbData, NULL);
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	4d e6       	ldi	r20, 0x6D	; 109
    30e8:	5b e2       	ldi	r21, 0x2B	; 43
    30ea:	6a e0       	ldi	r22, 0x0A	; 10
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <scheduleTask>
    30f6:	e7 cc       	rjmp	.-1586   	; 0x2ac6 <irReceive+0x1c6>
	   } while (busy);
}

static void addMsgToMsgQueue(uint8_t dir){
	if(ir_rxtx[dir].data_length == 0){
		printf_P(PSTR("ERROR! Should NOT be adding 0-length message to queue.\r\n"));
    30f8:	8b e2       	ldi	r24, 0x2B	; 43
    30fa:	96 e0       	ldi	r25, 0x06	; 6
    30fc:	9f 93       	push	r25
    30fe:	8f 93       	push	r24
    3100:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	de cc       	rjmp	.-1604   	; 0x2ac6 <irReceive+0x1c6>
	}else if(ir_rxtx[dir].data_length > IR_BUFFER_SIZE){
		printf_P(PSTR("ERROR! Should NOT be adding a message with length greater than buffer size to queue.\r\n"));
    310a:	84 ed       	ldi	r24, 0xD4	; 212
    310c:	95 e0       	ldi	r25, 0x05	; 5
    310e:	9f 93       	push	r25
    3110:	8f 93       	push	r24
    3112:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	d5 cc       	rjmp	.-1622   	; 0x2ac6 <irReceive+0x1c6>
	}else if(memoryConsumedByBuffer > 500){
		printf_P(PSTR("ERROR! Buffered incoming messages consuming too much memory. Allow handle_msg to be called more frequently.\r\n"));
    311c:	86 e6       	ldi	r24, 0x66	; 102
    311e:	95 e0       	ldi	r25, 0x05	; 5
    3120:	9f 93       	push	r25
    3122:	8f 93       	push	r24
    3124:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	cc cc       	rjmp	.-1640   	; 0x2ac6 <irReceive+0x1c6>
	uint16_t obs;
	ObsQueue* node;
	if(count<=theDelay){
		obs = count + (FFSYNC_FULL_PERIOD-theDelay);
	}else{
		obs = count - theDelay;
    312e:	66 1a       	sub	r6, r22
    3130:	77 0a       	sbc	r7, r23
    3132:	f8 ce       	rjmp	.-528    	; 0x2f24 <irReceive+0x624>

00003134 <__vector_25>:
	}
	return receiving | transmitting | timed_cmd | hp_block;
}

// ISRs for IR channel 0
ISR( USARTC0_RXC_vect ) { irReceive(0); }
    3134:	1f 92       	push	r1
    3136:	0f 92       	push	r0
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	0f 92       	push	r0
    313c:	11 24       	eor	r1, r1
    313e:	0b b6       	in	r0, 0x3b	; 59
    3140:	0f 92       	push	r0
    3142:	2f 93       	push	r18
    3144:	3f 93       	push	r19
    3146:	4f 93       	push	r20
    3148:	5f 93       	push	r21
    314a:	6f 93       	push	r22
    314c:	7f 93       	push	r23
    314e:	8f 93       	push	r24
    3150:	9f 93       	push	r25
    3152:	af 93       	push	r26
    3154:	bf 93       	push	r27
    3156:	ef 93       	push	r30
    3158:	ff 93       	push	r31
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	0e 94 80 14 	call	0x2900	; 0x2900 <irReceive>
    3160:	ff 91       	pop	r31
    3162:	ef 91       	pop	r30
    3164:	bf 91       	pop	r27
    3166:	af 91       	pop	r26
    3168:	9f 91       	pop	r25
    316a:	8f 91       	pop	r24
    316c:	7f 91       	pop	r23
    316e:	6f 91       	pop	r22
    3170:	5f 91       	pop	r21
    3172:	4f 91       	pop	r20
    3174:	3f 91       	pop	r19
    3176:	2f 91       	pop	r18
    3178:	0f 90       	pop	r0
    317a:	0b be       	out	0x3b, r0	; 59
    317c:	0f 90       	pop	r0
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	0f 90       	pop	r0
    3182:	1f 90       	pop	r1
    3184:	18 95       	reti

00003186 <__vector_27>:
ISR( USARTC0_TXC_vect ) { irTransmitComplete(0); }
    3186:	1f 92       	push	r1
    3188:	0f 92       	push	r0
    318a:	0f b6       	in	r0, 0x3f	; 63
    318c:	0f 92       	push	r0
    318e:	11 24       	eor	r1, r1
    3190:	0b b6       	in	r0, 0x3b	; 59
    3192:	0f 92       	push	r0
    3194:	2f 93       	push	r18
    3196:	3f 93       	push	r19
    3198:	4f 93       	push	r20
    319a:	5f 93       	push	r21
    319c:	6f 93       	push	r22
    319e:	7f 93       	push	r23
    31a0:	8f 93       	push	r24
    31a2:	9f 93       	push	r25
    31a4:	af 93       	push	r26
    31a6:	bf 93       	push	r27
    31a8:	ef 93       	push	r30
    31aa:	ff 93       	push	r31
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <irTransmitComplete>
    31b2:	ff 91       	pop	r31
    31b4:	ef 91       	pop	r30
    31b6:	bf 91       	pop	r27
    31b8:	af 91       	pop	r26
    31ba:	9f 91       	pop	r25
    31bc:	8f 91       	pop	r24
    31be:	7f 91       	pop	r23
    31c0:	6f 91       	pop	r22
    31c2:	5f 91       	pop	r21
    31c4:	4f 91       	pop	r20
    31c6:	3f 91       	pop	r19
    31c8:	2f 91       	pop	r18
    31ca:	0f 90       	pop	r0
    31cc:	0b be       	out	0x3b, r0	; 59
    31ce:	0f 90       	pop	r0
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	0f 90       	pop	r0
    31d4:	1f 90       	pop	r1
    31d6:	18 95       	reti

000031d8 <__vector_26>:
ISR( USARTC0_DRE_vect ) { irTransmit(0); }
    31d8:	1f 92       	push	r1
    31da:	0f 92       	push	r0
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	0f 92       	push	r0
    31e0:	11 24       	eor	r1, r1
    31e2:	0b b6       	in	r0, 0x3b	; 59
    31e4:	0f 92       	push	r0
    31e6:	2f 93       	push	r18
    31e8:	3f 93       	push	r19
    31ea:	4f 93       	push	r20
    31ec:	5f 93       	push	r21
    31ee:	6f 93       	push	r22
    31f0:	7f 93       	push	r23
    31f2:	8f 93       	push	r24
    31f4:	9f 93       	push	r25
    31f6:	af 93       	push	r26
    31f8:	bf 93       	push	r27
    31fa:	ef 93       	push	r30
    31fc:	ff 93       	push	r31
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	0e 94 26 10 	call	0x204c	; 0x204c <irTransmit>
    3204:	ff 91       	pop	r31
    3206:	ef 91       	pop	r30
    3208:	bf 91       	pop	r27
    320a:	af 91       	pop	r26
    320c:	9f 91       	pop	r25
    320e:	8f 91       	pop	r24
    3210:	7f 91       	pop	r23
    3212:	6f 91       	pop	r22
    3214:	5f 91       	pop	r21
    3216:	4f 91       	pop	r20
    3218:	3f 91       	pop	r19
    321a:	2f 91       	pop	r18
    321c:	0f 90       	pop	r0
    321e:	0b be       	out	0x3b, r0	; 59
    3220:	0f 90       	pop	r0
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	0f 90       	pop	r0
    3226:	1f 90       	pop	r1
    3228:	18 95       	reti

0000322a <__vector_28>:

// ISRs for IR channel 1
ISR( USARTC1_RXC_vect ) { irReceive(1); }
    322a:	1f 92       	push	r1
    322c:	0f 92       	push	r0
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	0f 92       	push	r0
    3232:	11 24       	eor	r1, r1
    3234:	0b b6       	in	r0, 0x3b	; 59
    3236:	0f 92       	push	r0
    3238:	2f 93       	push	r18
    323a:	3f 93       	push	r19
    323c:	4f 93       	push	r20
    323e:	5f 93       	push	r21
    3240:	6f 93       	push	r22
    3242:	7f 93       	push	r23
    3244:	8f 93       	push	r24
    3246:	9f 93       	push	r25
    3248:	af 93       	push	r26
    324a:	bf 93       	push	r27
    324c:	ef 93       	push	r30
    324e:	ff 93       	push	r31
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	0e 94 80 14 	call	0x2900	; 0x2900 <irReceive>
    3256:	ff 91       	pop	r31
    3258:	ef 91       	pop	r30
    325a:	bf 91       	pop	r27
    325c:	af 91       	pop	r26
    325e:	9f 91       	pop	r25
    3260:	8f 91       	pop	r24
    3262:	7f 91       	pop	r23
    3264:	6f 91       	pop	r22
    3266:	5f 91       	pop	r21
    3268:	4f 91       	pop	r20
    326a:	3f 91       	pop	r19
    326c:	2f 91       	pop	r18
    326e:	0f 90       	pop	r0
    3270:	0b be       	out	0x3b, r0	; 59
    3272:	0f 90       	pop	r0
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	0f 90       	pop	r0
    3278:	1f 90       	pop	r1
    327a:	18 95       	reti

0000327c <__vector_30>:
ISR( USARTC1_TXC_vect ) { irTransmitComplete(1); }
    327c:	1f 92       	push	r1
    327e:	0f 92       	push	r0
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	0f 92       	push	r0
    3284:	11 24       	eor	r1, r1
    3286:	0b b6       	in	r0, 0x3b	; 59
    3288:	0f 92       	push	r0
    328a:	2f 93       	push	r18
    328c:	3f 93       	push	r19
    328e:	4f 93       	push	r20
    3290:	5f 93       	push	r21
    3292:	6f 93       	push	r22
    3294:	7f 93       	push	r23
    3296:	8f 93       	push	r24
    3298:	9f 93       	push	r25
    329a:	af 93       	push	r26
    329c:	bf 93       	push	r27
    329e:	ef 93       	push	r30
    32a0:	ff 93       	push	r31
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <irTransmitComplete>
    32a8:	ff 91       	pop	r31
    32aa:	ef 91       	pop	r30
    32ac:	bf 91       	pop	r27
    32ae:	af 91       	pop	r26
    32b0:	9f 91       	pop	r25
    32b2:	8f 91       	pop	r24
    32b4:	7f 91       	pop	r23
    32b6:	6f 91       	pop	r22
    32b8:	5f 91       	pop	r21
    32ba:	4f 91       	pop	r20
    32bc:	3f 91       	pop	r19
    32be:	2f 91       	pop	r18
    32c0:	0f 90       	pop	r0
    32c2:	0b be       	out	0x3b, r0	; 59
    32c4:	0f 90       	pop	r0
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	0f 90       	pop	r0
    32ca:	1f 90       	pop	r1
    32cc:	18 95       	reti

000032ce <__vector_29>:
ISR( USARTC1_DRE_vect ) { irTransmit(1); }
    32ce:	1f 92       	push	r1
    32d0:	0f 92       	push	r0
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	0f 92       	push	r0
    32d6:	11 24       	eor	r1, r1
    32d8:	0b b6       	in	r0, 0x3b	; 59
    32da:	0f 92       	push	r0
    32dc:	2f 93       	push	r18
    32de:	3f 93       	push	r19
    32e0:	4f 93       	push	r20
    32e2:	5f 93       	push	r21
    32e4:	6f 93       	push	r22
    32e6:	7f 93       	push	r23
    32e8:	8f 93       	push	r24
    32ea:	9f 93       	push	r25
    32ec:	af 93       	push	r26
    32ee:	bf 93       	push	r27
    32f0:	ef 93       	push	r30
    32f2:	ff 93       	push	r31
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	0e 94 26 10 	call	0x204c	; 0x204c <irTransmit>
    32fa:	ff 91       	pop	r31
    32fc:	ef 91       	pop	r30
    32fe:	bf 91       	pop	r27
    3300:	af 91       	pop	r26
    3302:	9f 91       	pop	r25
    3304:	8f 91       	pop	r24
    3306:	7f 91       	pop	r23
    3308:	6f 91       	pop	r22
    330a:	5f 91       	pop	r21
    330c:	4f 91       	pop	r20
    330e:	3f 91       	pop	r19
    3310:	2f 91       	pop	r18
    3312:	0f 90       	pop	r0
    3314:	0b be       	out	0x3b, r0	; 59
    3316:	0f 90       	pop	r0
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	0f 90       	pop	r0
    331c:	1f 90       	pop	r1
    331e:	18 95       	reti

00003320 <__vector_88>:

// ISRs for IR channel 2
ISR( USARTD0_RXC_vect ) { irReceive(2); }
    3320:	1f 92       	push	r1
    3322:	0f 92       	push	r0
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	0f 92       	push	r0
    3328:	11 24       	eor	r1, r1
    332a:	0b b6       	in	r0, 0x3b	; 59
    332c:	0f 92       	push	r0
    332e:	2f 93       	push	r18
    3330:	3f 93       	push	r19
    3332:	4f 93       	push	r20
    3334:	5f 93       	push	r21
    3336:	6f 93       	push	r22
    3338:	7f 93       	push	r23
    333a:	8f 93       	push	r24
    333c:	9f 93       	push	r25
    333e:	af 93       	push	r26
    3340:	bf 93       	push	r27
    3342:	ef 93       	push	r30
    3344:	ff 93       	push	r31
    3346:	82 e0       	ldi	r24, 0x02	; 2
    3348:	0e 94 80 14 	call	0x2900	; 0x2900 <irReceive>
    334c:	ff 91       	pop	r31
    334e:	ef 91       	pop	r30
    3350:	bf 91       	pop	r27
    3352:	af 91       	pop	r26
    3354:	9f 91       	pop	r25
    3356:	8f 91       	pop	r24
    3358:	7f 91       	pop	r23
    335a:	6f 91       	pop	r22
    335c:	5f 91       	pop	r21
    335e:	4f 91       	pop	r20
    3360:	3f 91       	pop	r19
    3362:	2f 91       	pop	r18
    3364:	0f 90       	pop	r0
    3366:	0b be       	out	0x3b, r0	; 59
    3368:	0f 90       	pop	r0
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	0f 90       	pop	r0
    336e:	1f 90       	pop	r1
    3370:	18 95       	reti

00003372 <__vector_90>:
ISR( USARTD0_TXC_vect ) { irTransmitComplete(2); }
    3372:	1f 92       	push	r1
    3374:	0f 92       	push	r0
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	0f 92       	push	r0
    337a:	11 24       	eor	r1, r1
    337c:	0b b6       	in	r0, 0x3b	; 59
    337e:	0f 92       	push	r0
    3380:	2f 93       	push	r18
    3382:	3f 93       	push	r19
    3384:	4f 93       	push	r20
    3386:	5f 93       	push	r21
    3388:	6f 93       	push	r22
    338a:	7f 93       	push	r23
    338c:	8f 93       	push	r24
    338e:	9f 93       	push	r25
    3390:	af 93       	push	r26
    3392:	bf 93       	push	r27
    3394:	ef 93       	push	r30
    3396:	ff 93       	push	r31
    3398:	82 e0       	ldi	r24, 0x02	; 2
    339a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <irTransmitComplete>
    339e:	ff 91       	pop	r31
    33a0:	ef 91       	pop	r30
    33a2:	bf 91       	pop	r27
    33a4:	af 91       	pop	r26
    33a6:	9f 91       	pop	r25
    33a8:	8f 91       	pop	r24
    33aa:	7f 91       	pop	r23
    33ac:	6f 91       	pop	r22
    33ae:	5f 91       	pop	r21
    33b0:	4f 91       	pop	r20
    33b2:	3f 91       	pop	r19
    33b4:	2f 91       	pop	r18
    33b6:	0f 90       	pop	r0
    33b8:	0b be       	out	0x3b, r0	; 59
    33ba:	0f 90       	pop	r0
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	0f 90       	pop	r0
    33c0:	1f 90       	pop	r1
    33c2:	18 95       	reti

000033c4 <__vector_89>:
ISR( USARTD0_DRE_vect ) { irTransmit(2); }
    33c4:	1f 92       	push	r1
    33c6:	0f 92       	push	r0
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	0f 92       	push	r0
    33cc:	11 24       	eor	r1, r1
    33ce:	0b b6       	in	r0, 0x3b	; 59
    33d0:	0f 92       	push	r0
    33d2:	2f 93       	push	r18
    33d4:	3f 93       	push	r19
    33d6:	4f 93       	push	r20
    33d8:	5f 93       	push	r21
    33da:	6f 93       	push	r22
    33dc:	7f 93       	push	r23
    33de:	8f 93       	push	r24
    33e0:	9f 93       	push	r25
    33e2:	af 93       	push	r26
    33e4:	bf 93       	push	r27
    33e6:	ef 93       	push	r30
    33e8:	ff 93       	push	r31
    33ea:	82 e0       	ldi	r24, 0x02	; 2
    33ec:	0e 94 26 10 	call	0x204c	; 0x204c <irTransmit>
    33f0:	ff 91       	pop	r31
    33f2:	ef 91       	pop	r30
    33f4:	bf 91       	pop	r27
    33f6:	af 91       	pop	r26
    33f8:	9f 91       	pop	r25
    33fa:	8f 91       	pop	r24
    33fc:	7f 91       	pop	r23
    33fe:	6f 91       	pop	r22
    3400:	5f 91       	pop	r21
    3402:	4f 91       	pop	r20
    3404:	3f 91       	pop	r19
    3406:	2f 91       	pop	r18
    3408:	0f 90       	pop	r0
    340a:	0b be       	out	0x3b, r0	; 59
    340c:	0f 90       	pop	r0
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	0f 90       	pop	r0
    3412:	1f 90       	pop	r1
    3414:	18 95       	reti

00003416 <__vector_58>:

// ISRs for IR channel 3
ISR( USARTE0_RXC_vect ) { irReceive(3); }
    3416:	1f 92       	push	r1
    3418:	0f 92       	push	r0
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	0f 92       	push	r0
    341e:	11 24       	eor	r1, r1
    3420:	0b b6       	in	r0, 0x3b	; 59
    3422:	0f 92       	push	r0
    3424:	2f 93       	push	r18
    3426:	3f 93       	push	r19
    3428:	4f 93       	push	r20
    342a:	5f 93       	push	r21
    342c:	6f 93       	push	r22
    342e:	7f 93       	push	r23
    3430:	8f 93       	push	r24
    3432:	9f 93       	push	r25
    3434:	af 93       	push	r26
    3436:	bf 93       	push	r27
    3438:	ef 93       	push	r30
    343a:	ff 93       	push	r31
    343c:	83 e0       	ldi	r24, 0x03	; 3
    343e:	0e 94 80 14 	call	0x2900	; 0x2900 <irReceive>
    3442:	ff 91       	pop	r31
    3444:	ef 91       	pop	r30
    3446:	bf 91       	pop	r27
    3448:	af 91       	pop	r26
    344a:	9f 91       	pop	r25
    344c:	8f 91       	pop	r24
    344e:	7f 91       	pop	r23
    3450:	6f 91       	pop	r22
    3452:	5f 91       	pop	r21
    3454:	4f 91       	pop	r20
    3456:	3f 91       	pop	r19
    3458:	2f 91       	pop	r18
    345a:	0f 90       	pop	r0
    345c:	0b be       	out	0x3b, r0	; 59
    345e:	0f 90       	pop	r0
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	0f 90       	pop	r0
    3464:	1f 90       	pop	r1
    3466:	18 95       	reti

00003468 <__vector_60>:
ISR( USARTE0_TXC_vect ) { irTransmitComplete(3); }
    3468:	1f 92       	push	r1
    346a:	0f 92       	push	r0
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	0f 92       	push	r0
    3470:	11 24       	eor	r1, r1
    3472:	0b b6       	in	r0, 0x3b	; 59
    3474:	0f 92       	push	r0
    3476:	2f 93       	push	r18
    3478:	3f 93       	push	r19
    347a:	4f 93       	push	r20
    347c:	5f 93       	push	r21
    347e:	6f 93       	push	r22
    3480:	7f 93       	push	r23
    3482:	8f 93       	push	r24
    3484:	9f 93       	push	r25
    3486:	af 93       	push	r26
    3488:	bf 93       	push	r27
    348a:	ef 93       	push	r30
    348c:	ff 93       	push	r31
    348e:	83 e0       	ldi	r24, 0x03	; 3
    3490:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <irTransmitComplete>
    3494:	ff 91       	pop	r31
    3496:	ef 91       	pop	r30
    3498:	bf 91       	pop	r27
    349a:	af 91       	pop	r26
    349c:	9f 91       	pop	r25
    349e:	8f 91       	pop	r24
    34a0:	7f 91       	pop	r23
    34a2:	6f 91       	pop	r22
    34a4:	5f 91       	pop	r21
    34a6:	4f 91       	pop	r20
    34a8:	3f 91       	pop	r19
    34aa:	2f 91       	pop	r18
    34ac:	0f 90       	pop	r0
    34ae:	0b be       	out	0x3b, r0	; 59
    34b0:	0f 90       	pop	r0
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	0f 90       	pop	r0
    34b6:	1f 90       	pop	r1
    34b8:	18 95       	reti

000034ba <__vector_59>:
ISR( USARTE0_DRE_vect ) { irTransmit(3); }
    34ba:	1f 92       	push	r1
    34bc:	0f 92       	push	r0
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	0f 92       	push	r0
    34c2:	11 24       	eor	r1, r1
    34c4:	0b b6       	in	r0, 0x3b	; 59
    34c6:	0f 92       	push	r0
    34c8:	2f 93       	push	r18
    34ca:	3f 93       	push	r19
    34cc:	4f 93       	push	r20
    34ce:	5f 93       	push	r21
    34d0:	6f 93       	push	r22
    34d2:	7f 93       	push	r23
    34d4:	8f 93       	push	r24
    34d6:	9f 93       	push	r25
    34d8:	af 93       	push	r26
    34da:	bf 93       	push	r27
    34dc:	ef 93       	push	r30
    34de:	ff 93       	push	r31
    34e0:	83 e0       	ldi	r24, 0x03	; 3
    34e2:	0e 94 26 10 	call	0x204c	; 0x204c <irTransmit>
    34e6:	ff 91       	pop	r31
    34e8:	ef 91       	pop	r30
    34ea:	bf 91       	pop	r27
    34ec:	af 91       	pop	r26
    34ee:	9f 91       	pop	r25
    34f0:	8f 91       	pop	r24
    34f2:	7f 91       	pop	r23
    34f4:	6f 91       	pop	r22
    34f6:	5f 91       	pop	r21
    34f8:	4f 91       	pop	r20
    34fa:	3f 91       	pop	r19
    34fc:	2f 91       	pop	r18
    34fe:	0f 90       	pop	r0
    3500:	0b be       	out	0x3b, r0	; 59
    3502:	0f 90       	pop	r0
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	0f 90       	pop	r0
    3508:	1f 90       	pop	r1
    350a:	18 95       	reti

0000350c <__vector_61>:

// ISRs for IR channel 4
ISR( USARTE1_RXC_vect ) { irReceive(4); }
    350c:	1f 92       	push	r1
    350e:	0f 92       	push	r0
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	0f 92       	push	r0
    3514:	11 24       	eor	r1, r1
    3516:	0b b6       	in	r0, 0x3b	; 59
    3518:	0f 92       	push	r0
    351a:	2f 93       	push	r18
    351c:	3f 93       	push	r19
    351e:	4f 93       	push	r20
    3520:	5f 93       	push	r21
    3522:	6f 93       	push	r22
    3524:	7f 93       	push	r23
    3526:	8f 93       	push	r24
    3528:	9f 93       	push	r25
    352a:	af 93       	push	r26
    352c:	bf 93       	push	r27
    352e:	ef 93       	push	r30
    3530:	ff 93       	push	r31
    3532:	84 e0       	ldi	r24, 0x04	; 4
    3534:	0e 94 80 14 	call	0x2900	; 0x2900 <irReceive>
    3538:	ff 91       	pop	r31
    353a:	ef 91       	pop	r30
    353c:	bf 91       	pop	r27
    353e:	af 91       	pop	r26
    3540:	9f 91       	pop	r25
    3542:	8f 91       	pop	r24
    3544:	7f 91       	pop	r23
    3546:	6f 91       	pop	r22
    3548:	5f 91       	pop	r21
    354a:	4f 91       	pop	r20
    354c:	3f 91       	pop	r19
    354e:	2f 91       	pop	r18
    3550:	0f 90       	pop	r0
    3552:	0b be       	out	0x3b, r0	; 59
    3554:	0f 90       	pop	r0
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	0f 90       	pop	r0
    355a:	1f 90       	pop	r1
    355c:	18 95       	reti

0000355e <__vector_63>:
ISR( USARTE1_TXC_vect ) { irTransmitComplete(4); }
    355e:	1f 92       	push	r1
    3560:	0f 92       	push	r0
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	0f 92       	push	r0
    3566:	11 24       	eor	r1, r1
    3568:	0b b6       	in	r0, 0x3b	; 59
    356a:	0f 92       	push	r0
    356c:	2f 93       	push	r18
    356e:	3f 93       	push	r19
    3570:	4f 93       	push	r20
    3572:	5f 93       	push	r21
    3574:	6f 93       	push	r22
    3576:	7f 93       	push	r23
    3578:	8f 93       	push	r24
    357a:	9f 93       	push	r25
    357c:	af 93       	push	r26
    357e:	bf 93       	push	r27
    3580:	ef 93       	push	r30
    3582:	ff 93       	push	r31
    3584:	84 e0       	ldi	r24, 0x04	; 4
    3586:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <irTransmitComplete>
    358a:	ff 91       	pop	r31
    358c:	ef 91       	pop	r30
    358e:	bf 91       	pop	r27
    3590:	af 91       	pop	r26
    3592:	9f 91       	pop	r25
    3594:	8f 91       	pop	r24
    3596:	7f 91       	pop	r23
    3598:	6f 91       	pop	r22
    359a:	5f 91       	pop	r21
    359c:	4f 91       	pop	r20
    359e:	3f 91       	pop	r19
    35a0:	2f 91       	pop	r18
    35a2:	0f 90       	pop	r0
    35a4:	0b be       	out	0x3b, r0	; 59
    35a6:	0f 90       	pop	r0
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	0f 90       	pop	r0
    35ac:	1f 90       	pop	r1
    35ae:	18 95       	reti

000035b0 <__vector_62>:
ISR( USARTE1_DRE_vect ) { irTransmit(4); }
    35b0:	1f 92       	push	r1
    35b2:	0f 92       	push	r0
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	0f 92       	push	r0
    35b8:	11 24       	eor	r1, r1
    35ba:	0b b6       	in	r0, 0x3b	; 59
    35bc:	0f 92       	push	r0
    35be:	2f 93       	push	r18
    35c0:	3f 93       	push	r19
    35c2:	4f 93       	push	r20
    35c4:	5f 93       	push	r21
    35c6:	6f 93       	push	r22
    35c8:	7f 93       	push	r23
    35ca:	8f 93       	push	r24
    35cc:	9f 93       	push	r25
    35ce:	af 93       	push	r26
    35d0:	bf 93       	push	r27
    35d2:	ef 93       	push	r30
    35d4:	ff 93       	push	r31
    35d6:	84 e0       	ldi	r24, 0x04	; 4
    35d8:	0e 94 26 10 	call	0x204c	; 0x204c <irTransmit>
    35dc:	ff 91       	pop	r31
    35de:	ef 91       	pop	r30
    35e0:	bf 91       	pop	r27
    35e2:	af 91       	pop	r26
    35e4:	9f 91       	pop	r25
    35e6:	8f 91       	pop	r24
    35e8:	7f 91       	pop	r23
    35ea:	6f 91       	pop	r22
    35ec:	5f 91       	pop	r21
    35ee:	4f 91       	pop	r20
    35f0:	3f 91       	pop	r19
    35f2:	2f 91       	pop	r18
    35f4:	0f 90       	pop	r0
    35f6:	0b be       	out	0x3b, r0	; 59
    35f8:	0f 90       	pop	r0
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	0f 90       	pop	r0
    35fe:	1f 90       	pop	r1
    3600:	18 95       	reti

00003602 <__vector_119>:

// ISRs for IR channel 5
ISR( USARTF0_RXC_vect ) { irReceive(5); }
    3602:	1f 92       	push	r1
    3604:	0f 92       	push	r0
    3606:	0f b6       	in	r0, 0x3f	; 63
    3608:	0f 92       	push	r0
    360a:	11 24       	eor	r1, r1
    360c:	0b b6       	in	r0, 0x3b	; 59
    360e:	0f 92       	push	r0
    3610:	2f 93       	push	r18
    3612:	3f 93       	push	r19
    3614:	4f 93       	push	r20
    3616:	5f 93       	push	r21
    3618:	6f 93       	push	r22
    361a:	7f 93       	push	r23
    361c:	8f 93       	push	r24
    361e:	9f 93       	push	r25
    3620:	af 93       	push	r26
    3622:	bf 93       	push	r27
    3624:	ef 93       	push	r30
    3626:	ff 93       	push	r31
    3628:	85 e0       	ldi	r24, 0x05	; 5
    362a:	0e 94 80 14 	call	0x2900	; 0x2900 <irReceive>
    362e:	ff 91       	pop	r31
    3630:	ef 91       	pop	r30
    3632:	bf 91       	pop	r27
    3634:	af 91       	pop	r26
    3636:	9f 91       	pop	r25
    3638:	8f 91       	pop	r24
    363a:	7f 91       	pop	r23
    363c:	6f 91       	pop	r22
    363e:	5f 91       	pop	r21
    3640:	4f 91       	pop	r20
    3642:	3f 91       	pop	r19
    3644:	2f 91       	pop	r18
    3646:	0f 90       	pop	r0
    3648:	0b be       	out	0x3b, r0	; 59
    364a:	0f 90       	pop	r0
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	0f 90       	pop	r0
    3650:	1f 90       	pop	r1
    3652:	18 95       	reti

00003654 <__vector_121>:
ISR( USARTF0_TXC_vect ) { irTransmitComplete(5); }
    3654:	1f 92       	push	r1
    3656:	0f 92       	push	r0
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	0f 92       	push	r0
    365c:	11 24       	eor	r1, r1
    365e:	0b b6       	in	r0, 0x3b	; 59
    3660:	0f 92       	push	r0
    3662:	2f 93       	push	r18
    3664:	3f 93       	push	r19
    3666:	4f 93       	push	r20
    3668:	5f 93       	push	r21
    366a:	6f 93       	push	r22
    366c:	7f 93       	push	r23
    366e:	8f 93       	push	r24
    3670:	9f 93       	push	r25
    3672:	af 93       	push	r26
    3674:	bf 93       	push	r27
    3676:	ef 93       	push	r30
    3678:	ff 93       	push	r31
    367a:	85 e0       	ldi	r24, 0x05	; 5
    367c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <irTransmitComplete>
    3680:	ff 91       	pop	r31
    3682:	ef 91       	pop	r30
    3684:	bf 91       	pop	r27
    3686:	af 91       	pop	r26
    3688:	9f 91       	pop	r25
    368a:	8f 91       	pop	r24
    368c:	7f 91       	pop	r23
    368e:	6f 91       	pop	r22
    3690:	5f 91       	pop	r21
    3692:	4f 91       	pop	r20
    3694:	3f 91       	pop	r19
    3696:	2f 91       	pop	r18
    3698:	0f 90       	pop	r0
    369a:	0b be       	out	0x3b, r0	; 59
    369c:	0f 90       	pop	r0
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	0f 90       	pop	r0
    36a2:	1f 90       	pop	r1
    36a4:	18 95       	reti

000036a6 <__vector_120>:
ISR( USARTF0_DRE_vect ) { irTransmit(5); }
    36a6:	1f 92       	push	r1
    36a8:	0f 92       	push	r0
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	0f 92       	push	r0
    36ae:	11 24       	eor	r1, r1
    36b0:	0b b6       	in	r0, 0x3b	; 59
    36b2:	0f 92       	push	r0
    36b4:	2f 93       	push	r18
    36b6:	3f 93       	push	r19
    36b8:	4f 93       	push	r20
    36ba:	5f 93       	push	r21
    36bc:	6f 93       	push	r22
    36be:	7f 93       	push	r23
    36c0:	8f 93       	push	r24
    36c2:	9f 93       	push	r25
    36c4:	af 93       	push	r26
    36c6:	bf 93       	push	r27
    36c8:	ef 93       	push	r30
    36ca:	ff 93       	push	r31
    36cc:	85 e0       	ldi	r24, 0x05	; 5
    36ce:	0e 94 26 10 	call	0x204c	; 0x204c <irTransmit>
    36d2:	ff 91       	pop	r31
    36d4:	ef 91       	pop	r30
    36d6:	bf 91       	pop	r27
    36d8:	af 91       	pop	r26
    36da:	9f 91       	pop	r25
    36dc:	8f 91       	pop	r24
    36de:	7f 91       	pop	r23
    36e0:	6f 91       	pop	r22
    36e2:	5f 91       	pop	r21
    36e4:	4f 91       	pop	r20
    36e6:	3f 91       	pop	r19
    36e8:	2f 91       	pop	r18
    36ea:	0f 90       	pop	r0
    36ec:	0b be       	out	0x3b, r0	; 59
    36ee:	0f 90       	pop	r0
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	0f 90       	pop	r0
    36f4:	1f 90       	pop	r1
    36f6:	18 95       	reti

000036f8 <irLedInit>:
static uint8_t tx_pins[6] = {PIN3_bm, PIN7_bm, PIN3_bm, PIN3_bm, PIN7_bm, PIN3_bm};
static PORT_t* uart_ch[6] = {&PORTC, &PORTC, &PORTD, &PORTE, &PORTE, &PORTF};
static uint8_t saved_usart_ctrlb_vals[6] = {0,0,0,0,0,0};

void irLedInit()
{
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29
	/* Initialize carrier waves */
	PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;
    36fc:	a0 ea       	ldi	r26, 0xA0	; 160
    36fe:	b6 e0       	ldi	r27, 0x06	; 6
    3700:	93 ef       	ldi	r25, 0xF3	; 243
    3702:	11 96       	adiw	r26, 0x01	; 1
    3704:	9c 93       	st	X, r25
    3706:	11 97       	sbiw	r26, 0x01	; 1
	
	TCF2.CTRLE = TC2_BYTEM_SPLITMODE_gc;		// "split mode" puts this timer counter into "Type 2 mode"
    3708:	e0 e0       	ldi	r30, 0x00	; 0
    370a:	fb e0       	ldi	r31, 0x0B	; 11
    370c:	82 e0       	ldi	r24, 0x02	; 2
    370e:	84 83       	std	Z+4, r24	; 0x04
	TCF2.CTRLA |= TC2_CLKSEL_DIV4_gc;		// see CTRLA description in TC2 mode
    3710:	80 81       	ld	r24, Z
    3712:	83 60       	ori	r24, 0x03	; 3
    3714:	80 83       	st	Z, r24
	
	TCF2.HPER = 211; TCF2.LPER = 211; // 32MHz / (4 * 211) = 38kHz
    3716:	83 ed       	ldi	r24, 0xD3	; 211
    3718:	87 a3       	std	Z+39, r24	; 0x27
    371a:	86 a3       	std	Z+38, r24	; 0x26
	TCF2.HCMPA = 105; TCF2.HCMPB = 105; TCF2.HCMPC = 105; // 50% Duty Cycle
    371c:	89 e6       	ldi	r24, 0x69	; 105
    371e:	81 a7       	std	Z+41, r24	; 0x29
    3720:	83 a7       	std	Z+43, r24	; 0x2b
    3722:	85 a7       	std	Z+45, r24	; 0x2d
	TCF2.HCMPD = 105; TCF2.LCMPA = 105; TCF2.LCMPB = 105; // 50% Duty Cycle
    3724:	87 a7       	std	Z+47, r24	; 0x2f
    3726:	80 a7       	std	Z+40, r24	; 0x28
    3728:	82 a7       	std	Z+42, r24	; 0x2a
	TCF2.CTRLB = ALL_EMITTERS_CARWAV_bm;	// Set TC outputs on carrier wave pins (see CTRLA description in TC2 mode)
    372a:	91 83       	std	Z+1, r25	; 0x01

	// TX pins as outputs:
	PORTC.DIRSET = PIN3_bm | PIN7_bm;		// DIR 0,1
    372c:	c0 e4       	ldi	r28, 0x40	; 64
    372e:	d6 e0       	ldi	r29, 0x06	; 6
    3730:	98 e8       	ldi	r25, 0x88	; 136
    3732:	99 83       	std	Y+1, r25	; 0x01
	PORTD.DIRSET = PIN3_bm;					// DIR 2
    3734:	20 e6       	ldi	r18, 0x60	; 96
    3736:	36 e0       	ldi	r19, 0x06	; 6
    3738:	88 e0       	ldi	r24, 0x08	; 8
    373a:	f9 01       	movw	r30, r18
    373c:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN3_bm | PIN7_bm;		// DIR 3,4
    373e:	40 e8       	ldi	r20, 0x80	; 128
    3740:	56 e0       	ldi	r21, 0x06	; 6
    3742:	fa 01       	movw	r30, r20
    3744:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = PIN3_bm;					// DIR 5
    3746:	11 96       	adiw	r26, 0x01	; 1
    3748:	8c 93       	st	X, r24
    374a:	11 97       	sbiw	r26, 0x01	; 1
	
	PORTC.OUTCLR = (PIN3_bm | PIN7_bm);
    374c:	9e 83       	std	Y+6, r25	; 0x06
	PORTD.OUTCLR = PIN3_bm;
    374e:	f9 01       	movw	r30, r18
    3750:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTCLR = (PIN3_bm | PIN7_bm);
    3752:	fa 01       	movw	r30, r20
    3754:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = PIN3_bm;
    3756:	16 96       	adiw	r26, 0x06	; 6
    3758:	8c 93       	st	X, r24
    375a:	16 97       	sbiw	r26, 0x06	; 6
		
	// Invert the output pins:
	PORTC.PIN3CTRL = PORT_INVEN_bm;
    375c:	80 e4       	ldi	r24, 0x40	; 64
    375e:	8b 8b       	std	Y+19, r24	; 0x13
	PORTC.PIN7CTRL = PORT_INVEN_bm;
    3760:	8f 8b       	std	Y+23, r24	; 0x17
	PORTD.PIN3CTRL = PORT_INVEN_bm;
    3762:	f9 01       	movw	r30, r18
    3764:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN3CTRL = PORT_INVEN_bm;
    3766:	fa 01       	movw	r30, r20
    3768:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN7CTRL = PORT_INVEN_bm;
    376a:	87 8b       	std	Z+23, r24	; 0x17
	PORTF.PIN3CTRL = PORT_INVEN_bm;
    376c:	53 96       	adiw	r26, 0x13	; 19
    376e:	8c 93       	st	X, r24
	
}
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	08 95       	ret

00003776 <irLedOn>:

void irLedOn(uint8_t direction)
{
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
	//Turning on the light.
	saved_usart_ctrlb_vals[direction]	  = channel[direction]->CTRLB;	// record the current state of the USART
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	9c 01       	movw	r18, r24
    377e:	22 0f       	add	r18, r18
    3780:	33 1f       	adc	r19, r19
    3782:	f9 01       	movw	r30, r18
    3784:	ea 5f       	subi	r30, 0xFA	; 250
    3786:	ff 4d       	sbci	r31, 0xDF	; 223
    3788:	a0 81       	ld	r26, Z
    378a:	b1 81       	ldd	r27, Z+1	; 0x01
    378c:	14 96       	adiw	r26, 0x04	; 4
    378e:	4c 91       	ld	r20, X
    3790:	14 97       	sbiw	r26, 0x04	; 4
    3792:	fc 01       	movw	r30, r24
    3794:	e4 5d       	subi	r30, 0xD4	; 212
    3796:	fc 4d       	sbci	r31, 0xDC	; 220
    3798:	40 83       	st	Z, r20
	TCF2.CTRLB			 &= ~carrier_wave_pins[direction];	// disable carrier wave output
    379a:	e0 e0       	ldi	r30, 0x00	; 0
    379c:	fb e0       	ldi	r31, 0x0B	; 11
    379e:	41 81       	ldd	r20, Z+1	; 0x01
    37a0:	ec 01       	movw	r28, r24
    37a2:	cb 5e       	subi	r28, 0xEB	; 235
    37a4:	de 4d       	sbci	r29, 0xDE	; 222
    37a6:	58 81       	ld	r21, Y
    37a8:	65 2f       	mov	r22, r21
    37aa:	60 95       	com	r22
    37ac:	46 23       	and	r20, r22
    37ae:	41 83       	std	Z+1, r20	; 0x01
	PORTF.DIRSET		  =  carrier_wave_pins[direction];	// enable user output on this pin
    37b0:	e0 ea       	ldi	r30, 0xA0	; 160
    37b2:	f6 e0       	ldi	r31, 0x06	; 6
    37b4:	51 83       	std	Z+1, r21	; 0x01
	PORTF.OUT			 |=  carrier_wave_pins[direction];	// high signal on this pin
    37b6:	44 81       	ldd	r20, Z+4	; 0x04
    37b8:	45 2b       	or	r20, r21
    37ba:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB  	  =  0;					// disable USART
    37bc:	14 96       	adiw	r26, 0x04	; 4
    37be:	1c 92       	st	X, r1
	uart_ch[direction]->DIRSET =  tx_pins[direction];			// enable user output on this pin
    37c0:	f9 01       	movw	r30, r18
    37c2:	ed 5f       	subi	r30, 0xFD	; 253
    37c4:	fe 4d       	sbci	r31, 0xDE	; 222
    37c6:	01 90       	ld	r0, Z+
    37c8:	f0 81       	ld	r31, Z
    37ca:	e0 2d       	mov	r30, r0
    37cc:	dc 01       	movw	r26, r24
    37ce:	a1 5f       	subi	r26, 0xF1	; 241
    37d0:	be 4d       	sbci	r27, 0xDE	; 222
    37d2:	8c 91       	ld	r24, X
    37d4:	81 83       	std	Z+1, r24	; 0x01
	uart_ch[direction]->OUT	 &= ~tx_pins[direction];			// low signal on TX pin (remember: these pins were inverted during init)
    37d6:	94 81       	ldd	r25, Z+4	; 0x04
    37d8:	80 95       	com	r24
    37da:	89 23       	and	r24, r25
    37dc:	84 83       	std	Z+4, r24	; 0x04

}
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	08 95       	ret

000037e4 <irLedOff>:

void irLedOff(uint8_t direction)
{
	//Turning off the light.
	uart_ch[direction]->OUT  |=  tx_pins[direction];			// high signal on TX pin (turns IR blast OFF)
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	9c 01       	movw	r18, r24
    37e8:	22 0f       	add	r18, r18
    37ea:	33 1f       	adc	r19, r19
    37ec:	f9 01       	movw	r30, r18
    37ee:	ed 5f       	subi	r30, 0xFD	; 253
    37f0:	fe 4d       	sbci	r31, 0xDE	; 222
    37f2:	01 90       	ld	r0, Z+
    37f4:	f0 81       	ld	r31, Z
    37f6:	e0 2d       	mov	r30, r0
    37f8:	54 81       	ldd	r21, Z+4	; 0x04
    37fa:	dc 01       	movw	r26, r24
    37fc:	a1 5f       	subi	r26, 0xF1	; 241
    37fe:	be 4d       	sbci	r27, 0xDE	; 222
    3800:	4c 91       	ld	r20, X
    3802:	45 2b       	or	r20, r21
    3804:	44 83       	std	Z+4, r20	; 0x04
	channel[direction]->CTRLB	 =  saved_usart_ctrlb_vals[direction];	// re-enable USART (restore settings as it was before)
    3806:	f9 01       	movw	r30, r18
    3808:	ea 5f       	subi	r30, 0xFA	; 250
    380a:	ff 4d       	sbci	r31, 0xDF	; 223
    380c:	01 90       	ld	r0, Z+
    380e:	f0 81       	ld	r31, Z
    3810:	e0 2d       	mov	r30, r0
    3812:	dc 01       	movw	r26, r24
    3814:	a4 5d       	subi	r26, 0xD4	; 212
    3816:	bc 4d       	sbci	r27, 0xDC	; 220
    3818:	2c 91       	ld	r18, X
    381a:	24 83       	std	Z+4, r18	; 0x04
	PORTF.OUT			&= ~carrier_wave_pins[direction];	// low signal on the carrier wave pin, just in casies.
    381c:	e0 ea       	ldi	r30, 0xA0	; 160
    381e:	f6 e0       	ldi	r31, 0x06	; 6
    3820:	24 81       	ldd	r18, Z+4	; 0x04
    3822:	dc 01       	movw	r26, r24
    3824:	ab 5e       	subi	r26, 0xEB	; 235
    3826:	be 4d       	sbci	r27, 0xDE	; 222
    3828:	3c 91       	ld	r19, X
    382a:	93 2f       	mov	r25, r19
    382c:	90 95       	com	r25
    382e:	92 23       	and	r25, r18
    3830:	94 83       	std	Z+4, r25	; 0x04
	TCF2.CTRLB			|=  carrier_wave_pins[direction];	// re-enable carrier wave output
    3832:	e0 e0       	ldi	r30, 0x00	; 0
    3834:	fb e0       	ldi	r31, 0x0B	; 11
    3836:	81 81       	ldd	r24, Z+1	; 0x01
    3838:	83 2b       	or	r24, r19
    383a:	81 83       	std	Z+1, r24	; 0x01
    383c:	08 95       	ret

0000383e <setAllirPowers>:
}

void setAllirPowers(volatile uint16_t power){
    383e:	1f 93       	push	r17
    3840:	cf 93       	push	r28
    3842:	df 93       	push	r29
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	2f 97       	sbiw	r28, 0x0f	; 15
    384a:	cd bf       	out	0x3d, r28	; 61
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	8e 87       	std	Y+14, r24	; 0x0e
    3850:	9f 87       	std	Y+15, r25	; 0x0f
	if(power>256) return;
    3852:	8e 85       	ldd	r24, Y+14	; 0x0e
    3854:	9f 85       	ldd	r25, Y+15	; 0x0f
    3856:	81 30       	cpi	r24, 0x01	; 1
    3858:	91 40       	sbci	r25, 0x01	; 1
    385a:	68 f5       	brcc	.+90     	; 0x38b6 <setAllirPowers+0x78>
	if(curr_ir_power==power) return;
    385c:	8e 85       	ldd	r24, Y+14	; 0x0e
    385e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3860:	20 91 8d 26 	lds	r18, 0x268D	; 0x80268d <curr_ir_power>
    3864:	30 91 8e 26 	lds	r19, 0x268E	; 0x80268e <curr_ir_power+0x1>
    3868:	28 17       	cp	r18, r24
    386a:	39 07       	cpc	r19, r25
    386c:	21 f1       	breq	.+72     	; 0x38b6 <setAllirPowers+0x78>
	uint8_t power_high = (power>>8);
    386e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3870:	3f 85       	ldd	r19, Y+15	; 0x0f
	uint8_t power_low = (power&0xFF);
    3872:	8e 85       	ldd	r24, Y+14	; 0x0e
    3874:	9f 85       	ldd	r25, Y+15	; 0x0f
	uint8_t write_buffer[6] = {power_high,power_low,0x10|power_high,power_low,0x60|power_high, power_low};
    3876:	38 87       	std	Y+8, r19	; 0x08
    3878:	89 87       	std	Y+9, r24	; 0x09
    387a:	93 2f       	mov	r25, r19
    387c:	90 61       	ori	r25, 0x10	; 16
    387e:	9a 87       	std	Y+10, r25	; 0x0a
    3880:	8b 87       	std	Y+11, r24	; 0x0b
    3882:	93 2f       	mov	r25, r19
    3884:	90 66       	ori	r25, 0x60	; 96
    3886:	9c 87       	std	Y+12, r25	; 0x0c
    3888:	8d 87       	std	Y+13, r24	; 0x0d
	
	uint8_t aResult = 0;
	uint8_t bResult = 0;
	char callerDescr[7] = "Set IR\0";
    388a:	87 e0       	ldi	r24, 0x07	; 7
    388c:	ec ef       	ldi	r30, 0xFC	; 252
    388e:	f0 e2       	ldi	r31, 0x20	; 32
    3890:	de 01       	movw	r26, r28
    3892:	11 96       	adiw	r26, 0x01	; 1
    3894:	01 90       	ld	r0, Z+
    3896:	0d 92       	st	X+, r0
    3898:	8a 95       	dec	r24
    389a:	e1 f7       	brne	.-8      	; 0x3894 <setAllirPowers+0x56>
	aResult = twiWriteWrapper(IR_POWER_ADDR_A, write_buffer, 6, callerDescr);
    389c:	9e 01       	movw	r18, r28
    389e:	2f 5f       	subi	r18, 0xFF	; 255
    38a0:	3f 4f       	sbci	r19, 0xFF	; 255
    38a2:	46 e0       	ldi	r20, 0x06	; 6
    38a4:	be 01       	movw	r22, r28
    38a6:	68 5f       	subi	r22, 0xF8	; 248
    38a8:	7f 4f       	sbci	r23, 0xFF	; 255
    38aa:	8c e2       	ldi	r24, 0x2C	; 44
    38ac:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <twiWriteWrapper>
    38b0:	18 2f       	mov	r17, r24
	if(!aResult){
    38b2:	81 11       	cpse	r24, r1
    38b4:	07 c0       	rjmp	.+14     	; 0x38c4 <setAllirPowers+0x86>
	
	if((aResult+bResult)>2){
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
	}
	curr_ir_power = power;
}
    38b6:	2f 96       	adiw	r28, 0x0f	; 15
    38b8:	cd bf       	out	0x3d, r28	; 61
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	1f 91       	pop	r17
    38c2:	08 95       	ret
	char callerDescr[7] = "Set IR\0";
	aResult = twiWriteWrapper(IR_POWER_ADDR_A, write_buffer, 6, callerDescr);
	if(!aResult){
		return;
	}
	bResult = twiWriteWrapper(IR_POWER_ADDR_B, write_buffer, 6, callerDescr);
    38c4:	9e 01       	movw	r18, r28
    38c6:	2f 5f       	subi	r18, 0xFF	; 255
    38c8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ca:	46 e0       	ldi	r20, 0x06	; 6
    38cc:	be 01       	movw	r22, r28
    38ce:	68 5f       	subi	r22, 0xF8	; 248
    38d0:	7f 4f       	sbci	r23, 0xFF	; 255
    38d2:	8e e2       	ldi	r24, 0x2E	; 46
    38d4:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <twiWriteWrapper>
	if(!bResult){
    38d8:	88 23       	and	r24, r24
    38da:	69 f3       	breq	.-38     	; 0x38b6 <setAllirPowers+0x78>
		return;
	}
	
	if((aResult+bResult)>2){
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	81 0f       	add	r24, r17
    38e0:	91 1d       	adc	r25, r1
    38e2:	02 97       	sbiw	r24, 0x02	; 2
    38e4:	41 f0       	breq	.+16     	; 0x38f6 <setAllirPowers+0xb8>
		printf_P(PSTR("\tDone waiting for TWI. IR powers set successfully.\r\n"));
    38e6:	85 eb       	ldi	r24, 0xB5	; 181
    38e8:	96 e0       	ldi	r25, 0x06	; 6
    38ea:	9f 93       	push	r25
    38ec:	8f 93       	push	r24
    38ee:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
	}
	curr_ir_power = power;
    38f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    38f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    38fa:	80 93 8d 26 	sts	0x268D, r24	; 0x80268d <curr_ir_power>
    38fe:	90 93 8e 26 	sts	0x268E, r25	; 0x80268e <curr_ir_power+0x1>
    3902:	d9 cf       	rjmp	.-78     	; 0x38b6 <setAllirPowers+0x78>

00003904 <irSensorInit>:
		
		//ADCA.EVCTRL = ADC_EVSEL_1234_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
		//ADCB.EVCTRL = ADC_EVSEL_567_gc | ADC_EVACT_CH012_gc | ADC_SWEEP_012_gc;
	#else
		/* SET INPUT PINS AS INPUTS */
		IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    3904:	e0 e2       	ldi	r30, 0x20	; 32
    3906:	f6 e0       	ldi	r31, 0x06	; 6
    3908:	8c ef       	ldi	r24, 0xFC	; 252
    390a:	82 83       	std	Z+2, r24	; 0x02
		
		PORTB.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    390c:	87 e0       	ldi	r24, 0x07	; 7
    390e:	85 8b       	std	Z+21, r24	; 0x15
		PORTB.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3910:	86 8b       	std	Z+22, r24	; 0x16
		PORTB.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3912:	87 8b       	std	Z+23, r24	; 0x17
		PORTB.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3914:	84 8b       	std	Z+20, r24	; 0x14
		PORTB.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3916:	82 8b       	std	Z+18, r24	; 0x12
		PORTB.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    3918:	83 8b       	std	Z+19, r24	; 0x13

		ADCB.REFCTRL = ADC_REFSEL_AREFA_gc;
    391a:	e0 e4       	ldi	r30, 0x40	; 64
    391c:	f2 e0       	ldi	r31, 0x02	; 2
    391e:	90 e2       	ldi	r25, 0x20	; 32
    3920:	92 83       	std	Z+2, r25	; 0x02
		ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; //12bit resolution, and sets it to signed mode.
    3922:	90 e1       	ldi	r25, 0x10	; 16
    3924:	91 83       	std	Z+1, r25	; 0x01
		ADCB.PRESCALER = ADC_PRESCALER_DIV512_gc;
    3926:	84 83       	std	Z+4, r24	; 0x04
		ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN2_bm;	// differential input. requires signed mode (see sec. 28.6 in manual)
    3928:	83 e1       	ldi	r24, 0x13	; 19
    392a:	80 a3       	std	Z+32, r24	; 0x20
		ADCB.CH0.MUXCTRL = ADC_CH_MUXNEG_INTGND_MODE4_gc;	// use VREF_IN for the negative input (0.54 V)
    392c:	84 e0       	ldi	r24, 0x04	; 4
    392e:	81 a3       	std	Z+33, r24	; 0x21
		ADCB.CALL = PRODSIGNATURES_ADCBCAL0;
    3930:	84 b5       	in	r24, 0x24	; 36
    3932:	84 87       	std	Z+12, r24	; 0x0c
		ADCB.CALH = PRODSIGNATURES_ADCBCAL1;
    3934:	85 b5       	in	r24, 0x25	; 37
    3936:	85 87       	std	Z+13, r24	; 0x0d
		ADCB.CTRLA = ADC_ENABLE_bm;
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	80 83       	st	Z, r24
	#endif
	
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir]=0;
    393c:	e2 e3       	ldi	r30, 0x32	; 50
    393e:	f3 e2       	ldi	r31, 0x23	; 35
    3940:	10 82       	st	Z, r1
    3942:	11 82       	std	Z+1, r1	; 0x01
    3944:	12 82       	std	Z+2, r1	; 0x02
    3946:	13 82       	std	Z+3, r1	; 0x03
    3948:	14 82       	std	Z+4, r1	; 0x04
    394a:	15 82       	std	Z+5, r1	; 0x05
    394c:	16 82       	std	Z+6, r1	; 0x06
    394e:	17 82       	std	Z+7, r1	; 0x07
    3950:	10 86       	std	Z+8, r1	; 0x08
    3952:	11 86       	std	Z+9, r1	; 0x09
    3954:	12 86       	std	Z+10, r1	; 0x0a
    3956:	13 86       	std	Z+11, r1	; 0x0b
	}
	scheduleTask(1000,initIrBaselines,NULL);
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	45 e7       	ldi	r20, 0x75	; 117
    395e:	5d e1       	ldi	r21, 0x1D	; 29
    3960:	68 ee       	ldi	r22, 0xE8	; 232
    3962:	73 e0       	ldi	r23, 0x03	; 3
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <scheduleTask>
	schedulePeriodicTask(5407, updateIrBaselines, NULL);
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	4a e7       	ldi	r20, 0x7A	; 122
    3972:	5d e1       	ldi	r21, 0x1D	; 29
    3974:	6f e1       	ldi	r22, 0x1F	; 31
    3976:	75 e1       	ldi	r23, 0x15	; 21
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	0e 94 13 36 	call	0x6c26	; 0x6c26 <schedulePeriodicTask>
    3980:	08 95       	ret

00003982 <getIrSensors>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		hpIrBlock_bm = 0;
	}
}

void getIrSensors(int16_t* output_arr, uint8_t meas_per_ch){			
    3982:	2f 92       	push	r2
    3984:	3f 92       	push	r3
    3986:	4f 92       	push	r4
    3988:	5f 92       	push	r5
    398a:	6f 92       	push	r6
    398c:	7f 92       	push	r7
    398e:	8f 92       	push	r8
    3990:	9f 92       	push	r9
    3992:	af 92       	push	r10
    3994:	bf 92       	push	r11
    3996:	cf 92       	push	r12
    3998:	df 92       	push	r13
    399a:	ef 92       	push	r14
    399c:	ff 92       	push	r15
    399e:	0f 93       	push	r16
    39a0:	1f 93       	push	r17
    39a2:	cf 93       	push	r28
    39a4:	df 93       	push	r29
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	36 2e       	mov	r3, r22
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    39ac:	4d b6       	in	r4, 0x3d	; 61
    39ae:	5e b6       	in	r5, 0x3e	; 62
		hpIrBlock_bm = 0;
	}
}

void getIrSensors(int16_t* output_arr, uint8_t meas_per_ch){			
	int16_t meas[6][meas_per_ch];	
    39b0:	06 2f       	mov	r16, r22
    39b2:	10 e0       	ldi	r17, 0x00	; 0
    39b4:	00 0f       	add	r16, r16
    39b6:	11 1f       	adc	r17, r17
    39b8:	2d b7       	in	r18, 0x3d	; 61
    39ba:	3e b7       	in	r19, 0x3e	; 62
    39bc:	4c e0       	ldi	r20, 0x0C	; 12
    39be:	64 9f       	mul	r22, r20
    39c0:	20 19       	sub	r18, r0
    39c2:	31 09       	sbc	r19, r1
    39c4:	11 24       	eor	r1, r1
    39c6:	2d bf       	out	0x3d, r18	; 61
    39c8:	3e bf       	out	0x3e, r19	; 62
    39ca:	ed b7       	in	r30, 0x3d	; 61
    39cc:	fe b7       	in	r31, 0x3e	; 62
    39ce:	31 96       	adiw	r30, 0x01	; 1
    39d0:	4f 01       	movw	r8, r30
    39d2:	ac e1       	ldi	r26, 0x1C	; 28
    39d4:	b1 e2       	ldi	r27, 0x21	; 33
    39d6:	af 01       	movw	r20, r30
    39d8:	68 e2       	ldi	r22, 0x28	; 40
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
					meas[dir][meas_count] = ADCB.CH0RES;
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    39da:	ee 24       	eor	r14, r14
    39dc:	e3 94       	inc	r14
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    39de:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
    39e2:	37 70       	andi	r19, 0x07	; 7
    39e4:	30 93 61 02 	sts	0x0261, r19	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
    39e8:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
    39ec:	26 2b       	or	r18, r22
    39ee:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    39f2:	33 20       	and	r3, r3
    39f4:	c9 f0       	breq	.+50     	; 0x3a28 <getIrSensors+0xa6>
    39f6:	fa 01       	movw	r30, r20
    39f8:	30 e0       	ldi	r19, 0x00	; 0
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    39fa:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    39fc:	f8 94       	cli
					ADCB.CH0.CTRL |= ADC_CH_START_bm;
    39fe:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>
    3a02:	20 68       	ori	r18, 0x80	; 128
    3a04:	20 93 60 02 	sts	0x0260, r18	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>
					while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
    3a08:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    3a0c:	22 23       	and	r18, r18
    3a0e:	e1 f3       	breq	.-8      	; 0x3a08 <getIrSensors+0x86>
					meas[dir][meas_count] = ADCB.CH0RES;
    3a10:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <__TEXT_REGION_LENGTH__+0x700250>
    3a14:	70 91 51 02 	lds	r23, 0x0251	; 0x800251 <__TEXT_REGION_LENGTH__+0x700251>
    3a18:	61 93       	st	Z+, r22
    3a1a:	71 93       	st	Z+, r23
					ADCB.CH0.INTFLAGS=1; // clear the complete flag					
    3a1c:	e0 92 63 02 	sts	0x0263, r14	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3a20:	ff be       	out	0x3f, r15	; 63
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
			ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
			ADCB.CH0.MUXCTRL |= mux_sensor_selectors[dir];			
			for(uint8_t meas_count=0; meas_count<meas_per_ch; meas_count++){
    3a22:	3f 5f       	subi	r19, 0xFF	; 255
    3a24:	33 12       	cpse	r3, r19
    3a26:	e9 cf       	rjmp	.-46     	; 0x39fa <getIrSensors+0x78>
    3a28:	40 0f       	add	r20, r16
    3a2a:	51 1f       	adc	r21, r17
					ir_sense_channels[dir]->INTFLAGS=1;
				}
			}
		}
	#else
		for(uint8_t dir=0;dir<6;dir++){
    3a2c:	f1 e2       	ldi	r31, 0x21	; 33
    3a2e:	a1 32       	cpi	r26, 0x21	; 33
    3a30:	bf 07       	cpc	r27, r31
    3a32:	11 f0       	breq	.+4      	; 0x3a38 <getIrSensors+0xb6>
    3a34:	6d 91       	ld	r22, X+
    3a36:	d3 cf       	rjmp	.-90     	; 0x39de <getIrSensors+0x5c>
    3a38:	54 01       	movw	r10, r8
    3a3a:	24 e0       	ldi	r18, 0x04	; 4
    3a3c:	a2 0e       	add	r10, r18
    3a3e:	b1 1c       	adc	r11, r1
    3a40:	22 e3       	ldi	r18, 0x32	; 50
    3a42:	62 2e       	mov	r6, r18
    3a44:	23 e2       	ldi	r18, 0x23	; 35
    3a46:	72 2e       	mov	r7, r18
    3a48:	7c 01       	movw	r14, r24
    3a4a:	c1 2c       	mov	r12, r1
    3a4c:	d1 2c       	mov	r13, r1
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++){
		if(meas_per_ch>2){
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
    3a4e:	3e ef       	ldi	r19, 0xFE	; 254
    3a50:	23 2e       	mov	r2, r19
    3a52:	23 0c       	add	r2, r3
    3a54:	21 c0       	rjmp	.+66     	; 0x3a98 <getIrSensors+0x116>
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
    3a56:	f2 e0       	ldi	r31, 0x02	; 2
    3a58:	3f 16       	cp	r3, r31
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <getIrSensors+0xdc>
    3a5c:	42 c0       	rjmp	.+132    	; 0x3ae2 <getIrSensors+0x160>
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
		else
			output_arr[dir] = meas[dir][0];
    3a5e:	0c 9d       	mul	r16, r12
    3a60:	f0 01       	movw	r30, r0
    3a62:	0d 9d       	mul	r16, r13
    3a64:	f0 0d       	add	r31, r0
    3a66:	1c 9d       	mul	r17, r12
    3a68:	f0 0d       	add	r31, r0
    3a6a:	11 24       	eor	r1, r1
    3a6c:	e8 0d       	add	r30, r8
    3a6e:	f9 1d       	adc	r31, r9
    3a70:	80 81       	ld	r24, Z
    3a72:	91 81       	ldd	r25, Z+1	; 0x01
    3a74:	f7 01       	movw	r30, r14
    3a76:	80 83       	st	Z, r24
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	ff ef       	ldi	r31, 0xFF	; 255
    3a7c:	cf 1a       	sub	r12, r31
    3a7e:	df 0a       	sbc	r13, r31
    3a80:	a0 0e       	add	r10, r16
    3a82:	b1 1e       	adc	r11, r17
    3a84:	22 e0       	ldi	r18, 0x02	; 2
    3a86:	62 0e       	add	r6, r18
    3a88:	71 1c       	adc	r7, r1
    3a8a:	32 e0       	ldi	r19, 0x02	; 2
    3a8c:	e3 0e       	add	r14, r19
    3a8e:	f1 1c       	adc	r15, r1
			}			
		}
	#endif	
	
	
	for(uint8_t dir=0;dir<6;dir++){
    3a90:	46 e0       	ldi	r20, 0x06	; 6
    3a92:	c4 16       	cp	r12, r20
    3a94:	d1 04       	cpc	r13, r1
    3a96:	81 f0       	breq	.+32     	; 0x3ab8 <getIrSensors+0x136>
		if(meas_per_ch>2){
    3a98:	32 e0       	ldi	r19, 0x02	; 2
    3a9a:	33 15       	cp	r19, r3
    3a9c:	e0 f6       	brcc	.-72     	; 0x3a56 <getIrSensors+0xd4>
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
    3a9e:	62 2d       	mov	r22, r2
    3aa0:	c5 01       	movw	r24, r10
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    3aa2:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <measFindMedian>
    3aa6:	f3 01       	movw	r30, r6
    3aa8:	20 81       	ld	r18, Z
    3aaa:	31 81       	ldd	r19, Z+1	; 0x01
    3aac:	82 1b       	sub	r24, r18
    3aae:	93 0b       	sbc	r25, r19
    3ab0:	f7 01       	movw	r30, r14
    3ab2:	80 83       	st	Z, r24
    3ab4:	91 83       	std	Z+1, r25	; 0x01
    3ab6:	e1 cf       	rjmp	.-62     	; 0x3a7a <getIrSensors+0xf8>
		else
			output_arr[dir] = meas[dir][0];
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}
    3ab8:	4d be       	out	0x3d, r4	; 61
    3aba:	5e be       	out	0x3e, r5	; 62
    3abc:	df 91       	pop	r29
    3abe:	cf 91       	pop	r28
    3ac0:	1f 91       	pop	r17
    3ac2:	0f 91       	pop	r16
    3ac4:	ff 90       	pop	r15
    3ac6:	ef 90       	pop	r14
    3ac8:	df 90       	pop	r13
    3aca:	cf 90       	pop	r12
    3acc:	bf 90       	pop	r11
    3ace:	af 90       	pop	r10
    3ad0:	9f 90       	pop	r9
    3ad2:	8f 90       	pop	r8
    3ad4:	7f 90       	pop	r7
    3ad6:	6f 90       	pop	r6
    3ad8:	5f 90       	pop	r5
    3ada:	4f 90       	pop	r4
    3adc:	3f 90       	pop	r3
    3ade:	2f 90       	pop	r2
    3ae0:	08 95       	ret
			int16_t median = measFindMedian(&(meas[dir][2]),meas_per_ch-2);
			//printf("%d ",median);
			output_arr[dir] = median-ir_sense_baseline[dir];
		}			
		else if(meas_per_ch==2)
			output_arr[dir] = measFindMedian(&(meas[dir][1]),meas_per_ch-1)-ir_sense_baseline[dir];
    3ae2:	61 e0       	ldi	r22, 0x01	; 1
    3ae4:	c5 01       	movw	r24, r10
    3ae6:	02 97       	sbiw	r24, 0x02	; 2
    3ae8:	dc cf       	rjmp	.-72     	; 0x3aa2 <getIrSensors+0x120>

00003aea <initIrBaselines>:
	scheduleTask(1000,initIrBaselines,NULL);
	schedulePeriodicTask(5407, updateIrBaselines, NULL);
}

void initIrBaselines(){
	getIrSensors(ir_sense_baseline, 13);
    3aea:	6d e0       	ldi	r22, 0x0D	; 13
    3aec:	82 e3       	ldi	r24, 0x32	; 50
    3aee:	93 e2       	ldi	r25, 0x23	; 35
    3af0:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <getIrSensors>

00003af4 <updateIrBaselines>:
}

void updateIrBaselines(){
    3af4:	ef 92       	push	r14
    3af6:	ff 92       	push	r15
    3af8:	0f 93       	push	r16
    3afa:	1f 93       	push	r17
    3afc:	cf 93       	push	r28
    3afe:	df 93       	push	r29
    3b00:	cd b7       	in	r28, 0x3d	; 61
    3b02:	de b7       	in	r29, 0x3e	; 62
    3b04:	2c 97       	sbiw	r28, 0x0c	; 12
    3b06:	cd bf       	out	0x3d, r28	; 61
    3b08:	de bf       	out	0x3e, r29	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3b0a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3b0c:	f8 94       	cli
		if(irIsBusy(ALL_DIRS)){
    3b0e:	8f e3       	ldi	r24, 0x3F	; 63
    3b10:	0e 94 e5 12 	call	0x25ca	; 0x25ca <irIsBusy>
    3b14:	81 11       	cpse	r24, r1
    3b16:	35 c0       	rjmp	.+106    	; 0x3b82 <updateIrBaselines+0x8e>
			return;
		}
		hpIrBlock_bm=0x3F;
    3b18:	8f e3       	ldi	r24, 0x3F	; 63
    3b1a:	80 93 7b 24 	sts	0x247B, r24	; 0x80247b <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3b1e:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    3b20:	8e 01       	movw	r16, r28
    3b22:	0f 5f       	subi	r16, 0xFF	; 255
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	32 e3       	ldi	r19, 0x32	; 50
    3b28:	e3 2e       	mov	r14, r19
    3b2a:	33 e2       	ldi	r19, 0x23	; 35
    3b2c:	f3 2e       	mov	r15, r19
    3b2e:	f7 01       	movw	r30, r14
    3b30:	d8 01       	movw	r26, r16
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
    3b32:	80 81       	ld	r24, Z
    3b34:	91 81       	ldd	r25, Z+1	; 0x01
    3b36:	8d 93       	st	X+, r24
    3b38:	9d 93       	st	X+, r25
		ir_sense_baseline[dir] = 0;
    3b3a:	11 92       	st	Z+, r1
    3b3c:	11 92       	st	Z+, r1
			return;
		}
		hpIrBlock_bm=0x3F;
	}
	int16_t prevBaselines[6];
	for(uint8_t dir=0; dir<6; dir++){
    3b3e:	83 e2       	ldi	r24, 0x23	; 35
    3b40:	ee 33       	cpi	r30, 0x3E	; 62
    3b42:	f8 07       	cpc	r31, r24
    3b44:	b1 f7       	brne	.-20     	; 0x3b32 <updateIrBaselines+0x3e>
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	getIrSensors(ir_sense_baseline, 13);
    3b46:	6d e0       	ldi	r22, 0x0D	; 13
    3b48:	82 e3       	ldi	r24, 0x32	; 50
    3b4a:	93 e2       	ldi	r25, 0x23	; 35
    3b4c:	0e 94 c1 1c 	call	0x3982	; 0x3982 <getIrSensors>
    3b50:	0b c0       	rjmp	.+22     	; 0x3b68 <updateIrBaselines+0x74>
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    3b52:	95 95       	asr	r25
    3b54:	87 95       	ror	r24
    3b56:	f7 01       	movw	r30, r14
    3b58:	81 93       	st	Z+, r24
    3b5a:	91 93       	st	Z+, r25
    3b5c:	7f 01       	movw	r14, r30
	for(uint8_t dir=0; dir<6; dir++){
		prevBaselines[dir] = ir_sense_baseline[dir]; //zeroing the baseline array.
		ir_sense_baseline[dir] = 0;
	}
	getIrSensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
    3b5e:	fe e3       	ldi	r31, 0x3E	; 62
    3b60:	ef 16       	cp	r14, r31
    3b62:	f3 e2       	ldi	r31, 0x23	; 35
    3b64:	ff 06       	cpc	r15, r31
    3b66:	c1 f0       	breq	.+48     	; 0x3b98 <updateIrBaselines+0xa4>
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
    3b68:	f8 01       	movw	r30, r16
    3b6a:	21 91       	ld	r18, Z+
    3b6c:	31 91       	ld	r19, Z+
    3b6e:	8f 01       	movw	r16, r30
    3b70:	f7 01       	movw	r30, r14
    3b72:	80 81       	ld	r24, Z
    3b74:	91 81       	ldd	r25, Z+1	; 0x01
    3b76:	82 0f       	add	r24, r18
    3b78:	93 1f       	adc	r25, r19
    3b7a:	97 ff       	sbrs	r25, 7
    3b7c:	ea cf       	rjmp	.-44     	; 0x3b52 <updateIrBaselines+0x5e>
    3b7e:	01 96       	adiw	r24, 0x01	; 1
    3b80:	e8 cf       	rjmp	.-48     	; 0x3b52 <updateIrBaselines+0x5e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3b82:	1f bf       	out	0x3f, r17	; 63
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		hpIrBlock_bm = 0;
	}
}
    3b84:	2c 96       	adiw	r28, 0x0c	; 12
    3b86:	cd bf       	out	0x3d, r28	; 61
    3b88:	de bf       	out	0x3e, r29	; 62
    3b8a:	df 91       	pop	r29
    3b8c:	cf 91       	pop	r28
    3b8e:	1f 91       	pop	r17
    3b90:	0f 91       	pop	r16
    3b92:	ff 90       	pop	r15
    3b94:	ef 90       	pop	r14
    3b96:	08 95       	ret
	}
	getIrSensors(ir_sense_baseline, 13);
	for(uint8_t dir=0;dir<6;dir++){
		ir_sense_baseline[dir] = (ir_sense_baseline[dir]+prevBaselines[dir])/2;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    3b98:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3b9a:	f8 94       	cli
		hpIrBlock_bm = 0;
    3b9c:	10 92 7b 24 	sts	0x247B, r1	; 0x80247b <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3ba0:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    3ba2:	f0 cf       	rjmp	.-32     	; 0x3b84 <updateIrBaselines+0x90>

00003ba4 <checkCollisionValues>:
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
	}
	return dirs;
}

void checkCollisionValues(int16_t meas[6]){
    3ba4:	bf 92       	push	r11
    3ba6:	cf 92       	push	r12
    3ba8:	df 92       	push	r13
    3baa:	ef 92       	push	r14
    3bac:	ff 92       	push	r15
    3bae:	0f 93       	push	r16
    3bb0:	1f 93       	push	r17
    3bb2:	cf 93       	push	r28
    3bb4:	df 93       	push	r29
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	68 97       	sbiw	r28, 0x18	; 24
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	de bf       	out	0x3e, r29	; 62
    3bc0:	b8 2e       	mov	r11, r24
    3bc2:	09 2f       	mov	r16, r25
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	//uint8_t dirs=0;
	if(irIsBusy(ALL_DIRS)){
    3bc4:	8f e3       	ldi	r24, 0x3F	; 63
    3bc6:	0e 94 e5 12 	call	0x25ca	; 0x25ca <irIsBusy>
    3bca:	81 11       	cpse	r24, r1
    3bcc:	66 c0       	rjmp	.+204    	; 0x3c9a <checkCollisionValues+0xf6>
		printf_P(PSTR("IR Hardware busy. Can't check collisions.\r\n"));
		return;
	}
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	80 93 30 25 	sts	0x2530, r24	; 0x802530 <ir_rxtx+0x37>
    3bd4:	80 93 68 25 	sts	0x2568, r24	; 0x802568 <ir_rxtx+0x6f>
    3bd8:	80 93 a0 25 	sts	0x25A0, r24	; 0x8025a0 <ir_rxtx+0xa7>
    3bdc:	80 93 d8 25 	sts	0x25D8, r24	; 0x8025d8 <ir_rxtx+0xdf>
    3be0:	80 93 10 26 	sts	0x2610, r24	; 0x802610 <ir_rxtx+0x117>
    3be4:	80 93 48 26 	sts	0x2648, r24	; 0x802648 <ir_rxtx+0x14f>

void irLedInit(void);
void setAllirPowers(uint16_t power);
void irLedOn(uint8_t direction);
void irLedOff(uint8_t direction);
inline uint16_t getAllirPowers(void){ return curr_ir_power; }
    3be8:	c0 90 8d 26 	lds	r12, 0x268D	; 0x80268d <curr_ir_power>
    3bec:	d0 90 8e 26 	lds	r13, 0x268E	; 0x80268e <curr_ir_power+0x1>
	uint16_t curr_power = getAllirPowers();
	setAllirPowers(256);
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	91 e0       	ldi	r25, 0x01	; 1
    3bf4:	0e 94 1f 1c 	call	0x383e	; 0x383e <setAllirPowers>
	getIrSensors(baseline_meas, 5);
    3bf8:	7e 01       	movw	r14, r28
    3bfa:	8d e0       	ldi	r24, 0x0D	; 13
    3bfc:	e8 0e       	add	r14, r24
    3bfe:	f1 1c       	adc	r15, r1
    3c00:	65 e0       	ldi	r22, 0x05	; 5
    3c02:	c7 01       	movw	r24, r14
    3c04:	0e 94 c1 1c 	call	0x3982	; 0x3982 <getIrSensors>
	//printf("Coll    base: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", baseline_meas[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOn(i);
    3c08:	10 e0       	ldi	r17, 0x00	; 0
    3c0a:	81 2f       	mov	r24, r17
    3c0c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <irLedOn>
    3c10:	1f 5f       	subi	r17, 0xFF	; 255
    3c12:	16 30       	cpi	r17, 0x06	; 6
    3c14:	d1 f7       	brne	.-12     	; 0x3c0a <checkCollisionValues+0x66>
    3c16:	af ec       	ldi	r26, 0xCF	; 207
    3c18:	b7 e0       	ldi	r27, 0x07	; 7
    3c1a:	11 97       	sbiw	r26, 0x01	; 1
    3c1c:	f1 f7       	brne	.-4      	; 0x3c1a <checkCollisionValues+0x76>
    3c1e:	00 c0       	rjmp	.+0      	; 0x3c20 <checkCollisionValues+0x7c>
    3c20:	00 00       	nop
	delay_us(250);	
	getIrSensors(measured_vals, 5);
    3c22:	65 e0       	ldi	r22, 0x05	; 5
    3c24:	ce 01       	movw	r24, r28
    3c26:	01 96       	adiw	r24, 0x01	; 1
    3c28:	0e 94 c1 1c 	call	0x3982	; 0x3982 <getIrSensors>
	//printf("Coll results: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", measured_vals[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOff(i);
    3c2c:	10 e0       	ldi	r17, 0x00	; 0
    3c2e:	81 2f       	mov	r24, r17
    3c30:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <irLedOff>
    3c34:	1f 5f       	subi	r17, 0xFF	; 255
    3c36:	16 30       	cpi	r17, 0x06	; 6
    3c38:	d1 f7       	brne	.-12     	; 0x3c2e <checkCollisionValues+0x8a>
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	31 96       	adiw	r30, 0x01	; 1
    3c3e:	97 01       	movw	r18, r14
    3c40:	6b 2d       	mov	r22, r11
    3c42:	70 2f       	mov	r23, r16
	for(uint8_t i=0;i<6;i++){
		meas[i] = (measured_vals[i]-baseline_meas[i]);
    3c44:	81 91       	ld	r24, Z+
    3c46:	91 91       	ld	r25, Z+
    3c48:	d9 01       	movw	r26, r18
    3c4a:	4d 91       	ld	r20, X+
    3c4c:	5d 91       	ld	r21, X+
    3c4e:	9d 01       	movw	r18, r26
    3c50:	84 1b       	sub	r24, r20
    3c52:	95 0b       	sbc	r25, r21
    3c54:	db 01       	movw	r26, r22
    3c56:	8d 93       	st	X+, r24
    3c58:	9d 93       	st	X+, r25
    3c5a:	bd 01       	movw	r22, r26
	getIrSensors(measured_vals, 5);
	//printf("Coll results: ");
	//for(uint8_t i=0;i<6;i++) printf("%4d ", measured_vals[i]);
	//printf("\r\n");
	for(uint8_t i=0;i<6;i++) irLedOff(i);
	for(uint8_t i=0;i<6;i++){
    3c5c:	ee 15       	cp	r30, r14
    3c5e:	ff 05       	cpc	r31, r15
    3c60:	89 f7       	brne	.-30     	; 0x3c44 <checkCollisionValues+0xa0>
		meas[i] = (measured_vals[i]-baseline_meas[i]);
	}
	setAllirPowers(curr_power);
    3c62:	c6 01       	movw	r24, r12
    3c64:	0e 94 1f 1c 	call	0x383e	; 0x383e <setAllirPowers>
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = 0;		
    3c68:	10 92 30 25 	sts	0x2530, r1	; 0x802530 <ir_rxtx+0x37>
    3c6c:	10 92 68 25 	sts	0x2568, r1	; 0x802568 <ir_rxtx+0x6f>
    3c70:	10 92 a0 25 	sts	0x25A0, r1	; 0x8025a0 <ir_rxtx+0xa7>
    3c74:	10 92 d8 25 	sts	0x25D8, r1	; 0x8025d8 <ir_rxtx+0xdf>
    3c78:	10 92 10 26 	sts	0x2610, r1	; 0x802610 <ir_rxtx+0x117>
    3c7c:	10 92 48 26 	sts	0x2648, r1	; 0x802648 <ir_rxtx+0x14f>
    3c80:	68 96       	adiw	r28, 0x18	; 24
    3c82:	cd bf       	out	0x3d, r28	; 61
    3c84:	de bf       	out	0x3e, r29	; 62
    3c86:	df 91       	pop	r29
    3c88:	cf 91       	pop	r28
    3c8a:	1f 91       	pop	r17
    3c8c:	0f 91       	pop	r16
    3c8e:	ff 90       	pop	r15
    3c90:	ef 90       	pop	r14
    3c92:	df 90       	pop	r13
    3c94:	cf 90       	pop	r12
    3c96:	bf 90       	pop	r11
    3c98:	08 95       	ret
void checkCollisionValues(int16_t meas[6]){
	int16_t baseline_meas[6];
	int16_t measured_vals[6];
	//uint8_t dirs=0;
	if(irIsBusy(ALL_DIRS)){
		printf_P(PSTR("IR Hardware busy. Can't check collisions.\r\n"));
    3c9a:	8a ee       	ldi	r24, 0xEA	; 234
    3c9c:	96 e0       	ldi	r25, 0x06	; 6
    3c9e:	9f 93       	push	r25
    3ca0:	8f 93       	push	r24
    3ca2:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
		return;
    3ca6:	0f 90       	pop	r0
    3ca8:	0f 90       	pop	r0
    3caa:	ea cf       	rjmp	.-44     	; 0x3c80 <checkCollisionValues+0xdc>

00003cac <checkCollisions>:
	}
	//for(uint8_t i=0;i<6;i++) printf("%d ", output_arr[i]);
	//printf("\r\n");	
}

uint8_t checkCollisions(){
    3cac:	cf 93       	push	r28
    3cae:	df 93       	push	r29
    3cb0:	cd b7       	in	r28, 0x3d	; 61
    3cb2:	de b7       	in	r29, 0x3e	; 62
    3cb4:	2c 97       	sbiw	r28, 0x0c	; 12
    3cb6:	cd bf       	out	0x3d, r28	; 61
    3cb8:	de bf       	out	0x3e, r29	; 62
	int16_t meas[6];
	uint8_t dirs = 0;
	checkCollisionValues(meas);
    3cba:	ce 01       	movw	r24, r28
    3cbc:	01 96       	adiw	r24, 0x01	; 1
    3cbe:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <checkCollisionValues>
    3cc2:	fe 01       	movw	r30, r28
    3cc4:	31 96       	adiw	r30, 0x01	; 1
    3cc6:	a2 e3       	ldi	r26, 0x32	; 50
    3cc8:	b3 e2       	ldi	r27, 0x23	; 35
    3cca:	40 e0       	ldi	r20, 0x00	; 0
    3ccc:	50 e0       	ldi	r21, 0x00	; 0
	//printf("\r\n");	
}

uint8_t checkCollisions(){
	int16_t meas[6];
	uint8_t dirs = 0;
    3cce:	80 e0       	ldi	r24, 0x00	; 0
	checkCollisionValues(meas);
	for(uint8_t i=0;i<6;i++){
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
    3cd0:	61 91       	ld	r22, Z+
    3cd2:	71 91       	ld	r23, Z+
    3cd4:	2d 91       	ld	r18, X+
    3cd6:	3d 91       	ld	r19, X+
    3cd8:	62 0f       	add	r22, r18
    3cda:	73 1f       	adc	r23, r19
    3cdc:	21 e0       	ldi	r18, 0x01	; 1
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	6f 3f       	cpi	r22, 0xFF	; 255
    3ce2:	77 40       	sbci	r23, 0x07	; 7
    3ce4:	14 f4       	brge	.+4      	; 0x3cea <checkCollisions+0x3e>
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	04 2e       	mov	r0, r20
    3cec:	01 c0       	rjmp	.+2      	; 0x3cf0 <checkCollisions+0x44>
    3cee:	22 0f       	add	r18, r18
    3cf0:	0a 94       	dec	r0
    3cf2:	ea f7       	brpl	.-6      	; 0x3cee <checkCollisions+0x42>
    3cf4:	82 2b       	or	r24, r18
    3cf6:	4f 5f       	subi	r20, 0xFF	; 255
    3cf8:	5f 4f       	sbci	r21, 0xFF	; 255

uint8_t checkCollisions(){
	int16_t meas[6];
	uint8_t dirs = 0;
	checkCollisionValues(meas);
	for(uint8_t i=0;i<6;i++){
    3cfa:	46 30       	cpi	r20, 0x06	; 6
    3cfc:	51 05       	cpc	r21, r1
    3cfe:	41 f7       	brne	.-48     	; 0x3cd0 <checkCollisions+0x24>
		dirs |=  (((meas[i]+ir_sense_baseline[i])>=IR_SENSE_MAX)<<i);
	}
	return dirs;
}
    3d00:	2c 96       	adiw	r28, 0x0c	; 12
    3d02:	cd bf       	out	0x3d, r28	; 61
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	df 91       	pop	r29
    3d08:	cf 91       	pop	r28
    3d0a:	08 95       	ret

00003d0c <localizationInit>:
//static const Matrix xyMeasCovarClose  = {{100, 2, 0.5}, {2, 100, 0.75}, {0.5, 0.75, 0.05}};
//static const Matrix xyMeasCovarMed = {{500, 100, -4}, {100, 500, -0.5}, {-4, -0.5, 0.2}};
//static const Matrix xyMeasCovarFar = {{8000, -1000, -0.25}, {-1000, 8000, -10}, {-0.25, -10, 1}};

void localizationInit(){
	myPos.x = UNDF;
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	90 e8       	ldi	r25, 0x80	; 128
    3d10:	80 93 81 26 	sts	0x2681, r24	; 0x802681 <myPos>
    3d14:	90 93 82 26 	sts	0x2682, r25	; 0x802682 <myPos+0x1>
	myPos.y = UNDF;
    3d18:	80 93 83 26 	sts	0x2683, r24	; 0x802683 <myPos+0x2>
    3d1c:	90 93 84 26 	sts	0x2684, r25	; 0x802684 <myPos+0x3>
	myPos.o = UNDF;
    3d20:	80 93 85 26 	sts	0x2685, r24	; 0x802685 <myPos+0x4>
    3d24:	90 93 86 26 	sts	0x2686, r25	; 0x802686 <myPos+0x5>
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
    3d28:	10 92 6e 24 	sts	0x246E, r1	; 0x80246e <myPosCovar>
    3d2c:	10 92 6f 24 	sts	0x246F, r1	; 0x80246f <myPosCovar+0x1>
    3d30:	10 92 70 24 	sts	0x2470, r1	; 0x802470 <myPosCovar+0x2>
    3d34:	10 92 71 24 	sts	0x2471, r1	; 0x802471 <myPosCovar+0x3>
    3d38:	10 92 72 24 	sts	0x2472, r1	; 0x802472 <myPosCovar+0x4>
    3d3c:	10 92 73 24 	sts	0x2473, r1	; 0x802473 <myPosCovar+0x5>
    3d40:	10 92 74 24 	sts	0x2474, r1	; 0x802474 <myPosCovar+0x6>
    3d44:	10 92 75 24 	sts	0x2475, r1	; 0x802475 <myPosCovar+0x7>
    3d48:	10 92 76 24 	sts	0x2476, r1	; 0x802476 <myPosCovar+0x8>
    3d4c:	10 92 77 24 	sts	0x2477, r1	; 0x802477 <myPosCovar+0x9>
    3d50:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <myPosCovar+0xa>
    3d54:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <myPosCovar+0xb>
	}
	seedFlag = 0;
    3d58:	10 92 f4 24 	sts	0x24F4, r1	; 0x8024f4 <seedFlag>
    3d5c:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <droplet_ID>
    3d60:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <droplet_ID+0x1>
	for(uint8_t i=0;i<NUM_SEEDS;i++){
		if(getDropletID()==SEED_IDS[i]){
    3d64:	86 36       	cpi	r24, 0x66	; 102
    3d66:	2c e6       	ldi	r18, 0x6C	; 108
    3d68:	92 07       	cpc	r25, r18
    3d6a:	e1 f1       	breq	.+120    	; 0x3de4 <localizationInit+0xd8>
    3d6c:	81 3d       	cpi	r24, 0xD1	; 209
    3d6e:	2c ec       	ldi	r18, 0xCC	; 204
    3d70:	92 07       	cpc	r25, r18
    3d72:	d1 f1       	breq	.+116    	; 0x3de8 <localizationInit+0xdc>
    3d74:	81 36       	cpi	r24, 0x61	; 97
    3d76:	23 e1       	ldi	r18, 0x13	; 19
    3d78:	92 07       	cpc	r25, r18
    3d7a:	c1 f1       	breq	.+112    	; 0x3dec <localizationInit+0xe0>
    3d7c:	01 96       	adiw	r24, 0x01	; 1
    3d7e:	09 f0       	breq	.+2      	; 0x3d82 <localizationInit+0x76>
    3d80:	08 95       	ret
	myPos.o = UNDF;
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
	}
	seedFlag = 0;
	for(uint8_t i=0;i<NUM_SEEDS;i++){
    3d82:	83 e0       	ldi	r24, 0x03	; 3
		if(getDropletID()==SEED_IDS[i]){
    3d84:	90 e0       	ldi	r25, 0x00	; 0
			seedFlag = 1;
    3d86:	21 e0       	ldi	r18, 0x01	; 1
    3d88:	20 93 f4 24 	sts	0x24F4, r18	; 0x8024f4 <seedFlag>
			myPos.x = SEED_POS[i].x;
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	ee 0f       	add	r30, r30
    3d90:	ff 1f       	adc	r31, r31
    3d92:	e8 0f       	add	r30, r24
    3d94:	f9 1f       	adc	r31, r25
    3d96:	ee 0f       	add	r30, r30
    3d98:	ff 1f       	adc	r31, r31
    3d9a:	ef 5d       	subi	r30, 0xDF	; 223
    3d9c:	fe 4d       	sbci	r31, 0xDE	; 222
    3d9e:	80 81       	ld	r24, Z
    3da0:	91 81       	ldd	r25, Z+1	; 0x01
    3da2:	80 93 81 26 	sts	0x2681, r24	; 0x802681 <myPos>
    3da6:	90 93 82 26 	sts	0x2682, r25	; 0x802682 <myPos+0x1>
			myPos.y = SEED_POS[i].y;
    3daa:	82 81       	ldd	r24, Z+2	; 0x02
    3dac:	93 81       	ldd	r25, Z+3	; 0x03
    3dae:	80 93 83 26 	sts	0x2683, r24	; 0x802683 <myPos+0x2>
    3db2:	90 93 84 26 	sts	0x2684, r25	; 0x802684 <myPos+0x3>
			myPos.o = SEED_POS[i].o;
    3db6:	84 81       	ldd	r24, Z+4	; 0x04
    3db8:	95 81       	ldd	r25, Z+5	; 0x05
    3dba:	80 93 85 26 	sts	0x2685, r24	; 0x802685 <myPos+0x4>
    3dbe:	90 93 86 26 	sts	0x2686, r25	; 0x802686 <myPos+0x5>
			myPosCovar[0].u = 1; //the actual value used will be this*8
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	80 93 6e 24 	sts	0x246E, r24	; 0x80246e <myPosCovar>
    3dca:	90 93 6f 24 	sts	0x246F, r25	; 0x80246f <myPosCovar+0x1>
			myPosCovar[3].u = 1; //the actual value used will be this*8
    3dce:	80 93 74 24 	sts	0x2474, r24	; 0x802474 <myPosCovar+0x6>
    3dd2:	90 93 75 24 	sts	0x2475, r25	; 0x802475 <myPosCovar+0x7>
			myPosCovar[5].u = 16; //the actual value used will be this/256
    3dd6:	80 e1       	ldi	r24, 0x10	; 16
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	80 93 78 24 	sts	0x2478, r24	; 0x802478 <myPosCovar+0xa>
    3dde:	90 93 79 24 	sts	0x2479, r25	; 0x802479 <myPosCovar+0xb>
    3de2:	08 95       	ret
	myPos.o = UNDF;
	for(uint8_t i=0;i<6;i++){
		myPosCovar[i].u = 0;
	}
	seedFlag = 0;
	for(uint8_t i=0;i<NUM_SEEDS;i++){
    3de4:	80 e0       	ldi	r24, 0x00	; 0
    3de6:	ce cf       	rjmp	.-100    	; 0x3d84 <localizationInit+0x78>
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	cc cf       	rjmp	.-104    	; 0x3d84 <localizationInit+0x78>
    3dec:	82 e0       	ldi	r24, 0x02	; 2
    3dee:	ca cf       	rjmp	.-108    	; 0x3d84 <localizationInit+0x78>

00003df0 <stopMove>:
		printf("\r\n");
	}
	printf("\r\n");
}
void broadcastMotorAdjusts()
{
    3df0:	e0 e0       	ldi	r30, 0x00	; 0
    3df2:	f8 e0       	ldi	r31, 0x08	; 8
    3df4:	81 81       	ldd	r24, Z+1	; 0x01
    3df6:	8f 7c       	andi	r24, 0xCF	; 207
    3df8:	81 83       	std	Z+1, r24	; 0x01
    3dfa:	10 82       	st	Z, r1
    3dfc:	e0 e4       	ldi	r30, 0x40	; 64
    3dfe:	f8 e0       	ldi	r31, 0x08	; 8
    3e00:	81 81       	ldd	r24, Z+1	; 0x01
    3e02:	8f 7c       	andi	r24, 0xCF	; 207
    3e04:	81 83       	std	Z+1, r24	; 0x01
    3e06:	10 82       	st	Z, r1
    3e08:	e0 e0       	ldi	r30, 0x00	; 0
    3e0a:	f9 e0       	ldi	r31, 0x09	; 9
    3e0c:	81 81       	ldd	r24, Z+1	; 0x01
    3e0e:	8f 7c       	andi	r24, 0xCF	; 207
    3e10:	81 83       	std	Z+1, r24	; 0x01
    3e12:	10 82       	st	Z, r1
    3e14:	83 e3       	ldi	r24, 0x33	; 51
    3e16:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    3e1a:	83 e0       	ldi	r24, 0x03	; 3
    3e1c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    3e20:	10 92 44 23 	sts	0x2344, r1	; 0x802344 <motor_status>
    3e24:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <current_motor_task>
    3e28:	90 91 43 23 	lds	r25, 0x2343	; 0x802343 <current_motor_task+0x1>
    3e2c:	0e 94 db 33 	call	0x67b6	; 0x67b6 <removeTask>
    3e30:	10 92 42 23 	sts	0x2342, r1	; 0x802342 <current_motor_task>
    3e34:	10 92 43 23 	sts	0x2343, r1	; 0x802343 <current_motor_task+0x1>
    3e38:	08 95       	ret

00003e3a <moveSteps>:
    3e3a:	8f 92       	push	r8
    3e3c:	9f 92       	push	r9
    3e3e:	af 92       	push	r10
    3e40:	bf 92       	push	r11
    3e42:	cf 92       	push	r12
    3e44:	df 92       	push	r13
    3e46:	ef 92       	push	r14
    3e48:	ff 92       	push	r15
    3e4a:	0f 93       	push	r16
    3e4c:	1f 93       	push	r17
    3e4e:	cf 93       	push	r28
    3e50:	df 93       	push	r29
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
    3e56:	29 97       	sbiw	r28, 0x09	; 9
    3e58:	cd bf       	out	0x3d, r28	; 61
    3e5a:	de bf       	out	0x3e, r29	; 62
    3e5c:	6b 01       	movw	r12, r22
    3e5e:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <motor_status>
    3e62:	97 fd       	sbrc	r25, 7
    3e64:	1b c1       	rjmp	.+566    	; 0x409c <__stack+0x9d>
    3e66:	98 2f       	mov	r25, r24
    3e68:	97 70       	andi	r25, 0x07	; 7
    3e6a:	90 68       	ori	r25, 0x80	; 128
    3e6c:	90 93 44 23 	sts	0x2344, r25	; 0x802344 <motor_status>
    3e70:	60 91 40 23 	lds	r22, 0x2340	; 0x802340 <motor_on_time>
    3e74:	70 91 41 23 	lds	r23, 0x2341	; 0x802341 <motor_on_time+0x1>
    3e78:	66 0f       	add	r22, r22
    3e7a:	77 1f       	adc	r23, r23
    3e7c:	62 95       	swap	r22
    3e7e:	72 95       	swap	r23
    3e80:	70 7f       	andi	r23, 0xF0	; 240
    3e82:	76 27       	eor	r23, r22
    3e84:	60 7f       	andi	r22, 0xF0	; 240
    3e86:	76 27       	eor	r23, r22
    3e88:	a0 90 3e 23 	lds	r10, 0x233E	; 0x80233e <motor_off_time>
    3e8c:	b0 90 3f 23 	lds	r11, 0x233F	; 0x80233f <motor_off_time+0x1>
    3e90:	aa 0c       	add	r10, r10
    3e92:	bb 1c       	adc	r11, r11
    3e94:	a2 94       	swap	r10
    3e96:	b2 94       	swap	r11
    3e98:	40 ef       	ldi	r20, 0xF0	; 240
    3e9a:	b4 22       	and	r11, r20
    3e9c:	ba 24       	eor	r11, r10
    3e9e:	a4 22       	and	r10, r20
    3ea0:	ba 24       	eor	r11, r10
    3ea2:	96 e0       	ldi	r25, 0x06	; 6
    3ea4:	89 9f       	mul	r24, r25
    3ea6:	f0 01       	movw	r30, r0
    3ea8:	11 24       	eor	r1, r1
    3eaa:	df 01       	movw	r26, r30
    3eac:	a6 5b       	subi	r26, 0xB6	; 182
    3eae:	b9 4d       	sbci	r27, 0xD9	; 217
    3eb0:	4d 01       	movw	r8, r26
    3eb2:	de 01       	movw	r26, r28
    3eb4:	11 96       	adiw	r26, 0x01	; 1
    3eb6:	7e 01       	movw	r14, r28
    3eb8:	e7 e0       	ldi	r30, 0x07	; 7
    3eba:	ee 0e       	add	r14, r30
    3ebc:	f1 1c       	adc	r15, r1
    3ebe:	c7 01       	movw	r24, r14
    3ec0:	00 e0       	ldi	r16, 0x00	; 0
    3ec2:	10 e0       	ldi	r17, 0x00	; 0
    3ec4:	f4 01       	movw	r30, r8
    3ec6:	21 91       	ld	r18, Z+
    3ec8:	31 91       	ld	r19, Z+
    3eca:	4f 01       	movw	r8, r30
    3ecc:	21 15       	cp	r18, r1
    3ece:	31 05       	cpc	r19, r1
    3ed0:	09 f0       	breq	.+2      	; 0x3ed4 <moveSteps+0x9a>
    3ed2:	66 c0       	rjmp	.+204    	; 0x3fa0 <moveSteps+0x166>
    3ed4:	1d 92       	st	X+, r1
    3ed6:	1c 92       	st	X, r1
    3ed8:	11 97       	sbiw	r26, 0x01	; 1
    3eda:	fc 01       	movw	r30, r24
    3edc:	10 82       	st	Z, r1
    3ede:	12 96       	adiw	r26, 0x02	; 2
    3ee0:	01 96       	adiw	r24, 0x01	; 1
    3ee2:	ae 15       	cp	r26, r14
    3ee4:	bf 05       	cpc	r27, r15
    3ee6:	71 f7       	brne	.-36     	; 0x3ec4 <moveSteps+0x8a>
    3ee8:	00 93 26 09 	sts	0x0926, r16	; 0x800926 <__TEXT_REGION_LENGTH__+0x700926>
    3eec:	10 93 27 09 	sts	0x0927, r17	; 0x800927 <__TEXT_REGION_LENGTH__+0x700927>
    3ef0:	00 93 66 08 	sts	0x0866, r16	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    3ef4:	10 93 67 08 	sts	0x0867, r17	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    3ef8:	00 93 26 08 	sts	0x0826, r16	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    3efc:	10 93 27 08 	sts	0x0827, r17	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    3f00:	e9 81       	ldd	r30, Y+1	; 0x01
    3f02:	fa 81       	ldd	r31, Y+2	; 0x02
    3f04:	e0 93 2a 08 	sts	0x082A, r30	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
    3f08:	f0 93 2b 08 	sts	0x082B, r31	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
    3f0c:	e0 93 28 08 	sts	0x0828, r30	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
    3f10:	f0 93 29 08 	sts	0x0829, r31	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
    3f14:	8b 81       	ldd	r24, Y+3	; 0x03
    3f16:	9c 81       	ldd	r25, Y+4	; 0x04
    3f18:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <__TEXT_REGION_LENGTH__+0x70086a>
    3f1c:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <__TEXT_REGION_LENGTH__+0x70086b>
    3f20:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x700868>
    3f24:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x700869>
    3f28:	8d 81       	ldd	r24, Y+5	; 0x05
    3f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f2c:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <__TEXT_REGION_LENGTH__+0x70092a>
    3f30:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <__TEXT_REGION_LENGTH__+0x70092b>
    3f34:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    3f38:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    3f3c:	80 90 3e 23 	lds	r8, 0x233E	; 0x80233e <motor_off_time>
    3f40:	90 90 3f 23 	lds	r9, 0x233F	; 0x80233f <motor_off_time+0x1>
    3f44:	88 0c       	add	r8, r8
    3f46:	99 1c       	adc	r9, r9
    3f48:	82 94       	swap	r8
    3f4a:	92 94       	swap	r9
    3f4c:	50 ef       	ldi	r21, 0xF0	; 240
    3f4e:	95 22       	and	r9, r21
    3f50:	98 24       	eor	r9, r8
    3f52:	85 22       	and	r8, r21
    3f54:	98 24       	eor	r9, r8
    3f56:	5e 01       	movw	r10, r28
    3f58:	83 e0       	ldi	r24, 0x03	; 3
    3f5a:	a8 0e       	add	r10, r24
    3f5c:	b1 1c       	adc	r11, r1
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	40 e0       	ldi	r20, 0x00	; 0
    3f64:	30 97       	sbiw	r30, 0x00	; 0
    3f66:	a1 f0       	breq	.+40     	; 0x3f90 <moveSteps+0x156>
    3f68:	c8 01       	movw	r24, r16
    3f6a:	82 1b       	sub	r24, r18
    3f6c:	93 0b       	sbc	r25, r19
    3f6e:	b8 01       	movw	r22, r16
    3f70:	0e 94 b6 4b 	call	0x976c	; 0x976c <__udivmodhi4>
    3f74:	41 30       	cpi	r20, 0x01	; 1
    3f76:	09 f4       	brne	.+2      	; 0x3f7a <moveSteps+0x140>
    3f78:	a9 c0       	rjmp	.+338    	; 0x40cc <__stack+0xcd>
    3f7a:	42 30       	cpi	r20, 0x02	; 2
    3f7c:	09 f4       	brne	.+2      	; 0x3f80 <moveSteps+0x146>
    3f7e:	92 c0       	rjmp	.+292    	; 0x40a4 <__stack+0xa5>
    3f80:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    3f84:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    3f88:	2e 0f       	add	r18, r30
    3f8a:	3f 1f       	adc	r19, r31
    3f8c:	28 0d       	add	r18, r8
    3f8e:	39 1d       	adc	r19, r9
    3f90:	4f 5f       	subi	r20, 0xFF	; 255
    3f92:	43 30       	cpi	r20, 0x03	; 3
    3f94:	c9 f0       	breq	.+50     	; 0x3fc8 <moveSteps+0x18e>
    3f96:	d5 01       	movw	r26, r10
    3f98:	ed 91       	ld	r30, X+
    3f9a:	fd 91       	ld	r31, X+
    3f9c:	5d 01       	movw	r10, r26
    3f9e:	e2 cf       	rjmp	.-60     	; 0x3f64 <moveSteps+0x12a>
    3fa0:	a9 01       	movw	r20, r18
    3fa2:	37 fd       	sbrc	r19, 7
    3fa4:	8e c0       	rjmp	.+284    	; 0x40c2 <__stack+0xc3>
    3fa6:	46 0f       	add	r20, r22
    3fa8:	57 1f       	adc	r21, r23
    3faa:	4d 93       	st	X+, r20
    3fac:	5c 93       	st	X, r21
    3fae:	11 97       	sbiw	r26, 0x01	; 1
    3fb0:	23 2f       	mov	r18, r19
    3fb2:	22 0f       	add	r18, r18
    3fb4:	22 0b       	sbc	r18, r18
    3fb6:	22 0f       	add	r18, r18
    3fb8:	2f 5f       	subi	r18, 0xFF	; 255
    3fba:	fc 01       	movw	r30, r24
    3fbc:	20 83       	st	Z, r18
    3fbe:	0a 0d       	add	r16, r10
    3fc0:	1b 1d       	adc	r17, r11
    3fc2:	04 0f       	add	r16, r20
    3fc4:	15 1f       	adc	r17, r21
    3fc6:	8b cf       	rjmp	.-234    	; 0x3ede <moveSteps+0xa4>
    3fc8:	02 17       	cp	r16, r18
    3fca:	13 07       	cpc	r17, r19
    3fcc:	81 f0       	breq	.+32     	; 0x3fee <moveSteps+0x1b4>
    3fce:	1f 93       	push	r17
    3fd0:	0f 93       	push	r16
    3fd2:	3f 93       	push	r19
    3fd4:	2f 93       	push	r18
    3fd6:	85 ef       	ldi	r24, 0xF5	; 245
    3fd8:	97 e0       	ldi	r25, 0x07	; 7
    3fda:	9f 93       	push	r25
    3fdc:	8f 93       	push	r24
    3fde:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
    3fe8:	0f 90       	pop	r0
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	47 e0       	ldi	r20, 0x07	; 7
    3ff4:	38 2f       	mov	r19, r24
    3ff6:	f7 01       	movw	r30, r14
    3ff8:	21 91       	ld	r18, Z+
    3ffa:	7f 01       	movw	r14, r30
    3ffc:	01 96       	adiw	r24, 0x01	; 1
    3ffe:	27 fd       	sbrc	r18, 7
    4000:	13 c0       	rjmp	.+38     	; 0x4028 <__stack+0x29>
    4002:	22 23       	and	r18, r18
    4004:	01 f1       	breq	.+64     	; 0x4046 <__stack+0x47>
    4006:	31 30       	cpi	r19, 0x01	; 1
    4008:	09 f4       	brne	.+2      	; 0x400c <__stack+0xd>
    400a:	65 c0       	rjmp	.+202    	; 0x40d6 <__stack+0xd7>
    400c:	32 30       	cpi	r19, 0x02	; 2
    400e:	09 f0       	breq	.+2      	; 0x4012 <__stack+0x13>
    4010:	4e c0       	rjmp	.+156    	; 0x40ae <__stack+0xaf>
    4012:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    4016:	80 62       	ori	r24, 0x20	; 32
    4018:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    401c:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <__TEXT_REGION_LENGTH__+0x700902>
    4020:	87 e0       	ldi	r24, 0x07	; 7
    4022:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
    4026:	11 c0       	rjmp	.+34     	; 0x404a <__stack+0x4b>
    4028:	31 30       	cpi	r19, 0x01	; 1
    402a:	09 f4       	brne	.+2      	; 0x402e <__stack+0x2f>
    402c:	72 c0       	rjmp	.+228    	; 0x4112 <__stack+0x113>
    402e:	32 30       	cpi	r19, 0x02	; 2
    4030:	09 f4       	brne	.+2      	; 0x4034 <__stack+0x35>
    4032:	5b c0       	rjmp	.+182    	; 0x40ea <__stack+0xeb>
    4034:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    4038:	20 61       	ori	r18, 0x10	; 16
    403a:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    403e:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    4042:	40 93 00 08 	sts	0x0800, r20	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    4046:	83 30       	cpi	r24, 0x03	; 3
    4048:	a9 f6       	brne	.-86     	; 0x3ff4 <moveSteps+0x1ba>
    404a:	98 01       	movw	r18, r16
    404c:	d6 01       	movw	r26, r12
    404e:	0e 94 08 4c 	call	0x9810	; 0x9810 <__umulhisi3>
    4052:	25 e0       	ldi	r18, 0x05	; 5
    4054:	96 95       	lsr	r25
    4056:	87 95       	ror	r24
    4058:	77 95       	ror	r23
    405a:	67 95       	ror	r22
    405c:	2a 95       	dec	r18
    405e:	d1 f7       	brne	.-12     	; 0x4054 <__stack+0x55>
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	48 ef       	ldi	r20, 0xF8	; 248
    4066:	5e e1       	ldi	r21, 0x1E	; 30
    4068:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <scheduleTask>
    406c:	80 93 42 23 	sts	0x2342, r24	; 0x802342 <current_motor_task>
    4070:	90 93 43 23 	sts	0x2343, r25	; 0x802343 <current_motor_task+0x1>
    4074:	89 2b       	or	r24, r25
    4076:	09 f4       	brne	.+2      	; 0x407a <__stack+0x7b>
    4078:	43 c0       	rjmp	.+134    	; 0x4100 <__stack+0x101>
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	29 96       	adiw	r28, 0x09	; 9
    407e:	cd bf       	out	0x3d, r28	; 61
    4080:	de bf       	out	0x3e, r29	; 62
    4082:	df 91       	pop	r29
    4084:	cf 91       	pop	r28
    4086:	1f 91       	pop	r17
    4088:	0f 91       	pop	r16
    408a:	ff 90       	pop	r15
    408c:	ef 90       	pop	r14
    408e:	df 90       	pop	r13
    4090:	cf 90       	pop	r12
    4092:	bf 90       	pop	r11
    4094:	af 90       	pop	r10
    4096:	9f 90       	pop	r9
    4098:	8f 90       	pop	r8
    409a:	08 95       	ret
    409c:	80 91 44 23 	lds	r24, 0x2344	; 0x802344 <motor_status>
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	ec cf       	rjmp	.-40     	; 0x407c <__stack+0x7d>
    40a4:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <__TEXT_REGION_LENGTH__+0x700920>
    40a8:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <__TEXT_REGION_LENGTH__+0x700921>
    40ac:	6d cf       	rjmp	.-294    	; 0x3f88 <moveSteps+0x14e>
    40ae:	20 91 01 08 	lds	r18, 0x0801	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    40b2:	20 62       	ori	r18, 0x20	; 32
    40b4:	20 93 01 08 	sts	0x0801, r18	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    40b8:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
    40bc:	40 93 00 08 	sts	0x0800, r20	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    40c0:	c2 cf       	rjmp	.-124    	; 0x4046 <__stack+0x47>
    40c2:	44 27       	eor	r20, r20
    40c4:	55 27       	eor	r21, r21
    40c6:	42 1b       	sub	r20, r18
    40c8:	53 0b       	sbc	r21, r19
    40ca:	6d cf       	rjmp	.-294    	; 0x3fa6 <moveSteps+0x16c>
    40cc:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
    40d0:	90 93 61 08 	sts	0x0861, r25	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
    40d4:	59 cf       	rjmp	.-334    	; 0x3f88 <moveSteps+0x14e>
    40d6:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    40da:	20 62       	ori	r18, 0x20	; 32
    40dc:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    40e0:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    40e4:	40 93 40 08 	sts	0x0840, r20	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    40e8:	85 cf       	rjmp	.-246    	; 0x3ff4 <moveSteps+0x1ba>
    40ea:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    40ee:	80 61       	ori	r24, 0x10	; 16
    40f0:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <__TEXT_REGION_LENGTH__+0x700901>
    40f4:	10 92 02 09 	sts	0x0902, r1	; 0x800902 <__TEXT_REGION_LENGTH__+0x700902>
    40f8:	87 e0       	ldi	r24, 0x07	; 7
    40fa:	80 93 00 09 	sts	0x0900, r24	; 0x800900 <__TEXT_REGION_LENGTH__+0x700900>
    40fe:	a5 cf       	rjmp	.-182    	; 0x404a <__stack+0x4b>
    4100:	8b ec       	ldi	r24, 0xCB	; 203
    4102:	97 e0       	ldi	r25, 0x07	; 7
    4104:	9f 93       	push	r25
    4106:	8f 93       	push	r24
    4108:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	b4 cf       	rjmp	.-152    	; 0x407a <__stack+0x7b>
    4112:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    4116:	20 61       	ori	r18, 0x10	; 16
    4118:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    411c:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
    4120:	40 93 40 08 	sts	0x0840, r20	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    4124:	67 cf       	rjmp	.-306    	; 0x3ff4 <moveSteps+0x1ba>

00004126 <walk>:
    4126:	cf 92       	push	r12
    4128:	df 92       	push	r13
    412a:	ef 92       	push	r14
    412c:	ff 92       	push	r15
    412e:	0f 93       	push	r16
    4130:	1f 93       	push	r17
    4132:	cf 93       	push	r28
    4134:	df 93       	push	r29
    4136:	18 2f       	mov	r17, r24
    4138:	eb 01       	movw	r28, r22
    413a:	e8 2f       	mov	r30, r24
    413c:	f0 e0       	ldi	r31, 0x00	; 0
    413e:	ee 0f       	add	r30, r30
    4140:	ff 1f       	adc	r31, r31
    4142:	ec 55       	subi	r30, 0x5C	; 92
    4144:	fb 4d       	sbci	r31, 0xDB	; 219
    4146:	60 81       	ld	r22, Z
    4148:	71 81       	ldd	r23, Z+1	; 0x01
    414a:	67 3e       	cpi	r22, 0xE7	; 231
    414c:	83 e0       	ldi	r24, 0x03	; 3
    414e:	78 07       	cpc	r23, r24
    4150:	2c f4       	brge	.+10     	; 0x415c <walk+0x36>
    4152:	68 31       	cpi	r22, 0x18	; 24
    4154:	9c ef       	ldi	r25, 0xFC	; 252
    4156:	79 07       	cpc	r23, r25
    4158:	0c f0       	brlt	.+2      	; 0x415c <walk+0x36>
    415a:	43 c0       	rjmp	.+134    	; 0x41e2 <walk+0xbc>
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__floatunsisf>
    4164:	20 e0       	ldi	r18, 0x00	; 0
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	4a e7       	ldi	r20, 0x7A	; 122
    416a:	54 e4       	ldi	r21, 0x44	; 68
    416c:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    4170:	6b 01       	movw	r12, r22
    4172:	7c 01       	movw	r14, r24
    4174:	be 01       	movw	r22, r28
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__floatunsisf>
    417e:	a7 01       	movw	r20, r14
    4180:	96 01       	movw	r18, r12
    4182:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    4186:	6b 01       	movw	r12, r22
    4188:	7c 01       	movw	r14, r24
    418a:	8a e0       	ldi	r24, 0x0A	; 10
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    4192:	c7 01       	movw	r24, r14
    4194:	b6 01       	movw	r22, r12
    4196:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    419a:	f6 2e       	mov	r15, r22
    419c:	07 2f       	mov	r16, r23
    419e:	7f 93       	push	r23
    41a0:	6f 93       	push	r22
    41a2:	df 93       	push	r29
    41a4:	cf 93       	push	r28
    41a6:	1f 92       	push	r1
    41a8:	1f 93       	push	r17
    41aa:	83 e5       	ldi	r24, 0x53	; 83
    41ac:	97 e0       	ldi	r25, 0x07	; 7
    41ae:	9f 93       	push	r25
    41b0:	8f 93       	push	r24
    41b2:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    41b6:	8a e0       	ldi	r24, 0x0A	; 10
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    41be:	8d b7       	in	r24, 0x3d	; 61
    41c0:	9e b7       	in	r25, 0x3e	; 62
    41c2:	08 96       	adiw	r24, 0x08	; 8
    41c4:	8d bf       	out	0x3d, r24	; 61
    41c6:	9e bf       	out	0x3e, r25	; 62
    41c8:	6f 2d       	mov	r22, r15
    41ca:	70 2f       	mov	r23, r16
    41cc:	81 2f       	mov	r24, r17
    41ce:	df 91       	pop	r29
    41d0:	cf 91       	pop	r28
    41d2:	1f 91       	pop	r17
    41d4:	0f 91       	pop	r16
    41d6:	ff 90       	pop	r15
    41d8:	ef 90       	pop	r14
    41da:	df 90       	pop	r13
    41dc:	cf 90       	pop	r12
    41de:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <moveSteps>
    41e2:	81 e9       	ldi	r24, 0x91	; 145
    41e4:	97 e0       	ldi	r25, 0x07	; 7
    41e6:	9f 93       	push	r25
    41e8:	8f 93       	push	r24
    41ea:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    41ee:	0f 90       	pop	r0
    41f0:	0f 90       	pop	r0
    41f2:	16 30       	cpi	r17, 0x06	; 6
    41f4:	48 f4       	brcc	.+18     	; 0x4208 <walk+0xe2>
    41f6:	8a e9       	ldi	r24, 0x9A	; 154
    41f8:	c8 2e       	mov	r12, r24
    41fa:	89 e9       	ldi	r24, 0x99	; 153
    41fc:	d8 2e       	mov	r13, r24
    41fe:	89 e1       	ldi	r24, 0x19	; 25
    4200:	e8 2e       	mov	r14, r24
    4202:	8f e3       	ldi	r24, 0x3F	; 63
    4204:	f8 2e       	mov	r15, r24
    4206:	b6 cf       	rjmp	.-148    	; 0x4174 <walk+0x4e>
    4208:	c1 2c       	mov	r12, r1
    420a:	d1 2c       	mov	r13, r1
    420c:	e1 2c       	mov	r14, r1
    420e:	90 e4       	ldi	r25, 0x40	; 64
    4210:	f9 2e       	mov	r15, r25
    4212:	b0 cf       	rjmp	.-160    	; 0x4174 <walk+0x4e>

00004214 <setMMperKilostep>:
    4214:	e8 2f       	mov	r30, r24
    4216:	f0 e0       	ldi	r31, 0x00	; 0
    4218:	ee 0f       	add	r30, r30
    421a:	ff 1f       	adc	r31, r31
    421c:	ec 55       	subi	r30, 0x5C	; 92
    421e:	fb 4d       	sbci	r31, 0xDB	; 219
    4220:	60 83       	st	Z, r22
    4222:	71 83       	std	Z+1, r23	; 0x01
    4224:	08 95       	ret

00004226 <readMotorSettings>:
    4226:	df 92       	push	r13
    4228:	ef 92       	push	r14
    422a:	ff 92       	push	r15
    422c:	0f 93       	push	r16
    422e:	1f 93       	push	r17
    4230:	cf 93       	push	r28
    4232:	df 93       	push	r29
    4234:	50 e1       	ldi	r21, 0x10	; 16
    4236:	e5 2e       	mov	r14, r21
    4238:	f1 2c       	mov	r15, r1
    423a:	87 01       	movw	r16, r14
    423c:	06 5c       	subi	r16, 0xC6	; 198
    423e:	19 4d       	sbci	r17, 0xD9	; 217
    4240:	e7 01       	movw	r28, r14
    4242:	26 96       	adiw	r28, 0x06	; 6
    4244:	c7 01       	movw	r24, r14
    4246:	0e 94 00 0c 	call	0x1800	; 0x1800 <EEPROM_read_byte>
    424a:	d8 2e       	mov	r13, r24
    424c:	c7 01       	movw	r24, r14
    424e:	01 96       	adiw	r24, 0x01	; 1
    4250:	0e 94 00 0c 	call	0x1800	; 0x1800 <EEPROM_read_byte>
    4254:	2d 2d       	mov	r18, r13
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	32 2f       	mov	r19, r18
    425a:	22 27       	eor	r18, r18
    425c:	28 2b       	or	r18, r24
    425e:	f8 01       	movw	r30, r16
    4260:	21 93       	st	Z+, r18
    4262:	31 93       	st	Z+, r19
    4264:	8f 01       	movw	r16, r30
    4266:	f2 e0       	ldi	r31, 0x02	; 2
    4268:	ef 0e       	add	r14, r31
    426a:	f1 1c       	adc	r15, r1
    426c:	ec 16       	cp	r14, r28
    426e:	fd 06       	cpc	r15, r29
    4270:	49 f7       	brne	.-46     	; 0x4244 <readMotorSettings+0x1e>
    4272:	7e 01       	movw	r14, r28
    4274:	c0 34       	cpi	r28, 0x40	; 64
    4276:	d1 05       	cpc	r29, r1
    4278:	01 f7       	brne	.-64     	; 0x423a <readMotorSettings+0x14>
    427a:	24 ea       	ldi	r18, 0xA4	; 164
    427c:	e2 2e       	mov	r14, r18
    427e:	24 e2       	ldi	r18, 0x24	; 36
    4280:	f2 2e       	mov	r15, r18
    4282:	ce 01       	movw	r24, r28
    4284:	0e 94 00 0c 	call	0x1800	; 0x1800 <EEPROM_read_byte>
    4288:	18 2f       	mov	r17, r24
    428a:	ce 01       	movw	r24, r28
    428c:	01 96       	adiw	r24, 0x01	; 1
    428e:	0e 94 00 0c 	call	0x1800	; 0x1800 <EEPROM_read_byte>
    4292:	21 2f       	mov	r18, r17
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	32 2f       	mov	r19, r18
    4298:	22 27       	eor	r18, r18
    429a:	28 2b       	or	r18, r24
    429c:	f7 01       	movw	r30, r14
    429e:	21 93       	st	Z+, r18
    42a0:	31 93       	st	Z+, r19
    42a2:	7f 01       	movw	r14, r30
    42a4:	22 96       	adiw	r28, 0x02	; 2
    42a6:	c0 35       	cpi	r28, 0x50	; 80
    42a8:	d1 05       	cpc	r29, r1
    42aa:	59 f7       	brne	.-42     	; 0x4282 <readMotorSettings+0x5c>
    42ac:	df 91       	pop	r29
    42ae:	cf 91       	pop	r28
    42b0:	1f 91       	pop	r17
    42b2:	0f 91       	pop	r16
    42b4:	ff 90       	pop	r15
    42b6:	ef 90       	pop	r14
    42b8:	df 90       	pop	r13
    42ba:	08 95       	ret

000042bc <motorInit>:
    42bc:	cf 93       	push	r28
    42be:	df 93       	push	r29
    42c0:	e0 e4       	ldi	r30, 0x40	; 64
    42c2:	f6 e0       	ldi	r31, 0x06	; 6
    42c4:	83 e3       	ldi	r24, 0x33	; 51
    42c6:	81 83       	std	Z+1, r24	; 0x01
    42c8:	a0 e6       	ldi	r26, 0x60	; 96
    42ca:	b6 e0       	ldi	r27, 0x06	; 6
    42cc:	83 e0       	ldi	r24, 0x03	; 3
    42ce:	11 96       	adiw	r26, 0x01	; 1
    42d0:	8c 93       	st	X, r24
    42d2:	11 97       	sbiw	r26, 0x01	; 1
    42d4:	c0 e0       	ldi	r28, 0x00	; 0
    42d6:	d8 e0       	ldi	r29, 0x08	; 8
    42d8:	18 82       	st	Y, r1
    42da:	89 83       	std	Y+1, r24	; 0x01
    42dc:	c0 e4       	ldi	r28, 0x40	; 64
    42de:	d8 e0       	ldi	r29, 0x08	; 8
    42e0:	18 82       	st	Y, r1
    42e2:	89 83       	std	Y+1, r24	; 0x01
    42e4:	c0 e0       	ldi	r28, 0x00	; 0
    42e6:	d9 e0       	ldi	r29, 0x09	; 9
    42e8:	18 82       	st	Y, r1
    42ea:	89 83       	std	Y+1, r24	; 0x01
    42ec:	90 e4       	ldi	r25, 0x40	; 64
    42ee:	90 8b       	std	Z+16, r25	; 0x10
    42f0:	91 8b       	std	Z+17, r25	; 0x11
    42f2:	94 8b       	std	Z+20, r25	; 0x14
    42f4:	95 8b       	std	Z+21, r25	; 0x15
    42f6:	50 96       	adiw	r26, 0x10	; 16
    42f8:	9c 93       	st	X, r25
    42fa:	50 97       	sbiw	r26, 0x10	; 16
    42fc:	51 96       	adiw	r26, 0x11	; 17
    42fe:	9c 93       	st	X, r25
    4300:	51 97       	sbiw	r26, 0x11	; 17
    4302:	86 83       	std	Z+6, r24	; 0x06
    4304:	90 e3       	ldi	r25, 0x30	; 48
    4306:	96 83       	std	Z+6, r25	; 0x06
    4308:	16 96       	adiw	r26, 0x06	; 6
    430a:	8c 93       	st	X, r24
    430c:	10 92 44 23 	sts	0x2344, r1	; 0x802344 <motor_status>
    4310:	84 e1       	ldi	r24, 0x14	; 20
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	80 93 40 23 	sts	0x2340, r24	; 0x802340 <motor_on_time>
    4318:	90 93 41 23 	sts	0x2341, r25	; 0x802341 <motor_on_time+0x1>
    431c:	88 e2       	ldi	r24, 0x28	; 40
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	80 93 3e 23 	sts	0x233E, r24	; 0x80233e <motor_off_time>
    4324:	90 93 3f 23 	sts	0x233F, r25	; 0x80233f <motor_off_time+0x1>
    4328:	df 91       	pop	r29
    432a:	cf 91       	pop	r28
    432c:	0c 94 13 21 	jmp	0x4226	; 0x4226 <readMotorSettings>

00004330 <writeMotorSettings>:
    4330:	df 92       	push	r13
    4332:	ef 92       	push	r14
    4334:	ff 92       	push	r15
    4336:	0f 93       	push	r16
    4338:	1f 93       	push	r17
    433a:	cf 93       	push	r28
    433c:	df 93       	push	r29
    433e:	c0 e1       	ldi	r28, 0x10	; 16
    4340:	d0 e0       	ldi	r29, 0x00	; 0
    4342:	8e 01       	movw	r16, r28
    4344:	06 5c       	subi	r16, 0xC6	; 198
    4346:	19 4d       	sbci	r17, 0xD9	; 217
    4348:	7e 01       	movw	r14, r28
    434a:	86 e0       	ldi	r24, 0x06	; 6
    434c:	e8 0e       	add	r14, r24
    434e:	f1 1c       	adc	r15, r1
    4350:	f8 01       	movw	r30, r16
    4352:	d0 80       	ld	r13, Z
    4354:	61 81       	ldd	r22, Z+1	; 0x01
    4356:	0e 5f       	subi	r16, 0xFE	; 254
    4358:	1f 4f       	sbci	r17, 0xFF	; 255
    435a:	ce 01       	movw	r24, r28
    435c:	0e 94 19 0c 	call	0x1832	; 0x1832 <EEPROM_write_byte>
    4360:	6d 2d       	mov	r22, r13
    4362:	ce 01       	movw	r24, r28
    4364:	01 96       	adiw	r24, 0x01	; 1
    4366:	0e 94 19 0c 	call	0x1832	; 0x1832 <EEPROM_write_byte>
    436a:	22 96       	adiw	r28, 0x02	; 2
    436c:	ce 15       	cp	r28, r14
    436e:	df 05       	cpc	r29, r15
    4370:	79 f7       	brne	.-34     	; 0x4350 <writeMotorSettings+0x20>
    4372:	e7 01       	movw	r28, r14
    4374:	f0 e4       	ldi	r31, 0x40	; 64
    4376:	ef 16       	cp	r14, r31
    4378:	f1 04       	cpc	r15, r1
    437a:	19 f7       	brne	.-58     	; 0x4342 <writeMotorSettings+0x12>
    437c:	c4 ea       	ldi	r28, 0xA4	; 164
    437e:	d4 e2       	ldi	r29, 0x24	; 36
    4380:	18 81       	ld	r17, Y
    4382:	69 81       	ldd	r22, Y+1	; 0x01
    4384:	22 96       	adiw	r28, 0x02	; 2
    4386:	c7 01       	movw	r24, r14
    4388:	0e 94 19 0c 	call	0x1832	; 0x1832 <EEPROM_write_byte>
    438c:	61 2f       	mov	r22, r17
    438e:	c7 01       	movw	r24, r14
    4390:	01 96       	adiw	r24, 0x01	; 1
    4392:	0e 94 19 0c 	call	0x1832	; 0x1832 <EEPROM_write_byte>
    4396:	e2 e0       	ldi	r30, 0x02	; 2
    4398:	ee 0e       	add	r14, r30
    439a:	f1 1c       	adc	r15, r1
    439c:	f0 e5       	ldi	r31, 0x50	; 80
    439e:	ef 16       	cp	r14, r31
    43a0:	f1 04       	cpc	r15, r1
    43a2:	71 f7       	brne	.-36     	; 0x4380 <writeMotorSettings+0x50>
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	0f 91       	pop	r16
    43ac:	ff 90       	pop	r15
    43ae:	ef 90       	pop	r14
    43b0:	df 90       	pop	r13
    43b2:	08 95       	ret

000043b4 <printMotorValues>:
    43b4:	8f 92       	push	r8
    43b6:	9f 92       	push	r9
    43b8:	af 92       	push	r10
    43ba:	bf 92       	push	r11
    43bc:	cf 92       	push	r12
    43be:	df 92       	push	r13
    43c0:	ef 92       	push	r14
    43c2:	ff 92       	push	r15
    43c4:	1f 93       	push	r17
    43c6:	cf 93       	push	r28
    43c8:	df 93       	push	r29
    43ca:	84 e4       	ldi	r24, 0x44	; 68
    43cc:	97 e0       	ldi	r25, 0x07	; 7
    43ce:	9f 93       	push	r25
    43d0:	8f 93       	push	r24
    43d2:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    43d6:	8a e4       	ldi	r24, 0x4A	; 74
    43d8:	a8 2e       	mov	r10, r24
    43da:	86 e2       	ldi	r24, 0x26	; 38
    43dc:	b8 2e       	mov	r11, r24
    43de:	0f 90       	pop	r0
    43e0:	0f 90       	pop	r0
    43e2:	c1 2c       	mov	r12, r1
    43e4:	d1 2c       	mov	r13, r1
    43e6:	99 e3       	ldi	r25, 0x39	; 57
    43e8:	89 2e       	mov	r8, r25
    43ea:	97 e0       	ldi	r25, 0x07	; 7
    43ec:	99 2e       	mov	r9, r25
    43ee:	29 e3       	ldi	r18, 0x39	; 57
    43f0:	e2 2e       	mov	r14, r18
    43f2:	21 e2       	ldi	r18, 0x21	; 33
    43f4:	f2 2e       	mov	r15, r18
    43f6:	df 92       	push	r13
    43f8:	cf 92       	push	r12
    43fa:	9f 92       	push	r9
    43fc:	8f 92       	push	r8
    43fe:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    4402:	0f 90       	pop	r0
    4404:	0f 90       	pop	r0
    4406:	0f 90       	pop	r0
    4408:	0f 90       	pop	r0
    440a:	e5 01       	movw	r28, r10
    440c:	13 e0       	ldi	r17, 0x03	; 3
    440e:	88 81       	ld	r24, Y
    4410:	99 81       	ldd	r25, Y+1	; 0x01
    4412:	22 96       	adiw	r28, 0x02	; 2
    4414:	9f 93       	push	r25
    4416:	8f 93       	push	r24
    4418:	ff 92       	push	r15
    441a:	ef 92       	push	r14
    441c:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
    4420:	11 50       	subi	r17, 0x01	; 1
    4422:	0f 90       	pop	r0
    4424:	0f 90       	pop	r0
    4426:	0f 90       	pop	r0
    4428:	0f 90       	pop	r0
    442a:	89 f7       	brne	.-30     	; 0x440e <printMotorValues+0x5a>
    442c:	8a ec       	ldi	r24, 0xCA	; 202
    442e:	90 e2       	ldi	r25, 0x20	; 32
    4430:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
    4434:	8f ef       	ldi	r24, 0xFF	; 255
    4436:	c8 1a       	sub	r12, r24
    4438:	d8 0a       	sbc	r13, r24
    443a:	86 e0       	ldi	r24, 0x06	; 6
    443c:	a8 0e       	add	r10, r24
    443e:	b1 1c       	adc	r11, r1
    4440:	88 e0       	ldi	r24, 0x08	; 8
    4442:	c8 16       	cp	r12, r24
    4444:	d1 04       	cpc	r13, r1
    4446:	b9 f6       	brne	.-82     	; 0x43f6 <printMotorValues+0x42>
    4448:	8a ec       	ldi	r24, 0xCA	; 202
    444a:	90 e2       	ldi	r25, 0x20	; 32
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	1f 91       	pop	r17
    4452:	ff 90       	pop	r15
    4454:	ef 90       	pop	r14
    4456:	df 90       	pop	r13
    4458:	cf 90       	pop	r12
    445a:	bf 90       	pop	r11
    445c:	af 90       	pop	r10
    445e:	9f 90       	pop	r9
    4460:	8f 90       	pop	r8
    4462:	0c 94 a7 50 	jmp	0xa14e	; 0xa14e <puts>

00004466 <printDistPerStep>:
	// TODO: Deprecated?
}

void printDistPerStep()
{
    4466:	ef 92       	push	r14
    4468:	ff 92       	push	r15
    446a:	0f 93       	push	r16
    446c:	1f 93       	push	r17
    446e:	cf 93       	push	r28
    4470:	df 93       	push	r29
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
    4472:	80 e2       	ldi	r24, 0x20	; 32
    4474:	97 e0       	ldi	r25, 0x07	; 7
    4476:	9f 93       	push	r25
    4478:	8f 93       	push	r24
    447a:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    447e:	04 ea       	ldi	r16, 0xA4	; 164
    4480:	14 e2       	ldi	r17, 0x24	; 36
    4482:	0f 90       	pop	r0
    4484:	0f 90       	pop	r0
    4486:	c0 e0       	ldi	r28, 0x00	; 0
    4488:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t direction = 0 ; direction<8; direction++)
	{
		printf_P(PSTR("\t%hu\t%u\r\n"), direction, mmPerKilostep[direction]);	
    448a:	86 e1       	ldi	r24, 0x16	; 22
    448c:	e8 2e       	mov	r14, r24
    448e:	87 e0       	ldi	r24, 0x07	; 7
    4490:	f8 2e       	mov	r15, r24
    4492:	f8 01       	movw	r30, r16
    4494:	80 81       	ld	r24, Z
    4496:	91 81       	ldd	r25, Z+1	; 0x01
    4498:	0e 5f       	subi	r16, 0xFE	; 254
    449a:	1f 4f       	sbci	r17, 0xFF	; 255
    449c:	9f 93       	push	r25
    449e:	8f 93       	push	r24
    44a0:	df 93       	push	r29
    44a2:	cf 93       	push	r28
    44a4:	ff 92       	push	r15
    44a6:	ef 92       	push	r14
    44a8:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    44ac:	21 96       	adiw	r28, 0x01	; 1
}

void printDistPerStep()
{
	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
	for(uint8_t direction = 0 ; direction<8; direction++)
    44ae:	0f 90       	pop	r0
    44b0:	0f 90       	pop	r0
    44b2:	0f 90       	pop	r0
    44b4:	0f 90       	pop	r0
    44b6:	0f 90       	pop	r0
    44b8:	0f 90       	pop	r0
    44ba:	c8 30       	cpi	r28, 0x08	; 8
    44bc:	d1 05       	cpc	r29, r1
    44be:	49 f7       	brne	.-46     	; 0x4492 <printDistPerStep+0x2c>
	{
		printf_P(PSTR("\t%hu\t%u\r\n"), direction, mmPerKilostep[direction]);	
	}
}
    44c0:	df 91       	pop	r29
    44c2:	cf 91       	pop	r28
    44c4:	1f 91       	pop	r17
    44c6:	0f 91       	pop	r16
    44c8:	ff 90       	pop	r15
    44ca:	ef 90       	pop	r14
    44cc:	08 95       	ret

000044ce <nvm_flash_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    44ce:	da 01       	movw	r26, r20
    44d0:	a9 01       	movw	r20, r18
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    44d2:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    44d6:	37 fd       	sbrc	r19, 7
    44d8:	fc cf       	rjmp	.-8      	; 0x44d2 <nvm_flash_read_buffer+0x4>
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    44da:	41 15       	cp	r20, r1
    44dc:	51 05       	cpc	r21, r1
    44de:	69 f0       	breq	.+26     	; 0x44fa <nvm_flash_read_buffer+0x2c>
    44e0:	4a 0f       	add	r20, r26
    44e2:	5b 1f       	adc	r21, r27
 *
 * \param addr Byte address to load
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr){
	return pgm_read_byte_far(addr);
    44e4:	8b bf       	out	0x3b, r24	; 59
    44e6:	fb 01       	movw	r30, r22
    44e8:	37 91       	elpm	r19, Z+
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
    44ea:	3d 93       	st	X+, r19
		buf=(uint8_t*)buf+1;
		opt_address++;
    44ec:	6f 5f       	subi	r22, 0xFF	; 255
    44ee:	7f 4f       	sbci	r23, 0xFF	; 255
    44f0:	8f 4f       	sbci	r24, 0xFF	; 255
    44f2:	9f 4f       	sbci	r25, 0xFF	; 255
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    44f4:	a4 17       	cp	r26, r20
    44f6:	b5 07       	cpc	r27, r21
    44f8:	a9 f7       	brne	.-22     	; 0x44e4 <nvm_flash_read_buffer+0x16>
    44fa:	08 95       	ret

000044fc <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    44fc:	4f 92       	push	r4
    44fe:	5f 92       	push	r5
    4500:	6f 92       	push	r6
    4502:	7f 92       	push	r7
    4504:	8f 92       	push	r8
    4506:	9f 92       	push	r9
    4508:	af 92       	push	r10
    450a:	bf 92       	push	r11
    450c:	cf 92       	push	r12
    450e:	df 92       	push	r13
    4510:	ef 92       	push	r14
    4512:	ff 92       	push	r15
    4514:	0f 93       	push	r16
    4516:	1f 93       	push	r17
    4518:	cf 93       	push	r28
    451a:	df 93       	push	r29
    451c:	00 d0       	rcall	.+0      	; 0x451e <nvm_flash_erase_and_write_buffer+0x22>
    451e:	00 d0       	rcall	.+0      	; 0x4520 <nvm_flash_erase_and_write_buffer+0x24>
    4520:	cd b7       	in	r28, 0x3d	; 61
    4522:	de b7       	in	r29, 0x3e	; 62
    4524:	2b 01       	movw	r4, r22
    4526:	3c 01       	movw	r6, r24
    4528:	6a 01       	movw	r12, r20
    452a:	79 01       	movw	r14, r18
    452c:	90 2e       	mov	r9, r16
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    452e:	dc 01       	movw	r26, r24
    4530:	cb 01       	movw	r24, r22
    4532:	88 27       	eor	r24, r24
    4534:	9e 7f       	andi	r25, 0xFE	; 254
    4536:	89 83       	std	Y+1, r24	; 0x01
    4538:	9a 83       	std	Y+2, r25	; 0x02
    453a:	ab 83       	std	Y+3, r26	; 0x03
    453c:	bc 83       	std	Y+4, r27	; 0x04

	// For each page
	while ( len ) {
    453e:	23 2b       	or	r18, r19
    4540:	09 f4       	brne	.+2      	; 0x4544 <nvm_flash_erase_and_write_buffer+0x48>
    4542:	87 c0       	rjmp	.+270    	; 0x4652 <nvm_flash_erase_and_write_buffer+0x156>
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    4544:	aa 24       	eor	r10, r10
    4546:	aa 94       	dec	r10
    4548:	ba 2c       	mov	r11, r10
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    454a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    454e:	87 fd       	sbrc	r24, 7
    4550:	fc cf       	rjmp	.-8      	; 0x454a <nvm_flash_erase_and_write_buffer+0x4e>
    4552:	00 e0       	ldi	r16, 0x00	; 0
    4554:	11 e0       	ldi	r17, 0x01	; 1
    4556:	81 2c       	mov	r8, r1
    4558:	41 c0       	rjmp	.+130    	; 0x45dc <nvm_flash_erase_and_write_buffer+0xe0>

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    455a:	89 81       	ldd	r24, Y+1	; 0x01
    455c:	9a 81       	ldd	r25, Y+2	; 0x02
    455e:	ab 81       	ldd	r26, Y+3	; 0x03
    4560:	bc 81       	ldd	r27, Y+4	; 0x04
 *
 * \param addr Byte address to load (last bit is ignored)
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr){
	return pgm_read_word_far(addr);
    4562:	ab bf       	out	0x3b, r26	; 59
    4564:	fc 01       	movw	r30, r24
    4566:	87 91       	elpm	r24, Z+
    4568:	96 91       	elpm	r25, Z
    456a:	8d 83       	std	Y+5, r24	; 0x05
    456c:	9e 83       	std	Y+6, r25	; 0x06
				if (w_value!=0xFFFF) {
    456e:	8d 81       	ldd	r24, Y+5	; 0x05
    4570:	9e 81       	ldd	r25, Y+6	; 0x06
    4572:	01 96       	adiw	r24, 0x01	; 1
    4574:	11 f0       	breq	.+4      	; 0x457a <nvm_flash_erase_and_write_buffer+0x7e>
					b_flag_erase = true; // The page is not empty
    4576:	88 24       	eor	r8, r8
    4578:	83 94       	inc	r8
			}else{
				w_value = 0xFFFF;
			}

			// Update flash buffer
			if (len) {
    457a:	e1 14       	cp	r14, r1
    457c:	f1 04       	cpc	r15, r1
    457e:	c1 f0       	breq	.+48     	; 0x45b0 <nvm_flash_erase_and_write_buffer+0xb4>
				if (opt_address == page_address) {
    4580:	89 81       	ldd	r24, Y+1	; 0x01
    4582:	9a 81       	ldd	r25, Y+2	; 0x02
    4584:	ab 81       	ldd	r26, Y+3	; 0x03
    4586:	bc 81       	ldd	r27, Y+4	; 0x04
    4588:	84 15       	cp	r24, r4
    458a:	95 05       	cpc	r25, r5
    458c:	a6 05       	cpc	r26, r6
    458e:	b7 05       	cpc	r27, r7
    4590:	c9 f1       	breq	.+114    	; 0x4604 <nvm_flash_erase_and_write_buffer+0x108>
					LSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
				if (opt_address == (page_address+1)) {
    4592:	89 81       	ldd	r24, Y+1	; 0x01
    4594:	9a 81       	ldd	r25, Y+2	; 0x02
    4596:	ab 81       	ldd	r26, Y+3	; 0x03
    4598:	bc 81       	ldd	r27, Y+4	; 0x04
    459a:	ac 01       	movw	r20, r24
    459c:	bd 01       	movw	r22, r26
    459e:	4f 5f       	subi	r20, 0xFF	; 255
    45a0:	5f 4f       	sbci	r21, 0xFF	; 255
    45a2:	6f 4f       	sbci	r22, 0xFF	; 255
    45a4:	7f 4f       	sbci	r23, 0xFF	; 255
    45a6:	44 15       	cp	r20, r4
    45a8:	55 05       	cpc	r21, r5
    45aa:	66 05       	cpc	r22, r6
    45ac:	77 05       	cpc	r23, r7
    45ae:	d9 f0       	breq	.+54     	; 0x45e6 <nvm_flash_erase_and_write_buffer+0xea>
					MSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    45b0:	4d 81       	ldd	r20, Y+5	; 0x05
    45b2:	5e 81       	ldd	r21, Y+6	; 0x06
    45b4:	69 81       	ldd	r22, Y+1	; 0x01
    45b6:	7a 81       	ldd	r23, Y+2	; 0x02
    45b8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ba:	9c 81       	ldd	r25, Y+4	; 0x04
    45bc:	0f 94 0f 00 	call	0x2001e	; 0x2001e <nvm_flash_load_word_to_buffer>
			page_address+=2;
    45c0:	89 81       	ldd	r24, Y+1	; 0x01
    45c2:	9a 81       	ldd	r25, Y+2	; 0x02
    45c4:	ab 81       	ldd	r26, Y+3	; 0x03
    45c6:	bc 81       	ldd	r27, Y+4	; 0x04
    45c8:	02 96       	adiw	r24, 0x02	; 2
    45ca:	a1 1d       	adc	r26, r1
    45cc:	b1 1d       	adc	r27, r1
    45ce:	89 83       	std	Y+1, r24	; 0x01
    45d0:	9a 83       	std	Y+2, r25	; 0x02
    45d2:	ab 83       	std	Y+3, r26	; 0x03
    45d4:	bc 83       	std	Y+4, r27	; 0x04
    45d6:	01 50       	subi	r16, 0x01	; 1
    45d8:	11 09       	sbc	r17, r1
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    45da:	29 f1       	breq	.+74     	; 0x4626 <nvm_flash_erase_and_write_buffer+0x12a>
			if (b_blank_check) {
    45dc:	91 10       	cpse	r9, r1
    45de:	bd cf       	rjmp	.-134    	; 0x455a <nvm_flash_erase_and_write_buffer+0x5e>
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    45e0:	ad 82       	std	Y+5, r10	; 0x05
    45e2:	be 82       	std	Y+6, r11	; 0x06
    45e4:	ca cf       	rjmp	.-108    	; 0x457a <nvm_flash_erase_and_write_buffer+0x7e>
			}
			if (len) {
				if (opt_address == (page_address+1)) {
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    45e6:	f1 e0       	ldi	r31, 0x01	; 1
    45e8:	ef 1a       	sub	r14, r31
    45ea:	f1 08       	sbc	r15, r1
					opt_address++;
    45ec:	2c 01       	movw	r4, r24
    45ee:	3d 01       	movw	r6, r26
    45f0:	22 e0       	ldi	r18, 0x02	; 2
    45f2:	42 0e       	add	r4, r18
    45f4:	51 1c       	adc	r5, r1
    45f6:	61 1c       	adc	r6, r1
    45f8:	71 1c       	adc	r7, r1
					MSB(w_value)=*(uint8_t*)buf;
    45fa:	f6 01       	movw	r30, r12
    45fc:	81 91       	ld	r24, Z+
    45fe:	6f 01       	movw	r12, r30
    4600:	8e 83       	std	Y+6, r24	; 0x06
    4602:	d6 cf       	rjmp	.-84     	; 0x45b0 <nvm_flash_erase_and_write_buffer+0xb4>
			// Update flash buffer
			if (len) {
				if (opt_address == page_address) {
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    4604:	81 e0       	ldi	r24, 0x01	; 1
    4606:	e8 1a       	sub	r14, r24
    4608:	f1 08       	sbc	r15, r1
					opt_address++;
    460a:	ef ef       	ldi	r30, 0xFF	; 255
    460c:	4e 1a       	sub	r4, r30
    460e:	5e 0a       	sbc	r5, r30
    4610:	6e 0a       	sbc	r6, r30
    4612:	7e 0a       	sbc	r7, r30
					LSB(w_value)=*(uint8_t*)buf;
    4614:	f6 01       	movw	r30, r12
    4616:	81 91       	ld	r24, Z+
    4618:	6f 01       	movw	r12, r30
    461a:	8d 83       	std	Y+5, r24	; 0x05
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    461c:	e1 14       	cp	r14, r1
    461e:	f1 04       	cpc	r15, r1
    4620:	09 f0       	breq	.+2      	; 0x4624 <nvm_flash_erase_and_write_buffer+0x128>
    4622:	b7 cf       	rjmp	.-146    	; 0x4592 <nvm_flash_erase_and_write_buffer+0x96>
    4624:	c5 cf       	rjmp	.-118    	; 0x45b0 <nvm_flash_erase_and_write_buffer+0xb4>
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
    4626:	09 81       	ldd	r16, Y+1	; 0x01
    4628:	1a 81       	ldd	r17, Y+2	; 0x02
    462a:	2b 81       	ldd	r18, Y+3	; 0x03
    462c:	3c 81       	ldd	r19, Y+4	; 0x04
    462e:	c9 01       	movw	r24, r18
    4630:	b8 01       	movw	r22, r16
    4632:	72 50       	subi	r23, 0x02	; 2
    4634:	81 09       	sbc	r24, r1
    4636:	91 09       	sbc	r25, r1
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    4638:	88 20       	and	r8, r8
    463a:	19 f1       	breq	.+70     	; 0x4682 <nvm_flash_erase_and_write_buffer+0x186>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    463c:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    4640:	27 fd       	sbrc	r18, 7
    4642:	fc cf       	rjmp	.-8      	; 0x463c <nvm_flash_erase_and_write_buffer+0x140>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    4644:	45 e2       	ldi	r20, 0x25	; 37
    4646:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    464a:	e1 14       	cp	r14, r1
    464c:	f1 04       	cpc	r15, r1
    464e:	09 f0       	breq	.+2      	; 0x4652 <nvm_flash_erase_and_write_buffer+0x156>
    4650:	7c cf       	rjmp	.-264    	; 0x454a <nvm_flash_erase_and_write_buffer+0x4e>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
	printf("End of NVM eraseWrite.\r\n");
    4652:	8d e3       	ldi	r24, 0x3D	; 61
    4654:	91 e2       	ldi	r25, 0x21	; 33
    4656:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
    465a:	26 96       	adiw	r28, 0x06	; 6
    465c:	cd bf       	out	0x3d, r28	; 61
    465e:	de bf       	out	0x3e, r29	; 62
    4660:	df 91       	pop	r29
    4662:	cf 91       	pop	r28
    4664:	1f 91       	pop	r17
    4666:	0f 91       	pop	r16
    4668:	ff 90       	pop	r15
    466a:	ef 90       	pop	r14
    466c:	df 90       	pop	r13
    466e:	cf 90       	pop	r12
    4670:	bf 90       	pop	r11
    4672:	af 90       	pop	r10
    4674:	9f 90       	pop	r9
    4676:	8f 90       	pop	r8
    4678:	7f 90       	pop	r7
    467a:	6f 90       	pop	r6
    467c:	5f 90       	pop	r5
    467e:	4f 90       	pop	r4
    4680:	08 95       	ret
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    4682:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    4686:	27 fd       	sbrc	r18, 7
    4688:	fc cf       	rjmp	.-8      	; 0x4682 <nvm_flash_erase_and_write_buffer+0x186>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    468a:	44 e2       	ldi	r20, 0x24	; 36
    468c:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    4690:	e1 14       	cp	r14, r1
    4692:	f1 04       	cpc	r15, r1
    4694:	09 f0       	breq	.+2      	; 0x4698 <nvm_flash_erase_and_write_buffer+0x19c>
    4696:	59 cf       	rjmp	.-334    	; 0x454a <nvm_flash_erase_and_write_buffer+0x4e>
    4698:	dc cf       	rjmp	.-72     	; 0x4652 <nvm_flash_erase_and_write_buffer+0x156>

0000469a <pc_comm_putchar>:
				
	serial_in_index = temp_index;
}

static int pc_comm_putchar(char c, FILE *stream __attribute__ ((unused))){
	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
    469a:	90 91 b1 09 	lds	r25, 0x09B1	; 0x8009b1 <__TEXT_REGION_LENGTH__+0x7009b1>
    469e:	95 ff       	sbrs	r25, 5
    46a0:	fc cf       	rjmp	.-8      	; 0x469a <pc_comm_putchar>
	PC_USART.DATA = c;
    46a2:	80 93 b0 09 	sts	0x09B0, r24	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	return 1;
}
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	08 95       	ret

000046ac <pcCommInit>:
static int pc_comm_putchar(char c, FILE *stream);
static void handle_up_arrow(void);
static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);

void pcCommInit(){
	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
    46ac:	e0 e6       	ldi	r30, 0x60	; 96
    46ae:	f6 e0       	ldi	r31, 0x06	; 6
    46b0:	80 e8       	ldi	r24, 0x80	; 128
    46b2:	81 83       	std	Z+1, r24	; 0x01
	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
    46b4:	80 e4       	ldi	r24, 0x40	; 64
    46b6:	82 83       	std	Z+2, r24	; 0x02

	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
    46b8:	e0 eb       	ldi	r30, 0xB0	; 176
    46ba:	f9 e0       	ldi	r31, 0x09	; 9
    46bc:	83 e0       	ldi	r24, 0x03	; 3
    46be:	85 83       	std	Z+5, r24	; 0x05

	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
    46c0:	87 e1       	ldi	r24, 0x17	; 23
    46c2:	86 83       	std	Z+6, r24	; 0x06
	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
    46c4:	84 ea       	ldi	r24, 0xA4	; 164
    46c6:	87 83       	std	Z+7, r24	; 0x07

	PC_USART.CTRLB |= USART_RXEN_bm;
    46c8:	84 81       	ldd	r24, Z+4	; 0x04
    46ca:	80 61       	ori	r24, 0x10	; 16
    46cc:	84 83       	std	Z+4, r24	; 0x04
	PC_USART.CTRLB |= USART_TXEN_bm;
    46ce:	84 81       	ldd	r24, Z+4	; 0x04
    46d0:	88 60       	ori	r24, 0x08	; 8
    46d2:	84 83       	std	Z+4, r24	; 0x04

	stdout = &mystdout;
    46d4:	82 e1       	ldi	r24, 0x12	; 18
    46d6:	90 e2       	ldi	r25, 0x20	; 32
    46d8:	80 93 95 26 	sts	0x2695, r24	; 0x802695 <__iob+0x2>
    46dc:	90 93 96 26 	sts	0x2696, r25	; 0x802696 <__iob+0x3>
	serial_in_index = 0;
    46e0:	10 92 45 23 	sts	0x2345, r1	; 0x802345 <serial_in_index>
    46e4:	10 92 46 23 	sts	0x2346, r1	; 0x802346 <serial_in_index+0x1>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
    46e8:	80 e2       	ldi	r24, 0x20	; 32
    46ea:	83 83       	std	Z+3, r24	; 0x03
	printf("\n");
    46ec:	8a e0       	ldi	r24, 0x0A	; 10
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	0c 94 a1 50 	jmp	0xa142	; 0xa142 <putchar>

000046f4 <__vector_91>:
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    46f4:	1f 92       	push	r1
    46f6:	0f 92       	push	r0
    46f8:	0f b6       	in	r0, 0x3f	; 63
    46fa:	0f 92       	push	r0
    46fc:	11 24       	eor	r1, r1
    46fe:	0b b6       	in	r0, 0x3b	; 59
    4700:	0f 92       	push	r0
    4702:	2f 93       	push	r18
    4704:	3f 93       	push	r19
    4706:	4f 93       	push	r20
    4708:	5f 93       	push	r21
    470a:	6f 93       	push	r22
    470c:	7f 93       	push	r23
    470e:	8f 93       	push	r24
    4710:	9f 93       	push	r25
    4712:	af 93       	push	r26
    4714:	bf 93       	push	r27
    4716:	cf 93       	push	r28
    4718:	ef 93       	push	r30
    471a:	ff 93       	push	r31

static void handle_serial_input(void){
	char data = PC_USART.DATA;
    471c:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	if(escaped_arrow==1){
    4720:	90 91 47 23 	lds	r25, 0x2347	; 0x802347 <escaped_arrow>
    4724:	91 30       	cpi	r25, 0x01	; 1
    4726:	09 f4       	brne	.+2      	; 0x472a <__vector_91+0x36>
    4728:	47 c0       	rjmp	.+142    	; 0x47b8 <__vector_91+0xc4>
		if(data == 65){
			handle_up_arrow();
		}
		escaped_arrow=0;
	}else if(escaped){
    472a:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <escaped>
    472e:	91 11       	cpse	r25, r1
    4730:	28 c0       	rjmp	.+80     	; 0x4782 <__vector_91+0x8e>
		if(data == 91){
			escaped_arrow=1;	
		}
		escaped=0;
	}else if(data == '\r' || data == '\n'){ //We got the newline character.
    4732:	8d 30       	cpi	r24, 0x0D	; 13
    4734:	09 f4       	brne	.+2      	; 0x4738 <__vector_91+0x44>
    4736:	59 c0       	rjmp	.+178    	; 0x47ea <__vector_91+0xf6>
    4738:	8a 30       	cpi	r24, 0x0A	; 10
    473a:	09 f4       	brne	.+2      	; 0x473e <__vector_91+0x4a>
    473c:	56 c0       	rjmp	.+172    	; 0x47ea <__vector_91+0xf6>
		printf("\r\n");
		serial_in_buffer[serial_in_index]='\0';
		handleSerialCommand(serial_in_buffer,serial_in_index);
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
    473e:	88 30       	cpi	r24, 0x08	; 8
    4740:	09 f4       	brne	.+2      	; 0x4744 <__vector_91+0x50>
    4742:	3f c0       	rjmp	.+126    	; 0x47c2 <__vector_91+0xce>
		if(serial_in_index > 0) serial_in_index--;
		printf("\b \b");
	}else if(data == 27){ //escape pressed.
    4744:	8b 31       	cpi	r24, 0x1B	; 27
    4746:	09 f4       	brne	.+2      	; 0x474a <__vector_91+0x56>
    4748:	88 c0       	rjmp	.+272    	; 0x485a <__vector_91+0x166>
		escaped = 1;
	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
    474a:	20 91 45 23 	lds	r18, 0x2345	; 0x802345 <serial_in_index>
    474e:	30 91 46 23 	lds	r19, 0x2346	; 0x802346 <serial_in_index+0x1>
    4752:	20 34       	cpi	r18, 0x40	; 64
    4754:	31 05       	cpc	r19, r1
    4756:	09 f4       	brne	.+2      	; 0x475a <__vector_91+0x66>
    4758:	84 c0       	rjmp	.+264    	; 0x4862 <__vector_91+0x16e>
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFER_SIZE);
		serial_in_index = 0;
	}else{ //Everything is fine. Add the character to the buffer.
		serial_in_buffer[serial_in_index] = data;
    475a:	f9 01       	movw	r30, r18
    475c:	e7 5b       	subi	r30, 0xB7	; 183
    475e:	fc 4d       	sbci	r31, 0xDC	; 220
    4760:	80 83       	st	Z, r24
		//printf("Got char '%c'\r\n",data);
		serial_in_index++;
    4762:	2f 5f       	subi	r18, 0xFF	; 255
    4764:	3f 4f       	sbci	r19, 0xFF	; 255
    4766:	20 93 45 23 	sts	0x2345, r18	; 0x802345 <serial_in_index>
    476a:	30 93 46 23 	sts	0x2346, r19	; 0x802346 <serial_in_index+0x1>
		putchar(data);
    476e:	60 91 95 26 	lds	r22, 0x2695	; 0x802695 <__iob+0x2>
    4772:	70 91 96 26 	lds	r23, 0x2696	; 0x802696 <__iob+0x3>
    4776:	08 2e       	mov	r0, r24
    4778:	00 0c       	add	r0, r0
    477a:	99 0b       	sbc	r25, r25
    477c:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    4780:	07 c0       	rjmp	.+14     	; 0x4790 <__vector_91+0x9c>
		if(data == 65){
			handle_up_arrow();
		}
		escaped_arrow=0;
	}else if(escaped){
		if(data == 91){
    4782:	8b 35       	cpi	r24, 0x5B	; 91
    4784:	19 f4       	brne	.+6      	; 0x478c <__vector_91+0x98>
			escaped_arrow=1;	
    4786:	81 e0       	ldi	r24, 0x01	; 1
    4788:	80 93 47 23 	sts	0x2347, r24	; 0x802347 <escaped_arrow>
		}
		escaped=0;
    478c:	10 92 48 23 	sts	0x2348, r1	; 0x802348 <escaped>
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_MED_gc;
	printf("\n");
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    4790:	ff 91       	pop	r31
    4792:	ef 91       	pop	r30
    4794:	cf 91       	pop	r28
    4796:	bf 91       	pop	r27
    4798:	af 91       	pop	r26
    479a:	9f 91       	pop	r25
    479c:	8f 91       	pop	r24
    479e:	7f 91       	pop	r23
    47a0:	6f 91       	pop	r22
    47a2:	5f 91       	pop	r21
    47a4:	4f 91       	pop	r20
    47a6:	3f 91       	pop	r19
    47a8:	2f 91       	pop	r18
    47aa:	0f 90       	pop	r0
    47ac:	0b be       	out	0x3b, r0	; 59
    47ae:	0f 90       	pop	r0
    47b0:	0f be       	out	0x3f, r0	; 63
    47b2:	0f 90       	pop	r0
    47b4:	1f 90       	pop	r1
    47b6:	18 95       	reti

static void handle_serial_input(void){
	char data = PC_USART.DATA;
	if(escaped_arrow==1){
		if(data == 65){
    47b8:	81 34       	cpi	r24, 0x41	; 65
    47ba:	61 f1       	breq	.+88     	; 0x4814 <__vector_91+0x120>
			handle_up_arrow();
		}
		escaped_arrow=0;
    47bc:	10 92 47 23 	sts	0x2347, r1	; 0x802347 <escaped_arrow>
    47c0:	e7 cf       	rjmp	.-50     	; 0x4790 <__vector_91+0x9c>
		printf("\r\n");
		serial_in_buffer[serial_in_index]='\0';
		handleSerialCommand(serial_in_buffer,serial_in_index);
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
		if(serial_in_index > 0) serial_in_index--;
    47c2:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <serial_in_index>
    47c6:	90 91 46 23 	lds	r25, 0x2346	; 0x802346 <serial_in_index+0x1>
    47ca:	00 97       	sbiw	r24, 0x00	; 0
    47cc:	29 f0       	breq	.+10     	; 0x47d8 <__vector_91+0xe4>
    47ce:	01 97       	sbiw	r24, 0x01	; 1
    47d0:	80 93 45 23 	sts	0x2345, r24	; 0x802345 <serial_in_index>
    47d4:	90 93 46 23 	sts	0x2346, r25	; 0x802346 <serial_in_index+0x1>
		printf("\b \b");
    47d8:	85 e5       	ldi	r24, 0x55	; 85
    47da:	91 e2       	ldi	r25, 0x21	; 33
    47dc:	9f 93       	push	r25
    47de:	8f 93       	push	r24
    47e0:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	d3 cf       	rjmp	.-90     	; 0x4790 <__vector_91+0x9c>
		if(data == 91){
			escaped_arrow=1;	
		}
		escaped=0;
	}else if(data == '\r' || data == '\n'){ //We got the newline character.
		printf("\r\n");
    47ea:	8a ec       	ldi	r24, 0xCA	; 202
    47ec:	90 e2       	ldi	r25, 0x20	; 32
    47ee:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
		serial_in_buffer[serial_in_index]='\0';
    47f2:	60 91 45 23 	lds	r22, 0x2345	; 0x802345 <serial_in_index>
    47f6:	70 91 46 23 	lds	r23, 0x2346	; 0x802346 <serial_in_index+0x1>
    47fa:	fb 01       	movw	r30, r22
    47fc:	e7 5b       	subi	r30, 0xB7	; 183
    47fe:	fc 4d       	sbci	r31, 0xDC	; 220
    4800:	10 82       	st	Z, r1
		handleSerialCommand(serial_in_buffer,serial_in_index);
    4802:	89 e4       	ldi	r24, 0x49	; 73
    4804:	93 e2       	ldi	r25, 0x23	; 35
    4806:	0e 94 19 39 	call	0x7232	; 0x7232 <handleSerialCommand>
		serial_in_index = 0;
    480a:	10 92 45 23 	sts	0x2345, r1	; 0x802345 <serial_in_index>
    480e:	10 92 46 23 	sts	0x2346, r1	; 0x802346 <serial_in_index+0x1>
    4812:	be cf       	rjmp	.-132    	; 0x4790 <__vector_91+0x9c>
		putchar(data);
	}
}

static void handle_up_arrow(void){
	uint8_t temp_index = serial_in_index;
    4814:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <serial_in_index>
    4818:	90 91 46 23 	lds	r25, 0x2346	; 0x802346 <serial_in_index+0x1>
    481c:	c8 2f       	mov	r28, r24
			
	while(serial_in_buffer[temp_index] != '\0'){
    481e:	99 27       	eor	r25, r25
    4820:	fc 01       	movw	r30, r24
    4822:	e7 5b       	subi	r30, 0xB7	; 183
    4824:	fc 4d       	sbci	r31, 0xDC	; 220
    4826:	80 81       	ld	r24, Z
    4828:	88 23       	and	r24, r24
    482a:	69 f1       	breq	.+90     	; 0x4886 <__vector_91+0x192>
		putchar(serial_in_buffer[temp_index]);
    482c:	60 91 95 26 	lds	r22, 0x2695	; 0x802695 <__iob+0x2>
    4830:	70 91 96 26 	lds	r23, 0x2696	; 0x802696 <__iob+0x3>
    4834:	08 2e       	mov	r0, r24
    4836:	00 0c       	add	r0, r0
    4838:	99 0b       	sbc	r25, r25
    483a:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
		temp_index++;
    483e:	cf 5f       	subi	r28, 0xFF	; 255
}

static void handle_up_arrow(void){
	uint8_t temp_index = serial_in_index;
			
	while(serial_in_buffer[temp_index] != '\0'){
    4840:	2c 2f       	mov	r18, r28
    4842:	30 e0       	ldi	r19, 0x00	; 0
    4844:	f9 01       	movw	r30, r18
    4846:	e7 5b       	subi	r30, 0xB7	; 183
    4848:	fc 4d       	sbci	r31, 0xDC	; 220
    484a:	80 81       	ld	r24, Z
    484c:	81 11       	cpse	r24, r1
    484e:	ee cf       	rjmp	.-36     	; 0x482c <__vector_91+0x138>
		putchar(serial_in_buffer[temp_index]);
		temp_index++;
	}
				
	serial_in_index = temp_index;
    4850:	20 93 45 23 	sts	0x2345, r18	; 0x802345 <serial_in_index>
    4854:	30 93 46 23 	sts	0x2346, r19	; 0x802346 <serial_in_index+0x1>
    4858:	b1 cf       	rjmp	.-158    	; 0x47bc <__vector_91+0xc8>
		serial_in_index = 0;
	}else if(data == '\b'){ //We got the backspace character.
		if(serial_in_index > 0) serial_in_index--;
		printf("\b \b");
	}else if(data == 27){ //escape pressed.
		escaped = 1;
    485a:	81 e0       	ldi	r24, 0x01	; 1
    485c:	80 93 48 23 	sts	0x2348, r24	; 0x802348 <escaped>
    4860:	97 cf       	rjmp	.-210    	; 0x4790 <__vector_91+0x9c>
	}else if(serial_in_index==SRL_BUFFER_SIZE){ //Buffer overflow
		printf_P(PSTR("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n"),SRL_BUFFER_SIZE);
    4862:	1f 92       	push	r1
    4864:	80 e4       	ldi	r24, 0x40	; 64
    4866:	8f 93       	push	r24
    4868:	8f e2       	ldi	r24, 0x2F	; 47
    486a:	98 e0       	ldi	r25, 0x08	; 8
    486c:	9f 93       	push	r25
    486e:	8f 93       	push	r24
    4870:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
		serial_in_index = 0;
    4874:	10 92 45 23 	sts	0x2345, r1	; 0x802345 <serial_in_index>
    4878:	10 92 46 23 	sts	0x2346, r1	; 0x802346 <serial_in_index+0x1>
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	85 cf       	rjmp	.-246    	; 0x4790 <__vector_91+0x9c>
    4886:	2c 2f       	mov	r18, r28
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	e2 cf       	rjmp	.-60     	; 0x4850 <__vector_91+0x15c>

0000488c <powerInit>:
	legMonitorInit();
}

void capMonitorInit()
{
	PORTB.DIRCLR = PIN0_bm | PIN1_bm;
    488c:	83 e0       	ldi	r24, 0x03	; 3
    488e:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
	
	ACB.AC0CTRL = AC_ENABLE_bm;
    4892:	e0 e9       	ldi	r30, 0x90	; 144
    4894:	f3 e0       	ldi	r31, 0x03	; 3
    4896:	81 e0       	ldi	r24, 0x01	; 1
    4898:	80 83       	st	Z, r24
	ACB.AC1CTRL = AC_ENABLE_bm;
    489a:	81 83       	std	Z+1, r24	; 0x01
	
	ACB.AC0MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc; //Changed the muxneg from bandgap
    489c:	88 e0       	ldi	r24, 0x08	; 8
    489e:	82 83       	std	Z+2, r24	; 0x02
	ACB.AC1MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc;
    48a0:	83 83       	std	Z+3, r24	; 0x03
	
	ACB.WINCTRL = AC_WEN_bm;
    48a2:	90 e1       	ldi	r25, 0x10	; 16
    48a4:	96 83       	std	Z+6, r25	; 0x06
}

void legMonitorInit()
{
	PORTA.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm;
    48a6:	e0 e0       	ldi	r30, 0x00	; 0
    48a8:	f6 e0       	ldi	r31, 0x06	; 6
    48aa:	8f e1       	ldi	r24, 0x1F	; 31
    48ac:	82 83       	std	Z+2, r24	; 0x02
	
	PORTA.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    48ae:	87 e0       	ldi	r24, 0x07	; 7
    48b0:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    48b2:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    48b4:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    48b6:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    48b8:	84 8b       	std	Z+20, r24	; 0x14
	
	ACA.WINCTRL = AC_WEN_bm;					// Enable window mode
    48ba:	e0 e8       	ldi	r30, 0x80	; 128
    48bc:	f3 e0       	ldi	r31, 0x03	; 3
    48be:	96 83       	std	Z+6, r25	; 0x06
	
	ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc | AC_MUXPOS_PIN2_gc;	// PA0 is VREF_HI
    48c0:	92 83       	std	Z+2, r25	; 0x02
	ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc | AC_MUXPOS_PIN2_gc;	// PA1 is VREF_LO
    48c2:	81 e1       	ldi	r24, 0x11	; 17
    48c4:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.AC0CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    48c6:	89 e0       	ldi	r24, 0x09	; 9
    48c8:	80 83       	st	Z, r24
	ACA.AC1CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    48ca:	81 83       	std	Z+1, r24	; 0x01
    48cc:	08 95       	ret

000048ce <randomInit>:
    // Setting this bit will reset the AES crypto module to its initial status on the next positive edge of
    // the peripheral clock. All registers, pointers, and memories in the module are set to their initial
    // value. When written to one, the bit stays high for one clock cycle before it is reset to zero by
    // hardware. (p. 320)

	AES.CTRL = AES_RESET_bm;
    48ce:	80 e2       	ldi	r24, 0x20	; 32
    48d0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    // After encryption/decryption is done, the last subkey can be read sequentially, byte-by-byte,
    // through the KEY register.
    // Loading the initial data to the KEY register should be done after setting the appropriate AES
    // mode and direction. (p. 322)

	AES.KEY = PRODSIGNATURES_LOTNUM0;
    48d4:	88 b1       	in	r24, 0x08	; 8
    48d6:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM1;
    48da:	89 b1       	in	r24, 0x09	; 9
    48dc:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM2;
    48e0:	8a b1       	in	r24, 0x0a	; 10
    48e2:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM3;
    48e6:	8b b1       	in	r24, 0x0b	; 11
    48e8:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = PRODSIGNATURES_LOTNUM4;
    48ec:	8c b1       	in	r24, 0x0c	; 12
    48ee:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_LOTNUM5;
    48f2:	8d b1       	in	r24, 0x0d	; 13
    48f4:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_WAFNUM;
    48f8:	80 b3       	in	r24, 0x10	; 16
    48fa:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDX0;
    48fe:	82 b3       	in	r24, 0x12	; 18
    4900:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = PRODSIGNATURES_COORDX1;
    4904:	83 b3       	in	r24, 0x13	; 19
    4906:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDY0;
    490a:	84 b3       	in	r24, 0x14	; 20
    490c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = PRODSIGNATURES_COORDY1;
    4910:	85 b3       	in	r24, 0x15	; 21
    4912:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCA.CH0.RESL;
    4916:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    491a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	AES.KEY = ADCA.CH1.RESL;
    491e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    4922:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCA.CH2.RESL;
    4926:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    492a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCB.CH0.RESL;
    492e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    4932:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>
	AES.KEY = ADCB.CH1.RESL;
    4936:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    493a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <__TEXT_REGION_LENGTH__+0x7000c3>

	r_round = 1;
    493e:	81 e0       	ldi	r24, 0x01	; 1
    4940:	80 93 8b 23 	sts	0x238B, r24	; 0x80238b <r_round>
    4944:	80 e1       	ldi	r24, 0x10	; 16
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
		AES.STATE = r_round;
    4946:	91 e0       	ldi	r25, 0x01	; 1
    4948:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    494c:	81 50       	subi	r24, 0x01	; 1
    // After encryption/decryption is done, the ciphertext/plaintext can be read sequentially, byte-by-byte,
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
    494e:	e1 f7       	brne	.-8      	; 0x4948 <randomInit+0x7a>
    // Setting this bit starts the encryption/decryption procedure, and this bit remains set while the
    // encryption/decryption is ongoing. Writing this bit to zero will stop/abort any ongoing encryption/
    // decryption process. This bit is automatically cleared if the SRIF or the ERROR flags in
    // STATUS are set. (p. 320)

	AES.CTRL = AES_START_bm | AES_XOR_bm;
    4950:	84 e8       	ldi	r24, 0x84	; 132
    4952:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>

	r_position = 0;
    4956:	10 92 8a 23 	sts	0x238A, r1	; 0x80238a <r_position>
	randNormHasSaved = 0;
    495a:	10 92 89 23 	sts	0x2389, r1	; 0x802389 <randNormHasSaved>
    495e:	08 95       	ret

00004960 <randByte>:
}

uint8_t randByte(){
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    4960:	90 91 8a 23 	lds	r25, 0x238A	; 0x80238a <r_position>
    4964:	99 23       	and	r25, r25
    4966:	a1 f0       	breq	.+40     	; 0x4990 <randByte+0x30>
	r = AES.STATE;
    4968:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    496c:	9f 5f       	subi	r25, 0xFF	; 255
    496e:	90 93 8a 23 	sts	0x238A, r25	; 0x80238a <r_position>
	if (r_position > 15){
    4972:	90 31       	cpi	r25, 0x10	; 16
    4974:	b0 f0       	brcs	.+44     	; 0x49a2 <randByte+0x42>
    4976:	20 91 8b 23 	lds	r18, 0x238B	; 0x80238b <r_round>
    497a:	90 e1       	ldi	r25, 0x10	; 16
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
    497c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    4980:	91 50       	subi	r25, 0x01	; 1
    4982:	e1 f7       	brne	.-8      	; 0x497c <randByte+0x1c>
		AES.CTRL = AES_START_bm | AES_XOR_bm;
    4984:	94 e8       	ldi	r25, 0x84	; 132
    4986:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
		r_position = 0;
    498a:	10 92 8a 23 	sts	0x238A, r1	; 0x80238a <r_position>
    498e:	08 95       	ret
	randNormHasSaved = 0;
}

uint8_t randByte(){
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    4990:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    4994:	80 ff       	sbrs	r24, 0
    4996:	fc cf       	rjmp	.-8      	; 0x4990 <randByte+0x30>
	r = AES.STATE;
    4998:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	r_position++;
    499c:	91 e0       	ldi	r25, 0x01	; 1
    499e:	90 93 8a 23 	sts	0x238A, r25	; 0x80238a <r_position>
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
		AES.CTRL = AES_START_bm | AES_XOR_bm;
		r_position = 0;
	}
	return r;
}
    49a2:	08 95       	ret

000049a4 <randShort>:

uint16_t randShort(){
    49a4:	cf 93       	push	r28
	return ((uint16_t)randByte()<<8)|((uint16_t)randByte());
    49a6:	0e 94 b0 24 	call	0x4960	; 0x4960 <randByte>
    49aa:	c8 2f       	mov	r28, r24
    49ac:	0e 94 b0 24 	call	0x4960	; 0x4960 <randByte>
    49b0:	2c 2f       	mov	r18, r28
    49b2:	30 e0       	ldi	r19, 0x00	; 0
    49b4:	32 2f       	mov	r19, r18
    49b6:	22 27       	eor	r18, r18
}
    49b8:	a9 01       	movw	r20, r18
    49ba:	48 2b       	or	r20, r24
    49bc:	ca 01       	movw	r24, r20
    49be:	cf 91       	pop	r28
    49c0:	08 95       	ret

000049c2 <magicRangeFunc>:
	}
	setAllirPowers(prevPower);
}


static float magicRangeFunc(float a){
    49c2:	cf 92       	push	r12
    49c4:	df 92       	push	r13
    49c6:	ef 92       	push	r14
    49c8:	ff 92       	push	r15
    49ca:	6b 01       	movw	r12, r22
    49cc:	7c 01       	movw	r14, r24
	if(a<=0){
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	a9 01       	movw	r20, r18
    49d4:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__cmpsf2>
    49d8:	18 16       	cp	r1, r24
    49da:	7c f5       	brge	.+94     	; 0x4a3a <magicRangeFunc+0x78>
		return NAN;
		}else{
		float result = -24.3675811184*(0.0259969683 + powf(a, -0.5));
    49dc:	20 e0       	ldi	r18, 0x00	; 0
    49de:	30 e0       	ldi	r19, 0x00	; 0
    49e0:	40 e0       	ldi	r20, 0x00	; 0
    49e2:	5f eb       	ldi	r21, 0xBF	; 191
    49e4:	c7 01       	movw	r24, r14
    49e6:	b6 01       	movw	r22, r12
    49e8:	0e 94 31 4b 	call	0x9662	; 0x9662 <pow>
		result = 1 + exp(result);
    49ec:	28 e9       	ldi	r18, 0x98	; 152
    49ee:	37 ef       	ldi	r19, 0xF7	; 247
    49f0:	44 ed       	ldi	r20, 0xD4	; 212
    49f2:	5c e3       	ldi	r21, 0x3C	; 60
    49f4:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    49f8:	2e ec       	ldi	r18, 0xCE	; 206
    49fa:	30 ef       	ldi	r19, 0xF0	; 240
    49fc:	42 ec       	ldi	r20, 0xC2	; 194
    49fe:	51 ec       	ldi	r21, 0xC1	; 193
    4a00:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4a04:	0e 94 17 48 	call	0x902e	; 0x902e <exp>
		result = (778.0270114700/result) - 528.0270114700;
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	40 e8       	ldi	r20, 0x80	; 128
    4a0e:	5f e3       	ldi	r21, 0x3F	; 63
    4a10:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    4a14:	9b 01       	movw	r18, r22
    4a16:	ac 01       	movw	r20, r24
    4a18:	6b eb       	ldi	r22, 0xBB	; 187
    4a1a:	71 e8       	ldi	r23, 0x81	; 129
    4a1c:	82 e4       	ldi	r24, 0x42	; 66
    4a1e:	94 e4       	ldi	r25, 0x44	; 68
    4a20:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    4a24:	2b eb       	ldi	r18, 0xBB	; 187
    4a26:	31 e0       	ldi	r19, 0x01	; 1
    4a28:	44 e0       	ldi	r20, 0x04	; 4
    4a2a:	54 e4       	ldi	r21, 0x44	; 68
    4a2c:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
		return result;
	}
}
    4a30:	ff 90       	pop	r15
    4a32:	ef 90       	pop	r14
    4a34:	df 90       	pop	r13
    4a36:	cf 90       	pop	r12
    4a38:	08 95       	ret
}


static float magicRangeFunc(float a){
	if(a<=0){
		return NAN;
    4a3a:	60 e0       	ldi	r22, 0x00	; 0
    4a3c:	70 e0       	ldi	r23, 0x00	; 0
    4a3e:	80 ec       	ldi	r24, 0xC0	; 192
    4a40:	9f e7       	ldi	r25, 0x7F	; 127
		float result = -24.3675811184*(0.0259969683 + powf(a, -0.5));
		result = 1 + exp(result);
		result = (778.0270114700/result) - 528.0270114700;
		return result;
	}
}
    4a42:	ff 90       	pop	r15
    4a44:	ef 90       	pop	r14
    4a46:	df 90       	pop	r13
    4a48:	cf 90       	pop	r12
    4a4a:	08 95       	ret

00004a4c <rangeAlgsInit>:
//static float invMagicRangeFunc(float r);

//static void print_brightMeas(void);
												
void rangeAlgsInit(){
	sensorHealthHistory = 0;
    4a4c:	10 92 d4 23 	sts	0x23D4, r1	; 0x8023d4 <sensorHealthHistory>
    4a50:	10 92 d5 23 	sts	0x23D5, r1	; 0x8023d5 <sensorHealthHistory+0x1>
    4a54:	10 92 d6 23 	sts	0x23D6, r1	; 0x8023d6 <sensorHealthHistory+0x2>
    4a58:	10 92 d7 23 	sts	0x23D7, r1	; 0x8023d7 <sensorHealthHistory+0x3>
    4a5c:	ec e8       	ldi	r30, 0x8C	; 140
    4a5e:	f3 e2       	ldi	r31, 0x23	; 35
    4a60:	84 ed       	ldi	r24, 0xD4	; 212
    4a62:	93 e2       	ldi	r25, 0x23	; 35
	for(uint8_t i=0 ; i<6 ;i++){
		for(uint8_t j=0 ; j<6 ; j++){
			brightMeas[i][j] = 0;
    4a64:	10 82       	st	Z, r1
    4a66:	11 82       	std	Z+1, r1	; 0x01
    4a68:	12 82       	std	Z+2, r1	; 0x02
    4a6a:	13 82       	std	Z+3, r1	; 0x03
    4a6c:	14 82       	std	Z+4, r1	; 0x04
    4a6e:	15 82       	std	Z+5, r1	; 0x05
    4a70:	16 82       	std	Z+6, r1	; 0x06
    4a72:	17 82       	std	Z+7, r1	; 0x07
    4a74:	10 86       	std	Z+8, r1	; 0x08
    4a76:	11 86       	std	Z+9, r1	; 0x09
    4a78:	12 86       	std	Z+10, r1	; 0x0a
    4a7a:	13 86       	std	Z+11, r1	; 0x0b
    4a7c:	3c 96       	adiw	r30, 0x0c	; 12

//static void print_brightMeas(void);
												
void rangeAlgsInit(){
	sensorHealthHistory = 0;
	for(uint8_t i=0 ; i<6 ;i++){
    4a7e:	8e 17       	cp	r24, r30
    4a80:	9f 07       	cpc	r25, r31
    4a82:	81 f7       	brne	.-32     	; 0x4a64 <rangeAlgsInit+0x18>
		for(uint8_t j=0 ; j<6 ; j++){
			brightMeas[i][j] = 0;
		}
	}
	rnbCmdID=0;
    4a84:	10 92 7d 26 	sts	0x267D, r1	; 0x80267d <rnbCmdID>
    4a88:	10 92 7e 26 	sts	0x267E, r1	; 0x80267e <rnbCmdID+0x1>
	processing_rnb_flag=0;
    4a8c:	10 92 f5 24 	sts	0x24F5, r1	; 0x8024f5 <processing_rnb_flag>
    4a90:	08 95       	ret

00004a92 <calculate_range>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		processing_rnb_flag=0;
	}
}

float calculate_range(float iRange, float bearing, float heading){
    4a92:	2f 92       	push	r2
    4a94:	3f 92       	push	r3
    4a96:	4f 92       	push	r4
    4a98:	5f 92       	push	r5
    4a9a:	6f 92       	push	r6
    4a9c:	7f 92       	push	r7
    4a9e:	8f 92       	push	r8
    4aa0:	9f 92       	push	r9
    4aa2:	af 92       	push	r10
    4aa4:	bf 92       	push	r11
    4aa6:	cf 92       	push	r12
    4aa8:	df 92       	push	r13
    4aaa:	ef 92       	push	r14
    4aac:	ff 92       	push	r15
    4aae:	0f 93       	push	r16
    4ab0:	1f 93       	push	r17
    4ab2:	cf 93       	push	r28
    4ab4:	df 93       	push	r29
    4ab6:	cd b7       	in	r28, 0x3d	; 61
    4ab8:	de b7       	in	r29, 0x3e	; 62
    4aba:	cc 54       	subi	r28, 0x4C	; 76
    4abc:	d1 09       	sbc	r29, r1
    4abe:	cd bf       	out	0x3d, r28	; 61
    4ac0:	de bf       	out	0x3e, r29	; 62
    4ac2:	4b 01       	movw	r8, r22
    4ac4:	5c 01       	movw	r10, r24
    4ac6:	29 01       	movw	r4, r18
    4ac8:	3a 01       	movw	r6, r20
    4aca:	67 01       	movw	r12, r14
    4acc:	78 01       	movw	r14, r16
	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
    4ace:	ca 01       	movw	r24, r20
    4ad0:	b9 01       	movw	r22, r18
    4ad2:	0e 94 81 4b 	call	0x9702	; 0x9702 <sin>
    4ad6:	9b 01       	movw	r18, r22
    4ad8:	ac 01       	movw	r20, r24
    4ada:	c5 01       	movw	r24, r10
    4adc:	b4 01       	movw	r22, r8
    4ade:	90 58       	subi	r25, 0x80	; 128
    4ae0:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4ae4:	29 96       	adiw	r28, 0x09	; 9
    4ae6:	6c af       	std	Y+60, r22	; 0x3c
    4ae8:	7d af       	std	Y+61, r23	; 0x3d
    4aea:	8e af       	std	Y+62, r24	; 0x3e
    4aec:	9f af       	std	Y+63, r25	; 0x3f
    4aee:	29 97       	sbiw	r28, 0x09	; 9
    4af0:	c3 01       	movw	r24, r6
    4af2:	b2 01       	movw	r22, r4
    4af4:	0e 94 98 47 	call	0x8f30	; 0x8f30 <cos>
    4af8:	9b 01       	movw	r18, r22
    4afa:	ac 01       	movw	r20, r24
    4afc:	c5 01       	movw	r24, r10
    4afe:	b4 01       	movw	r22, r8
    4b00:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4b04:	2d 96       	adiw	r28, 0x0d	; 13
    4b06:	6c af       	std	Y+60, r22	; 0x3c
    4b08:	7d af       	std	Y+61, r23	; 0x3d
    4b0a:	8e af       	std	Y+62, r24	; 0x3e
    4b0c:	9f af       	std	Y+63, r25	; 0x3f
    4b0e:	2d 97       	sbiw	r28, 0x0d	; 13
    4b10:	c7 01       	movw	r24, r14
    4b12:	b6 01       	movw	r22, r12
    4b14:	0e 94 98 47 	call	0x8f30	; 0x8f30 <cos>
    4b18:	4b 01       	movw	r8, r22
    4b1a:	5c 01       	movw	r10, r24
    4b1c:	c7 01       	movw	r24, r14
    4b1e:	b6 01       	movw	r22, r12
    4b20:	0e 94 81 4b 	call	0x9702	; 0x9702 <sin>
    4b24:	6b ab       	std	Y+51, r22	; 0x33
    4b26:	7c ab       	std	Y+52, r23	; 0x34
    4b28:	8d ab       	std	Y+53, r24	; 0x35
    4b2a:	9e ab       	std	Y+54, r25	; 0x36
    4b2c:	8e 01       	movw	r16, r28
    4b2e:	0f 5f       	subi	r16, 0xFF	; 255
    4b30:	1f 4f       	sbci	r17, 0xFF	; 255
    4b32:	39 e8       	ldi	r19, 0x89	; 137
    4b34:	23 2e       	mov	r2, r19
    4b36:	31 e2       	ldi	r19, 0x21	; 33
    4b38:	33 2e       	mov	r3, r19
    4b3a:	ce 01       	movw	r24, r28
    4b3c:	c1 96       	adiw	r24, 0x31	; 49
    4b3e:	89 ab       	std	Y+49, r24	; 0x31
    4b40:	9a ab       	std	Y+50, r25	; 0x32
    4b42:	44 ea       	ldi	r20, 0xA4	; 164
    4b44:	44 2e       	mov	r4, r20
    4b46:	4b e6       	ldi	r20, 0x6B	; 107
    4b48:	54 2e       	mov	r5, r20
    4b4a:	48 e9       	ldi	r20, 0x98	; 152
    4b4c:	64 2e       	mov	r6, r20
    4b4e:	41 e4       	ldi	r20, 0x41	; 65
    4b50:	74 2e       	mov	r7, r20
    4b52:	c1 2c       	mov	r12, r1
    4b54:	d1 2c       	mov	r13, r1
    4b56:	50 e3       	ldi	r21, 0x30	; 48
    4b58:	e5 2e       	mov	r14, r21
    4b5a:	51 e4       	ldi	r21, 0x41	; 65
    4b5c:	f5 2e       	mov	r15, r21
    4b5e:	0c c0       	rjmp	.+24     	; 0x4b78 <calculate_range+0xe6>
    4b60:	d1 01       	movw	r26, r2
    4b62:	cd 90       	ld	r12, X+
    4b64:	dd 90       	ld	r13, X+
    4b66:	ed 90       	ld	r14, X+
    4b68:	fc 90       	ld	r15, X
    4b6a:	13 97       	sbiw	r26, 0x03	; 3
    4b6c:	14 96       	adiw	r26, 0x04	; 4
    4b6e:	4d 90       	ld	r4, X+
    4b70:	5d 90       	ld	r5, X+
    4b72:	6d 90       	ld	r6, X+
    4b74:	7c 90       	ld	r7, X
    4b76:	17 97       	sbiw	r26, 0x07	; 7
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
		txHats[i][0] = hats[i][0]*cos(heading) - hats[i][1]*sin(heading);
    4b78:	a5 01       	movw	r20, r10
    4b7a:	94 01       	movw	r18, r8
    4b7c:	c7 01       	movw	r24, r14
    4b7e:	b6 01       	movw	r22, r12
    4b80:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4b84:	6f ab       	std	Y+55, r22	; 0x37
    4b86:	78 af       	std	Y+56, r23	; 0x38
    4b88:	89 af       	std	Y+57, r24	; 0x39
    4b8a:	9a af       	std	Y+58, r25	; 0x3a
    4b8c:	2b a9       	ldd	r18, Y+51	; 0x33
    4b8e:	3c a9       	ldd	r19, Y+52	; 0x34
    4b90:	4d a9       	ldd	r20, Y+53	; 0x35
    4b92:	5e a9       	ldd	r21, Y+54	; 0x36
    4b94:	c3 01       	movw	r24, r6
    4b96:	b2 01       	movw	r22, r4
    4b98:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4b9c:	9b 01       	movw	r18, r22
    4b9e:	ac 01       	movw	r20, r24
    4ba0:	6f a9       	ldd	r22, Y+55	; 0x37
    4ba2:	78 ad       	ldd	r23, Y+56	; 0x38
    4ba4:	89 ad       	ldd	r24, Y+57	; 0x39
    4ba6:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ba8:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    4bac:	d8 01       	movw	r26, r16
    4bae:	6d 93       	st	X+, r22
    4bb0:	7d 93       	st	X+, r23
    4bb2:	8d 93       	st	X+, r24
    4bb4:	9c 93       	st	X, r25
    4bb6:	13 97       	sbiw	r26, 0x03	; 3
		txHats[i][1] = hats[i][0]*sin(heading) + hats[i][1]*cos(heading);
    4bb8:	2b a9       	ldd	r18, Y+51	; 0x33
    4bba:	3c a9       	ldd	r19, Y+52	; 0x34
    4bbc:	4d a9       	ldd	r20, Y+53	; 0x35
    4bbe:	5e a9       	ldd	r21, Y+54	; 0x36
    4bc0:	c7 01       	movw	r24, r14
    4bc2:	b6 01       	movw	r22, r12
    4bc4:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4bc8:	6b 01       	movw	r12, r22
    4bca:	7c 01       	movw	r14, r24
    4bcc:	a3 01       	movw	r20, r6
    4bce:	92 01       	movw	r18, r4
    4bd0:	c5 01       	movw	r24, r10
    4bd2:	b4 01       	movw	r22, r8
    4bd4:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4bd8:	9b 01       	movw	r18, r22
    4bda:	ac 01       	movw	r20, r24
    4bdc:	c7 01       	movw	r24, r14
    4bde:	b6 01       	movw	r22, r12
    4be0:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    4be4:	f8 01       	movw	r30, r16
    4be6:	64 83       	std	Z+4, r22	; 0x04
    4be8:	75 83       	std	Z+5, r23	; 0x05
    4bea:	86 83       	std	Z+6, r24	; 0x06
    4bec:	97 83       	std	Z+7, r25	; 0x07
    4bee:	08 5f       	subi	r16, 0xF8	; 248
    4bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf2:	f8 e0       	ldi	r31, 0x08	; 8
    4bf4:	2f 0e       	add	r2, r31
    4bf6:	31 1c       	adc	r3, r1
}

float calculate_range(float iRange, float bearing, float heading){
	float bigR[2] = {-iRange*sin(bearing), iRange*cos(bearing)};
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
    4bf8:	89 a9       	ldd	r24, Y+49	; 0x31
    4bfa:	9a a9       	ldd	r25, Y+50	; 0x32
    4bfc:	08 17       	cp	r16, r24
    4bfe:	19 07       	cpc	r17, r25
    4c00:	09 f0       	breq	.+2      	; 0x4c04 <calculate_range+0x172>
    4c02:	ae cf       	rjmp	.-164    	; 0x4b60 <calculate_range+0xce>
    4c04:	ac e8       	ldi	r26, 0x8C	; 140
    4c06:	b3 e2       	ldi	r27, 0x23	; 35
    4c08:	25 96       	adiw	r28, 0x05	; 5
    4c0a:	ae af       	std	Y+62, r26	; 0x3e
    4c0c:	bf af       	std	Y+63, r27	; 0x3f
    4c0e:	25 97       	sbiw	r28, 0x05	; 5
    4c10:	84 ea       	ldi	r24, 0xA4	; 164
    4c12:	9b e6       	ldi	r25, 0x6B	; 107
    4c14:	a8 e9       	ldi	r26, 0x98	; 152
    4c16:	b1 e4       	ldi	r27, 0x41	; 65
    4c18:	8b af       	std	Y+59, r24	; 0x3b
    4c1a:	9c af       	std	Y+60, r25	; 0x3c
    4c1c:	ad af       	std	Y+61, r26	; 0x3d
    4c1e:	be af       	std	Y+62, r27	; 0x3e
    4c20:	41 2c       	mov	r4, r1
    4c22:	51 2c       	mov	r5, r1
    4c24:	90 e3       	ldi	r25, 0x30	; 48
    4c26:	69 2e       	mov	r6, r25
    4c28:	91 e4       	ldi	r25, 0x41	; 65
    4c2a:	79 2e       	mov	r7, r25
    4c2c:	31 2c       	mov	r3, r1
    4c2e:	23 96       	adiw	r28, 0x03	; 3
    4c30:	1c ae       	std	Y+60, r1	; 0x3c
    4c32:	1d ae       	std	Y+61, r1	; 0x3d
    4c34:	1e ae       	std	Y+62, r1	; 0x3e
    4c36:	1f ae       	std	Y+63, r1	; 0x3f
    4c38:	23 97       	sbiw	r28, 0x03	; 3
	float total = 0;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    4c3a:	2b ea       	ldi	r18, 0xAB	; 171
    4c3c:	22 2e       	mov	r2, r18
    4c3e:	77 c0       	rjmp	.+238    	; 0x4d2e <calculate_range+0x29c>
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
    4c40:	25 96       	adiw	r28, 0x05	; 5
    4c42:	ee ad       	ldd	r30, Y+62	; 0x3e
    4c44:	ff ad       	ldd	r31, Y+63	; 0x3f
    4c46:	25 97       	sbiw	r28, 0x05	; 5
    4c48:	01 91       	ld	r16, Z+
    4c4a:	11 91       	ld	r17, Z+
    4c4c:	25 96       	adiw	r28, 0x05	; 5
    4c4e:	ee af       	std	Y+62, r30	; 0x3e
    4c50:	ff af       	std	Y+63, r31	; 0x3f
    4c52:	25 97       	sbiw	r28, 0x05	; 5
    4c54:	a3 01       	movw	r20, r6
    4c56:	92 01       	movw	r18, r4
    4c58:	c5 01       	movw	r24, r10
    4c5a:	b4 01       	movw	r22, r8
    4c5c:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4c60:	4b 01       	movw	r8, r22
    4c62:	5c 01       	movw	r10, r24
    4c64:	2b a9       	ldd	r18, Y+51	; 0x33
    4c66:	3c a9       	ldd	r19, Y+52	; 0x34
    4c68:	4d a9       	ldd	r20, Y+53	; 0x35
    4c6a:	5e a9       	ldd	r21, Y+54	; 0x36
    4c6c:	ca 01       	movw	r24, r20
    4c6e:	b9 01       	movw	r22, r18
    4c70:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4c74:	2b 01       	movw	r4, r22
    4c76:	3c 01       	movw	r6, r24
    4c78:	a7 01       	movw	r20, r14
    4c7a:	96 01       	movw	r18, r12
    4c7c:	c7 01       	movw	r24, r14
    4c7e:	b6 01       	movw	r22, r12
    4c80:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4c84:	9b 01       	movw	r18, r22
    4c86:	ac 01       	movw	r20, r24
    4c88:	c3 01       	movw	r24, r6
    4c8a:	b2 01       	movw	r22, r4
    4c8c:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	42 ef       	ldi	r20, 0xF2	; 242
    4c96:	53 e4       	ldi	r21, 0x43	; 67
    4c98:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4c9c:	9b 01       	movw	r18, r22
    4c9e:	ac 01       	movw	r20, r24
    4ca0:	c5 01       	movw	r24, r10
    4ca2:	b4 01       	movw	r22, r8
    4ca4:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    4ca8:	6b 01       	movw	r12, r22
    4caa:	7c 01       	movw	r14, r24
    4cac:	b8 01       	movw	r22, r16
    4cae:	11 0f       	add	r17, r17
    4cb0:	88 0b       	sbc	r24, r24
    4cb2:	99 0b       	sbc	r25, r25
    4cb4:	0e 94 81 48 	call	0x9102	; 0x9102 <__floatsisf>
    4cb8:	9b 01       	movw	r18, r22
    4cba:	ac 01       	movw	r20, r24
    4cbc:	c7 01       	movw	r24, r14
    4cbe:	b6 01       	movw	r22, r12
    4cc0:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4cc4:	9b 01       	movw	r18, r22
    4cc6:	ac 01       	movw	r20, r24
    4cc8:	23 96       	adiw	r28, 0x03	; 3
    4cca:	6c ad       	ldd	r22, Y+60	; 0x3c
    4ccc:	7d ad       	ldd	r23, Y+61	; 0x3d
    4cce:	8e ad       	ldd	r24, Y+62	; 0x3e
    4cd0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cd2:	23 97       	sbiw	r28, 0x03	; 3
    4cd4:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    4cd8:	23 96       	adiw	r28, 0x03	; 3
    4cda:	6c af       	std	Y+60, r22	; 0x3c
    4cdc:	7d af       	std	Y+61, r23	; 0x3d
    4cde:	8e af       	std	Y+62, r24	; 0x3e
    4ce0:	9f af       	std	Y+63, r25	; 0x3f
    4ce2:	23 97       	sbiw	r28, 0x03	; 3
	float rijMagSq;
	float alphaDotP, betaDotP;
	float cosAcosB;
	float total = 0;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    4ce4:	33 94       	inc	r3
    4ce6:	f4 e2       	ldi	r31, 0x24	; 36
    4ce8:	3f 16       	cp	r3, r31
    4cea:	09 f4       	brne	.+2      	; 0x4cee <calculate_range+0x25c>
    4cec:	a3 c0       	rjmp	.+326    	; 0x4e34 <calculate_range+0x3a2>
    4cee:	32 9c       	mul	r3, r2
    4cf0:	81 2d       	mov	r24, r1
    4cf2:	11 24       	eor	r1, r1
    4cf4:	86 95       	lsr	r24
    4cf6:	86 95       	lsr	r24
    4cf8:	98 2f       	mov	r25, r24
    4cfa:	99 0f       	add	r25, r25
    4cfc:	89 0f       	add	r24, r25
    4cfe:	88 0f       	add	r24, r24
    4d00:	e3 2d       	mov	r30, r3
    4d02:	e8 1b       	sub	r30, r24
    4d04:	f0 e0       	ldi	r31, 0x00	; 0
    4d06:	ee 0f       	add	r30, r30
    4d08:	ff 1f       	adc	r31, r31
    4d0a:	ee 0f       	add	r30, r30
    4d0c:	ff 1f       	adc	r31, r31
    4d0e:	ee 0f       	add	r30, r30
    4d10:	ff 1f       	adc	r31, r31
    4d12:	e7 57       	subi	r30, 0x77	; 119
    4d14:	fe 4d       	sbci	r31, 0xDE	; 222
    4d16:	40 80       	ld	r4, Z
    4d18:	51 80       	ldd	r5, Z+1	; 0x01
    4d1a:	62 80       	ldd	r6, Z+2	; 0x02
    4d1c:	73 80       	ldd	r7, Z+3	; 0x03
    4d1e:	84 81       	ldd	r24, Z+4	; 0x04
    4d20:	95 81       	ldd	r25, Z+5	; 0x05
    4d22:	a6 81       	ldd	r26, Z+6	; 0x06
    4d24:	b7 81       	ldd	r27, Z+7	; 0x07
    4d26:	8b af       	std	Y+59, r24	; 0x3b
    4d28:	9c af       	std	Y+60, r25	; 0x3c
    4d2a:	ad af       	std	Y+61, r26	; 0x3d
    4d2c:	be af       	std	Y+62, r27	; 0x3e
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    4d2e:	32 9c       	mul	r3, r2
    4d30:	81 2d       	mov	r24, r1
    4d32:	11 24       	eor	r1, r1
    4d34:	86 95       	lsr	r24
    4d36:	86 95       	lsr	r24
    4d38:	01 e0       	ldi	r16, 0x01	; 1
    4d3a:	10 e0       	ldi	r17, 0x00	; 0
    4d3c:	0c 0f       	add	r16, r28
    4d3e:	1d 1f       	adc	r17, r29
    4d40:	b8 e0       	ldi	r27, 0x08	; 8
    4d42:	8b 9f       	mul	r24, r27
    4d44:	00 0d       	add	r16, r0
    4d46:	11 1d       	adc	r17, r1
    4d48:	11 24       	eor	r1, r1
    4d4a:	f8 01       	movw	r30, r16
    4d4c:	80 80       	ld	r8, Z
    4d4e:	91 80       	ldd	r9, Z+1	; 0x01
    4d50:	a2 80       	ldd	r10, Z+2	; 0x02
    4d52:	b3 80       	ldd	r11, Z+3	; 0x03
    4d54:	a5 01       	movw	r20, r10
    4d56:	94 01       	movw	r18, r8
    4d58:	29 96       	adiw	r28, 0x09	; 9
    4d5a:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d5c:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d5e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d60:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d62:	29 97       	sbiw	r28, 0x09	; 9
    4d64:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    4d68:	a3 01       	movw	r20, r6
    4d6a:	92 01       	movw	r18, r4
    4d6c:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    4d70:	6b ab       	std	Y+51, r22	; 0x33
    4d72:	7c ab       	std	Y+52, r23	; 0x34
    4d74:	8d ab       	std	Y+53, r24	; 0x35
    4d76:	9e ab       	std	Y+54, r25	; 0x36
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
    4d78:	d8 01       	movw	r26, r16
    4d7a:	14 96       	adiw	r26, 0x04	; 4
    4d7c:	8d 91       	ld	r24, X+
    4d7e:	9d 91       	ld	r25, X+
    4d80:	0d 90       	ld	r0, X+
    4d82:	bc 91       	ld	r27, X
    4d84:	a0 2d       	mov	r26, r0
    4d86:	8f ab       	std	Y+55, r24	; 0x37
    4d88:	98 af       	std	Y+56, r25	; 0x38
    4d8a:	a9 af       	std	Y+57, r26	; 0x39
    4d8c:	ba af       	std	Y+58, r27	; 0x3a
    4d8e:	9c 01       	movw	r18, r24
    4d90:	ad 01       	movw	r20, r26
    4d92:	2d 96       	adiw	r28, 0x0d	; 13
    4d94:	6c ad       	ldd	r22, Y+60	; 0x3c
    4d96:	7d ad       	ldd	r23, Y+61	; 0x3d
    4d98:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d9c:	2d 97       	sbiw	r28, 0x0d	; 13
    4d9e:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    4da2:	2b ad       	ldd	r18, Y+59	; 0x3b
    4da4:	3c ad       	ldd	r19, Y+60	; 0x3c
    4da6:	4d ad       	ldd	r20, Y+61	; 0x3d
    4da8:	5e ad       	ldd	r21, Y+62	; 0x3e
    4daa:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    4dae:	6b 01       	movw	r12, r22
    4db0:	7c 01       	movw	r14, r24
		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
    4db2:	a3 01       	movw	r20, r6
    4db4:	92 01       	movw	r18, r4
    4db6:	6b a9       	ldd	r22, Y+51	; 0x33
    4db8:	7c a9       	ldd	r23, Y+52	; 0x34
    4dba:	8d a9       	ldd	r24, Y+53	; 0x35
    4dbc:	9e a9       	ldd	r25, Y+54	; 0x36
    4dbe:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4dc2:	2b 01       	movw	r4, r22
    4dc4:	3c 01       	movw	r6, r24
    4dc6:	2b ad       	ldd	r18, Y+59	; 0x3b
    4dc8:	3c ad       	ldd	r19, Y+60	; 0x3c
    4dca:	4d ad       	ldd	r20, Y+61	; 0x3d
    4dcc:	5e ad       	ldd	r21, Y+62	; 0x3e
    4dce:	c7 01       	movw	r24, r14
    4dd0:	b6 01       	movw	r22, r12
    4dd2:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4dd6:	9b 01       	movw	r18, r22
    4dd8:	ac 01       	movw	r20, r24
    4dda:	c3 01       	movw	r24, r6
    4ddc:	b2 01       	movw	r22, r4
    4dde:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    4de2:	2b 01       	movw	r4, r22
    4de4:	3c 01       	movw	r6, r24
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
    4de6:	6b a9       	ldd	r22, Y+51	; 0x33
    4de8:	7c a9       	ldd	r23, Y+52	; 0x34
    4dea:	8d a9       	ldd	r24, Y+53	; 0x35
    4dec:	9e a9       	ldd	r25, Y+54	; 0x36
    4dee:	90 58       	subi	r25, 0x80	; 128
    4df0:	a5 01       	movw	r20, r10
    4df2:	94 01       	movw	r18, r8
    4df4:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4df8:	4b 01       	movw	r8, r22
    4dfa:	5c 01       	movw	r10, r24
    4dfc:	c7 01       	movw	r24, r14
    4dfe:	b6 01       	movw	r22, r12
    4e00:	90 58       	subi	r25, 0x80	; 128
    4e02:	2f a9       	ldd	r18, Y+55	; 0x37
    4e04:	38 ad       	ldd	r19, Y+56	; 0x38
    4e06:	49 ad       	ldd	r20, Y+57	; 0x39
    4e08:	5a ad       	ldd	r21, Y+58	; 0x3a
    4e0a:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4e0e:	9b 01       	movw	r18, r22
    4e10:	ac 01       	movw	r20, r24
    4e12:	c5 01       	movw	r24, r10
    4e14:	b4 01       	movw	r22, r8
    4e16:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    4e1a:	4b 01       	movw	r8, r22
    4e1c:	5c 01       	movw	r10, r24
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    4e1e:	20 e0       	ldi	r18, 0x00	; 0
    4e20:	30 e0       	ldi	r19, 0x00	; 0
    4e22:	a9 01       	movw	r20, r18
    4e24:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__cmpsf2>
    4e28:	87 ff       	sbrs	r24, 7
    4e2a:	0a cf       	rjmp	.-492    	; 0x4c40 <calculate_range+0x1ae>
    4e2c:	81 2c       	mov	r8, r1
    4e2e:	91 2c       	mov	r9, r1
    4e30:	54 01       	movw	r10, r8
    4e32:	06 cf       	rjmp	.-500    	; 0x4c40 <calculate_range+0x1ae>
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
	}

	return magicRangeFunc(total);
    4e34:	23 96       	adiw	r28, 0x03	; 3
    4e36:	6c ad       	ldd	r22, Y+60	; 0x3c
    4e38:	7d ad       	ldd	r23, Y+61	; 0x3d
    4e3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    4e3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e3e:	23 97       	sbiw	r28, 0x03	; 3
}
    4e40:	c4 5b       	subi	r28, 0xB4	; 180
    4e42:	df 4f       	sbci	r29, 0xFF	; 255
    4e44:	cd bf       	out	0x3d, r28	; 61
    4e46:	de bf       	out	0x3e, r29	; 62
    4e48:	df 91       	pop	r29
    4e4a:	cf 91       	pop	r28
    4e4c:	1f 91       	pop	r17
    4e4e:	0f 91       	pop	r16
    4e50:	ff 90       	pop	r15
    4e52:	ef 90       	pop	r14
    4e54:	df 90       	pop	r13
    4e56:	cf 90       	pop	r12
    4e58:	bf 90       	pop	r11
    4e5a:	af 90       	pop	r10
    4e5c:	9f 90       	pop	r9
    4e5e:	8f 90       	pop	r8
    4e60:	7f 90       	pop	r7
    4e62:	6f 90       	pop	r6
    4e64:	5f 90       	pop	r5
    4e66:	4f 90       	pop	r4
    4e68:	3f 90       	pop	r3
    4e6a:	2f 90       	pop	r2
		cosAcosB = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);

		total += fast_bm[i]*cosAcosB;
	}

	return magicRangeFunc(total);
    4e6c:	0c 94 e1 24 	jmp	0x49c2	; 0x49c2 <magicRangeFunc>

00004e70 <calculate_error>:
}

float calculate_error(float r, float b, float h){
    4e70:	2f 92       	push	r2
    4e72:	3f 92       	push	r3
    4e74:	4f 92       	push	r4
    4e76:	5f 92       	push	r5
    4e78:	6f 92       	push	r6
    4e7a:	7f 92       	push	r7
    4e7c:	8f 92       	push	r8
    4e7e:	9f 92       	push	r9
    4e80:	af 92       	push	r10
    4e82:	bf 92       	push	r11
    4e84:	cf 92       	push	r12
    4e86:	df 92       	push	r13
    4e88:	ef 92       	push	r14
    4e8a:	ff 92       	push	r15
    4e8c:	0f 93       	push	r16
    4e8e:	1f 93       	push	r17
    4e90:	cf 93       	push	r28
    4e92:	df 93       	push	r29
    4e94:	cd b7       	in	r28, 0x3d	; 61
    4e96:	de b7       	in	r29, 0x3e	; 62
    4e98:	cc 5e       	subi	r28, 0xEC	; 236
    4e9a:	d1 09       	sbc	r29, r1
    4e9c:	cd bf       	out	0x3d, r28	; 61
    4e9e:	de bf       	out	0x3e, r29	; 62
    4ea0:	4b 01       	movw	r8, r22
    4ea2:	5c 01       	movw	r10, r24
    4ea4:	29 01       	movw	r4, r18
    4ea6:	3a 01       	movw	r6, r20
    4ea8:	67 01       	movw	r12, r14
    4eaa:	78 01       	movw	r14, r16
	r = r<46 ? 46 : r;
    4eac:	20 e0       	ldi	r18, 0x00	; 0
    4eae:	30 e0       	ldi	r19, 0x00	; 0
    4eb0:	48 e3       	ldi	r20, 0x38	; 56
    4eb2:	52 e4       	ldi	r21, 0x42	; 66
    4eb4:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__cmpsf2>
    4eb8:	87 fd       	sbrc	r24, 7
    4eba:	df c2       	rjmp	.+1470   	; 0x547a <calculate_error+0x60a>
    4ebc:	d5 01       	movw	r26, r10
    4ebe:	c4 01       	movw	r24, r8
    4ec0:	b0 58       	subi	r27, 0x80	; 128
    4ec2:	cd 53       	subi	r28, 0x3D	; 61
    4ec4:	df 4f       	sbci	r29, 0xFF	; 255
    4ec6:	88 83       	st	Y, r24
    4ec8:	99 83       	std	Y+1, r25	; 0x01
    4eca:	aa 83       	std	Y+2, r26	; 0x02
    4ecc:	bb 83       	std	Y+3, r27	; 0x03
    4ece:	c3 5c       	subi	r28, 0xC3	; 195
    4ed0:	d0 40       	sbci	r29, 0x00	; 0
	float bigR[2] = {-r*sin(b), r*cos(b)};
    4ed2:	c3 01       	movw	r24, r6
    4ed4:	b2 01       	movw	r22, r4
    4ed6:	0e 94 81 4b 	call	0x9702	; 0x9702 <sin>
    4eda:	cd 53       	subi	r28, 0x3D	; 61
    4edc:	df 4f       	sbci	r29, 0xFF	; 255
    4ede:	28 81       	ld	r18, Y
    4ee0:	39 81       	ldd	r19, Y+1	; 0x01
    4ee2:	4a 81       	ldd	r20, Y+2	; 0x02
    4ee4:	5b 81       	ldd	r21, Y+3	; 0x03
    4ee6:	c3 5c       	subi	r28, 0xC3	; 195
    4ee8:	d0 40       	sbci	r29, 0x00	; 0
    4eea:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4eee:	cd 51       	subi	r28, 0x1D	; 29
    4ef0:	df 4f       	sbci	r29, 0xFF	; 255
    4ef2:	68 83       	st	Y, r22
    4ef4:	79 83       	std	Y+1, r23	; 0x01
    4ef6:	8a 83       	std	Y+2, r24	; 0x02
    4ef8:	9b 83       	std	Y+3, r25	; 0x03
    4efa:	c3 5e       	subi	r28, 0xE3	; 227
    4efc:	d0 40       	sbci	r29, 0x00	; 0
    4efe:	c3 01       	movw	r24, r6
    4f00:	b2 01       	movw	r22, r4
    4f02:	0e 94 98 47 	call	0x8f30	; 0x8f30 <cos>
    4f06:	9b 01       	movw	r18, r22
    4f08:	ac 01       	movw	r20, r24
    4f0a:	c5 01       	movw	r24, r10
    4f0c:	b4 01       	movw	r22, r8
    4f0e:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4f12:	c9 51       	subi	r28, 0x19	; 25
    4f14:	df 4f       	sbci	r29, 0xFF	; 255
    4f16:	68 83       	st	Y, r22
    4f18:	79 83       	std	Y+1, r23	; 0x01
    4f1a:	8a 83       	std	Y+2, r24	; 0x02
    4f1c:	9b 83       	std	Y+3, r25	; 0x03
    4f1e:	c7 5e       	subi	r28, 0xE7	; 231
    4f20:	d0 40       	sbci	r29, 0x00	; 0
    4f22:	c7 01       	movw	r24, r14
    4f24:	b6 01       	movw	r22, r12
    4f26:	0e 94 98 47 	call	0x8f30	; 0x8f30 <cos>
    4f2a:	cd 53       	subi	r28, 0x3D	; 61
    4f2c:	df 4f       	sbci	r29, 0xFF	; 255
    4f2e:	68 83       	st	Y, r22
    4f30:	79 83       	std	Y+1, r23	; 0x01
    4f32:	8a 83       	std	Y+2, r24	; 0x02
    4f34:	9b 83       	std	Y+3, r25	; 0x03
    4f36:	c3 5c       	subi	r28, 0xC3	; 195
    4f38:	d0 40       	sbci	r29, 0x00	; 0
    4f3a:	c7 01       	movw	r24, r14
    4f3c:	b6 01       	movw	r22, r12
    4f3e:	0e 94 81 4b 	call	0x9702	; 0x9702 <sin>
    4f42:	2b 01       	movw	r4, r22
    4f44:	3c 01       	movw	r6, r24
    4f46:	de 01       	movw	r26, r28
    4f48:	af 56       	subi	r26, 0x6F	; 111
    4f4a:	bf 4f       	sbci	r27, 0xFF	; 255
    4f4c:	cf 53       	subi	r28, 0x3F	; 63
    4f4e:	df 4f       	sbci	r29, 0xFF	; 255
    4f50:	a8 83       	st	Y, r26
    4f52:	b9 83       	std	Y+1, r27	; 0x01
    4f54:	c1 5c       	subi	r28, 0xC1	; 193
    4f56:	d0 40       	sbci	r29, 0x00	; 0
    4f58:	8d 01       	movw	r16, r26
    4f5a:	39 e8       	ldi	r19, 0x89	; 137
    4f5c:	23 2e       	mov	r2, r19
    4f5e:	31 e2       	ldi	r19, 0x21	; 33
    4f60:	33 2e       	mov	r3, r19
    4f62:	fd 01       	movw	r30, r26
    4f64:	f0 96       	adiw	r30, 0x30	; 48
    4f66:	c5 53       	subi	r28, 0x35	; 53
    4f68:	df 4f       	sbci	r29, 0xFF	; 255
    4f6a:	e8 83       	st	Y, r30
    4f6c:	f9 83       	std	Y+1, r31	; 0x01
    4f6e:	cb 5c       	subi	r28, 0xCB	; 203
    4f70:	d0 40       	sbci	r29, 0x00	; 0
    4f72:	44 ea       	ldi	r20, 0xA4	; 164
    4f74:	84 2e       	mov	r8, r20
    4f76:	4b e6       	ldi	r20, 0x6B	; 107
    4f78:	94 2e       	mov	r9, r20
    4f7a:	48 e9       	ldi	r20, 0x98	; 152
    4f7c:	a4 2e       	mov	r10, r20
    4f7e:	41 e4       	ldi	r20, 0x41	; 65
    4f80:	b4 2e       	mov	r11, r20
    4f82:	c1 2c       	mov	r12, r1
    4f84:	d1 2c       	mov	r13, r1
    4f86:	50 e3       	ldi	r21, 0x30	; 48
    4f88:	e5 2e       	mov	r14, r21
    4f8a:	51 e4       	ldi	r21, 0x41	; 65
    4f8c:	f5 2e       	mov	r15, r21
    4f8e:	0c c0       	rjmp	.+24     	; 0x4fa8 <calculate_error+0x138>
    4f90:	d1 01       	movw	r26, r2
    4f92:	cd 90       	ld	r12, X+
    4f94:	dd 90       	ld	r13, X+
    4f96:	ed 90       	ld	r14, X+
    4f98:	fc 90       	ld	r15, X
    4f9a:	13 97       	sbiw	r26, 0x03	; 3
    4f9c:	14 96       	adiw	r26, 0x04	; 4
    4f9e:	8d 90       	ld	r8, X+
    4fa0:	9d 90       	ld	r9, X+
    4fa2:	ad 90       	ld	r10, X+
    4fa4:	bc 90       	ld	r11, X
    4fa6:	17 97       	sbiw	r26, 0x07	; 7
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
		txHats[i][0] = hats[i][0]*cos(h) - hats[i][1]*sin(h);
    4fa8:	cd 53       	subi	r28, 0x3D	; 61
    4faa:	df 4f       	sbci	r29, 0xFF	; 255
    4fac:	28 81       	ld	r18, Y
    4fae:	39 81       	ldd	r19, Y+1	; 0x01
    4fb0:	4a 81       	ldd	r20, Y+2	; 0x02
    4fb2:	5b 81       	ldd	r21, Y+3	; 0x03
    4fb4:	c3 5c       	subi	r28, 0xC3	; 195
    4fb6:	d0 40       	sbci	r29, 0x00	; 0
    4fb8:	c7 01       	movw	r24, r14
    4fba:	b6 01       	movw	r22, r12
    4fbc:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4fc0:	c9 53       	subi	r28, 0x39	; 57
    4fc2:	df 4f       	sbci	r29, 0xFF	; 255
    4fc4:	68 83       	st	Y, r22
    4fc6:	79 83       	std	Y+1, r23	; 0x01
    4fc8:	8a 83       	std	Y+2, r24	; 0x02
    4fca:	9b 83       	std	Y+3, r25	; 0x03
    4fcc:	c7 5c       	subi	r28, 0xC7	; 199
    4fce:	d0 40       	sbci	r29, 0x00	; 0
    4fd0:	a3 01       	movw	r20, r6
    4fd2:	92 01       	movw	r18, r4
    4fd4:	c5 01       	movw	r24, r10
    4fd6:	b4 01       	movw	r22, r8
    4fd8:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    4fdc:	9b 01       	movw	r18, r22
    4fde:	ac 01       	movw	r20, r24
    4fe0:	c9 53       	subi	r28, 0x39	; 57
    4fe2:	df 4f       	sbci	r29, 0xFF	; 255
    4fe4:	68 81       	ld	r22, Y
    4fe6:	79 81       	ldd	r23, Y+1	; 0x01
    4fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    4fea:	9b 81       	ldd	r25, Y+3	; 0x03
    4fec:	c7 5c       	subi	r28, 0xC7	; 199
    4fee:	d0 40       	sbci	r29, 0x00	; 0
    4ff0:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    4ff4:	d8 01       	movw	r26, r16
    4ff6:	6d 93       	st	X+, r22
    4ff8:	7d 93       	st	X+, r23
    4ffa:	8d 93       	st	X+, r24
    4ffc:	9c 93       	st	X, r25
    4ffe:	13 97       	sbiw	r26, 0x03	; 3
		txHats[i][1] = hats[i][0]*sin(h) + hats[i][1]*cos(h);
    5000:	a3 01       	movw	r20, r6
    5002:	92 01       	movw	r18, r4
    5004:	c7 01       	movw	r24, r14
    5006:	b6 01       	movw	r22, r12
    5008:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    500c:	6b 01       	movw	r12, r22
    500e:	7c 01       	movw	r14, r24
    5010:	a5 01       	movw	r20, r10
    5012:	94 01       	movw	r18, r8
    5014:	cd 53       	subi	r28, 0x3D	; 61
    5016:	df 4f       	sbci	r29, 0xFF	; 255
    5018:	68 81       	ld	r22, Y
    501a:	79 81       	ldd	r23, Y+1	; 0x01
    501c:	8a 81       	ldd	r24, Y+2	; 0x02
    501e:	9b 81       	ldd	r25, Y+3	; 0x03
    5020:	c3 5c       	subi	r28, 0xC3	; 195
    5022:	d0 40       	sbci	r29, 0x00	; 0
    5024:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    5028:	9b 01       	movw	r18, r22
    502a:	ac 01       	movw	r20, r24
    502c:	c7 01       	movw	r24, r14
    502e:	b6 01       	movw	r22, r12
    5030:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5034:	f8 01       	movw	r30, r16
    5036:	64 83       	std	Z+4, r22	; 0x04
    5038:	75 83       	std	Z+5, r23	; 0x05
    503a:	86 83       	std	Z+6, r24	; 0x06
    503c:	97 83       	std	Z+7, r25	; 0x07
    503e:	08 5f       	subi	r16, 0xF8	; 248
    5040:	1f 4f       	sbci	r17, 0xFF	; 255
    5042:	f8 e0       	ldi	r31, 0x08	; 8
    5044:	2f 0e       	add	r2, r31
    5046:	31 1c       	adc	r3, r1

float calculate_error(float r, float b, float h){
	r = r<46 ? 46 : r;
	float bigR[2] = {-r*sin(b), r*cos(b)};
	float txHats[6][2];
	for(uint8_t i=0;i<6;i++){
    5048:	c5 53       	subi	r28, 0x35	; 53
    504a:	df 4f       	sbci	r29, 0xFF	; 255
    504c:	88 81       	ld	r24, Y
    504e:	99 81       	ldd	r25, Y+1	; 0x01
    5050:	cb 5c       	subi	r28, 0xCB	; 203
    5052:	d0 40       	sbci	r29, 0x00	; 0
    5054:	08 17       	cp	r16, r24
    5056:	19 07       	cpc	r17, r25
    5058:	09 f0       	breq	.+2      	; 0x505c <calculate_error+0x1ec>
    505a:	9a cf       	rjmp	.-204    	; 0x4f90 <calculate_error+0x120>
    505c:	ac e8       	ldi	r26, 0x8C	; 140
    505e:	b3 e2       	ldi	r27, 0x23	; 35
    5060:	c5 51       	subi	r28, 0x15	; 21
    5062:	df 4f       	sbci	r29, 0xFF	; 255
    5064:	a8 83       	st	Y, r26
    5066:	b9 83       	std	Y+1, r27	; 0x01
    5068:	cb 5e       	subi	r28, 0xEB	; 235
    506a:	d0 40       	sbci	r29, 0x00	; 0
    506c:	fe 01       	movw	r30, r28
    506e:	31 96       	adiw	r30, 0x01	; 1
    5070:	1f 01       	movw	r2, r30
    5072:	c3 52       	subi	r28, 0x23	; 35
    5074:	df 4f       	sbci	r29, 0xFF	; 255
    5076:	e8 83       	st	Y, r30
    5078:	f9 83       	std	Y+1, r31	; 0x01
    507a:	cd 5d       	subi	r28, 0xDD	; 221
    507c:	d0 40       	sbci	r29, 0x00	; 0
    507e:	c5 52       	subi	r28, 0x25	; 37
    5080:	df 4f       	sbci	r29, 0xFF	; 255
    5082:	a8 83       	st	Y, r26
    5084:	b9 83       	std	Y+1, r27	; 0x01
    5086:	cb 5d       	subi	r28, 0xDB	; 219
    5088:	d0 40       	sbci	r29, 0x00	; 0
    508a:	84 ea       	ldi	r24, 0xA4	; 164
    508c:	9b e6       	ldi	r25, 0x6B	; 107
    508e:	a8 e9       	ldi	r26, 0x98	; 152
    5090:	b1 e4       	ldi	r27, 0x41	; 65
    5092:	c9 52       	subi	r28, 0x29	; 41
    5094:	df 4f       	sbci	r29, 0xFF	; 255
    5096:	88 83       	st	Y, r24
    5098:	99 83       	std	Y+1, r25	; 0x01
    509a:	aa 83       	std	Y+2, r26	; 0x02
    509c:	bb 83       	std	Y+3, r27	; 0x03
    509e:	c7 5d       	subi	r28, 0xD7	; 215
    50a0:	d0 40       	sbci	r29, 0x00	; 0
    50a2:	41 2c       	mov	r4, r1
    50a4:	51 2c       	mov	r5, r1
    50a6:	20 e3       	ldi	r18, 0x30	; 48
    50a8:	62 2e       	mov	r6, r18
    50aa:	21 e4       	ldi	r18, 0x41	; 65
    50ac:	72 2e       	mov	r7, r18
    50ae:	10 e0       	ldi	r17, 0x00	; 0
    50b0:	c5 53       	subi	r28, 0x35	; 53
    50b2:	df 4f       	sbci	r29, 0xFF	; 255
    50b4:	18 82       	st	Y, r1
    50b6:	19 82       	std	Y+1, r1	; 0x01
    50b8:	1a 82       	std	Y+2, r1	; 0x02
    50ba:	1b 82       	std	Y+3, r1	; 0x03
    50bc:	cb 5c       	subi	r28, 0xCB	; 203
    50be:	d0 40       	sbci	r29, 0x00	; 0
    50c0:	c9 53       	subi	r28, 0x39	; 57
    50c2:	df 4f       	sbci	r29, 0xFF	; 255
    50c4:	18 82       	st	Y, r1
    50c6:	19 82       	std	Y+1, r1	; 0x01
    50c8:	1a 82       	std	Y+2, r1	; 0x02
    50ca:	1b 82       	std	Y+3, r1	; 0x03
    50cc:	c7 5c       	subi	r28, 0xC7	; 199
    50ce:	d0 40       	sbci	r29, 0x00	; 0
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    50d0:	0b ea       	ldi	r16, 0xAB	; 171
    50d2:	c1 c0       	rjmp	.+386    	; 0x5256 <calculate_error+0x3e6>
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];

		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
    50d4:	cd 53       	subi	r28, 0x3D	; 61
    50d6:	df 4f       	sbci	r29, 0xFF	; 255
    50d8:	68 81       	ld	r22, Y
    50da:	79 81       	ldd	r23, Y+1	; 0x01
    50dc:	8a 81       	ldd	r24, Y+2	; 0x02
    50de:	9b 81       	ldd	r25, Y+3	; 0x03
    50e0:	c3 5c       	subi	r28, 0xC3	; 195
    50e2:	d0 40       	sbci	r29, 0x00	; 0
    50e4:	90 58       	subi	r25, 0x80	; 128
    50e6:	c1 53       	subi	r28, 0x31	; 49
    50e8:	df 4f       	sbci	r29, 0xFF	; 255
    50ea:	28 81       	ld	r18, Y
    50ec:	39 81       	ldd	r19, Y+1	; 0x01
    50ee:	4a 81       	ldd	r20, Y+2	; 0x02
    50f0:	5b 81       	ldd	r21, Y+3	; 0x03
    50f2:	cf 5c       	subi	r28, 0xCF	; 207
    50f4:	d0 40       	sbci	r29, 0x00	; 0
    50f6:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    50fa:	2b 01       	movw	r4, r22
    50fc:	3c 01       	movw	r6, r24
    50fe:	c7 01       	movw	r24, r14
    5100:	b6 01       	movw	r22, r12
    5102:	90 58       	subi	r25, 0x80	; 128
    5104:	cd 52       	subi	r28, 0x2D	; 45
    5106:	df 4f       	sbci	r29, 0xFF	; 255
    5108:	28 81       	ld	r18, Y
    510a:	39 81       	ldd	r19, Y+1	; 0x01
    510c:	4a 81       	ldd	r20, Y+2	; 0x02
    510e:	5b 81       	ldd	r21, Y+3	; 0x03
    5110:	c3 5d       	subi	r28, 0xD3	; 211
    5112:	d0 40       	sbci	r29, 0x00	; 0
    5114:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    5118:	9b 01       	movw	r18, r22
    511a:	ac 01       	movw	r20, r24
    511c:	c3 01       	movw	r24, r6
    511e:	b2 01       	movw	r22, r4
    5120:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5124:	6b 01       	movw	r12, r22
    5126:	7c 01       	movw	r14, r24
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    5128:	20 e0       	ldi	r18, 0x00	; 0
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	a9 01       	movw	r20, r18
    512e:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__cmpsf2>
    5132:	87 fd       	sbrc	r24, 7
    5134:	3b c1       	rjmp	.+630    	; 0x53ac <calculate_error+0x53c>

		measTotal += fast_bm[i];
    5136:	c5 52       	subi	r28, 0x25	; 37
    5138:	df 4f       	sbci	r29, 0xFF	; 255
    513a:	e8 81       	ld	r30, Y
    513c:	f9 81       	ldd	r31, Y+1	; 0x01
    513e:	cb 5d       	subi	r28, 0xDB	; 219
    5140:	d0 40       	sbci	r29, 0x00	; 0
    5142:	61 91       	ld	r22, Z+
    5144:	71 91       	ld	r23, Z+
    5146:	c5 52       	subi	r28, 0x25	; 37
    5148:	df 4f       	sbci	r29, 0xFF	; 255
    514a:	e8 83       	st	Y, r30
    514c:	f9 83       	std	Y+1, r31	; 0x01
    514e:	cb 5d       	subi	r28, 0xDB	; 219
    5150:	d0 40       	sbci	r29, 0x00	; 0
    5152:	07 2e       	mov	r0, r23
    5154:	00 0c       	add	r0, r0
    5156:	88 0b       	sbc	r24, r24
    5158:	99 0b       	sbc	r25, r25
    515a:	0e 94 81 48 	call	0x9102	; 0x9102 <__floatsisf>
    515e:	9b 01       	movw	r18, r22
    5160:	ac 01       	movw	r20, r24
    5162:	c9 53       	subi	r28, 0x39	; 57
    5164:	df 4f       	sbci	r29, 0xFF	; 255
    5166:	68 81       	ld	r22, Y
    5168:	79 81       	ldd	r23, Y+1	; 0x01
    516a:	8a 81       	ldd	r24, Y+2	; 0x02
    516c:	9b 81       	ldd	r25, Y+3	; 0x03
    516e:	c7 5c       	subi	r28, 0xC7	; 199
    5170:	d0 40       	sbci	r29, 0x00	; 0
    5172:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5176:	c9 53       	subi	r28, 0x39	; 57
    5178:	df 4f       	sbci	r29, 0xFF	; 255
    517a:	68 83       	st	Y, r22
    517c:	79 83       	std	Y+1, r23	; 0x01
    517e:	8a 83       	std	Y+2, r24	; 0x02
    5180:	9b 83       	std	Y+3, r25	; 0x03
    5182:	c7 5c       	subi	r28, 0xC7	; 199
    5184:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
    5186:	a7 01       	movw	r20, r14
    5188:	96 01       	movw	r18, r12
    518a:	c5 01       	movw	r24, r10
    518c:	b4 01       	movw	r22, r8
    518e:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    5192:	6b 01       	movw	r12, r22
    5194:	7c 01       	movw	r14, r24
    5196:	20 e0       	ldi	r18, 0x00	; 0
    5198:	30 e0       	ldi	r19, 0x00	; 0
    519a:	42 ef       	ldi	r20, 0xF2	; 242
    519c:	53 e4       	ldi	r21, 0x43	; 67
    519e:	c1 52       	subi	r28, 0x21	; 33
    51a0:	df 4f       	sbci	r29, 0xFF	; 255
    51a2:	68 81       	ld	r22, Y
    51a4:	79 81       	ldd	r23, Y+1	; 0x01
    51a6:	8a 81       	ldd	r24, Y+2	; 0x02
    51a8:	9b 81       	ldd	r25, Y+3	; 0x03
    51aa:	cf 5d       	subi	r28, 0xDF	; 223
    51ac:	d0 40       	sbci	r29, 0x00	; 0
    51ae:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    51b2:	9b 01       	movw	r18, r22
    51b4:	ac 01       	movw	r20, r24
    51b6:	c7 01       	movw	r24, r14
    51b8:	b6 01       	movw	r22, r12
    51ba:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    51be:	9b 01       	movw	r18, r22
    51c0:	ac 01       	movw	r20, r24
    51c2:	c3 52       	subi	r28, 0x23	; 35
    51c4:	df 4f       	sbci	r29, 0xFF	; 255
    51c6:	a8 81       	ld	r26, Y
    51c8:	b9 81       	ldd	r27, Y+1	; 0x01
    51ca:	cd 5d       	subi	r28, 0xDD	; 221
    51cc:	d0 40       	sbci	r29, 0x00	; 0
    51ce:	6d 93       	st	X+, r22
    51d0:	7d 93       	st	X+, r23
    51d2:	8d 93       	st	X+, r24
    51d4:	9d 93       	st	X+, r25
    51d6:	c3 52       	subi	r28, 0x23	; 35
    51d8:	df 4f       	sbci	r29, 0xFF	; 255
    51da:	a8 83       	st	Y, r26
    51dc:	b9 83       	std	Y+1, r27	; 0x01
    51de:	cd 5d       	subi	r28, 0xDD	; 221
    51e0:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosBTotal += cosAcosB[i];
    51e2:	c5 53       	subi	r28, 0x35	; 53
    51e4:	df 4f       	sbci	r29, 0xFF	; 255
    51e6:	68 81       	ld	r22, Y
    51e8:	79 81       	ldd	r23, Y+1	; 0x01
    51ea:	8a 81       	ldd	r24, Y+2	; 0x02
    51ec:	9b 81       	ldd	r25, Y+3	; 0x03
    51ee:	cb 5c       	subi	r28, 0xCB	; 203
    51f0:	d0 40       	sbci	r29, 0x00	; 0
    51f2:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    51f6:	c5 53       	subi	r28, 0x35	; 53
    51f8:	df 4f       	sbci	r29, 0xFF	; 255
    51fa:	68 83       	st	Y, r22
    51fc:	79 83       	std	Y+1, r23	; 0x01
    51fe:	8a 83       	std	Y+2, r24	; 0x02
    5200:	9b 83       	std	Y+3, r25	; 0x03
    5202:	cb 5c       	subi	r28, 0xCB	; 203
    5204:	d0 40       	sbci	r29, 0x00	; 0
	float measTotal = 0;
	float cosAcosBTotal = 0;
	float cosAcosBmat[6][6];
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    5206:	1f 5f       	subi	r17, 0xFF	; 255
    5208:	14 32       	cpi	r17, 0x24	; 36
    520a:	09 f4       	brne	.+2      	; 0x520e <calculate_error+0x39e>
    520c:	d3 c0       	rjmp	.+422    	; 0x53b4 <calculate_error+0x544>
    520e:	10 9f       	mul	r17, r16
    5210:	81 2d       	mov	r24, r1
    5212:	11 24       	eor	r1, r1
    5214:	86 95       	lsr	r24
    5216:	86 95       	lsr	r24
    5218:	98 2f       	mov	r25, r24
    521a:	99 0f       	add	r25, r25
    521c:	89 0f       	add	r24, r25
    521e:	88 0f       	add	r24, r24
    5220:	e1 2f       	mov	r30, r17
    5222:	e8 1b       	sub	r30, r24
    5224:	f0 e0       	ldi	r31, 0x00	; 0
    5226:	ee 0f       	add	r30, r30
    5228:	ff 1f       	adc	r31, r31
    522a:	ee 0f       	add	r30, r30
    522c:	ff 1f       	adc	r31, r31
    522e:	ee 0f       	add	r30, r30
    5230:	ff 1f       	adc	r31, r31
    5232:	e7 57       	subi	r30, 0x77	; 119
    5234:	fe 4d       	sbci	r31, 0xDE	; 222
    5236:	40 80       	ld	r4, Z
    5238:	51 80       	ldd	r5, Z+1	; 0x01
    523a:	62 80       	ldd	r6, Z+2	; 0x02
    523c:	73 80       	ldd	r7, Z+3	; 0x03
    523e:	84 81       	ldd	r24, Z+4	; 0x04
    5240:	95 81       	ldd	r25, Z+5	; 0x05
    5242:	a6 81       	ldd	r26, Z+6	; 0x06
    5244:	b7 81       	ldd	r27, Z+7	; 0x07
    5246:	c9 52       	subi	r28, 0x29	; 41
    5248:	df 4f       	sbci	r29, 0xFF	; 255
    524a:	88 83       	st	Y, r24
    524c:	99 83       	std	Y+1, r25	; 0x01
    524e:	aa 83       	std	Y+2, r26	; 0x02
    5250:	bb 83       	std	Y+3, r27	; 0x03
    5252:	c7 5d       	subi	r28, 0xD7	; 215
    5254:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t rx = i%6;
		uint8_t tx = i/6;
		rij[0] = bigR[0] + txHats[tx][0] - hats[rx][0];
    5256:	10 9f       	mul	r17, r16
    5258:	81 2d       	mov	r24, r1
    525a:	11 24       	eor	r1, r1
    525c:	86 95       	lsr	r24
    525e:	86 95       	lsr	r24
    5260:	91 e9       	ldi	r25, 0x91	; 145
    5262:	e9 2e       	mov	r14, r25
    5264:	f1 2c       	mov	r15, r1
    5266:	ec 0e       	add	r14, r28
    5268:	fd 1e       	adc	r15, r29
    526a:	b8 e0       	ldi	r27, 0x08	; 8
    526c:	8b 9f       	mul	r24, r27
    526e:	e0 0c       	add	r14, r0
    5270:	f1 1c       	adc	r15, r1
    5272:	11 24       	eor	r1, r1
    5274:	d7 01       	movw	r26, r14
    5276:	8d 91       	ld	r24, X+
    5278:	9d 91       	ld	r25, X+
    527a:	0d 90       	ld	r0, X+
    527c:	bc 91       	ld	r27, X
    527e:	a0 2d       	mov	r26, r0
    5280:	c1 53       	subi	r28, 0x31	; 49
    5282:	df 4f       	sbci	r29, 0xFF	; 255
    5284:	88 83       	st	Y, r24
    5286:	99 83       	std	Y+1, r25	; 0x01
    5288:	aa 83       	std	Y+2, r26	; 0x02
    528a:	bb 83       	std	Y+3, r27	; 0x03
    528c:	cf 5c       	subi	r28, 0xCF	; 207
    528e:	d0 40       	sbci	r29, 0x00	; 0
    5290:	9c 01       	movw	r18, r24
    5292:	ad 01       	movw	r20, r26
    5294:	cd 51       	subi	r28, 0x1D	; 29
    5296:	df 4f       	sbci	r29, 0xFF	; 255
    5298:	68 81       	ld	r22, Y
    529a:	79 81       	ldd	r23, Y+1	; 0x01
    529c:	8a 81       	ldd	r24, Y+2	; 0x02
    529e:	9b 81       	ldd	r25, Y+3	; 0x03
    52a0:	c3 5e       	subi	r28, 0xE3	; 227
    52a2:	d0 40       	sbci	r29, 0x00	; 0
    52a4:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    52a8:	a3 01       	movw	r20, r6
    52aa:	92 01       	movw	r18, r4
    52ac:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    52b0:	cd 53       	subi	r28, 0x3D	; 61
    52b2:	df 4f       	sbci	r29, 0xFF	; 255
    52b4:	68 83       	st	Y, r22
    52b6:	79 83       	std	Y+1, r23	; 0x01
    52b8:	8a 83       	std	Y+2, r24	; 0x02
    52ba:	9b 83       	std	Y+3, r25	; 0x03
    52bc:	c3 5c       	subi	r28, 0xC3	; 195
    52be:	d0 40       	sbci	r29, 0x00	; 0
		rij[1] = bigR[1] + txHats[tx][1] - hats[rx][1];
    52c0:	d7 01       	movw	r26, r14
    52c2:	14 96       	adiw	r26, 0x04	; 4
    52c4:	8d 91       	ld	r24, X+
    52c6:	9d 91       	ld	r25, X+
    52c8:	0d 90       	ld	r0, X+
    52ca:	bc 91       	ld	r27, X
    52cc:	a0 2d       	mov	r26, r0
    52ce:	cd 52       	subi	r28, 0x2D	; 45
    52d0:	df 4f       	sbci	r29, 0xFF	; 255
    52d2:	88 83       	st	Y, r24
    52d4:	99 83       	std	Y+1, r25	; 0x01
    52d6:	aa 83       	std	Y+2, r26	; 0x02
    52d8:	bb 83       	std	Y+3, r27	; 0x03
    52da:	c3 5d       	subi	r28, 0xD3	; 211
    52dc:	d0 40       	sbci	r29, 0x00	; 0
    52de:	9c 01       	movw	r18, r24
    52e0:	ad 01       	movw	r20, r26
    52e2:	c9 51       	subi	r28, 0x19	; 25
    52e4:	df 4f       	sbci	r29, 0xFF	; 255
    52e6:	68 81       	ld	r22, Y
    52e8:	79 81       	ldd	r23, Y+1	; 0x01
    52ea:	8a 81       	ldd	r24, Y+2	; 0x02
    52ec:	9b 81       	ldd	r25, Y+3	; 0x03
    52ee:	c7 5e       	subi	r28, 0xE7	; 231
    52f0:	d0 40       	sbci	r29, 0x00	; 0
    52f2:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    52f6:	c9 52       	subi	r28, 0x29	; 41
    52f8:	df 4f       	sbci	r29, 0xFF	; 255
    52fa:	28 81       	ld	r18, Y
    52fc:	39 81       	ldd	r19, Y+1	; 0x01
    52fe:	4a 81       	ldd	r20, Y+2	; 0x02
    5300:	5b 81       	ldd	r21, Y+3	; 0x03
    5302:	c7 5d       	subi	r28, 0xD7	; 215
    5304:	d0 40       	sbci	r29, 0x00	; 0
    5306:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    530a:	6b 01       	movw	r12, r22
    530c:	7c 01       	movw	r14, r24
		rijMagSq = rij[0]*rij[0] + rij[1]*rij[1];
    530e:	cd 53       	subi	r28, 0x3D	; 61
    5310:	df 4f       	sbci	r29, 0xFF	; 255
    5312:	28 81       	ld	r18, Y
    5314:	39 81       	ldd	r19, Y+1	; 0x01
    5316:	4a 81       	ldd	r20, Y+2	; 0x02
    5318:	5b 81       	ldd	r21, Y+3	; 0x03
    531a:	c3 5c       	subi	r28, 0xC3	; 195
    531c:	d0 40       	sbci	r29, 0x00	; 0
    531e:	ca 01       	movw	r24, r20
    5320:	b9 01       	movw	r22, r18
    5322:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    5326:	4b 01       	movw	r8, r22
    5328:	5c 01       	movw	r10, r24
    532a:	a7 01       	movw	r20, r14
    532c:	96 01       	movw	r18, r12
    532e:	c7 01       	movw	r24, r14
    5330:	b6 01       	movw	r22, r12
    5332:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    5336:	9b 01       	movw	r18, r22
    5338:	ac 01       	movw	r20, r24
    533a:	c5 01       	movw	r24, r10
    533c:	b4 01       	movw	r22, r8
    533e:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5342:	c1 52       	subi	r28, 0x21	; 33
    5344:	df 4f       	sbci	r29, 0xFF	; 255
    5346:	68 83       	st	Y, r22
    5348:	79 83       	std	Y+1, r23	; 0x01
    534a:	8a 83       	std	Y+2, r24	; 0x02
    534c:	9b 83       	std	Y+3, r25	; 0x03
    534e:	cf 5d       	subi	r28, 0xDF	; 223
    5350:	d0 40       	sbci	r29, 0x00	; 0

		alphaDotP = rij[0]*hats[rx][0] + rij[1]*hats[rx][1];
    5352:	a3 01       	movw	r20, r6
    5354:	92 01       	movw	r18, r4
    5356:	cd 53       	subi	r28, 0x3D	; 61
    5358:	df 4f       	sbci	r29, 0xFF	; 255
    535a:	68 81       	ld	r22, Y
    535c:	79 81       	ldd	r23, Y+1	; 0x01
    535e:	8a 81       	ldd	r24, Y+2	; 0x02
    5360:	9b 81       	ldd	r25, Y+3	; 0x03
    5362:	c3 5c       	subi	r28, 0xC3	; 195
    5364:	d0 40       	sbci	r29, 0x00	; 0
    5366:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    536a:	4b 01       	movw	r8, r22
    536c:	5c 01       	movw	r10, r24
    536e:	c9 52       	subi	r28, 0x29	; 41
    5370:	df 4f       	sbci	r29, 0xFF	; 255
    5372:	28 81       	ld	r18, Y
    5374:	39 81       	ldd	r19, Y+1	; 0x01
    5376:	4a 81       	ldd	r20, Y+2	; 0x02
    5378:	5b 81       	ldd	r21, Y+3	; 0x03
    537a:	c7 5d       	subi	r28, 0xD7	; 215
    537c:	d0 40       	sbci	r29, 0x00	; 0
    537e:	c7 01       	movw	r24, r14
    5380:	b6 01       	movw	r22, r12
    5382:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    5386:	9b 01       	movw	r18, r22
    5388:	ac 01       	movw	r20, r24
    538a:	c5 01       	movw	r24, r10
    538c:	b4 01       	movw	r22, r8
    538e:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5392:	4b 01       	movw	r8, r22
    5394:	5c 01       	movw	r10, r24
		alphaDotP = alphaDotP < 0 ? 0 : alphaDotP;
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	30 e0       	ldi	r19, 0x00	; 0
    539a:	a9 01       	movw	r20, r18
    539c:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__cmpsf2>
    53a0:	87 ff       	sbrs	r24, 7
    53a2:	98 ce       	rjmp	.-720    	; 0x50d4 <calculate_error+0x264>
    53a4:	81 2c       	mov	r8, r1
    53a6:	91 2c       	mov	r9, r1
    53a8:	54 01       	movw	r10, r8
    53aa:	94 ce       	rjmp	.-728    	; 0x50d4 <calculate_error+0x264>
		betaDotP = (-rij[0])*txHats[tx][0] + (-rij[1])*txHats[tx][1];
		betaDotP = betaDotP < 0 ? 0 : betaDotP;
    53ac:	c1 2c       	mov	r12, r1
    53ae:	d1 2c       	mov	r13, r1
    53b0:	76 01       	movw	r14, r12
    53b2:	c1 ce       	rjmp	.-638    	; 0x5136 <calculate_error+0x2c6>
	float measTotal = 0;
	float cosAcosBTotal = 0;
	float cosAcosBmat[6][6];
	float* cosAcosB = (float*)cosAcosBmat;
	int16_t* fast_bm = (int16_t*)brightMeas;
	for(uint8_t i=0;i<36;i++){
    53b4:	c1 2c       	mov	r12, r1
    53b6:	d1 2c       	mov	r13, r1
    53b8:	76 01       	movw	r14, r12
    53ba:	c5 51       	subi	r28, 0x15	; 21
    53bc:	df 4f       	sbci	r29, 0xFF	; 255
    53be:	08 81       	ld	r16, Y
    53c0:	19 81       	ldd	r17, Y+1	; 0x01
    53c2:	cb 5e       	subi	r28, 0xEB	; 235
    53c4:	d0 40       	sbci	r29, 0x00	; 0
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
		cosAcosBTotal += cosAcosB[i];
	}
	float conf = 0;
	for(uint8_t i=0;i<36;i++){
		conf += fabsf( (fast_bm[i]/measTotal) - (cosAcosB[i]/cosAcosBTotal) );
    53c6:	d8 01       	movw	r26, r16
    53c8:	6d 91       	ld	r22, X+
    53ca:	7d 91       	ld	r23, X+
    53cc:	8d 01       	movw	r16, r26
    53ce:	f1 01       	movw	r30, r2
    53d0:	41 90       	ld	r4, Z+
    53d2:	51 90       	ld	r5, Z+
    53d4:	61 90       	ld	r6, Z+
    53d6:	71 90       	ld	r7, Z+
    53d8:	1f 01       	movw	r2, r30
    53da:	07 2e       	mov	r0, r23
    53dc:	00 0c       	add	r0, r0
    53de:	88 0b       	sbc	r24, r24
    53e0:	99 0b       	sbc	r25, r25
    53e2:	0e 94 81 48 	call	0x9102	; 0x9102 <__floatsisf>
    53e6:	c9 53       	subi	r28, 0x39	; 57
    53e8:	df 4f       	sbci	r29, 0xFF	; 255
    53ea:	28 81       	ld	r18, Y
    53ec:	39 81       	ldd	r19, Y+1	; 0x01
    53ee:	4a 81       	ldd	r20, Y+2	; 0x02
    53f0:	5b 81       	ldd	r21, Y+3	; 0x03
    53f2:	c7 5c       	subi	r28, 0xC7	; 199
    53f4:	d0 40       	sbci	r29, 0x00	; 0
    53f6:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    53fa:	4b 01       	movw	r8, r22
    53fc:	5c 01       	movw	r10, r24
    53fe:	c5 53       	subi	r28, 0x35	; 53
    5400:	df 4f       	sbci	r29, 0xFF	; 255
    5402:	28 81       	ld	r18, Y
    5404:	39 81       	ldd	r19, Y+1	; 0x01
    5406:	4a 81       	ldd	r20, Y+2	; 0x02
    5408:	5b 81       	ldd	r21, Y+3	; 0x03
    540a:	cb 5c       	subi	r28, 0xCB	; 203
    540c:	d0 40       	sbci	r29, 0x00	; 0
    540e:	c3 01       	movw	r24, r6
    5410:	b2 01       	movw	r22, r4
    5412:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    5416:	9b 01       	movw	r18, r22
    5418:	ac 01       	movw	r20, r24
    541a:	c5 01       	movw	r24, r10
    541c:	b4 01       	movw	r22, r8
    541e:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    5422:	9b 01       	movw	r18, r22
    5424:	ac 01       	movw	r20, r24
    5426:	5f 77       	andi	r21, 0x7F	; 127
    5428:	c7 01       	movw	r24, r14
    542a:	b6 01       	movw	r22, r12
    542c:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5430:	6b 01       	movw	r12, r22
    5432:	7c 01       	movw	r14, r24
		measTotal += fast_bm[i];
		cosAcosB[i] = (alphaDotP*betaDotP)/(rijMagSq*DROPLET_RADIUS_SQ);
		cosAcosBTotal += cosAcosB[i];
	}
	float conf = 0;
	for(uint8_t i=0;i<36;i++){
    5434:	cf 53       	subi	r28, 0x3F	; 63
    5436:	df 4f       	sbci	r29, 0xFF	; 255
    5438:	88 81       	ld	r24, Y
    543a:	99 81       	ldd	r25, Y+1	; 0x01
    543c:	c1 5c       	subi	r28, 0xC1	; 193
    543e:	d0 40       	sbci	r29, 0x00	; 0
    5440:	82 15       	cp	r24, r2
    5442:	93 05       	cpc	r25, r3
    5444:	09 f0       	breq	.+2      	; 0x5448 <calculate_error+0x5d8>
    5446:	bf cf       	rjmp	.-130    	; 0x53c6 <calculate_error+0x556>
		//printf("}");
		//if(e<5) printf(",");
	//}
	//printf("}},\r\n");
	return conf;
}
    5448:	c7 01       	movw	r24, r14
    544a:	b6 01       	movw	r22, r12
    544c:	c4 51       	subi	r28, 0x14	; 20
    544e:	df 4f       	sbci	r29, 0xFF	; 255
    5450:	cd bf       	out	0x3d, r28	; 61
    5452:	de bf       	out	0x3e, r29	; 62
    5454:	df 91       	pop	r29
    5456:	cf 91       	pop	r28
    5458:	1f 91       	pop	r17
    545a:	0f 91       	pop	r16
    545c:	ff 90       	pop	r15
    545e:	ef 90       	pop	r14
    5460:	df 90       	pop	r13
    5462:	cf 90       	pop	r12
    5464:	bf 90       	pop	r11
    5466:	af 90       	pop	r10
    5468:	9f 90       	pop	r9
    546a:	8f 90       	pop	r8
    546c:	7f 90       	pop	r7
    546e:	6f 90       	pop	r6
    5470:	5f 90       	pop	r5
    5472:	4f 90       	pop	r4
    5474:	3f 90       	pop	r3
    5476:	2f 90       	pop	r2
    5478:	08 95       	ret
    547a:	80 e0       	ldi	r24, 0x00	; 0
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	a8 e3       	ldi	r26, 0x38	; 56
    5480:	b2 ec       	ldi	r27, 0xC2	; 194
    5482:	cd 53       	subi	r28, 0x3D	; 61
    5484:	df 4f       	sbci	r29, 0xFF	; 255
    5486:	88 83       	st	Y, r24
    5488:	99 83       	std	Y+1, r25	; 0x01
    548a:	aa 83       	std	Y+2, r26	; 0x02
    548c:	bb 83       	std	Y+3, r27	; 0x03
    548e:	c3 5c       	subi	r28, 0xC3	; 195
    5490:	d0 40       	sbci	r29, 0x00	; 0

	return magicRangeFunc(total);
}

float calculate_error(float r, float b, float h){
	r = r<46 ? 46 : r;
    5492:	81 2c       	mov	r8, r1
    5494:	91 2c       	mov	r9, r1
    5496:	68 e3       	ldi	r22, 0x38	; 56
    5498:	a6 2e       	mov	r10, r22
    549a:	62 e4       	ldi	r22, 0x42	; 66
    549c:	b6 2e       	mov	r11, r22
    549e:	19 cd       	rjmp	.-1486   	; 0x4ed2 <calculate_error+0x62>

000054a0 <calculate_bearing_and_heading>:
	//}
	//printf("}},\r\n");
	return conf;
}

void calculate_bearing_and_heading(float* bearing, float* heading){
    54a0:	2f 92       	push	r2
    54a2:	3f 92       	push	r3
    54a4:	4f 92       	push	r4
    54a6:	5f 92       	push	r5
    54a8:	6f 92       	push	r6
    54aa:	7f 92       	push	r7
    54ac:	8f 92       	push	r8
    54ae:	9f 92       	push	r9
    54b0:	af 92       	push	r10
    54b2:	bf 92       	push	r11
    54b4:	cf 92       	push	r12
    54b6:	df 92       	push	r13
    54b8:	ef 92       	push	r14
    54ba:	ff 92       	push	r15
    54bc:	0f 93       	push	r16
    54be:	1f 93       	push	r17
    54c0:	cf 93       	push	r28
    54c2:	df 93       	push	r29
    54c4:	cd b7       	in	r28, 0x3d	; 61
    54c6:	de b7       	in	r29, 0x3e	; 62
    54c8:	6c 97       	sbiw	r28, 0x1c	; 28
    54ca:	cd bf       	out	0x3d, r28	; 61
    54cc:	de bf       	out	0x3e, r29	; 62
    54ce:	89 8f       	std	Y+25, r24	; 0x19
    54d0:	9a 8f       	std	Y+26, r25	; 0x1a
    54d2:	6b 8f       	std	Y+27, r22	; 0x1b
    54d4:	7c 8f       	std	Y+28, r23	; 0x1c
    54d6:	2c e8       	ldi	r18, 0x8C	; 140
    54d8:	22 2e       	mov	r2, r18
    54da:	23 e2       	ldi	r18, 0x23	; 35
    54dc:	32 2e       	mov	r3, r18
    54de:	87 ed       	ldi	r24, 0xD7	; 215
    54e0:	93 eb       	ldi	r25, 0xB3	; 179
    54e2:	ad e5       	ldi	r26, 0x5D	; 93
    54e4:	bf e3       	ldi	r27, 0x3F	; 63
    54e6:	8d 8b       	std	Y+21, r24	; 0x15
    54e8:	9e 8b       	std	Y+22, r25	; 0x16
    54ea:	af 8b       	std	Y+23, r26	; 0x17
    54ec:	b8 8f       	std	Y+24, r27	; 0x18
    54ee:	80 e0       	ldi	r24, 0x00	; 0
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	a0 e0       	ldi	r26, 0x00	; 0
    54f4:	bf eb       	ldi	r27, 0xBF	; 191
    54f6:	89 8b       	std	Y+17, r24	; 0x11
    54f8:	9a 8b       	std	Y+18, r25	; 0x12
    54fa:	ab 8b       	std	Y+19, r26	; 0x13
    54fc:	bc 8b       	std	Y+20, r27	; 0x14
    54fe:	80 e0       	ldi	r24, 0x00	; 0
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	a0 e8       	ldi	r26, 0x80	; 128
    5504:	bf eb       	ldi	r27, 0xBF	; 191
    5506:	8d 87       	std	Y+13, r24	; 0x0d
    5508:	9e 87       	std	Y+14, r25	; 0x0e
    550a:	af 87       	std	Y+15, r26	; 0x0f
    550c:	b8 8b       	std	Y+16, r27	; 0x10
    550e:	19 86       	std	Y+9, r1	; 0x09
    5510:	1a 86       	std	Y+10, r1	; 0x0a
    5512:	1b 86       	std	Y+11, r1	; 0x0b
    5514:	1c 86       	std	Y+12, r1	; 0x0c
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
    5516:	10 e0       	ldi	r17, 0x00	; 0
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;
    5518:	41 2c       	mov	r4, r1
    551a:	51 2c       	mov	r5, r1
    551c:	32 01       	movw	r6, r4
void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
    551e:	53 01       	movw	r10, r6
    5520:	42 01       	movw	r8, r4

void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
	float bearingY = 0;
    5522:	4d 82       	std	Y+5, r4	; 0x05
    5524:	5e 82       	std	Y+6, r5	; 0x06
    5526:	6f 82       	std	Y+7, r6	; 0x07
    5528:	78 86       	std	Y+8, r7	; 0x08
}

void calculate_bearing_and_heading(float* bearing, float* heading){
	int16_t* fast_bm = (int16_t*)brightMeas;
	
	float bearingX = 0;
    552a:	49 82       	std	Y+1, r4	; 0x01
    552c:	5a 82       	std	Y+2, r5	; 0x02
    552e:	6b 82       	std	Y+3, r6	; 0x03
    5530:	7c 82       	std	Y+4, r7	; 0x04
    5532:	0b ea       	ldi	r16, 0xAB	; 171
    5534:	49 c0       	rjmp	.+146    	; 0x55c8 <calculate_bearing_and_heading+0x128>
    5536:	10 9f       	mul	r17, r16
    5538:	81 2d       	mov	r24, r1
    553a:	11 24       	eor	r1, r1
    553c:	86 95       	lsr	r24
    553e:	86 95       	lsr	r24
    5540:	98 2f       	mov	r25, r24
    5542:	99 0f       	add	r25, r25
    5544:	98 0f       	add	r25, r24
    5546:	99 0f       	add	r25, r25
    5548:	21 2f       	mov	r18, r17
    554a:	29 1b       	sub	r18, r25
    554c:	30 e0       	ldi	r19, 0x00	; 0
    554e:	e6 e0       	ldi	r30, 0x06	; 6
    5550:	f0 e0       	ldi	r31, 0x00	; 0
    5552:	e8 1b       	sub	r30, r24
    5554:	f1 09       	sbc	r31, r1
    5556:	cf 01       	movw	r24, r30
    5558:	82 0f       	add	r24, r18
    555a:	93 1f       	adc	r25, r19
    555c:	66 e0       	ldi	r22, 0x06	; 6
    555e:	70 e0       	ldi	r23, 0x00	; 0
    5560:	0e 94 ca 4b 	call	0x9794	; 0x9794 <__divmodhi4>
    5564:	fc 01       	movw	r30, r24
    5566:	ee 0f       	add	r30, r30
    5568:	ff 1f       	adc	r31, r31
    556a:	ee 0f       	add	r30, r30
    556c:	ff 1f       	adc	r31, r31
    556e:	ee 0f       	add	r30, r30
    5570:	ff 1f       	adc	r31, r31
    5572:	e7 5a       	subi	r30, 0xA7	; 167
    5574:	fe 4d       	sbci	r31, 0xDE	; 222
    5576:	84 81       	ldd	r24, Z+4	; 0x04
    5578:	95 81       	ldd	r25, Z+5	; 0x05
    557a:	a6 81       	ldd	r26, Z+6	; 0x06
    557c:	b7 81       	ldd	r27, Z+7	; 0x07
    557e:	89 87       	std	Y+9, r24	; 0x09
    5580:	9a 87       	std	Y+10, r25	; 0x0a
    5582:	ab 87       	std	Y+11, r26	; 0x0b
    5584:	bc 87       	std	Y+12, r27	; 0x0c
    5586:	80 81       	ld	r24, Z
    5588:	91 81       	ldd	r25, Z+1	; 0x01
    558a:	a2 81       	ldd	r26, Z+2	; 0x02
    558c:	b3 81       	ldd	r27, Z+3	; 0x03
    558e:	8d 87       	std	Y+13, r24	; 0x0d
    5590:	9e 87       	std	Y+14, r25	; 0x0e
    5592:	af 87       	std	Y+15, r26	; 0x0f
    5594:	b8 8b       	std	Y+16, r27	; 0x10
    5596:	22 0f       	add	r18, r18
    5598:	33 1f       	adc	r19, r19
    559a:	22 0f       	add	r18, r18
    559c:	33 1f       	adc	r19, r19
    559e:	22 0f       	add	r18, r18
    55a0:	33 1f       	adc	r19, r19
    55a2:	f9 01       	movw	r30, r18
    55a4:	e7 54       	subi	r30, 0x47	; 71
    55a6:	fe 4d       	sbci	r31, 0xDE	; 222
    55a8:	84 81       	ldd	r24, Z+4	; 0x04
    55aa:	95 81       	ldd	r25, Z+5	; 0x05
    55ac:	a6 81       	ldd	r26, Z+6	; 0x06
    55ae:	b7 81       	ldd	r27, Z+7	; 0x07
    55b0:	89 8b       	std	Y+17, r24	; 0x11
    55b2:	9a 8b       	std	Y+18, r25	; 0x12
    55b4:	ab 8b       	std	Y+19, r26	; 0x13
    55b6:	bc 8b       	std	Y+20, r27	; 0x14
    55b8:	80 81       	ld	r24, Z
    55ba:	91 81       	ldd	r25, Z+1	; 0x01
    55bc:	a2 81       	ldd	r26, Z+2	; 0x02
    55be:	b3 81       	ldd	r27, Z+3	; 0x03
    55c0:	8d 8b       	std	Y+21, r24	; 0x15
    55c2:	9e 8b       	std	Y+22, r25	; 0x16
    55c4:	af 8b       	std	Y+23, r26	; 0x17
    55c6:	b8 8f       	std	Y+24, r27	; 0x18
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
		
		bearingX+=fast_bm[i]*getCosBearingBasis(i/6,i%6);
    55c8:	d1 01       	movw	r26, r2
    55ca:	6d 91       	ld	r22, X+
    55cc:	7d 91       	ld	r23, X+
    55ce:	1d 01       	movw	r2, r26
    55d0:	07 2e       	mov	r0, r23
    55d2:	00 0c       	add	r0, r0
    55d4:	88 0b       	sbc	r24, r24
    55d6:	99 0b       	sbc	r25, r25
    55d8:	0e 94 81 48 	call	0x9102	; 0x9102 <__floatsisf>
    55dc:	6b 01       	movw	r12, r22
    55de:	7c 01       	movw	r14, r24
    55e0:	2d 89       	ldd	r18, Y+21	; 0x15
    55e2:	3e 89       	ldd	r19, Y+22	; 0x16
    55e4:	4f 89       	ldd	r20, Y+23	; 0x17
    55e6:	58 8d       	ldd	r21, Y+24	; 0x18
    55e8:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    55ec:	9b 01       	movw	r18, r22
    55ee:	ac 01       	movw	r20, r24
    55f0:	69 81       	ldd	r22, Y+1	; 0x01
    55f2:	7a 81       	ldd	r23, Y+2	; 0x02
    55f4:	8b 81       	ldd	r24, Y+3	; 0x03
    55f6:	9c 81       	ldd	r25, Y+4	; 0x04
    55f8:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    55fc:	69 83       	std	Y+1, r22	; 0x01
    55fe:	7a 83       	std	Y+2, r23	; 0x02
    5600:	8b 83       	std	Y+3, r24	; 0x03
    5602:	9c 83       	std	Y+4, r25	; 0x04
		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
    5604:	29 89       	ldd	r18, Y+17	; 0x11
    5606:	3a 89       	ldd	r19, Y+18	; 0x12
    5608:	4b 89       	ldd	r20, Y+19	; 0x13
    560a:	5c 89       	ldd	r21, Y+20	; 0x14
    560c:	c7 01       	movw	r24, r14
    560e:	b6 01       	movw	r22, r12
    5610:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    5614:	9b 01       	movw	r18, r22
    5616:	ac 01       	movw	r20, r24
    5618:	6d 81       	ldd	r22, Y+5	; 0x05
    561a:	7e 81       	ldd	r23, Y+6	; 0x06
    561c:	8f 81       	ldd	r24, Y+7	; 0x07
    561e:	98 85       	ldd	r25, Y+8	; 0x08
    5620:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5624:	6d 83       	std	Y+5, r22	; 0x05
    5626:	7e 83       	std	Y+6, r23	; 0x06
    5628:	8f 83       	std	Y+7, r24	; 0x07
    562a:	98 87       	std	Y+8, r25	; 0x08
		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
    562c:	2d 85       	ldd	r18, Y+13	; 0x0d
    562e:	3e 85       	ldd	r19, Y+14	; 0x0e
    5630:	4f 85       	ldd	r20, Y+15	; 0x0f
    5632:	58 89       	ldd	r21, Y+16	; 0x10
    5634:	c7 01       	movw	r24, r14
    5636:	b6 01       	movw	r22, r12
    5638:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    563c:	9b 01       	movw	r18, r22
    563e:	ac 01       	movw	r20, r24
    5640:	c5 01       	movw	r24, r10
    5642:	b4 01       	movw	r22, r8
    5644:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5648:	4b 01       	movw	r8, r22
    564a:	5c 01       	movw	r10, r24
		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
    564c:	29 85       	ldd	r18, Y+9	; 0x09
    564e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5650:	4b 85       	ldd	r20, Y+11	; 0x0b
    5652:	5c 85       	ldd	r21, Y+12	; 0x0c
    5654:	c7 01       	movw	r24, r14
    5656:	b6 01       	movw	r22, r12
    5658:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    565c:	9b 01       	movw	r18, r22
    565e:	ac 01       	movw	r20, r24
    5660:	c3 01       	movw	r24, r6
    5662:	b2 01       	movw	r22, r4
    5664:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5668:	2b 01       	movw	r4, r22
    566a:	3c 01       	movw	r6, r24
	float bearingX = 0;
	float bearingY = 0;
	float headingX = 0;
	float headingY = 0;

	for(uint8_t i=0;i<36;i++){
    566c:	1f 5f       	subi	r17, 0xFF	; 255
    566e:	14 32       	cpi	r17, 0x24	; 36
    5670:	09 f0       	breq	.+2      	; 0x5674 <calculate_bearing_and_heading+0x1d4>
    5672:	61 cf       	rjmp	.-318    	; 0x5536 <calculate_bearing_and_heading+0x96>
		bearingY+=fast_bm[i]*getSinBearingBasis(i/6,i%6);
		headingX+=fast_bm[i]*getCosHeadingBasis(i/6,i%6);
		headingY+=fast_bm[i]*getSinHeadingBasis(i/6,i%6);
	}
	
	*bearing = atan2f(bearingY, bearingX);	
    5674:	29 81       	ldd	r18, Y+1	; 0x01
    5676:	3a 81       	ldd	r19, Y+2	; 0x02
    5678:	4b 81       	ldd	r20, Y+3	; 0x03
    567a:	5c 81       	ldd	r21, Y+4	; 0x04
    567c:	6d 81       	ldd	r22, Y+5	; 0x05
    567e:	7e 81       	ldd	r23, Y+6	; 0x06
    5680:	8f 81       	ldd	r24, Y+7	; 0x07
    5682:	98 85       	ldd	r25, Y+8	; 0x08
    5684:	0e 94 34 47 	call	0x8e68	; 0x8e68 <atan2>
    5688:	a9 8d       	ldd	r26, Y+25	; 0x19
    568a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    568c:	6d 93       	st	X+, r22
    568e:	7d 93       	st	X+, r23
    5690:	8d 93       	st	X+, r24
    5692:	9c 93       	st	X, r25
    5694:	13 97       	sbiw	r26, 0x03	; 3
	*heading = atan2f(headingY, headingX);
    5696:	a5 01       	movw	r20, r10
    5698:	94 01       	movw	r18, r8
    569a:	c3 01       	movw	r24, r6
    569c:	b2 01       	movw	r22, r4
    569e:	0e 94 34 47 	call	0x8e68	; 0x8e68 <atan2>
    56a2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    56a4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    56a6:	60 83       	st	Z, r22
    56a8:	71 83       	std	Z+1, r23	; 0x01
    56aa:	82 83       	std	Z+2, r24	; 0x02
    56ac:	93 83       	std	Z+3, r25	; 0x03
}
    56ae:	6c 96       	adiw	r28, 0x1c	; 28
    56b0:	cd bf       	out	0x3d, r28	; 61
    56b2:	de bf       	out	0x3e, r29	; 62
    56b4:	df 91       	pop	r29
    56b6:	cf 91       	pop	r28
    56b8:	1f 91       	pop	r17
    56ba:	0f 91       	pop	r16
    56bc:	ff 90       	pop	r15
    56be:	ef 90       	pop	r14
    56c0:	df 90       	pop	r13
    56c2:	cf 90       	pop	r12
    56c4:	bf 90       	pop	r11
    56c6:	af 90       	pop	r10
    56c8:	9f 90       	pop	r9
    56ca:	8f 90       	pop	r8
    56cc:	7f 90       	pop	r7
    56ce:	6f 90       	pop	r6
    56d0:	5f 90       	pop	r5
    56d2:	4f 90       	pop	r4
    56d4:	3f 90       	pop	r3
    56d6:	2f 90       	pop	r2
    56d8:	08 95       	ret

000056da <useRnbData>:
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
	}
}

void useRnbData(){
    56da:	2f 92       	push	r2
    56dc:	3f 92       	push	r3
    56de:	4f 92       	push	r4
    56e0:	5f 92       	push	r5
    56e2:	6f 92       	push	r6
    56e4:	7f 92       	push	r7
    56e6:	8f 92       	push	r8
    56e8:	9f 92       	push	r9
    56ea:	af 92       	push	r10
    56ec:	bf 92       	push	r11
    56ee:	cf 92       	push	r12
    56f0:	df 92       	push	r13
    56f2:	ef 92       	push	r14
    56f4:	ff 92       	push	r15
    56f6:	0f 93       	push	r16
    56f8:	1f 93       	push	r17
    56fa:	cf 93       	push	r28
    56fc:	df 93       	push	r29
    56fe:	cd b7       	in	r28, 0x3d	; 61
    5700:	de b7       	in	r29, 0x3e	; 62
    5702:	2c 97       	sbiw	r28, 0x0c	; 12
    5704:	cd bf       	out	0x3d, r28	; 61
    5706:	de bf       	out	0x3e, r29	; 62
    5708:	ac e8       	ldi	r26, 0x8C	; 140
    570a:	b3 e2       	ldi	r27, 0x23	; 35
    570c:	04 ed       	ldi	r16, 0xD4	; 212
    570e:	13 e2       	ldi	r17, 0x23	; 35
	*heading = atan2f(headingY, headingX);
}

static int16_t processBrightMeas(void){
	int16_t val;
	int16_t valSum=0;
    5710:	c1 2c       	mov	r12, r1
    5712:	d1 2c       	mov	r13, r1
	uint8_t allColZeroCheck = 0b00111111;
    5714:	6f e3       	ldi	r22, 0x3F	; 63
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
	}
}

void useRnbData(){
    5716:	fd 01       	movw	r30, r26
    5718:	20 e0       	ldi	r18, 0x00	; 0
    571a:	30 e0       	ldi	r19, 0x00	; 0
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
			val = brightMeas[e][s];
    571c:	41 91       	ld	r20, Z+
    571e:	51 91       	ld	r21, Z+
			allColZeroCheck &= ~((!!val)<<s);	
    5720:	81 e0       	ldi	r24, 0x01	; 1
    5722:	90 e0       	ldi	r25, 0x00	; 0
    5724:	41 15       	cp	r20, r1
    5726:	51 05       	cpc	r21, r1
    5728:	11 f4       	brne	.+4      	; 0x572e <useRnbData+0x54>
    572a:	80 e0       	ldi	r24, 0x00	; 0
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	02 2e       	mov	r0, r18
    5730:	01 c0       	rjmp	.+2      	; 0x5734 <useRnbData+0x5a>
    5732:	88 0f       	add	r24, r24
    5734:	0a 94       	dec	r0
    5736:	ea f7       	brpl	.-6      	; 0x5732 <useRnbData+0x58>
    5738:	80 95       	com	r24
    573a:	68 23       	and	r22, r24
			//val=val*(val>0);
			brightMeas[e][s] = val;
			valSum+=val;	
    573c:	c4 0e       	add	r12, r20
    573e:	d5 1e       	adc	r13, r21
    5740:	2f 5f       	subi	r18, 0xFF	; 255
    5742:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t val;
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
		for(uint8_t s = 0; s < 6; s++){
    5744:	26 30       	cpi	r18, 0x06	; 6
    5746:	31 05       	cpc	r19, r1
    5748:	49 f7       	brne	.-46     	; 0x571c <useRnbData+0x42>
    574a:	1c 96       	adiw	r26, 0x0c	; 12
static int16_t processBrightMeas(void){
	int16_t val;
	int16_t valSum=0;
	uint8_t allColZeroCheck = 0b00111111;

	for(uint8_t e = 0; e < 6; e++){
    574c:	0a 17       	cp	r16, r26
    574e:	1b 07       	cpc	r17, r27
    5750:	11 f7       	brne	.-60     	; 0x5716 <useRnbData+0x3c>
    5752:	e6 2e       	mov	r14, r22
    5754:	f1 2c       	mov	r15, r1
    5756:	81 2c       	mov	r8, r1
    5758:	91 2c       	mov	r9, r1
    575a:	a1 2c       	mov	r10, r1
    575c:	b1 2c       	mov	r11, r1
    575e:	e0 e0       	ldi	r30, 0x00	; 0
    5760:	40 91 d4 23 	lds	r20, 0x23D4	; 0x8023d4 <sensorHealthHistory>
    5764:	50 91 d5 23 	lds	r21, 0x23D5	; 0x8023d5 <sensorHealthHistory+0x1>
    5768:	60 91 d6 23 	lds	r22, 0x23D6	; 0x8023d6 <sensorHealthHistory+0x2>
    576c:	70 91 d7 23 	lds	r23, 0x23D7	; 0x8023d7 <sensorHealthHistory+0x3>
	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
    5770:	0f e0       	ldi	r16, 0x0F	; 15
    5772:	10 e0       	ldi	r17, 0x00	; 0
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
    5774:	66 24       	eor	r6, r6
    5776:	63 94       	inc	r6
    5778:	71 2c       	mov	r7, r1
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
    577a:	22 e7       	ldi	r18, 0x72	; 114
    577c:	22 2e       	mov	r2, r18
    577e:	28 e0       	ldi	r18, 0x08	; 8
    5780:	32 2e       	mov	r3, r18
    5782:	34 c0       	rjmp	.+104    	; 0x57ec <useRnbData+0x112>
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
			sensorHealthHistory+=(1<<(4*i));
    5784:	c3 01       	movw	r24, r6
    5786:	08 2c       	mov	r0, r8
    5788:	02 c0       	rjmp	.+4      	; 0x578e <useRnbData+0xb4>
    578a:	88 0f       	add	r24, r24
    578c:	99 1f       	adc	r25, r25
    578e:	0a 94       	dec	r0
    5790:	e2 f7       	brpl	.-8      	; 0x578a <useRnbData+0xb0>
    5792:	09 2e       	mov	r0, r25
    5794:	00 0c       	add	r0, r0
    5796:	aa 0b       	sbc	r26, r26
    5798:	bb 0b       	sbc	r27, r27
    579a:	84 0f       	add	r24, r20
    579c:	95 1f       	adc	r25, r21
    579e:	a6 1f       	adc	r26, r22
    57a0:	b7 1f       	adc	r27, r23
    57a2:	ac 01       	movw	r20, r24
    57a4:	bd 01       	movw	r22, r26
    57a6:	80 93 d4 23 	sts	0x23D4, r24	; 0x8023d4 <sensorHealthHistory>
    57aa:	90 93 d5 23 	sts	0x23D5, r25	; 0x8023d5 <sensorHealthHistory+0x1>
    57ae:	a0 93 d6 23 	sts	0x23D6, r26	; 0x8023d6 <sensorHealthHistory+0x2>
    57b2:	b0 93 d7 23 	sts	0x23D7, r27	; 0x8023d7 <sensorHealthHistory+0x3>
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
    57b6:	05 2c       	mov	r0, r5
    57b8:	04 c0       	rjmp	.+8      	; 0x57c2 <useRnbData+0xe8>
    57ba:	b6 95       	lsr	r27
    57bc:	a7 95       	ror	r26
    57be:	97 95       	ror	r25
    57c0:	87 95       	ror	r24
    57c2:	0a 94       	dec	r0
    57c4:	d2 f7       	brpl	.-12     	; 0x57ba <useRnbData+0xe0>
    57c6:	8f 70       	andi	r24, 0x0F	; 15
    57c8:	99 27       	eor	r25, r25
    57ca:	aa 27       	eor	r26, r26
    57cc:	bb 27       	eor	r27, r27
    57ce:	0f 97       	sbiw	r24, 0x0f	; 15
    57d0:	a1 05       	cpc	r26, r1
    57d2:	b1 05       	cpc	r27, r1
    57d4:	09 f4       	brne	.+2      	; 0x57d8 <useRnbData+0xfe>
    57d6:	8f c1       	rjmp	.+798    	; 0x5af6 <useRnbData+0x41c>
    57d8:	8f ef       	ldi	r24, 0xFF	; 255
    57da:	a8 1a       	sub	r10, r24
    57dc:	b8 0a       	sbc	r11, r24
    57de:	94 e0       	ldi	r25, 0x04	; 4
    57e0:	89 0e       	add	r8, r25
    57e2:	91 1c       	adc	r9, r1
			valSum+=val;	
		}
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
    57e4:	a6 e0       	ldi	r26, 0x06	; 6
    57e6:	aa 16       	cp	r10, r26
    57e8:	b1 04       	cpc	r11, r1
    57ea:	39 f1       	breq	.+78     	; 0x583a <useRnbData+0x160>
		if(allColZeroCheck&(1<<i)){
    57ec:	95 01       	movw	r18, r10
    57ee:	c7 01       	movw	r24, r14
    57f0:	0a 2c       	mov	r0, r10
    57f2:	02 c0       	rjmp	.+4      	; 0x57f8 <useRnbData+0x11e>
    57f4:	95 95       	asr	r25
    57f6:	87 95       	ror	r24
    57f8:	0a 94       	dec	r0
    57fa:	e2 f7       	brpl	.-8      	; 0x57f4 <useRnbData+0x11a>
			sensorHealthHistory+=(1<<(4*i));
    57fc:	58 2c       	mov	r5, r8
		}
	}

	uint8_t problem = 0;
	for(uint8_t i = 0; i<6; i++){
		if(allColZeroCheck&(1<<i)){
    57fe:	80 fd       	sbrc	r24, 0
    5800:	c1 cf       	rjmp	.-126    	; 0x5784 <useRnbData+0xaa>
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
    5802:	c8 01       	movw	r24, r16
    5804:	08 2c       	mov	r0, r8
    5806:	02 c0       	rjmp	.+4      	; 0x580c <useRnbData+0x132>
    5808:	88 0f       	add	r24, r24
    580a:	99 1f       	adc	r25, r25
    580c:	0a 94       	dec	r0
    580e:	e2 f7       	brpl	.-8      	; 0x5808 <useRnbData+0x12e>
    5810:	80 95       	com	r24
    5812:	90 95       	com	r25
    5814:	09 2e       	mov	r0, r25
    5816:	00 0c       	add	r0, r0
    5818:	aa 0b       	sbc	r26, r26
    581a:	bb 0b       	sbc	r27, r27
    581c:	84 23       	and	r24, r20
    581e:	95 23       	and	r25, r21
    5820:	a6 23       	and	r26, r22
    5822:	b7 23       	and	r27, r23
    5824:	ac 01       	movw	r20, r24
    5826:	bd 01       	movw	r22, r26
    5828:	80 93 d4 23 	sts	0x23D4, r24	; 0x8023d4 <sensorHealthHistory>
    582c:	90 93 d5 23 	sts	0x23D5, r25	; 0x8023d5 <sensorHealthHistory+0x1>
    5830:	a0 93 d6 23 	sts	0x23D6, r26	; 0x8023d6 <sensorHealthHistory+0x2>
    5834:	b0 93 d7 23 	sts	0x23D7, r27	; 0x8023d7 <sensorHealthHistory+0x3>
    5838:	be cf       	rjmp	.-132    	; 0x57b6 <useRnbData+0xdc>
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
			sensorHealthHistory&=~(0xF<<(4*i));
			problem = 1;
		}		
	}
	if(problem){
    583a:	ee 23       	and	r30, r30
    583c:	09 f4       	brne	.+2      	; 0x5840 <useRnbData+0x166>
    583e:	57 c0       	rjmp	.+174    	; 0x58ee <useRnbData+0x214>
void setRGB(uint8_t r, uint8_t g, uint8_t b);
void setHSV(uint16_t h, uint8_t s, uint8_t v);
void hsvToRGB(uint16_t h, uint8_t s, uint8_t v, uint8_t* r, uint8_t* g, uint8_t* b);

inline void warningLightSequence(void){
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    5840:	44 e6       	ldi	r20, 0x64	; 100
    5842:	64 e6       	ldi	r22, 0x64	; 100
    5844:	80 e0       	ldi	r24, 0x00	; 0
    5846:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    584a:	8c e2       	ldi	r24, 0x2C	; 44
    584c:	91 e0       	ldi	r25, 0x01	; 1
    584e:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    5852:	44 e6       	ldi	r20, 0x64	; 100
    5854:	60 e0       	ldi	r22, 0x00	; 0
    5856:	84 e6       	ldi	r24, 0x64	; 100
    5858:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    585c:	8c e2       	ldi	r24, 0x2C	; 44
    585e:	91 e0       	ldi	r25, 0x01	; 1
    5860:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    5864:	40 e0       	ldi	r20, 0x00	; 0
    5866:	64 e6       	ldi	r22, 0x64	; 100
    5868:	84 e6       	ldi	r24, 0x64	; 100
    586a:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    586e:	8c e2       	ldi	r24, 0x2C	; 44
    5870:	91 e0       	ldi	r25, 0x01	; 1
    5872:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    5876:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <ledOff>
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    587a:	44 e6       	ldi	r20, 0x64	; 100
    587c:	64 e6       	ldi	r22, 0x64	; 100
    587e:	80 e0       	ldi	r24, 0x00	; 0
    5880:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    5884:	8c e2       	ldi	r24, 0x2C	; 44
    5886:	91 e0       	ldi	r25, 0x01	; 1
    5888:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    588c:	44 e6       	ldi	r20, 0x64	; 100
    588e:	60 e0       	ldi	r22, 0x00	; 0
    5890:	84 e6       	ldi	r24, 0x64	; 100
    5892:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    5896:	8c e2       	ldi	r24, 0x2C	; 44
    5898:	91 e0       	ldi	r25, 0x01	; 1
    589a:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    589e:	40 e0       	ldi	r20, 0x00	; 0
    58a0:	64 e6       	ldi	r22, 0x64	; 100
    58a2:	84 e6       	ldi	r24, 0x64	; 100
    58a4:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    58a8:	8c e2       	ldi	r24, 0x2C	; 44
    58aa:	91 e0       	ldi	r25, 0x01	; 1
    58ac:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    58b0:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <ledOff>
	setRGB(0,100,100); delayMS(300); setRGB(100,0,100); delayMS(300); setRGB(100,100,0); delayMS(300); ledOff();
    58b4:	44 e6       	ldi	r20, 0x64	; 100
    58b6:	64 e6       	ldi	r22, 0x64	; 100
    58b8:	80 e0       	ldi	r24, 0x00	; 0
    58ba:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    58be:	8c e2       	ldi	r24, 0x2C	; 44
    58c0:	91 e0       	ldi	r25, 0x01	; 1
    58c2:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    58c6:	44 e6       	ldi	r20, 0x64	; 100
    58c8:	60 e0       	ldi	r22, 0x00	; 0
    58ca:	84 e6       	ldi	r24, 0x64	; 100
    58cc:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    58d0:	8c e2       	ldi	r24, 0x2C	; 44
    58d2:	91 e0       	ldi	r25, 0x01	; 1
    58d4:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    58d8:	40 e0       	ldi	r20, 0x00	; 0
    58da:	64 e6       	ldi	r22, 0x64	; 100
    58dc:	84 e6       	ldi	r24, 0x64	; 100
    58de:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    58e2:	8c e2       	ldi	r24, 0x2C	; 44
    58e4:	91 e0       	ldi	r25, 0x01	; 1
    58e6:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    58ea:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <ledOff>
	//uint32_t start = get_time();
	int16_t matrixSum = processBrightMeas();
	//if(rand_byte()%2) broadcastBrightMeas();
	float bearing, heading;
	float error;
	calculate_bearing_and_heading(&bearing, &heading);
    58ee:	be 01       	movw	r22, r28
    58f0:	6f 5f       	subi	r22, 0xFF	; 255
    58f2:	7f 4f       	sbci	r23, 0xFF	; 255
    58f4:	ce 01       	movw	r24, r28
    58f6:	05 96       	adiw	r24, 0x05	; 5
    58f8:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <calculate_bearing_and_heading>
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
    58fc:	b6 01       	movw	r22, r12
    58fe:	dd 0c       	add	r13, r13
    5900:	88 0b       	sbc	r24, r24
    5902:	99 0b       	sbc	r25, r25
    5904:	0e 94 81 48 	call	0x9102	; 0x9102 <__floatsisf>
    5908:	20 e2       	ldi	r18, 0x20	; 32
    590a:	3b eb       	ldi	r19, 0xBB	; 187
    590c:	44 e0       	ldi	r20, 0x04	; 4
    590e:	50 e4       	ldi	r21, 0x40	; 64
    5910:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    5914:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <magicRangeFunc>
    5918:	4b 01       	movw	r8, r22
    591a:	5c 01       	movw	r10, r24
	if(initialRange!=0&&!isnanf(initialRange)){	
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	30 e0       	ldi	r19, 0x00	; 0
    5920:	a9 01       	movw	r20, r18
    5922:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__cmpsf2>
    5926:	88 23       	and	r24, r24
    5928:	09 f4       	brne	.+2      	; 0x592c <useRnbData+0x252>
    592a:	ca c0       	rjmp	.+404    	; 0x5ac0 <useRnbData+0x3e6>
    592c:	a5 01       	movw	r20, r10
    592e:	94 01       	movw	r18, r8
    5930:	c5 01       	movw	r24, r10
    5932:	b4 01       	movw	r22, r8
    5934:	0e 94 8d 4b 	call	0x971a	; 0x971a <__unordsf2>
    5938:	81 11       	cpse	r24, r1
    593a:	c2 c0       	rjmp	.+388    	; 0x5ac0 <useRnbData+0x3e6>
		float range = calculate_range(initialRange, bearing, heading);
    593c:	89 81       	ldd	r24, Y+1	; 0x01
    593e:	9a 81       	ldd	r25, Y+2	; 0x02
    5940:	ab 81       	ldd	r26, Y+3	; 0x03
    5942:	bc 81       	ldd	r27, Y+4	; 0x04
    5944:	89 87       	std	Y+9, r24	; 0x09
    5946:	9a 87       	std	Y+10, r25	; 0x0a
    5948:	ab 87       	std	Y+11, r26	; 0x0b
    594a:	bc 87       	std	Y+12, r27	; 0x0c
    594c:	4d 80       	ldd	r4, Y+5	; 0x05
    594e:	5e 80       	ldd	r5, Y+6	; 0x06
    5950:	6f 80       	ldd	r6, Y+7	; 0x07
    5952:	78 84       	ldd	r7, Y+8	; 0x08
    5954:	7c 01       	movw	r14, r24
    5956:	8d 01       	movw	r16, r26
    5958:	a3 01       	movw	r20, r6
    595a:	92 01       	movw	r18, r4
    595c:	c5 01       	movw	r24, r10
    595e:	b4 01       	movw	r22, r8
    5960:	0e 94 49 25 	call	0x4a92	; 0x4a92 <calculate_range>
    5964:	4b 01       	movw	r8, r22
    5966:	5c 01       	movw	r10, r24
		if(!isnanf(range)){
    5968:	9b 01       	movw	r18, r22
    596a:	ac 01       	movw	r20, r24
    596c:	0e 94 8d 4b 	call	0x971a	; 0x971a <__unordsf2>
    5970:	81 11       	cpse	r24, r1
    5972:	a6 c0       	rjmp	.+332    	; 0x5ac0 <useRnbData+0x3e6>
			if(range<2*DROPLET_RADIUS) range=46;
    5974:	20 e0       	ldi	r18, 0x00	; 0
    5976:	30 e0       	ldi	r19, 0x00	; 0
    5978:	40 e3       	ldi	r20, 0x30	; 48
    597a:	52 e4       	ldi	r21, 0x42	; 66
    597c:	c5 01       	movw	r24, r10
    597e:	b4 01       	movw	r22, r8
    5980:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__cmpsf2>
    5984:	87 fd       	sbrc	r24, 7
    5986:	e3 c0       	rjmp	.+454    	; 0x5b4e <useRnbData+0x474>
			error = calculate_error(range, bearing, heading);
    5988:	a3 01       	movw	r20, r6
    598a:	92 01       	movw	r18, r4
    598c:	c5 01       	movw	r24, r10
    598e:	b4 01       	movw	r22, r8
    5990:	0e 94 38 27 	call	0x4e70	; 0x4e70 <calculate_error>
    5994:	6b 01       	movw	r12, r22
    5996:	7c 01       	movw	r14, r24
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    5998:	20 e0       	ldi	r18, 0x00	; 0
    599a:	30 e0       	ldi	r19, 0x00	; 0
    599c:	4c ed       	ldi	r20, 0xDC	; 220
    599e:	52 e4       	ldi	r21, 0x42	; 66
    59a0:	c5 01       	movw	r24, r10
    59a2:	b4 01       	movw	r22, r8
    59a4:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__cmpsf2>
    59a8:	87 fd       	sbrc	r24, 7
    59aa:	1e c1       	rjmp	.+572    	; 0x5be8 <useRnbData+0x50e>
    59ac:	20 e0       	ldi	r18, 0x00	; 0
    59ae:	30 e0       	ldi	r19, 0x00	; 0
    59b0:	48 e4       	ldi	r20, 0x48	; 72
    59b2:	53 e4       	ldi	r21, 0x43	; 67
    59b4:	c5 01       	movw	r24, r10
    59b6:	b4 01       	movw	r22, r8
    59b8:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__cmpsf2>
    59bc:	87 fd       	sbrc	r24, 7
    59be:	e4 c0       	rjmp	.+456    	; 0x5b88 <useRnbData+0x4ae>
    59c0:	20 e0       	ldi	r18, 0x00	; 0
    59c2:	30 e0       	ldi	r19, 0x00	; 0
    59c4:	48 e4       	ldi	r20, 0x48	; 72
    59c6:	53 e4       	ldi	r21, 0x43	; 67
    59c8:	c5 01       	movw	r24, r10
    59ca:	b4 01       	movw	r22, r8
    59cc:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <__gesf2>
    59d0:	18 16       	cp	r1, r24
    59d2:	0c f4       	brge	.+2      	; 0x59d6 <useRnbData+0x2fc>
    59d4:	75 c0       	rjmp	.+234    	; 0x5ac0 <useRnbData+0x3e6>
				return;
			}else{
				//printf("\r\n");
			}
			
			last_good_rnb.id = rnbCmdID;
    59d6:	80 91 7d 26 	lds	r24, 0x267D	; 0x80267d <rnbCmdID>
    59da:	90 91 7e 26 	lds	r25, 0x267E	; 0x80267e <rnbCmdID+0x1>
    59de:	80 93 9f 24 	sts	0x249F, r24	; 0x80249f <last_good_rnb+0x6>
    59e2:	90 93 a0 24 	sts	0x24A0, r25	; 0x8024a0 <last_good_rnb+0x7>
			last_good_rnb.range		= (uint16_t)(range);
    59e6:	c5 01       	movw	r24, r10
    59e8:	b4 01       	movw	r22, r8
    59ea:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    59ee:	60 93 99 24 	sts	0x2499, r22	; 0x802499 <last_good_rnb>
    59f2:	70 93 9a 24 	sts	0x249A, r23	; 0x80249a <last_good_rnb+0x1>
inline int16_t prettyAngleDeg(int16_t angle){
	return (angle>=0) ? (( (angle + 180) % 360 ) - 180) : (( (angle - 180) % 360 ) + 180);
}

inline float prettyAngle(float angle){
	return (angle>=0.0) ? ( fmodf(angle + M_PI, 2.0*M_PI) - M_PI ) : ( fmodf(angle - M_PI, 2.0*M_PI) + M_PI );
    59f6:	20 e0       	ldi	r18, 0x00	; 0
    59f8:	30 e0       	ldi	r19, 0x00	; 0
    59fa:	a9 01       	movw	r20, r18
    59fc:	c3 01       	movw	r24, r6
    59fe:	b2 01       	movw	r22, r4
    5a00:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <__gesf2>
    5a04:	2b ed       	ldi	r18, 0xDB	; 219
    5a06:	3f e0       	ldi	r19, 0x0F	; 15
    5a08:	49 e4       	ldi	r20, 0x49	; 73
    5a0a:	50 e4       	ldi	r21, 0x40	; 64
    5a0c:	87 fd       	sbrc	r24, 7
    5a0e:	c8 c0       	rjmp	.+400    	; 0x5ba0 <useRnbData+0x4c6>
    5a10:	c3 01       	movw	r24, r6
    5a12:	b2 01       	movw	r22, r4
    5a14:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5a18:	2b ed       	ldi	r18, 0xDB	; 219
    5a1a:	3f e0       	ldi	r19, 0x0F	; 15
    5a1c:	49 ec       	ldi	r20, 0xC9	; 201
    5a1e:	50 e4       	ldi	r21, 0x40	; 64
    5a20:	0e 94 c7 48 	call	0x918e	; 0x918e <fmod>
    5a24:	2b ed       	ldi	r18, 0xDB	; 219
    5a26:	3f e0       	ldi	r19, 0x0F	; 15
    5a28:	49 e4       	ldi	r20, 0x49	; 73
    5a2a:	50 e4       	ldi	r21, 0x40	; 64
    5a2c:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
			last_good_rnb.bearing	= (int16_t)radToDeg(bearing);
    5a30:	2b ed       	ldi	r18, 0xDB	; 219
    5a32:	3f e0       	ldi	r19, 0x0F	; 15
    5a34:	49 e4       	ldi	r20, 0x49	; 73
    5a36:	50 e4       	ldi	r21, 0x40	; 64
    5a38:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    5a3c:	20 e0       	ldi	r18, 0x00	; 0
    5a3e:	30 e0       	ldi	r19, 0x00	; 0
    5a40:	44 e3       	ldi	r20, 0x34	; 52
    5a42:	53 e4       	ldi	r21, 0x43	; 67
    5a44:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    5a48:	0e 94 49 48 	call	0x9092	; 0x9092 <__fixsfsi>
    5a4c:	60 93 9b 24 	sts	0x249B, r22	; 0x80249b <last_good_rnb+0x2>
    5a50:	70 93 9c 24 	sts	0x249C, r23	; 0x80249c <last_good_rnb+0x3>
    5a54:	20 e0       	ldi	r18, 0x00	; 0
    5a56:	30 e0       	ldi	r19, 0x00	; 0
    5a58:	a9 01       	movw	r20, r18
    5a5a:	69 85       	ldd	r22, Y+9	; 0x09
    5a5c:	7a 85       	ldd	r23, Y+10	; 0x0a
    5a5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a60:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a62:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <__gesf2>
    5a66:	2b ed       	ldi	r18, 0xDB	; 219
    5a68:	3f e0       	ldi	r19, 0x0F	; 15
    5a6a:	49 e4       	ldi	r20, 0x49	; 73
    5a6c:	50 e4       	ldi	r21, 0x40	; 64
    5a6e:	87 fd       	sbrc	r24, 7
    5a70:	a8 c0       	rjmp	.+336    	; 0x5bc2 <useRnbData+0x4e8>
    5a72:	69 85       	ldd	r22, Y+9	; 0x09
    5a74:	7a 85       	ldd	r23, Y+10	; 0x0a
    5a76:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a78:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a7a:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5a7e:	2b ed       	ldi	r18, 0xDB	; 219
    5a80:	3f e0       	ldi	r19, 0x0F	; 15
    5a82:	49 ec       	ldi	r20, 0xC9	; 201
    5a84:	50 e4       	ldi	r21, 0x40	; 64
    5a86:	0e 94 c7 48 	call	0x918e	; 0x918e <fmod>
    5a8a:	2b ed       	ldi	r18, 0xDB	; 219
    5a8c:	3f e0       	ldi	r19, 0x0F	; 15
    5a8e:	49 e4       	ldi	r20, 0x49	; 73
    5a90:	50 e4       	ldi	r21, 0x40	; 64
    5a92:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
			last_good_rnb.heading	= (int16_t)radToDeg(heading);
    5a96:	2b ed       	ldi	r18, 0xDB	; 219
    5a98:	3f e0       	ldi	r19, 0x0F	; 15
    5a9a:	49 e4       	ldi	r20, 0x49	; 73
    5a9c:	50 e4       	ldi	r21, 0x40	; 64
    5a9e:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    5aa2:	20 e0       	ldi	r18, 0x00	; 0
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	44 e3       	ldi	r20, 0x34	; 52
    5aa8:	53 e4       	ldi	r21, 0x43	; 67
    5aaa:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    5aae:	0e 94 49 48 	call	0x9092	; 0x9092 <__fixsfsi>
    5ab2:	60 93 9d 24 	sts	0x249D, r22	; 0x80249d <last_good_rnb+0x4>
    5ab6:	70 93 9e 24 	sts	0x249E, r23	; 0x80249e <last_good_rnb+0x5>
			//print_brightMeas();
			rnb_updated=1;
    5aba:	81 e0       	ldi	r24, 0x01	; 1
    5abc:	80 93 a3 24 	sts	0x24A3, r24	; 0x8024a3 <rnb_updated>
		}
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5ac0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5ac2:	f8 94       	cli
		processing_rnb_flag=0;
    5ac4:	10 92 f5 24 	sts	0x24F5, r1	; 0x8024f5 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5ac8:	8f bf       	out	0x3f, r24	; 63
	}
}
    5aca:	2c 96       	adiw	r28, 0x0c	; 12
    5acc:	cd bf       	out	0x3d, r28	; 61
    5ace:	de bf       	out	0x3e, r29	; 62
    5ad0:	df 91       	pop	r29
    5ad2:	cf 91       	pop	r28
    5ad4:	1f 91       	pop	r17
    5ad6:	0f 91       	pop	r16
    5ad8:	ff 90       	pop	r15
    5ada:	ef 90       	pop	r14
    5adc:	df 90       	pop	r13
    5ade:	cf 90       	pop	r12
    5ae0:	bf 90       	pop	r11
    5ae2:	af 90       	pop	r10
    5ae4:	9f 90       	pop	r9
    5ae6:	8f 90       	pop	r8
    5ae8:	7f 90       	pop	r7
    5aea:	6f 90       	pop	r6
    5aec:	5f 90       	pop	r5
    5aee:	4f 90       	pop	r4
    5af0:	3f 90       	pop	r3
    5af2:	2f 90       	pop	r2
    5af4:	08 95       	ret
			sensorHealthHistory+=(1<<(4*i));
		}else{
			sensorHealthHistory&=~(0xF<<(4*i));
		}
		if(((sensorHealthHistory>>(4*i))&0xF)==0xF){
			printf_P(PSTR("!!!\tGot 15 consecutive nothings from sensor %hu.\t!!!\r\n"), i);
    5af6:	3f 93       	push	r19
    5af8:	2f 93       	push	r18
    5afa:	3f 92       	push	r3
    5afc:	2f 92       	push	r2
    5afe:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
			sensorHealthHistory&=~(0xF<<(4*i));
    5b02:	c8 01       	movw	r24, r16
    5b04:	02 c0       	rjmp	.+4      	; 0x5b0a <useRnbData+0x430>
    5b06:	88 0f       	add	r24, r24
    5b08:	99 1f       	adc	r25, r25
    5b0a:	5a 94       	dec	r5
    5b0c:	e2 f7       	brpl	.-8      	; 0x5b06 <useRnbData+0x42c>
    5b0e:	80 95       	com	r24
    5b10:	90 95       	com	r25
    5b12:	09 2e       	mov	r0, r25
    5b14:	00 0c       	add	r0, r0
    5b16:	aa 0b       	sbc	r26, r26
    5b18:	bb 0b       	sbc	r27, r27
    5b1a:	40 91 d4 23 	lds	r20, 0x23D4	; 0x8023d4 <sensorHealthHistory>
    5b1e:	50 91 d5 23 	lds	r21, 0x23D5	; 0x8023d5 <sensorHealthHistory+0x1>
    5b22:	60 91 d6 23 	lds	r22, 0x23D6	; 0x8023d6 <sensorHealthHistory+0x2>
    5b26:	70 91 d7 23 	lds	r23, 0x23D7	; 0x8023d7 <sensorHealthHistory+0x3>
    5b2a:	48 23       	and	r20, r24
    5b2c:	59 23       	and	r21, r25
    5b2e:	6a 23       	and	r22, r26
    5b30:	7b 23       	and	r23, r27
    5b32:	40 93 d4 23 	sts	0x23D4, r20	; 0x8023d4 <sensorHealthHistory>
    5b36:	50 93 d5 23 	sts	0x23D5, r21	; 0x8023d5 <sensorHealthHistory+0x1>
    5b3a:	60 93 d6 23 	sts	0x23D6, r22	; 0x8023d6 <sensorHealthHistory+0x2>
    5b3e:	70 93 d7 23 	sts	0x23D7, r23	; 0x8023d7 <sensorHealthHistory+0x3>
    5b42:	0f 90       	pop	r0
    5b44:	0f 90       	pop	r0
    5b46:	0f 90       	pop	r0
    5b48:	0f 90       	pop	r0
			problem = 1;
    5b4a:	e1 e0       	ldi	r30, 0x01	; 1
    5b4c:	45 ce       	rjmp	.-886    	; 0x57d8 <useRnbData+0xfe>
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
	if(initialRange!=0&&!isnanf(initialRange)){	
		float range = calculate_range(initialRange, bearing, heading);
		if(!isnanf(range)){
			if(range<2*DROPLET_RADIUS) range=46;
			error = calculate_error(range, bearing, heading);
    5b4e:	e9 84       	ldd	r14, Y+9	; 0x09
    5b50:	fa 84       	ldd	r15, Y+10	; 0x0a
    5b52:	0b 85       	ldd	r16, Y+11	; 0x0b
    5b54:	1c 85       	ldd	r17, Y+12	; 0x0c
    5b56:	a3 01       	movw	r20, r6
    5b58:	92 01       	movw	r18, r4
    5b5a:	60 e0       	ldi	r22, 0x00	; 0
    5b5c:	70 e0       	ldi	r23, 0x00	; 0
    5b5e:	88 e3       	ldi	r24, 0x38	; 56
    5b60:	92 e4       	ldi	r25, 0x42	; 66
    5b62:	0e 94 38 27 	call	0x4e70	; 0x4e70 <calculate_error>
    5b66:	6b 01       	movw	r12, r22
    5b68:	7c 01       	movw	r14, r24
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    5b6a:	20 e0       	ldi	r18, 0x00	; 0
    5b6c:	30 e0       	ldi	r19, 0x00	; 0
    5b6e:	40 e8       	ldi	r20, 0x80	; 128
    5b70:	5f e3       	ldi	r21, 0x3F	; 63
    5b72:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <__gesf2>
    5b76:	18 16       	cp	r1, r24
    5b78:	0c f4       	brge	.+2      	; 0x5b7c <useRnbData+0x4a2>
    5b7a:	a2 cf       	rjmp	.-188    	; 0x5ac0 <useRnbData+0x3e6>
	calculate_bearing_and_heading(&bearing, &heading);
	float initialRange = magicRangeFunc(matrixSum/2.0739212652);
	if(initialRange!=0&&!isnanf(initialRange)){	
		float range = calculate_range(initialRange, bearing, heading);
		if(!isnanf(range)){
			if(range<2*DROPLET_RADIUS) range=46;
    5b7c:	81 2c       	mov	r8, r1
    5b7e:	91 2c       	mov	r9, r1
    5b80:	88 e3       	ldi	r24, 0x38	; 56
    5b82:	a8 2e       	mov	r10, r24
    5b84:	82 e4       	ldi	r24, 0x42	; 66
    5b86:	b8 2e       	mov	r11, r24
			error = calculate_error(range, bearing, heading);
			//printf("\t[%04X] %4u % 4d % 4d | %6.2f", rnbCmdID, (uint16_t)range, (int16_t)rad_to_deg(bearing), (int16_t)rad_to_deg(heading), error);
			if((range<110 && error>1.0) || (range<200 && error>1.5) || (range>200)){
    5b88:	20 e0       	ldi	r18, 0x00	; 0
    5b8a:	30 e0       	ldi	r19, 0x00	; 0
    5b8c:	40 ec       	ldi	r20, 0xC0	; 192
    5b8e:	5f e3       	ldi	r21, 0x3F	; 63
    5b90:	c7 01       	movw	r24, r14
    5b92:	b6 01       	movw	r22, r12
    5b94:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <__gesf2>
    5b98:	18 16       	cp	r1, r24
    5b9a:	0c f0       	brlt	.+2      	; 0x5b9e <useRnbData+0x4c4>
    5b9c:	11 cf       	rjmp	.-478    	; 0x59c0 <useRnbData+0x2e6>
    5b9e:	90 cf       	rjmp	.-224    	; 0x5ac0 <useRnbData+0x3e6>
    5ba0:	c3 01       	movw	r24, r6
    5ba2:	b2 01       	movw	r22, r4
    5ba4:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    5ba8:	2b ed       	ldi	r18, 0xDB	; 219
    5baa:	3f e0       	ldi	r19, 0x0F	; 15
    5bac:	49 ec       	ldi	r20, 0xC9	; 201
    5bae:	50 e4       	ldi	r21, 0x40	; 64
    5bb0:	0e 94 c7 48 	call	0x918e	; 0x918e <fmod>
    5bb4:	2b ed       	ldi	r18, 0xDB	; 219
    5bb6:	3f e0       	ldi	r19, 0x0F	; 15
    5bb8:	49 e4       	ldi	r20, 0x49	; 73
    5bba:	50 e4       	ldi	r21, 0x40	; 64
    5bbc:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5bc0:	37 cf       	rjmp	.-402    	; 0x5a30 <useRnbData+0x356>
    5bc2:	69 85       	ldd	r22, Y+9	; 0x09
    5bc4:	7a 85       	ldd	r23, Y+10	; 0x0a
    5bc6:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bc8:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bca:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    5bce:	2b ed       	ldi	r18, 0xDB	; 219
    5bd0:	3f e0       	ldi	r19, 0x0F	; 15
    5bd2:	49 ec       	ldi	r20, 0xC9	; 201
    5bd4:	50 e4       	ldi	r21, 0x40	; 64
    5bd6:	0e 94 c7 48 	call	0x918e	; 0x918e <fmod>
    5bda:	2b ed       	ldi	r18, 0xDB	; 219
    5bdc:	3f e0       	ldi	r19, 0x0F	; 15
    5bde:	49 e4       	ldi	r20, 0x49	; 73
    5be0:	50 e4       	ldi	r21, 0x40	; 64
    5be2:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    5be6:	57 cf       	rjmp	.-338    	; 0x5a96 <useRnbData+0x3bc>
    5be8:	20 e0       	ldi	r18, 0x00	; 0
    5bea:	30 e0       	ldi	r19, 0x00	; 0
    5bec:	40 e8       	ldi	r20, 0x80	; 128
    5bee:	5f e3       	ldi	r21, 0x3F	; 63
    5bf0:	c7 01       	movw	r24, r14
    5bf2:	b6 01       	movw	r22, r12
    5bf4:	0e 94 f9 49 	call	0x93f2	; 0x93f2 <__gesf2>
    5bf8:	18 16       	cp	r1, r24
    5bfa:	0c f0       	brlt	.+2      	; 0x5bfe <useRnbData+0x524>
    5bfc:	d7 ce       	rjmp	.-594    	; 0x59ac <useRnbData+0x2d2>
    5bfe:	60 cf       	rjmp	.-320    	; 0x5ac0 <useRnbData+0x3e6>

00005c00 <irRangeMeas>:
		warningLightSequence();
	}	
	return valSum;
}

void irRangeMeas(uint32_t rnbCmdSentTime){
    5c00:	cf 92       	push	r12
    5c02:	df 92       	push	r13
    5c04:	ef 92       	push	r14
    5c06:	ff 92       	push	r15
    5c08:	1f 93       	push	r17
    5c0a:	cf 93       	push	r28
    5c0c:	df 93       	push	r29
    5c0e:	28 e0       	ldi	r18, 0x08	; 8
    5c10:	c2 2e       	mov	r12, r18
    5c12:	d1 2c       	mov	r13, r1
    5c14:	e1 2c       	mov	r14, r1
    5c16:	f1 2c       	mov	r15, r1
    5c18:	c6 1a       	sub	r12, r22
    5c1a:	d7 0a       	sbc	r13, r23
    5c1c:	e8 0a       	sbc	r14, r24
    5c1e:	f9 0a       	sbc	r15, r25
	//int32_t times[16] = {0};
	//times[0] = get_time();
	while((getTime()-rnbCmdSentTime+8)<POST_BROADCAST_DELAY);
    5c20:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5c24:	dc 01       	movw	r26, r24
    5c26:	cb 01       	movw	r24, r22
    5c28:	8c 0d       	add	r24, r12
    5c2a:	9d 1d       	adc	r25, r13
    5c2c:	ae 1d       	adc	r26, r14
    5c2e:	bf 1d       	adc	r27, r15
    5c30:	4e 97       	sbiw	r24, 0x1e	; 30
    5c32:	a1 05       	cpc	r26, r1
    5c34:	b1 05       	cpc	r27, r1
    5c36:	a0 f3       	brcs	.-24     	; 0x5c20 <irRangeMeas+0x20>
	//times[1] = get_time();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    5c38:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5c3a:	f8 94       	cli
		uint32_t pre_sync_op = getTime();
    5c3c:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5c40:	6b 01       	movw	r12, r22
    5c42:	7c 01       	movw	r14, r24
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
    5c44:	06 c0       	rjmp	.+12     	; 0x5c52 <irRangeMeas+0x52>
    5c46:	8f e9       	ldi	r24, 0x9F	; 159
    5c48:	9f e0       	ldi	r25, 0x0F	; 15
    5c4a:	01 97       	sbiw	r24, 0x01	; 1
    5c4c:	f1 f7       	brne	.-4      	; 0x5c4a <irRangeMeas+0x4a>
    5c4e:	00 c0       	rjmp	.+0      	; 0x5c50 <irRangeMeas+0x50>
    5c50:	00 00       	nop
    5c52:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5c56:	dc 01       	movw	r26, r24
    5c58:	cb 01       	movw	r24, r22
    5c5a:	8c 19       	sub	r24, r12
    5c5c:	9d 09       	sbc	r25, r13
    5c5e:	ae 09       	sbc	r26, r14
    5c60:	bf 09       	sbc	r27, r15
    5c62:	02 97       	sbiw	r24, 0x02	; 2
    5c64:	a1 05       	cpc	r26, r1
    5c66:	b1 05       	cpc	r27, r1
    5c68:	70 f3       	brcs	.-36     	; 0x5c46 <irRangeMeas+0x46>
    5c6a:	cc e8       	ldi	r28, 0x8C	; 140
    5c6c:	d3 e2       	ldi	r29, 0x23	; 35
		//times[2] = get_time();
		for(uint8_t emitter_dir = 0; emitter_dir < 6; emitter_dir++){
			pre_sync_op = getTime();
    5c6e:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5c72:	6b 01       	movw	r12, r22
    5c74:	7c 01       	movw	r14, r24
			//times[2*emitter_dir+3] = pre_sync_op;
			while((getTime() - pre_sync_op) < (TIME_FOR_GET_IR_VALS-TIME_FOR_IR_MEAS)/2) delay_us(500);
    5c76:	06 c0       	rjmp	.+12     	; 0x5c84 <irRangeMeas+0x84>
    5c78:	8f e9       	ldi	r24, 0x9F	; 159
    5c7a:	9f e0       	ldi	r25, 0x0F	; 15
    5c7c:	01 97       	sbiw	r24, 0x01	; 1
    5c7e:	f1 f7       	brne	.-4      	; 0x5c7c <irRangeMeas+0x7c>
    5c80:	00 c0       	rjmp	.+0      	; 0x5c82 <irRangeMeas+0x82>
    5c82:	00 00       	nop
    5c84:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5c88:	dc 01       	movw	r26, r24
    5c8a:	cb 01       	movw	r24, r22
    5c8c:	8c 19       	sub	r24, r12
    5c8e:	9d 09       	sbc	r25, r13
    5c90:	ae 09       	sbc	r26, r14
    5c92:	bf 09       	sbc	r27, r15
    5c94:	02 97       	sbiw	r24, 0x02	; 2
    5c96:	a1 05       	cpc	r26, r1
    5c98:	b1 05       	cpc	r27, r1
    5c9a:	70 f3       	brcs	.-36     	; 0x5c78 <irRangeMeas+0x78>
			getIrSensors(brightMeas[emitter_dir] , 9); //11
    5c9c:	69 e0       	ldi	r22, 0x09	; 9
    5c9e:	ce 01       	movw	r24, r28
    5ca0:	0e 94 c1 1c 	call	0x3982	; 0x3982 <getIrSensors>
			//times[2*emitter_dir+4] = get_time();			
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);		
    5ca4:	06 c0       	rjmp	.+12     	; 0x5cb2 <irRangeMeas+0xb2>
    5ca6:	8f e9       	ldi	r24, 0x9F	; 159
    5ca8:	9f e0       	ldi	r25, 0x0F	; 15
    5caa:	01 97       	sbiw	r24, 0x01	; 1
    5cac:	f1 f7       	brne	.-4      	; 0x5caa <irRangeMeas+0xaa>
    5cae:	00 c0       	rjmp	.+0      	; 0x5cb0 <irRangeMeas+0xb0>
    5cb0:	00 00       	nop
    5cb2:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5cb6:	dc 01       	movw	r26, r24
    5cb8:	cb 01       	movw	r24, r22
    5cba:	8c 19       	sub	r24, r12
    5cbc:	9d 09       	sbc	r25, r13
    5cbe:	ae 09       	sbc	r26, r14
    5cc0:	bf 09       	sbc	r27, r15
    5cc2:	40 97       	sbiw	r24, 0x10	; 16
    5cc4:	a1 05       	cpc	r26, r1
    5cc6:	b1 05       	cpc	r27, r1
    5cc8:	70 f3       	brcs	.-36     	; 0x5ca6 <irRangeMeas+0xa6>
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
    5cca:	8a e0       	ldi	r24, 0x0A	; 10
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    5cd2:	2c 96       	adiw	r28, 0x0c	; 12
	//times[1] = get_time();
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
		uint32_t pre_sync_op = getTime();
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
		//times[2] = get_time();
		for(uint8_t emitter_dir = 0; emitter_dir < 6; emitter_dir++){
    5cd4:	93 e2       	ldi	r25, 0x23	; 35
    5cd6:	c4 3d       	cpi	r28, 0xD4	; 212
    5cd8:	d9 07       	cpc	r29, r25
    5cda:	49 f6       	brne	.-110    	; 0x5c6e <irRangeMeas+0x6e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5cdc:	1f bf       	out	0x3f, r17	; 63
			//times[2*emitter_dir+4] = get_time();			
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);		
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
}
    5cde:	df 91       	pop	r29
    5ce0:	cf 91       	pop	r28
    5ce2:	1f 91       	pop	r17
    5ce4:	ff 90       	pop	r15
    5ce6:	ef 90       	pop	r14
    5ce8:	df 90       	pop	r13
    5cea:	cf 90       	pop	r12
    5cec:	08 95       	ret

00005cee <irRangeBlast>:

void irRangeBlast(uint32_t rnbCmdSentTime, uint8_t power __attribute__ ((unused))){
    5cee:	cf 92       	push	r12
    5cf0:	df 92       	push	r13
    5cf2:	ef 92       	push	r14
    5cf4:	ff 92       	push	r15
    5cf6:	0f 93       	push	r16
    5cf8:	1f 93       	push	r17
    5cfa:	cf 93       	push	r28
    5cfc:	df 93       	push	r29
    5cfe:	6b 01       	movw	r12, r22
    5d00:	7c 01       	movw	r14, r24
	//int32_t times[16] = {0};
	//times[0] = get_time();
	while((getTime() - rnbCmdSentTime) < POST_BROADCAST_DELAY) delay_us(500);
    5d02:	06 c0       	rjmp	.+12     	; 0x5d10 <irRangeBlast+0x22>
    5d04:	8f e9       	ldi	r24, 0x9F	; 159
    5d06:	9f e0       	ldi	r25, 0x0F	; 15
    5d08:	01 97       	sbiw	r24, 0x01	; 1
    5d0a:	f1 f7       	brne	.-4      	; 0x5d08 <irRangeBlast+0x1a>
    5d0c:	00 c0       	rjmp	.+0      	; 0x5d0e <irRangeBlast+0x20>
    5d0e:	00 00       	nop
    5d10:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5d14:	dc 01       	movw	r26, r24
    5d16:	cb 01       	movw	r24, r22
    5d18:	8c 19       	sub	r24, r12
    5d1a:	9d 09       	sbc	r25, r13
    5d1c:	ae 09       	sbc	r26, r14
    5d1e:	bf 09       	sbc	r27, r15
    5d20:	4e 97       	sbiw	r24, 0x1e	; 30
    5d22:	a1 05       	cpc	r26, r1
    5d24:	b1 05       	cpc	r27, r1
    5d26:	70 f3       	brcs	.-36     	; 0x5d04 <irRangeBlast+0x16>
	//times[1] = get_time();
	uint32_t pre_sync_op = getTime();
    5d28:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5d2c:	6b 01       	movw	r12, r22
    5d2e:	7c 01       	movw	r14, r24
	uint16_t prevPower = curr_ir_power;
    5d30:	c0 91 8d 26 	lds	r28, 0x268D	; 0x80268d <curr_ir_power>
    5d34:	d0 91 8e 26 	lds	r29, 0x268E	; 0x80268e <curr_ir_power+0x1>
	setAllirPowers(256);	
    5d38:	80 e0       	ldi	r24, 0x00	; 0
    5d3a:	91 e0       	ldi	r25, 0x01	; 1
    5d3c:	0e 94 1f 1c 	call	0x383e	; 0x383e <setAllirPowers>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
    5d40:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5d42:	f8 94       	cli
    5d44:	06 c0       	rjmp	.+12     	; 0x5d52 <irRangeBlast+0x64>
    5d46:	8f e9       	ldi	r24, 0x9F	; 159
    5d48:	9f e0       	ldi	r25, 0x0F	; 15
    5d4a:	01 97       	sbiw	r24, 0x01	; 1
    5d4c:	f1 f7       	brne	.-4      	; 0x5d4a <irRangeBlast+0x5c>
    5d4e:	00 c0       	rjmp	.+0      	; 0x5d50 <irRangeBlast+0x62>
    5d50:	00 00       	nop
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
    5d52:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5d56:	dc 01       	movw	r26, r24
    5d58:	cb 01       	movw	r24, r22
    5d5a:	8c 19       	sub	r24, r12
    5d5c:	9d 09       	sbc	r25, r13
    5d5e:	ae 09       	sbc	r26, r14
    5d60:	bf 09       	sbc	r27, r15
    5d62:	02 97       	sbiw	r24, 0x02	; 2
    5d64:	a1 05       	cpc	r26, r1
    5d66:	b1 05       	cpc	r27, r1
    5d68:	70 f3       	brcs	.-36     	; 0x5d46 <irRangeBlast+0x58>
    5d6a:	00 e0       	ldi	r16, 0x00	; 0
		//times[2] = get_time();
		for(uint8_t dir = 0; dir < 6; dir++){
			pre_sync_op = getTime();
    5d6c:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5d70:	6b 01       	movw	r12, r22
    5d72:	7c 01       	movw	r14, r24
			//set_red_led(255);
			//times[2*dir+3] = pre_sync_op;			
			irLedOn(dir);
    5d74:	80 2f       	mov	r24, r16
    5d76:	0e 94 bb 1b 	call	0x3776	; 0x3776 <irLedOn>
			while((getTime() - pre_sync_op) < TIME_FOR_GET_IR_VALS) delay_us(500);
    5d7a:	06 c0       	rjmp	.+12     	; 0x5d88 <irRangeBlast+0x9a>
    5d7c:	8f e9       	ldi	r24, 0x9F	; 159
    5d7e:	9f e0       	ldi	r25, 0x0F	; 15
    5d80:	01 97       	sbiw	r24, 0x01	; 1
    5d82:	f1 f7       	brne	.-4      	; 0x5d80 <irRangeBlast+0x92>
    5d84:	00 c0       	rjmp	.+0      	; 0x5d86 <irRangeBlast+0x98>
    5d86:	00 00       	nop
    5d88:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5d8c:	dc 01       	movw	r26, r24
    5d8e:	cb 01       	movw	r24, r22
    5d90:	8c 19       	sub	r24, r12
    5d92:	9d 09       	sbc	r25, r13
    5d94:	ae 09       	sbc	r26, r14
    5d96:	bf 09       	sbc	r27, r15
    5d98:	40 97       	sbiw	r24, 0x10	; 16
    5d9a:	a1 05       	cpc	r26, r1
    5d9c:	b1 05       	cpc	r27, r1
    5d9e:	70 f3       	brcs	.-36     	; 0x5d7c <irRangeBlast+0x8e>
			irLedOff(dir);
    5da0:	80 2f       	mov	r24, r16
    5da2:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <irLedOff>
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
    5da6:	8a e0       	ldi	r24, 0x0A	; 10
    5da8:	90 e0       	ldi	r25, 0x00	; 0
    5daa:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
	uint16_t prevPower = curr_ir_power;
	setAllirPowers(256);	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){		
		while((getTime() - pre_sync_op) < TIME_FOR_SET_IR_POWERS) delay_us(500);
		//times[2] = get_time();
		for(uint8_t dir = 0; dir < 6; dir++){
    5dae:	0f 5f       	subi	r16, 0xFF	; 255
    5db0:	06 30       	cpi	r16, 0x06	; 6
    5db2:	e1 f6       	brne	.-72     	; 0x5d6c <irRangeBlast+0x7e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5db4:	1f bf       	out	0x3f, r17	; 63
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
	setAllirPowers(prevPower);
    5db6:	ce 01       	movw	r24, r28
}
    5db8:	df 91       	pop	r29
    5dba:	cf 91       	pop	r28
    5dbc:	1f 91       	pop	r17
    5dbe:	0f 91       	pop	r16
    5dc0:	ff 90       	pop	r15
    5dc2:	ef 90       	pop	r14
    5dc4:	df 90       	pop	r13
    5dc6:	cf 90       	pop	r12
			//times[2*dir+4] = get_time();				
			//set_red_led(0);					
			delayMS(DELAY_BETWEEN_RB_TRANSMISSIONS);
		}
	}
	setAllirPowers(prevPower);
    5dc8:	0c 94 1f 1c 	jmp	0x383e	; 0x383e <setAllirPowers>

00005dcc <broadcastRnbData>:
	rnbCmdID=0;
	processing_rnb_flag=0;
}

//TODO: handle variable power.
void broadcastRnbData(){
    5dcc:	cf 92       	push	r12
    5dce:	df 92       	push	r13
    5dd0:	ef 92       	push	r14
    5dd2:	ff 92       	push	r15
    5dd4:	1f 93       	push	r17
    5dd6:	cf 93       	push	r28
    5dd8:	df 93       	push	r29
    5dda:	1f 92       	push	r1
    5ddc:	cd b7       	in	r28, 0x3d	; 61
    5dde:	de b7       	in	r29, 0x3e	; 62
	uint8_t power = 255;
	uint8_t goAhead = 0;
	uint8_t result = 0;
	uint8_t irStatus = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5de0:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5de2:	f8 94       	cli
		irStatus = irIsBusy(ALL_DIRS);
    5de4:	8f e3       	ldi	r24, 0x3F	; 63
    5de6:	0e 94 e5 12 	call	0x25ca	; 0x25ca <irIsBusy>
		if(!processing_rnb_flag){
    5dea:	90 91 f5 24 	lds	r25, 0x24F5	; 0x8024f5 <processing_rnb_flag>
    5dee:	91 11       	cpse	r25, r1
    5df0:	22 c0       	rjmp	.+68     	; 0x5e36 <broadcastRnbData+0x6a>
			processing_rnb_flag = 1;
    5df2:	91 e0       	ldi	r25, 0x01	; 1
    5df4:	90 93 f5 24 	sts	0x24F5, r25	; 0x8024f5 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5df8:	1f bf       	out	0x3f, r17	; 63
			goAhead = 1;
		}
	}
	if(goAhead){
    5dfa:	91 11       	cpse	r25, r1
    5dfc:	20 c0       	rjmp	.+64     	; 0x5e3e <broadcastRnbData+0x72>
		}
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			processing_rnb_flag = 0;
		}
	}else{
		uint8_t failureInfo = ((processing_rnb_flag<<6) | (result<<4) | irStatus);
    5dfe:	90 91 f5 24 	lds	r25, 0x24F5	; 0x8024f5 <processing_rnb_flag>
		printf_P(PSTR("RNB Broadcast failed [ %02hX ]\r\n"),  failureInfo);
    5e02:	40 e4       	ldi	r20, 0x40	; 64
    5e04:	94 9f       	mul	r25, r20
    5e06:	90 01       	movw	r18, r0
    5e08:	11 24       	eor	r1, r1
    5e0a:	28 2b       	or	r18, r24
    5e0c:	1f 92       	push	r1
    5e0e:	2f 93       	push	r18
    5e10:	89 ea       	ldi	r24, 0xA9	; 169
    5e12:	98 e0       	ldi	r25, 0x08	; 8
    5e14:	9f 93       	push	r25
    5e16:	8f 93       	push	r24
    5e18:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    5e1c:	0f 90       	pop	r0
    5e1e:	0f 90       	pop	r0
    5e20:	0f 90       	pop	r0
    5e22:	0f 90       	pop	r0
	}
}
    5e24:	0f 90       	pop	r0
    5e26:	df 91       	pop	r29
    5e28:	cf 91       	pop	r28
    5e2a:	1f 91       	pop	r17
    5e2c:	ff 90       	pop	r15
    5e2e:	ef 90       	pop	r14
    5e30:	df 90       	pop	r13
    5e32:	cf 90       	pop	r12
    5e34:	08 95       	ret
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	1f bf       	out	0x3f, r17	; 63
		if(!processing_rnb_flag){
			processing_rnb_flag = 1;
			goAhead = 1;
		}
	}
	if(goAhead){
    5e3a:	99 23       	and	r25, r25
    5e3c:	01 f3       	breq	.-64     	; 0x5dfe <broadcastRnbData+0x32>
		uint32_t rnbCmdSentTime = getTime();
    5e3e:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    5e42:	6b 01       	movw	r12, r22
    5e44:	7c 01       	movw	r14, r24
		char c = 'r';
    5e46:	82 e7       	ldi	r24, 0x72	; 114
    5e48:	89 83       	std	Y+1, r24	; 0x01
		result = hpIrTargetedCmd(ALL_DIRS, &c, 65, (uint16_t)(rnbCmdSentTime&0xFFFF));
    5e4a:	96 01       	movw	r18, r12
    5e4c:	41 e4       	ldi	r20, 0x41	; 65
    5e4e:	be 01       	movw	r22, r28
    5e50:	6f 5f       	subi	r22, 0xFF	; 255
    5e52:	7f 4f       	sbci	r23, 0xFF	; 255
    5e54:	8f e3       	ldi	r24, 0x3F	; 63
    5e56:	0e 94 7e 14 	call	0x28fc	; 0x28fc <hpIrTargetedCmd>
		if(result){
    5e5a:	88 23       	and	r24, r24
    5e5c:	81 f0       	breq	.+32     	; 0x5e7e <broadcastRnbData+0xb2>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5e5e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5e60:	f8 94       	cli
				hpIrBlock_bm = 0x3F;
    5e62:	9f e3       	ldi	r25, 0x3F	; 63
    5e64:	90 93 7b 24 	sts	0x247B, r25	; 0x80247b <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5e68:	8f bf       	out	0x3f, r24	; 63
			}		
			irRangeBlast(rnbCmdSentTime, power);
    5e6a:	4f ef       	ldi	r20, 0xFF	; 255
    5e6c:	c7 01       	movw	r24, r14
    5e6e:	b6 01       	movw	r22, r12
    5e70:	0e 94 77 2e 	call	0x5cee	; 0x5cee <irRangeBlast>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5e74:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5e76:	f8 94       	cli
				hpIrBlock_bm = 0;
    5e78:	10 92 7b 24 	sts	0x247B, r1	; 0x80247b <hpIrBlock_bm>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5e7c:	8f bf       	out	0x3f, r24	; 63
			}
			//printf("rnb_b\r\n");
		}
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    5e7e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5e80:	f8 94       	cli
			processing_rnb_flag = 0;
    5e82:	10 92 f5 24 	sts	0x24F5, r1	; 0x8024f5 <processing_rnb_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5e86:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    5e88:	cd cf       	rjmp	.-102    	; 0x5e24 <broadcastRnbData+0x58>

00005e8a <rgbLEDinit>:
#include "rgb_led.h"

void rgbLEDinit()
{
	// LED Pins as output
	PORTE.DIRSET = LED_R_PIN_bm | LED_G_PIN_bm;
    5e8a:	80 e3       	ldi	r24, 0x30	; 48
    5e8c:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	PORTD.DIRSET = LED_B_PIN_bm;
    5e90:	80 e1       	ldi	r24, 0x10	; 16
    5e92:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	
	//-------RED&GREEN--------
	TCE1.PER = 255;							
    5e96:	e0 e4       	ldi	r30, 0x40	; 64
    5e98:	fa e0       	ldi	r31, 0x0A	; 10
    5e9a:	2f ef       	ldi	r18, 0xFF	; 255
    5e9c:	30 e0       	ldi	r19, 0x00	; 0
    5e9e:	26 a3       	std	Z+38, r18	; 0x26
    5ea0:	37 a3       	std	Z+39, r19	; 0x27
	TCE1.CCA = 0;							
    5ea2:	10 a6       	std	Z+40, r1	; 0x28
    5ea4:	11 a6       	std	Z+41, r1	; 0x29
	TCE1.CCB = 0;							
    5ea6:	12 a6       	std	Z+42, r1	; 0x2a
    5ea8:	13 a6       	std	Z+43, r1	; 0x2b
	TCE1.CTRLA = TC_CLKSEL_DIV64_gc;		
    5eaa:	85 e0       	ldi	r24, 0x05	; 5
    5eac:	80 83       	st	Z, r24
	TCE1.CTRLB = TC_WGMODE_SS_gc | TC1_CCBEN_bm | TC1_CCAEN_bm;
    5eae:	93 e3       	ldi	r25, 0x33	; 51
    5eb0:	91 83       	std	Z+1, r25	; 0x01
	
	//---------BLUE-----------
	
	TCD1.PER = 255;
    5eb2:	e0 e4       	ldi	r30, 0x40	; 64
    5eb4:	f9 e0       	ldi	r31, 0x09	; 9
    5eb6:	26 a3       	std	Z+38, r18	; 0x26
    5eb8:	37 a3       	std	Z+39, r19	; 0x27
	TCD1.CCA = 0;
    5eba:	10 a6       	std	Z+40, r1	; 0x28
    5ebc:	11 a6       	std	Z+41, r1	; 0x29
	TCD1.CTRLA = TC_CLKSEL_DIV64_gc;
    5ebe:	80 83       	st	Z, r24
	TCD1.CTRLB = TC_WGMODE_SS_gc | TC1_CCAEN_bm;	
    5ec0:	83 e1       	ldi	r24, 0x13	; 19
    5ec2:	81 83       	std	Z+1, r24	; 0x01
    5ec4:	08 95       	ret

00005ec6 <ledOff>:
}

void ledOff()
{ 
	TCE1.CCABUF = 0;
    5ec6:	e0 e4       	ldi	r30, 0x40	; 64
    5ec8:	fa e0       	ldi	r31, 0x0A	; 10
    5eca:	10 ae       	std	Z+56, r1	; 0x38
    5ecc:	11 ae       	std	Z+57, r1	; 0x39
	TCE1.CCBBUF = 0;
    5ece:	12 ae       	std	Z+58, r1	; 0x3a
    5ed0:	13 ae       	std	Z+59, r1	; 0x3b
	TCD1.CCABUF = 0;	
    5ed2:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    5ed6:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    5eda:	08 95       	ret

00005edc <setRGB>:

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	e0 e4       	ldi	r30, 0x40	; 64
    5ee0:	fa e0       	ldi	r31, 0x0A	; 10
    5ee2:	82 af       	std	Z+58, r24	; 0x3a
    5ee4:	93 af       	std	Z+59, r25	; 0x3b

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    5ee6:	70 e0       	ldi	r23, 0x00	; 0
    5ee8:	60 af       	std	Z+56, r22	; 0x38
    5eea:	71 af       	std	Z+57, r23	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    5eec:	50 e0       	ldi	r21, 0x00	; 0
    5eee:	40 93 78 09 	sts	0x0978, r20	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    5ef2:	50 93 79 09 	sts	0x0979, r21	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
    5ef6:	08 95       	ret

00005ef8 <hsvToRGB>:
	setRGB(r,g,b);
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
    5ef8:	2f 92       	push	r2
    5efa:	3f 92       	push	r3
    5efc:	4f 92       	push	r4
    5efe:	5f 92       	push	r5
    5f00:	6f 92       	push	r6
    5f02:	7f 92       	push	r7
    5f04:	8f 92       	push	r8
    5f06:	9f 92       	push	r9
    5f08:	af 92       	push	r10
    5f0a:	bf 92       	push	r11
    5f0c:	cf 92       	push	r12
    5f0e:	df 92       	push	r13
    5f10:	ef 92       	push	r14
    5f12:	ff 92       	push	r15
    5f14:	0f 93       	push	r16
    5f16:	1f 93       	push	r17
    5f18:	cf 93       	push	r28
    5f1a:	df 93       	push	r29
    5f1c:	cd b7       	in	r28, 0x3d	; 61
    5f1e:	de b7       	in	r29, 0x3e	; 62
    5f20:	2c 97       	sbiw	r28, 0x0c	; 12
    5f22:	cd bf       	out	0x3d, r28	; 61
    5f24:	de bf       	out	0x3e, r29	; 62
    5f26:	8b 83       	std	Y+3, r24	; 0x03
    5f28:	9c 83       	std	Y+4, r25	; 0x04
    5f2a:	b4 2e       	mov	r11, r20
    5f2c:	19 01       	movw	r2, r18
    5f2e:	e9 82       	std	Y+1, r14	; 0x01
    5f30:	fa 82       	std	Y+2, r15	; 0x02
	float h = (hue%360)*1.0;
	float s = (1.0*saturation)/255.0;
    5f32:	70 e0       	ldi	r23, 0x00	; 0
    5f34:	80 e0       	ldi	r24, 0x00	; 0
    5f36:	90 e0       	ldi	r25, 0x00	; 0
    5f38:	0e 94 81 48 	call	0x9102	; 0x9102 <__floatsisf>
    5f3c:	20 e0       	ldi	r18, 0x00	; 0
    5f3e:	30 e0       	ldi	r19, 0x00	; 0
    5f40:	4f e7       	ldi	r20, 0x7F	; 127
    5f42:	53 e4       	ldi	r21, 0x43	; 67
    5f44:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    5f48:	6b 01       	movw	r12, r22
    5f4a:	7c 01       	movw	r14, r24
	float v = (1.0*val)/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (fabsf(s)<0.00001){
    5f4c:	9f 77       	andi	r25, 0x7F	; 127
    5f4e:	2c ea       	ldi	r18, 0xAC	; 172
    5f50:	35 ec       	ldi	r19, 0xC5	; 197
    5f52:	47 e2       	ldi	r20, 0x27	; 39
    5f54:	57 e3       	ldi	r21, 0x37	; 55
    5f56:	0e 94 93 47 	call	0x8f26	; 0x8f26 <__cmpsf2>
    5f5a:	87 fd       	sbrc	r24, 7
    5f5c:	f0 c0       	rjmp	.+480    	; 0x613e <hsvToRGB+0x246>
//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
	float s = (1.0*saturation)/255.0;
	float v = (1.0*val)/255.0;
    5f5e:	6b 2d       	mov	r22, r11
    5f60:	70 e0       	ldi	r23, 0x00	; 0
    5f62:	80 e0       	ldi	r24, 0x00	; 0
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	0e 94 81 48 	call	0x9102	; 0x9102 <__floatsisf>
    5f6a:	20 e0       	ldi	r18, 0x00	; 0
    5f6c:	30 e0       	ldi	r19, 0x00	; 0
    5f6e:	4f e7       	ldi	r20, 0x7F	; 127
    5f70:	53 e4       	ldi	r21, 0x43	; 67
    5f72:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    5f76:	4b 01       	movw	r8, r22
    5f78:	5c 01       	movw	r10, r24
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsvToRGB(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
	float h = (hue%360)*1.0;
    5f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    5f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    5f7e:	a3 e8       	ldi	r26, 0x83	; 131
    5f80:	bd e2       	ldi	r27, 0x2D	; 45
    5f82:	0e 94 08 4c 	call	0x9810	; 0x9810 <__umulhisi3>
    5f86:	00 24       	eor	r0, r0
    5f88:	88 0f       	add	r24, r24
    5f8a:	99 1f       	adc	r25, r25
    5f8c:	00 1c       	adc	r0, r0
    5f8e:	88 0f       	add	r24, r24
    5f90:	99 1f       	adc	r25, r25
    5f92:	00 1c       	adc	r0, r0
    5f94:	89 2f       	mov	r24, r25
    5f96:	90 2d       	mov	r25, r0
    5f98:	48 e6       	ldi	r20, 0x68	; 104
    5f9a:	51 e0       	ldi	r21, 0x01	; 1
    5f9c:	84 9f       	mul	r24, r20
    5f9e:	90 01       	movw	r18, r0
    5fa0:	85 9f       	mul	r24, r21
    5fa2:	30 0d       	add	r19, r0
    5fa4:	94 9f       	mul	r25, r20
    5fa6:	30 0d       	add	r19, r0
    5fa8:	11 24       	eor	r1, r1
    5faa:	8b 81       	ldd	r24, Y+3	; 0x03
    5fac:	9c 81       	ldd	r25, Y+4	; 0x04
    5fae:	82 1b       	sub	r24, r18
    5fb0:	93 0b       	sbc	r25, r19
    5fb2:	8b 83       	std	Y+3, r24	; 0x03
    5fb4:	9c 83       	std	Y+4, r25	; 0x04
    5fb6:	bc 01       	movw	r22, r24
    5fb8:	80 e0       	ldi	r24, 0x00	; 0
    5fba:	90 e0       	ldi	r25, 0x00	; 0
    5fbc:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__floatunsisf>
	if (fabsf(s)<0.00001){
		*red = *green = *blue = val;
		return;
	}
	
	h = h / 60.0;
    5fc0:	20 e0       	ldi	r18, 0x00	; 0
    5fc2:	30 e0       	ldi	r19, 0x00	; 0
    5fc4:	40 e7       	ldi	r20, 0x70	; 112
    5fc6:	52 e4       	ldi	r21, 0x42	; 66
    5fc8:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <__divsf3>
    5fcc:	2b 01       	movw	r4, r22
    5fce:	3c 01       	movw	r6, r24
	uint8_t i = (uint8_t)h;
    5fd0:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    5fd4:	6b 87       	std	Y+11, r22	; 0x0b
	f = h - i;
    5fd6:	70 e0       	ldi	r23, 0x00	; 0
    5fd8:	80 e0       	ldi	r24, 0x00	; 0
    5fda:	90 e0       	ldi	r25, 0x00	; 0
    5fdc:	0e 94 81 48 	call	0x9102	; 0x9102 <__floatsisf>
    5fe0:	9b 01       	movw	r18, r22
    5fe2:	ac 01       	movw	r20, r24
    5fe4:	c3 01       	movw	r24, r6
    5fe6:	b2 01       	movw	r22, r4
    5fe8:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    5fec:	2b 01       	movw	r4, r22
    5fee:	3c 01       	movw	r6, r24
	
	p = v*(1.0-s);
    5ff0:	a7 01       	movw	r20, r14
    5ff2:	96 01       	movw	r18, r12
    5ff4:	60 e0       	ldi	r22, 0x00	; 0
    5ff6:	70 e0       	ldi	r23, 0x00	; 0
    5ff8:	80 e8       	ldi	r24, 0x80	; 128
    5ffa:	9f e3       	ldi	r25, 0x3F	; 63
    5ffc:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    6000:	a5 01       	movw	r20, r10
    6002:	94 01       	movw	r18, r8
    6004:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    6008:	6b 83       	std	Y+3, r22	; 0x03
    600a:	7c 83       	std	Y+4, r23	; 0x04
    600c:	8d 83       	std	Y+5, r24	; 0x05
    600e:	9e 83       	std	Y+6, r25	; 0x06
	q = v*(1.0-s*f);
    6010:	a3 01       	movw	r20, r6
    6012:	92 01       	movw	r18, r4
    6014:	c7 01       	movw	r24, r14
    6016:	b6 01       	movw	r22, r12
    6018:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    601c:	9b 01       	movw	r18, r22
    601e:	ac 01       	movw	r20, r24
    6020:	60 e0       	ldi	r22, 0x00	; 0
    6022:	70 e0       	ldi	r23, 0x00	; 0
    6024:	80 e8       	ldi	r24, 0x80	; 128
    6026:	9f e3       	ldi	r25, 0x3F	; 63
    6028:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    602c:	a5 01       	movw	r20, r10
    602e:	94 01       	movw	r18, r8
    6030:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    6034:	6f 83       	std	Y+7, r22	; 0x07
    6036:	78 87       	std	Y+8, r23	; 0x08
    6038:	89 87       	std	Y+9, r24	; 0x09
    603a:	9a 87       	std	Y+10, r25	; 0x0a
	t = v*(1.0-s*(1-f));
    603c:	a3 01       	movw	r20, r6
    603e:	92 01       	movw	r18, r4
    6040:	60 e0       	ldi	r22, 0x00	; 0
    6042:	70 e0       	ldi	r23, 0x00	; 0
    6044:	80 e8       	ldi	r24, 0x80	; 128
    6046:	9f e3       	ldi	r25, 0x3F	; 63
    6048:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    604c:	a7 01       	movw	r20, r14
    604e:	96 01       	movw	r18, r12
    6050:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    6054:	9b 01       	movw	r18, r22
    6056:	ac 01       	movw	r20, r24
    6058:	60 e0       	ldi	r22, 0x00	; 0
    605a:	70 e0       	ldi	r23, 0x00	; 0
    605c:	80 e8       	ldi	r24, 0x80	; 128
    605e:	9f e3       	ldi	r25, 0x3F	; 63
    6060:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <__subsf3>
    6064:	a5 01       	movw	r20, r10
    6066:	94 01       	movw	r18, r8
    6068:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    606c:	6b 01       	movw	r12, r22
    606e:	7c 01       	movw	r14, r24
	
	switch(i)
    6070:	9b 85       	ldd	r25, Y+11	; 0x0b
    6072:	92 30       	cpi	r25, 0x02	; 2
    6074:	09 f4       	brne	.+2      	; 0x6078 <hsvToRGB+0x180>
    6076:	de c0       	rjmp	.+444    	; 0x6234 <hsvToRGB+0x33c>
    6078:	70 f1       	brcs	.+92     	; 0x60d6 <hsvToRGB+0x1de>
    607a:	eb 85       	ldd	r30, Y+11	; 0x0b
    607c:	e4 30       	cpi	r30, 0x04	; 4
    607e:	09 f4       	brne	.+2      	; 0x6082 <hsvToRGB+0x18a>
    6080:	c7 c0       	rjmp	.+398    	; 0x6210 <hsvToRGB+0x318>
    6082:	08 f4       	brcc	.+2      	; 0x6086 <hsvToRGB+0x18e>
    6084:	9c c0       	rjmp	.+312    	; 0x61be <hsvToRGB+0x2c6>
    6086:	e5 30       	cpi	r30, 0x05	; 5
    6088:	09 f0       	breq	.+2      	; 0x608c <hsvToRGB+0x194>
    608a:	be c0       	rjmp	.+380    	; 0x6208 <hsvToRGB+0x310>
    608c:	20 e0       	ldi	r18, 0x00	; 0
    608e:	30 e0       	ldi	r19, 0x00	; 0
    6090:	4f e7       	ldi	r20, 0x7F	; 127
    6092:	53 e4       	ldi	r21, 0x43	; 67
    6094:	c5 01       	movw	r24, r10
    6096:	b4 01       	movw	r22, r8
    6098:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    609c:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    60a0:	6c 87       	std	Y+12, r22	; 0x0c
    60a2:	20 e0       	ldi	r18, 0x00	; 0
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	4f e7       	ldi	r20, 0x7F	; 127
    60a8:	53 e4       	ldi	r21, 0x43	; 67
    60aa:	6f 81       	ldd	r22, Y+7	; 0x07
    60ac:	78 85       	ldd	r23, Y+8	; 0x08
    60ae:	89 85       	ldd	r24, Y+9	; 0x09
    60b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    60b2:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    60b6:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    60ba:	6b 87       	std	Y+11, r22	; 0x0b
    60bc:	20 e0       	ldi	r18, 0x00	; 0
    60be:	30 e0       	ldi	r19, 0x00	; 0
    60c0:	4f e7       	ldi	r20, 0x7F	; 127
    60c2:	53 e4       	ldi	r21, 0x43	; 67
    60c4:	6b 81       	ldd	r22, Y+3	; 0x03
    60c6:	7c 81       	ldd	r23, Y+4	; 0x04
    60c8:	8d 81       	ldd	r24, Y+5	; 0x05
    60ca:	9e 81       	ldd	r25, Y+6	; 0x06
    60cc:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    60d0:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
			break;
		case 5:
			r = v;
			g = p;
			b = q;
			break;
    60d4:	2a c0       	rjmp	.+84     	; 0x612a <hsvToRGB+0x232>
	
	p = v*(1.0-s);
	q = v*(1.0-s*f);
	t = v*(1.0-s*(1-f));
	
	switch(i)
    60d6:	99 23       	and	r25, r25
    60d8:	09 f4       	brne	.+2      	; 0x60dc <hsvToRGB+0x1e4>
    60da:	4e c0       	rjmp	.+156    	; 0x6178 <hsvToRGB+0x280>
    60dc:	91 30       	cpi	r25, 0x01	; 1
    60de:	09 f0       	breq	.+2      	; 0x60e2 <hsvToRGB+0x1ea>
    60e0:	93 c0       	rjmp	.+294    	; 0x6208 <hsvToRGB+0x310>
    60e2:	20 e0       	ldi	r18, 0x00	; 0
    60e4:	30 e0       	ldi	r19, 0x00	; 0
    60e6:	4f e7       	ldi	r20, 0x7F	; 127
    60e8:	53 e4       	ldi	r21, 0x43	; 67
    60ea:	6f 81       	ldd	r22, Y+7	; 0x07
    60ec:	78 85       	ldd	r23, Y+8	; 0x08
    60ee:	89 85       	ldd	r24, Y+9	; 0x09
    60f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    60f2:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    60f6:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    60fa:	6c 87       	std	Y+12, r22	; 0x0c
    60fc:	20 e0       	ldi	r18, 0x00	; 0
    60fe:	30 e0       	ldi	r19, 0x00	; 0
    6100:	4f e7       	ldi	r20, 0x7F	; 127
    6102:	53 e4       	ldi	r21, 0x43	; 67
    6104:	6b 81       	ldd	r22, Y+3	; 0x03
    6106:	7c 81       	ldd	r23, Y+4	; 0x04
    6108:	8d 81       	ldd	r24, Y+5	; 0x05
    610a:	9e 81       	ldd	r25, Y+6	; 0x06
    610c:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    6110:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    6114:	6b 87       	std	Y+11, r22	; 0x0b
    6116:	20 e0       	ldi	r18, 0x00	; 0
    6118:	30 e0       	ldi	r19, 0x00	; 0
    611a:	4f e7       	ldi	r20, 0x7F	; 127
    611c:	53 e4       	ldi	r21, 0x43	; 67
    611e:	c5 01       	movw	r24, r10
    6120:	b4 01       	movw	r22, r8
    6122:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    6126:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
			break;
		default:
			//printf("SHOULD NEVER SEE THIS. i: %hhu",i);
			break;
	}
	*red = (uint8_t)(r*255);
    612a:	2c 85       	ldd	r18, Y+12	; 0x0c
    612c:	f1 01       	movw	r30, r2
    612e:	20 83       	st	Z, r18
	*blue = (uint8_t)(b*255);
    6130:	2b 85       	ldd	r18, Y+11	; 0x0b
    6132:	e9 81       	ldd	r30, Y+1	; 0x01
    6134:	fa 81       	ldd	r31, Y+2	; 0x02
    6136:	20 83       	st	Z, r18
	*green = (uint8_t)(g*255);
    6138:	f8 01       	movw	r30, r16
    613a:	60 83       	st	Z, r22
    613c:	07 c0       	rjmp	.+14     	; 0x614c <hsvToRGB+0x254>
	float v = (1.0*val)/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (fabsf(s)<0.00001){
		*red = *green = *blue = val;
    613e:	e9 81       	ldd	r30, Y+1	; 0x01
    6140:	fa 81       	ldd	r31, Y+2	; 0x02
    6142:	b0 82       	st	Z, r11
    6144:	f8 01       	movw	r30, r16
    6146:	b0 82       	st	Z, r11
    6148:	f1 01       	movw	r30, r2
    614a:	b0 82       	st	Z, r11
			break;
	}
	*red = (uint8_t)(r*255);
	*blue = (uint8_t)(b*255);
	*green = (uint8_t)(g*255);
    614c:	2c 96       	adiw	r28, 0x0c	; 12
    614e:	cd bf       	out	0x3d, r28	; 61
    6150:	de bf       	out	0x3e, r29	; 62
    6152:	df 91       	pop	r29
    6154:	cf 91       	pop	r28
    6156:	1f 91       	pop	r17
    6158:	0f 91       	pop	r16
    615a:	ff 90       	pop	r15
    615c:	ef 90       	pop	r14
    615e:	df 90       	pop	r13
    6160:	cf 90       	pop	r12
    6162:	bf 90       	pop	r11
    6164:	af 90       	pop	r10
    6166:	9f 90       	pop	r9
    6168:	8f 90       	pop	r8
    616a:	7f 90       	pop	r7
    616c:	6f 90       	pop	r6
    616e:	5f 90       	pop	r5
    6170:	4f 90       	pop	r4
    6172:	3f 90       	pop	r3
    6174:	2f 90       	pop	r2
    6176:	08 95       	ret
    6178:	20 e0       	ldi	r18, 0x00	; 0
    617a:	30 e0       	ldi	r19, 0x00	; 0
    617c:	4f e7       	ldi	r20, 0x7F	; 127
    617e:	53 e4       	ldi	r21, 0x43	; 67
    6180:	c5 01       	movw	r24, r10
    6182:	b4 01       	movw	r22, r8
    6184:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    6188:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    618c:	6c 87       	std	Y+12, r22	; 0x0c
    618e:	20 e0       	ldi	r18, 0x00	; 0
    6190:	30 e0       	ldi	r19, 0x00	; 0
    6192:	4f e7       	ldi	r20, 0x7F	; 127
    6194:	53 e4       	ldi	r21, 0x43	; 67
    6196:	6b 81       	ldd	r22, Y+3	; 0x03
    6198:	7c 81       	ldd	r23, Y+4	; 0x04
    619a:	8d 81       	ldd	r24, Y+5	; 0x05
    619c:	9e 81       	ldd	r25, Y+6	; 0x06
    619e:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    61a2:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    61a6:	6b 87       	std	Y+11, r22	; 0x0b
    61a8:	20 e0       	ldi	r18, 0x00	; 0
    61aa:	30 e0       	ldi	r19, 0x00	; 0
    61ac:	4f e7       	ldi	r20, 0x7F	; 127
    61ae:	53 e4       	ldi	r21, 0x43	; 67
    61b0:	c7 01       	movw	r24, r14
    61b2:	b6 01       	movw	r22, r12
    61b4:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    61b8:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
	{
		case 0:
			r = v;
			g = t;
			b = p;
			break;
    61bc:	b6 cf       	rjmp	.-148    	; 0x612a <hsvToRGB+0x232>
    61be:	20 e0       	ldi	r18, 0x00	; 0
    61c0:	30 e0       	ldi	r19, 0x00	; 0
    61c2:	4f e7       	ldi	r20, 0x7F	; 127
    61c4:	53 e4       	ldi	r21, 0x43	; 67
    61c6:	6b 81       	ldd	r22, Y+3	; 0x03
    61c8:	7c 81       	ldd	r23, Y+4	; 0x04
    61ca:	8d 81       	ldd	r24, Y+5	; 0x05
    61cc:	9e 81       	ldd	r25, Y+6	; 0x06
    61ce:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    61d2:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    61d6:	6c 87       	std	Y+12, r22	; 0x0c
    61d8:	20 e0       	ldi	r18, 0x00	; 0
    61da:	30 e0       	ldi	r19, 0x00	; 0
    61dc:	4f e7       	ldi	r20, 0x7F	; 127
    61de:	53 e4       	ldi	r21, 0x43	; 67
    61e0:	c5 01       	movw	r24, r10
    61e2:	b4 01       	movw	r22, r8
    61e4:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    61e8:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    61ec:	6b 87       	std	Y+11, r22	; 0x0b
    61ee:	20 e0       	ldi	r18, 0x00	; 0
    61f0:	30 e0       	ldi	r19, 0x00	; 0
    61f2:	4f e7       	ldi	r20, 0x7F	; 127
    61f4:	53 e4       	ldi	r21, 0x43	; 67
    61f6:	6f 81       	ldd	r22, Y+7	; 0x07
    61f8:	78 85       	ldd	r23, Y+8	; 0x08
    61fa:	89 85       	ldd	r24, Y+9	; 0x09
    61fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    61fe:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    6202:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
			break;
		case 3:
			r = p;
			g = q;
			b = v;
			break;
    6206:	91 cf       	rjmp	.-222    	; 0x612a <hsvToRGB+0x232>
	
	p = v*(1.0-s);
	q = v*(1.0-s*f);
	t = v*(1.0-s*(1-f));
	
	switch(i)
    6208:	60 e0       	ldi	r22, 0x00	; 0
    620a:	1b 86       	std	Y+11, r1	; 0x0b
    620c:	1c 86       	std	Y+12, r1	; 0x0c
    620e:	8d cf       	rjmp	.-230    	; 0x612a <hsvToRGB+0x232>
    6210:	20 e0       	ldi	r18, 0x00	; 0
    6212:	30 e0       	ldi	r19, 0x00	; 0
    6214:	4f e7       	ldi	r20, 0x7F	; 127
    6216:	53 e4       	ldi	r21, 0x43	; 67
    6218:	c7 01       	movw	r24, r14
    621a:	b6 01       	movw	r22, r12
    621c:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    6220:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    6224:	6c 87       	std	Y+12, r22	; 0x0c
    6226:	20 e0       	ldi	r18, 0x00	; 0
    6228:	30 e0       	ldi	r19, 0x00	; 0
    622a:	4f e7       	ldi	r20, 0x7F	; 127
    622c:	53 e4       	ldi	r21, 0x43	; 67
    622e:	c5 01       	movw	r24, r10
    6230:	b4 01       	movw	r22, r8
    6232:	3f cf       	rjmp	.-386    	; 0x60b2 <hsvToRGB+0x1ba>
    6234:	20 e0       	ldi	r18, 0x00	; 0
    6236:	30 e0       	ldi	r19, 0x00	; 0
    6238:	4f e7       	ldi	r20, 0x7F	; 127
    623a:	53 e4       	ldi	r21, 0x43	; 67
    623c:	6b 81       	ldd	r22, Y+3	; 0x03
    623e:	7c 81       	ldd	r23, Y+4	; 0x04
    6240:	8d 81       	ldd	r24, Y+5	; 0x05
    6242:	9e 81       	ldd	r25, Y+6	; 0x06
    6244:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    6248:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    624c:	6c 87       	std	Y+12, r22	; 0x0c
    624e:	20 e0       	ldi	r18, 0x00	; 0
    6250:	30 e0       	ldi	r19, 0x00	; 0
    6252:	4f e7       	ldi	r20, 0x7F	; 127
    6254:	53 e4       	ldi	r21, 0x43	; 67
    6256:	c7 01       	movw	r24, r14
    6258:	b6 01       	movw	r22, r12
    625a:	58 cf       	rjmp	.-336    	; 0x610c <hsvToRGB+0x214>

0000625c <setHSV>:
Hue should be between 0 and 360 (though it gets modulo'd with 360, so should be okay)
Saturation and value can be between 0 and 255, where 255 is brightest/most saturated,
and 0 is dimmest/least saturated.
*/
void setHSV(uint16_t h, uint8_t s, uint8_t v)
{
    625c:	ef 92       	push	r14
    625e:	ff 92       	push	r15
    6260:	0f 93       	push	r16
    6262:	1f 93       	push	r17
    6264:	cf 93       	push	r28
    6266:	df 93       	push	r29
    6268:	00 d0       	rcall	.+0      	; 0x626a <setHSV+0xe>
    626a:	cd b7       	in	r28, 0x3d	; 61
    626c:	de b7       	in	r29, 0x3e	; 62
	uint8_t r,g,b;
	hsvToRGB(h,s,v,&r,&g,&b);
    626e:	9e 01       	movw	r18, r28
    6270:	2f 5f       	subi	r18, 0xFF	; 255
    6272:	3f 4f       	sbci	r19, 0xFF	; 255
    6274:	79 01       	movw	r14, r18
    6276:	8e 01       	movw	r16, r28
    6278:	0e 5f       	subi	r16, 0xFE	; 254
    627a:	1f 4f       	sbci	r17, 0xFF	; 255
    627c:	2e 5f       	subi	r18, 0xFE	; 254
    627e:	3f 4f       	sbci	r19, 0xFF	; 255
    6280:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <hsvToRGB>
	setRGB(r,g,b);
    6284:	89 81       	ldd	r24, Y+1	; 0x01
    6286:	2a 81       	ldd	r18, Y+2	; 0x02

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    6288:	4b 81       	ldd	r20, Y+3	; 0x03
    628a:	50 e0       	ldi	r21, 0x00	; 0
    628c:	e0 e4       	ldi	r30, 0x40	; 64
    628e:	fa e0       	ldi	r31, 0x0A	; 10
    6290:	42 af       	std	Z+58, r20	; 0x3a
    6292:	53 af       	std	Z+59, r21	; 0x3b

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    6294:	30 e0       	ldi	r19, 0x00	; 0
    6296:	20 af       	std	Z+56, r18	; 0x38
    6298:	31 af       	std	Z+57, r19	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    629a:	90 e0       	ldi	r25, 0x00	; 0
    629c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    62a0:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
}
    62a4:	23 96       	adiw	r28, 0x03	; 3
    62a6:	cd bf       	out	0x3d, r28	; 61
    62a8:	de bf       	out	0x3e, r29	; 62
    62aa:	df 91       	pop	r29
    62ac:	cf 91       	pop	r28
    62ae:	1f 91       	pop	r17
    62b0:	0f 91       	pop	r16
    62b2:	ff 90       	pop	r15
    62b4:	ef 90       	pop	r14
    62b6:	08 95       	ret

000062b8 <measFindMedian>:
	#endif
}

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
    62b8:	cf 93       	push	r28
    62ba:	df 93       	push	r29
    62bc:	ec 01       	movw	r28, r24
	if(arr_len==1) return meas[0];
    62be:	61 30       	cpi	r22, 0x01	; 1
    62c0:	09 f4       	brne	.+2      	; 0x62c4 <measFindMedian+0xc>
    62c2:	48 c0       	rjmp	.+144    	; 0x6354 <measFindMedian+0x9c>
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    62c4:	62 30       	cpi	r22, 0x02	; 2
    62c6:	09 f4       	brne	.+2      	; 0x62ca <measFindMedian+0x12>
    62c8:	4a c0       	rjmp	.+148    	; 0x635e <measFindMedian+0xa6>
	
	for(uint8_t i=0; i<arr_len ; i++){
    62ca:	66 23       	and	r22, r22
    62cc:	79 f1       	breq	.+94     	; 0x632c <measFindMedian+0x74>
    62ce:	de 01       	movw	r26, r28
    62d0:	80 e0       	ldi	r24, 0x00	; 0
		for(uint8_t j=i+1 ; j<arr_len ; j++){
    62d2:	8f 5f       	subi	r24, 0xFF	; 255
    62d4:	68 17       	cp	r22, r24
    62d6:	d9 f0       	breq	.+54     	; 0x630e <measFindMedian+0x56>
    62d8:	98 2f       	mov	r25, r24
			if(meas[j] < meas[i]){
    62da:	e9 2f       	mov	r30, r25
    62dc:	f0 e0       	ldi	r31, 0x00	; 0
    62de:	ee 0f       	add	r30, r30
    62e0:	ff 1f       	adc	r31, r31
    62e2:	ec 0f       	add	r30, r28
    62e4:	fd 1f       	adc	r31, r29
    62e6:	40 81       	ld	r20, Z
    62e8:	51 81       	ldd	r21, Z+1	; 0x01
    62ea:	2d 91       	ld	r18, X+
    62ec:	3c 91       	ld	r19, X
    62ee:	11 97       	sbiw	r26, 0x01	; 1
    62f0:	42 17       	cp	r20, r18
    62f2:	53 07       	cpc	r21, r19
    62f4:	2c f4       	brge	.+10     	; 0x6300 <measFindMedian+0x48>
				int16_t temp = meas[i];
				meas[i] = meas[j];
    62f6:	4d 93       	st	X+, r20
    62f8:	5c 93       	st	X, r21
    62fa:	11 97       	sbiw	r26, 0x01	; 1
				meas[j] = temp;
    62fc:	20 83       	st	Z, r18
    62fe:	31 83       	std	Z+1, r19	; 0x01
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++){
		for(uint8_t j=i+1 ; j<arr_len ; j++){
    6300:	9f 5f       	subi	r25, 0xFF	; 255
    6302:	69 13       	cpse	r22, r25
    6304:	ea cf       	rjmp	.-44     	; 0x62da <measFindMedian+0x22>
    6306:	12 96       	adiw	r26, 0x02	; 2
    6308:	8f 5f       	subi	r24, 0xFF	; 255
    630a:	68 13       	cpse	r22, r24
    630c:	e5 cf       	rjmp	.-54     	; 0x62d8 <measFindMedian+0x20>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    630e:	60 ff       	sbrs	r22, 0
    6310:	0d c0       	rjmp	.+26     	; 0x632c <measFindMedian+0x74>
	else return meas[arr_len/2];
    6312:	66 95       	lsr	r22
    6314:	26 2f       	mov	r18, r22
    6316:	30 e0       	ldi	r19, 0x00	; 0
    6318:	22 0f       	add	r18, r18
    631a:	33 1f       	adc	r19, r19
    631c:	fe 01       	movw	r30, r28
    631e:	e2 0f       	add	r30, r18
    6320:	f3 1f       	adc	r31, r19
    6322:	80 81       	ld	r24, Z
    6324:	91 81       	ldd	r25, Z+1	; 0x01
    6326:	df 91       	pop	r29
    6328:	cf 91       	pop	r28
    632a:	08 95       	ret
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    632c:	66 95       	lsr	r22
    632e:	fe 01       	movw	r30, r28
    6330:	e6 0f       	add	r30, r22
    6332:	f1 1d       	adc	r31, r1
    6334:	e6 0f       	add	r30, r22
    6336:	f1 1d       	adc	r31, r1
    6338:	32 97       	sbiw	r30, 0x02	; 2
    633a:	22 81       	ldd	r18, Z+2	; 0x02
    633c:	33 81       	ldd	r19, Z+3	; 0x03
    633e:	80 81       	ld	r24, Z
    6340:	91 81       	ldd	r25, Z+1	; 0x01
    6342:	82 0f       	add	r24, r18
    6344:	93 1f       	adc	r25, r19
    6346:	97 fd       	sbrc	r25, 7
    6348:	12 c0       	rjmp	.+36     	; 0x636e <measFindMedian+0xb6>
    634a:	95 95       	asr	r25
    634c:	87 95       	ror	r24
	else return meas[arr_len/2];
    634e:	df 91       	pop	r29
    6350:	cf 91       	pop	r28
    6352:	08 95       	ret
}

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
    6354:	88 81       	ld	r24, Y
    6356:	99 81       	ldd	r25, Y+1	; 0x01
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
	else return meas[arr_len/2];
    6358:	df 91       	pop	r29
    635a:	cf 91       	pop	r28
    635c:	08 95       	ret

// Finds the median of arr_len numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t measFindMedian(int16_t* meas, uint8_t arr_len){
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    635e:	28 81       	ld	r18, Y
    6360:	39 81       	ldd	r19, Y+1	; 0x01
    6362:	8a 81       	ldd	r24, Y+2	; 0x02
    6364:	9b 81       	ldd	r25, Y+3	; 0x03
    6366:	82 0f       	add	r24, r18
    6368:	93 1f       	adc	r25, r19
    636a:	97 ff       	sbrs	r25, 7
    636c:	ee cf       	rjmp	.-36     	; 0x634a <measFindMedian+0x92>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    636e:	01 96       	adiw	r24, 0x01	; 1
    6370:	ec cf       	rjmp	.-40     	; 0x634a <measFindMedian+0x92>

00006372 <getRedSensor>:
	#endif		
}

#ifndef AUDIO_DROPLET

int16_t getRedSensor(){
    6372:	cf 93       	push	r28
    6374:	df 93       	push	r29
    6376:	cd b7       	in	r28, 0x3d	; 61
    6378:	de b7       	in	r29, 0x3e	; 62
    637a:	2a 97       	sbiw	r28, 0x0a	; 10
    637c:	cd bf       	out	0x3d, r28	; 61
    637e:	de bf       	out	0x3e, r29	; 62
    6380:	fe 01       	movw	r30, r28
    6382:	31 96       	adiw	r30, 0x01	; 1
    6384:	ae 01       	movw	r20, r28
    6386:	45 5f       	subi	r20, 0xF5	; 245
    6388:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    638a:	31 e0       	ldi	r19, 0x01	; 1
int16_t getRedSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    638c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
    6390:	80 68       	ori	r24, 0x80	; 128
    6392:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
    6396:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>
    639a:	88 23       	and	r24, r24
    639c:	e1 f3       	breq	.-8      	; 0x6396 <getRedSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
    639e:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    63a2:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    63a6:	90 e0       	ldi	r25, 0x00	; 0
    63a8:	92 2b       	or	r25, r18
    63aa:	95 95       	asr	r25
    63ac:	87 95       	ror	r24
    63ae:	95 95       	asr	r25
    63b0:	87 95       	ror	r24
    63b2:	95 95       	asr	r25
    63b4:	87 95       	ror	r24
    63b6:	95 95       	asr	r25
    63b8:	87 95       	ror	r24
    63ba:	81 93       	st	Z+, r24
    63bc:	91 93       	st	Z+, r25
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    63be:	30 93 23 02 	sts	0x0223, r19	; 0x800223 <__TEXT_REGION_LENGTH__+0x700223>

int16_t getRedSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;
	//printf("R: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++){
    63c2:	e4 17       	cp	r30, r20
    63c4:	f5 07       	cpc	r31, r21
    63c6:	11 f7       	brne	.-60     	; 0x638c <getRedSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
		//printf("%6d ", meas[meas_count]);
	}
	//printf("\r\n");
	red_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    63c8:	63 e0       	ldi	r22, 0x03	; 3
    63ca:	ce 01       	movw	r24, r28
    63cc:	05 96       	adiw	r24, 0x05	; 5
    63ce:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <measFindMedian>
	return red_val;
}
    63d2:	2a 96       	adiw	r28, 0x0a	; 10
    63d4:	cd bf       	out	0x3d, r28	; 61
    63d6:	de bf       	out	0x3e, r29	; 62
    63d8:	df 91       	pop	r29
    63da:	cf 91       	pop	r28
    63dc:	08 95       	ret

000063de <getGreenSensor>:

int16_t getGreenSensor(){
    63de:	cf 93       	push	r28
    63e0:	df 93       	push	r29
    63e2:	cd b7       	in	r28, 0x3d	; 61
    63e4:	de b7       	in	r29, 0x3e	; 62
    63e6:	2a 97       	sbiw	r28, 0x0a	; 10
    63e8:	cd bf       	out	0x3d, r28	; 61
    63ea:	de bf       	out	0x3e, r29	; 62
    63ec:	fe 01       	movw	r30, r28
    63ee:	31 96       	adiw	r30, 0x01	; 1
    63f0:	ae 01       	movw	r20, r28
    63f2:	45 5f       	subi	r20, 0xF5	; 245
    63f4:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
    63f6:	31 e0       	ldi	r19, 0x01	; 1
int16_t getGreenSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    63f8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
    63fc:	80 68       	ori	r24, 0x80	; 128
    63fe:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
    6402:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>
    6406:	88 23       	and	r24, r24
    6408:	e1 f3       	breq	.-8      	; 0x6402 <getGreenSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
    640a:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    640e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    6412:	90 e0       	ldi	r25, 0x00	; 0
    6414:	92 2b       	or	r25, r18
    6416:	95 95       	asr	r25
    6418:	87 95       	ror	r24
    641a:	95 95       	asr	r25
    641c:	87 95       	ror	r24
    641e:	95 95       	asr	r25
    6420:	87 95       	ror	r24
    6422:	95 95       	asr	r25
    6424:	87 95       	ror	r24
    6426:	81 93       	st	Z+, r24
    6428:	91 93       	st	Z+, r25
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
    642a:	30 93 2b 02 	sts	0x022B, r19	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>

int16_t getGreenSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	//printf("G: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
    642e:	e4 17       	cp	r30, r20
    6430:	f5 07       	cpc	r31, r21
    6432:	11 f7       	brne	.-60     	; 0x63f8 <getGreenSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag	
		//printf("%6d ", meas[meas_count]);
	}
	//printf("\r\n");
	green_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    6434:	63 e0       	ldi	r22, 0x03	; 3
    6436:	ce 01       	movw	r24, r28
    6438:	05 96       	adiw	r24, 0x05	; 5
    643a:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <measFindMedian>

	return green_val;
}
    643e:	2a 96       	adiw	r28, 0x0a	; 10
    6440:	cd bf       	out	0x3d, r28	; 61
    6442:	de bf       	out	0x3e, r29	; 62
    6444:	df 91       	pop	r29
    6446:	cf 91       	pop	r28
    6448:	08 95       	ret

0000644a <getBlueSensor>:

int16_t getBlueSensor(){
    644a:	cf 93       	push	r28
    644c:	df 93       	push	r29
    644e:	cd b7       	in	r28, 0x3d	; 61
    6450:	de b7       	in	r29, 0x3e	; 62
    6452:	2a 97       	sbiw	r28, 0x0a	; 10
    6454:	cd bf       	out	0x3d, r28	; 61
    6456:	de bf       	out	0x3e, r29	; 62
    6458:	fe 01       	movw	r30, r28
    645a:	31 96       	adiw	r30, 0x01	; 1
    645c:	ae 01       	movw	r20, r28
    645e:	45 5f       	subi	r20, 0xF5	; 245
    6460:	5f 4f       	sbci	r21, 0xFF	; 255
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    6462:	31 e0       	ldi	r19, 0x01	; 1
int16_t getBlueSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    6464:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
    6468:	80 68       	ori	r24, 0x80	; 128
    646a:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
    646e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>
    6472:	88 23       	and	r24, r24
    6474:	e1 f3       	breq	.-8      	; 0x646e <getBlueSensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
    6476:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    647a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    647e:	90 e0       	ldi	r25, 0x00	; 0
    6480:	92 2b       	or	r25, r18
    6482:	95 95       	asr	r25
    6484:	87 95       	ror	r24
    6486:	95 95       	asr	r25
    6488:	87 95       	ror	r24
    648a:	95 95       	asr	r25
    648c:	87 95       	ror	r24
    648e:	95 95       	asr	r25
    6490:	87 95       	ror	r24
    6492:	81 93       	st	Z+, r24
    6494:	91 93       	st	Z+, r25
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    6496:	30 93 33 02 	sts	0x0233, r19	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>

int16_t getBlueSensor(){
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	//printf("B: ");
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)	{
    649a:	e4 17       	cp	r30, r20
    649c:	f5 07       	cpc	r31, r21
    649e:	11 f7       	brne	.-60     	; 0x6464 <getBlueSensor+0x1a>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
		//printf("%6d ", meas[meas_count]);
	}		
	//printf("\r\n");
	blue_val=measFindMedian(&meas[2], RGB_MEAS_COUNT-2);
    64a0:	63 e0       	ldi	r22, 0x03	; 3
    64a2:	ce 01       	movw	r24, r28
    64a4:	05 96       	adiw	r24, 0x05	; 5
    64a6:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <measFindMedian>
		
	return blue_val;
}
    64aa:	2a 96       	adiw	r28, 0x0a	; 10
    64ac:	cd bf       	out	0x3d, r28	; 61
    64ae:	de bf       	out	0x3e, r29	; 62
    64b0:	df 91       	pop	r29
    64b2:	cf 91       	pop	r28
    64b4:	08 95       	ret

000064b6 <rgbSensorInit>:
	uint32_t i;
	float f;
} u;

void rgbSensorInit()
{
    64b6:	cf 93       	push	r28
		result = twiWriteWrapper(RGB_SENSE_ADDR, &(power_on_sequence[4]), 2, callerDescr);
		if(!result)	printf_P(RGB_SENSE_POWERON_FAILURE,3);
		result = twiWriteWrapper(RGB_SENSE_ADDR, &(power_on_sequence[6]), 2, callerDescr);
		if(!result)	printf_P(RGB_SENSE_POWERON_FAILURE,4);
	#else		
		RGB_SENSOR_PORT.DIRCLR = RGB_SENSOR_R_PIN_bm | RGB_SENSOR_G_PIN_bm | RGB_SENSOR_B_PIN_bm;
    64b8:	80 ee       	ldi	r24, 0xE0	; 224
    64ba:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>

		ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    64be:	80 e2       	ldi	r24, 0x20	; 32
    64c0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
		ADCA.CTRLB = ADC_RESOLUTION_LEFT12BIT_gc | ADC_CONMODE_bm;
    64c4:	86 e1       	ldi	r24, 0x16	; 22
    64c6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
		ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc;
    64ca:	86 e0       	ldi	r24, 0x06	; 6
    64cc:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
		/* When differential input is used, signed mode must be used. (sec. 28.6 of Manual) */

		ADCA.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    64d0:	83 e0       	ldi	r24, 0x03	; 3
    64d2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
		ADCA.CH1.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    64d6:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
		ADCA.CH2.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_2X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    64da:	87 e0       	ldi	r24, 0x07	; 7
    64dc:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
	
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Red sensor on ADC A channel 0
    64e0:	8c e2       	ldi	r24, 0x2C	; 44
    64e2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
		ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN6_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Green sensor on ADC A channel 1
    64e6:	84 e3       	ldi	r24, 0x34	; 52
    64e8:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <__TEXT_REGION_LENGTH__+0x700229>
		ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Blue sensor on ADC A channel 2
    64ec:	8c e3       	ldi	r24, 0x3C	; 60
    64ee:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <__TEXT_REGION_LENGTH__+0x700231>
	
		ADCA.CALL = PRODSIGNATURES_ADCACAL0;
    64f2:	80 b5       	in	r24, 0x20	; 32
    64f4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
		ADCA.CALH = PRODSIGNATURES_ADCACAL1;
    64f8:	81 b5       	in	r24, 0x21	; 33
    64fa:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>

		ADCA.CTRLA = ADC_ENABLE_bm;
    64fe:	81 e0       	ldi	r24, 0x01	; 1
    6500:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
    6504:	8f e8       	ldi	r24, 0x8F	; 143
    6506:	91 e0       	ldi	r25, 0x01	; 1
    6508:	01 97       	sbiw	r24, 0x01	; 1
    650a:	f1 f7       	brne	.-4      	; 0x6508 <rgbSensorInit+0x52>
    650c:	00 c0       	rjmp	.+0      	; 0x650e <rgbSensorInit+0x58>
    650e:	00 00       	nop
	
		//read_color_settings();
	
		delay_us(50);
		const int8_t num_samples = 3;
		getRedSensor(); getBlueSensor(); getGreenSensor();
    6510:	0e 94 b9 31 	call	0x6372	; 0x6372 <getRedSensor>
    6514:	0e 94 25 32 	call	0x644a	; 0x644a <getBlueSensor>
    6518:	0e 94 ef 31 	call	0x63de	; 0x63de <getGreenSensor>
		delayMS(10);
    651c:	8a e0       	ldi	r24, 0x0A	; 10
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    6524:	c0 e0       	ldi	r28, 0x00	; 0
		int16_t r_avg=0, g_avg=0, b_avg=0;
		for(uint8_t i=0; i<num_samples; i++)
		{
			r_avg+=getRedSensor();
    6526:	0e 94 b9 31 	call	0x6372	; 0x6372 <getRedSensor>
			g_avg+=getGreenSensor();
    652a:	0e 94 ef 31 	call	0x63de	; 0x63de <getGreenSensor>
			b_avg+=getBlueSensor();
    652e:	0e 94 25 32 	call	0x644a	; 0x644a <getBlueSensor>
			delayMS(10);
    6532:	8a e0       	ldi	r24, 0x0A	; 10
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
		delay_us(50);
		const int8_t num_samples = 3;
		getRedSensor(); getBlueSensor(); getGreenSensor();
		delayMS(10);
		int16_t r_avg=0, g_avg=0, b_avg=0;
		for(uint8_t i=0; i<num_samples; i++)
    653a:	cf 5f       	subi	r28, 0xFF	; 255
    653c:	c3 30       	cpi	r28, 0x03	; 3
    653e:	99 f7       	brne	.-26     	; 0x6526 <rgbSensorInit+0x70>
		}
		r_baseline= r_avg/num_samples;
		g_baseline= g_avg/num_samples;
		b_baseline= b_avg/num_samples;
		//printf("Baselines:\r\n%3d  %3d  %3d\r\n", r_baseline, g_baseline, b_baseline);
		r_baseline = 0;
    6540:	10 92 dc 23 	sts	0x23DC, r1	; 0x8023dc <r_baseline>
    6544:	10 92 dd 23 	sts	0x23DD, r1	; 0x8023dd <r_baseline+0x1>
		g_baseline = 0;
    6548:	10 92 da 23 	sts	0x23DA, r1	; 0x8023da <g_baseline>
    654c:	10 92 db 23 	sts	0x23DB, r1	; 0x8023db <g_baseline+0x1>
		b_baseline = 0;	
    6550:	10 92 d8 23 	sts	0x23D8, r1	; 0x8023d8 <b_baseline>
    6554:	10 92 d9 23 	sts	0x23D9, r1	; 0x8023d9 <b_baseline+0x1>
	#endif		
}
    6558:	cf 91       	pop	r28
    655a:	08 95       	ret

0000655c <getRGB>:

#endif


void getRGB(int16_t *r, int16_t *g, int16_t *b)
{
    655c:	af 92       	push	r10
    655e:	bf 92       	push	r11
    6560:	cf 92       	push	r12
    6562:	df 92       	push	r13
    6564:	ef 92       	push	r14
    6566:	ff 92       	push	r15
    6568:	0f 93       	push	r16
    656a:	1f 93       	push	r17
    656c:	cf 93       	push	r28
    656e:	df 93       	push	r29
    6570:	5c 01       	movw	r10, r24
    6572:	6b 01       	movw	r12, r22
    6574:	7a 01       	movw	r14, r20
		}
		else printf_P(PSTR("Read failed.\r\n"));
	#else
		int16_t rTemp,gTemp,bTemp;
	
		rTemp = getRedSensor();
    6576:	0e 94 b9 31 	call	0x6372	; 0x6372 <getRedSensor>
    657a:	8c 01       	movw	r16, r24
		gTemp = getGreenSensor();
    657c:	0e 94 ef 31 	call	0x63de	; 0x63de <getGreenSensor>
    6580:	ec 01       	movw	r28, r24
		bTemp = getBlueSensor();		
    6582:	0e 94 25 32 	call	0x644a	; 0x644a <getBlueSensor>
		rTemp = rTemp - r_baseline;
    6586:	20 91 dc 23 	lds	r18, 0x23DC	; 0x8023dc <r_baseline>
    658a:	30 91 dd 23 	lds	r19, 0x23DD	; 0x8023dd <r_baseline+0x1>
    658e:	02 1b       	sub	r16, r18
    6590:	13 0b       	sbc	r17, r19
		gTemp = gTemp - g_baseline;
    6592:	20 91 da 23 	lds	r18, 0x23DA	; 0x8023da <g_baseline>
    6596:	30 91 db 23 	lds	r19, 0x23DB	; 0x8023db <g_baseline+0x1>
    659a:	c2 1b       	sub	r28, r18
    659c:	d3 0b       	sbc	r29, r19
		bTemp = bTemp - b_baseline;
    659e:	20 91 d8 23 	lds	r18, 0x23D8	; 0x8023d8 <b_baseline>
    65a2:	30 91 d9 23 	lds	r19, 0x23D9	; 0x8023d9 <b_baseline+0x1>
    65a6:	82 1b       	sub	r24, r18
    65a8:	93 0b       	sbc	r25, r19
		//if(rTemp<0)	rTemp=0;
		//if(gTemp<0)	gTemp=0;
		//if(bTemp<0)	bTemp=0;
		if(r!=NULL) *r = rTemp;
    65aa:	a1 14       	cp	r10, r1
    65ac:	b1 04       	cpc	r11, r1
    65ae:	19 f0       	breq	.+6      	; 0x65b6 <getRGB+0x5a>
    65b0:	f5 01       	movw	r30, r10
    65b2:	00 83       	st	Z, r16
    65b4:	11 83       	std	Z+1, r17	; 0x01
		if(g!=NULL) *g = gTemp;
    65b6:	c1 14       	cp	r12, r1
    65b8:	d1 04       	cpc	r13, r1
    65ba:	19 f0       	breq	.+6      	; 0x65c2 <getRGB+0x66>
    65bc:	f6 01       	movw	r30, r12
    65be:	c0 83       	st	Z, r28
    65c0:	d1 83       	std	Z+1, r29	; 0x01
		if(b!=NULL) *b = bTemp;
    65c2:	e1 14       	cp	r14, r1
    65c4:	f1 04       	cpc	r15, r1
    65c6:	19 f0       	breq	.+6      	; 0x65ce <getRGB+0x72>
    65c8:	f7 01       	movw	r30, r14
    65ca:	80 83       	st	Z, r24
    65cc:	91 83       	std	Z+1, r25	; 0x01
	#endif
}
    65ce:	df 91       	pop	r29
    65d0:	cf 91       	pop	r28
    65d2:	1f 91       	pop	r17
    65d4:	0f 91       	pop	r16
    65d6:	ff 90       	pop	r15
    65d8:	ef 90       	pop	r14
    65da:	df 90       	pop	r13
    65dc:	cf 90       	pop	r12
    65de:	bf 90       	pop	r11
    65e0:	af 90       	pop	r10
    65e2:	08 95       	ret

000065e4 <scheduler_free>:
	
	return (volatile Task_t*)0xFFFF;

}

static void scheduler_free(volatile Task_t* tgt){
    65e4:	cf 93       	push	r28
    65e6:	df 93       	push	r29
    65e8:	ec 01       	movw	r28, r24
	if((tgt<task_storage_arr)||(tgt>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS])))){
    65ea:	83 e2       	ldi	r24, 0x23	; 35
    65ec:	ce 3d       	cpi	r28, 0xDE	; 222
    65ee:	d8 07       	cpc	r29, r24
    65f0:	28 f0       	brcs	.+10     	; 0x65fc <scheduler_free+0x18>
    65f2:	84 e2       	ldi	r24, 0x24	; 36
    65f4:	ca 36       	cpi	r28, 0x6A	; 106
    65f6:	d8 07       	cpc	r29, r24
    65f8:	b1 f0       	breq	.+44     	; 0x6626 <scheduler_free+0x42>
    65fa:	a8 f0       	brcs	.+42     	; 0x6626 <scheduler_free+0x42>
		printf_P(PSTR("ERROR: In scheduler_free, tgt (%X) was outside valid Task* range.\r\n"),tgt);
    65fc:	df 93       	push	r29
    65fe:	cf 93       	push	r28
    6600:	8a ed       	ldi	r24, 0xDA	; 218
    6602:	9b e0       	ldi	r25, 0x0B	; 11
    6604:	9f 93       	push	r25
    6606:	8f 93       	push	r24
    6608:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
		setRGB(0,0,255);
    660c:	4f ef       	ldi	r20, 0xFF	; 255
    660e:	60 e0       	ldi	r22, 0x00	; 0
    6610:	80 e0       	ldi	r24, 0x00	; 0
    6612:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
		delayMS(60000);
    6616:	80 e6       	ldi	r24, 0x60	; 96
    6618:	9a ee       	ldi	r25, 0xEA	; 234
    661a:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    661e:	0f 90       	pop	r0
    6620:	0f 90       	pop	r0
    6622:	0f 90       	pop	r0
    6624:	0f 90       	pop	r0
	}
	tgt->arg = 0;
    6626:	1a 86       	std	Y+10, r1	; 0x0a
    6628:	1b 86       	std	Y+11, r1	; 0x0b
	tgt->period = 0;
    662a:	1c 82       	std	Y+4, r1	; 0x04
    662c:	1d 82       	std	Y+5, r1	; 0x05
    662e:	1e 82       	std	Y+6, r1	; 0x06
    6630:	1f 82       	std	Y+7, r1	; 0x07
	(tgt->func).noarg_func = ((void (*)(void))NULL);
    6632:	18 86       	std	Y+8, r1	; 0x08
    6634:	19 86       	std	Y+9, r1	; 0x09
	tgt->scheduled_time = 0;
    6636:	18 82       	st	Y, r1
    6638:	19 82       	std	Y+1, r1	; 0x01
    663a:	1a 82       	std	Y+2, r1	; 0x02
    663c:	1b 82       	std	Y+3, r1	; 0x03
	tgt->next = NULL;
    663e:	1c 86       	std	Y+12, r1	; 0x0c
    6640:	1d 86       	std	Y+13, r1	; 0x0d
}
    6642:	df 91       	pop	r29
    6644:	cf 91       	pop	r28
    6646:	08 95       	ret

00006648 <schedulerInit>:

void schedulerInit(){
    6648:	0f 93       	push	r16
    664a:	1f 93       	push	r17
    664c:	cf 93       	push	r28
    664e:	df 93       	push	r29
	task_list = NULL;
    6650:	10 92 7f 26 	sts	0x267F, r1	; 0x80267f <task_list>
    6654:	10 92 80 26 	sts	0x2680, r1	; 0x802680 <task_list+0x1>
	num_tasks = 0;
    6658:	10 92 7c 24 	sts	0x247C, r1	; 0x80247c <num_tasks>
	task_executing = 0;
    665c:	10 92 7a 26 	sts	0x267A, r1	; 0x80267a <task_executing>
    6660:	ce ed       	ldi	r28, 0xDE	; 222
    6662:	d3 e2       	ldi	r29, 0x23	; 35
    6664:	0a e6       	ldi	r16, 0x6A	; 106
    6666:	14 e2       	ldi	r17, 0x24	; 36
	for(uint8_t i=0; i<MAX_NUM_SCHEDULED_TASKS; i++) scheduler_free(&task_storage_arr[i]);
    6668:	ce 01       	movw	r24, r28
    666a:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <scheduler_free>
    666e:	2e 96       	adiw	r28, 0x0e	; 14
    6670:	0c 17       	cp	r16, r28
    6672:	1d 07       	cpc	r17, r29
    6674:	c9 f7       	brne	.-14     	; 0x6668 <schedulerInit+0x20>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){  // Disable interrupts during initialization
    6676:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6678:	f8 94       	cli
		// Set up real-time clock
		rtc_epoch = 0;
    667a:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <rtc_epoch>
    667e:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <rtc_epoch+0x1>
		CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    6682:	85 e0       	ldi	r24, 0x05	; 5
    6684:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
		RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;		// High level overflow interrupt to increment the epoch counter
    6688:	83 e0       	ldi	r24, 0x03	; 3
    668a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    668e:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6692:	80 fd       	sbrc	r24, 0
    6694:	fc cf       	rjmp	.-8      	; 0x668e <schedulerInit+0x46>
		RTC.PER = 0xFFFF;
    6696:	2f ef       	ldi	r18, 0xFF	; 255
    6698:	3f ef       	ldi	r19, 0xFF	; 255
    669a:	20 93 0a 04 	sts	0x040A, r18	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    669e:	30 93 0b 04 	sts	0x040B, r19	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    66a2:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    66a6:	80 fd       	sbrc	r24, 0
    66a8:	fc cf       	rjmp	.-8      	; 0x66a2 <schedulerInit+0x5a>
		RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    66aa:	81 e0       	ldi	r24, 0x01	; 1
    66ac:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    66b0:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    66b4:	80 fd       	sbrc	r24, 0
    66b6:	fc cf       	rjmp	.-8      	; 0x66b0 <schedulerInit+0x68>
		RTC.CNT = 0;
    66b8:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    66bc:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    66c0:	9f bf       	out	0x3f, r25	; 63
	}
}
    66c2:	df 91       	pop	r29
    66c4:	cf 91       	pop	r28
    66c6:	1f 91       	pop	r17
    66c8:	0f 91       	pop	r16
    66ca:	08 95       	ret

000066cc <taskListCleanup>:

//This function checks for errors or inconsistencies in the task list, and attempts to correct them.
void taskListCleanup(){
    66cc:	cf 92       	push	r12
    66ce:	df 92       	push	r13
    66d0:	ef 92       	push	r14
    66d2:	ff 92       	push	r15
    66d4:	0f 93       	push	r16
    66d6:	1f 93       	push	r17
    66d8:	cf 93       	push	r28
    66da:	df 93       	push	r29
	printf_P(PSTR("\tAttempting to restore task_list.\r\n\tIf you only see this message rarely, don't worry too much.\r\n"));
    66dc:	89 e7       	ldi	r24, 0x79	; 121
    66de:	9b e0       	ldi	r25, 0x0B	; 11
    66e0:	9f 93       	push	r25
    66e2:	8f 93       	push	r24
    66e4:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
	volatile Task_t* cur_task = task_list;
    66e8:	c0 91 7f 26 	lds	r28, 0x267F	; 0x80267f <task_list>
    66ec:	d0 91 80 26 	lds	r29, 0x2680	; 0x802680 <task_list+0x1>
	//volatile Task_t* prev_task;
	uint32_t nextTime = getTime()+500;
    66f0:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    66f4:	ab 01       	movw	r20, r22
    66f6:	bc 01       	movw	r22, r24
    66f8:	4c 50       	subi	r20, 0x0C	; 12
    66fa:	5e 4f       	sbci	r21, 0xFE	; 254
    66fc:	6f 4f       	sbci	r22, 0xFF	; 255
    66fe:	7f 4f       	sbci	r23, 0xFF	; 255
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6700:	ef b7       	in	r30, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6702:	f8 94       	cli
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    6704:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6708:	8b 7f       	andi	r24, 0xFB	; 251
    670a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		while (cur_task != NULL){
    670e:	0f 90       	pop	r0
    6710:	0f 90       	pop	r0
    6712:	20 97       	sbiw	r28, 0x00	; 0
    6714:	99 f1       	breq	.+102    	; 0x677c <taskListCleanup+0xb0>
			cur_task->scheduled_time = nextTime;
    6716:	48 83       	st	Y, r20
    6718:	59 83       	std	Y+1, r21	; 0x01
    671a:	6a 83       	std	Y+2, r22	; 0x02
    671c:	7b 83       	std	Y+3, r23	; 0x03
			if(first){
				if (cur_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    671e:	c8 80       	ld	r12, Y
    6720:	d9 80       	ldd	r13, Y+1	; 0x01
    6722:	ea 80       	ldd	r14, Y+2	; 0x02
    6724:	fb 80       	ldd	r15, Y+3	; 0x03
    6726:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <rtc_epoch>
    672a:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <rtc_epoch+0x1>
    672e:	00 91 0a 04 	lds	r16, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    6732:	10 91 0b 04 	lds	r17, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    6736:	a0 e0       	ldi	r26, 0x00	; 0
    6738:	b0 e0       	ldi	r27, 0x00	; 0
    673a:	dc 01       	movw	r26, r24
    673c:	99 27       	eor	r25, r25
    673e:	88 27       	eor	r24, r24
    6740:	20 e0       	ldi	r18, 0x00	; 0
    6742:	30 e0       	ldi	r19, 0x00	; 0
    6744:	80 2b       	or	r24, r16
    6746:	91 2b       	or	r25, r17
    6748:	a2 2b       	or	r26, r18
    674a:	b3 2b       	or	r27, r19
    674c:	8c 15       	cp	r24, r12
    674e:	9d 05       	cpc	r25, r13
    6750:	ae 05       	cpc	r26, r14
    6752:	bf 05       	cpc	r27, r15
    6754:	e8 f4       	brcc	.+58     	; 0x6790 <taskListCleanup+0xc4>
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
					RTC.COMP = ((uint16_t)(cur_task->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    6756:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    675a:	8b 7f       	andi	r24, 0xFB	; 251
    675c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6760:	04 c0       	rjmp	.+8      	; 0x676a <taskListCleanup+0x9e>
	uint32_t nextTime = getTime()+500;
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
			cur_task->scheduled_time = nextTime;
    6762:	48 83       	st	Y, r20
    6764:	59 83       	std	Y+1, r21	; 0x01
    6766:	6a 83       	std	Y+2, r22	; 0x02
    6768:	7b 83       	std	Y+3, r23	; 0x03
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
				}
				first = 0;
			}
			nextTime += 500;
    676a:	4c 50       	subi	r20, 0x0C	; 12
    676c:	5e 4f       	sbci	r21, 0xFE	; 254
    676e:	6f 4f       	sbci	r22, 0xFF	; 255
    6770:	7f 4f       	sbci	r23, 0xFF	; 255
			cur_task = cur_task->next;
    6772:	0c 84       	ldd	r0, Y+12	; 0x0c
    6774:	dd 85       	ldd	r29, Y+13	; 0x0d
    6776:	c0 2d       	mov	r28, r0
	//volatile Task_t* prev_task;
	uint32_t nextTime = getTime()+500;
	uint8_t first = 1;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
    6778:	20 97       	sbiw	r28, 0x00	; 0
    677a:	99 f7       	brne	.-26     	; 0x6762 <taskListCleanup+0x96>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    677c:	ef bf       	out	0x3f, r30	; 63
			}
			nextTime += 500;
			cur_task = cur_task->next;
		}
	}
}
    677e:	df 91       	pop	r29
    6780:	cf 91       	pop	r28
    6782:	1f 91       	pop	r17
    6784:	0f 91       	pop	r16
    6786:	ff 90       	pop	r15
    6788:	ef 90       	pop	r14
    678a:	df 90       	pop	r13
    678c:	cf 90       	pop	r12
    678e:	08 95       	ret
		RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
		while (cur_task != NULL){
			cur_task->scheduled_time = nextTime;
			if(first){
				if (cur_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6790:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6794:	80 fd       	sbrc	r24, 0
    6796:	fc cf       	rjmp	.-8      	; 0x6790 <taskListCleanup+0xc4>
					RTC.COMP = ((uint16_t)(cur_task->scheduled_time))|0x8;
    6798:	88 81       	ld	r24, Y
    679a:	99 81       	ldd	r25, Y+1	; 0x01
    679c:	aa 81       	ldd	r26, Y+2	; 0x02
    679e:	bb 81       	ldd	r27, Y+3	; 0x03
    67a0:	88 60       	ori	r24, 0x08	; 8
    67a2:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    67a6:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    67aa:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    67ae:	84 60       	ori	r24, 0x04	; 4
    67b0:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    67b4:	da cf       	rjmp	.-76     	; 0x676a <taskListCleanup+0x9e>

000067b6 <removeTask>:
		//task_list_checkup();
	}
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
    67b6:	cf 93       	push	r28
    67b8:	dc 01       	movw	r26, r24
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
    67ba:	83 e2       	ldi	r24, 0x23	; 35
    67bc:	ae 3d       	cpi	r26, 0xDE	; 222
    67be:	b8 07       	cpc	r27, r24
    67c0:	90 f1       	brcs	.+100    	; 0x6826 <removeTask+0x70>
    67c2:	84 e2       	ldi	r24, 0x24	; 36
    67c4:	ac 35       	cpi	r26, 0x5C	; 92
    67c6:	b8 07       	cpc	r27, r24
    67c8:	09 f0       	breq	.+2      	; 0x67cc <removeTask+0x16>
    67ca:	68 f5       	brcc	.+90     	; 0x6826 <removeTask+0x70>
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
		return;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    67cc:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    67ce:	f8 94       	cli
		if(task==NULL){
    67d0:	10 97       	sbiw	r26, 0x00	; 0
    67d2:	31 f1       	breq	.+76     	; 0x6820 <removeTask+0x6a>
			continue;
		}
		if(task_list==task)	{
    67d4:	e0 91 7f 26 	lds	r30, 0x267F	; 0x80267f <task_list>
    67d8:	f0 91 80 26 	lds	r31, 0x2680	; 0x802680 <task_list+0x1>
    67dc:	ae 17       	cp	r26, r30
    67de:	bf 07       	cpc	r27, r31
    67e0:	49 f4       	brne	.+18     	; 0x67f4 <removeTask+0x3e>
    67e2:	26 c0       	rjmp	.+76     	; 0x6830 <removeTask+0x7a>
			task_list=task->next;
			num_tasks--;
		}else{
			volatile Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    67e4:	24 85       	ldd	r18, Z+12	; 0x0c
    67e6:	35 85       	ldd	r19, Z+13	; 0x0d
    67e8:	a2 17       	cp	r26, r18
    67ea:	b3 07       	cpc	r27, r19
    67ec:	39 f0       	breq	.+14     	; 0x67fc <removeTask+0x46>
    67ee:	04 84       	ldd	r0, Z+12	; 0x0c
    67f0:	f5 85       	ldd	r31, Z+13	; 0x0d
    67f2:	e0 2d       	mov	r30, r0
    67f4:	24 85       	ldd	r18, Z+12	; 0x0c
    67f6:	35 85       	ldd	r19, Z+13	; 0x0d
    67f8:	23 2b       	or	r18, r19
    67fa:	a1 f7       	brne	.-24     	; 0x67e4 <removeTask+0x2e>
			if (tmp_task->next != NULL){
    67fc:	24 85       	ldd	r18, Z+12	; 0x0c
    67fe:	35 85       	ldd	r19, Z+13	; 0x0d
    6800:	23 2b       	or	r18, r19
    6802:	59 f0       	breq	.+22     	; 0x681a <removeTask+0x64>
				tmp_task->next = task->next;
    6804:	1c 96       	adiw	r26, 0x0c	; 12
    6806:	2d 91       	ld	r18, X+
    6808:	3c 91       	ld	r19, X
    680a:	1d 97       	sbiw	r26, 0x0d	; 13
    680c:	24 87       	std	Z+12, r18	; 0x0c
    680e:	35 87       	std	Z+13, r19	; 0x0d
				num_tasks--;
    6810:	20 91 7c 24 	lds	r18, 0x247C	; 0x80247c <num_tasks>
    6814:	21 50       	subi	r18, 0x01	; 1
    6816:	20 93 7c 24 	sts	0x247C, r18	; 0x80247c <num_tasks>
    681a:	cd 01       	movw	r24, r26
			}
		}
		scheduler_free(task);		
    681c:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <scheduler_free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6820:	cf bf       	out	0x3f, r28	; 63
	}
}
    6822:	cf 91       	pop	r28
    6824:	08 95       	ret
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    6826:	89 ee       	ldi	r24, 0xE9	; 233
    6828:	91 e2       	ldi	r25, 0x21	; 33
				num_tasks--;
			}
		}
		scheduler_free(task);		
	}
}
    682a:	cf 91       	pop	r28
}

// Remove a task from the task queue
void removeTask(volatile Task_t* task){
	if((task<task_storage_arr)||(task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
		printf("ERROR: Asked to remove_task for task pointer outside the bounds of task_storage_arr.\r\n");
    682c:	0c 94 a7 50 	jmp	0xa14e	; 0xa14e <puts>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		if(task==NULL){
			continue;
		}
		if(task_list==task)	{
			task_list=task->next;
    6830:	1c 96       	adiw	r26, 0x0c	; 12
    6832:	2d 91       	ld	r18, X+
    6834:	3c 91       	ld	r19, X
    6836:	1d 97       	sbiw	r26, 0x0d	; 13
    6838:	20 93 7f 26 	sts	0x267F, r18	; 0x80267f <task_list>
    683c:	30 93 80 26 	sts	0x2680, r19	; 0x802680 <task_list+0x1>
			num_tasks--;
    6840:	20 91 7c 24 	lds	r18, 0x247C	; 0x80247c <num_tasks>
    6844:	21 50       	subi	r18, 0x01	; 1
    6846:	20 93 7c 24 	sts	0x247C, r18	; 0x80247c <num_tasks>
    684a:	e7 cf       	rjmp	.-50     	; 0x681a <removeTask+0x64>

0000684c <printTaskQueue>:
		}
		scheduler_free(task);		
	}
}

void printTaskQueue(){
    684c:	bf 92       	push	r11
    684e:	cf 92       	push	r12
    6850:	df 92       	push	r13
    6852:	ef 92       	push	r14
    6854:	ff 92       	push	r15
    6856:	0f 93       	push	r16
    6858:	1f 93       	push	r17
    685a:	cf 93       	push	r28
    685c:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){  // Disable interrupts during printing
    685e:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6860:	f8 94       	cli
		volatile Task_t* cur_task = task_list;
    6862:	c0 91 7f 26 	lds	r28, 0x267F	; 0x80267f <task_list>
    6866:	d0 91 80 26 	lds	r29, 0x2680	; 0x802680 <task_list+0x1>
		
		printf_P(PSTR("Task Queue (%hu tasks, %hu executing):\r\n"), num_tasks, task_executing);
    686a:	90 91 7a 26 	lds	r25, 0x267A	; 0x80267a <task_executing>
    686e:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <num_tasks>
    6872:	1f 92       	push	r1
    6874:	9f 93       	push	r25
    6876:	1f 92       	push	r1
    6878:	8f 93       	push	r24
    687a:	87 ef       	ldi	r24, 0xF7	; 247
    687c:	99 e0       	ldi	r25, 0x09	; 9
    687e:	9f 93       	push	r25
    6880:	8f 93       	push	r24
    6882:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL){
    6886:	0f 90       	pop	r0
    6888:	0f 90       	pop	r0
    688a:	0f 90       	pop	r0
    688c:	0f 90       	pop	r0
    688e:	0f 90       	pop	r0
    6890:	0f 90       	pop	r0
    6892:	20 97       	sbiw	r28, 0x00	; 0
    6894:	a1 f1       	breq	.+104    	; 0x68fe <printTaskQueue+0xb2>
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_func, cur_task->scheduled_time, cur_task->period, getTime());
    6896:	09 eb       	ldi	r16, 0xB9	; 185
    6898:	19 e0       	ldi	r17, 0x09	; 9
    689a:	05 c0       	rjmp	.+10     	; 0x68a6 <printTaskQueue+0x5a>
			if(cur_task==cur_task->next) break;
			cur_task = cur_task->next;
    689c:	0c 84       	ldd	r0, Y+12	; 0x0c
    689e:	dd 85       	ldd	r29, Y+13	; 0x0d
    68a0:	c0 2d       	mov	r28, r0
		volatile Task_t* cur_task = task_list;
		
		printf_P(PSTR("Task Queue (%hu tasks, %hu executing):\r\n"), num_tasks, task_executing);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL){
    68a2:	20 97       	sbiw	r28, 0x00	; 0
    68a4:	61 f1       	breq	.+88     	; 0x68fe <printTaskQueue+0xb2>
			printf_P(PSTR("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), cur_task, (cur_task->func).noarg_func, cur_task->scheduled_time, cur_task->period, getTime());
    68a6:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    68aa:	fb 01       	movw	r30, r22
    68ac:	cc 80       	ldd	r12, Y+4	; 0x04
    68ae:	dd 80       	ldd	r13, Y+5	; 0x05
    68b0:	ee 80       	ldd	r14, Y+6	; 0x06
    68b2:	ff 80       	ldd	r15, Y+7	; 0x07
    68b4:	48 81       	ld	r20, Y
    68b6:	59 81       	ldd	r21, Y+1	; 0x01
    68b8:	6a 81       	ldd	r22, Y+2	; 0x02
    68ba:	7b 81       	ldd	r23, Y+3	; 0x03
    68bc:	28 85       	ldd	r18, Y+8	; 0x08
    68be:	39 85       	ldd	r19, Y+9	; 0x09
    68c0:	9f 93       	push	r25
    68c2:	8f 93       	push	r24
    68c4:	ff 93       	push	r31
    68c6:	ef 93       	push	r30
    68c8:	ff 92       	push	r15
    68ca:	ef 92       	push	r14
    68cc:	df 92       	push	r13
    68ce:	cf 92       	push	r12
    68d0:	7f 93       	push	r23
    68d2:	6f 93       	push	r22
    68d4:	5f 93       	push	r21
    68d6:	4f 93       	push	r20
    68d8:	3f 93       	push	r19
    68da:	2f 93       	push	r18
    68dc:	df 93       	push	r29
    68de:	cf 93       	push	r28
    68e0:	1f 93       	push	r17
    68e2:	0f 93       	push	r16
    68e4:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
			if(cur_task==cur_task->next) break;
    68e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    68ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    68ec:	2d b7       	in	r18, 0x3d	; 61
    68ee:	3e b7       	in	r19, 0x3e	; 62
    68f0:	2e 5e       	subi	r18, 0xEE	; 238
    68f2:	3f 4f       	sbci	r19, 0xFF	; 255
    68f4:	2d bf       	out	0x3d, r18	; 61
    68f6:	3e bf       	out	0x3e, r19	; 62
    68f8:	8c 17       	cp	r24, r28
    68fa:	9d 07       	cpc	r25, r29
    68fc:	79 f6       	brne	.-98     	; 0x689c <printTaskQueue+0x50>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    68fe:	bf be       	out	0x3f, r11	; 63
			cur_task = cur_task->next;
		}
	}
}
    6900:	df 91       	pop	r29
    6902:	cf 91       	pop	r28
    6904:	1f 91       	pop	r17
    6906:	0f 91       	pop	r16
    6908:	ff 90       	pop	r15
    690a:	ef 90       	pop	r14
    690c:	df 90       	pop	r13
    690e:	cf 90       	pop	r12
    6910:	bf 90       	pop	r11
    6912:	08 95       	ret

00006914 <add_task_to_list>:
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
}

static void add_task_to_list(volatile Task_t* task){
    6914:	8f 92       	push	r8
    6916:	9f 92       	push	r9
    6918:	af 92       	push	r10
    691a:	bf 92       	push	r11
    691c:	ff 92       	push	r15
    691e:	0f 93       	push	r16
    6920:	1f 93       	push	r17
    6922:	cf 93       	push	r28
    6924:	df 93       	push	r29
    6926:	dc 01       	movw	r26, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6928:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    692a:	f8 94       	cli
		// Find the new task's proper spot in the list of tasks
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
    692c:	e0 91 7f 26 	lds	r30, 0x267F	; 0x80267f <task_list>
    6930:	f0 91 80 26 	lds	r31, 0x2680	; 0x802680 <task_list+0x1>
    6934:	1c 96       	adiw	r26, 0x0c	; 12
    6936:	ed 93       	st	X+, r30
    6938:	fc 93       	st	X, r31
    693a:	1d 97       	sbiw	r26, 0x0d	; 13
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
    693c:	30 97       	sbiw	r30, 0x00	; 0
    693e:	09 f4       	brne	.+2      	; 0x6942 <add_task_to_list+0x2e>
    6940:	48 c0       	rjmp	.+144    	; 0x69d2 <add_task_to_list+0xbe>
    6942:	0d 91       	ld	r16, X+
    6944:	1d 91       	ld	r17, X+
    6946:	2d 91       	ld	r18, X+
    6948:	3c 91       	ld	r19, X
    694a:	13 97       	sbiw	r26, 0x03	; 3
    694c:	40 81       	ld	r20, Z
    694e:	51 81       	ldd	r21, Z+1	; 0x01
    6950:	62 81       	ldd	r22, Z+2	; 0x02
    6952:	73 81       	ldd	r23, Z+3	; 0x03
    6954:	40 17       	cp	r20, r16
    6956:	51 07       	cpc	r21, r17
    6958:	62 07       	cpc	r22, r18
    695a:	73 07       	cpc	r23, r19
    695c:	d0 f5       	brcc	.+116    	; 0x69d2 <add_task_to_list+0xbe>
			}
		}else{
			// If the new task is not the next to be executed, iterate through the task_list,
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
    695e:	84 85       	ldd	r24, Z+12	; 0x0c
    6960:	95 85       	ldd	r25, Z+13	; 0x0d
    6962:	89 2b       	or	r24, r25
    6964:	71 f4       	brne	.+28     	; 0x6982 <add_task_to_list+0x6e>
    6966:	1d c0       	rjmp	.+58     	; 0x69a2 <add_task_to_list+0x8e>
				if(tmp_task_ptr->next==tmp_task_ptr){
    6968:	84 85       	ldd	r24, Z+12	; 0x0c
    696a:	95 85       	ldd	r25, Z+13	; 0x0d
    696c:	8e 17       	cp	r24, r30
    696e:	9f 07       	cpc	r25, r31
    6970:	09 f4       	brne	.+2      	; 0x6974 <add_task_to_list+0x60>
    6972:	6e c0       	rjmp	.+220    	; 0x6a50 <add_task_to_list+0x13c>
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_func, task->scheduled_time, task->period, getTime());
					printTaskQueue();
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
    6974:	04 84       	ldd	r0, Z+12	; 0x0c
    6976:	f5 85       	ldd	r31, Z+13	; 0x0d
    6978:	e0 2d       	mov	r30, r0
			}
		}else{
			// If the new task is not the next to be executed, iterate through the task_list,
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
    697a:	24 85       	ldd	r18, Z+12	; 0x0c
    697c:	35 85       	ldd	r19, Z+13	; 0x0d
    697e:	23 2b       	or	r18, r19
    6980:	81 f0       	breq	.+32     	; 0x69a2 <add_task_to_list+0x8e>
    6982:	0d 91       	ld	r16, X+
    6984:	1d 91       	ld	r17, X+
    6986:	2d 91       	ld	r18, X+
    6988:	3c 91       	ld	r19, X
    698a:	13 97       	sbiw	r26, 0x03	; 3
    698c:	c4 85       	ldd	r28, Z+12	; 0x0c
    698e:	d5 85       	ldd	r29, Z+13	; 0x0d
    6990:	48 81       	ld	r20, Y
    6992:	59 81       	ldd	r21, Y+1	; 0x01
    6994:	6a 81       	ldd	r22, Y+2	; 0x02
    6996:	7b 81       	ldd	r23, Y+3	; 0x03
    6998:	40 17       	cp	r20, r16
    699a:	51 07       	cpc	r21, r17
    699c:	62 07       	cpc	r22, r18
    699e:	73 07       	cpc	r23, r19
    69a0:	18 f3       	brcs	.-58     	; 0x6968 <add_task_to_list+0x54>
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
			}
			//set_rgb(r, g, b);
			task->next = tmp_task_ptr->next;
    69a2:	84 85       	ldd	r24, Z+12	; 0x0c
    69a4:	95 85       	ldd	r25, Z+13	; 0x0d
    69a6:	1c 96       	adiw	r26, 0x0c	; 12
    69a8:	8d 93       	st	X+, r24
    69aa:	9c 93       	st	X, r25
    69ac:	1d 97       	sbiw	r26, 0x0d	; 13
			tmp_task_ptr->next = task;
    69ae:	a4 87       	std	Z+12, r26	; 0x0c
    69b0:	b5 87       	std	Z+13, r27	; 0x0d
			//while (RTC.STATUS & RTC_SYNCBUSY_bm);
			//RTC.COMP = RTC.CNT+5;
			//RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		//}

		num_tasks++;
    69b2:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <num_tasks>
    69b6:	8f 5f       	subi	r24, 0xFF	; 255
    69b8:	80 93 7c 24 	sts	0x247C, r24	; 0x80247c <num_tasks>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    69bc:	ff be       	out	0x3f, r15	; 63
		
		//task_list_checkup();
	}
}
    69be:	df 91       	pop	r29
    69c0:	cf 91       	pop	r28
    69c2:	1f 91       	pop	r17
    69c4:	0f 91       	pop	r16
    69c6:	ff 90       	pop	r15
    69c8:	bf 90       	pop	r11
    69ca:	af 90       	pop	r10
    69cc:	9f 90       	pop	r9
    69ce:	8f 90       	pop	r8
    69d0:	08 95       	ret
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
			task_list = task;
    69d2:	a0 93 7f 26 	sts	0x267F, r26	; 0x80267f <task_list>
    69d6:	b0 93 80 26 	sts	0x2680, r27	; 0x802680 <task_list+0x1>
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0){			
    69da:	80 91 7a 26 	lds	r24, 0x267A	; 0x80267a <task_executing>
    69de:	81 11       	cpse	r24, r1
    69e0:	e8 cf       	rjmp	.-48     	; 0x69b2 <add_task_to_list+0x9e>
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    69e2:	8d 90       	ld	r8, X+
    69e4:	9d 90       	ld	r9, X+
    69e6:	ad 90       	ld	r10, X+
    69e8:	bc 90       	ld	r11, X
    69ea:	13 97       	sbiw	r26, 0x03	; 3
    69ec:	40 91 6c 24 	lds	r20, 0x246C	; 0x80246c <rtc_epoch>
    69f0:	50 91 6d 24 	lds	r21, 0x246D	; 0x80246d <rtc_epoch+0x1>
    69f4:	00 91 0a 04 	lds	r16, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    69f8:	10 91 0b 04 	lds	r17, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    69fc:	60 e0       	ldi	r22, 0x00	; 0
    69fe:	70 e0       	ldi	r23, 0x00	; 0
    6a00:	ba 01       	movw	r22, r20
    6a02:	55 27       	eor	r21, r21
    6a04:	44 27       	eor	r20, r20
    6a06:	20 e0       	ldi	r18, 0x00	; 0
    6a08:	30 e0       	ldi	r19, 0x00	; 0
    6a0a:	40 2b       	or	r20, r16
    6a0c:	51 2b       	or	r21, r17
    6a0e:	62 2b       	or	r22, r18
    6a10:	73 2b       	or	r23, r19
    6a12:	48 15       	cp	r20, r8
    6a14:	59 05       	cpc	r21, r9
    6a16:	6a 05       	cpc	r22, r10
    6a18:	7b 05       	cpc	r23, r11
    6a1a:	30 f4       	brcc	.+12     	; 0x6a28 <add_task_to_list+0x114>
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}else{
					RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;					
    6a1c:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6a20:	8b 7f       	andi	r24, 0xFB	; 251
    6a22:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6a26:	c5 cf       	rjmp	.-118    	; 0x69b2 <add_task_to_list+0x9e>
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time){
			task_list = task;
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if(task_executing==0){			
				if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    6a28:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    6a2c:	80 fd       	sbrc	r24, 0
    6a2e:	fc cf       	rjmp	.-8      	; 0x6a28 <add_task_to_list+0x114>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    6a30:	8d 91       	ld	r24, X+
    6a32:	9d 91       	ld	r25, X+
    6a34:	0d 90       	ld	r0, X+
    6a36:	bc 91       	ld	r27, X
    6a38:	a0 2d       	mov	r26, r0
    6a3a:	88 60       	ori	r24, 0x08	; 8
    6a3c:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    6a40:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    6a44:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6a48:	84 60       	ori	r24, 0x04	; 4
    6a4a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6a4e:	b1 cf       	rjmp	.-158    	; 0x69b2 <add_task_to_list+0x9e>
    6a50:	ed 01       	movw	r28, r26
			// find its position in the linked list, and insert it there.
			volatile Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time){
				if(tmp_task_ptr->next==tmp_task_ptr){
					//set_rgb(255, 50, 0);
					printf_P(PSTR("ERROR! Task list has self-reference.\r\n"));
    6a52:	81 e6       	ldi	r24, 0x61	; 97
    6a54:	9a e0       	ldi	r25, 0x0A	; 10
    6a56:	9f 93       	push	r25
    6a58:	8f 93       	push	r24
    6a5a:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
					printf_P(PSTR("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n"), task, (task->func).noarg_func, task->scheduled_time, task->period, getTime());
    6a5e:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    6a62:	db 01       	movw	r26, r22
    6a64:	0c 81       	ldd	r16, Y+4	; 0x04
    6a66:	1d 81       	ldd	r17, Y+5	; 0x05
    6a68:	2e 81       	ldd	r18, Y+6	; 0x06
    6a6a:	3f 81       	ldd	r19, Y+7	; 0x07
    6a6c:	48 81       	ld	r20, Y
    6a6e:	59 81       	ldd	r21, Y+1	; 0x01
    6a70:	6a 81       	ldd	r22, Y+2	; 0x02
    6a72:	7b 81       	ldd	r23, Y+3	; 0x03
    6a74:	e8 85       	ldd	r30, Y+8	; 0x08
    6a76:	f9 85       	ldd	r31, Y+9	; 0x09
    6a78:	9f 93       	push	r25
    6a7a:	8f 93       	push	r24
    6a7c:	bf 93       	push	r27
    6a7e:	af 93       	push	r26
    6a80:	3f 93       	push	r19
    6a82:	2f 93       	push	r18
    6a84:	1f 93       	push	r17
    6a86:	0f 93       	push	r16
    6a88:	7f 93       	push	r23
    6a8a:	6f 93       	push	r22
    6a8c:	5f 93       	push	r21
    6a8e:	4f 93       	push	r20
    6a90:	ff 93       	push	r31
    6a92:	ef 93       	push	r30
    6a94:	df 93       	push	r29
    6a96:	cf 93       	push	r28
    6a98:	80 e2       	ldi	r24, 0x20	; 32
    6a9a:	9a e0       	ldi	r25, 0x0A	; 10
    6a9c:	9f 93       	push	r25
    6a9e:	8f 93       	push	r24
    6aa0:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
					printTaskQueue();
    6aa4:	0e 94 26 34 	call	0x684c	; 0x684c <printTaskQueue>
    6aa8:	ff be       	out	0x3f, r15	; 63
    __asm__ volatile ("" ::: "memory");
    6aaa:	8d b7       	in	r24, 0x3d	; 61
    6aac:	9e b7       	in	r25, 0x3e	; 62
    6aae:	44 96       	adiw	r24, 0x14	; 20
    6ab0:	8d bf       	out	0x3d, r24	; 61
    6ab2:	9e bf       	out	0x3e, r25	; 62
    6ab4:	84 cf       	rjmp	.-248    	; 0x69be <add_task_to_list+0xaa>

00006ab6 <schedule_task_absolute_time>:
	volatile Task_t* new_task = schedule_task_absolute_time(time, function, arg);
	new_task->period = period;
	return new_task;
}

volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
    6ab6:	9f 92       	push	r9
    6ab8:	af 92       	push	r10
    6aba:	bf 92       	push	r11
    6abc:	cf 92       	push	r12
    6abe:	df 92       	push	r13
    6ac0:	ef 92       	push	r14
    6ac2:	ff 92       	push	r15
    6ac4:	0f 93       	push	r16
    6ac6:	1f 93       	push	r17
    6ac8:	cf 93       	push	r28
    6aca:	df 93       	push	r29
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6acc:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6ace:	f8 94       	cli
static volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg);
static void add_task_to_list(volatile Task_t* task);
static int8_t run_tasks(void);

static volatile Task_t* scheduler_malloc(void){
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
    6ad0:	e0 91 7c 24 	lds	r30, 0x247C	; 0x80247c <num_tasks>
    6ad4:	ea 30       	cpi	r30, 0x0A	; 10
    6ad6:	08 f0       	brcs	.+2      	; 0x6ada <schedule_task_absolute_time+0x24>
    6ad8:	69 c0       	rjmp	.+210    	; 0x6bac <schedule_task_absolute_time+0xf6>
    6ada:	89 01       	movw	r16, r18
    6adc:	5a 01       	movw	r10, r20
    6ade:	6b 01       	movw	r12, r22
    6ae0:	7c 01       	movw	r14, r24
    6ae2:	80 e0       	ldi	r24, 0x00	; 0
    6ae4:	90 e0       	ldi	r25, 0x00	; 0

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
		//This code assumes that all tasks will have non-null function pointers.
		if((task_storage_arr[tmp].func.noarg_func) == NULL){
    6ae6:	9c 01       	movw	r18, r24
    6ae8:	22 0f       	add	r18, r18
    6aea:	33 1f       	adc	r19, r19
    6aec:	f9 01       	movw	r30, r18
    6aee:	ee 0f       	add	r30, r30
    6af0:	ff 1f       	adc	r31, r31
    6af2:	ee 0f       	add	r30, r30
    6af4:	ff 1f       	adc	r31, r31
    6af6:	ee 0f       	add	r30, r30
    6af8:	ff 1f       	adc	r31, r31
    6afa:	e2 1b       	sub	r30, r18
    6afc:	f3 0b       	sbc	r31, r19
    6afe:	e2 52       	subi	r30, 0x22	; 34
    6b00:	fc 4d       	sbci	r31, 0xDC	; 220
    6b02:	20 85       	ldd	r18, Z+8	; 0x08
    6b04:	31 85       	ldd	r19, Z+9	; 0x09
    6b06:	23 2b       	or	r18, r19
    6b08:	59 f1       	breq	.+86     	; 0x6b60 <schedule_task_absolute_time+0xaa>
    6b0a:	01 96       	adiw	r24, 0x01	; 1
static int8_t run_tasks(void);

static volatile Task_t* scheduler_malloc(void){
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
    6b0c:	8a 30       	cpi	r24, 0x0A	; 10
    6b0e:	91 05       	cpc	r25, r1
    6b10:	51 f7       	brne	.-44     	; 0x6ae6 <schedule_task_absolute_time+0x30>
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
    6b12:	81 e1       	ldi	r24, 0x11	; 17
    6b14:	9b e0       	ldi	r25, 0x0B	; 11
    6b16:	9f 93       	push	r25
    6b18:	8f 93       	push	r24
    6b1a:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
			taskListCleanup();
    6b1e:	0e 94 66 33 	call	0x66cc	; 0x66cc <taskListCleanup>
    6b22:	0f 90       	pop	r0
    6b24:	0f 90       	pop	r0
    6b26:	cf ef       	ldi	r28, 0xFF	; 255
    6b28:	df ef       	ldi	r29, 0xFF	; 255
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
			}else if(time < getTime()){
			printf_P(PSTR("ERROR: Task scheduled for a time in the past.\r\n"));
		}
		new_task->scheduled_time = time;
    6b2a:	c8 82       	st	Y, r12
    6b2c:	d9 82       	std	Y+1, r13	; 0x01
    6b2e:	ea 82       	std	Y+2, r14	; 0x02
    6b30:	fb 82       	std	Y+3, r15	; 0x03
		new_task->arg = arg;
    6b32:	0a 87       	std	Y+10, r16	; 0x0a
    6b34:	1b 87       	std	Y+11, r17	; 0x0b
		new_task->func = function;
    6b36:	a8 86       	std	Y+8, r10	; 0x08
    6b38:	b9 86       	std	Y+9, r11	; 0x09
		new_task->next = NULL;
    6b3a:	1c 86       	std	Y+12, r1	; 0x0c
    6b3c:	1d 86       	std	Y+13, r1	; 0x0d
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6b3e:	9f be       	out	0x3f, r9	; 63
	}
	add_task_to_list(new_task);
    6b40:	ce 01       	movw	r24, r28
    6b42:	0e 94 8a 34 	call	0x6914	; 0x6914 <add_task_to_list>
	//printf("Task (%X->%X) scheduled for %lu\t[%hhu]\r\n", new_task, (new_task->func).noarg_function, new_task->scheduled_time, num_tasks);

	return new_task;
    6b46:	ce 01       	movw	r24, r28
}
    6b48:	df 91       	pop	r29
    6b4a:	cf 91       	pop	r28
    6b4c:	1f 91       	pop	r17
    6b4e:	0f 91       	pop	r16
    6b50:	ff 90       	pop	r15
    6b52:	ef 90       	pop	r14
    6b54:	df 90       	pop	r13
    6b56:	cf 90       	pop	r12
    6b58:	bf 90       	pop	r11
    6b5a:	af 90       	pop	r10
    6b5c:	9f 90       	pop	r9
    6b5e:	08 95       	ret
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;

	for(uint8_t tmp=0 ; tmp<MAX_NUM_SCHEDULED_TASKS ; tmp++){
		//This code assumes that all tasks will have non-null function pointers.
		if((task_storage_arr[tmp].func.noarg_func) == NULL){
			return &(task_storage_arr[tmp]);
    6b60:	ef 01       	movw	r28, r30
volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
    6b62:	ef 3f       	cpi	r30, 0xFF	; 255
    6b64:	8f ef       	ldi	r24, 0xFF	; 255
    6b66:	f8 07       	cpc	r31, r24
    6b68:	a1 f2       	breq	.-88     	; 0x6b12 <schedule_task_absolute_time+0x5c>
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
			taskListCleanup();
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
    6b6a:	83 e2       	ldi	r24, 0x23	; 35
    6b6c:	ee 3d       	cpi	r30, 0xDE	; 222
    6b6e:	f8 07       	cpc	r31, r24
    6b70:	a0 f0       	brcs	.+40     	; 0x6b9a <schedule_task_absolute_time+0xe4>
    6b72:	ec 55       	subi	r30, 0x5C	; 92
    6b74:	f4 42       	sbci	r31, 0x24	; 36
    6b76:	09 f0       	breq	.+2      	; 0x6b7a <schedule_task_absolute_time+0xc4>
    6b78:	80 f4       	brcc	.+32     	; 0x6b9a <schedule_task_absolute_time+0xe4>
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
			}else if(time < getTime()){
    6b7a:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    6b7e:	c6 16       	cp	r12, r22
    6b80:	d7 06       	cpc	r13, r23
    6b82:	e8 06       	cpc	r14, r24
    6b84:	f9 06       	cpc	r15, r25
    6b86:	88 f6       	brcc	.-94     	; 0x6b2a <schedule_task_absolute_time+0x74>
			printf_P(PSTR("ERROR: Task scheduled for a time in the past.\r\n"));
    6b88:	88 e8       	ldi	r24, 0x88	; 136
    6b8a:	9a e0       	ldi	r25, 0x0A	; 10
    6b8c:	9f 93       	push	r25
    6b8e:	8f 93       	push	r24
    6b90:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    6b94:	0f 90       	pop	r0
    6b96:	0f 90       	pop	r0
    6b98:	c8 cf       	rjmp	.-112    	; 0x6b2a <schedule_task_absolute_time+0x74>
		if (new_task == NULL) return NULL;
		else if(new_task == ((volatile Task_t*)0xFFFF)){
			printf_P(PSTR("ERROR: No empty spot found in scheduler_malloc, but num_tasks wasn't greater than or equal max_tasks.\r\n"));
			taskListCleanup();
			}else if((new_task<task_storage_arr)||(new_task>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1])))){
			printf_P(PSTR("ERROR: scheduler_malloc returned a new_task pointer outside of the task storage array.\r\n"));
    6b9a:	88 eb       	ldi	r24, 0xB8	; 184
    6b9c:	9a e0       	ldi	r25, 0x0A	; 10
    6b9e:	9f 93       	push	r25
    6ba0:	8f 93       	push	r24
    6ba2:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    6ba6:	0f 90       	pop	r0
    6ba8:	0f 90       	pop	r0
    6baa:	bf cf       	rjmp	.-130    	; 0x6b2a <schedule_task_absolute_time+0x74>
    6bac:	9f be       	out	0x3f, r9	; 63

volatile Task_t* schedule_task_absolute_time(uint32_t time, FlexFunction function, void* arg){
	volatile Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		new_task = scheduler_malloc();
		if (new_task == NULL) return NULL;
    6bae:	80 e0       	ldi	r24, 0x00	; 0
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	ca cf       	rjmp	.-108    	; 0x6b48 <schedule_task_absolute_time+0x92>

00006bb4 <scheduleTask>:

// Adds a new task to the task queue
// time is number of milliseconds until function is executed
// function is a function pointer to execute
// arg is the argument to supply to function
volatile Task_t* scheduleTask(uint32_t time, FlexFunction function, void* arg){
    6bb4:	8f 92       	push	r8
    6bb6:	9f 92       	push	r9
    6bb8:	af 92       	push	r10
    6bba:	bf 92       	push	r11
    6bbc:	cf 92       	push	r12
    6bbe:	df 92       	push	r13
    6bc0:	ef 92       	push	r14
    6bc2:	ff 92       	push	r15
    6bc4:	0f 93       	push	r16
    6bc6:	1f 93       	push	r17
    6bc8:	cf 93       	push	r28
    6bca:	df 93       	push	r29
    6bcc:	6b 01       	movw	r12, r22
    6bce:	7c 01       	movw	r14, r24
    6bd0:	ea 01       	movw	r28, r20
    6bd2:	89 01       	movw	r16, r18
	time = (time<MIN_TASK_TIME_IN_FUTURE) ? MIN_TASK_TIME_IN_FUTURE : time;
	volatile Task_t* new_task = schedule_task_absolute_time(getTime()+time, function, arg);
    6bd4:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    6bd8:	46 01       	movw	r8, r12
    6bda:	57 01       	movw	r10, r14
    6bdc:	2a e0       	ldi	r18, 0x0A	; 10
    6bde:	82 16       	cp	r8, r18
    6be0:	91 04       	cpc	r9, r1
    6be2:	a1 04       	cpc	r10, r1
    6be4:	b1 04       	cpc	r11, r1
    6be6:	28 f4       	brcc	.+10     	; 0x6bf2 <scheduleTask+0x3e>
    6be8:	2a e0       	ldi	r18, 0x0A	; 10
    6bea:	82 2e       	mov	r8, r18
    6bec:	91 2c       	mov	r9, r1
    6bee:	a1 2c       	mov	r10, r1
    6bf0:	b1 2c       	mov	r11, r1
    6bf2:	68 0d       	add	r22, r8
    6bf4:	79 1d       	adc	r23, r9
    6bf6:	8a 1d       	adc	r24, r10
    6bf8:	9b 1d       	adc	r25, r11
    6bfa:	98 01       	movw	r18, r16
    6bfc:	ae 01       	movw	r20, r28
    6bfe:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <schedule_task_absolute_time>
	new_task->period = 0;
    6c02:	fc 01       	movw	r30, r24
    6c04:	14 82       	std	Z+4, r1	; 0x04
    6c06:	15 82       	std	Z+5, r1	; 0x05
    6c08:	16 82       	std	Z+6, r1	; 0x06
    6c0a:	17 82       	std	Z+7, r1	; 0x07
	return new_task;
}
    6c0c:	df 91       	pop	r29
    6c0e:	cf 91       	pop	r28
    6c10:	1f 91       	pop	r17
    6c12:	0f 91       	pop	r16
    6c14:	ff 90       	pop	r15
    6c16:	ef 90       	pop	r14
    6c18:	df 90       	pop	r13
    6c1a:	cf 90       	pop	r12
    6c1c:	bf 90       	pop	r11
    6c1e:	af 90       	pop	r10
    6c20:	9f 90       	pop	r9
    6c22:	8f 90       	pop	r8
    6c24:	08 95       	ret

00006c26 <schedulePeriodicTask>:

volatile Task_t* schedulePeriodicTask(uint32_t period, FlexFunction function, void* arg){
    6c26:	cf 92       	push	r12
    6c28:	df 92       	push	r13
    6c2a:	ef 92       	push	r14
    6c2c:	ff 92       	push	r15
    6c2e:	0f 93       	push	r16
    6c30:	1f 93       	push	r17
    6c32:	cf 93       	push	r28
    6c34:	df 93       	push	r29
    6c36:	ea 01       	movw	r28, r20
    6c38:	89 01       	movw	r16, r18
	period = (period<MIN_TASK_TIME_IN_FUTURE) ? MIN_TASK_TIME_IN_FUTURE : period;
    6c3a:	6b 01       	movw	r12, r22
    6c3c:	7c 01       	movw	r14, r24
    6c3e:	8a e0       	ldi	r24, 0x0A	; 10
    6c40:	c8 16       	cp	r12, r24
    6c42:	d1 04       	cpc	r13, r1
    6c44:	e1 04       	cpc	r14, r1
    6c46:	f1 04       	cpc	r15, r1
    6c48:	28 f4       	brcc	.+10     	; 0x6c54 <schedulePeriodicTask+0x2e>
    6c4a:	8a e0       	ldi	r24, 0x0A	; 10
    6c4c:	c8 2e       	mov	r12, r24
    6c4e:	d1 2c       	mov	r13, r1
    6c50:	e1 2c       	mov	r14, r1
    6c52:	f1 2c       	mov	r15, r1
	uint32_t time = ((getTime()/period)+1)*period;
    6c54:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
	volatile Task_t* new_task = schedule_task_absolute_time(time, function, arg);
    6c58:	a7 01       	movw	r20, r14
    6c5a:	96 01       	movw	r18, r12
    6c5c:	0e 94 de 4b 	call	0x97bc	; 0x97bc <__udivmodsi4>
    6c60:	2f 5f       	subi	r18, 0xFF	; 255
    6c62:	3f 4f       	sbci	r19, 0xFF	; 255
    6c64:	4f 4f       	sbci	r20, 0xFF	; 255
    6c66:	5f 4f       	sbci	r21, 0xFF	; 255
    6c68:	c7 01       	movw	r24, r14
    6c6a:	b6 01       	movw	r22, r12
    6c6c:	0e 94 a6 4b 	call	0x974c	; 0x974c <__mulsi3>
    6c70:	98 01       	movw	r18, r16
    6c72:	ae 01       	movw	r20, r28
    6c74:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <schedule_task_absolute_time>
	new_task->period = period;
    6c78:	fc 01       	movw	r30, r24
    6c7a:	c4 82       	std	Z+4, r12	; 0x04
    6c7c:	d5 82       	std	Z+5, r13	; 0x05
    6c7e:	e6 82       	std	Z+6, r14	; 0x06
    6c80:	f7 82       	std	Z+7, r15	; 0x07
	return new_task;
}
    6c82:	df 91       	pop	r29
    6c84:	cf 91       	pop	r28
    6c86:	1f 91       	pop	r17
    6c88:	0f 91       	pop	r16
    6c8a:	ff 90       	pop	r15
    6c8c:	ef 90       	pop	r14
    6c8e:	df 90       	pop	r13
    6c90:	cf 90       	pop	r12
    6c92:	08 95       	ret

00006c94 <__vector_11>:
		}
	}
	return 0;
}

ISR(RTC_COMP_vect){
    6c94:	1f 92       	push	r1
    6c96:	0f 92       	push	r0
    6c98:	0f b6       	in	r0, 0x3f	; 63
    6c9a:	0f 92       	push	r0
    6c9c:	11 24       	eor	r1, r1
    6c9e:	0b b6       	in	r0, 0x3b	; 59
    6ca0:	0f 92       	push	r0
    6ca2:	4f 92       	push	r4
    6ca4:	5f 92       	push	r5
    6ca6:	6f 92       	push	r6
    6ca8:	7f 92       	push	r7
    6caa:	8f 92       	push	r8
    6cac:	9f 92       	push	r9
    6cae:	af 92       	push	r10
    6cb0:	bf 92       	push	r11
    6cb2:	cf 92       	push	r12
    6cb4:	df 92       	push	r13
    6cb6:	ef 92       	push	r14
    6cb8:	ff 92       	push	r15
    6cba:	0f 93       	push	r16
    6cbc:	1f 93       	push	r17
    6cbe:	2f 93       	push	r18
    6cc0:	3f 93       	push	r19
    6cc2:	4f 93       	push	r20
    6cc4:	5f 93       	push	r21
    6cc6:	6f 93       	push	r22
    6cc8:	7f 93       	push	r23
    6cca:	8f 93       	push	r24
    6ccc:	9f 93       	push	r25
    6cce:	af 93       	push	r26
    6cd0:	bf 93       	push	r27
    6cd2:	cf 93       	push	r28
    6cd4:	df 93       	push	r29
    6cd6:	ef 93       	push	r30
    6cd8:	ff 93       	push	r31
	SAVE_CONTEXT();	
    6cda:	0f 92       	push	r0
    6cdc:	0f b6       	in	r0, 0x3f	; 63
    6cde:	f8 94       	cli
    6ce0:	0f 92       	push	r0
    6ce2:	1f 92       	push	r1
    6ce4:	11 24       	eor	r1, r1
    6ce6:	2f 92       	push	r2
    6ce8:	3f 92       	push	r3
    6cea:	4f 92       	push	r4
    6cec:	5f 92       	push	r5
    6cee:	6f 92       	push	r6
    6cf0:	7f 92       	push	r7
    6cf2:	8f 92       	push	r8
    6cf4:	9f 92       	push	r9
    6cf6:	af 92       	push	r10
    6cf8:	bf 92       	push	r11
    6cfa:	cf 92       	push	r12
    6cfc:	df 92       	push	r13
    6cfe:	ef 92       	push	r14
    6d00:	ff 92       	push	r15
    6d02:	0f 93       	push	r16
    6d04:	1f 93       	push	r17
    6d06:	2f 93       	push	r18
    6d08:	3f 93       	push	r19
    6d0a:	4f 93       	push	r20
    6d0c:	5f 93       	push	r21
    6d0e:	6f 93       	push	r22
    6d10:	7f 93       	push	r23
    6d12:	8f 93       	push	r24
    6d14:	9f 93       	push	r25
    6d16:	af 93       	push	r26
    6d18:	bf 93       	push	r27
    6d1a:	cf 93       	push	r28
    6d1c:	df 93       	push	r29
    6d1e:	ef 93       	push	r30
    6d20:	ff 93       	push	r31
	task_executing=1;
    6d22:	81 e0       	ldi	r24, 0x01	; 1
    6d24:	80 93 7a 26 	sts	0x267A, r24	; 0x80267a <task_executing>

// TO BE CALLED FROM INTERRUPT HANDLER ONLY
// DO NOT CALL
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
    6d28:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6d2a:	f8 94       	cli
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    6d2c:	30 e8       	ldi	r19, 0x80	; 128
    6d2e:	c3 2e       	mov	r12, r19
    6d30:	39 e0       	ldi	r19, 0x09	; 9
    6d32:	d3 2e       	mov	r13, r19
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    6d34:	4f e3       	ldi	r20, 0x3F	; 63
    6d36:	e4 2e       	mov	r14, r20
    6d38:	42 e2       	ldi	r20, 0x22	; 34
    6d3a:	f4 2e       	mov	r15, r20
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
					num_slots_used++;
					volatile Task_t* next_ptr = task_storage_arr[i].next;
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    6d3c:	58 e0       	ldi	r21, 0x08	; 8
    6d3e:	a5 2e       	mov	r10, r21
    6d40:	59 e0       	ldi	r21, 0x09	; 9
    6d42:	b5 2e       	mov	r11, r21
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
    6d44:	e0 91 7f 26 	lds	r30, 0x267F	; 0x80267f <task_list>
    6d48:	f0 91 80 26 	lds	r31, 0x2680	; 0x802680 <task_list+0x1>
    6d4c:	30 97       	sbiw	r30, 0x00	; 0
    6d4e:	09 f4       	brne	.+2      	; 0x6d52 <__vector_11+0xbe>
    6d50:	2c c1       	rjmp	.+600    	; 0x6faa <__vector_11+0x316>
    6d52:	40 80       	ld	r4, Z
    6d54:	51 80       	ldd	r5, Z+1	; 0x01
    6d56:	62 80       	ldd	r6, Z+2	; 0x02
    6d58:	73 80       	ldd	r7, Z+3	; 0x03
    6d5a:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    6d5e:	dc 01       	movw	r26, r24
    6d60:	cb 01       	movw	r24, r22
    6d62:	02 96       	adiw	r24, 0x02	; 2
    6d64:	a1 1d       	adc	r26, r1
    6d66:	b1 1d       	adc	r27, r1
    6d68:	84 15       	cp	r24, r4
    6d6a:	95 05       	cpc	r25, r5
    6d6c:	a6 05       	cpc	r26, r6
    6d6e:	b7 05       	cpc	r27, r7
    6d70:	08 f4       	brcc	.+2      	; 0x6d74 <__vector_11+0xe0>
    6d72:	f8 c0       	rjmp	.+496    	; 0x6f64 <__vector_11+0x2d0>
    6d74:	0e ed       	ldi	r16, 0xDE	; 222
    6d76:	13 e2       	ldi	r17, 0x23	; 35
    6d78:	c0 e0       	ldi	r28, 0x00	; 0
    6d7a:	d0 e0       	ldi	r29, 0x00	; 0
    6d7c:	81 2c       	mov	r8, r1
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
    6d7e:	ce 01       	movw	r24, r28
    6d80:	88 0f       	add	r24, r24
    6d82:	99 1f       	adc	r25, r25
    6d84:	fc 01       	movw	r30, r24
    6d86:	ee 0f       	add	r30, r30
    6d88:	ff 1f       	adc	r31, r31
    6d8a:	ee 0f       	add	r30, r30
    6d8c:	ff 1f       	adc	r31, r31
    6d8e:	ee 0f       	add	r30, r30
    6d90:	ff 1f       	adc	r31, r31
    6d92:	e8 1b       	sub	r30, r24
    6d94:	f9 0b       	sbc	r31, r25
    6d96:	e2 52       	subi	r30, 0x22	; 34
    6d98:	fc 4d       	sbci	r31, 0xDC	; 220
    6d9a:	80 85       	ldd	r24, Z+8	; 0x08
    6d9c:	91 85       	ldd	r25, Z+9	; 0x09
    6d9e:	89 2b       	or	r24, r25
    6da0:	09 f1       	breq	.+66     	; 0x6de4 <__vector_11+0x150>
					num_slots_used++;
    6da2:	83 94       	inc	r8
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    6da4:	84 85       	ldd	r24, Z+12	; 0x0c
    6da6:	95 85       	ldd	r25, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
    6da8:	00 97       	sbiw	r24, 0x00	; 0
    6daa:	e1 f0       	breq	.+56     	; 0x6de4 <__vector_11+0x150>
    6dac:	23 e2       	ldi	r18, 0x23	; 35
    6dae:	8e 3d       	cpi	r24, 0xDE	; 222
    6db0:	92 07       	cpc	r25, r18
    6db2:	20 f0       	brcs	.+8      	; 0x6dbc <__vector_11+0x128>
    6db4:	8c 55       	subi	r24, 0x5C	; 92
    6db6:	94 42       	sbci	r25, 0x24	; 36
    6db8:	a9 f0       	breq	.+42     	; 0x6de4 <__vector_11+0x150>
    6dba:	a0 f0       	brcs	.+40     	; 0x6de4 <__vector_11+0x150>
						printf_P(PSTR("Pre-call, task has next_ptr pointing outside of array.\r\n"));
    6dbc:	df 92       	push	r13
    6dbe:	cf 92       	push	r12
    6dc0:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
						printf("\t%X\r\n",((uint16_t)(&(task_storage_arr[i]))));
    6dc4:	1f 93       	push	r17
    6dc6:	0f 93       	push	r16
    6dc8:	ff 92       	push	r15
    6dca:	ef 92       	push	r14
    6dcc:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
						delayMS(10);
    6dd0:	8a e0       	ldi	r24, 0x0A	; 10
    6dd2:	90 e0       	ldi	r25, 0x00	; 0
    6dd4:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    6dd8:	0f 90       	pop	r0
    6dda:	0f 90       	pop	r0
    6ddc:	0f 90       	pop	r0
    6dde:	0f 90       	pop	r0
    6de0:	0f 90       	pop	r0
    6de2:	0f 90       	pop	r0
    6de4:	21 96       	adiw	r28, 0x01	; 1
    6de6:	02 5f       	subi	r16, 0xF2	; 242
    6de8:	1f 4f       	sbci	r17, 0xFF	; 255
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
			uint8_t num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
    6dea:	ca 30       	cpi	r28, 0x0A	; 10
    6dec:	d1 05       	cpc	r29, r1
    6dee:	39 f6       	brne	.-114    	; 0x6d7e <__vector_11+0xea>
						delayMS(10);
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
    6df0:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <num_tasks>
    6df4:	88 11       	cpse	r24, r8
    6df6:	39 c1       	rjmp	.+626    	; 0x706a <__vector_11+0x3d6>
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
				return -1;
			}
			cur_task = task_list;
    6df8:	c0 91 7f 26 	lds	r28, 0x267F	; 0x80267f <task_list>
    6dfc:	d0 91 80 26 	lds	r29, 0x2680	; 0x802680 <task_list+0x1>
			task_list = cur_task->next;
    6e00:	8c 85       	ldd	r24, Y+12	; 0x0c
    6e02:	9d 85       	ldd	r25, Y+13	; 0x0d
    6e04:	80 93 7f 26 	sts	0x267F, r24	; 0x80267f <task_list>
    6e08:	90 93 80 26 	sts	0x2680, r25	; 0x802680 <task_list+0x1>

			if(cur_task->arg==NULL){
    6e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e0e:	9b 85       	ldd	r25, Y+11	; 0x0b
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
    6e10:	1f b7       	in	r17, 0x3f	; 63
				return -1;
			}
			cur_task = task_list;
			task_list = cur_task->next;

			if(cur_task->arg==NULL){
    6e12:	89 2b       	or	r24, r25
    6e14:	09 f4       	brne	.+2      	; 0x6e18 <__vector_11+0x184>
    6e16:	8f c0       	rjmp	.+286    	; 0x6f36 <__vector_11+0x2a2>

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    6e18:	78 94       	sei
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).noarg_func(); // run the task
				}
			}else{
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).arg_function(cur_task->arg); // run the task
    6e1a:	e8 85       	ldd	r30, Y+8	; 0x08
    6e1c:	f9 85       	ldd	r31, Y+9	; 0x09
    6e1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e20:	9b 85       	ldd	r25, Y+11	; 0x0b
    6e22:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6e24:	1f bf       	out	0x3f, r17	; 63
				}
			}
			
			if(cur_task->period>0){
    6e26:	8c 81       	ldd	r24, Y+4	; 0x04
    6e28:	9d 81       	ldd	r25, Y+5	; 0x05
    6e2a:	ae 81       	ldd	r26, Y+6	; 0x06
    6e2c:	bf 81       	ldd	r27, Y+7	; 0x07
    6e2e:	89 2b       	or	r24, r25
    6e30:	8a 2b       	or	r24, r26
    6e32:	8b 2b       	or	r24, r27
    6e34:	09 f4       	brne	.+2      	; 0x6e38 <__vector_11+0x1a4>
    6e36:	8d c0       	rjmp	.+282    	; 0x6f52 <__vector_11+0x2be>
				uint32_t nextTime = (((cur_task->scheduled_time)/(cur_task->period))+1)*(cur_task->period);
    6e38:	68 81       	ld	r22, Y
    6e3a:	79 81       	ldd	r23, Y+1	; 0x01
    6e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    6e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    6e40:	2c 81       	ldd	r18, Y+4	; 0x04
    6e42:	3d 81       	ldd	r19, Y+5	; 0x05
    6e44:	4e 81       	ldd	r20, Y+6	; 0x06
    6e46:	5f 81       	ldd	r21, Y+7	; 0x07
    6e48:	4c 80       	ldd	r4, Y+4	; 0x04
    6e4a:	5d 80       	ldd	r5, Y+5	; 0x05
    6e4c:	6e 80       	ldd	r6, Y+6	; 0x06
    6e4e:	7f 80       	ldd	r7, Y+7	; 0x07
    6e50:	0e 94 de 4b 	call	0x97bc	; 0x97bc <__udivmodsi4>
    6e54:	2f 5f       	subi	r18, 0xFF	; 255
    6e56:	3f 4f       	sbci	r19, 0xFF	; 255
    6e58:	4f 4f       	sbci	r20, 0xFF	; 255
    6e5a:	5f 4f       	sbci	r21, 0xFF	; 255
    6e5c:	c3 01       	movw	r24, r6
    6e5e:	b2 01       	movw	r22, r4
    6e60:	0e 94 a6 4b 	call	0x974c	; 0x974c <__mulsi3>
				cur_task->scheduled_time = nextTime;
    6e64:	68 83       	st	Y, r22
    6e66:	79 83       	std	Y+1, r23	; 0x01
    6e68:	8a 83       	std	Y+2, r24	; 0x02
    6e6a:	9b 83       	std	Y+3, r25	; 0x03
				cur_task->next=NULL;
    6e6c:	1c 86       	std	Y+12, r1	; 0x0c
    6e6e:	1d 86       	std	Y+13, r1	; 0x0d
				num_tasks--;
    6e70:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <num_tasks>
    6e74:	81 50       	subi	r24, 0x01	; 1
    6e76:	80 93 7c 24 	sts	0x247C, r24	; 0x80247c <num_tasks>
				add_task_to_list(cur_task);
    6e7a:	ce 01       	movw	r24, r28
    6e7c:	0e 94 8a 34 	call	0x6914	; 0x6914 <add_task_to_list>
int8_t run_tasks(){
	volatile Task_t* cur_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= getTime() + 2){
    6e80:	c0 e0       	ldi	r28, 0x00	; 0
    6e82:	d0 e0       	ldi	r29, 0x00	; 0
    6e84:	10 e0       	ldi	r17, 0x00	; 0
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
				if(((uint16_t)(task_storage_arr[i].func.noarg_func))!=0){
    6e86:	ce 01       	movw	r24, r28
    6e88:	88 0f       	add	r24, r24
    6e8a:	99 1f       	adc	r25, r25
    6e8c:	fc 01       	movw	r30, r24
    6e8e:	ee 0f       	add	r30, r30
    6e90:	ff 1f       	adc	r31, r31
    6e92:	ee 0f       	add	r30, r30
    6e94:	ff 1f       	adc	r31, r31
    6e96:	ee 0f       	add	r30, r30
    6e98:	ff 1f       	adc	r31, r31
    6e9a:	e8 1b       	sub	r30, r24
    6e9c:	f9 0b       	sbc	r31, r25
    6e9e:	e2 52       	subi	r30, 0x22	; 34
    6ea0:	fc 4d       	sbci	r31, 0xDC	; 220
    6ea2:	20 85       	ldd	r18, Z+8	; 0x08
    6ea4:	31 85       	ldd	r19, Z+9	; 0x09
    6ea6:	23 2b       	or	r18, r19
    6ea8:	99 f1       	breq	.+102    	; 0x6f10 <__vector_11+0x27c>
					num_slots_used++;
    6eaa:	1f 5f       	subi	r17, 0xFF	; 255
					volatile Task_t* next_ptr = task_storage_arr[i].next;
    6eac:	24 85       	ldd	r18, Z+12	; 0x0c
    6eae:	35 85       	ldd	r19, Z+13	; 0x0d
					if((next_ptr!=0)&&((next_ptr<task_storage_arr)||(next_ptr>(&(task_storage_arr[MAX_NUM_SCHEDULED_TASKS-1]))))){
    6eb0:	21 15       	cp	r18, r1
    6eb2:	31 05       	cpc	r19, r1
    6eb4:	69 f1       	breq	.+90     	; 0x6f10 <__vector_11+0x27c>
    6eb6:	43 e2       	ldi	r20, 0x23	; 35
    6eb8:	2e 3d       	cpi	r18, 0xDE	; 222
    6eba:	34 07       	cpc	r19, r20
    6ebc:	20 f0       	brcs	.+8      	; 0x6ec6 <__vector_11+0x232>
    6ebe:	2c 55       	subi	r18, 0x5C	; 92
    6ec0:	34 42       	sbci	r19, 0x24	; 36
    6ec2:	31 f1       	breq	.+76     	; 0x6f10 <__vector_11+0x27c>
    6ec4:	28 f1       	brcs	.+74     	; 0x6f10 <__vector_11+0x27c>
						printf_P(PSTR("Post-call, task %X has next_ptr pointing outside of array.\r\n"),task_storage_arr[i]);
    6ec6:	fc 01       	movw	r30, r24
    6ec8:	ee 0f       	add	r30, r30
    6eca:	ff 1f       	adc	r31, r31
    6ecc:	ee 0f       	add	r30, r30
    6ece:	ff 1f       	adc	r31, r31
    6ed0:	ee 0f       	add	r30, r30
    6ed2:	ff 1f       	adc	r31, r31
    6ed4:	e8 1b       	sub	r30, r24
    6ed6:	f9 0b       	sbc	r31, r25
    6ed8:	e2 52       	subi	r30, 0x22	; 34
    6eda:	fc 4d       	sbci	r31, 0xDC	; 220
    6edc:	8d b7       	in	r24, 0x3d	; 61
    6ede:	9e b7       	in	r25, 0x3e	; 62
    6ee0:	0e 97       	sbiw	r24, 0x0e	; 14
    6ee2:	8d bf       	out	0x3d, r24	; 61
    6ee4:	9e bf       	out	0x3e, r25	; 62
    6ee6:	ad b7       	in	r26, 0x3d	; 61
    6ee8:	be b7       	in	r27, 0x3e	; 62
    6eea:	11 96       	adiw	r26, 0x01	; 1
    6eec:	8e e0       	ldi	r24, 0x0E	; 14
    6eee:	01 90       	ld	r0, Z+
    6ef0:	0d 92       	st	X+, r0
    6ef2:	8a 95       	dec	r24
    6ef4:	e1 f7       	brne	.-8      	; 0x6eee <__vector_11+0x25a>
    6ef6:	bf 92       	push	r11
    6ef8:	af 92       	push	r10
    6efa:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
						delayMS(10);
    6efe:	8a e0       	ldi	r24, 0x0A	; 10
    6f00:	90 e0       	ldi	r25, 0x00	; 0
    6f02:	0e 94 4f 08 	call	0x109e	; 0x109e <delayMS>
    6f06:	8d b7       	in	r24, 0x3d	; 61
    6f08:	9e b7       	in	r25, 0x3e	; 62
    6f0a:	40 96       	adiw	r24, 0x10	; 16
    6f0c:	8d bf       	out	0x3d, r24	; 61
    6f0e:	9e bf       	out	0x3e, r25	; 62
    6f10:	21 96       	adiw	r28, 0x01	; 1
				cur_task = NULL;
				num_tasks--;
			}
			
			num_slots_used = 0;
			for(uint8_t i=0;i<MAX_NUM_SCHEDULED_TASKS;i++){
    6f12:	ca 30       	cpi	r28, 0x0A	; 10
    6f14:	d1 05       	cpc	r29, r1
    6f16:	09 f0       	breq	.+2      	; 0x6f1a <__vector_11+0x286>
    6f18:	b6 cf       	rjmp	.-148    	; 0x6e86 <__vector_11+0x1f2>
						delayMS(10);
					}
				}
			}
			//printf_P(PSTR("\tReturned %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
    6f1a:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <num_tasks>
    6f1e:	81 17       	cp	r24, r17
    6f20:	09 f4       	brne	.+2      	; 0x6f24 <__vector_11+0x290>
    6f22:	10 cf       	rjmp	.-480    	; 0x6d44 <__vector_11+0xb0>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
    6f24:	8a ec       	ldi	r24, 0xCA	; 202
    6f26:	98 e0       	ldi	r25, 0x08	; 8
    6f28:	9f 93       	push	r25
    6f2a:	8f 93       	push	r24
    6f2c:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    6f30:	0f 90       	pop	r0
    6f32:	0f 90       	pop	r0
    6f34:	3f c0       	rjmp	.+126    	; 0x6fb4 <__vector_11+0x320>

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    6f36:	78 94       	sei
			cur_task = task_list;
			task_list = cur_task->next;

			if(cur_task->arg==NULL){
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).noarg_func(); // run the task
    6f38:	e8 85       	ldd	r30, Y+8	; 0x08
    6f3a:	f9 85       	ldd	r31, Y+9	; 0x09
    6f3c:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6f3e:	1f bf       	out	0x3f, r17	; 63
				NONATOMIC_BLOCK(NONATOMIC_RESTORESTATE){ // Enable interrupts during tasks
					(cur_task->func).arg_function(cur_task->arg); // run the task
				}
			}
			
			if(cur_task->period>0){
    6f40:	8c 81       	ldd	r24, Y+4	; 0x04
    6f42:	9d 81       	ldd	r25, Y+5	; 0x05
    6f44:	ae 81       	ldd	r26, Y+6	; 0x06
    6f46:	bf 81       	ldd	r27, Y+7	; 0x07
    6f48:	89 2b       	or	r24, r25
    6f4a:	8a 2b       	or	r24, r26
    6f4c:	8b 2b       	or	r24, r27
    6f4e:	09 f0       	breq	.+2      	; 0x6f52 <__vector_11+0x2be>
    6f50:	73 cf       	rjmp	.-282    	; 0x6e38 <__vector_11+0x1a4>
				cur_task->scheduled_time = nextTime;
				cur_task->next=NULL;
				num_tasks--;
				add_task_to_list(cur_task);
			}else{
				scheduler_free(cur_task);
    6f52:	ce 01       	movw	r24, r28
    6f54:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <scheduler_free>
				cur_task = NULL;
				num_tasks--;
    6f58:	80 91 7c 24 	lds	r24, 0x247C	; 0x80247c <num_tasks>
    6f5c:	81 50       	subi	r24, 0x01	; 1
    6f5e:	80 93 7c 24 	sts	0x247C, r24	; 0x80247c <num_tasks>
    6f62:	8e cf       	rjmp	.-228    	; 0x6e80 <__vector_11+0x1ec>
				printf_P(PSTR("ERROR: Post-return, task storage consistency check failure.\r\n"));
				return -1;
			}
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    6f64:	e0 91 7f 26 	lds	r30, 0x267F	; 0x80267f <task_list>
    6f68:	f0 91 80 26 	lds	r31, 0x2680	; 0x802680 <task_list+0x1>
    6f6c:	30 97       	sbiw	r30, 0x00	; 0
    6f6e:	e9 f0       	breq	.+58     	; 0x6faa <__vector_11+0x316>
    6f70:	00 81       	ld	r16, Z
    6f72:	11 81       	ldd	r17, Z+1	; 0x01
    6f74:	22 81       	ldd	r18, Z+2	; 0x02
    6f76:	33 81       	ldd	r19, Z+3	; 0x03
    6f78:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <rtc_epoch>
    6f7c:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <rtc_epoch+0x1>
    6f80:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    6f84:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    6f88:	a0 e0       	ldi	r26, 0x00	; 0
    6f8a:	b0 e0       	ldi	r27, 0x00	; 0
    6f8c:	dc 01       	movw	r26, r24
    6f8e:	99 27       	eor	r25, r25
    6f90:	88 27       	eor	r24, r24
    6f92:	60 e0       	ldi	r22, 0x00	; 0
    6f94:	70 e0       	ldi	r23, 0x00	; 0
    6f96:	84 2b       	or	r24, r20
    6f98:	95 2b       	or	r25, r21
    6f9a:	a6 2b       	or	r26, r22
    6f9c:	b7 2b       	or	r27, r23
    6f9e:	80 17       	cp	r24, r16
    6fa0:	91 07       	cpc	r25, r17
    6fa2:	a2 07       	cpc	r26, r18
    6fa4:	b3 07       	cpc	r27, r19
    6fa6:	08 f0       	brcs	.+2      	; 0x6faa <__vector_11+0x316>
    6fa8:	4d c0       	rjmp	.+154    	; 0x7044 <__vector_11+0x3b0>
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
		}else{
			RTC.INTCTRL &= ~RTC_COMP_INT_LEVEL;
    6faa:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6fae:	8b 7f       	andi	r24, 0xFB	; 251
    6fb0:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    6fb4:	9f be       	out	0x3f, r9	; 63

ISR(RTC_COMP_vect){
	SAVE_CONTEXT();	
	task_executing=1;
	/*int8_t result =*/ run_tasks();
	task_executing=0;
    6fb6:	10 92 7a 26 	sts	0x267A, r1	; 0x80267a <task_executing>
	//if(result<0)
		//task_list_cleanup();		
	RESTORE_CONTEXT();	
    6fba:	ff 91       	pop	r31
    6fbc:	ef 91       	pop	r30
    6fbe:	df 91       	pop	r29
    6fc0:	cf 91       	pop	r28
    6fc2:	bf 91       	pop	r27
    6fc4:	af 91       	pop	r26
    6fc6:	9f 91       	pop	r25
    6fc8:	8f 91       	pop	r24
    6fca:	7f 91       	pop	r23
    6fcc:	6f 91       	pop	r22
    6fce:	5f 91       	pop	r21
    6fd0:	4f 91       	pop	r20
    6fd2:	3f 91       	pop	r19
    6fd4:	2f 91       	pop	r18
    6fd6:	1f 91       	pop	r17
    6fd8:	0f 91       	pop	r16
    6fda:	ff 90       	pop	r15
    6fdc:	ef 90       	pop	r14
    6fde:	df 90       	pop	r13
    6fe0:	cf 90       	pop	r12
    6fe2:	bf 90       	pop	r11
    6fe4:	af 90       	pop	r10
    6fe6:	9f 90       	pop	r9
    6fe8:	8f 90       	pop	r8
    6fea:	7f 90       	pop	r7
    6fec:	6f 90       	pop	r6
    6fee:	5f 90       	pop	r5
    6ff0:	4f 90       	pop	r4
    6ff2:	3f 90       	pop	r3
    6ff4:	2f 90       	pop	r2
    6ff6:	1f 90       	pop	r1
    6ff8:	0f 90       	pop	r0
    6ffa:	0f be       	out	0x3f, r0	; 63
    6ffc:	0f 90       	pop	r0
}
    6ffe:	ff 91       	pop	r31
    7000:	ef 91       	pop	r30
    7002:	df 91       	pop	r29
    7004:	cf 91       	pop	r28
    7006:	bf 91       	pop	r27
    7008:	af 91       	pop	r26
    700a:	9f 91       	pop	r25
    700c:	8f 91       	pop	r24
    700e:	7f 91       	pop	r23
    7010:	6f 91       	pop	r22
    7012:	5f 91       	pop	r21
    7014:	4f 91       	pop	r20
    7016:	3f 91       	pop	r19
    7018:	2f 91       	pop	r18
    701a:	1f 91       	pop	r17
    701c:	0f 91       	pop	r16
    701e:	ff 90       	pop	r15
    7020:	ef 90       	pop	r14
    7022:	df 90       	pop	r13
    7024:	cf 90       	pop	r12
    7026:	bf 90       	pop	r11
    7028:	af 90       	pop	r10
    702a:	9f 90       	pop	r9
    702c:	8f 90       	pop	r8
    702e:	7f 90       	pop	r7
    7030:	6f 90       	pop	r6
    7032:	5f 90       	pop	r5
    7034:	4f 90       	pop	r4
    7036:	0f 90       	pop	r0
    7038:	0b be       	out	0x3b, r0	; 59
    703a:	0f 90       	pop	r0
    703c:	0f be       	out	0x3f, r0	; 63
    703e:	0f 90       	pop	r0
    7040:	1f 90       	pop	r1
    7042:	18 95       	reti
				return -1;
			}
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
    7044:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    7048:	80 fd       	sbrc	r24, 0
    704a:	fc cf       	rjmp	.-8      	; 0x7044 <__vector_11+0x3b0>
			RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    704c:	80 81       	ld	r24, Z
    704e:	91 81       	ldd	r25, Z+1	; 0x01
    7050:	a2 81       	ldd	r26, Z+2	; 0x02
    7052:	b3 81       	ldd	r27, Z+3	; 0x03
    7054:	88 60       	ori	r24, 0x08	; 8
    7056:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    705a:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
			RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    705e:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    7062:	84 60       	ori	r24, 0x04	; 4
    7064:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    7068:	a5 cf       	rjmp	.-182    	; 0x6fb4 <__vector_11+0x320>
					}
				}
			}
			//printf_P(PSTR("\tCalling %X. Tasks: %2hu. Slots Used: %2hu.\r\n"),cur_task->func.noarg_function, num_tasks, num_slots_used);
			if(num_slots_used!=num_tasks){
				printf_P(PSTR("ERROR: Pre-call, task storage consistency check failure.\r\n"));
    706a:	85 e4       	ldi	r24, 0x45	; 69
    706c:	99 e0       	ldi	r25, 0x09	; 9
    706e:	9f 93       	push	r25
    7070:	8f 93       	push	r24
    7072:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    7076:	0f 90       	pop	r0
    7078:	0f 90       	pop	r0
    707a:	9c cf       	rjmp	.-200    	; 0x6fb4 <__vector_11+0x320>

0000707c <__vector_10>:
	RESTORE_CONTEXT();	
}

// Increment rtc_epoch on RTC overflow
// Must be atomic so no reads of get_time() occur between RTC overflow and updating of epoch
ISR( RTC_OVF_vect ){
    707c:	1f 92       	push	r1
    707e:	0f 92       	push	r0
    7080:	0f b6       	in	r0, 0x3f	; 63
    7082:	0f 92       	push	r0
    7084:	11 24       	eor	r1, r1
    7086:	0b b6       	in	r0, 0x3b	; 59
    7088:	0f 92       	push	r0
    708a:	cf 92       	push	r12
    708c:	df 92       	push	r13
    708e:	ef 92       	push	r14
    7090:	ff 92       	push	r15
    7092:	0f 93       	push	r16
    7094:	1f 93       	push	r17
    7096:	2f 93       	push	r18
    7098:	3f 93       	push	r19
    709a:	4f 93       	push	r20
    709c:	5f 93       	push	r21
    709e:	6f 93       	push	r22
    70a0:	7f 93       	push	r23
    70a2:	8f 93       	push	r24
    70a4:	9f 93       	push	r25
    70a6:	af 93       	push	r26
    70a8:	bf 93       	push	r27
    70aa:	cf 93       	push	r28
    70ac:	ef 93       	push	r30
    70ae:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
    70b0:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    70b2:	f8 94       	cli
		rtc_epoch++;
    70b4:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <rtc_epoch>
    70b8:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <rtc_epoch+0x1>
    70bc:	01 96       	adiw	r24, 0x01	; 1
    70be:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <rtc_epoch>
    70c2:	90 93 6d 24 	sts	0x246D, r25	; 0x80246d <rtc_epoch+0x1>
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
    70c6:	e0 91 7f 26 	lds	r30, 0x267F	; 0x80267f <task_list>
    70ca:	f0 91 80 26 	lds	r31, 0x2680	; 0x802680 <task_list+0x1>
    70ce:	30 97       	sbiw	r30, 0x00	; 0
    70d0:	e1 f1       	breq	.+120    	; 0x714a <__vector_10+0xce>
    70d2:	00 81       	ld	r16, Z
    70d4:	11 81       	ldd	r17, Z+1	; 0x01
    70d6:	22 81       	ldd	r18, Z+2	; 0x02
    70d8:	33 81       	ldd	r19, Z+3	; 0x03
    70da:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <rtc_epoch>
    70de:	90 91 6d 24 	lds	r25, 0x246D	; 0x80246d <rtc_epoch+0x1>
    70e2:	40 91 0a 04 	lds	r20, 0x040A	; 0x80040a <__TEXT_REGION_LENGTH__+0x70040a>
    70e6:	50 91 0b 04 	lds	r21, 0x040B	; 0x80040b <__TEXT_REGION_LENGTH__+0x70040b>
    70ea:	a0 e0       	ldi	r26, 0x00	; 0
    70ec:	b0 e0       	ldi	r27, 0x00	; 0
    70ee:	dc 01       	movw	r26, r24
    70f0:	99 27       	eor	r25, r25
    70f2:	88 27       	eor	r24, r24
    70f4:	60 e0       	ldi	r22, 0x00	; 0
    70f6:	70 e0       	ldi	r23, 0x00	; 0
    70f8:	84 2b       	or	r24, r20
    70fa:	95 2b       	or	r25, r21
    70fc:	a6 2b       	or	r26, r22
    70fe:	b7 2b       	or	r27, r23
    7100:	08 17       	cp	r16, r24
    7102:	19 07       	cpc	r17, r25
    7104:	2a 07       	cpc	r18, r26
    7106:	3b 07       	cpc	r19, r27
    7108:	00 f5       	brcc	.+64     	; 0x714a <__vector_10+0xce>
			if(!task_executing){
    710a:	80 91 7a 26 	lds	r24, 0x267A	; 0x80267a <task_executing>
    710e:	88 23       	and	r24, r24
    7110:	09 f4       	brne	.+2      	; 0x7114 <__vector_10+0x98>
    7112:	3f c0       	rjmp	.+126    	; 0x7192 <__vector_10+0x116>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7114:	cf bf       	out	0x3f, r28	; 63
			}
		}else{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, getTime());
		}
	}
    7116:	ff 91       	pop	r31
    7118:	ef 91       	pop	r30
    711a:	cf 91       	pop	r28
    711c:	bf 91       	pop	r27
    711e:	af 91       	pop	r26
    7120:	9f 91       	pop	r25
    7122:	8f 91       	pop	r24
    7124:	7f 91       	pop	r23
    7126:	6f 91       	pop	r22
    7128:	5f 91       	pop	r21
    712a:	4f 91       	pop	r20
    712c:	3f 91       	pop	r19
    712e:	2f 91       	pop	r18
    7130:	1f 91       	pop	r17
    7132:	0f 91       	pop	r16
    7134:	ff 90       	pop	r15
    7136:	ef 90       	pop	r14
    7138:	df 90       	pop	r13
    713a:	cf 90       	pop	r12
    713c:	0f 90       	pop	r0
    713e:	0b be       	out	0x3b, r0	; 59
    7140:	0f 90       	pop	r0
    7142:	0f be       	out	0x3f, r0	; 63
    7144:	0f 90       	pop	r0
    7146:	1f 90       	pop	r1
    7148:	18 95       	reti
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
				}
			}
		}else{
			printf("Next task not in current epoch. Task executing: %hu. Next task scheduled time: %lu. Time: %lu.\r\n", task_executing, task_list->scheduled_time, getTime());
    714a:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    714e:	36 2f       	mov	r19, r22
    7150:	e7 2f       	mov	r30, r23
    7152:	a0 91 7f 26 	lds	r26, 0x267F	; 0x80267f <task_list>
    7156:	b0 91 80 26 	lds	r27, 0x2680	; 0x802680 <task_list+0x1>
    715a:	4d 91       	ld	r20, X+
    715c:	5d 91       	ld	r21, X+
    715e:	6d 91       	ld	r22, X+
    7160:	7c 91       	ld	r23, X
    7162:	20 91 7a 26 	lds	r18, 0x267A	; 0x80267a <task_executing>
    7166:	9f 93       	push	r25
    7168:	8f 93       	push	r24
    716a:	ef 93       	push	r30
    716c:	3f 93       	push	r19
    716e:	7f 93       	push	r23
    7170:	6f 93       	push	r22
    7172:	5f 93       	push	r21
    7174:	4f 93       	push	r20
    7176:	1f 92       	push	r1
    7178:	2f 93       	push	r18
    717a:	85 e4       	ldi	r24, 0x45	; 69
    717c:	92 e2       	ldi	r25, 0x22	; 34
    717e:	9f 93       	push	r25
    7180:	8f 93       	push	r24
    7182:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
    7186:	8d b7       	in	r24, 0x3d	; 61
    7188:	9e b7       	in	r25, 0x3e	; 62
    718a:	0c 96       	adiw	r24, 0x0c	; 12
    718c:	8d bf       	out	0x3d, r24	; 61
    718e:	9e bf       	out	0x3e, r25	; 62
    7190:	c1 cf       	rjmp	.-126    	; 0x7114 <__vector_10+0x98>
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){ // Disable interrupts
		rtc_epoch++;
		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER)){
			if(!task_executing){
				if(task_list->scheduled_time < getTime()){
    7192:	c0 80       	ld	r12, Z
    7194:	d1 80       	ldd	r13, Z+1	; 0x01
    7196:	e2 80       	ldd	r14, Z+2	; 0x02
    7198:	f3 80       	ldd	r15, Z+3	; 0x03
    719a:	0e 94 41 08 	call	0x1082	; 0x1082 <getTime>
    719e:	c6 16       	cp	r12, r22
    71a0:	d7 06       	cpc	r13, r23
    71a2:	e8 06       	cpc	r14, r24
    71a4:	f9 06       	cpc	r15, r25
    71a6:	08 f4       	brcc	.+2      	; 0x71aa <__vector_10+0x12e>
    71a8:	b5 cf       	rjmp	.-150    	; 0x7114 <__vector_10+0x98>
					//printf("In overflow, tasks need to have been executed!\r\n");
					//print_task_queue();
				}else{		
					while (RTC.STATUS & RTC_SYNCBUSY_bm);
    71aa:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
    71ae:	80 fd       	sbrc	r24, 0
    71b0:	fc cf       	rjmp	.-8      	; 0x71aa <__vector_10+0x12e>
					RTC.COMP = ((uint16_t)(task_list->scheduled_time))|0x8;
    71b2:	e0 91 7f 26 	lds	r30, 0x267F	; 0x80267f <task_list>
    71b6:	f0 91 80 26 	lds	r31, 0x2680	; 0x802680 <task_list+0x1>
    71ba:	80 81       	ld	r24, Z
    71bc:	91 81       	ldd	r25, Z+1	; 0x01
    71be:	a2 81       	ldd	r26, Z+2	; 0x02
    71c0:	b3 81       	ldd	r27, Z+3	; 0x03
    71c2:	88 60       	ori	r24, 0x08	; 8
    71c4:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__TEXT_REGION_LENGTH__+0x70040c>
    71c8:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <__TEXT_REGION_LENGTH__+0x70040d>
					RTC.INTCTRL |= RTC_COMP_INT_LEVEL;
    71cc:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    71d0:	84 60       	ori	r24, 0x04	; 4
    71d2:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
    71d6:	9e cf       	rjmp	.-196    	; 0x7114 <__vector_10+0x98>

000071d8 <sendID>:
 */
static void handle_reset(void){
	dropletReboot();
}

void sendID(){
    71d8:	0f 93       	push	r16
    71da:	1f 93       	push	r17
    71dc:	cf 93       	push	r28
    71de:	df 93       	push	r29
    71e0:	cd b7       	in	r28, 0x3d	; 61
    71e2:	de b7       	in	r29, 0x3e	; 62
    71e4:	25 97       	sbiw	r28, 0x05	; 5
    71e6:	cd bf       	out	0x3d, r28	; 61
    71e8:	de bf       	out	0x3e, r29	; 62
	char msg[5];
	sprintf(msg, "%04X", getDropletID());
    71ea:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <droplet_ID+0x1>
    71ee:	8f 93       	push	r24
    71f0:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <droplet_ID>
    71f4:	8f 93       	push	r24
    71f6:	86 ea       	ldi	r24, 0xA6	; 166
    71f8:	92 e2       	ldi	r25, 0x22	; 34
    71fa:	9f 93       	push	r25
    71fc:	8f 93       	push	r24
    71fe:	8e 01       	movw	r16, r28
    7200:	0f 5f       	subi	r16, 0xFF	; 255
    7202:	1f 4f       	sbci	r17, 0xFF	; 255
    7204:	1f 93       	push	r17
    7206:	0f 93       	push	r16
    7208:	0e 94 d7 50 	call	0xa1ae	; 0xa1ae <sprintf>
	irSend(ALL_DIRS, msg, 4);
    720c:	44 e0       	ldi	r20, 0x04	; 4
    720e:	b8 01       	movw	r22, r16
    7210:	8f e3       	ldi	r24, 0x3F	; 63
    7212:	0e 94 1f 14 	call	0x283e	; 0x283e <irSend>
}
    7216:	0f 90       	pop	r0
    7218:	0f 90       	pop	r0
    721a:	0f 90       	pop	r0
    721c:	0f 90       	pop	r0
    721e:	0f 90       	pop	r0
    7220:	0f 90       	pop	r0
    7222:	25 96       	adiw	r28, 0x05	; 5
    7224:	cd bf       	out	0x3d, r28	; 61
    7226:	de bf       	out	0x3e, r29	; 62
    7228:	df 91       	pop	r29
    722a:	cf 91       	pop	r28
    722c:	1f 91       	pop	r17
    722e:	0f 91       	pop	r16
    7230:	08 95       	ret

00007232 <handleSerialCommand>:
/*
 * This is where incoming commands are interpreted. The actual command is the string inside the PSTR function.
 * For example, move_steps, walk, or get_rgb. If the command matches the string, the function on the same line
 * will get called. See individual functions for further documentation on that command's syntax.
 */
void handleSerialCommand(char* command, uint16_t command_length){
    7232:	2f 92       	push	r2
    7234:	3f 92       	push	r3
    7236:	4f 92       	push	r4
    7238:	5f 92       	push	r5
    723a:	6f 92       	push	r6
    723c:	7f 92       	push	r7
    723e:	8f 92       	push	r8
    7240:	9f 92       	push	r9
    7242:	af 92       	push	r10
    7244:	bf 92       	push	r11
    7246:	cf 92       	push	r12
    7248:	df 92       	push	r13
    724a:	ef 92       	push	r14
    724c:	ff 92       	push	r15
    724e:	0f 93       	push	r16
    7250:	1f 93       	push	r17
    7252:	cf 93       	push	r28
    7254:	df 93       	push	r29
    7256:	cd b7       	in	r28, 0x3d	; 61
    7258:	de b7       	in	r29, 0x3e	; 62
    725a:	c7 5a       	subi	r28, 0xA7	; 167
    725c:	d1 09       	sbc	r29, r1
    725e:	cd bf       	out	0x3d, r28	; 61
    7260:	de bf       	out	0x3e, r29	; 62
    7262:	dc 01       	movw	r26, r24
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
    7264:	9c 91       	ld	r25, X
    7266:	91 11       	cpse	r25, r1
    7268:	17 c0       	rjmp	.+46     	; 0x7298 <handleSerialCommand+0x66>
		}else if(userHandleCommand){ //First, make sure the function is defined
			if(!userHandleCommand(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
		}
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}
    726a:	c9 55       	subi	r28, 0x59	; 89
    726c:	df 4f       	sbci	r29, 0xFF	; 255
    726e:	cd bf       	out	0x3d, r28	; 61
    7270:	de bf       	out	0x3e, r29	; 62
    7272:	df 91       	pop	r29
    7274:	cf 91       	pop	r28
    7276:	1f 91       	pop	r17
    7278:	0f 91       	pop	r16
    727a:	ff 90       	pop	r15
    727c:	ef 90       	pop	r14
    727e:	df 90       	pop	r13
    7280:	cf 90       	pop	r12
    7282:	bf 90       	pop	r11
    7284:	af 90       	pop	r10
    7286:	9f 90       	pop	r9
    7288:	8f 90       	pop	r8
    728a:	7f 90       	pop	r7
    728c:	6f 90       	pop	r6
    728e:	5f 90       	pop	r5
    7290:	4f 90       	pop	r4
    7292:	3f 90       	pop	r3
    7294:	2f 90       	pop	r2
    7296:	08 95       	ret

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    7298:	61 15       	cp	r22, r1
    729a:	71 05       	cpc	r23, r1
    729c:	09 f4       	brne	.+2      	; 0x72a0 <handleSerialCommand+0x6e>
    729e:	f9 c1       	rjmp	.+1010   	; 0x7692 <handleSerialCommand+0x460>
    72a0:	fd 01       	movw	r30, r26
    72a2:	31 96       	adiw	r30, 0x01	; 1
    72a4:	6a 0f       	add	r22, r26
    72a6:	7b 1f       	adc	r23, r27
    72a8:	20 e0       	ldi	r18, 0x00	; 0
    72aa:	30 e0       	ldi	r19, 0x00	; 0
    72ac:	81 e0       	ldi	r24, 0x01	; 1
    72ae:	8e 01       	movw	r16, r28
    72b0:	0f 5b       	subi	r16, 0xBF	; 191
    72b2:	1f 4f       	sbci	r17, 0xFF	; 255
    72b4:	12 c0       	rjmp	.+36     	; 0x72da <handleSerialCommand+0xa8>
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
			writing_word_boole = 0;
		}else{
			if(writing_word_boole==1){
    72b6:	81 30       	cpi	r24, 0x01	; 1
    72b8:	09 f4       	brne	.+2      	; 0x72bc <handleSerialCommand+0x8a>
    72ba:	ca c0       	rjmp	.+404    	; 0x7450 <handleSerialCommand+0x21e>
				command_word[write_index] = command[i];
			}else{
				command_args[write_index] = command[i];
    72bc:	a1 e0       	ldi	r26, 0x01	; 1
    72be:	b0 e0       	ldi	r27, 0x00	; 0
    72c0:	ac 0f       	add	r26, r28
    72c2:	bd 1f       	adc	r27, r29
    72c4:	a2 0f       	add	r26, r18
    72c6:	b3 1f       	adc	r27, r19
    72c8:	9c 93       	st	X, r25
			}
			write_index++;
    72ca:	2f 5f       	subi	r18, 0xFF	; 255
    72cc:	3f 4f       	sbci	r19, 0xFF	; 255

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    72ce:	6e 17       	cp	r22, r30
    72d0:	7f 07       	cpc	r23, r31
    72d2:	89 f0       	breq	.+34     	; 0x72f6 <handleSerialCommand+0xc4>
		if(command[i]=='\0'){
    72d4:	91 91       	ld	r25, Z+
    72d6:	99 23       	and	r25, r25
    72d8:	71 f0       	breq	.+28     	; 0x72f6 <handleSerialCommand+0xc4>
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
    72da:	90 32       	cpi	r25, 0x20	; 32
    72dc:	61 f7       	brne	.-40     	; 0x72b6 <handleSerialCommand+0x84>
    72de:	81 30       	cpi	r24, 0x01	; 1
    72e0:	69 f7       	brne	.-38     	; 0x72bc <handleSerialCommand+0x8a>
			command_word[write_index]='\0';
    72e2:	d8 01       	movw	r26, r16
    72e4:	a2 0f       	add	r26, r18
    72e6:	b3 1f       	adc	r27, r19
    72e8:	1c 92       	st	X, r1
			write_index = 0;
			writing_word_boole = 0;
    72ea:	80 e0       	ldi	r24, 0x00	; 0
	for(uint16_t i=0 ; i<command_length ; i++){
		if(command[i]=='\0'){
			break;
		}else if(command[i]==' ' && writing_word_boole == 1){
			command_word[write_index]='\0';
			write_index = 0;
    72ec:	20 e0       	ldi	r18, 0x00	; 0
    72ee:	30 e0       	ldi	r19, 0x00	; 0

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    72f0:	6e 17       	cp	r22, r30
    72f2:	7f 07       	cpc	r23, r31
    72f4:	79 f7       	brne	.-34     	; 0x72d4 <handleSerialCommand+0xa2>
				command_args[write_index] = command[i];
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
    72f6:	81 30       	cpi	r24, 0x01	; 1
    72f8:	09 f4       	brne	.+2      	; 0x72fc <handleSerialCommand+0xca>
    72fa:	72 c1       	rjmp	.+740    	; 0x75e0 <handleSerialCommand+0x3ae>
		command_word[write_index] = '\0';
		command_args[0] = '\0';
	}else{
		command_args[write_index] = '\0';
    72fc:	fe 01       	movw	r30, r28
    72fe:	e2 0f       	add	r30, r18
    7300:	f3 1f       	adc	r31, r19
    7302:	11 82       	std	Z+1, r1	; 0x01
void handleSerialCommand(char* command, uint16_t command_length){
	if(command[0]!='\0'){ //Not much to handle if we get an empty string.
		char command_word[SRL_BUFFER_SIZE];
		char command_args[SRL_BUFFER_SIZE];
		get_command_word_and_args(command,command_length,command_word,command_args);
			 if(strcmp_P(command_word,PSTR("move_steps"))==0)			handle_move_steps(command_args);
    7304:	61 ec       	ldi	r22, 0xC1	; 193
    7306:	7f e0       	ldi	r23, 0x0F	; 15
    7308:	c8 01       	movw	r24, r16
    730a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    730e:	89 2b       	or	r24, r25
    7310:	09 f4       	brne	.+2      	; 0x7314 <handleSerialCommand+0xe2>
    7312:	c3 c0       	rjmp	.+390    	; 0x749a <handleSerialCommand+0x268>
		else if(strcmp_P(command_word,PSTR("walk"))==0)					handle_walk(command_args);
    7314:	6c eb       	ldi	r22, 0xBC	; 188
    7316:	7f e0       	ldi	r23, 0x0F	; 15
    7318:	c8 01       	movw	r24, r16
    731a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    731e:	89 2b       	or	r24, r25
    7320:	09 f4       	brne	.+2      	; 0x7324 <handleSerialCommand+0xf2>
    7322:	9b c0       	rjmp	.+310    	; 0x745a <handleSerialCommand+0x228>
		else if(strcmp_P(command_word,PSTR("get_rgb"))==0)				handle_get_rgb();
    7324:	64 eb       	ldi	r22, 0xB4	; 180
    7326:	7f e0       	ldi	r23, 0x0F	; 15
    7328:	c8 01       	movw	r24, r16
    732a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    732e:	89 2b       	or	r24, r25
    7330:	09 f4       	brne	.+2      	; 0x7334 <handleSerialCommand+0x102>
    7332:	e8 c0       	rjmp	.+464    	; 0x7504 <handleSerialCommand+0x2d2>
		else if(strcmp_P(command_word,PSTR("set_ir"))==0)				handle_set_ir(command_args);
    7334:	6d ea       	ldi	r22, 0xAD	; 173
    7336:	7f e0       	ldi	r23, 0x0F	; 15
    7338:	c8 01       	movw	r24, r16
    733a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    733e:	89 2b       	or	r24, r25
    7340:	09 f4       	brne	.+2      	; 0x7344 <handleSerialCommand+0x112>
    7342:	54 c1       	rjmp	.+680    	; 0x75ec <handleSerialCommand+0x3ba>
		else if(strcmp_P(command_word,PSTR("coll"))==0)					handle_check_collisions();
    7344:	68 ea       	ldi	r22, 0xA8	; 168
    7346:	7f e0       	ldi	r23, 0x0F	; 15
    7348:	c8 01       	movw	r24, r16
    734a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    734e:	89 2b       	or	r24, r25
    7350:	09 f4       	brne	.+2      	; 0x7354 <handleSerialCommand+0x122>
    7352:	67 c1       	rjmp	.+718    	; 0x7622 <handleSerialCommand+0x3f0>
		else if(strcmp_P(command_word,PSTR("stop_walk"))==0)			handle_stop_walk();
    7354:	6e e9       	ldi	r22, 0x9E	; 158
    7356:	7f e0       	ldi	r23, 0x0F	; 15
    7358:	c8 01       	movw	r24, r16
    735a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    735e:	89 2b       	or	r24, r25
    7360:	09 f4       	brne	.+2      	; 0x7364 <handleSerialCommand+0x132>
    7362:	94 c1       	rjmp	.+808    	; 0x768c <handleSerialCommand+0x45a>
		else if(strcmp_P(command_word,PSTR("set_motors"))==0)			handle_set_motors(command_args);
    7364:	63 e9       	ldi	r22, 0x93	; 147
    7366:	7f e0       	ldi	r23, 0x0F	; 15
    7368:	c8 01       	movw	r24, r16
    736a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    736e:	89 2b       	or	r24, r25
    7370:	09 f4       	brne	.+2      	; 0x7374 <handleSerialCommand+0x142>
    7372:	00 c1       	rjmp	.+512    	; 0x7574 <handleSerialCommand+0x342>
		else if(strcmp_P(command_word,PSTR("adj_motors"))==0)			handle_adjust_motors(command_args);
    7374:	68 e8       	ldi	r22, 0x88	; 136
    7376:	7f e0       	ldi	r23, 0x0F	; 15
    7378:	c8 01       	movw	r24, r16
    737a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    737e:	89 2b       	or	r24, r25
    7380:	09 f4       	brne	.+2      	; 0x7384 <handleSerialCommand+0x152>
    7382:	8c c1       	rjmp	.+792    	; 0x769c <handleSerialCommand+0x46a>
		else if(strcmp_P(command_word,PSTR("set_dist_per_step"))==0)	handle_set_mm_per_kilostep(command_args);
    7384:	66 e7       	ldi	r22, 0x76	; 118
    7386:	7f e0       	ldi	r23, 0x0F	; 15
    7388:	c8 01       	movw	r24, r16
    738a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    738e:	89 2b       	or	r24, r25
    7390:	09 f4       	brne	.+2      	; 0x7394 <handleSerialCommand+0x162>
    7392:	ba c1       	rjmp	.+884    	; 0x7708 <handleSerialCommand+0x4d6>
		else if(strcmp_P(command_word,PSTR("rnb_b"))==0)				handle_rnb_broadcast();
    7394:	60 e7       	ldi	r22, 0x70	; 112
    7396:	7f e0       	ldi	r23, 0x0F	; 15
    7398:	c8 01       	movw	r24, r16
    739a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    739e:	89 2b       	or	r24, r25
    73a0:	09 f4       	brne	.+2      	; 0x73a4 <handleSerialCommand+0x172>
    73a2:	25 c2       	rjmp	.+1098   	; 0x77ee <handleSerialCommand+0x5bc>
		else if(strcmp_P(command_word,PSTR("set_led"))==0)				handle_set_led(command_args);
    73a4:	68 e6       	ldi	r22, 0x68	; 104
    73a6:	7f e0       	ldi	r23, 0x0F	; 15
    73a8:	c8 01       	movw	r24, r16
    73aa:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    73ae:	89 2b       	or	r24, r25
    73b0:	09 f4       	brne	.+2      	; 0x73b4 <handleSerialCommand+0x182>
    73b2:	a4 c2       	rjmp	.+1352   	; 0x78fc <handleSerialCommand+0x6ca>
		else if(strcmp_P(command_word,PSTR("get_id"))==0)				handle_get_id();
    73b4:	61 e6       	ldi	r22, 0x61	; 97
    73b6:	7f e0       	ldi	r23, 0x0F	; 15
    73b8:	c8 01       	movw	r24, r16
    73ba:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    73be:	89 2b       	or	r24, r25
    73c0:	09 f4       	brne	.+2      	; 0x73c4 <handleSerialCommand+0x192>
    73c2:	ea c2       	rjmp	.+1492   	; 0x7998 <handleSerialCommand+0x766>
		else if(strcmp_P(command_word,PSTR("broadcast_id"))==0)			handle_broadcast_id();
    73c4:	64 e5       	ldi	r22, 0x54	; 84
    73c6:	7f e0       	ldi	r23, 0x0F	; 15
    73c8:	c8 01       	movw	r24, r16
    73ca:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    73ce:	89 2b       	or	r24, r25
    73d0:	09 f4       	brne	.+2      	; 0x73d4 <handleSerialCommand+0x1a2>
    73d2:	f3 c2       	rjmp	.+1510   	; 0x79ba <handleSerialCommand+0x788>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
    73d4:	60 e5       	ldi	r22, 0x50	; 80
    73d6:	7f e0       	ldi	r23, 0x0F	; 15
    73d8:	c8 01       	movw	r24, r16
    73da:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    73de:	89 2b       	or	r24, r25
    73e0:	09 f4       	brne	.+2      	; 0x73e4 <handleSerialCommand+0x1b2>
    73e2:	f6 c2       	rjmp	.+1516   	; 0x79d0 <handleSerialCommand+0x79e>
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
    73e4:	68 e4       	ldi	r22, 0x48	; 72
    73e6:	7f e0       	ldi	r23, 0x0F	; 15
    73e8:	c8 01       	movw	r24, r16
    73ea:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    73ee:	89 2b       	or	r24, r25
    73f0:	09 f4       	brne	.+2      	; 0x73f4 <handleSerialCommand+0x1c2>
    73f2:	42 c3       	rjmp	.+1668   	; 0x7a78 <handleSerialCommand+0x846>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
    73f4:	64 e4       	ldi	r22, 0x44	; 68
    73f6:	7f e0       	ldi	r23, 0x0F	; 15
    73f8:	c8 01       	movw	r24, r16
    73fa:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    73fe:	89 2b       	or	r24, r25
    7400:	09 f4       	brne	.+2      	; 0x7404 <handleSerialCommand+0x1d2>
    7402:	0d c4       	rjmp	.+2074   	; 0x7c1e <handleSerialCommand+0x9ec>
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
    7404:	6c e3       	ldi	r22, 0x3C	; 60
    7406:	7f e0       	ldi	r23, 0x0F	; 15
    7408:	c8 01       	movw	r24, r16
    740a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    740e:	89 2b       	or	r24, r25
    7410:	09 f4       	brne	.+2      	; 0x7414 <handleSerialCommand+0x1e2>
    7412:	f0 c3       	rjmp	.+2016   	; 0x7bf4 <handleSerialCommand+0x9c2>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
    7414:	68 e3       	ldi	r22, 0x38	; 56
    7416:	7f e0       	ldi	r23, 0x0F	; 15
    7418:	c8 01       	movw	r24, r16
    741a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    741e:	89 2b       	or	r24, r25
    7420:	09 f4       	brne	.+2      	; 0x7424 <handleSerialCommand+0x1f2>
    7422:	1c c4       	rjmp	.+2104   	; 0x7c5c <handleSerialCommand+0xa2a>
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
    7424:	62 e3       	ldi	r22, 0x32	; 50
    7426:	7f e0       	ldi	r23, 0x0F	; 15
    7428:	c8 01       	movw	r24, r16
    742a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    742e:	89 2b       	or	r24, r25
    7430:	09 f4       	brne	.+2      	; 0x7434 <handleSerialCommand+0x202>
    7432:	dd c3       	rjmp	.+1978   	; 0x7bee <handleSerialCommand+0x9bc>
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
    7434:	6c e2       	ldi	r22, 0x2C	; 44
    7436:	7f e0       	ldi	r23, 0x0F	; 15
    7438:	c8 01       	movw	r24, r16
    743a:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    743e:	89 2b       	or	r24, r25
    7440:	09 f0       	breq	.+2      	; 0x7444 <handleSerialCommand+0x212>
    7442:	b9 c3       	rjmp	.+1906   	; 0x7bb6 <handleSerialCommand+0x984>

/**
 * \brief Resets the Droplet's program counter and clears all low-level system buffers.
 */
inline void dropletReboot(void){
	CPU_CCP=CCP_IOREG_gc;
    7444:	88 ed       	ldi	r24, 0xD8	; 216
    7446:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
    7448:	81 e0       	ldi	r24, 0x01	; 1
    744a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    744e:	0d cf       	rjmp	.-486    	; 0x726a <handleSerialCommand+0x38>
			command_word[write_index]='\0';
			write_index = 0;
			writing_word_boole = 0;
		}else{
			if(writing_word_boole==1){
				command_word[write_index] = command[i];
    7450:	d8 01       	movw	r26, r16
    7452:	a2 0f       	add	r26, r18
    7454:	b3 1f       	adc	r27, r19
    7456:	9c 93       	st	X, r25
    7458:	38 cf       	rjmp	.-400    	; 0x72ca <handleSerialCommand+0x98>
 * Format:
 *     walk <dir> <distance>
 * Calls the walk function with arguments as described above.
 */
static void handle_walk(char* command_args){	
	const char delim[2] = " ";
    745a:	80 e2       	ldi	r24, 0x20	; 32
    745c:	90 e0       	ldi	r25, 0x00	; 0
    745e:	cf 57       	subi	r28, 0x7F	; 127
    7460:	df 4f       	sbci	r29, 0xFF	; 255
    7462:	88 83       	st	Y, r24
    7464:	99 83       	std	Y+1, r25	; 0x01
    7466:	c1 58       	subi	r28, 0x81	; 129
    7468:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    746a:	be 01       	movw	r22, r28
    746c:	6f 57       	subi	r22, 0x7F	; 127
    746e:	7f 4f       	sbci	r23, 0xFF	; 255
    7470:	ce 01       	movw	r24, r28
    7472:	01 96       	adiw	r24, 0x01	; 1
    7474:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	uint8_t direction = token[0]-'0';
    7478:	fc 01       	movw	r30, r24
    747a:	10 81       	ld	r17, Z
    747c:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    747e:	be 01       	movw	r22, r28
    7480:	6f 57       	subi	r22, 0x7F	; 127
    7482:	7f 4f       	sbci	r23, 0xFF	; 255
    7484:	80 e0       	ldi	r24, 0x00	; 0
    7486:	90 e0       	ldi	r25, 0x00	; 0
    7488:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	uint16_t distance_mm = (uint16_t)atoi(token);
    748c:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
	
	walk(direction, distance_mm);
    7490:	bc 01       	movw	r22, r24
    7492:	81 2f       	mov	r24, r17
    7494:	0e 94 93 20 	call	0x4126	; 0x4126 <walk>
    7498:	e8 ce       	rjmp	.-560    	; 0x726a <handleSerialCommand+0x38>
 * Format:
 *     move_steps <dir> <num_steps>
 * Calls the move_steps function with arguments as described above.
 */
static void handle_move_steps(char* command_args){
	const char delim[2] = " ";
    749a:	80 e2       	ldi	r24, 0x20	; 32
    749c:	90 e0       	ldi	r25, 0x00	; 0
    749e:	cf 57       	subi	r28, 0x7F	; 127
    74a0:	df 4f       	sbci	r29, 0xFF	; 255
    74a2:	88 83       	st	Y, r24
    74a4:	99 83       	std	Y+1, r25	; 0x01
    74a6:	c1 58       	subi	r28, 0x81	; 129
    74a8:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    74aa:	be 01       	movw	r22, r28
    74ac:	6f 57       	subi	r22, 0x7F	; 127
    74ae:	7f 4f       	sbci	r23, 0xFF	; 255
    74b0:	ce 01       	movw	r24, r28
    74b2:	01 96       	adiw	r24, 0x01	; 1
    74b4:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	uint8_t direction = token[0]-'0';
    74b8:	fc 01       	movw	r30, r24
    74ba:	f0 80       	ld	r15, Z

	token = strtok(NULL,delim);
    74bc:	be 01       	movw	r22, r28
    74be:	6f 57       	subi	r22, 0x7F	; 127
    74c0:	7f 4f       	sbci	r23, 0xFF	; 255
    74c2:	80 e0       	ldi	r24, 0x00	; 0
    74c4:	90 e0       	ldi	r25, 0x00	; 0
    74c6:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	uint16_t num_steps = (uint16_t)atoi(token);
    74ca:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    74ce:	8c 01       	movw	r16, r24
	if (num_steps > 0){	
    74d0:	00 97       	sbiw	r24, 0x00	; 0
    74d2:	09 f4       	brne	.+2      	; 0x74d6 <handleSerialCommand+0x2a4>
    74d4:	ca ce       	rjmp	.-620    	; 0x726a <handleSerialCommand+0x38>
 */
static void handle_move_steps(char* command_args){
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	uint8_t direction = token[0]-'0';
    74d6:	f0 ed       	ldi	r31, 0xD0	; 208
    74d8:	ff 0e       	add	r15, r31

	token = strtok(NULL,delim);
	uint16_t num_steps = (uint16_t)atoi(token);
	if (num_steps > 0){	
		printf_P(PSTR("walk direction %hu, num_steps %u\r\n"), direction, num_steps);	
    74da:	1f 93       	push	r17
    74dc:	8f 93       	push	r24
    74de:	1f 92       	push	r1
    74e0:	ff 92       	push	r15
    74e2:	8a ec       	ldi	r24, 0xCA	; 202
    74e4:	9e e0       	ldi	r25, 0x0E	; 14
    74e6:	9f 93       	push	r25
    74e8:	8f 93       	push	r24
    74ea:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
		moveSteps(direction, num_steps);
    74ee:	b8 01       	movw	r22, r16
    74f0:	8f 2d       	mov	r24, r15
    74f2:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <moveSteps>
    74f6:	0f 90       	pop	r0
    74f8:	0f 90       	pop	r0
    74fa:	0f 90       	pop	r0
    74fc:	0f 90       	pop	r0
    74fe:	0f 90       	pop	r0
    7500:	0f 90       	pop	r0
    7502:	b3 ce       	rjmp	.-666    	; 0x726a <handleSerialCommand+0x38>
 * No arguments.
 * Prints the sensed colors, as reported by get_rgb.
 */
static void handle_get_rgb(void){
	int16_t r, g, b;
	getRGB(&r, &g, &b);
    7504:	ae 01       	movw	r20, r28
    7506:	4f 57       	subi	r20, 0x7F	; 127
    7508:	5f 4f       	sbci	r21, 0xFF	; 255
    750a:	be 01       	movw	r22, r28
    750c:	6f 55       	subi	r22, 0x5F	; 95
    750e:	7f 4f       	sbci	r23, 0xFF	; 255
    7510:	ce 01       	movw	r24, r28
    7512:	8a 55       	subi	r24, 0x5A	; 90
    7514:	9f 4f       	sbci	r25, 0xFF	; 255
    7516:	0e 94 ae 32 	call	0x655c	; 0x655c <getRGB>
	printf_P(PSTR("r: %hu, g: %hu, b: %hu\r\n"), r, g, b);
    751a:	ce 57       	subi	r28, 0x7E	; 126
    751c:	df 4f       	sbci	r29, 0xFF	; 255
    751e:	88 81       	ld	r24, Y
    7520:	c2 58       	subi	r28, 0x82	; 130
    7522:	d0 40       	sbci	r29, 0x00	; 0
    7524:	8f 93       	push	r24
    7526:	cf 57       	subi	r28, 0x7F	; 127
    7528:	df 4f       	sbci	r29, 0xFF	; 255
    752a:	88 81       	ld	r24, Y
    752c:	c1 58       	subi	r28, 0x81	; 129
    752e:	d0 40       	sbci	r29, 0x00	; 0
    7530:	8f 93       	push	r24
    7532:	ce 55       	subi	r28, 0x5E	; 94
    7534:	df 4f       	sbci	r29, 0xFF	; 255
    7536:	88 81       	ld	r24, Y
    7538:	c2 5a       	subi	r28, 0xA2	; 162
    753a:	d0 40       	sbci	r29, 0x00	; 0
    753c:	8f 93       	push	r24
    753e:	cf 55       	subi	r28, 0x5F	; 95
    7540:	df 4f       	sbci	r29, 0xFF	; 255
    7542:	88 81       	ld	r24, Y
    7544:	c1 5a       	subi	r28, 0xA1	; 161
    7546:	d0 40       	sbci	r29, 0x00	; 0
    7548:	8f 93       	push	r24
    754a:	c9 55       	subi	r28, 0x59	; 89
    754c:	df 4f       	sbci	r29, 0xFF	; 255
    754e:	88 81       	ld	r24, Y
    7550:	c7 5a       	subi	r28, 0xA7	; 167
    7552:	d0 40       	sbci	r29, 0x00	; 0
    7554:	8f 93       	push	r24
    7556:	ca 55       	subi	r28, 0x5A	; 90
    7558:	df 4f       	sbci	r29, 0xFF	; 255
    755a:	88 81       	ld	r24, Y
    755c:	c6 5a       	subi	r28, 0xA6	; 166
    755e:	d0 40       	sbci	r29, 0x00	; 0
    7560:	8f 93       	push	r24
    7562:	81 eb       	ldi	r24, 0xB1	; 177
    7564:	9e e0       	ldi	r25, 0x0E	; 14
    7566:	9f 93       	push	r25
    7568:	8f 93       	push	r24
    756a:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    756e:	cd bf       	out	0x3d, r28	; 61
    7570:	de bf       	out	0x3e, r29	; 62
    7572:	7b ce       	rjmp	.-778    	; 0x726a <handleSerialCommand+0x38>
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    7574:	60 90 7a 0a 	lds	r6, 0x0A7A	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    7578:	70 90 7b 0a 	lds	r7, 0x0A7B	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    757c:	a0 90 78 0a 	lds	r10, 0x0A78	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    7580:	b0 90 79 0a 	lds	r11, 0x0A79	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    7584:	80 90 78 09 	lds	r8, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    7588:	90 90 79 09 	lds	r9, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
 * how long it spins for.
 * Note that Audio Droplets don't have a motor 0, so <mot0val> should always be 0 for them.
 */
static void handle_set_motors(char* command_args){	
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
    758c:	4f ef       	ldi	r20, 0xFF	; 255
    758e:	60 e0       	ldi	r22, 0x00	; 0
    7590:	80 e0       	ldi	r24, 0x00	; 0
    7592:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
	const char delim[2] = " ";
    7596:	8e 01       	movw	r16, r28
    7598:	0f 57       	subi	r16, 0x7F	; 127
    759a:	1f 4f       	sbci	r17, 0xFF	; 255
    759c:	80 e2       	ldi	r24, 0x20	; 32
    759e:	90 e0       	ldi	r25, 0x00	; 0
    75a0:	f8 01       	movw	r30, r16
    75a2:	80 83       	st	Z, r24
    75a4:	91 83       	std	Z+1, r25	; 0x01
	
	char* token = strtok(command_args,delim);
    75a6:	b8 01       	movw	r22, r16
    75a8:	ce 01       	movw	r24, r28
    75aa:	01 96       	adiw	r24, 0x01	; 1
    75ac:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    75b0:	00 97       	sbiw	r24, 0x00	; 0
    75b2:	09 f4       	brne	.+2      	; 0x75b6 <handleSerialCommand+0x384>
    75b4:	ca c2       	rjmp	.+1428   	; 0x7b4a <handleSerialCommand+0x918>
	uint8_t direction = atoi(token);
    75b6:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    75ba:	7c 01       	movw	r14, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}
    75bc:	f7 e0       	ldi	r31, 0x07	; 7
    75be:	f8 17       	cp	r31, r24
    75c0:	08 f0       	brcs	.+2      	; 0x75c4 <handleSerialCommand+0x392>
    75c2:	c2 c0       	rjmp	.+388    	; 0x7748 <handleSerialCommand+0x516>
    75c4:	ff 24       	eor	r15, r15
    75c6:	ff 92       	push	r15
    75c8:	ef 92       	push	r14
    75ca:	81 e7       	ldi	r24, 0x71	; 113
    75cc:	9e e0       	ldi	r25, 0x0E	; 14
    75ce:	9f 93       	push	r25
    75d0:	8f 93       	push	r24
    75d2:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    75d6:	0f 90       	pop	r0
    75d8:	0f 90       	pop	r0
    75da:	0f 90       	pop	r0
    75dc:	0f 90       	pop	r0
    75de:	45 ce       	rjmp	.-886    	; 0x726a <handleSerialCommand+0x38>
    75e0:	f8 01       	movw	r30, r16
    75e2:	e2 0f       	add	r30, r18
    75e4:	f3 1f       	adc	r31, r19
			}
			write_index++;
		}
	}
	if(writing_word_boole==1){
		command_word[write_index] = '\0';
    75e6:	10 82       	st	Z, r1
		command_args[0] = '\0';
    75e8:	19 82       	std	Y+1, r1	; 0x01
    75ea:	8c ce       	rjmp	.-744    	; 0x7304 <handleSerialCommand+0xd2>
 * Format:
 *     set_ir <power>
 * Calls the set_all_ir_powers function with arguments as described above.
 */
static void handle_set_ir(char* command_args){
	const char delim[2] = " ";
    75ec:	80 e2       	ldi	r24, 0x20	; 32
    75ee:	90 e0       	ldi	r25, 0x00	; 0
    75f0:	cf 57       	subi	r28, 0x7F	; 127
    75f2:	df 4f       	sbci	r29, 0xFF	; 255
    75f4:	88 83       	st	Y, r24
    75f6:	99 83       	std	Y+1, r25	; 0x01
    75f8:	c1 58       	subi	r28, 0x81	; 129
    75fa:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    75fc:	be 01       	movw	r22, r28
    75fe:	6f 57       	subi	r22, 0x7F	; 127
    7600:	7f 4f       	sbci	r23, 0xFF	; 255
    7602:	ce 01       	movw	r24, r28
    7604:	01 96       	adiw	r24, 0x01	; 1
    7606:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	uint16_t ir_val = (uint16_t)atoi(token);
    760a:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>

	scheduleTask(10, (arg_func_t)setAllirPowers, (void*)ir_val);
    760e:	9c 01       	movw	r18, r24
    7610:	4f e1       	ldi	r20, 0x1F	; 31
    7612:	5c e1       	ldi	r21, 0x1C	; 28
    7614:	6a e0       	ldi	r22, 0x0A	; 10
    7616:	70 e0       	ldi	r23, 0x00	; 0
    7618:	80 e0       	ldi	r24, 0x00	; 0
    761a:	90 e0       	ldi	r25, 0x00	; 0
    761c:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <scheduleTask>
    7620:	24 ce       	rjmp	.-952    	; 0x726a <handleSerialCommand+0x38>
/*
 * No arguments.
 * Prints each direction in which a collision was detected, or None.
 */
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
    7622:	0e 94 56 1e 	call	0x3cac	; 0x3cac <checkCollisions>
    7626:	e8 2e       	mov	r14, r24
    7628:	f1 2c       	mov	r15, r1
    762a:	00 e0       	ldi	r16, 0x00	; 0
    762c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t found=0;
    762e:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
			printf("%hu",i);
    7630:	ac eb       	ldi	r26, 0xBC	; 188
    7632:	ca 2e       	mov	r12, r26
    7634:	a2 e2       	ldi	r26, 0x22	; 34
    7636:	da 2e       	mov	r13, r26
    7638:	05 c0       	rjmp	.+10     	; 0x7644 <handleSerialCommand+0x412>
    763a:	0f 5f       	subi	r16, 0xFF	; 255
    763c:	1f 4f       	sbci	r17, 0xFF	; 255
 * Prints each direction in which a collision was detected, or None.
 */
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
    763e:	06 30       	cpi	r16, 0x06	; 6
    7640:	11 05       	cpc	r17, r1
    7642:	a9 f0       	breq	.+42     	; 0x766e <handleSerialCommand+0x43c>
		if(dirs&(1<<i)){
    7644:	c7 01       	movw	r24, r14
    7646:	00 2e       	mov	r0, r16
    7648:	02 c0       	rjmp	.+4      	; 0x764e <handleSerialCommand+0x41c>
    764a:	95 95       	asr	r25
    764c:	87 95       	ror	r24
    764e:	0a 94       	dec	r0
    7650:	e2 f7       	brpl	.-8      	; 0x764a <handleSerialCommand+0x418>
    7652:	80 ff       	sbrs	r24, 0
    7654:	f2 cf       	rjmp	.-28     	; 0x763a <handleSerialCommand+0x408>
			found=1;
			printf("%hu",i);
    7656:	1f 93       	push	r17
    7658:	0f 93       	push	r16
    765a:	df 92       	push	r13
    765c:	cf 92       	push	r12
    765e:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
    7662:	0f 90       	pop	r0
    7664:	0f 90       	pop	r0
    7666:	0f 90       	pop	r0
    7668:	0f 90       	pop	r0
static void handle_check_collisions(void){
	uint8_t dirs = checkCollisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
    766a:	21 e0       	ldi	r18, 0x01	; 1
    766c:	e6 cf       	rjmp	.-52     	; 0x763a <handleSerialCommand+0x408>
			printf("%hu",i);
		}
	}
	if(!found) printf("None");
    766e:	21 11       	cpse	r18, r1
    7670:	08 c0       	rjmp	.+16     	; 0x7682 <handleSerialCommand+0x450>
    7672:	80 ec       	ldi	r24, 0xC0	; 192
    7674:	92 e2       	ldi	r25, 0x22	; 34
    7676:	9f 93       	push	r25
    7678:	8f 93       	push	r24
    767a:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
    767e:	0f 90       	pop	r0
    7680:	0f 90       	pop	r0
	printf("\r\n");
    7682:	8a ec       	ldi	r24, 0xCA	; 202
    7684:	90 e2       	ldi	r25, 0x20	; 32
    7686:	0e 94 a7 50 	call	0xa14e	; 0xa14e <puts>
    768a:	ef cd       	rjmp	.-1058   	; 0x726a <handleSerialCommand+0x38>
/*
 * No arguments.
 * Calls the stop_move function; the droplet stops moving.
 */
static void handle_stop_walk(void){
	stopMove();
    768c:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <stopMove>
    7690:	ec cd       	rjmp	.-1064   	; 0x726a <handleSerialCommand+0x38>

static void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args){
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++){
    7692:	8e 01       	movw	r16, r28
    7694:	0f 5b       	subi	r16, 0xBF	; 191
    7696:	1f 4f       	sbci	r17, 0xFF	; 255
    7698:	f8 01       	movw	r30, r16
    769a:	a5 cf       	rjmp	.-182    	; 0x75e6 <handleSerialCommand+0x3b4>
#define LED_B_PIN_bm			PIN4_bm

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
    769c:	40 90 7a 0a 	lds	r4, 0x0A7A	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    76a0:	50 90 7b 0a 	lds	r5, 0x0A7B	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
    76a4:	60 90 78 0a 	lds	r6, 0x0A78	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    76a8:	70 90 79 0a 	lds	r7, 0x0A79	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t getBlueLED(void){ return TCD1.CCABUF; }
    76ac:	80 90 78 09 	lds	r8, 0x0978	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    76b0:	90 90 79 09 	lds	r9, 0x0979	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
 * Same as set_motors, described above, except that the motor settings currently stored in volatile 
 * memory are changed by the indicated values.
 */
static void handle_adjust_motors(char* command_args){
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
    76b4:	4f ef       	ldi	r20, 0xFF	; 255
    76b6:	60 e0       	ldi	r22, 0x00	; 0
    76b8:	80 e0       	ldi	r24, 0x00	; 0
    76ba:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
	const char delim[2] = " ";
    76be:	8e 01       	movw	r16, r28
    76c0:	0f 57       	subi	r16, 0x7F	; 127
    76c2:	1f 4f       	sbci	r17, 0xFF	; 255
    76c4:	80 e2       	ldi	r24, 0x20	; 32
    76c6:	90 e0       	ldi	r25, 0x00	; 0
    76c8:	f8 01       	movw	r30, r16
    76ca:	80 83       	st	Z, r24
    76cc:	91 83       	std	Z+1, r25	; 0x01
	
	char* token = strtok(command_args,delim);
    76ce:	b8 01       	movw	r22, r16
    76d0:	ce 01       	movw	r24, r28
    76d2:	01 96       	adiw	r24, 0x01	; 1
    76d4:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    76d8:	00 97       	sbiw	r24, 0x00	; 0
    76da:	09 f4       	brne	.+2      	; 0x76de <handleSerialCommand+0x4ac>
    76dc:	3f c2       	rjmp	.+1150   	; 0x7b5c <handleSerialCommand+0x92a>
	uint8_t direction = atoi(token);
    76de:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    76e2:	7c 01       	movw	r14, r24
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}
    76e4:	f7 e0       	ldi	r31, 0x07	; 7
    76e6:	f8 17       	cp	r31, r24
    76e8:	08 f0       	brcs	.+2      	; 0x76ec <handleSerialCommand+0x4ba>
    76ea:	8c c0       	rjmp	.+280    	; 0x7804 <handleSerialCommand+0x5d2>
    76ec:	ff 24       	eor	r15, r15
    76ee:	ff 92       	push	r15
    76f0:	ef 92       	push	r14
    76f2:	84 e8       	ldi	r24, 0x84	; 132
    76f4:	9d e0       	ldi	r25, 0x0D	; 13
    76f6:	9f 93       	push	r25
    76f8:	8f 93       	push	r24
    76fa:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    76fe:	0f 90       	pop	r0
    7700:	0f 90       	pop	r0
    7702:	0f 90       	pop	r0
    7704:	0f 90       	pop	r0
    7706:	b1 cd       	rjmp	.-1182   	; 0x726a <handleSerialCommand+0x38>
 * Adjusts the (volatile-memory-copy) walking distance settings for <dir>; the value should
 * be the distance in mm that the robot travels per thousand steps taken. For spinning
 * directions (6 & 7), the distance is in degrees.
 */
static void handle_set_mm_per_kilostep(char* command_args){
	const char delim[2] = " ";
    7708:	80 e2       	ldi	r24, 0x20	; 32
    770a:	90 e0       	ldi	r25, 0x00	; 0
    770c:	cf 57       	subi	r28, 0x7F	; 127
    770e:	df 4f       	sbci	r29, 0xFF	; 255
    7710:	88 83       	st	Y, r24
    7712:	99 83       	std	Y+1, r25	; 0x01
    7714:	c1 58       	subi	r28, 0x81	; 129
    7716:	d0 40       	sbci	r29, 0x00	; 0
	
	char* token = strtok(command_args,delim);
    7718:	be 01       	movw	r22, r28
    771a:	6f 57       	subi	r22, 0x7F	; 127
    771c:	7f 4f       	sbci	r23, 0xFF	; 255
    771e:	ce 01       	movw	r24, r28
    7720:	01 96       	adiw	r24, 0x01	; 1
    7722:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	uint8_t direction = token[0]-'0';
    7726:	fc 01       	movw	r30, r24
    7728:	10 81       	ld	r17, Z
    772a:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    772c:	be 01       	movw	r22, r28
    772e:	6f 57       	subi	r22, 0x7F	; 127
    7730:	7f 4f       	sbci	r23, 0xFF	; 255
    7732:	80 e0       	ldi	r24, 0x00	; 0
    7734:	90 e0       	ldi	r25, 0x00	; 0
    7736:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	uint16_t mm_per_kilostep = atoi(token);
    773a:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>

	setMMperKilostep(direction, mm_per_kilostep);
    773e:	bc 01       	movw	r22, r24
    7740:	81 2f       	mov	r24, r17
    7742:	0e 94 0a 21 	call	0x4214	; 0x4214 <setMMperKilostep>
    7746:	91 cd       	rjmp	.-1246   	; 0x726a <handleSerialCommand+0x38>
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
    7748:	b8 01       	movw	r22, r16
    774a:	80 e0       	ldi	r24, 0x00	; 0
    774c:	90 e0       	ldi	r25, 0x00	; 0
    774e:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    7752:	00 97       	sbiw	r24, 0x00	; 0
    7754:	09 f4       	brne	.+2      	; 0x7758 <handleSerialCommand+0x526>
    7756:	e6 c1       	rjmp	.+972    	; 0x7b24 <handleSerialCommand+0x8f2>
    7758:	ff 24       	eor	r15, r15
	motorAdjusts[direction][0] = atoi(token);
    775a:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    775e:	97 01       	movw	r18, r14
    7760:	22 0f       	add	r18, r18
    7762:	33 1f       	adc	r19, r19
    7764:	2e 0d       	add	r18, r14
    7766:	3f 1d       	adc	r19, r15
    7768:	22 0f       	add	r18, r18
    776a:	33 1f       	adc	r19, r19
    776c:	a9 01       	movw	r20, r18
    776e:	46 5b       	subi	r20, 0xB6	; 182
    7770:	59 4d       	sbci	r21, 0xD9	; 217
    7772:	6a 01       	movw	r12, r20
    7774:	fa 01       	movw	r30, r20
    7776:	80 83       	st	Z, r24
    7778:	91 83       	std	Z+1, r25	; 0x01
	
	token = strtok(NULL,delim);
    777a:	b8 01       	movw	r22, r16
    777c:	80 e0       	ldi	r24, 0x00	; 0
    777e:	90 e0       	ldi	r25, 0x00	; 0
    7780:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7784:	00 97       	sbiw	r24, 0x00	; 0
    7786:	09 f4       	brne	.+2      	; 0x778a <handleSerialCommand+0x558>
    7788:	c4 c1       	rjmp	.+904    	; 0x7b12 <handleSerialCommand+0x8e0>
	motorAdjusts[direction][1] = atoi(token);
    778a:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    778e:	26 01       	movw	r4, r12
    7790:	f2 e0       	ldi	r31, 0x02	; 2
    7792:	4f 0e       	add	r4, r31
    7794:	51 1c       	adc	r5, r1
    7796:	f6 01       	movw	r30, r12
    7798:	82 83       	std	Z+2, r24	; 0x02
    779a:	93 83       	std	Z+3, r25	; 0x03
	
	token = strtok(NULL,delim);
    779c:	b8 01       	movw	r22, r16
    779e:	80 e0       	ldi	r24, 0x00	; 0
    77a0:	90 e0       	ldi	r25, 0x00	; 0
    77a2:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    77a6:	00 97       	sbiw	r24, 0x00	; 0
    77a8:	09 f4       	brne	.+2      	; 0x77ac <handleSerialCommand+0x57a>
    77aa:	e1 c1       	rjmp	.+962    	; 0x7b6e <handleSerialCommand+0x93c>
	motorAdjusts[direction][2] = atoi(token);	
    77ac:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    77b0:	f6 01       	movw	r30, r12
    77b2:	84 83       	std	Z+4, r24	; 0x04
    77b4:	95 83       	std	Z+5, r25	; 0x05

	printf_P(PSTR("Got set_motors command. direction: %hu, vals: (%d, %d, %d)\r\n"), direction, motorAdjusts[direction][0], motorAdjusts[direction][1], motorAdjusts[direction][2]);
    77b6:	9f 93       	push	r25
    77b8:	8f 93       	push	r24
    77ba:	f2 01       	movw	r30, r4
    77bc:	81 81       	ldd	r24, Z+1	; 0x01
    77be:	8f 93       	push	r24
    77c0:	f6 01       	movw	r30, r12
    77c2:	82 81       	ldd	r24, Z+2	; 0x02
    77c4:	8f 93       	push	r24
    77c6:	81 81       	ldd	r24, Z+1	; 0x01
    77c8:	8f 93       	push	r24
    77ca:	80 81       	ld	r24, Z
    77cc:	8f 93       	push	r24
    77ce:	ff 92       	push	r15
    77d0:	ef 92       	push	r14
    77d2:	84 ec       	ldi	r24, 0xC4	; 196
    77d4:	9d e0       	ldi	r25, 0x0D	; 13
    77d6:	9f 93       	push	r25
    77d8:	8f 93       	push	r24
    77da:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
	setRGB(r,g,b);
    77de:	48 2d       	mov	r20, r8
    77e0:	6a 2d       	mov	r22, r10
    77e2:	86 2d       	mov	r24, r6
    77e4:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    77e8:	cd bf       	out	0x3d, r28	; 61
    77ea:	de bf       	out	0x3e, r29	; 62
    77ec:	3e cd       	rjmp	.-1412   	; 0x726a <handleSerialCommand+0x38>
/*
 * No arguments.
 * Calls broadcast_rnb_data.
 */
static void handle_rnb_broadcast(void){
	scheduleTask(5,broadcastRnbData,NULL);
    77ee:	20 e0       	ldi	r18, 0x00	; 0
    77f0:	30 e0       	ldi	r19, 0x00	; 0
    77f2:	46 ee       	ldi	r20, 0xE6	; 230
    77f4:	5e e2       	ldi	r21, 0x2E	; 46
    77f6:	65 e0       	ldi	r22, 0x05	; 5
    77f8:	70 e0       	ldi	r23, 0x00	; 0
    77fa:	80 e0       	ldi	r24, 0x00	; 0
    77fc:	90 e0       	ldi	r25, 0x00	; 0
    77fe:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <scheduleTask>
    7802:	33 cd       	rjmp	.-1434   	; 0x726a <handleSerialCommand+0x38>
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
    7804:	b8 01       	movw	r22, r16
    7806:	80 e0       	ldi	r24, 0x00	; 0
    7808:	90 e0       	ldi	r25, 0x00	; 0
    780a:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    780e:	00 97       	sbiw	r24, 0x00	; 0
    7810:	09 f4       	brne	.+2      	; 0x7814 <handleSerialCommand+0x5e2>
    7812:	bf c1       	rjmp	.+894    	; 0x7b92 <handleSerialCommand+0x960>
    7814:	ff 24       	eor	r15, r15
	if(motorAdjusts[direction][0]>=0)
    7816:	67 01       	movw	r12, r14
    7818:	cc 0c       	add	r12, r12
    781a:	dd 1c       	adc	r13, r13
    781c:	96 01       	movw	r18, r12
    781e:	2e 0d       	add	r18, r14
    7820:	3f 1d       	adc	r19, r15
    7822:	22 0f       	add	r18, r18
    7824:	33 1f       	adc	r19, r19
    7826:	a9 01       	movw	r20, r18
    7828:	46 5b       	subi	r20, 0xB6	; 182
    782a:	59 4d       	sbci	r21, 0xD9	; 217
    782c:	1a 01       	movw	r2, r20
    782e:	fa 01       	movw	r30, r20
    7830:	a0 80       	ld	r10, Z
    7832:	b1 80       	ldd	r11, Z+1	; 0x01
    7834:	b7 fc       	sbrc	r11, 7
    7836:	fb c0       	rjmp	.+502    	; 0x7a2e <handleSerialCommand+0x7fc>
		motorAdjusts[direction][0]+= atoi(token);
    7838:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    783c:	8a 0d       	add	r24, r10
    783e:	9b 1d       	adc	r25, r11
    7840:	f1 01       	movw	r30, r2
    7842:	80 83       	st	Z, r24
    7844:	91 83       	std	Z+1, r25	; 0x01
	else
		motorAdjusts[direction][0]-= atoi(token);
	
	token = strtok(NULL,delim);
    7846:	b8 01       	movw	r22, r16
    7848:	80 e0       	ldi	r24, 0x00	; 0
    784a:	90 e0       	ldi	r25, 0x00	; 0
    784c:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7850:	00 97       	sbiw	r24, 0x00	; 0
    7852:	09 f4       	brne	.+2      	; 0x7856 <handleSerialCommand+0x624>
    7854:	95 c1       	rjmp	.+810    	; 0x7b80 <handleSerialCommand+0x94e>
	if(motorAdjusts[direction][1]>=0)
    7856:	96 01       	movw	r18, r12
    7858:	2e 0d       	add	r18, r14
    785a:	3f 1d       	adc	r19, r15
    785c:	22 0f       	add	r18, r18
    785e:	33 1f       	adc	r19, r19
    7860:	a9 01       	movw	r20, r18
    7862:	46 5b       	subi	r20, 0xB6	; 182
    7864:	59 4d       	sbci	r21, 0xD9	; 217
    7866:	1a 01       	movw	r2, r20
    7868:	fa 01       	movw	r30, r20
    786a:	a2 80       	ldd	r10, Z+2	; 0x02
    786c:	b3 80       	ldd	r11, Z+3	; 0x03
    786e:	b7 fc       	sbrc	r11, 7
    7870:	d6 c0       	rjmp	.+428    	; 0x7a1e <handleSerialCommand+0x7ec>
	motorAdjusts[direction][1]+= atoi(token);
    7872:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    7876:	8a 0d       	add	r24, r10
    7878:	9b 1d       	adc	r25, r11
    787a:	f1 01       	movw	r30, r2
    787c:	82 83       	std	Z+2, r24	; 0x02
    787e:	93 83       	std	Z+3, r25	; 0x03
	else
	motorAdjusts[direction][1]-= atoi(token);
	
	token = strtok(NULL,delim);
    7880:	b8 01       	movw	r22, r16
    7882:	80 e0       	ldi	r24, 0x00	; 0
    7884:	90 e0       	ldi	r25, 0x00	; 0
    7886:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    788a:	00 97       	sbiw	r24, 0x00	; 0
    788c:	09 f4       	brne	.+2      	; 0x7890 <handleSerialCommand+0x65e>
    788e:	8a c1       	rjmp	.+788    	; 0x7ba4 <handleSerialCommand+0x972>
	if(motorAdjusts[direction][2]>=0)
    7890:	96 01       	movw	r18, r12
    7892:	2e 0d       	add	r18, r14
    7894:	3f 1d       	adc	r19, r15
    7896:	22 0f       	add	r18, r18
    7898:	33 1f       	adc	r19, r19
    789a:	a9 01       	movw	r20, r18
    789c:	46 5b       	subi	r20, 0xB6	; 182
    789e:	59 4d       	sbci	r21, 0xD9	; 217
    78a0:	5a 01       	movw	r10, r20
    78a2:	fa 01       	movw	r30, r20
    78a4:	04 81       	ldd	r16, Z+4	; 0x04
    78a6:	15 81       	ldd	r17, Z+5	; 0x05
    78a8:	17 fd       	sbrc	r17, 7
    78aa:	45 c1       	rjmp	.+650    	; 0x7b36 <handleSerialCommand+0x904>
	motorAdjusts[direction][2]+= atoi(token);
    78ac:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    78b0:	80 0f       	add	r24, r16
    78b2:	91 1f       	adc	r25, r17
    78b4:	f5 01       	movw	r30, r10
    78b6:	84 83       	std	Z+4, r24	; 0x04
    78b8:	95 83       	std	Z+5, r25	; 0x05
	else
	motorAdjusts[direction][2]-= atoi(token);

	printf_P(PSTR("Got adjust_motors command. direction: %hu, New Settings: (%d, %d, %d)\r\n"), direction, motorAdjusts[direction][0], motorAdjusts[direction][1], motorAdjusts[direction][2]);
    78ba:	9f 93       	push	r25
    78bc:	8f 93       	push	r24
    78be:	f6 01       	movw	r30, r12
    78c0:	ee 0d       	add	r30, r14
    78c2:	ff 1d       	adc	r31, r15
    78c4:	ee 0f       	add	r30, r30
    78c6:	ff 1f       	adc	r31, r31
    78c8:	e6 5b       	subi	r30, 0xB6	; 182
    78ca:	f9 4d       	sbci	r31, 0xD9	; 217
    78cc:	83 81       	ldd	r24, Z+3	; 0x03
    78ce:	8f 93       	push	r24
    78d0:	82 81       	ldd	r24, Z+2	; 0x02
    78d2:	8f 93       	push	r24
    78d4:	81 81       	ldd	r24, Z+1	; 0x01
    78d6:	8f 93       	push	r24
    78d8:	80 81       	ld	r24, Z
    78da:	8f 93       	push	r24
    78dc:	ff 92       	push	r15
    78de:	ef 92       	push	r14
    78e0:	8c ec       	ldi	r24, 0xCC	; 204
    78e2:	9c e0       	ldi	r25, 0x0C	; 12
    78e4:	9f 93       	push	r25
    78e6:	8f 93       	push	r24
    78e8:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
	setRGB(r,g,b);
    78ec:	48 2d       	mov	r20, r8
    78ee:	66 2d       	mov	r22, r6
    78f0:	84 2d       	mov	r24, r4
    78f2:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <setRGB>
    78f6:	cd bf       	out	0x3d, r28	; 61
    78f8:	de bf       	out	0x3e, r29	; 62
    78fa:	b7 cc       	rjmp	.-1682   	; 0x726a <handleSerialCommand+0x38>
 *     set_led r 255           //Full red without effecting green or blue.
 *     set_led br 127 64       //Half-strength blue, quarter-strength red. (order is flexible)
 *     set_led hsv 0 255 255   //Set to fully saturated and bright hue 0 (red).
 */
static void handle_set_led(char* command_args){
	const char delim[2] = " ";
    78fc:	8e 01       	movw	r16, r28
    78fe:	0f 57       	subi	r16, 0x7F	; 127
    7900:	1f 4f       	sbci	r17, 0xFF	; 255
    7902:	80 e2       	ldi	r24, 0x20	; 32
    7904:	90 e0       	ldi	r25, 0x00	; 0
    7906:	f8 01       	movw	r30, r16
    7908:	80 83       	st	Z, r24
    790a:	91 83       	std	Z+1, r25	; 0x01
	char* token;	
	char* colors = strtok(command_args,delim);
    790c:	b8 01       	movw	r22, r16
    790e:	ce 01       	movw	r24, r28
    7910:	01 96       	adiw	r24, 0x01	; 1
    7912:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
    7916:	7c 01       	movw	r14, r24
	int length = strlen(colors);
    7918:	fc 01       	movw	r30, r24
    791a:	01 90       	ld	r0, Z+
    791c:	00 20       	and	r0, r0
    791e:	e9 f7       	brne	.-6      	; 0x791a <handleSerialCommand+0x6e8>
    7920:	31 97       	sbiw	r30, 0x01	; 1
    7922:	6f 01       	movw	r12, r30
    7924:	c8 1a       	sub	r12, r24
    7926:	d9 0a       	sbc	r13, r25

	if(strcmp(colors,"hsv")==0){
    7928:	65 ec       	ldi	r22, 0xC5	; 197
    792a:	72 e2       	ldi	r23, 0x22	; 34
    792c:	0e 94 83 4f 	call	0x9f06	; 0x9f06 <strcmp>
    7930:	89 2b       	or	r24, r25
    7932:	09 f4       	brne	.+2      	; 0x7936 <handleSerialCommand+0x704>
    7934:	84 c0       	rjmp	.+264    	; 0x7a3e <handleSerialCommand+0x80c>
		sVal = atoi(token);
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		setHSV(hVal,sVal,vVal);
	}else{
		for(int i=0 ; i < length ; i++){
    7936:	1c 14       	cp	r1, r12
    7938:	1d 04       	cpc	r1, r13
    793a:	0c f0       	brlt	.+2      	; 0x793e <handleSerialCommand+0x70c>
    793c:	96 cc       	rjmp	.-1748   	; 0x726a <handleSerialCommand+0x38>
    793e:	ce 0c       	add	r12, r14
    7940:	df 1c       	adc	r13, r15
    7942:	10 c0       	rjmp	.+32     	; 0x7964 <handleSerialCommand+0x732>
			token = strtok(NULL,delim);
			if(colors[i]=='r'){
				setRedLED(atoi(token));
			}else if(colors[i]=='g'){
    7944:	27 36       	cpi	r18, 0x67	; 103
    7946:	01 f1       	breq	.+64     	; 0x7988 <handleSerialCommand+0x756>
				setGreenLED(atoi(token));
			}else if(colors[i]=='b'){
    7948:	22 36       	cpi	r18, 0x62	; 98
    794a:	09 f0       	breq	.+2      	; 0x794e <handleSerialCommand+0x71c>
    794c:	8e cc       	rjmp	.-1764   	; 0x726a <handleSerialCommand+0x38>
				setBlueLED(atoi(token));
    794e:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
inline void setBlueLED(uint8_t saturation) { TCD1.CCABUF = saturation;	}
    7952:	99 27       	eor	r25, r25
    7954:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <__TEXT_REGION_LENGTH__+0x700978>
    7958:	90 93 79 09 	sts	0x0979, r25	; 0x800979 <__TEXT_REGION_LENGTH__+0x700979>
		sVal = atoi(token);
		token = strtok(NULL,delim);	
		vVal = atoi(token);
		setHSV(hVal,sVal,vVal);
	}else{
		for(int i=0 ; i < length ; i++){
    795c:	ec 14       	cp	r14, r12
    795e:	fd 04       	cpc	r15, r13
    7960:	09 f4       	brne	.+2      	; 0x7964 <handleSerialCommand+0x732>
    7962:	83 cc       	rjmp	.-1786   	; 0x726a <handleSerialCommand+0x38>
			token = strtok(NULL,delim);
    7964:	b8 01       	movw	r22, r16
    7966:	80 e0       	ldi	r24, 0x00	; 0
    7968:	90 e0       	ldi	r25, 0x00	; 0
    796a:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
			if(colors[i]=='r'){
    796e:	f7 01       	movw	r30, r14
    7970:	21 91       	ld	r18, Z+
    7972:	7f 01       	movw	r14, r30
    7974:	22 37       	cpi	r18, 0x72	; 114
    7976:	31 f7       	brne	.-52     	; 0x7944 <handleSerialCommand+0x712>
				setRedLED(atoi(token));
    7978:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>

void rgbLEDinit(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t getRedLED(void){ return TCE1.CCBBUF; }
inline void setRedLED(uint8_t saturation) { TCE1.CCBBUF = saturation; }
    797c:	99 27       	eor	r25, r25
    797e:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <__TEXT_REGION_LENGTH__+0x700a7a>
    7982:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <__TEXT_REGION_LENGTH__+0x700a7b>
    7986:	ea cf       	rjmp	.-44     	; 0x795c <handleSerialCommand+0x72a>
			}else if(colors[i]=='g'){
				setGreenLED(atoi(token));
    7988:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>

// Get and set intensity for green LED
inline uint8_t getGreenLED(void){ return TCE1.CCABUF; }
inline void setGreenLED(uint8_t saturation) { TCE1.CCABUF = saturation; }
    798c:	99 27       	eor	r25, r25
    798e:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <__TEXT_REGION_LENGTH__+0x700a78>
    7992:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <__TEXT_REGION_LENGTH__+0x700a79>
    7996:	e2 cf       	rjmp	.-60     	; 0x795c <handleSerialCommand+0x72a>
/*
 * No arguments.
 * prints this Droplet's ID.
 */
static void handle_get_id(void){
	printf_P(PSTR("My ID is: %04X\r\n"),getDropletID());
    7998:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <droplet_ID+0x1>
    799c:	8f 93       	push	r24
    799e:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <droplet_ID>
    79a2:	8f 93       	push	r24
    79a4:	8b eb       	ldi	r24, 0xBB	; 187
    79a6:	9c e0       	ldi	r25, 0x0C	; 12
    79a8:	9f 93       	push	r25
    79aa:	8f 93       	push	r24
    79ac:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    79b0:	0f 90       	pop	r0
    79b2:	0f 90       	pop	r0
    79b4:	0f 90       	pop	r0
    79b6:	0f 90       	pop	r0
    79b8:	58 cc       	rjmp	.-1872   	; 0x726a <handleSerialCommand+0x38>
/*
 * No arguments.
 * Broadcasts the four-character readable form of this Droplet's ID.
 */
static void handle_broadcast_id(void){
	scheduleTask(5, sendID, NULL);
    79ba:	20 e0       	ldi	r18, 0x00	; 0
    79bc:	30 e0       	ldi	r19, 0x00	; 0
    79be:	4c ee       	ldi	r20, 0xEC	; 236
    79c0:	58 e3       	ldi	r21, 0x38	; 56
    79c2:	65 e0       	ldi	r22, 0x05	; 5
    79c4:	70 e0       	ldi	r23, 0x00	; 0
    79c6:	80 e0       	ldi	r24, 0x00	; 0
    79c8:	90 e0       	ldi	r25, 0x00	; 0
    79ca:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <scheduleTask>
    79ce:	4d cc       	rjmp	.-1894   	; 0x726a <handleSerialCommand+0x38>
 * Example:
 *     cmd reset
 *     All receiving Droplets will act as if they had 'reset' typed to them over the terminal, and reset.
 */
static void handle_cmd(char* command_args){
	printf_P(PSTR("Broadcasting command: \"%s\", of length %i.\r\n"), (uint8_t*)command_args, strlen(command_args));
    79d0:	8e 01       	movw	r16, r28
    79d2:	0f 5f       	subi	r16, 0xFF	; 255
    79d4:	1f 4f       	sbci	r17, 0xFF	; 255
    79d6:	f8 01       	movw	r30, r16
    79d8:	01 90       	ld	r0, Z+
    79da:	00 20       	and	r0, r0
    79dc:	e9 f7       	brne	.-6      	; 0x79d8 <handleSerialCommand+0x7a6>
    79de:	31 97       	sbiw	r30, 0x01	; 1
    79e0:	e0 1b       	sub	r30, r16
    79e2:	f1 0b       	sbc	r31, r17
    79e4:	ff 93       	push	r31
    79e6:	ef 93       	push	r30
    79e8:	1f 93       	push	r17
    79ea:	0f 93       	push	r16
    79ec:	8f e8       	ldi	r24, 0x8F	; 143
    79ee:	9c e0       	ldi	r25, 0x0C	; 12
    79f0:	9f 93       	push	r25
    79f2:	8f 93       	push	r24
    79f4:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
	irCmd(ALL_DIRS, command_args,strlen(command_args));
    79f8:	f8 01       	movw	r30, r16
    79fa:	01 90       	ld	r0, Z+
    79fc:	00 20       	and	r0, r0
    79fe:	e9 f7       	brne	.-6      	; 0x79fa <handleSerialCommand+0x7c8>
    7a00:	31 97       	sbiw	r30, 0x01	; 1
    7a02:	af 01       	movw	r20, r30
    7a04:	40 1b       	sub	r20, r16
    7a06:	51 0b       	sbc	r21, r17
    7a08:	b8 01       	movw	r22, r16
    7a0a:	8f e3       	ldi	r24, 0x3F	; 63
    7a0c:	0e 94 11 14 	call	0x2822	; 0x2822 <irCmd>
    7a10:	0f 90       	pop	r0
    7a12:	0f 90       	pop	r0
    7a14:	0f 90       	pop	r0
    7a16:	0f 90       	pop	r0
    7a18:	0f 90       	pop	r0
    7a1a:	0f 90       	pop	r0
    7a1c:	26 cc       	rjmp	.-1972   	; 0x726a <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
	if(motorAdjusts[direction][1]>=0)
	motorAdjusts[direction][1]+= atoi(token);
	else
	motorAdjusts[direction][1]-= atoi(token);
    7a1e:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    7a22:	a8 1a       	sub	r10, r24
    7a24:	b9 0a       	sbc	r11, r25
    7a26:	f1 01       	movw	r30, r2
    7a28:	a2 82       	std	Z+2, r10	; 0x02
    7a2a:	b3 82       	std	Z+3, r11	; 0x03
    7a2c:	29 cf       	rjmp	.-430    	; 0x7880 <handleSerialCommand+0x64e>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
	if(motorAdjusts[direction][0]>=0)
		motorAdjusts[direction][0]+= atoi(token);
	else
		motorAdjusts[direction][0]-= atoi(token);
    7a2e:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    7a32:	a8 1a       	sub	r10, r24
    7a34:	b9 0a       	sbc	r11, r25
    7a36:	f1 01       	movw	r30, r2
    7a38:	a0 82       	st	Z, r10
    7a3a:	b1 82       	std	Z+1, r11	; 0x01
    7a3c:	04 cf       	rjmp	.-504    	; 0x7846 <handleSerialCommand+0x614>
	int length = strlen(colors);

	if(strcmp(colors,"hsv")==0){
		uint16_t hVal;
		uint8_t sVal, vVal;
		token = strtok(NULL,delim);
    7a3e:	b8 01       	movw	r22, r16
    7a40:	80 e0       	ldi	r24, 0x00	; 0
    7a42:	90 e0       	ldi	r25, 0x00	; 0
    7a44:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
		hVal = atoi(token);
    7a48:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    7a4c:	7c 01       	movw	r14, r24
		token = strtok(NULL,delim);
    7a4e:	b8 01       	movw	r22, r16
    7a50:	80 e0       	ldi	r24, 0x00	; 0
    7a52:	90 e0       	ldi	r25, 0x00	; 0
    7a54:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
		sVal = atoi(token);
    7a58:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    7a5c:	d8 2e       	mov	r13, r24
		token = strtok(NULL,delim);	
    7a5e:	b8 01       	movw	r22, r16
    7a60:	80 e0       	ldi	r24, 0x00	; 0
    7a62:	90 e0       	ldi	r25, 0x00	; 0
    7a64:	0e 94 76 4f 	call	0x9eec	; 0x9eec <strtok>
		vVal = atoi(token);
    7a68:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
		setHSV(hVal,sVal,vVal);
    7a6c:	48 2f       	mov	r20, r24
    7a6e:	6d 2d       	mov	r22, r13
    7a70:	c7 01       	movw	r24, r14
    7a72:	0e 94 2e 31 	call	0x625c	; 0x625c <setHSV>
    7a76:	f9 cb       	rjmp	.-2062   	; 0x726a <handleSerialCommand+0x38>
 *     tgt_cmd af6a reset
 *     The Droplet with ID 0xAF6A will act as if it had 'reset' typed to it over the terminal, and reset. Other
 *     Droplets will do nothing.)
 */
static void handle_targeted_cmd(char* command_args){
	uint8_t loc = strcspn(command_args, " ");
    7a78:	64 ef       	ldi	r22, 0xF4	; 244
    7a7a:	70 e2       	ldi	r23, 0x20	; 32
    7a7c:	ce 01       	movw	r24, r28
    7a7e:	01 96       	adiw	r24, 0x01	; 1
    7a80:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <strcspn>
    7a84:	8c 01       	movw	r16, r24
    7a86:	11 27       	eor	r17, r17
	char targetString[5];
	char cmdString[32];
	
	strncpy(targetString, command_args, loc);
    7a88:	a8 01       	movw	r20, r16
    7a8a:	be 01       	movw	r22, r28
    7a8c:	6f 5f       	subi	r22, 0xFF	; 255
    7a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a90:	ce 01       	movw	r24, r28
    7a92:	8f 55       	subi	r24, 0x5F	; 95
    7a94:	9f 4f       	sbci	r25, 0xFF	; 255
    7a96:	0e 94 a2 4f 	call	0x9f44	; 0x9f44 <strncpy>
	strcpy(cmdString, command_args+loc+1);
    7a9a:	b8 01       	movw	r22, r16
    7a9c:	6f 5f       	subi	r22, 0xFF	; 255
    7a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    7aa0:	21 e0       	ldi	r18, 0x01	; 1
    7aa2:	30 e0       	ldi	r19, 0x00	; 0
    7aa4:	2c 0f       	add	r18, r28
    7aa6:	3d 1f       	adc	r19, r29
    7aa8:	62 0f       	add	r22, r18
    7aaa:	73 1f       	adc	r23, r19
    7aac:	8e 01       	movw	r16, r28
    7aae:	0f 57       	subi	r16, 0x7F	; 127
    7ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    7ab2:	c8 01       	movw	r24, r16
    7ab4:	0e 94 8c 4f 	call	0x9f18	; 0x9f18 <strcpy>
	
	uint16_t target = strtoul(targetString, NULL, 16);
    7ab8:	40 e1       	ldi	r20, 0x10	; 16
    7aba:	50 e0       	ldi	r21, 0x00	; 0
    7abc:	60 e0       	ldi	r22, 0x00	; 0
    7abe:	70 e0       	ldi	r23, 0x00	; 0
    7ac0:	ce 01       	movw	r24, r28
    7ac2:	8f 55       	subi	r24, 0x5F	; 95
    7ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ac6:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <strtoul>
    7aca:	7b 01       	movw	r14, r22
	printf_P(PSTR("Broadcasting command to %04X: \"%s\", of length %i.\r\n"), target, (uint8_t*)cmdString, strlen(cmdString));
    7acc:	f8 01       	movw	r30, r16
    7ace:	01 90       	ld	r0, Z+
    7ad0:	00 20       	and	r0, r0
    7ad2:	e9 f7       	brne	.-6      	; 0x7ace <handleSerialCommand+0x89c>
    7ad4:	31 97       	sbiw	r30, 0x01	; 1
    7ad6:	e0 1b       	sub	r30, r16
    7ad8:	f1 0b       	sbc	r31, r17
    7ada:	ff 93       	push	r31
    7adc:	ef 93       	push	r30
    7ade:	1f 93       	push	r17
    7ae0:	0f 93       	push	r16
    7ae2:	ff 92       	push	r15
    7ae4:	6f 93       	push	r22
    7ae6:	8b e5       	ldi	r24, 0x5B	; 91
    7ae8:	9c e0       	ldi	r25, 0x0C	; 12
    7aea:	9f 93       	push	r25
    7aec:	8f 93       	push	r24
    7aee:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
	irTargetedCmd(ALL_DIRS, cmdString,strlen(cmdString), target);
    7af2:	f8 01       	movw	r30, r16
    7af4:	01 90       	ld	r0, Z+
    7af6:	00 20       	and	r0, r0
    7af8:	e9 f7       	brne	.-6      	; 0x7af4 <handleSerialCommand+0x8c2>
    7afa:	31 97       	sbiw	r30, 0x01	; 1
    7afc:	af 01       	movw	r20, r30
    7afe:	40 1b       	sub	r20, r16
    7b00:	51 0b       	sbc	r21, r17
    7b02:	97 01       	movw	r18, r14
    7b04:	b8 01       	movw	r22, r16
    7b06:	8f e3       	ldi	r24, 0x3F	; 63
    7b08:	0e 94 0b 14 	call	0x2816	; 0x2816 <irTargetedCmd>
    7b0c:	cd bf       	out	0x3d, r28	; 61
    7b0e:	de bf       	out	0x3e, r29	; 62
    7b10:	ac cb       	rjmp	.-2216   	; 0x726a <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
	motorAdjusts[direction][0] = atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7b12:	86 e2       	ldi	r24, 0x26	; 38
    7b14:	9e e0       	ldi	r25, 0x0E	; 14
    7b16:	9f 93       	push	r25
    7b18:	8f 93       	push	r24
    7b1a:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    7b1e:	0f 90       	pop	r0
    7b20:	0f 90       	pop	r0
    7b22:	a3 cb       	rjmp	.-2234   	; 0x726a <handleSerialCommand+0x38>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}	
    7b24:	8c e4       	ldi	r24, 0x4C	; 76
    7b26:	9e e0       	ldi	r25, 0x0E	; 14
    7b28:	9f 93       	push	r25
    7b2a:	8f 93       	push	r24
    7b2c:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    7b30:	0f 90       	pop	r0
    7b32:	0f 90       	pop	r0
    7b34:	9a cb       	rjmp	.-2252   	; 0x726a <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
	if(motorAdjusts[direction][2]>=0)
	motorAdjusts[direction][2]+= atoi(token);
	else
	motorAdjusts[direction][2]-= atoi(token);
    7b36:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
    7b3a:	98 01       	movw	r18, r16
    7b3c:	28 1b       	sub	r18, r24
    7b3e:	39 0b       	sbc	r19, r25
    7b40:	c9 01       	movw	r24, r18
    7b42:	f5 01       	movw	r30, r10
    7b44:	24 83       	std	Z+4, r18	; 0x04
    7b46:	35 83       	std	Z+5, r19	; 0x05
    7b48:	b8 ce       	rjmp	.-656    	; 0x78ba <handleSerialCommand+0x688>
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    7b4a:	8c e8       	ldi	r24, 0x8C	; 140
    7b4c:	9e e0       	ldi	r25, 0x0E	; 14
    7b4e:	9f 93       	push	r25
    7b50:	8f 93       	push	r24
    7b52:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    7b56:	0f 90       	pop	r0
    7b58:	0f 90       	pop	r0
    7b5a:	87 cb       	rjmp	.-2290   	; 0x726a <handleSerialCommand+0x38>
	uint8_t r = getRedLED(), g = getGreenLED(), b = getBlueLED();
	setRGB(0,0,255);
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
    7b5c:	8f e9       	ldi	r24, 0x9F	; 159
    7b5e:	9d e0       	ldi	r25, 0x0D	; 13
    7b60:	9f 93       	push	r25
    7b62:	8f 93       	push	r24
    7b64:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    7b68:	0f 90       	pop	r0
    7b6a:	0f 90       	pop	r0
    7b6c:	7e cb       	rjmp	.-2308   	; 0x726a <handleSerialCommand+0x38>
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
	motorAdjusts[direction][1] = atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    7b6e:	81 e0       	ldi	r24, 0x01	; 1
    7b70:	9e e0       	ldi	r25, 0x0E	; 14
    7b72:	9f 93       	push	r25
    7b74:	8f 93       	push	r24
    7b76:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    7b7a:	0f 90       	pop	r0
    7b7c:	0f 90       	pop	r0
    7b7e:	75 cb       	rjmp	.-2326   	; 0x726a <handleSerialCommand+0x38>
		motorAdjusts[direction][0]+= atoi(token);
	else
		motorAdjusts[direction][0]-= atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on second val.\r\n")); return;}
    7b80:	89 e3       	ldi	r24, 0x39	; 57
    7b82:	9d e0       	ldi	r25, 0x0D	; 13
    7b84:	9f 93       	push	r25
    7b86:	8f 93       	push	r24
    7b88:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    7b8c:	0f 90       	pop	r0
    7b8e:	0f 90       	pop	r0
    7b90:	6c cb       	rjmp	.-2344   	; 0x726a <handleSerialCommand+0x38>
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on direction.\r\n")); return;}
	uint8_t direction = atoi(token);
	if(direction> 7){ printf_P(PSTR("Bad direction. Got: %hu.\r\n"), direction); return;}

	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on first val.\r\n")); return;}
    7b92:	8f e5       	ldi	r24, 0x5F	; 95
    7b94:	9d e0       	ldi	r25, 0x0D	; 13
    7b96:	9f 93       	push	r25
    7b98:	8f 93       	push	r24
    7b9a:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    7b9e:	0f 90       	pop	r0
    7ba0:	0f 90       	pop	r0
    7ba2:	63 cb       	rjmp	.-2362   	; 0x726a <handleSerialCommand+0x38>
	motorAdjusts[direction][1]+= atoi(token);
	else
	motorAdjusts[direction][1]-= atoi(token);
	
	token = strtok(NULL,delim);
	if(token==NULL){ printf_P(PSTR("strtok returned NULL on third val.\r\n")); return;}
    7ba4:	84 e1       	ldi	r24, 0x14	; 20
    7ba6:	9d e0       	ldi	r25, 0x0D	; 13
    7ba8:	9f 93       	push	r25
    7baa:	8f 93       	push	r24
    7bac:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    7bb0:	0f 90       	pop	r0
    7bb2:	0f 90       	pop	r0
    7bb4:	5a cb       	rjmp	.-2380   	; 0x726a <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
    7bb6:	67 e1       	ldi	r22, 0x17	; 23
    7bb8:	7f e0       	ldi	r23, 0x0F	; 15
    7bba:	c8 01       	movw	r24, r16
    7bbc:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    7bc0:	89 2b       	or	r24, r25
    7bc2:	09 f4       	brne	.+2      	; 0x7bc6 <handleSerialCommand+0x994>
    7bc4:	cc c0       	rjmp	.+408    	; 0x7d5e <handleSerialCommand+0xb2c>
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
    7bc6:	62 e0       	ldi	r22, 0x02	; 2
    7bc8:	7f e0       	ldi	r23, 0x0F	; 15
    7bca:	c8 01       	movw	r24, r16
    7bcc:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    7bd0:	89 2b       	or	r24, r25
    7bd2:	09 f4       	brne	.+2      	; 0x7bd6 <handleSerialCommand+0x9a4>
    7bd4:	bf c0       	rjmp	.+382    	; 0x7d54 <handleSerialCommand+0xb22>
																		printMotorValues();
																		printDistPerStep();																	
		}else if(strcmp_P(command_word,PSTR("reprog_begin"))==0){
    7bd6:	65 ef       	ldi	r22, 0xF5	; 245
    7bd8:	7e e0       	ldi	r23, 0x0E	; 14
    7bda:	c8 01       	movw	r24, r16
    7bdc:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    7be0:	89 2b       	or	r24, r25
    7be2:	09 f0       	breq	.+2      	; 0x7be6 <handleSerialCommand+0x9b4>
    7be4:	6f c0       	rjmp	.+222    	; 0x7cc4 <handleSerialCommand+0xa92>
		//handle_reprogramming();
			reprogramming=1;
    7be6:	81 e0       	ldi	r24, 0x01	; 1
    7be8:	80 93 7a 24 	sts	0x247A, r24	; 0x80247a <reprogramming>
    7bec:	3e cb       	rjmp	.-2436   	; 0x726a <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("cmd"))==0)					handle_cmd(command_args);
		else if(strcmp_P(command_word,PSTR("tgt_cmd"))==0)				handle_targeted_cmd(command_args);
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
    7bee:	0e 94 26 34 	call	0x684c	; 0x684c <printTaskQueue>
    7bf2:	3b cb       	rjmp	.-2442   	; 0x726a <handleSerialCommand+0x38>
 *     msg_tst <dir_mask>
 *     <dir_mask>: A direction mask indicating which direction(s) to send the message in.
 * Sends a simple test message in the indicated directions.
 */
static void handle_msg_test(char* command_args){
	uint8_t dir_mask = atoi(command_args);
    7bf4:	ce 01       	movw	r24, r28
    7bf6:	01 96       	adiw	r24, 0x01	; 1
    7bf8:	0e 94 50 4e 	call	0x9ca0	; 0x9ca0 <atoi>
	char msg[16] = "Unique New York.";
    7bfc:	90 e1       	ldi	r25, 0x10	; 16
    7bfe:	eb ea       	ldi	r30, 0xAB	; 171
    7c00:	f2 e2       	ldi	r31, 0x22	; 34
    7c02:	de 01       	movw	r26, r28
    7c04:	af 57       	subi	r26, 0x7F	; 127
    7c06:	bf 4f       	sbci	r27, 0xFF	; 255
    7c08:	01 90       	ld	r0, Z+
    7c0a:	0d 92       	st	X+, r0
    7c0c:	9a 95       	dec	r25
    7c0e:	e1 f7       	brne	.-8      	; 0x7c08 <handleSerialCommand+0x9d6>
	
	irSend(dir_mask, msg,16);
    7c10:	40 e1       	ldi	r20, 0x10	; 16
    7c12:	be 01       	movw	r22, r28
    7c14:	6f 57       	subi	r22, 0x7F	; 127
    7c16:	7f 4f       	sbci	r23, 0xFF	; 255
    7c18:	0e 94 1f 14 	call	0x283e	; 0x283e <irSend>
    7c1c:	26 cb       	rjmp	.-2484   	; 0x726a <handleSerialCommand+0x38>
 *
 * <MSG> will be treated as a string and broadcast over IR.
 * If <MSG> is not present, a simple test string will be broadcast instead.
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
    7c1e:	89 81       	ldd	r24, Y+1	; 0x01
    7c20:	88 23       	and	r24, r24
    7c22:	09 f4       	brne	.+2      	; 0x7c26 <handleSerialCommand+0x9f4>
    7c24:	b1 c0       	rjmp	.+354    	; 0x7d88 <handleSerialCommand+0xb56>
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
    7c26:	fe 01       	movw	r30, r28
    7c28:	31 96       	adiw	r30, 0x01	; 1
    7c2a:	df 01       	movw	r26, r30
    7c2c:	0d 90       	ld	r0, X+
    7c2e:	00 20       	and	r0, r0
    7c30:	e9 f7       	brne	.-6      	; 0x7c2c <handleSerialCommand+0x9fa>
    7c32:	11 97       	sbiw	r26, 0x01	; 1
    7c34:	cd 01       	movw	r24, r26
    7c36:	8e 1b       	sub	r24, r30
    7c38:	9f 0b       	sbc	r25, r31
    7c3a:	89 32       	cpi	r24, 0x29	; 41
    7c3c:	91 05       	cpc	r25, r1
    7c3e:	08 f0       	brcs	.+2      	; 0x7c42 <handleSerialCommand+0xa10>
    7c40:	91 c0       	rjmp	.+290    	; 0x7d64 <handleSerialCommand+0xb32>
    7c42:	bf 01       	movw	r22, r30
		printf_P(PSTR("Message length was %z chars, which exceeds the maximum of %u"), strlen(command_args), IR_BUFFER_SIZE);
		return;
	}
	irSend(ALL_DIRS, command_args,strlen(command_args));
    7c44:	fb 01       	movw	r30, r22
    7c46:	01 90       	ld	r0, Z+
    7c48:	00 20       	and	r0, r0
    7c4a:	e9 f7       	brne	.-6      	; 0x7c46 <handleSerialCommand+0xa14>
    7c4c:	31 97       	sbiw	r30, 0x01	; 1
    7c4e:	af 01       	movw	r20, r30
    7c50:	46 1b       	sub	r20, r22
    7c52:	57 0b       	sbc	r21, r23
    7c54:	8f e3       	ldi	r24, 0x3F	; 63
    7c56:	0e 94 1f 14 	call	0x283e	; 0x283e <irSend>
    7c5a:	07 cb       	rjmp	.-2546   	; 0x726a <handleSerialCommand+0x38>
 * Behaves the same as the 'msg' command, described above, except the message is broadcast
 * to a specific Droplet with <ID>, and will be ignored by other Droplets. Also, this function
 * does not have a default message.
 */
static void handle_target(char* command_args){
	uint8_t loc = strcspn(command_args, " ");
    7c5c:	64 ef       	ldi	r22, 0xF4	; 244
    7c5e:	70 e2       	ldi	r23, 0x20	; 32
    7c60:	ce 01       	movw	r24, r28
    7c62:	01 96       	adiw	r24, 0x01	; 1
    7c64:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <strcspn>
    7c68:	8c 01       	movw	r16, r24
    7c6a:	11 27       	eor	r17, r17
	char targetString[5];
	char msgString[32];
	
	strncpy(targetString, command_args, loc);
    7c6c:	a8 01       	movw	r20, r16
    7c6e:	be 01       	movw	r22, r28
    7c70:	6f 5f       	subi	r22, 0xFF	; 255
    7c72:	7f 4f       	sbci	r23, 0xFF	; 255
    7c74:	ce 01       	movw	r24, r28
    7c76:	8f 55       	subi	r24, 0x5F	; 95
    7c78:	9f 4f       	sbci	r25, 0xFF	; 255
    7c7a:	0e 94 a2 4f 	call	0x9f44	; 0x9f44 <strncpy>
	strcpy(msgString, command_args+loc);
    7c7e:	61 e0       	ldi	r22, 0x01	; 1
    7c80:	70 e0       	ldi	r23, 0x00	; 0
    7c82:	6c 0f       	add	r22, r28
    7c84:	7d 1f       	adc	r23, r29
    7c86:	60 0f       	add	r22, r16
    7c88:	71 1f       	adc	r23, r17
    7c8a:	8e 01       	movw	r16, r28
    7c8c:	0f 57       	subi	r16, 0x7F	; 127
    7c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    7c90:	c8 01       	movw	r24, r16
    7c92:	0e 94 8c 4f 	call	0x9f18	; 0x9f18 <strcpy>
	
	
	uint16_t target = strtoul(targetString, NULL, 16);
    7c96:	40 e1       	ldi	r20, 0x10	; 16
    7c98:	50 e0       	ldi	r21, 0x00	; 0
    7c9a:	60 e0       	ldi	r22, 0x00	; 0
    7c9c:	70 e0       	ldi	r23, 0x00	; 0
    7c9e:	ce 01       	movw	r24, r28
    7ca0:	8f 55       	subi	r24, 0x5F	; 95
    7ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ca4:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <strtoul>
	
	//printf("Target: %04X\r\n",target);
	irTargetedSend(ALL_DIRS, msgString,strlen(msgString), target);
    7ca8:	f8 01       	movw	r30, r16
    7caa:	01 90       	ld	r0, Z+
    7cac:	00 20       	and	r0, r0
    7cae:	e9 f7       	brne	.-6      	; 0x7caa <handleSerialCommand+0xa78>
    7cb0:	31 97       	sbiw	r30, 0x01	; 1
    7cb2:	af 01       	movw	r20, r30
    7cb4:	40 1b       	sub	r20, r16
    7cb6:	51 0b       	sbc	r21, r17
    7cb8:	9b 01       	movw	r18, r22
    7cba:	b8 01       	movw	r22, r16
    7cbc:	8f e3       	ldi	r24, 0x3F	; 63
    7cbe:	0e 94 19 14 	call	0x2832	; 0x2832 <irTargetedSend>
    7cc2:	d3 ca       	rjmp	.-2650   	; 0x726a <handleSerialCommand+0x38>
																		printMotorValues();
																		printDistPerStep();																	
		}else if(strcmp_P(command_word,PSTR("reprog_begin"))==0){
		//handle_reprogramming();
			reprogramming=1;
		}else if(strcmp_P(command_word,PSTR("r_start"))==0){
    7cc4:	6d ee       	ldi	r22, 0xED	; 237
    7cc6:	7e e0       	ldi	r23, 0x0E	; 14
    7cc8:	c8 01       	movw	r24, r16
    7cca:	0e 94 62 4f 	call	0x9ec4	; 0x9ec4 <strcmp_P>
    7cce:	89 2b       	or	r24, r25
    7cd0:	09 f4       	brne	.+2      	; 0x7cd4 <handleSerialCommand+0xaa2>
    7cd2:	cb ca       	rjmp	.-2666   	; 0x726a <handleSerialCommand+0x38>
			//handle_reprogramming();
		}else if(command_word[0] == 'M' && command_word[1] == 0){
    7cd4:	f8 01       	movw	r30, r16
    7cd6:	80 81       	ld	r24, Z
    7cd8:	8d 34       	cpi	r24, 0x4D	; 77
    7cda:	c9 f0       	breq	.+50     	; 0x7d0e <handleSerialCommand+0xadc>
			irCmd(ALL_DIRS, "reprog_begin", 12);
			//delayMS(3000);
			scheduleTask(100, send_hex, NULL );
			printf("Done");
			
		}else if(userHandleCommand){ //First, make sure the function is defined
    7cdc:	80 e0       	ldi	r24, 0x00	; 0
    7cde:	90 e0       	ldi	r25, 0x00	; 0
    7ce0:	89 2b       	or	r24, r25
    7ce2:	41 f0       	breq	.+16     	; 0x7cf4 <handleSerialCommand+0xac2>
			if(!userHandleCommand(command_word, command_args))	printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
    7ce4:	be 01       	movw	r22, r28
    7ce6:	6f 5f       	subi	r22, 0xFF	; 255
    7ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    7cea:	c8 01       	movw	r24, r16
    7cec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    7cf0:	81 11       	cpse	r24, r1
    7cf2:	bb ca       	rjmp	.-2698   	; 0x726a <handleSerialCommand+0x38>
    7cf4:	1f 93       	push	r17
    7cf6:	0f 93       	push	r16
    7cf8:	8c ec       	ldi	r24, 0xCC	; 204
    7cfa:	9f e0       	ldi	r25, 0x0F	; 15
    7cfc:	9f 93       	push	r25
    7cfe:	8f 93       	push	r24
    7d00:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    7d04:	0f 90       	pop	r0
    7d06:	0f 90       	pop	r0
    7d08:	0f 90       	pop	r0
    7d0a:	0f 90       	pop	r0
		}
		else														printf_P(CMD_NOT_RECOGNIZED_STR,command_word);
	}
}
    7d0c:	ae ca       	rjmp	.-2724   	; 0x726a <handleSerialCommand+0x38>
		}else if(strcmp_P(command_word,PSTR("reprog_begin"))==0){
		//handle_reprogramming();
			reprogramming=1;
		}else if(strcmp_P(command_word,PSTR("r_start"))==0){
			//handle_reprogramming();
		}else if(command_word[0] == 'M' && command_word[1] == 0){
    7d0e:	81 81       	ldd	r24, Z+1	; 0x01
    7d10:	81 11       	cpse	r24, r1
    7d12:	e4 cf       	rjmp	.-56     	; 0x7cdc <handleSerialCommand+0xaaa>
			strcpy(dataHEX, command_args);
    7d14:	be 01       	movw	r22, r28
    7d16:	6f 5f       	subi	r22, 0xFF	; 255
    7d18:	7f 4f       	sbci	r23, 0xFF	; 255
    7d1a:	84 eb       	ldi	r24, 0xB4	; 180
    7d1c:	94 e2       	ldi	r25, 0x24	; 36
    7d1e:	0e 94 8c 4f 	call	0x9f18	; 0x9f18 <strcpy>
			irCmd(ALL_DIRS, "reprog_begin", 12);
    7d22:	4c e0       	ldi	r20, 0x0C	; 12
    7d24:	69 ec       	ldi	r22, 0xC9	; 201
    7d26:	72 e2       	ldi	r23, 0x22	; 34
    7d28:	8f e3       	ldi	r24, 0x3F	; 63
    7d2a:	0e 94 11 14 	call	0x2822	; 0x2822 <irCmd>
			//delayMS(3000);
			scheduleTask(100, send_hex, NULL );
    7d2e:	20 e0       	ldi	r18, 0x00	; 0
    7d30:	30 e0       	ldi	r19, 0x00	; 0
    7d32:	43 ee       	ldi	r20, 0xE3	; 227
    7d34:	59 e0       	ldi	r21, 0x09	; 9
    7d36:	64 e6       	ldi	r22, 0x64	; 100
    7d38:	70 e0       	ldi	r23, 0x00	; 0
    7d3a:	80 e0       	ldi	r24, 0x00	; 0
    7d3c:	90 e0       	ldi	r25, 0x00	; 0
    7d3e:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <scheduleTask>
			printf("Done");
    7d42:	86 ed       	ldi	r24, 0xD6	; 214
    7d44:	92 e2       	ldi	r25, 0x22	; 34
    7d46:	9f 93       	push	r25
    7d48:	8f 93       	push	r24
    7d4a:	0e 94 65 50 	call	0xa0ca	; 0xa0ca <printf>
    7d4e:	0f 90       	pop	r0
    7d50:	0f 90       	pop	r0
    7d52:	8b ca       	rjmp	.-2794   	; 0x726a <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
		else if(strcmp_P(command_word,PSTR("print_motor_settings"))==0){
																		printMotorValues();
    7d54:	0e 94 da 21 	call	0x43b4	; 0x43b4 <printMotorValues>
																		printDistPerStep();																	
    7d58:	0e 94 33 22 	call	0x4466	; 0x4466 <printDistPerStep>
    7d5c:	86 ca       	rjmp	.-2804   	; 0x726a <handleSerialCommand+0x38>
		else if(strcmp_P(command_word,PSTR("msg"))==0)					handle_shout(command_args);
		else if(strcmp_P(command_word,PSTR("msg_tst"))==0)				handle_msg_test(command_args);
		else if(strcmp_P(command_word,PSTR("tgt"))==0)					handle_target(command_args);
		else if(strcmp_P(command_word,PSTR("tasks"))==0)				printTaskQueue();
		else if(strcmp_P(command_word,PSTR("reset"))==0)				handle_reset();
		else if(strcmp_P(command_word,PSTR("write_motor_settings"))==0)	writeMotorSettings();
    7d5e:	0e 94 98 21 	call	0x4330	; 0x4330 <writeMotorSettings>
    7d62:	83 ca       	rjmp	.-2810   	; 0x726a <handleSerialCommand+0x38>
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
	}else if(strlen(command_args)>IR_BUFFER_SIZE){ 
		printf_P(PSTR("Message length was %z chars, which exceeds the maximum of %u"), strlen(command_args), IR_BUFFER_SIZE);
    7d64:	1f 92       	push	r1
    7d66:	28 e2       	ldi	r18, 0x28	; 40
    7d68:	2f 93       	push	r18
    7d6a:	9f 93       	push	r25
    7d6c:	8f 93       	push	r24
    7d6e:	8e e1       	ldi	r24, 0x1E	; 30
    7d70:	9c e0       	ldi	r25, 0x0C	; 12
    7d72:	9f 93       	push	r25
    7d74:	8f 93       	push	r24
    7d76:	0e 94 79 50 	call	0xa0f2	; 0xa0f2 <printf_P>
    7d7a:	0f 90       	pop	r0
    7d7c:	0f 90       	pop	r0
    7d7e:	0f 90       	pop	r0
    7d80:	0f 90       	pop	r0
    7d82:	0f 90       	pop	r0
    7d84:	0f 90       	pop	r0
    7d86:	71 ca       	rjmp	.-2846   	; 0x726a <handleSerialCommand+0x38>
 * <MSG> will be treated as a string and broadcast over IR.
 * If <MSG> is not present, a simple test string will be broadcast instead.
 */
static void handle_shout(char* command_args){
	if(strlen(command_args)==0){
		command_args = "Unique New York.";
    7d88:	6b ea       	ldi	r22, 0xAB	; 171
    7d8a:	72 e2       	ldi	r23, 0x22	; 34
    7d8c:	5b cf       	rjmp	.-330    	; 0x7c44 <handleSerialCommand+0xa12>

00007d8e <vfprintf>:
    7d8e:	2f 92       	push	r2
    7d90:	3f 92       	push	r3
    7d92:	4f 92       	push	r4
    7d94:	5f 92       	push	r5
    7d96:	6f 92       	push	r6
    7d98:	7f 92       	push	r7
    7d9a:	8f 92       	push	r8
    7d9c:	9f 92       	push	r9
    7d9e:	af 92       	push	r10
    7da0:	bf 92       	push	r11
    7da2:	cf 92       	push	r12
    7da4:	df 92       	push	r13
    7da6:	ef 92       	push	r14
    7da8:	ff 92       	push	r15
    7daa:	0f 93       	push	r16
    7dac:	1f 93       	push	r17
    7dae:	cf 93       	push	r28
    7db0:	df 93       	push	r29
    7db2:	cd b7       	in	r28, 0x3d	; 61
    7db4:	de b7       	in	r29, 0x3e	; 62
    7db6:	60 97       	sbiw	r28, 0x10	; 16
    7db8:	cd bf       	out	0x3d, r28	; 61
    7dba:	de bf       	out	0x3e, r29	; 62
    7dbc:	7c 01       	movw	r14, r24
    7dbe:	1b 01       	movw	r2, r22
    7dc0:	6a 01       	movw	r12, r20
    7dc2:	fc 01       	movw	r30, r24
    7dc4:	16 82       	std	Z+6, r1	; 0x06
    7dc6:	17 82       	std	Z+7, r1	; 0x07
    7dc8:	83 81       	ldd	r24, Z+3	; 0x03
    7dca:	81 ff       	sbrs	r24, 1
    7dcc:	44 c3       	rjmp	.+1672   	; 0x8456 <vfprintf+0x6c8>
    7dce:	9e 01       	movw	r18, r28
    7dd0:	2f 5f       	subi	r18, 0xFF	; 255
    7dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    7dd4:	39 01       	movw	r6, r18
    7dd6:	f7 01       	movw	r30, r14
    7dd8:	93 81       	ldd	r25, Z+3	; 0x03
    7dda:	f1 01       	movw	r30, r2
    7ddc:	93 fd       	sbrc	r25, 3
    7dde:	85 91       	lpm	r24, Z+
    7de0:	93 ff       	sbrs	r25, 3
    7de2:	81 91       	ld	r24, Z+
    7de4:	1f 01       	movw	r2, r30
    7de6:	88 23       	and	r24, r24
    7de8:	09 f4       	brne	.+2      	; 0x7dec <vfprintf+0x5e>
    7dea:	31 c3       	rjmp	.+1634   	; 0x844e <vfprintf+0x6c0>
    7dec:	85 32       	cpi	r24, 0x25	; 37
    7dee:	39 f4       	brne	.+14     	; 0x7dfe <vfprintf+0x70>
    7df0:	93 fd       	sbrc	r25, 3
    7df2:	85 91       	lpm	r24, Z+
    7df4:	93 ff       	sbrs	r25, 3
    7df6:	81 91       	ld	r24, Z+
    7df8:	1f 01       	movw	r2, r30
    7dfa:	85 32       	cpi	r24, 0x25	; 37
    7dfc:	39 f4       	brne	.+14     	; 0x7e0c <vfprintf+0x7e>
    7dfe:	b7 01       	movw	r22, r14
    7e00:	90 e0       	ldi	r25, 0x00	; 0
    7e02:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    7e06:	56 01       	movw	r10, r12
    7e08:	65 01       	movw	r12, r10
    7e0a:	e5 cf       	rjmp	.-54     	; 0x7dd6 <vfprintf+0x48>
    7e0c:	10 e0       	ldi	r17, 0x00	; 0
    7e0e:	51 2c       	mov	r5, r1
    7e10:	91 2c       	mov	r9, r1
    7e12:	ff e1       	ldi	r31, 0x1F	; 31
    7e14:	f9 15       	cp	r31, r9
    7e16:	d8 f0       	brcs	.+54     	; 0x7e4e <vfprintf+0xc0>
    7e18:	8b 32       	cpi	r24, 0x2B	; 43
    7e1a:	79 f0       	breq	.+30     	; 0x7e3a <vfprintf+0xac>
    7e1c:	38 f4       	brcc	.+14     	; 0x7e2c <vfprintf+0x9e>
    7e1e:	80 32       	cpi	r24, 0x20	; 32
    7e20:	79 f0       	breq	.+30     	; 0x7e40 <vfprintf+0xb2>
    7e22:	83 32       	cpi	r24, 0x23	; 35
    7e24:	a1 f4       	brne	.+40     	; 0x7e4e <vfprintf+0xc0>
    7e26:	f9 2d       	mov	r31, r9
    7e28:	f0 61       	ori	r31, 0x10	; 16
    7e2a:	2e c0       	rjmp	.+92     	; 0x7e88 <vfprintf+0xfa>
    7e2c:	8d 32       	cpi	r24, 0x2D	; 45
    7e2e:	61 f0       	breq	.+24     	; 0x7e48 <vfprintf+0xba>
    7e30:	80 33       	cpi	r24, 0x30	; 48
    7e32:	69 f4       	brne	.+26     	; 0x7e4e <vfprintf+0xc0>
    7e34:	29 2d       	mov	r18, r9
    7e36:	21 60       	ori	r18, 0x01	; 1
    7e38:	2d c0       	rjmp	.+90     	; 0x7e94 <vfprintf+0x106>
    7e3a:	39 2d       	mov	r19, r9
    7e3c:	32 60       	ori	r19, 0x02	; 2
    7e3e:	93 2e       	mov	r9, r19
    7e40:	89 2d       	mov	r24, r9
    7e42:	84 60       	ori	r24, 0x04	; 4
    7e44:	98 2e       	mov	r9, r24
    7e46:	2a c0       	rjmp	.+84     	; 0x7e9c <vfprintf+0x10e>
    7e48:	e9 2d       	mov	r30, r9
    7e4a:	e8 60       	ori	r30, 0x08	; 8
    7e4c:	15 c0       	rjmp	.+42     	; 0x7e78 <vfprintf+0xea>
    7e4e:	97 fc       	sbrc	r9, 7
    7e50:	2d c0       	rjmp	.+90     	; 0x7eac <vfprintf+0x11e>
    7e52:	20 ed       	ldi	r18, 0xD0	; 208
    7e54:	28 0f       	add	r18, r24
    7e56:	2a 30       	cpi	r18, 0x0A	; 10
    7e58:	88 f4       	brcc	.+34     	; 0x7e7c <vfprintf+0xee>
    7e5a:	96 fe       	sbrs	r9, 6
    7e5c:	06 c0       	rjmp	.+12     	; 0x7e6a <vfprintf+0xdc>
    7e5e:	3a e0       	ldi	r19, 0x0A	; 10
    7e60:	13 9f       	mul	r17, r19
    7e62:	20 0d       	add	r18, r0
    7e64:	11 24       	eor	r1, r1
    7e66:	12 2f       	mov	r17, r18
    7e68:	19 c0       	rjmp	.+50     	; 0x7e9c <vfprintf+0x10e>
    7e6a:	8a e0       	ldi	r24, 0x0A	; 10
    7e6c:	58 9e       	mul	r5, r24
    7e6e:	20 0d       	add	r18, r0
    7e70:	11 24       	eor	r1, r1
    7e72:	52 2e       	mov	r5, r18
    7e74:	e9 2d       	mov	r30, r9
    7e76:	e0 62       	ori	r30, 0x20	; 32
    7e78:	9e 2e       	mov	r9, r30
    7e7a:	10 c0       	rjmp	.+32     	; 0x7e9c <vfprintf+0x10e>
    7e7c:	8e 32       	cpi	r24, 0x2E	; 46
    7e7e:	31 f4       	brne	.+12     	; 0x7e8c <vfprintf+0xfe>
    7e80:	96 fc       	sbrc	r9, 6
    7e82:	e5 c2       	rjmp	.+1482   	; 0x844e <vfprintf+0x6c0>
    7e84:	f9 2d       	mov	r31, r9
    7e86:	f0 64       	ori	r31, 0x40	; 64
    7e88:	9f 2e       	mov	r9, r31
    7e8a:	08 c0       	rjmp	.+16     	; 0x7e9c <vfprintf+0x10e>
    7e8c:	8c 36       	cpi	r24, 0x6C	; 108
    7e8e:	21 f4       	brne	.+8      	; 0x7e98 <vfprintf+0x10a>
    7e90:	29 2d       	mov	r18, r9
    7e92:	20 68       	ori	r18, 0x80	; 128
    7e94:	92 2e       	mov	r9, r18
    7e96:	02 c0       	rjmp	.+4      	; 0x7e9c <vfprintf+0x10e>
    7e98:	88 36       	cpi	r24, 0x68	; 104
    7e9a:	41 f4       	brne	.+16     	; 0x7eac <vfprintf+0x11e>
    7e9c:	f1 01       	movw	r30, r2
    7e9e:	93 fd       	sbrc	r25, 3
    7ea0:	85 91       	lpm	r24, Z+
    7ea2:	93 ff       	sbrs	r25, 3
    7ea4:	81 91       	ld	r24, Z+
    7ea6:	1f 01       	movw	r2, r30
    7ea8:	81 11       	cpse	r24, r1
    7eaa:	b3 cf       	rjmp	.-154    	; 0x7e12 <vfprintf+0x84>
    7eac:	9b eb       	ldi	r25, 0xBB	; 187
    7eae:	98 0f       	add	r25, r24
    7eb0:	93 30       	cpi	r25, 0x03	; 3
    7eb2:	20 f4       	brcc	.+8      	; 0x7ebc <vfprintf+0x12e>
    7eb4:	99 2d       	mov	r25, r9
    7eb6:	90 61       	ori	r25, 0x10	; 16
    7eb8:	80 5e       	subi	r24, 0xE0	; 224
    7eba:	07 c0       	rjmp	.+14     	; 0x7eca <vfprintf+0x13c>
    7ebc:	9b e9       	ldi	r25, 0x9B	; 155
    7ebe:	98 0f       	add	r25, r24
    7ec0:	93 30       	cpi	r25, 0x03	; 3
    7ec2:	08 f0       	brcs	.+2      	; 0x7ec6 <vfprintf+0x138>
    7ec4:	66 c1       	rjmp	.+716    	; 0x8192 <vfprintf+0x404>
    7ec6:	99 2d       	mov	r25, r9
    7ec8:	9f 7e       	andi	r25, 0xEF	; 239
    7eca:	96 ff       	sbrs	r25, 6
    7ecc:	16 e0       	ldi	r17, 0x06	; 6
    7ece:	9f 73       	andi	r25, 0x3F	; 63
    7ed0:	99 2e       	mov	r9, r25
    7ed2:	85 36       	cpi	r24, 0x65	; 101
    7ed4:	19 f4       	brne	.+6      	; 0x7edc <vfprintf+0x14e>
    7ed6:	90 64       	ori	r25, 0x40	; 64
    7ed8:	99 2e       	mov	r9, r25
    7eda:	08 c0       	rjmp	.+16     	; 0x7eec <vfprintf+0x15e>
    7edc:	86 36       	cpi	r24, 0x66	; 102
    7ede:	21 f4       	brne	.+8      	; 0x7ee8 <vfprintf+0x15a>
    7ee0:	39 2f       	mov	r19, r25
    7ee2:	30 68       	ori	r19, 0x80	; 128
    7ee4:	93 2e       	mov	r9, r19
    7ee6:	02 c0       	rjmp	.+4      	; 0x7eec <vfprintf+0x15e>
    7ee8:	11 11       	cpse	r17, r1
    7eea:	11 50       	subi	r17, 0x01	; 1
    7eec:	97 fe       	sbrs	r9, 7
    7eee:	07 c0       	rjmp	.+14     	; 0x7efe <vfprintf+0x170>
    7ef0:	1c 33       	cpi	r17, 0x3C	; 60
    7ef2:	50 f4       	brcc	.+20     	; 0x7f08 <vfprintf+0x17a>
    7ef4:	44 24       	eor	r4, r4
    7ef6:	43 94       	inc	r4
    7ef8:	41 0e       	add	r4, r17
    7efa:	27 e0       	ldi	r18, 0x07	; 7
    7efc:	0b c0       	rjmp	.+22     	; 0x7f14 <vfprintf+0x186>
    7efe:	18 30       	cpi	r17, 0x08	; 8
    7f00:	38 f0       	brcs	.+14     	; 0x7f10 <vfprintf+0x182>
    7f02:	27 e0       	ldi	r18, 0x07	; 7
    7f04:	17 e0       	ldi	r17, 0x07	; 7
    7f06:	05 c0       	rjmp	.+10     	; 0x7f12 <vfprintf+0x184>
    7f08:	27 e0       	ldi	r18, 0x07	; 7
    7f0a:	9c e3       	ldi	r25, 0x3C	; 60
    7f0c:	49 2e       	mov	r4, r25
    7f0e:	02 c0       	rjmp	.+4      	; 0x7f14 <vfprintf+0x186>
    7f10:	21 2f       	mov	r18, r17
    7f12:	41 2c       	mov	r4, r1
    7f14:	56 01       	movw	r10, r12
    7f16:	84 e0       	ldi	r24, 0x04	; 4
    7f18:	a8 0e       	add	r10, r24
    7f1a:	b1 1c       	adc	r11, r1
    7f1c:	f6 01       	movw	r30, r12
    7f1e:	60 81       	ld	r22, Z
    7f20:	71 81       	ldd	r23, Z+1	; 0x01
    7f22:	82 81       	ldd	r24, Z+2	; 0x02
    7f24:	93 81       	ldd	r25, Z+3	; 0x03
    7f26:	04 2d       	mov	r16, r4
    7f28:	a3 01       	movw	r20, r6
    7f2a:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <__ftoa_engine>
    7f2e:	6c 01       	movw	r12, r24
    7f30:	f9 81       	ldd	r31, Y+1	; 0x01
    7f32:	fc 87       	std	Y+12, r31	; 0x0c
    7f34:	f0 ff       	sbrs	r31, 0
    7f36:	02 c0       	rjmp	.+4      	; 0x7f3c <vfprintf+0x1ae>
    7f38:	f3 ff       	sbrs	r31, 3
    7f3a:	06 c0       	rjmp	.+12     	; 0x7f48 <vfprintf+0x1ba>
    7f3c:	91 fc       	sbrc	r9, 1
    7f3e:	06 c0       	rjmp	.+12     	; 0x7f4c <vfprintf+0x1be>
    7f40:	92 fe       	sbrs	r9, 2
    7f42:	06 c0       	rjmp	.+12     	; 0x7f50 <vfprintf+0x1c2>
    7f44:	00 e2       	ldi	r16, 0x20	; 32
    7f46:	05 c0       	rjmp	.+10     	; 0x7f52 <vfprintf+0x1c4>
    7f48:	0d e2       	ldi	r16, 0x2D	; 45
    7f4a:	03 c0       	rjmp	.+6      	; 0x7f52 <vfprintf+0x1c4>
    7f4c:	0b e2       	ldi	r16, 0x2B	; 43
    7f4e:	01 c0       	rjmp	.+2      	; 0x7f52 <vfprintf+0x1c4>
    7f50:	00 e0       	ldi	r16, 0x00	; 0
    7f52:	8c 85       	ldd	r24, Y+12	; 0x0c
    7f54:	8c 70       	andi	r24, 0x0C	; 12
    7f56:	19 f0       	breq	.+6      	; 0x7f5e <vfprintf+0x1d0>
    7f58:	01 11       	cpse	r16, r1
    7f5a:	5a c2       	rjmp	.+1204   	; 0x8410 <vfprintf+0x682>
    7f5c:	9b c2       	rjmp	.+1334   	; 0x8494 <vfprintf+0x706>
    7f5e:	97 fe       	sbrs	r9, 7
    7f60:	10 c0       	rjmp	.+32     	; 0x7f82 <vfprintf+0x1f4>
    7f62:	4c 0c       	add	r4, r12
    7f64:	fc 85       	ldd	r31, Y+12	; 0x0c
    7f66:	f4 ff       	sbrs	r31, 4
    7f68:	04 c0       	rjmp	.+8      	; 0x7f72 <vfprintf+0x1e4>
    7f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    7f6c:	81 33       	cpi	r24, 0x31	; 49
    7f6e:	09 f4       	brne	.+2      	; 0x7f72 <vfprintf+0x1e4>
    7f70:	4a 94       	dec	r4
    7f72:	14 14       	cp	r1, r4
    7f74:	74 f5       	brge	.+92     	; 0x7fd2 <vfprintf+0x244>
    7f76:	28 e0       	ldi	r18, 0x08	; 8
    7f78:	24 15       	cp	r18, r4
    7f7a:	78 f5       	brcc	.+94     	; 0x7fda <vfprintf+0x24c>
    7f7c:	88 e0       	ldi	r24, 0x08	; 8
    7f7e:	48 2e       	mov	r4, r24
    7f80:	2c c0       	rjmp	.+88     	; 0x7fda <vfprintf+0x24c>
    7f82:	96 fc       	sbrc	r9, 6
    7f84:	2a c0       	rjmp	.+84     	; 0x7fda <vfprintf+0x24c>
    7f86:	81 2f       	mov	r24, r17
    7f88:	90 e0       	ldi	r25, 0x00	; 0
    7f8a:	8c 15       	cp	r24, r12
    7f8c:	9d 05       	cpc	r25, r13
    7f8e:	9c f0       	brlt	.+38     	; 0x7fb6 <vfprintf+0x228>
    7f90:	3c ef       	ldi	r19, 0xFC	; 252
    7f92:	c3 16       	cp	r12, r19
    7f94:	3f ef       	ldi	r19, 0xFF	; 255
    7f96:	d3 06       	cpc	r13, r19
    7f98:	74 f0       	brlt	.+28     	; 0x7fb6 <vfprintf+0x228>
    7f9a:	89 2d       	mov	r24, r9
    7f9c:	80 68       	ori	r24, 0x80	; 128
    7f9e:	98 2e       	mov	r9, r24
    7fa0:	0a c0       	rjmp	.+20     	; 0x7fb6 <vfprintf+0x228>
    7fa2:	e2 e0       	ldi	r30, 0x02	; 2
    7fa4:	f0 e0       	ldi	r31, 0x00	; 0
    7fa6:	ec 0f       	add	r30, r28
    7fa8:	fd 1f       	adc	r31, r29
    7faa:	e1 0f       	add	r30, r17
    7fac:	f1 1d       	adc	r31, r1
    7fae:	80 81       	ld	r24, Z
    7fb0:	80 33       	cpi	r24, 0x30	; 48
    7fb2:	19 f4       	brne	.+6      	; 0x7fba <vfprintf+0x22c>
    7fb4:	11 50       	subi	r17, 0x01	; 1
    7fb6:	11 11       	cpse	r17, r1
    7fb8:	f4 cf       	rjmp	.-24     	; 0x7fa2 <vfprintf+0x214>
    7fba:	97 fe       	sbrs	r9, 7
    7fbc:	0e c0       	rjmp	.+28     	; 0x7fda <vfprintf+0x24c>
    7fbe:	44 24       	eor	r4, r4
    7fc0:	43 94       	inc	r4
    7fc2:	41 0e       	add	r4, r17
    7fc4:	81 2f       	mov	r24, r17
    7fc6:	90 e0       	ldi	r25, 0x00	; 0
    7fc8:	c8 16       	cp	r12, r24
    7fca:	d9 06       	cpc	r13, r25
    7fcc:	2c f4       	brge	.+10     	; 0x7fd8 <vfprintf+0x24a>
    7fce:	1c 19       	sub	r17, r12
    7fd0:	04 c0       	rjmp	.+8      	; 0x7fda <vfprintf+0x24c>
    7fd2:	44 24       	eor	r4, r4
    7fd4:	43 94       	inc	r4
    7fd6:	01 c0       	rjmp	.+2      	; 0x7fda <vfprintf+0x24c>
    7fd8:	10 e0       	ldi	r17, 0x00	; 0
    7fda:	97 fe       	sbrs	r9, 7
    7fdc:	06 c0       	rjmp	.+12     	; 0x7fea <vfprintf+0x25c>
    7fde:	1c 14       	cp	r1, r12
    7fe0:	1d 04       	cpc	r1, r13
    7fe2:	34 f4       	brge	.+12     	; 0x7ff0 <vfprintf+0x262>
    7fe4:	c6 01       	movw	r24, r12
    7fe6:	01 96       	adiw	r24, 0x01	; 1
    7fe8:	05 c0       	rjmp	.+10     	; 0x7ff4 <vfprintf+0x266>
    7fea:	85 e0       	ldi	r24, 0x05	; 5
    7fec:	90 e0       	ldi	r25, 0x00	; 0
    7fee:	02 c0       	rjmp	.+4      	; 0x7ff4 <vfprintf+0x266>
    7ff0:	81 e0       	ldi	r24, 0x01	; 1
    7ff2:	90 e0       	ldi	r25, 0x00	; 0
    7ff4:	01 11       	cpse	r16, r1
    7ff6:	01 96       	adiw	r24, 0x01	; 1
    7ff8:	11 23       	and	r17, r17
    7ffa:	31 f0       	breq	.+12     	; 0x8008 <vfprintf+0x27a>
    7ffc:	21 2f       	mov	r18, r17
    7ffe:	30 e0       	ldi	r19, 0x00	; 0
    8000:	2f 5f       	subi	r18, 0xFF	; 255
    8002:	3f 4f       	sbci	r19, 0xFF	; 255
    8004:	82 0f       	add	r24, r18
    8006:	93 1f       	adc	r25, r19
    8008:	25 2d       	mov	r18, r5
    800a:	30 e0       	ldi	r19, 0x00	; 0
    800c:	82 17       	cp	r24, r18
    800e:	93 07       	cpc	r25, r19
    8010:	14 f4       	brge	.+4      	; 0x8016 <vfprintf+0x288>
    8012:	58 1a       	sub	r5, r24
    8014:	01 c0       	rjmp	.+2      	; 0x8018 <vfprintf+0x28a>
    8016:	51 2c       	mov	r5, r1
    8018:	89 2d       	mov	r24, r9
    801a:	89 70       	andi	r24, 0x09	; 9
    801c:	49 f4       	brne	.+18     	; 0x8030 <vfprintf+0x2a2>
    801e:	55 20       	and	r5, r5
    8020:	39 f0       	breq	.+14     	; 0x8030 <vfprintf+0x2a2>
    8022:	b7 01       	movw	r22, r14
    8024:	80 e2       	ldi	r24, 0x20	; 32
    8026:	90 e0       	ldi	r25, 0x00	; 0
    8028:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    802c:	5a 94       	dec	r5
    802e:	f7 cf       	rjmp	.-18     	; 0x801e <vfprintf+0x290>
    8030:	00 23       	and	r16, r16
    8032:	29 f0       	breq	.+10     	; 0x803e <vfprintf+0x2b0>
    8034:	b7 01       	movw	r22, r14
    8036:	80 2f       	mov	r24, r16
    8038:	90 e0       	ldi	r25, 0x00	; 0
    803a:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    803e:	93 fc       	sbrc	r9, 3
    8040:	09 c0       	rjmp	.+18     	; 0x8054 <vfprintf+0x2c6>
    8042:	55 20       	and	r5, r5
    8044:	39 f0       	breq	.+14     	; 0x8054 <vfprintf+0x2c6>
    8046:	b7 01       	movw	r22, r14
    8048:	80 e3       	ldi	r24, 0x30	; 48
    804a:	90 e0       	ldi	r25, 0x00	; 0
    804c:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    8050:	5a 94       	dec	r5
    8052:	f7 cf       	rjmp	.-18     	; 0x8042 <vfprintf+0x2b4>
    8054:	97 fe       	sbrs	r9, 7
    8056:	4c c0       	rjmp	.+152    	; 0x80f0 <vfprintf+0x362>
    8058:	46 01       	movw	r8, r12
    805a:	d7 fe       	sbrs	r13, 7
    805c:	02 c0       	rjmp	.+4      	; 0x8062 <vfprintf+0x2d4>
    805e:	81 2c       	mov	r8, r1
    8060:	91 2c       	mov	r9, r1
    8062:	c6 01       	movw	r24, r12
    8064:	88 19       	sub	r24, r8
    8066:	99 09       	sbc	r25, r9
    8068:	f3 01       	movw	r30, r6
    806a:	e8 0f       	add	r30, r24
    806c:	f9 1f       	adc	r31, r25
    806e:	ed 87       	std	Y+13, r30	; 0x0d
    8070:	fe 87       	std	Y+14, r31	; 0x0e
    8072:	96 01       	movw	r18, r12
    8074:	24 19       	sub	r18, r4
    8076:	31 09       	sbc	r19, r1
    8078:	2f 87       	std	Y+15, r18	; 0x0f
    807a:	38 8b       	std	Y+16, r19	; 0x10
    807c:	01 2f       	mov	r16, r17
    807e:	10 e0       	ldi	r17, 0x00	; 0
    8080:	11 95       	neg	r17
    8082:	01 95       	neg	r16
    8084:	11 09       	sbc	r17, r1
    8086:	3f ef       	ldi	r19, 0xFF	; 255
    8088:	83 16       	cp	r8, r19
    808a:	93 06       	cpc	r9, r19
    808c:	29 f4       	brne	.+10     	; 0x8098 <vfprintf+0x30a>
    808e:	b7 01       	movw	r22, r14
    8090:	8e e2       	ldi	r24, 0x2E	; 46
    8092:	90 e0       	ldi	r25, 0x00	; 0
    8094:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    8098:	c8 14       	cp	r12, r8
    809a:	d9 04       	cpc	r13, r9
    809c:	4c f0       	brlt	.+18     	; 0x80b0 <vfprintf+0x322>
    809e:	8f 85       	ldd	r24, Y+15	; 0x0f
    80a0:	98 89       	ldd	r25, Y+16	; 0x10
    80a2:	88 15       	cp	r24, r8
    80a4:	99 05       	cpc	r25, r9
    80a6:	24 f4       	brge	.+8      	; 0x80b0 <vfprintf+0x322>
    80a8:	ed 85       	ldd	r30, Y+13	; 0x0d
    80aa:	fe 85       	ldd	r31, Y+14	; 0x0e
    80ac:	81 81       	ldd	r24, Z+1	; 0x01
    80ae:	01 c0       	rjmp	.+2      	; 0x80b2 <vfprintf+0x324>
    80b0:	80 e3       	ldi	r24, 0x30	; 48
    80b2:	f1 e0       	ldi	r31, 0x01	; 1
    80b4:	8f 1a       	sub	r8, r31
    80b6:	91 08       	sbc	r9, r1
    80b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    80ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    80bc:	2f 5f       	subi	r18, 0xFF	; 255
    80be:	3f 4f       	sbci	r19, 0xFF	; 255
    80c0:	2d 87       	std	Y+13, r18	; 0x0d
    80c2:	3e 87       	std	Y+14, r19	; 0x0e
    80c4:	80 16       	cp	r8, r16
    80c6:	91 06       	cpc	r9, r17
    80c8:	2c f0       	brlt	.+10     	; 0x80d4 <vfprintf+0x346>
    80ca:	b7 01       	movw	r22, r14
    80cc:	90 e0       	ldi	r25, 0x00	; 0
    80ce:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    80d2:	d9 cf       	rjmp	.-78     	; 0x8086 <vfprintf+0x2f8>
    80d4:	c8 14       	cp	r12, r8
    80d6:	d9 04       	cpc	r13, r9
    80d8:	41 f4       	brne	.+16     	; 0x80ea <vfprintf+0x35c>
    80da:	9a 81       	ldd	r25, Y+2	; 0x02
    80dc:	96 33       	cpi	r25, 0x36	; 54
    80de:	20 f4       	brcc	.+8      	; 0x80e8 <vfprintf+0x35a>
    80e0:	95 33       	cpi	r25, 0x35	; 53
    80e2:	19 f4       	brne	.+6      	; 0x80ea <vfprintf+0x35c>
    80e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    80e6:	34 ff       	sbrs	r19, 4
    80e8:	81 e3       	ldi	r24, 0x31	; 49
    80ea:	b7 01       	movw	r22, r14
    80ec:	90 e0       	ldi	r25, 0x00	; 0
    80ee:	4e c0       	rjmp	.+156    	; 0x818c <vfprintf+0x3fe>
    80f0:	8a 81       	ldd	r24, Y+2	; 0x02
    80f2:	81 33       	cpi	r24, 0x31	; 49
    80f4:	19 f0       	breq	.+6      	; 0x80fc <vfprintf+0x36e>
    80f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    80f8:	9f 7e       	andi	r25, 0xEF	; 239
    80fa:	9c 87       	std	Y+12, r25	; 0x0c
    80fc:	b7 01       	movw	r22, r14
    80fe:	90 e0       	ldi	r25, 0x00	; 0
    8100:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    8104:	11 11       	cpse	r17, r1
    8106:	05 c0       	rjmp	.+10     	; 0x8112 <vfprintf+0x384>
    8108:	94 fc       	sbrc	r9, 4
    810a:	18 c0       	rjmp	.+48     	; 0x813c <vfprintf+0x3ae>
    810c:	85 e6       	ldi	r24, 0x65	; 101
    810e:	90 e0       	ldi	r25, 0x00	; 0
    8110:	17 c0       	rjmp	.+46     	; 0x8140 <vfprintf+0x3b2>
    8112:	b7 01       	movw	r22, r14
    8114:	8e e2       	ldi	r24, 0x2E	; 46
    8116:	90 e0       	ldi	r25, 0x00	; 0
    8118:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    811c:	1e 5f       	subi	r17, 0xFE	; 254
    811e:	82 e0       	ldi	r24, 0x02	; 2
    8120:	01 e0       	ldi	r16, 0x01	; 1
    8122:	08 0f       	add	r16, r24
    8124:	f3 01       	movw	r30, r6
    8126:	e8 0f       	add	r30, r24
    8128:	f1 1d       	adc	r31, r1
    812a:	80 81       	ld	r24, Z
    812c:	b7 01       	movw	r22, r14
    812e:	90 e0       	ldi	r25, 0x00	; 0
    8130:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    8134:	80 2f       	mov	r24, r16
    8136:	01 13       	cpse	r16, r17
    8138:	f3 cf       	rjmp	.-26     	; 0x8120 <vfprintf+0x392>
    813a:	e6 cf       	rjmp	.-52     	; 0x8108 <vfprintf+0x37a>
    813c:	85 e4       	ldi	r24, 0x45	; 69
    813e:	90 e0       	ldi	r25, 0x00	; 0
    8140:	b7 01       	movw	r22, r14
    8142:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    8146:	d7 fc       	sbrc	r13, 7
    8148:	06 c0       	rjmp	.+12     	; 0x8156 <vfprintf+0x3c8>
    814a:	c1 14       	cp	r12, r1
    814c:	d1 04       	cpc	r13, r1
    814e:	41 f4       	brne	.+16     	; 0x8160 <vfprintf+0x3d2>
    8150:	ec 85       	ldd	r30, Y+12	; 0x0c
    8152:	e4 ff       	sbrs	r30, 4
    8154:	05 c0       	rjmp	.+10     	; 0x8160 <vfprintf+0x3d2>
    8156:	d1 94       	neg	r13
    8158:	c1 94       	neg	r12
    815a:	d1 08       	sbc	r13, r1
    815c:	8d e2       	ldi	r24, 0x2D	; 45
    815e:	01 c0       	rjmp	.+2      	; 0x8162 <vfprintf+0x3d4>
    8160:	8b e2       	ldi	r24, 0x2B	; 43
    8162:	b7 01       	movw	r22, r14
    8164:	90 e0       	ldi	r25, 0x00	; 0
    8166:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    816a:	80 e3       	ldi	r24, 0x30	; 48
    816c:	2a e0       	ldi	r18, 0x0A	; 10
    816e:	c2 16       	cp	r12, r18
    8170:	d1 04       	cpc	r13, r1
    8172:	2c f0       	brlt	.+10     	; 0x817e <vfprintf+0x3f0>
    8174:	8f 5f       	subi	r24, 0xFF	; 255
    8176:	fa e0       	ldi	r31, 0x0A	; 10
    8178:	cf 1a       	sub	r12, r31
    817a:	d1 08       	sbc	r13, r1
    817c:	f7 cf       	rjmp	.-18     	; 0x816c <vfprintf+0x3de>
    817e:	b7 01       	movw	r22, r14
    8180:	90 e0       	ldi	r25, 0x00	; 0
    8182:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    8186:	b7 01       	movw	r22, r14
    8188:	c6 01       	movw	r24, r12
    818a:	c0 96       	adiw	r24, 0x30	; 48
    818c:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    8190:	54 c1       	rjmp	.+680    	; 0x843a <vfprintf+0x6ac>
    8192:	83 36       	cpi	r24, 0x63	; 99
    8194:	31 f0       	breq	.+12     	; 0x81a2 <vfprintf+0x414>
    8196:	83 37       	cpi	r24, 0x73	; 115
    8198:	79 f0       	breq	.+30     	; 0x81b8 <vfprintf+0x42a>
    819a:	83 35       	cpi	r24, 0x53	; 83
    819c:	09 f0       	breq	.+2      	; 0x81a0 <vfprintf+0x412>
    819e:	56 c0       	rjmp	.+172    	; 0x824c <vfprintf+0x4be>
    81a0:	20 c0       	rjmp	.+64     	; 0x81e2 <vfprintf+0x454>
    81a2:	56 01       	movw	r10, r12
    81a4:	32 e0       	ldi	r19, 0x02	; 2
    81a6:	a3 0e       	add	r10, r19
    81a8:	b1 1c       	adc	r11, r1
    81aa:	f6 01       	movw	r30, r12
    81ac:	80 81       	ld	r24, Z
    81ae:	89 83       	std	Y+1, r24	; 0x01
    81b0:	01 e0       	ldi	r16, 0x01	; 1
    81b2:	10 e0       	ldi	r17, 0x00	; 0
    81b4:	63 01       	movw	r12, r6
    81b6:	12 c0       	rjmp	.+36     	; 0x81dc <vfprintf+0x44e>
    81b8:	56 01       	movw	r10, r12
    81ba:	f2 e0       	ldi	r31, 0x02	; 2
    81bc:	af 0e       	add	r10, r31
    81be:	b1 1c       	adc	r11, r1
    81c0:	f6 01       	movw	r30, r12
    81c2:	c0 80       	ld	r12, Z
    81c4:	d1 80       	ldd	r13, Z+1	; 0x01
    81c6:	96 fe       	sbrs	r9, 6
    81c8:	03 c0       	rjmp	.+6      	; 0x81d0 <vfprintf+0x442>
    81ca:	61 2f       	mov	r22, r17
    81cc:	70 e0       	ldi	r23, 0x00	; 0
    81ce:	02 c0       	rjmp	.+4      	; 0x81d4 <vfprintf+0x446>
    81d0:	6f ef       	ldi	r22, 0xFF	; 255
    81d2:	7f ef       	ldi	r23, 0xFF	; 255
    81d4:	c6 01       	movw	r24, r12
    81d6:	0e 94 b1 4f 	call	0x9f62	; 0x9f62 <strnlen>
    81da:	8c 01       	movw	r16, r24
    81dc:	f9 2d       	mov	r31, r9
    81de:	ff 77       	andi	r31, 0x7F	; 127
    81e0:	14 c0       	rjmp	.+40     	; 0x820a <vfprintf+0x47c>
    81e2:	56 01       	movw	r10, r12
    81e4:	22 e0       	ldi	r18, 0x02	; 2
    81e6:	a2 0e       	add	r10, r18
    81e8:	b1 1c       	adc	r11, r1
    81ea:	f6 01       	movw	r30, r12
    81ec:	c0 80       	ld	r12, Z
    81ee:	d1 80       	ldd	r13, Z+1	; 0x01
    81f0:	96 fe       	sbrs	r9, 6
    81f2:	03 c0       	rjmp	.+6      	; 0x81fa <vfprintf+0x46c>
    81f4:	61 2f       	mov	r22, r17
    81f6:	70 e0       	ldi	r23, 0x00	; 0
    81f8:	02 c0       	rjmp	.+4      	; 0x81fe <vfprintf+0x470>
    81fa:	6f ef       	ldi	r22, 0xFF	; 255
    81fc:	7f ef       	ldi	r23, 0xFF	; 255
    81fe:	c6 01       	movw	r24, r12
    8200:	0e 94 6b 4f 	call	0x9ed6	; 0x9ed6 <strnlen_P>
    8204:	8c 01       	movw	r16, r24
    8206:	f9 2d       	mov	r31, r9
    8208:	f0 68       	ori	r31, 0x80	; 128
    820a:	9f 2e       	mov	r9, r31
    820c:	f3 fd       	sbrc	r31, 3
    820e:	1a c0       	rjmp	.+52     	; 0x8244 <vfprintf+0x4b6>
    8210:	85 2d       	mov	r24, r5
    8212:	90 e0       	ldi	r25, 0x00	; 0
    8214:	08 17       	cp	r16, r24
    8216:	19 07       	cpc	r17, r25
    8218:	a8 f4       	brcc	.+42     	; 0x8244 <vfprintf+0x4b6>
    821a:	b7 01       	movw	r22, r14
    821c:	80 e2       	ldi	r24, 0x20	; 32
    821e:	90 e0       	ldi	r25, 0x00	; 0
    8220:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    8224:	5a 94       	dec	r5
    8226:	f4 cf       	rjmp	.-24     	; 0x8210 <vfprintf+0x482>
    8228:	f6 01       	movw	r30, r12
    822a:	97 fc       	sbrc	r9, 7
    822c:	85 91       	lpm	r24, Z+
    822e:	97 fe       	sbrs	r9, 7
    8230:	81 91       	ld	r24, Z+
    8232:	6f 01       	movw	r12, r30
    8234:	b7 01       	movw	r22, r14
    8236:	90 e0       	ldi	r25, 0x00	; 0
    8238:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    823c:	51 10       	cpse	r5, r1
    823e:	5a 94       	dec	r5
    8240:	01 50       	subi	r16, 0x01	; 1
    8242:	11 09       	sbc	r17, r1
    8244:	01 15       	cp	r16, r1
    8246:	11 05       	cpc	r17, r1
    8248:	79 f7       	brne	.-34     	; 0x8228 <vfprintf+0x49a>
    824a:	f7 c0       	rjmp	.+494    	; 0x843a <vfprintf+0x6ac>
    824c:	84 36       	cpi	r24, 0x64	; 100
    824e:	11 f0       	breq	.+4      	; 0x8254 <vfprintf+0x4c6>
    8250:	89 36       	cpi	r24, 0x69	; 105
    8252:	61 f5       	brne	.+88     	; 0x82ac <vfprintf+0x51e>
    8254:	56 01       	movw	r10, r12
    8256:	97 fe       	sbrs	r9, 7
    8258:	09 c0       	rjmp	.+18     	; 0x826c <vfprintf+0x4de>
    825a:	24 e0       	ldi	r18, 0x04	; 4
    825c:	a2 0e       	add	r10, r18
    825e:	b1 1c       	adc	r11, r1
    8260:	f6 01       	movw	r30, r12
    8262:	60 81       	ld	r22, Z
    8264:	71 81       	ldd	r23, Z+1	; 0x01
    8266:	82 81       	ldd	r24, Z+2	; 0x02
    8268:	93 81       	ldd	r25, Z+3	; 0x03
    826a:	0a c0       	rjmp	.+20     	; 0x8280 <vfprintf+0x4f2>
    826c:	f2 e0       	ldi	r31, 0x02	; 2
    826e:	af 0e       	add	r10, r31
    8270:	b1 1c       	adc	r11, r1
    8272:	f6 01       	movw	r30, r12
    8274:	60 81       	ld	r22, Z
    8276:	71 81       	ldd	r23, Z+1	; 0x01
    8278:	07 2e       	mov	r0, r23
    827a:	00 0c       	add	r0, r0
    827c:	88 0b       	sbc	r24, r24
    827e:	99 0b       	sbc	r25, r25
    8280:	f9 2d       	mov	r31, r9
    8282:	ff 76       	andi	r31, 0x6F	; 111
    8284:	9f 2e       	mov	r9, r31
    8286:	97 ff       	sbrs	r25, 7
    8288:	09 c0       	rjmp	.+18     	; 0x829c <vfprintf+0x50e>
    828a:	90 95       	com	r25
    828c:	80 95       	com	r24
    828e:	70 95       	com	r23
    8290:	61 95       	neg	r22
    8292:	7f 4f       	sbci	r23, 0xFF	; 255
    8294:	8f 4f       	sbci	r24, 0xFF	; 255
    8296:	9f 4f       	sbci	r25, 0xFF	; 255
    8298:	f0 68       	ori	r31, 0x80	; 128
    829a:	9f 2e       	mov	r9, r31
    829c:	2a e0       	ldi	r18, 0x0A	; 10
    829e:	30 e0       	ldi	r19, 0x00	; 0
    82a0:	a3 01       	movw	r20, r6
    82a2:	0e 94 19 51 	call	0xa232	; 0xa232 <__ultoa_invert>
    82a6:	c8 2e       	mov	r12, r24
    82a8:	c6 18       	sub	r12, r6
    82aa:	3f c0       	rjmp	.+126    	; 0x832a <vfprintf+0x59c>
    82ac:	09 2d       	mov	r16, r9
    82ae:	85 37       	cpi	r24, 0x75	; 117
    82b0:	21 f4       	brne	.+8      	; 0x82ba <vfprintf+0x52c>
    82b2:	0f 7e       	andi	r16, 0xEF	; 239
    82b4:	2a e0       	ldi	r18, 0x0A	; 10
    82b6:	30 e0       	ldi	r19, 0x00	; 0
    82b8:	1d c0       	rjmp	.+58     	; 0x82f4 <vfprintf+0x566>
    82ba:	09 7f       	andi	r16, 0xF9	; 249
    82bc:	8f 36       	cpi	r24, 0x6F	; 111
    82be:	91 f0       	breq	.+36     	; 0x82e4 <vfprintf+0x556>
    82c0:	18 f4       	brcc	.+6      	; 0x82c8 <vfprintf+0x53a>
    82c2:	88 35       	cpi	r24, 0x58	; 88
    82c4:	59 f0       	breq	.+22     	; 0x82dc <vfprintf+0x54e>
    82c6:	c3 c0       	rjmp	.+390    	; 0x844e <vfprintf+0x6c0>
    82c8:	80 37       	cpi	r24, 0x70	; 112
    82ca:	19 f0       	breq	.+6      	; 0x82d2 <vfprintf+0x544>
    82cc:	88 37       	cpi	r24, 0x78	; 120
    82ce:	11 f0       	breq	.+4      	; 0x82d4 <vfprintf+0x546>
    82d0:	be c0       	rjmp	.+380    	; 0x844e <vfprintf+0x6c0>
    82d2:	00 61       	ori	r16, 0x10	; 16
    82d4:	04 ff       	sbrs	r16, 4
    82d6:	09 c0       	rjmp	.+18     	; 0x82ea <vfprintf+0x55c>
    82d8:	04 60       	ori	r16, 0x04	; 4
    82da:	07 c0       	rjmp	.+14     	; 0x82ea <vfprintf+0x55c>
    82dc:	94 fe       	sbrs	r9, 4
    82de:	08 c0       	rjmp	.+16     	; 0x82f0 <vfprintf+0x562>
    82e0:	06 60       	ori	r16, 0x06	; 6
    82e2:	06 c0       	rjmp	.+12     	; 0x82f0 <vfprintf+0x562>
    82e4:	28 e0       	ldi	r18, 0x08	; 8
    82e6:	30 e0       	ldi	r19, 0x00	; 0
    82e8:	05 c0       	rjmp	.+10     	; 0x82f4 <vfprintf+0x566>
    82ea:	20 e1       	ldi	r18, 0x10	; 16
    82ec:	30 e0       	ldi	r19, 0x00	; 0
    82ee:	02 c0       	rjmp	.+4      	; 0x82f4 <vfprintf+0x566>
    82f0:	20 e1       	ldi	r18, 0x10	; 16
    82f2:	32 e0       	ldi	r19, 0x02	; 2
    82f4:	56 01       	movw	r10, r12
    82f6:	07 ff       	sbrs	r16, 7
    82f8:	09 c0       	rjmp	.+18     	; 0x830c <vfprintf+0x57e>
    82fa:	84 e0       	ldi	r24, 0x04	; 4
    82fc:	a8 0e       	add	r10, r24
    82fe:	b1 1c       	adc	r11, r1
    8300:	f6 01       	movw	r30, r12
    8302:	60 81       	ld	r22, Z
    8304:	71 81       	ldd	r23, Z+1	; 0x01
    8306:	82 81       	ldd	r24, Z+2	; 0x02
    8308:	93 81       	ldd	r25, Z+3	; 0x03
    830a:	08 c0       	rjmp	.+16     	; 0x831c <vfprintf+0x58e>
    830c:	f2 e0       	ldi	r31, 0x02	; 2
    830e:	af 0e       	add	r10, r31
    8310:	b1 1c       	adc	r11, r1
    8312:	f6 01       	movw	r30, r12
    8314:	60 81       	ld	r22, Z
    8316:	71 81       	ldd	r23, Z+1	; 0x01
    8318:	80 e0       	ldi	r24, 0x00	; 0
    831a:	90 e0       	ldi	r25, 0x00	; 0
    831c:	a3 01       	movw	r20, r6
    831e:	0e 94 19 51 	call	0xa232	; 0xa232 <__ultoa_invert>
    8322:	c8 2e       	mov	r12, r24
    8324:	c6 18       	sub	r12, r6
    8326:	0f 77       	andi	r16, 0x7F	; 127
    8328:	90 2e       	mov	r9, r16
    832a:	96 fe       	sbrs	r9, 6
    832c:	0b c0       	rjmp	.+22     	; 0x8344 <vfprintf+0x5b6>
    832e:	09 2d       	mov	r16, r9
    8330:	0e 7f       	andi	r16, 0xFE	; 254
    8332:	c1 16       	cp	r12, r17
    8334:	50 f4       	brcc	.+20     	; 0x834a <vfprintf+0x5bc>
    8336:	94 fe       	sbrs	r9, 4
    8338:	0a c0       	rjmp	.+20     	; 0x834e <vfprintf+0x5c0>
    833a:	92 fc       	sbrc	r9, 2
    833c:	08 c0       	rjmp	.+16     	; 0x834e <vfprintf+0x5c0>
    833e:	09 2d       	mov	r16, r9
    8340:	0e 7e       	andi	r16, 0xEE	; 238
    8342:	05 c0       	rjmp	.+10     	; 0x834e <vfprintf+0x5c0>
    8344:	dc 2c       	mov	r13, r12
    8346:	09 2d       	mov	r16, r9
    8348:	03 c0       	rjmp	.+6      	; 0x8350 <vfprintf+0x5c2>
    834a:	dc 2c       	mov	r13, r12
    834c:	01 c0       	rjmp	.+2      	; 0x8350 <vfprintf+0x5c2>
    834e:	d1 2e       	mov	r13, r17
    8350:	04 ff       	sbrs	r16, 4
    8352:	0d c0       	rjmp	.+26     	; 0x836e <vfprintf+0x5e0>
    8354:	fe 01       	movw	r30, r28
    8356:	ec 0d       	add	r30, r12
    8358:	f1 1d       	adc	r31, r1
    835a:	80 81       	ld	r24, Z
    835c:	80 33       	cpi	r24, 0x30	; 48
    835e:	11 f4       	brne	.+4      	; 0x8364 <vfprintf+0x5d6>
    8360:	09 7e       	andi	r16, 0xE9	; 233
    8362:	09 c0       	rjmp	.+18     	; 0x8376 <vfprintf+0x5e8>
    8364:	02 ff       	sbrs	r16, 2
    8366:	06 c0       	rjmp	.+12     	; 0x8374 <vfprintf+0x5e6>
    8368:	d3 94       	inc	r13
    836a:	d3 94       	inc	r13
    836c:	04 c0       	rjmp	.+8      	; 0x8376 <vfprintf+0x5e8>
    836e:	80 2f       	mov	r24, r16
    8370:	86 78       	andi	r24, 0x86	; 134
    8372:	09 f0       	breq	.+2      	; 0x8376 <vfprintf+0x5e8>
    8374:	d3 94       	inc	r13
    8376:	03 fd       	sbrc	r16, 3
    8378:	11 c0       	rjmp	.+34     	; 0x839c <vfprintf+0x60e>
    837a:	00 ff       	sbrs	r16, 0
    837c:	06 c0       	rjmp	.+12     	; 0x838a <vfprintf+0x5fc>
    837e:	1c 2d       	mov	r17, r12
    8380:	d5 14       	cp	r13, r5
    8382:	80 f4       	brcc	.+32     	; 0x83a4 <vfprintf+0x616>
    8384:	15 0d       	add	r17, r5
    8386:	1d 19       	sub	r17, r13
    8388:	0d c0       	rjmp	.+26     	; 0x83a4 <vfprintf+0x616>
    838a:	d5 14       	cp	r13, r5
    838c:	58 f4       	brcc	.+22     	; 0x83a4 <vfprintf+0x616>
    838e:	b7 01       	movw	r22, r14
    8390:	80 e2       	ldi	r24, 0x20	; 32
    8392:	90 e0       	ldi	r25, 0x00	; 0
    8394:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    8398:	d3 94       	inc	r13
    839a:	f7 cf       	rjmp	.-18     	; 0x838a <vfprintf+0x5fc>
    839c:	d5 14       	cp	r13, r5
    839e:	10 f4       	brcc	.+4      	; 0x83a4 <vfprintf+0x616>
    83a0:	5d 18       	sub	r5, r13
    83a2:	01 c0       	rjmp	.+2      	; 0x83a6 <vfprintf+0x618>
    83a4:	51 2c       	mov	r5, r1
    83a6:	04 ff       	sbrs	r16, 4
    83a8:	10 c0       	rjmp	.+32     	; 0x83ca <vfprintf+0x63c>
    83aa:	b7 01       	movw	r22, r14
    83ac:	80 e3       	ldi	r24, 0x30	; 48
    83ae:	90 e0       	ldi	r25, 0x00	; 0
    83b0:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    83b4:	02 ff       	sbrs	r16, 2
    83b6:	17 c0       	rjmp	.+46     	; 0x83e6 <vfprintf+0x658>
    83b8:	01 fd       	sbrc	r16, 1
    83ba:	03 c0       	rjmp	.+6      	; 0x83c2 <vfprintf+0x634>
    83bc:	88 e7       	ldi	r24, 0x78	; 120
    83be:	90 e0       	ldi	r25, 0x00	; 0
    83c0:	02 c0       	rjmp	.+4      	; 0x83c6 <vfprintf+0x638>
    83c2:	88 e5       	ldi	r24, 0x58	; 88
    83c4:	90 e0       	ldi	r25, 0x00	; 0
    83c6:	b7 01       	movw	r22, r14
    83c8:	0c c0       	rjmp	.+24     	; 0x83e2 <vfprintf+0x654>
    83ca:	80 2f       	mov	r24, r16
    83cc:	86 78       	andi	r24, 0x86	; 134
    83ce:	59 f0       	breq	.+22     	; 0x83e6 <vfprintf+0x658>
    83d0:	01 ff       	sbrs	r16, 1
    83d2:	02 c0       	rjmp	.+4      	; 0x83d8 <vfprintf+0x64a>
    83d4:	8b e2       	ldi	r24, 0x2B	; 43
    83d6:	01 c0       	rjmp	.+2      	; 0x83da <vfprintf+0x64c>
    83d8:	80 e2       	ldi	r24, 0x20	; 32
    83da:	07 fd       	sbrc	r16, 7
    83dc:	8d e2       	ldi	r24, 0x2D	; 45
    83de:	b7 01       	movw	r22, r14
    83e0:	90 e0       	ldi	r25, 0x00	; 0
    83e2:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    83e6:	c1 16       	cp	r12, r17
    83e8:	38 f4       	brcc	.+14     	; 0x83f8 <vfprintf+0x66a>
    83ea:	b7 01       	movw	r22, r14
    83ec:	80 e3       	ldi	r24, 0x30	; 48
    83ee:	90 e0       	ldi	r25, 0x00	; 0
    83f0:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    83f4:	11 50       	subi	r17, 0x01	; 1
    83f6:	f7 cf       	rjmp	.-18     	; 0x83e6 <vfprintf+0x658>
    83f8:	ca 94       	dec	r12
    83fa:	f3 01       	movw	r30, r6
    83fc:	ec 0d       	add	r30, r12
    83fe:	f1 1d       	adc	r31, r1
    8400:	80 81       	ld	r24, Z
    8402:	b7 01       	movw	r22, r14
    8404:	90 e0       	ldi	r25, 0x00	; 0
    8406:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    840a:	c1 10       	cpse	r12, r1
    840c:	f5 cf       	rjmp	.-22     	; 0x83f8 <vfprintf+0x66a>
    840e:	15 c0       	rjmp	.+42     	; 0x843a <vfprintf+0x6ac>
    8410:	f4 e0       	ldi	r31, 0x04	; 4
    8412:	f5 15       	cp	r31, r5
    8414:	60 f5       	brcc	.+88     	; 0x846e <vfprintf+0x6e0>
    8416:	84 e0       	ldi	r24, 0x04	; 4
    8418:	58 1a       	sub	r5, r24
    841a:	93 fe       	sbrs	r9, 3
    841c:	1f c0       	rjmp	.+62     	; 0x845c <vfprintf+0x6ce>
    841e:	01 11       	cpse	r16, r1
    8420:	27 c0       	rjmp	.+78     	; 0x8470 <vfprintf+0x6e2>
    8422:	2c 85       	ldd	r18, Y+12	; 0x0c
    8424:	23 ff       	sbrs	r18, 3
    8426:	2a c0       	rjmp	.+84     	; 0x847c <vfprintf+0x6ee>
    8428:	0e e4       	ldi	r16, 0x4E	; 78
    842a:	13 e0       	ldi	r17, 0x03	; 3
    842c:	39 2d       	mov	r19, r9
    842e:	30 71       	andi	r19, 0x10	; 16
    8430:	93 2e       	mov	r9, r19
    8432:	f8 01       	movw	r30, r16
    8434:	84 91       	lpm	r24, Z
    8436:	81 11       	cpse	r24, r1
    8438:	24 c0       	rjmp	.+72     	; 0x8482 <vfprintf+0x6f4>
    843a:	55 20       	and	r5, r5
    843c:	09 f4       	brne	.+2      	; 0x8440 <vfprintf+0x6b2>
    843e:	e4 cc       	rjmp	.-1592   	; 0x7e08 <vfprintf+0x7a>
    8440:	b7 01       	movw	r22, r14
    8442:	80 e2       	ldi	r24, 0x20	; 32
    8444:	90 e0       	ldi	r25, 0x00	; 0
    8446:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    844a:	5a 94       	dec	r5
    844c:	f6 cf       	rjmp	.-20     	; 0x843a <vfprintf+0x6ac>
    844e:	f7 01       	movw	r30, r14
    8450:	86 81       	ldd	r24, Z+6	; 0x06
    8452:	97 81       	ldd	r25, Z+7	; 0x07
    8454:	26 c0       	rjmp	.+76     	; 0x84a2 <vfprintf+0x714>
    8456:	8f ef       	ldi	r24, 0xFF	; 255
    8458:	9f ef       	ldi	r25, 0xFF	; 255
    845a:	23 c0       	rjmp	.+70     	; 0x84a2 <vfprintf+0x714>
    845c:	b7 01       	movw	r22, r14
    845e:	80 e2       	ldi	r24, 0x20	; 32
    8460:	90 e0       	ldi	r25, 0x00	; 0
    8462:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    8466:	5a 94       	dec	r5
    8468:	51 10       	cpse	r5, r1
    846a:	f8 cf       	rjmp	.-16     	; 0x845c <vfprintf+0x6ce>
    846c:	d8 cf       	rjmp	.-80     	; 0x841e <vfprintf+0x690>
    846e:	51 2c       	mov	r5, r1
    8470:	b7 01       	movw	r22, r14
    8472:	80 2f       	mov	r24, r16
    8474:	90 e0       	ldi	r25, 0x00	; 0
    8476:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    847a:	d3 cf       	rjmp	.-90     	; 0x8422 <vfprintf+0x694>
    847c:	02 e5       	ldi	r16, 0x52	; 82
    847e:	13 e0       	ldi	r17, 0x03	; 3
    8480:	d5 cf       	rjmp	.-86     	; 0x842c <vfprintf+0x69e>
    8482:	91 10       	cpse	r9, r1
    8484:	80 52       	subi	r24, 0x20	; 32
    8486:	b7 01       	movw	r22, r14
    8488:	90 e0       	ldi	r25, 0x00	; 0
    848a:	0e 94 29 50 	call	0xa052	; 0xa052 <fputc>
    848e:	0f 5f       	subi	r16, 0xFF	; 255
    8490:	1f 4f       	sbci	r17, 0xFF	; 255
    8492:	cf cf       	rjmp	.-98     	; 0x8432 <vfprintf+0x6a4>
    8494:	23 e0       	ldi	r18, 0x03	; 3
    8496:	25 15       	cp	r18, r5
    8498:	10 f4       	brcc	.+4      	; 0x849e <vfprintf+0x710>
    849a:	83 e0       	ldi	r24, 0x03	; 3
    849c:	bd cf       	rjmp	.-134    	; 0x8418 <vfprintf+0x68a>
    849e:	51 2c       	mov	r5, r1
    84a0:	c0 cf       	rjmp	.-128    	; 0x8422 <vfprintf+0x694>
    84a2:	60 96       	adiw	r28, 0x10	; 16
    84a4:	cd bf       	out	0x3d, r28	; 61
    84a6:	de bf       	out	0x3e, r29	; 62
    84a8:	df 91       	pop	r29
    84aa:	cf 91       	pop	r28
    84ac:	1f 91       	pop	r17
    84ae:	0f 91       	pop	r16
    84b0:	ff 90       	pop	r15
    84b2:	ef 90       	pop	r14
    84b4:	df 90       	pop	r13
    84b6:	cf 90       	pop	r12
    84b8:	bf 90       	pop	r11
    84ba:	af 90       	pop	r10
    84bc:	9f 90       	pop	r9
    84be:	8f 90       	pop	r8
    84c0:	7f 90       	pop	r7
    84c2:	6f 90       	pop	r6
    84c4:	5f 90       	pop	r5
    84c6:	4f 90       	pop	r4
    84c8:	3f 90       	pop	r3
    84ca:	2f 90       	pop	r2
    84cc:	08 95       	ret

000084ce <putval>:
    84ce:	20 fd       	sbrc	r18, 0
    84d0:	09 c0       	rjmp	.+18     	; 0x84e4 <putval+0x16>
    84d2:	fc 01       	movw	r30, r24
    84d4:	23 fd       	sbrc	r18, 3
    84d6:	05 c0       	rjmp	.+10     	; 0x84e2 <putval+0x14>
    84d8:	22 ff       	sbrs	r18, 2
    84da:	02 c0       	rjmp	.+4      	; 0x84e0 <putval+0x12>
    84dc:	73 83       	std	Z+3, r23	; 0x03
    84de:	62 83       	std	Z+2, r22	; 0x02
    84e0:	51 83       	std	Z+1, r21	; 0x01
    84e2:	40 83       	st	Z, r20
    84e4:	08 95       	ret

000084e6 <mulacc>:
    84e6:	44 fd       	sbrc	r20, 4
    84e8:	17 c0       	rjmp	.+46     	; 0x8518 <mulacc+0x32>
    84ea:	46 fd       	sbrc	r20, 6
    84ec:	17 c0       	rjmp	.+46     	; 0x851c <mulacc+0x36>
    84ee:	ab 01       	movw	r20, r22
    84f0:	bc 01       	movw	r22, r24
    84f2:	da 01       	movw	r26, r20
    84f4:	fb 01       	movw	r30, r22
    84f6:	aa 0f       	add	r26, r26
    84f8:	bb 1f       	adc	r27, r27
    84fa:	ee 1f       	adc	r30, r30
    84fc:	ff 1f       	adc	r31, r31
    84fe:	10 94       	com	r1
    8500:	d1 f7       	brne	.-12     	; 0x84f6 <mulacc+0x10>
    8502:	4a 0f       	add	r20, r26
    8504:	5b 1f       	adc	r21, r27
    8506:	6e 1f       	adc	r22, r30
    8508:	7f 1f       	adc	r23, r31
    850a:	cb 01       	movw	r24, r22
    850c:	ba 01       	movw	r22, r20
    850e:	66 0f       	add	r22, r22
    8510:	77 1f       	adc	r23, r23
    8512:	88 1f       	adc	r24, r24
    8514:	99 1f       	adc	r25, r25
    8516:	09 c0       	rjmp	.+18     	; 0x852a <mulacc+0x44>
    8518:	33 e0       	ldi	r19, 0x03	; 3
    851a:	01 c0       	rjmp	.+2      	; 0x851e <mulacc+0x38>
    851c:	34 e0       	ldi	r19, 0x04	; 4
    851e:	66 0f       	add	r22, r22
    8520:	77 1f       	adc	r23, r23
    8522:	88 1f       	adc	r24, r24
    8524:	99 1f       	adc	r25, r25
    8526:	31 50       	subi	r19, 0x01	; 1
    8528:	d1 f7       	brne	.-12     	; 0x851e <mulacc+0x38>
    852a:	62 0f       	add	r22, r18
    852c:	71 1d       	adc	r23, r1
    852e:	81 1d       	adc	r24, r1
    8530:	91 1d       	adc	r25, r1
    8532:	08 95       	ret

00008534 <skip_spaces>:
    8534:	0f 93       	push	r16
    8536:	1f 93       	push	r17
    8538:	cf 93       	push	r28
    853a:	df 93       	push	r29
    853c:	8c 01       	movw	r16, r24
    853e:	c8 01       	movw	r24, r16
    8540:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    8544:	ec 01       	movw	r28, r24
    8546:	97 fd       	sbrc	r25, 7
    8548:	08 c0       	rjmp	.+16     	; 0x855a <skip_spaces+0x26>
    854a:	0e 94 46 4f 	call	0x9e8c	; 0x9e8c <isspace>
    854e:	89 2b       	or	r24, r25
    8550:	b1 f7       	brne	.-20     	; 0x853e <skip_spaces+0xa>
    8552:	b8 01       	movw	r22, r16
    8554:	ce 01       	movw	r24, r28
    8556:	0e 94 00 51 	call	0xa200	; 0xa200 <ungetc>
    855a:	ce 01       	movw	r24, r28
    855c:	df 91       	pop	r29
    855e:	cf 91       	pop	r28
    8560:	1f 91       	pop	r17
    8562:	0f 91       	pop	r16
    8564:	08 95       	ret

00008566 <conv_int>:
    8566:	8f 92       	push	r8
    8568:	9f 92       	push	r9
    856a:	af 92       	push	r10
    856c:	bf 92       	push	r11
    856e:	cf 92       	push	r12
    8570:	df 92       	push	r13
    8572:	ef 92       	push	r14
    8574:	ff 92       	push	r15
    8576:	0f 93       	push	r16
    8578:	1f 93       	push	r17
    857a:	cf 93       	push	r28
    857c:	df 93       	push	r29
    857e:	7c 01       	movw	r14, r24
    8580:	8b 01       	movw	r16, r22
    8582:	6a 01       	movw	r12, r20
    8584:	d2 2f       	mov	r29, r18
    8586:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    858a:	9c 01       	movw	r18, r24
    858c:	33 27       	eor	r19, r19
    858e:	2b 32       	cpi	r18, 0x2B	; 43
    8590:	31 05       	cpc	r19, r1
    8592:	21 f0       	breq	.+8      	; 0x859c <conv_int+0x36>
    8594:	2d 32       	cpi	r18, 0x2D	; 45
    8596:	31 05       	cpc	r19, r1
    8598:	59 f4       	brne	.+22     	; 0x85b0 <conv_int+0x4a>
    859a:	d0 68       	ori	r29, 0x80	; 128
    859c:	01 50       	subi	r16, 0x01	; 1
    859e:	11 09       	sbc	r17, r1
    85a0:	11 f4       	brne	.+4      	; 0x85a6 <conv_int+0x40>
    85a2:	80 e0       	ldi	r24, 0x00	; 0
    85a4:	6b c0       	rjmp	.+214    	; 0x867c <conv_int+0x116>
    85a6:	c7 01       	movw	r24, r14
    85a8:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    85ac:	97 fd       	sbrc	r25, 7
    85ae:	f9 cf       	rjmp	.-14     	; 0x85a2 <conv_int+0x3c>
    85b0:	cd 2f       	mov	r28, r29
    85b2:	cd 7f       	andi	r28, 0xFD	; 253
    85b4:	2d 2f       	mov	r18, r29
    85b6:	20 73       	andi	r18, 0x30	; 48
    85b8:	19 f5       	brne	.+70     	; 0x8600 <conv_int+0x9a>
    85ba:	80 33       	cpi	r24, 0x30	; 48
    85bc:	09 f5       	brne	.+66     	; 0x8600 <conv_int+0x9a>
    85be:	58 01       	movw	r10, r16
    85c0:	81 e0       	ldi	r24, 0x01	; 1
    85c2:	a8 1a       	sub	r10, r24
    85c4:	b1 08       	sbc	r11, r1
    85c6:	09 f4       	brne	.+2      	; 0x85ca <conv_int+0x64>
    85c8:	45 c0       	rjmp	.+138    	; 0x8654 <conv_int+0xee>
    85ca:	c7 01       	movw	r24, r14
    85cc:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    85d0:	97 fd       	sbrc	r25, 7
    85d2:	40 c0       	rjmp	.+128    	; 0x8654 <conv_int+0xee>
    85d4:	9c 01       	movw	r18, r24
    85d6:	2f 7d       	andi	r18, 0xDF	; 223
    85d8:	33 27       	eor	r19, r19
    85da:	28 35       	cpi	r18, 0x58	; 88
    85dc:	31 05       	cpc	r19, r1
    85de:	51 f4       	brne	.+20     	; 0x85f4 <conv_int+0x8e>
    85e0:	c2 64       	ori	r28, 0x42	; 66
    85e2:	02 50       	subi	r16, 0x02	; 2
    85e4:	11 09       	sbc	r17, r1
    85e6:	b1 f1       	breq	.+108    	; 0x8654 <conv_int+0xee>
    85e8:	c7 01       	movw	r24, r14
    85ea:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    85ee:	97 ff       	sbrs	r25, 7
    85f0:	07 c0       	rjmp	.+14     	; 0x8600 <conv_int+0x9a>
    85f2:	30 c0       	rjmp	.+96     	; 0x8654 <conv_int+0xee>
    85f4:	d6 ff       	sbrs	r29, 6
    85f6:	02 c0       	rjmp	.+4      	; 0x85fc <conv_int+0x96>
    85f8:	c2 60       	ori	r28, 0x02	; 2
    85fa:	01 c0       	rjmp	.+2      	; 0x85fe <conv_int+0x98>
    85fc:	c2 61       	ori	r28, 0x12	; 18
    85fe:	85 01       	movw	r16, r10
    8600:	81 2c       	mov	r8, r1
    8602:	91 2c       	mov	r9, r1
    8604:	54 01       	movw	r10, r8
    8606:	20 ed       	ldi	r18, 0xD0	; 208
    8608:	28 0f       	add	r18, r24
    860a:	28 30       	cpi	r18, 0x08	; 8
    860c:	80 f0       	brcs	.+32     	; 0x862e <conv_int+0xc8>
    860e:	c4 ff       	sbrs	r28, 4
    8610:	04 c0       	rjmp	.+8      	; 0x861a <conv_int+0xb4>
    8612:	b7 01       	movw	r22, r14
    8614:	0e 94 00 51 	call	0xa200	; 0xa200 <ungetc>
    8618:	1a c0       	rjmp	.+52     	; 0x864e <conv_int+0xe8>
    861a:	2a 30       	cpi	r18, 0x0A	; 10
    861c:	40 f0       	brcs	.+16     	; 0x862e <conv_int+0xc8>
    861e:	c6 ff       	sbrs	r28, 6
    8620:	f8 cf       	rjmp	.-16     	; 0x8612 <conv_int+0xac>
    8622:	2f 7d       	andi	r18, 0xDF	; 223
    8624:	3f ee       	ldi	r19, 0xEF	; 239
    8626:	32 0f       	add	r19, r18
    8628:	36 30       	cpi	r19, 0x06	; 6
    862a:	98 f7       	brcc	.-26     	; 0x8612 <conv_int+0xac>
    862c:	27 50       	subi	r18, 0x07	; 7
    862e:	4c 2f       	mov	r20, r28
    8630:	c5 01       	movw	r24, r10
    8632:	b4 01       	movw	r22, r8
    8634:	0e 94 73 42 	call	0x84e6	; 0x84e6 <mulacc>
    8638:	4b 01       	movw	r8, r22
    863a:	5c 01       	movw	r10, r24
    863c:	c2 60       	ori	r28, 0x02	; 2
    863e:	01 50       	subi	r16, 0x01	; 1
    8640:	11 09       	sbc	r17, r1
    8642:	59 f0       	breq	.+22     	; 0x865a <conv_int+0xf4>
    8644:	c7 01       	movw	r24, r14
    8646:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    864a:	97 ff       	sbrs	r25, 7
    864c:	dc cf       	rjmp	.-72     	; 0x8606 <conv_int+0xa0>
    864e:	c1 fd       	sbrc	r28, 1
    8650:	04 c0       	rjmp	.+8      	; 0x865a <conv_int+0xf4>
    8652:	a7 cf       	rjmp	.-178    	; 0x85a2 <conv_int+0x3c>
    8654:	81 2c       	mov	r8, r1
    8656:	91 2c       	mov	r9, r1
    8658:	54 01       	movw	r10, r8
    865a:	c7 ff       	sbrs	r28, 7
    865c:	08 c0       	rjmp	.+16     	; 0x866e <conv_int+0x108>
    865e:	b0 94       	com	r11
    8660:	a0 94       	com	r10
    8662:	90 94       	com	r9
    8664:	80 94       	com	r8
    8666:	81 1c       	adc	r8, r1
    8668:	91 1c       	adc	r9, r1
    866a:	a1 1c       	adc	r10, r1
    866c:	b1 1c       	adc	r11, r1
    866e:	2c 2f       	mov	r18, r28
    8670:	b5 01       	movw	r22, r10
    8672:	a4 01       	movw	r20, r8
    8674:	c6 01       	movw	r24, r12
    8676:	0e 94 67 42 	call	0x84ce	; 0x84ce <putval>
    867a:	81 e0       	ldi	r24, 0x01	; 1
    867c:	df 91       	pop	r29
    867e:	cf 91       	pop	r28
    8680:	1f 91       	pop	r17
    8682:	0f 91       	pop	r16
    8684:	ff 90       	pop	r15
    8686:	ef 90       	pop	r14
    8688:	df 90       	pop	r13
    868a:	cf 90       	pop	r12
    868c:	bf 90       	pop	r11
    868e:	af 90       	pop	r10
    8690:	9f 90       	pop	r9
    8692:	8f 90       	pop	r8
    8694:	08 95       	ret

00008696 <conv_brk>:
    8696:	4f 92       	push	r4
    8698:	5f 92       	push	r5
    869a:	6f 92       	push	r6
    869c:	7f 92       	push	r7
    869e:	8f 92       	push	r8
    86a0:	9f 92       	push	r9
    86a2:	af 92       	push	r10
    86a4:	bf 92       	push	r11
    86a6:	cf 92       	push	r12
    86a8:	df 92       	push	r13
    86aa:	ef 92       	push	r14
    86ac:	ff 92       	push	r15
    86ae:	0f 93       	push	r16
    86b0:	1f 93       	push	r17
    86b2:	cf 93       	push	r28
    86b4:	df 93       	push	r29
    86b6:	cd b7       	in	r28, 0x3d	; 61
    86b8:	de b7       	in	r29, 0x3e	; 62
    86ba:	a0 97       	sbiw	r28, 0x20	; 32
    86bc:	cd bf       	out	0x3d, r28	; 61
    86be:	de bf       	out	0x3e, r29	; 62
    86c0:	5c 01       	movw	r10, r24
    86c2:	4b 01       	movw	r8, r22
    86c4:	7a 01       	movw	r14, r20
    86c6:	8e 01       	movw	r16, r28
    86c8:	0f 5f       	subi	r16, 0xFF	; 255
    86ca:	1f 4f       	sbci	r17, 0xFF	; 255
    86cc:	68 01       	movw	r12, r16
    86ce:	80 e2       	ldi	r24, 0x20	; 32
    86d0:	f8 01       	movw	r30, r16
    86d2:	11 92       	st	Z+, r1
    86d4:	8a 95       	dec	r24
    86d6:	e9 f7       	brne	.-6      	; 0x86d2 <conv_brk+0x3c>
    86d8:	f5 01       	movw	r30, r10
    86da:	53 80       	ldd	r5, Z+3	; 0x03
    86dc:	40 e0       	ldi	r20, 0x00	; 0
    86de:	50 e0       	ldi	r21, 0x00	; 0
    86e0:	61 2c       	mov	r6, r1
    86e2:	90 e0       	ldi	r25, 0x00	; 0
    86e4:	71 2c       	mov	r7, r1
    86e6:	a1 e0       	ldi	r26, 0x01	; 1
    86e8:	b0 e0       	ldi	r27, 0x00	; 0
    86ea:	f9 01       	movw	r30, r18
    86ec:	53 fc       	sbrc	r5, 3
    86ee:	85 91       	lpm	r24, Z+
    86f0:	53 fe       	sbrs	r5, 3
    86f2:	81 91       	ld	r24, Z+
    86f4:	8f 01       	movw	r16, r30
    86f6:	48 2e       	mov	r4, r24
    86f8:	9f 01       	movw	r18, r30
    86fa:	81 11       	cpse	r24, r1
    86fc:	03 c0       	rjmp	.+6      	; 0x8704 <conv_brk+0x6e>
    86fe:	80 e0       	ldi	r24, 0x00	; 0
    8700:	90 e0       	ldi	r25, 0x00	; 0
    8702:	96 c0       	rjmp	.+300    	; 0x8830 <conv_brk+0x19a>
    8704:	8e 35       	cpi	r24, 0x5E	; 94
    8706:	19 f4       	brne	.+6      	; 0x870e <conv_brk+0x78>
    8708:	41 15       	cp	r20, r1
    870a:	51 05       	cpc	r21, r1
    870c:	51 f1       	breq	.+84     	; 0x8762 <conv_brk+0xcc>
    870e:	67 2d       	mov	r22, r7
    8710:	70 e0       	ldi	r23, 0x00	; 0
    8712:	64 17       	cp	r22, r20
    8714:	75 07       	cpc	r23, r21
    8716:	3c f4       	brge	.+14     	; 0x8726 <conv_brk+0x90>
    8718:	8d 35       	cpi	r24, 0x5D	; 93
    871a:	61 f1       	breq	.+88     	; 0x8774 <conv_brk+0xde>
    871c:	8d 32       	cpi	r24, 0x2D	; 45
    871e:	19 f4       	brne	.+6      	; 0x8726 <conv_brk+0x90>
    8720:	99 23       	and	r25, r25
    8722:	11 f1       	breq	.+68     	; 0x8768 <conv_brk+0xd2>
    8724:	03 c0       	rjmp	.+6      	; 0x872c <conv_brk+0x96>
    8726:	99 23       	and	r25, r25
    8728:	09 f4       	brne	.+2      	; 0x872c <conv_brk+0x96>
    872a:	6d c0       	rjmp	.+218    	; 0x8806 <conv_brk+0x170>
    872c:	84 2d       	mov	r24, r4
    872e:	86 95       	lsr	r24
    8730:	86 95       	lsr	r24
    8732:	86 95       	lsr	r24
    8734:	f6 01       	movw	r30, r12
    8736:	e8 0f       	add	r30, r24
    8738:	f1 1d       	adc	r31, r1
    873a:	84 2d       	mov	r24, r4
    873c:	87 70       	andi	r24, 0x07	; 7
    873e:	8d 01       	movw	r16, r26
    8740:	02 c0       	rjmp	.+4      	; 0x8746 <conv_brk+0xb0>
    8742:	00 0f       	add	r16, r16
    8744:	11 1f       	adc	r17, r17
    8746:	8a 95       	dec	r24
    8748:	e2 f7       	brpl	.-8      	; 0x8742 <conv_brk+0xac>
    874a:	c8 01       	movw	r24, r16
    874c:	90 81       	ld	r25, Z
    874e:	89 2b       	or	r24, r25
    8750:	80 83       	st	Z, r24
    8752:	64 14       	cp	r6, r4
    8754:	59 f0       	breq	.+22     	; 0x876c <conv_brk+0xd6>
    8756:	46 14       	cp	r4, r6
    8758:	10 f4       	brcc	.+4      	; 0x875e <conv_brk+0xc8>
    875a:	43 94       	inc	r4
    875c:	e7 cf       	rjmp	.-50     	; 0x872c <conv_brk+0x96>
    875e:	4a 94       	dec	r4
    8760:	e5 cf       	rjmp	.-54     	; 0x872c <conv_brk+0x96>
    8762:	77 24       	eor	r7, r7
    8764:	73 94       	inc	r7
    8766:	03 c0       	rjmp	.+6      	; 0x876e <conv_brk+0xd8>
    8768:	91 e0       	ldi	r25, 0x01	; 1
    876a:	01 c0       	rjmp	.+2      	; 0x876e <conv_brk+0xd8>
    876c:	90 e0       	ldi	r25, 0x00	; 0
    876e:	4f 5f       	subi	r20, 0xFF	; 255
    8770:	5f 4f       	sbci	r21, 0xFF	; 255
    8772:	bb cf       	rjmp	.-138    	; 0x86ea <conv_brk+0x54>
    8774:	99 23       	and	r25, r25
    8776:	19 f0       	breq	.+6      	; 0x877e <conv_brk+0xe8>
    8778:	8e 81       	ldd	r24, Y+6	; 0x06
    877a:	80 62       	ori	r24, 0x20	; 32
    877c:	8e 83       	std	Y+6, r24	; 0x06
    877e:	71 10       	cpse	r7, r1
    8780:	03 c0       	rjmp	.+6      	; 0x8788 <conv_brk+0xf2>
    8782:	77 24       	eor	r7, r7
    8784:	73 94       	inc	r7
    8786:	19 c0       	rjmp	.+50     	; 0x87ba <conv_brk+0x124>
    8788:	f6 01       	movw	r30, r12
    878a:	9e 01       	movw	r18, r28
    878c:	2f 5d       	subi	r18, 0xDF	; 223
    878e:	3f 4f       	sbci	r19, 0xFF	; 255
    8790:	80 81       	ld	r24, Z
    8792:	80 95       	com	r24
    8794:	81 93       	st	Z+, r24
    8796:	2e 17       	cp	r18, r30
    8798:	3f 07       	cpc	r19, r31
    879a:	d1 f7       	brne	.-12     	; 0x8790 <conv_brk+0xfa>
    879c:	f2 cf       	rjmp	.-28     	; 0x8782 <conv_brk+0xec>
    879e:	e1 14       	cp	r14, r1
    87a0:	f1 04       	cpc	r15, r1
    87a2:	31 f0       	breq	.+12     	; 0x87b0 <conv_brk+0x11a>
    87a4:	f7 01       	movw	r30, r14
    87a6:	80 83       	st	Z, r24
    87a8:	b7 01       	movw	r22, r14
    87aa:	6f 5f       	subi	r22, 0xFF	; 255
    87ac:	7f 4f       	sbci	r23, 0xFF	; 255
    87ae:	7b 01       	movw	r14, r22
    87b0:	71 e0       	ldi	r23, 0x01	; 1
    87b2:	87 1a       	sub	r8, r23
    87b4:	91 08       	sbc	r9, r1
    87b6:	71 2c       	mov	r7, r1
    87b8:	f9 f0       	breq	.+62     	; 0x87f8 <conv_brk+0x162>
    87ba:	c5 01       	movw	r24, r10
    87bc:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    87c0:	97 fd       	sbrc	r25, 7
    87c2:	18 c0       	rjmp	.+48     	; 0x87f4 <conv_brk+0x15e>
    87c4:	fc 01       	movw	r30, r24
    87c6:	ff 27       	eor	r31, r31
    87c8:	23 e0       	ldi	r18, 0x03	; 3
    87ca:	f5 95       	asr	r31
    87cc:	e7 95       	ror	r30
    87ce:	2a 95       	dec	r18
    87d0:	e1 f7       	brne	.-8      	; 0x87ca <conv_brk+0x134>
    87d2:	ec 0d       	add	r30, r12
    87d4:	fd 1d       	adc	r31, r13
    87d6:	20 81       	ld	r18, Z
    87d8:	30 e0       	ldi	r19, 0x00	; 0
    87da:	ac 01       	movw	r20, r24
    87dc:	47 70       	andi	r20, 0x07	; 7
    87de:	55 27       	eor	r21, r21
    87e0:	02 c0       	rjmp	.+4      	; 0x87e6 <conv_brk+0x150>
    87e2:	35 95       	asr	r19
    87e4:	27 95       	ror	r18
    87e6:	4a 95       	dec	r20
    87e8:	e2 f7       	brpl	.-8      	; 0x87e2 <conv_brk+0x14c>
    87ea:	20 fd       	sbrc	r18, 0
    87ec:	d8 cf       	rjmp	.-80     	; 0x879e <conv_brk+0x108>
    87ee:	b5 01       	movw	r22, r10
    87f0:	0e 94 00 51 	call	0xa200	; 0xa200 <ungetc>
    87f4:	71 10       	cpse	r7, r1
    87f6:	83 cf       	rjmp	.-250    	; 0x86fe <conv_brk+0x68>
    87f8:	e1 14       	cp	r14, r1
    87fa:	f1 04       	cpc	r15, r1
    87fc:	11 f0       	breq	.+4      	; 0x8802 <conv_brk+0x16c>
    87fe:	f7 01       	movw	r30, r14
    8800:	10 82       	st	Z, r1
    8802:	c8 01       	movw	r24, r16
    8804:	15 c0       	rjmp	.+42     	; 0x8830 <conv_brk+0x19a>
    8806:	68 2f       	mov	r22, r24
    8808:	66 95       	lsr	r22
    880a:	66 95       	lsr	r22
    880c:	66 95       	lsr	r22
    880e:	f6 01       	movw	r30, r12
    8810:	e6 0f       	add	r30, r22
    8812:	f1 1d       	adc	r31, r1
    8814:	68 2f       	mov	r22, r24
    8816:	67 70       	andi	r22, 0x07	; 7
    8818:	8d 01       	movw	r16, r26
    881a:	02 c0       	rjmp	.+4      	; 0x8820 <conv_brk+0x18a>
    881c:	00 0f       	add	r16, r16
    881e:	11 1f       	adc	r17, r17
    8820:	6a 95       	dec	r22
    8822:	e2 f7       	brpl	.-8      	; 0x881c <conv_brk+0x186>
    8824:	b8 01       	movw	r22, r16
    8826:	70 81       	ld	r23, Z
    8828:	67 2b       	or	r22, r23
    882a:	60 83       	st	Z, r22
    882c:	68 2e       	mov	r6, r24
    882e:	9f cf       	rjmp	.-194    	; 0x876e <conv_brk+0xd8>
    8830:	a0 96       	adiw	r28, 0x20	; 32
    8832:	cd bf       	out	0x3d, r28	; 61
    8834:	de bf       	out	0x3e, r29	; 62
    8836:	df 91       	pop	r29
    8838:	cf 91       	pop	r28
    883a:	1f 91       	pop	r17
    883c:	0f 91       	pop	r16
    883e:	ff 90       	pop	r15
    8840:	ef 90       	pop	r14
    8842:	df 90       	pop	r13
    8844:	cf 90       	pop	r12
    8846:	bf 90       	pop	r11
    8848:	af 90       	pop	r10
    884a:	9f 90       	pop	r9
    884c:	8f 90       	pop	r8
    884e:	7f 90       	pop	r7
    8850:	6f 90       	pop	r6
    8852:	5f 90       	pop	r5
    8854:	4f 90       	pop	r4
    8856:	08 95       	ret

00008858 <conv_flt>:
    8858:	2f 92       	push	r2
    885a:	3f 92       	push	r3
    885c:	4f 92       	push	r4
    885e:	5f 92       	push	r5
    8860:	6f 92       	push	r6
    8862:	7f 92       	push	r7
    8864:	9f 92       	push	r9
    8866:	af 92       	push	r10
    8868:	bf 92       	push	r11
    886a:	cf 92       	push	r12
    886c:	df 92       	push	r13
    886e:	ef 92       	push	r14
    8870:	ff 92       	push	r15
    8872:	0f 93       	push	r16
    8874:	1f 93       	push	r17
    8876:	cf 93       	push	r28
    8878:	df 93       	push	r29
    887a:	6c 01       	movw	r12, r24
    887c:	8b 01       	movw	r16, r22
    887e:	1a 01       	movw	r2, r20
    8880:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    8884:	ec 01       	movw	r28, r24
    8886:	99 27       	eor	r25, r25
    8888:	8b 32       	cpi	r24, 0x2B	; 43
    888a:	91 05       	cpc	r25, r1
    888c:	29 f0       	breq	.+10     	; 0x8898 <conv_flt+0x40>
    888e:	8d 97       	sbiw	r24, 0x2d	; 45
    8890:	81 f4       	brne	.+32     	; 0x88b2 <conv_flt+0x5a>
    8892:	30 e8       	ldi	r19, 0x80	; 128
    8894:	93 2e       	mov	r9, r19
    8896:	01 c0       	rjmp	.+2      	; 0x889a <conv_flt+0x42>
    8898:	91 2c       	mov	r9, r1
    889a:	01 50       	subi	r16, 0x01	; 1
    889c:	11 09       	sbc	r17, r1
    889e:	11 f4       	brne	.+4      	; 0x88a4 <conv_flt+0x4c>
    88a0:	80 e0       	ldi	r24, 0x00	; 0
    88a2:	0c c1       	rjmp	.+536    	; 0x8abc <conv_flt+0x264>
    88a4:	c6 01       	movw	r24, r12
    88a6:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    88aa:	ec 01       	movw	r28, r24
    88ac:	97 ff       	sbrs	r25, 7
    88ae:	02 c0       	rjmp	.+4      	; 0x88b4 <conv_flt+0x5c>
    88b0:	f7 cf       	rjmp	.-18     	; 0x88a0 <conv_flt+0x48>
    88b2:	91 2c       	mov	r9, r1
    88b4:	ce 01       	movw	r24, r28
    88b6:	0e 94 4f 4f 	call	0x9e9e	; 0x9e9e <tolower>
    88ba:	89 36       	cpi	r24, 0x69	; 105
    88bc:	91 05       	cpc	r25, r1
    88be:	31 f0       	breq	.+12     	; 0x88cc <conv_flt+0x74>
    88c0:	8e 36       	cpi	r24, 0x6E	; 110
    88c2:	91 05       	cpc	r25, r1
    88c4:	99 f5       	brne	.+102    	; 0x892c <conv_flt+0xd4>
    88c6:	c0 e0       	ldi	r28, 0x00	; 0
    88c8:	d0 e1       	ldi	r29, 0x10	; 16
    88ca:	02 c0       	rjmp	.+4      	; 0x88d0 <conv_flt+0x78>
    88cc:	c3 e0       	ldi	r28, 0x03	; 3
    88ce:	d0 e1       	ldi	r29, 0x10	; 16
    88d0:	21 96       	adiw	r28, 0x01	; 1
    88d2:	fe 01       	movw	r30, r28
    88d4:	31 97       	sbiw	r30, 0x01	; 1
    88d6:	b4 90       	lpm	r11, Z
    88d8:	bb 20       	and	r11, r11
    88da:	c9 f0       	breq	.+50     	; 0x890e <conv_flt+0xb6>
    88dc:	01 50       	subi	r16, 0x01	; 1
    88de:	11 09       	sbc	r17, r1
    88e0:	91 f0       	breq	.+36     	; 0x8906 <conv_flt+0xae>
    88e2:	c6 01       	movw	r24, r12
    88e4:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    88e8:	7c 01       	movw	r14, r24
    88ea:	97 fd       	sbrc	r25, 7
    88ec:	0c c0       	rjmp	.+24     	; 0x8906 <conv_flt+0xae>
    88ee:	0e 94 4f 4f 	call	0x9e9e	; 0x9e9e <tolower>
    88f2:	99 27       	eor	r25, r25
    88f4:	eb 2d       	mov	r30, r11
    88f6:	f0 e0       	ldi	r31, 0x00	; 0
    88f8:	8e 17       	cp	r24, r30
    88fa:	9f 07       	cpc	r25, r31
    88fc:	49 f3       	breq	.-46     	; 0x88d0 <conv_flt+0x78>
    88fe:	b6 01       	movw	r22, r12
    8900:	c7 01       	movw	r24, r14
    8902:	0e 94 00 51 	call	0xa200	; 0xa200 <ungetc>
    8906:	c6 50       	subi	r28, 0x06	; 6
    8908:	d0 41       	sbci	r29, 0x10	; 16
    890a:	51 f6       	brne	.-108    	; 0x88a0 <conv_flt+0x48>
    890c:	03 c0       	rjmp	.+6      	; 0x8914 <conv_flt+0xbc>
    890e:	c3 50       	subi	r28, 0x03	; 3
    8910:	d0 41       	sbci	r29, 0x10	; 16
    8912:	29 f0       	breq	.+10     	; 0x891e <conv_flt+0xc6>
    8914:	80 e0       	ldi	r24, 0x00	; 0
    8916:	90 e0       	ldi	r25, 0x00	; 0
    8918:	a0 e8       	ldi	r26, 0x80	; 128
    891a:	bf e7       	ldi	r27, 0x7F	; 127
    891c:	04 c0       	rjmp	.+8      	; 0x8926 <conv_flt+0xce>
    891e:	80 e0       	ldi	r24, 0x00	; 0
    8920:	90 e0       	ldi	r25, 0x00	; 0
    8922:	a0 ec       	ldi	r26, 0xC0	; 192
    8924:	bf e7       	ldi	r27, 0x7F	; 127
    8926:	bc 01       	movw	r22, r24
    8928:	cd 01       	movw	r24, r26
    892a:	b8 c0       	rjmp	.+368    	; 0x8a9c <conv_flt+0x244>
    892c:	41 2c       	mov	r4, r1
    892e:	51 2c       	mov	r5, r1
    8930:	32 01       	movw	r6, r4
    8932:	e1 2c       	mov	r14, r1
    8934:	f1 2c       	mov	r15, r1
    8936:	2c 2f       	mov	r18, r28
    8938:	20 53       	subi	r18, 0x30	; 48
    893a:	2a 30       	cpi	r18, 0x0A	; 10
    893c:	10 f5       	brcc	.+68     	; 0x8982 <conv_flt+0x12a>
    893e:	e9 2d       	mov	r30, r9
    8940:	e2 60       	ori	r30, 0x02	; 2
    8942:	be 2e       	mov	r11, r30
    8944:	89 2d       	mov	r24, r9
    8946:	88 70       	andi	r24, 0x08	; 8
    8948:	92 fe       	sbrs	r9, 2
    894a:	06 c0       	rjmp	.+12     	; 0x8958 <conv_flt+0x100>
    894c:	81 11       	cpse	r24, r1
    894e:	20 c0       	rjmp	.+64     	; 0x8990 <conv_flt+0x138>
    8950:	ff ef       	ldi	r31, 0xFF	; 255
    8952:	ef 1a       	sub	r14, r31
    8954:	ff 0a       	sbc	r15, r31
    8956:	1c c0       	rjmp	.+56     	; 0x8990 <conv_flt+0x138>
    8958:	88 23       	and	r24, r24
    895a:	19 f0       	breq	.+6      	; 0x8962 <conv_flt+0x10a>
    895c:	81 e0       	ldi	r24, 0x01	; 1
    895e:	e8 1a       	sub	r14, r24
    8960:	f1 08       	sbc	r15, r1
    8962:	40 e2       	ldi	r20, 0x20	; 32
    8964:	c3 01       	movw	r24, r6
    8966:	b2 01       	movw	r22, r4
    8968:	0e 94 73 42 	call	0x84e6	; 0x84e6 <mulacc>
    896c:	2b 01       	movw	r4, r22
    896e:	3c 01       	movw	r6, r24
    8970:	68 39       	cpi	r22, 0x98	; 152
    8972:	79 49       	sbci	r23, 0x99	; 153
    8974:	89 49       	sbci	r24, 0x99	; 153
    8976:	99 41       	sbci	r25, 0x19	; 25
    8978:	58 f0       	brcs	.+22     	; 0x8990 <conv_flt+0x138>
    897a:	f9 2d       	mov	r31, r9
    897c:	f6 60       	ori	r31, 0x06	; 6
    897e:	bf 2e       	mov	r11, r31
    8980:	07 c0       	rjmp	.+14     	; 0x8990 <conv_flt+0x138>
    8982:	2e 3f       	cpi	r18, 0xFE	; 254
    8984:	89 f4       	brne	.+34     	; 0x89a8 <conv_flt+0x150>
    8986:	93 fc       	sbrc	r9, 3
    8988:	0f c0       	rjmp	.+30     	; 0x89a8 <conv_flt+0x150>
    898a:	29 2d       	mov	r18, r9
    898c:	28 60       	ori	r18, 0x08	; 8
    898e:	b2 2e       	mov	r11, r18
    8990:	01 50       	subi	r16, 0x01	; 1
    8992:	11 09       	sbc	r17, r1
    8994:	41 f0       	breq	.+16     	; 0x89a6 <conv_flt+0x14e>
    8996:	c6 01       	movw	r24, r12
    8998:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    899c:	ec 01       	movw	r28, r24
    899e:	9b 2c       	mov	r9, r11
    89a0:	97 ff       	sbrs	r25, 7
    89a2:	c9 cf       	rjmp	.-110    	; 0x8936 <conv_flt+0xde>
    89a4:	01 c0       	rjmp	.+2      	; 0x89a8 <conv_flt+0x150>
    89a6:	9b 2c       	mov	r9, r11
    89a8:	91 fe       	sbrs	r9, 1
    89aa:	7a cf       	rjmp	.-268    	; 0x88a0 <conv_flt+0x48>
    89ac:	ce 01       	movw	r24, r28
    89ae:	8f 7d       	andi	r24, 0xDF	; 223
    89b0:	99 27       	eor	r25, r25
    89b2:	85 34       	cpi	r24, 0x45	; 69
    89b4:	91 05       	cpc	r25, r1
    89b6:	09 f0       	breq	.+2      	; 0x89ba <conv_flt+0x162>
    89b8:	42 c0       	rjmp	.+132    	; 0x8a3e <conv_flt+0x1e6>
    89ba:	58 01       	movw	r10, r16
    89bc:	81 e0       	ldi	r24, 0x01	; 1
    89be:	a8 1a       	sub	r10, r24
    89c0:	b1 08       	sbc	r11, r1
    89c2:	09 f4       	brne	.+2      	; 0x89c6 <conv_flt+0x16e>
    89c4:	6d cf       	rjmp	.-294    	; 0x88a0 <conv_flt+0x48>
    89c6:	c6 01       	movw	r24, r12
    89c8:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    89cc:	ec 01       	movw	r28, r24
    89ce:	97 fd       	sbrc	r25, 7
    89d0:	67 cf       	rjmp	.-306    	; 0x88a0 <conv_flt+0x48>
    89d2:	99 27       	eor	r25, r25
    89d4:	8b 32       	cpi	r24, 0x2B	; 43
    89d6:	91 05       	cpc	r25, r1
    89d8:	29 f0       	breq	.+10     	; 0x89e4 <conv_flt+0x18c>
    89da:	8d 97       	sbiw	r24, 0x2d	; 45
    89dc:	69 f4       	brne	.+26     	; 0x89f8 <conv_flt+0x1a0>
    89de:	e9 2d       	mov	r30, r9
    89e0:	e0 61       	ori	r30, 0x10	; 16
    89e2:	9e 2e       	mov	r9, r30
    89e4:	58 01       	movw	r10, r16
    89e6:	f2 e0       	ldi	r31, 0x02	; 2
    89e8:	af 1a       	sub	r10, r31
    89ea:	b1 08       	sbc	r11, r1
    89ec:	09 f4       	brne	.+2      	; 0x89f0 <conv_flt+0x198>
    89ee:	58 cf       	rjmp	.-336    	; 0x88a0 <conv_flt+0x48>
    89f0:	c6 01       	movw	r24, r12
    89f2:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    89f6:	ec 01       	movw	r28, r24
    89f8:	ce 01       	movw	r24, r28
    89fa:	c0 97       	sbiw	r24, 0x30	; 48
    89fc:	0a 97       	sbiw	r24, 0x0a	; 10
    89fe:	08 f0       	brcs	.+2      	; 0x8a02 <conv_flt+0x1aa>
    8a00:	4f cf       	rjmp	.-354    	; 0x88a0 <conv_flt+0x48>
    8a02:	85 01       	movw	r16, r10
    8a04:	a1 2c       	mov	r10, r1
    8a06:	b1 2c       	mov	r11, r1
    8a08:	b5 01       	movw	r22, r10
    8a0a:	bb 0c       	add	r11, r11
    8a0c:	88 0b       	sbc	r24, r24
    8a0e:	99 0b       	sbc	r25, r25
    8a10:	2c 2f       	mov	r18, r28
    8a12:	20 53       	subi	r18, 0x30	; 48
    8a14:	40 e2       	ldi	r20, 0x20	; 32
    8a16:	0e 94 73 42 	call	0x84e6	; 0x84e6 <mulacc>
    8a1a:	5b 01       	movw	r10, r22
    8a1c:	01 50       	subi	r16, 0x01	; 1
    8a1e:	11 09       	sbc	r17, r1
    8a20:	39 f0       	breq	.+14     	; 0x8a30 <conv_flt+0x1d8>
    8a22:	c6 01       	movw	r24, r12
    8a24:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    8a28:	ec 01       	movw	r28, r24
    8a2a:	c0 97       	sbiw	r24, 0x30	; 48
    8a2c:	0a 97       	sbiw	r24, 0x0a	; 10
    8a2e:	60 f3       	brcs	.-40     	; 0x8a08 <conv_flt+0x1b0>
    8a30:	94 fe       	sbrs	r9, 4
    8a32:	03 c0       	rjmp	.+6      	; 0x8a3a <conv_flt+0x1e2>
    8a34:	b1 94       	neg	r11
    8a36:	a1 94       	neg	r10
    8a38:	b1 08       	sbc	r11, r1
    8a3a:	ea 0c       	add	r14, r10
    8a3c:	fb 1c       	adc	r15, r11
    8a3e:	01 2b       	or	r16, r17
    8a40:	31 f0       	breq	.+12     	; 0x8a4e <conv_flt+0x1f6>
    8a42:	d7 fd       	sbrc	r29, 7
    8a44:	04 c0       	rjmp	.+8      	; 0x8a4e <conv_flt+0x1f6>
    8a46:	b6 01       	movw	r22, r12
    8a48:	ce 01       	movw	r24, r28
    8a4a:	0e 94 00 51 	call	0xa200	; 0xa200 <ungetc>
    8a4e:	c3 01       	movw	r24, r6
    8a50:	b2 01       	movw	r22, r4
    8a52:	0e 94 7f 48 	call	0x90fe	; 0x90fe <__floatunsisf>
    8a56:	f7 fe       	sbrs	r15, 7
    8a58:	06 c0       	rjmp	.+12     	; 0x8a66 <conv_flt+0x20e>
    8a5a:	f1 94       	neg	r15
    8a5c:	e1 94       	neg	r14
    8a5e:	f1 08       	sbc	r15, r1
    8a60:	cf e1       	ldi	r28, 0x1F	; 31
    8a62:	d0 e1       	ldi	r29, 0x10	; 16
    8a64:	02 c0       	rjmp	.+4      	; 0x8a6a <conv_flt+0x212>
    8a66:	c7 e3       	ldi	r28, 0x37	; 55
    8a68:	d0 e1       	ldi	r29, 0x10	; 16
    8a6a:	6e 01       	movw	r12, r28
    8a6c:	28 e1       	ldi	r18, 0x18	; 24
    8a6e:	c2 1a       	sub	r12, r18
    8a70:	d1 08       	sbc	r13, r1
    8a72:	00 e2       	ldi	r16, 0x20	; 32
    8a74:	10 e0       	ldi	r17, 0x00	; 0
    8a76:	e0 16       	cp	r14, r16
    8a78:	f1 06       	cpc	r15, r17
    8a7a:	50 f0       	brcs	.+20     	; 0x8a90 <conv_flt+0x238>
    8a7c:	fe 01       	movw	r30, r28
    8a7e:	25 91       	lpm	r18, Z+
    8a80:	35 91       	lpm	r19, Z+
    8a82:	45 91       	lpm	r20, Z+
    8a84:	54 91       	lpm	r21, Z
    8a86:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    8a8a:	e0 1a       	sub	r14, r16
    8a8c:	f1 0a       	sbc	r15, r17
    8a8e:	f3 cf       	rjmp	.-26     	; 0x8a76 <conv_flt+0x21e>
    8a90:	24 97       	sbiw	r28, 0x04	; 4
    8a92:	16 95       	lsr	r17
    8a94:	07 95       	ror	r16
    8a96:	cc 16       	cp	r12, r28
    8a98:	dd 06       	cpc	r13, r29
    8a9a:	69 f7       	brne	.-38     	; 0x8a76 <conv_flt+0x21e>
    8a9c:	97 fe       	sbrs	r9, 7
    8a9e:	05 c0       	rjmp	.+10     	; 0x8aaa <conv_flt+0x252>
    8aa0:	dc 01       	movw	r26, r24
    8aa2:	cb 01       	movw	r24, r22
    8aa4:	b0 58       	subi	r27, 0x80	; 128
    8aa6:	bc 01       	movw	r22, r24
    8aa8:	cd 01       	movw	r24, r26
    8aaa:	21 14       	cp	r2, r1
    8aac:	31 04       	cpc	r3, r1
    8aae:	29 f0       	breq	.+10     	; 0x8aba <conv_flt+0x262>
    8ab0:	f1 01       	movw	r30, r2
    8ab2:	60 83       	st	Z, r22
    8ab4:	71 83       	std	Z+1, r23	; 0x01
    8ab6:	82 83       	std	Z+2, r24	; 0x02
    8ab8:	93 83       	std	Z+3, r25	; 0x03
    8aba:	81 e0       	ldi	r24, 0x01	; 1
    8abc:	df 91       	pop	r29
    8abe:	cf 91       	pop	r28
    8ac0:	1f 91       	pop	r17
    8ac2:	0f 91       	pop	r16
    8ac4:	ff 90       	pop	r15
    8ac6:	ef 90       	pop	r14
    8ac8:	df 90       	pop	r13
    8aca:	cf 90       	pop	r12
    8acc:	bf 90       	pop	r11
    8ace:	af 90       	pop	r10
    8ad0:	9f 90       	pop	r9
    8ad2:	7f 90       	pop	r7
    8ad4:	6f 90       	pop	r6
    8ad6:	5f 90       	pop	r5
    8ad8:	4f 90       	pop	r4
    8ada:	3f 90       	pop	r3
    8adc:	2f 90       	pop	r2
    8ade:	08 95       	ret

00008ae0 <vfscanf>:
    8ae0:	6f 92       	push	r6
    8ae2:	7f 92       	push	r7
    8ae4:	8f 92       	push	r8
    8ae6:	9f 92       	push	r9
    8ae8:	af 92       	push	r10
    8aea:	bf 92       	push	r11
    8aec:	cf 92       	push	r12
    8aee:	df 92       	push	r13
    8af0:	ef 92       	push	r14
    8af2:	ff 92       	push	r15
    8af4:	0f 93       	push	r16
    8af6:	1f 93       	push	r17
    8af8:	cf 93       	push	r28
    8afa:	df 93       	push	r29
    8afc:	5c 01       	movw	r10, r24
    8afe:	eb 01       	movw	r28, r22
    8b00:	4a 01       	movw	r8, r20
    8b02:	fc 01       	movw	r30, r24
    8b04:	16 82       	std	Z+6, r1	; 0x06
    8b06:	17 82       	std	Z+7, r1	; 0x07
    8b08:	61 2c       	mov	r6, r1
    8b0a:	f5 01       	movw	r30, r10
    8b0c:	03 81       	ldd	r16, Z+3	; 0x03
    8b0e:	fe 01       	movw	r30, r28
    8b10:	03 fd       	sbrc	r16, 3
    8b12:	85 91       	lpm	r24, Z+
    8b14:	03 ff       	sbrs	r16, 3
    8b16:	81 91       	ld	r24, Z+
    8b18:	18 2f       	mov	r17, r24
    8b1a:	ef 01       	movw	r28, r30
    8b1c:	88 23       	and	r24, r24
    8b1e:	09 f4       	brne	.+2      	; 0x8b22 <vfscanf+0x42>
    8b20:	0f c1       	rjmp	.+542    	; 0x8d40 <vfscanf+0x260>
    8b22:	90 e0       	ldi	r25, 0x00	; 0
    8b24:	0e 94 46 4f 	call	0x9e8c	; 0x9e8c <isspace>
    8b28:	89 2b       	or	r24, r25
    8b2a:	21 f0       	breq	.+8      	; 0x8b34 <vfscanf+0x54>
    8b2c:	c5 01       	movw	r24, r10
    8b2e:	0e 94 9a 42 	call	0x8534	; 0x8534 <skip_spaces>
    8b32:	eb cf       	rjmp	.-42     	; 0x8b0a <vfscanf+0x2a>
    8b34:	15 32       	cpi	r17, 0x25	; 37
    8b36:	41 f4       	brne	.+16     	; 0x8b48 <vfscanf+0x68>
    8b38:	fe 01       	movw	r30, r28
    8b3a:	03 fd       	sbrc	r16, 3
    8b3c:	15 91       	lpm	r17, Z+
    8b3e:	03 ff       	sbrs	r16, 3
    8b40:	11 91       	ld	r17, Z+
    8b42:	ef 01       	movw	r28, r30
    8b44:	15 32       	cpi	r17, 0x25	; 37
    8b46:	81 f4       	brne	.+32     	; 0x8b68 <vfscanf+0x88>
    8b48:	c5 01       	movw	r24, r10
    8b4a:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    8b4e:	97 fd       	sbrc	r25, 7
    8b50:	f5 c0       	rjmp	.+490    	; 0x8d3c <vfscanf+0x25c>
    8b52:	41 2f       	mov	r20, r17
    8b54:	50 e0       	ldi	r21, 0x00	; 0
    8b56:	9c 01       	movw	r18, r24
    8b58:	33 27       	eor	r19, r19
    8b5a:	24 17       	cp	r18, r20
    8b5c:	35 07       	cpc	r19, r21
    8b5e:	a9 f2       	breq	.-86     	; 0x8b0a <vfscanf+0x2a>
    8b60:	b5 01       	movw	r22, r10
    8b62:	0e 94 00 51 	call	0xa200	; 0xa200 <ungetc>
    8b66:	ec c0       	rjmp	.+472    	; 0x8d40 <vfscanf+0x260>
    8b68:	1a 32       	cpi	r17, 0x2A	; 42
    8b6a:	41 f4       	brne	.+16     	; 0x8b7c <vfscanf+0x9c>
    8b6c:	03 fd       	sbrc	r16, 3
    8b6e:	15 91       	lpm	r17, Z+
    8b70:	03 ff       	sbrs	r16, 3
    8b72:	11 91       	ld	r17, Z+
    8b74:	ef 01       	movw	r28, r30
    8b76:	77 24       	eor	r7, r7
    8b78:	73 94       	inc	r7
    8b7a:	01 c0       	rjmp	.+2      	; 0x8b7e <vfscanf+0x9e>
    8b7c:	71 2c       	mov	r7, r1
    8b7e:	e1 2c       	mov	r14, r1
    8b80:	f1 2c       	mov	r15, r1
    8b82:	20 ed       	ldi	r18, 0xD0	; 208
    8b84:	21 0f       	add	r18, r17
    8b86:	2a 30       	cpi	r18, 0x0A	; 10
    8b88:	88 f4       	brcc	.+34     	; 0x8bac <vfscanf+0xcc>
    8b8a:	f7 2d       	mov	r31, r7
    8b8c:	f2 60       	ori	r31, 0x02	; 2
    8b8e:	7f 2e       	mov	r7, r31
    8b90:	b7 01       	movw	r22, r14
    8b92:	80 e0       	ldi	r24, 0x00	; 0
    8b94:	90 e0       	ldi	r25, 0x00	; 0
    8b96:	40 e2       	ldi	r20, 0x20	; 32
    8b98:	0e 94 73 42 	call	0x84e6	; 0x84e6 <mulacc>
    8b9c:	7b 01       	movw	r14, r22
    8b9e:	fe 01       	movw	r30, r28
    8ba0:	03 fd       	sbrc	r16, 3
    8ba2:	15 91       	lpm	r17, Z+
    8ba4:	03 ff       	sbrs	r16, 3
    8ba6:	11 91       	ld	r17, Z+
    8ba8:	ef 01       	movw	r28, r30
    8baa:	eb cf       	rjmp	.-42     	; 0x8b82 <vfscanf+0xa2>
    8bac:	71 fe       	sbrs	r7, 1
    8bae:	04 c0       	rjmp	.+8      	; 0x8bb8 <vfscanf+0xd8>
    8bb0:	e1 14       	cp	r14, r1
    8bb2:	f1 04       	cpc	r15, r1
    8bb4:	21 f4       	brne	.+8      	; 0x8bbe <vfscanf+0xde>
    8bb6:	c4 c0       	rjmp	.+392    	; 0x8d40 <vfscanf+0x260>
    8bb8:	ee 24       	eor	r14, r14
    8bba:	ea 94       	dec	r14
    8bbc:	fe 2c       	mov	r15, r14
    8bbe:	18 36       	cpi	r17, 0x68	; 104
    8bc0:	19 f0       	breq	.+6      	; 0x8bc8 <vfscanf+0xe8>
    8bc2:	1c 36       	cpi	r17, 0x6C	; 108
    8bc4:	61 f0       	breq	.+24     	; 0x8bde <vfscanf+0xfe>
    8bc6:	14 c0       	rjmp	.+40     	; 0x8bf0 <vfscanf+0x110>
    8bc8:	fe 01       	movw	r30, r28
    8bca:	03 fd       	sbrc	r16, 3
    8bcc:	15 91       	lpm	r17, Z+
    8bce:	03 ff       	sbrs	r16, 3
    8bd0:	11 91       	ld	r17, Z+
    8bd2:	ef 01       	movw	r28, r30
    8bd4:	18 36       	cpi	r17, 0x68	; 104
    8bd6:	61 f4       	brne	.+24     	; 0x8bf0 <vfscanf+0x110>
    8bd8:	87 2d       	mov	r24, r7
    8bda:	88 60       	ori	r24, 0x08	; 8
    8bdc:	78 2e       	mov	r7, r24
    8bde:	97 2d       	mov	r25, r7
    8be0:	94 60       	ori	r25, 0x04	; 4
    8be2:	79 2e       	mov	r7, r25
    8be4:	fe 01       	movw	r30, r28
    8be6:	03 fd       	sbrc	r16, 3
    8be8:	15 91       	lpm	r17, Z+
    8bea:	03 ff       	sbrs	r16, 3
    8bec:	11 91       	ld	r17, Z+
    8bee:	ef 01       	movw	r28, r30
    8bf0:	11 23       	and	r17, r17
    8bf2:	09 f4       	brne	.+2      	; 0x8bf6 <vfscanf+0x116>
    8bf4:	a5 c0       	rjmp	.+330    	; 0x8d40 <vfscanf+0x260>
    8bf6:	61 2f       	mov	r22, r17
    8bf8:	70 e0       	ldi	r23, 0x00	; 0
    8bfa:	8e ee       	ldi	r24, 0xEE	; 238
    8bfc:	9f e0       	ldi	r25, 0x0F	; 15
    8bfe:	0e 94 57 4f 	call	0x9eae	; 0x9eae <strchr_P>
    8c02:	89 2b       	or	r24, r25
    8c04:	09 f4       	brne	.+2      	; 0x8c08 <vfscanf+0x128>
    8c06:	9c c0       	rjmp	.+312    	; 0x8d40 <vfscanf+0x260>
    8c08:	70 fc       	sbrc	r7, 0
    8c0a:	07 c0       	rjmp	.+14     	; 0x8c1a <vfscanf+0x13a>
    8c0c:	f4 01       	movw	r30, r8
    8c0e:	c0 80       	ld	r12, Z
    8c10:	d1 80       	ldd	r13, Z+1	; 0x01
    8c12:	c4 01       	movw	r24, r8
    8c14:	02 96       	adiw	r24, 0x02	; 2
    8c16:	4c 01       	movw	r8, r24
    8c18:	02 c0       	rjmp	.+4      	; 0x8c1e <vfscanf+0x13e>
    8c1a:	c1 2c       	mov	r12, r1
    8c1c:	d1 2c       	mov	r13, r1
    8c1e:	1e 36       	cpi	r17, 0x6E	; 110
    8c20:	51 f4       	brne	.+20     	; 0x8c36 <vfscanf+0x156>
    8c22:	f5 01       	movw	r30, r10
    8c24:	46 81       	ldd	r20, Z+6	; 0x06
    8c26:	57 81       	ldd	r21, Z+7	; 0x07
    8c28:	60 e0       	ldi	r22, 0x00	; 0
    8c2a:	70 e0       	ldi	r23, 0x00	; 0
    8c2c:	27 2d       	mov	r18, r7
    8c2e:	c6 01       	movw	r24, r12
    8c30:	0e 94 67 42 	call	0x84ce	; 0x84ce <putval>
    8c34:	6a cf       	rjmp	.-300    	; 0x8b0a <vfscanf+0x2a>
    8c36:	13 36       	cpi	r17, 0x63	; 99
    8c38:	b9 f4       	brne	.+46     	; 0x8c68 <vfscanf+0x188>
    8c3a:	71 fc       	sbrc	r7, 1
    8c3c:	03 c0       	rjmp	.+6      	; 0x8c44 <vfscanf+0x164>
    8c3e:	ee 24       	eor	r14, r14
    8c40:	e3 94       	inc	r14
    8c42:	f1 2c       	mov	r15, r1
    8c44:	c5 01       	movw	r24, r10
    8c46:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    8c4a:	97 fd       	sbrc	r25, 7
    8c4c:	77 c0       	rjmp	.+238    	; 0x8d3c <vfscanf+0x25c>
    8c4e:	c1 14       	cp	r12, r1
    8c50:	d1 04       	cpc	r13, r1
    8c52:	29 f0       	breq	.+10     	; 0x8c5e <vfscanf+0x17e>
    8c54:	f6 01       	movw	r30, r12
    8c56:	80 83       	st	Z, r24
    8c58:	c6 01       	movw	r24, r12
    8c5a:	01 96       	adiw	r24, 0x01	; 1
    8c5c:	6c 01       	movw	r12, r24
    8c5e:	91 e0       	ldi	r25, 0x01	; 1
    8c60:	e9 1a       	sub	r14, r25
    8c62:	f1 08       	sbc	r15, r1
    8c64:	79 f7       	brne	.-34     	; 0x8c44 <vfscanf+0x164>
    8c66:	66 c0       	rjmp	.+204    	; 0x8d34 <vfscanf+0x254>
    8c68:	1b 35       	cpi	r17, 0x5B	; 91
    8c6a:	59 f4       	brne	.+22     	; 0x8c82 <vfscanf+0x1a2>
    8c6c:	9e 01       	movw	r18, r28
    8c6e:	a6 01       	movw	r20, r12
    8c70:	b7 01       	movw	r22, r14
    8c72:	c5 01       	movw	r24, r10
    8c74:	0e 94 4b 43 	call	0x8696	; 0x8696 <conv_brk>
    8c78:	ec 01       	movw	r28, r24
    8c7a:	89 2b       	or	r24, r25
    8c7c:	09 f0       	breq	.+2      	; 0x8c80 <vfscanf+0x1a0>
    8c7e:	5a c0       	rjmp	.+180    	; 0x8d34 <vfscanf+0x254>
    8c80:	54 c0       	rjmp	.+168    	; 0x8d2a <vfscanf+0x24a>
    8c82:	c5 01       	movw	r24, r10
    8c84:	0e 94 9a 42 	call	0x8534	; 0x8534 <skip_spaces>
    8c88:	97 fd       	sbrc	r25, 7
    8c8a:	58 c0       	rjmp	.+176    	; 0x8d3c <vfscanf+0x25c>
    8c8c:	1f 36       	cpi	r17, 0x6F	; 111
    8c8e:	e1 f1       	breq	.+120    	; 0x8d08 <vfscanf+0x228>
    8c90:	40 f4       	brcc	.+16     	; 0x8ca2 <vfscanf+0x1c2>
    8c92:	14 36       	cpi	r17, 0x64	; 100
    8c94:	a9 f1       	breq	.+106    	; 0x8d00 <vfscanf+0x220>
    8c96:	19 36       	cpi	r17, 0x69	; 105
    8c98:	d1 f1       	breq	.+116    	; 0x8d0e <vfscanf+0x22e>
    8c9a:	18 35       	cpi	r17, 0x58	; 88
    8c9c:	09 f0       	breq	.+2      	; 0x8ca0 <vfscanf+0x1c0>
    8c9e:	3e c0       	rjmp	.+124    	; 0x8d1c <vfscanf+0x23c>
    8ca0:	2b c0       	rjmp	.+86     	; 0x8cf8 <vfscanf+0x218>
    8ca2:	13 37       	cpi	r17, 0x73	; 115
    8ca4:	a9 f0       	breq	.+42     	; 0x8cd0 <vfscanf+0x1f0>
    8ca6:	18 f4       	brcc	.+6      	; 0x8cae <vfscanf+0x1ce>
    8ca8:	10 37       	cpi	r17, 0x70	; 112
    8caa:	31 f1       	breq	.+76     	; 0x8cf8 <vfscanf+0x218>
    8cac:	37 c0       	rjmp	.+110    	; 0x8d1c <vfscanf+0x23c>
    8cae:	15 37       	cpi	r17, 0x75	; 117
    8cb0:	39 f1       	breq	.+78     	; 0x8d00 <vfscanf+0x220>
    8cb2:	18 37       	cpi	r17, 0x78	; 120
    8cb4:	09 f1       	breq	.+66     	; 0x8cf8 <vfscanf+0x218>
    8cb6:	32 c0       	rjmp	.+100    	; 0x8d1c <vfscanf+0x23c>
    8cb8:	c1 14       	cp	r12, r1
    8cba:	d1 04       	cpc	r13, r1
    8cbc:	29 f0       	breq	.+10     	; 0x8cc8 <vfscanf+0x1e8>
    8cbe:	f6 01       	movw	r30, r12
    8cc0:	00 83       	st	Z, r16
    8cc2:	c6 01       	movw	r24, r12
    8cc4:	01 96       	adiw	r24, 0x01	; 1
    8cc6:	6c 01       	movw	r12, r24
    8cc8:	91 e0       	ldi	r25, 0x01	; 1
    8cca:	e9 1a       	sub	r14, r25
    8ccc:	f1 08       	sbc	r15, r1
    8cce:	71 f0       	breq	.+28     	; 0x8cec <vfscanf+0x20c>
    8cd0:	c5 01       	movw	r24, r10
    8cd2:	0e 94 eb 4f 	call	0x9fd6	; 0x9fd6 <fgetc>
    8cd6:	8c 01       	movw	r16, r24
    8cd8:	97 fd       	sbrc	r25, 7
    8cda:	08 c0       	rjmp	.+16     	; 0x8cec <vfscanf+0x20c>
    8cdc:	0e 94 46 4f 	call	0x9e8c	; 0x9e8c <isspace>
    8ce0:	89 2b       	or	r24, r25
    8ce2:	51 f3       	breq	.-44     	; 0x8cb8 <vfscanf+0x1d8>
    8ce4:	b5 01       	movw	r22, r10
    8ce6:	c8 01       	movw	r24, r16
    8ce8:	0e 94 00 51 	call	0xa200	; 0xa200 <ungetc>
    8cec:	c1 14       	cp	r12, r1
    8cee:	d1 04       	cpc	r13, r1
    8cf0:	09 f1       	breq	.+66     	; 0x8d34 <vfscanf+0x254>
    8cf2:	f6 01       	movw	r30, r12
    8cf4:	10 82       	st	Z, r1
    8cf6:	1e c0       	rjmp	.+60     	; 0x8d34 <vfscanf+0x254>
    8cf8:	f7 2d       	mov	r31, r7
    8cfa:	f0 64       	ori	r31, 0x40	; 64
    8cfc:	7f 2e       	mov	r7, r31
    8cfe:	07 c0       	rjmp	.+14     	; 0x8d0e <vfscanf+0x22e>
    8d00:	87 2d       	mov	r24, r7
    8d02:	80 62       	ori	r24, 0x20	; 32
    8d04:	78 2e       	mov	r7, r24
    8d06:	03 c0       	rjmp	.+6      	; 0x8d0e <vfscanf+0x22e>
    8d08:	97 2d       	mov	r25, r7
    8d0a:	90 61       	ori	r25, 0x10	; 16
    8d0c:	79 2e       	mov	r7, r25
    8d0e:	27 2d       	mov	r18, r7
    8d10:	a6 01       	movw	r20, r12
    8d12:	b7 01       	movw	r22, r14
    8d14:	c5 01       	movw	r24, r10
    8d16:	0e 94 b3 42 	call	0x8566	; 0x8566 <conv_int>
    8d1a:	05 c0       	rjmp	.+10     	; 0x8d26 <vfscanf+0x246>
    8d1c:	a6 01       	movw	r20, r12
    8d1e:	b7 01       	movw	r22, r14
    8d20:	c5 01       	movw	r24, r10
    8d22:	0e 94 2c 44 	call	0x8858	; 0x8858 <conv_flt>
    8d26:	81 11       	cpse	r24, r1
    8d28:	05 c0       	rjmp	.+10     	; 0x8d34 <vfscanf+0x254>
    8d2a:	f5 01       	movw	r30, r10
    8d2c:	83 81       	ldd	r24, Z+3	; 0x03
    8d2e:	80 73       	andi	r24, 0x30	; 48
    8d30:	29 f4       	brne	.+10     	; 0x8d3c <vfscanf+0x25c>
    8d32:	06 c0       	rjmp	.+12     	; 0x8d40 <vfscanf+0x260>
    8d34:	70 fc       	sbrc	r7, 0
    8d36:	e9 ce       	rjmp	.-558    	; 0x8b0a <vfscanf+0x2a>
    8d38:	63 94       	inc	r6
    8d3a:	e7 ce       	rjmp	.-562    	; 0x8b0a <vfscanf+0x2a>
    8d3c:	66 20       	and	r6, r6
    8d3e:	19 f0       	breq	.+6      	; 0x8d46 <vfscanf+0x266>
    8d40:	86 2d       	mov	r24, r6
    8d42:	90 e0       	ldi	r25, 0x00	; 0
    8d44:	02 c0       	rjmp	.+4      	; 0x8d4a <vfscanf+0x26a>
    8d46:	8f ef       	ldi	r24, 0xFF	; 255
    8d48:	9f ef       	ldi	r25, 0xFF	; 255
    8d4a:	df 91       	pop	r29
    8d4c:	cf 91       	pop	r28
    8d4e:	1f 91       	pop	r17
    8d50:	0f 91       	pop	r16
    8d52:	ff 90       	pop	r15
    8d54:	ef 90       	pop	r14
    8d56:	df 90       	pop	r13
    8d58:	cf 90       	pop	r12
    8d5a:	bf 90       	pop	r11
    8d5c:	af 90       	pop	r10
    8d5e:	9f 90       	pop	r9
    8d60:	8f 90       	pop	r8
    8d62:	7f 90       	pop	r7
    8d64:	6f 90       	pop	r6
    8d66:	08 95       	ret

00008d68 <__subsf3>:
    8d68:	50 58       	subi	r21, 0x80	; 128

00008d6a <__addsf3>:
    8d6a:	bb 27       	eor	r27, r27
    8d6c:	aa 27       	eor	r26, r26
    8d6e:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <__addsf3x>
    8d72:	0c 94 ab 49 	jmp	0x9356	; 0x9356 <__fp_round>
    8d76:	0e 94 72 49 	call	0x92e4	; 0x92e4 <__fp_pscA>
    8d7a:	38 f0       	brcs	.+14     	; 0x8d8a <__addsf3+0x20>
    8d7c:	0e 94 79 49 	call	0x92f2	; 0x92f2 <__fp_pscB>
    8d80:	20 f0       	brcs	.+8      	; 0x8d8a <__addsf3+0x20>
    8d82:	39 f4       	brne	.+14     	; 0x8d92 <__addsf3+0x28>
    8d84:	9f 3f       	cpi	r25, 0xFF	; 255
    8d86:	19 f4       	brne	.+6      	; 0x8d8e <__addsf3+0x24>
    8d88:	26 f4       	brtc	.+8      	; 0x8d92 <__addsf3+0x28>
    8d8a:	0c 94 48 49 	jmp	0x9290	; 0x9290 <__fp_nan>
    8d8e:	0e f4       	brtc	.+2      	; 0x8d92 <__addsf3+0x28>
    8d90:	e0 95       	com	r30
    8d92:	e7 fb       	bst	r30, 7
    8d94:	0c 94 34 49 	jmp	0x9268	; 0x9268 <__fp_inf>

00008d98 <__addsf3x>:
    8d98:	e9 2f       	mov	r30, r25
    8d9a:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <__fp_split3>
    8d9e:	58 f3       	brcs	.-42     	; 0x8d76 <__addsf3+0xc>
    8da0:	ba 17       	cp	r27, r26
    8da2:	62 07       	cpc	r22, r18
    8da4:	73 07       	cpc	r23, r19
    8da6:	84 07       	cpc	r24, r20
    8da8:	95 07       	cpc	r25, r21
    8daa:	20 f0       	brcs	.+8      	; 0x8db4 <__addsf3x+0x1c>
    8dac:	79 f4       	brne	.+30     	; 0x8dcc <__addsf3x+0x34>
    8dae:	a6 f5       	brtc	.+104    	; 0x8e18 <__addsf3x+0x80>
    8db0:	0c 94 f2 49 	jmp	0x93e4	; 0x93e4 <__fp_zero>
    8db4:	0e f4       	brtc	.+2      	; 0x8db8 <__addsf3x+0x20>
    8db6:	e0 95       	com	r30
    8db8:	0b 2e       	mov	r0, r27
    8dba:	ba 2f       	mov	r27, r26
    8dbc:	a0 2d       	mov	r26, r0
    8dbe:	0b 01       	movw	r0, r22
    8dc0:	b9 01       	movw	r22, r18
    8dc2:	90 01       	movw	r18, r0
    8dc4:	0c 01       	movw	r0, r24
    8dc6:	ca 01       	movw	r24, r20
    8dc8:	a0 01       	movw	r20, r0
    8dca:	11 24       	eor	r1, r1
    8dcc:	ff 27       	eor	r31, r31
    8dce:	59 1b       	sub	r21, r25
    8dd0:	99 f0       	breq	.+38     	; 0x8df8 <__addsf3x+0x60>
    8dd2:	59 3f       	cpi	r21, 0xF9	; 249
    8dd4:	50 f4       	brcc	.+20     	; 0x8dea <__addsf3x+0x52>
    8dd6:	50 3e       	cpi	r21, 0xE0	; 224
    8dd8:	68 f1       	brcs	.+90     	; 0x8e34 <__addsf3x+0x9c>
    8dda:	1a 16       	cp	r1, r26
    8ddc:	f0 40       	sbci	r31, 0x00	; 0
    8dde:	a2 2f       	mov	r26, r18
    8de0:	23 2f       	mov	r18, r19
    8de2:	34 2f       	mov	r19, r20
    8de4:	44 27       	eor	r20, r20
    8de6:	58 5f       	subi	r21, 0xF8	; 248
    8de8:	f3 cf       	rjmp	.-26     	; 0x8dd0 <__addsf3x+0x38>
    8dea:	46 95       	lsr	r20
    8dec:	37 95       	ror	r19
    8dee:	27 95       	ror	r18
    8df0:	a7 95       	ror	r26
    8df2:	f0 40       	sbci	r31, 0x00	; 0
    8df4:	53 95       	inc	r21
    8df6:	c9 f7       	brne	.-14     	; 0x8dea <__addsf3x+0x52>
    8df8:	7e f4       	brtc	.+30     	; 0x8e18 <__addsf3x+0x80>
    8dfa:	1f 16       	cp	r1, r31
    8dfc:	ba 0b       	sbc	r27, r26
    8dfe:	62 0b       	sbc	r22, r18
    8e00:	73 0b       	sbc	r23, r19
    8e02:	84 0b       	sbc	r24, r20
    8e04:	ba f0       	brmi	.+46     	; 0x8e34 <__addsf3x+0x9c>
    8e06:	91 50       	subi	r25, 0x01	; 1
    8e08:	a1 f0       	breq	.+40     	; 0x8e32 <__addsf3x+0x9a>
    8e0a:	ff 0f       	add	r31, r31
    8e0c:	bb 1f       	adc	r27, r27
    8e0e:	66 1f       	adc	r22, r22
    8e10:	77 1f       	adc	r23, r23
    8e12:	88 1f       	adc	r24, r24
    8e14:	c2 f7       	brpl	.-16     	; 0x8e06 <__addsf3x+0x6e>
    8e16:	0e c0       	rjmp	.+28     	; 0x8e34 <__addsf3x+0x9c>
    8e18:	ba 0f       	add	r27, r26
    8e1a:	62 1f       	adc	r22, r18
    8e1c:	73 1f       	adc	r23, r19
    8e1e:	84 1f       	adc	r24, r20
    8e20:	48 f4       	brcc	.+18     	; 0x8e34 <__addsf3x+0x9c>
    8e22:	87 95       	ror	r24
    8e24:	77 95       	ror	r23
    8e26:	67 95       	ror	r22
    8e28:	b7 95       	ror	r27
    8e2a:	f7 95       	ror	r31
    8e2c:	9e 3f       	cpi	r25, 0xFE	; 254
    8e2e:	08 f0       	brcs	.+2      	; 0x8e32 <__addsf3x+0x9a>
    8e30:	b0 cf       	rjmp	.-160    	; 0x8d92 <__addsf3+0x28>
    8e32:	93 95       	inc	r25
    8e34:	88 0f       	add	r24, r24
    8e36:	08 f0       	brcs	.+2      	; 0x8e3a <__addsf3x+0xa2>
    8e38:	99 27       	eor	r25, r25
    8e3a:	ee 0f       	add	r30, r30
    8e3c:	97 95       	ror	r25
    8e3e:	87 95       	ror	r24
    8e40:	08 95       	ret
    8e42:	0e 94 72 49 	call	0x92e4	; 0x92e4 <__fp_pscA>
    8e46:	60 f0       	brcs	.+24     	; 0x8e60 <__addsf3x+0xc8>
    8e48:	80 e8       	ldi	r24, 0x80	; 128
    8e4a:	91 e0       	ldi	r25, 0x01	; 1
    8e4c:	09 f4       	brne	.+2      	; 0x8e50 <__addsf3x+0xb8>
    8e4e:	9e ef       	ldi	r25, 0xFE	; 254
    8e50:	0e 94 79 49 	call	0x92f2	; 0x92f2 <__fp_pscB>
    8e54:	28 f0       	brcs	.+10     	; 0x8e60 <__addsf3x+0xc8>
    8e56:	40 e8       	ldi	r20, 0x80	; 128
    8e58:	51 e0       	ldi	r21, 0x01	; 1
    8e5a:	71 f4       	brne	.+28     	; 0x8e78 <atan2+0x10>
    8e5c:	5e ef       	ldi	r21, 0xFE	; 254
    8e5e:	0c c0       	rjmp	.+24     	; 0x8e78 <atan2+0x10>
    8e60:	0c 94 48 49 	jmp	0x9290	; 0x9290 <__fp_nan>
    8e64:	0c 94 f2 49 	jmp	0x93e4	; 0x93e4 <__fp_zero>

00008e68 <atan2>:
    8e68:	e9 2f       	mov	r30, r25
    8e6a:	e0 78       	andi	r30, 0x80	; 128
    8e6c:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <__fp_split3>
    8e70:	40 f3       	brcs	.-48     	; 0x8e42 <__addsf3x+0xaa>
    8e72:	09 2e       	mov	r0, r25
    8e74:	05 2a       	or	r0, r21
    8e76:	b1 f3       	breq	.-20     	; 0x8e64 <__addsf3x+0xcc>
    8e78:	26 17       	cp	r18, r22
    8e7a:	37 07       	cpc	r19, r23
    8e7c:	48 07       	cpc	r20, r24
    8e7e:	59 07       	cpc	r21, r25
    8e80:	38 f0       	brcs	.+14     	; 0x8e90 <atan2+0x28>
    8e82:	0e 2e       	mov	r0, r30
    8e84:	07 f8       	bld	r0, 7
    8e86:	e0 25       	eor	r30, r0
    8e88:	69 f0       	breq	.+26     	; 0x8ea4 <atan2+0x3c>
    8e8a:	e0 25       	eor	r30, r0
    8e8c:	e0 64       	ori	r30, 0x40	; 64
    8e8e:	0a c0       	rjmp	.+20     	; 0x8ea4 <atan2+0x3c>
    8e90:	ef 63       	ori	r30, 0x3F	; 63
    8e92:	07 f8       	bld	r0, 7
    8e94:	00 94       	com	r0
    8e96:	07 fa       	bst	r0, 7
    8e98:	db 01       	movw	r26, r22
    8e9a:	b9 01       	movw	r22, r18
    8e9c:	9d 01       	movw	r18, r26
    8e9e:	dc 01       	movw	r26, r24
    8ea0:	ca 01       	movw	r24, r20
    8ea2:	ad 01       	movw	r20, r26
    8ea4:	ef 93       	push	r30
    8ea6:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <__divsf3_pse>
    8eaa:	0e 94 ab 49 	call	0x9356	; 0x9356 <__fp_round>
    8eae:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <atan>
    8eb2:	5f 91       	pop	r21
    8eb4:	55 23       	and	r21, r21
    8eb6:	39 f0       	breq	.+14     	; 0x8ec6 <atan2+0x5e>
    8eb8:	2b ed       	ldi	r18, 0xDB	; 219
    8eba:	3f e0       	ldi	r19, 0x0F	; 15
    8ebc:	49 e4       	ldi	r20, 0x49	; 73
    8ebe:	50 fd       	sbrc	r21, 0
    8ec0:	49 ec       	ldi	r20, 0xC9	; 201
    8ec2:	0c 94 b5 46 	jmp	0x8d6a	; 0x8d6a <__addsf3>
    8ec6:	08 95       	ret

00008ec8 <atan>:
    8ec8:	df 93       	push	r29
    8eca:	dd 27       	eor	r29, r29
    8ecc:	b9 2f       	mov	r27, r25
    8ece:	bf 77       	andi	r27, 0x7F	; 127
    8ed0:	40 e8       	ldi	r20, 0x80	; 128
    8ed2:	5f e3       	ldi	r21, 0x3F	; 63
    8ed4:	16 16       	cp	r1, r22
    8ed6:	17 06       	cpc	r1, r23
    8ed8:	48 07       	cpc	r20, r24
    8eda:	5b 07       	cpc	r21, r27
    8edc:	18 f4       	brcc	.+6      	; 0x8ee4 <atan+0x1c>
    8ede:	d9 2f       	mov	r29, r25
    8ee0:	0e 94 fe 49 	call	0x93fc	; 0x93fc <inverse>
    8ee4:	9f 93       	push	r25
    8ee6:	8f 93       	push	r24
    8ee8:	7f 93       	push	r23
    8eea:	6f 93       	push	r22
    8eec:	0e 94 89 4b 	call	0x9712	; 0x9712 <square>
    8ef0:	e8 e1       	ldi	r30, 0x18	; 24
    8ef2:	f2 e0       	ldi	r31, 0x02	; 2
    8ef4:	0e 94 4b 49 	call	0x9296	; 0x9296 <__fp_powser>
    8ef8:	0e 94 ab 49 	call	0x9356	; 0x9356 <__fp_round>
    8efc:	2f 91       	pop	r18
    8efe:	3f 91       	pop	r19
    8f00:	4f 91       	pop	r20
    8f02:	5f 91       	pop	r21
    8f04:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <__mulsf3x>
    8f08:	dd 23       	and	r29, r29
    8f0a:	51 f0       	breq	.+20     	; 0x8f20 <atan+0x58>
    8f0c:	90 58       	subi	r25, 0x80	; 128
    8f0e:	a2 ea       	ldi	r26, 0xA2	; 162
    8f10:	2a ed       	ldi	r18, 0xDA	; 218
    8f12:	3f e0       	ldi	r19, 0x0F	; 15
    8f14:	49 ec       	ldi	r20, 0xC9	; 201
    8f16:	5f e3       	ldi	r21, 0x3F	; 63
    8f18:	d0 78       	andi	r29, 0x80	; 128
    8f1a:	5d 27       	eor	r21, r29
    8f1c:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <__addsf3x>
    8f20:	df 91       	pop	r29
    8f22:	0c 94 ab 49 	jmp	0x9356	; 0x9356 <__fp_round>

00008f26 <__cmpsf2>:
    8f26:	0e 94 10 49 	call	0x9220	; 0x9220 <__fp_cmp>
    8f2a:	08 f4       	brcc	.+2      	; 0x8f2e <__cmpsf2+0x8>
    8f2c:	81 e0       	ldi	r24, 0x01	; 1
    8f2e:	08 95       	ret

00008f30 <cos>:
    8f30:	0e 94 82 49 	call	0x9304	; 0x9304 <__fp_rempio2>
    8f34:	e3 95       	inc	r30
    8f36:	0c 94 bc 49 	jmp	0x9378	; 0x9378 <__fp_sinus>

00008f3a <__divsf3>:
    8f3a:	0e 94 b1 47 	call	0x8f62	; 0x8f62 <__divsf3x>
    8f3e:	0c 94 ab 49 	jmp	0x9356	; 0x9356 <__fp_round>
    8f42:	0e 94 79 49 	call	0x92f2	; 0x92f2 <__fp_pscB>
    8f46:	58 f0       	brcs	.+22     	; 0x8f5e <__divsf3+0x24>
    8f48:	0e 94 72 49 	call	0x92e4	; 0x92e4 <__fp_pscA>
    8f4c:	40 f0       	brcs	.+16     	; 0x8f5e <__divsf3+0x24>
    8f4e:	29 f4       	brne	.+10     	; 0x8f5a <__divsf3+0x20>
    8f50:	5f 3f       	cpi	r21, 0xFF	; 255
    8f52:	29 f0       	breq	.+10     	; 0x8f5e <__divsf3+0x24>
    8f54:	0c 94 34 49 	jmp	0x9268	; 0x9268 <__fp_inf>
    8f58:	51 11       	cpse	r21, r1
    8f5a:	0c 94 f3 49 	jmp	0x93e6	; 0x93e6 <__fp_szero>
    8f5e:	0c 94 48 49 	jmp	0x9290	; 0x9290 <__fp_nan>

00008f62 <__divsf3x>:
    8f62:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <__fp_split3>
    8f66:	68 f3       	brcs	.-38     	; 0x8f42 <__divsf3+0x8>

00008f68 <__divsf3_pse>:
    8f68:	99 23       	and	r25, r25
    8f6a:	b1 f3       	breq	.-20     	; 0x8f58 <__divsf3+0x1e>
    8f6c:	55 23       	and	r21, r21
    8f6e:	91 f3       	breq	.-28     	; 0x8f54 <__divsf3+0x1a>
    8f70:	95 1b       	sub	r25, r21
    8f72:	55 0b       	sbc	r21, r21
    8f74:	bb 27       	eor	r27, r27
    8f76:	aa 27       	eor	r26, r26
    8f78:	62 17       	cp	r22, r18
    8f7a:	73 07       	cpc	r23, r19
    8f7c:	84 07       	cpc	r24, r20
    8f7e:	38 f0       	brcs	.+14     	; 0x8f8e <__divsf3_pse+0x26>
    8f80:	9f 5f       	subi	r25, 0xFF	; 255
    8f82:	5f 4f       	sbci	r21, 0xFF	; 255
    8f84:	22 0f       	add	r18, r18
    8f86:	33 1f       	adc	r19, r19
    8f88:	44 1f       	adc	r20, r20
    8f8a:	aa 1f       	adc	r26, r26
    8f8c:	a9 f3       	breq	.-22     	; 0x8f78 <__divsf3_pse+0x10>
    8f8e:	35 d0       	rcall	.+106    	; 0x8ffa <__divsf3_pse+0x92>
    8f90:	0e 2e       	mov	r0, r30
    8f92:	3a f0       	brmi	.+14     	; 0x8fa2 <__divsf3_pse+0x3a>
    8f94:	e0 e8       	ldi	r30, 0x80	; 128
    8f96:	32 d0       	rcall	.+100    	; 0x8ffc <__divsf3_pse+0x94>
    8f98:	91 50       	subi	r25, 0x01	; 1
    8f9a:	50 40       	sbci	r21, 0x00	; 0
    8f9c:	e6 95       	lsr	r30
    8f9e:	00 1c       	adc	r0, r0
    8fa0:	ca f7       	brpl	.-14     	; 0x8f94 <__divsf3_pse+0x2c>
    8fa2:	2b d0       	rcall	.+86     	; 0x8ffa <__divsf3_pse+0x92>
    8fa4:	fe 2f       	mov	r31, r30
    8fa6:	29 d0       	rcall	.+82     	; 0x8ffa <__divsf3_pse+0x92>
    8fa8:	66 0f       	add	r22, r22
    8faa:	77 1f       	adc	r23, r23
    8fac:	88 1f       	adc	r24, r24
    8fae:	bb 1f       	adc	r27, r27
    8fb0:	26 17       	cp	r18, r22
    8fb2:	37 07       	cpc	r19, r23
    8fb4:	48 07       	cpc	r20, r24
    8fb6:	ab 07       	cpc	r26, r27
    8fb8:	b0 e8       	ldi	r27, 0x80	; 128
    8fba:	09 f0       	breq	.+2      	; 0x8fbe <__divsf3_pse+0x56>
    8fbc:	bb 0b       	sbc	r27, r27
    8fbe:	80 2d       	mov	r24, r0
    8fc0:	bf 01       	movw	r22, r30
    8fc2:	ff 27       	eor	r31, r31
    8fc4:	93 58       	subi	r25, 0x83	; 131
    8fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    8fc8:	3a f0       	brmi	.+14     	; 0x8fd8 <__divsf3_pse+0x70>
    8fca:	9e 3f       	cpi	r25, 0xFE	; 254
    8fcc:	51 05       	cpc	r21, r1
    8fce:	78 f0       	brcs	.+30     	; 0x8fee <__divsf3_pse+0x86>
    8fd0:	0c 94 34 49 	jmp	0x9268	; 0x9268 <__fp_inf>
    8fd4:	0c 94 f3 49 	jmp	0x93e6	; 0x93e6 <__fp_szero>
    8fd8:	5f 3f       	cpi	r21, 0xFF	; 255
    8fda:	e4 f3       	brlt	.-8      	; 0x8fd4 <__divsf3_pse+0x6c>
    8fdc:	98 3e       	cpi	r25, 0xE8	; 232
    8fde:	d4 f3       	brlt	.-12     	; 0x8fd4 <__divsf3_pse+0x6c>
    8fe0:	86 95       	lsr	r24
    8fe2:	77 95       	ror	r23
    8fe4:	67 95       	ror	r22
    8fe6:	b7 95       	ror	r27
    8fe8:	f7 95       	ror	r31
    8fea:	9f 5f       	subi	r25, 0xFF	; 255
    8fec:	c9 f7       	brne	.-14     	; 0x8fe0 <__divsf3_pse+0x78>
    8fee:	88 0f       	add	r24, r24
    8ff0:	91 1d       	adc	r25, r1
    8ff2:	96 95       	lsr	r25
    8ff4:	87 95       	ror	r24
    8ff6:	97 f9       	bld	r25, 7
    8ff8:	08 95       	ret
    8ffa:	e1 e0       	ldi	r30, 0x01	; 1
    8ffc:	66 0f       	add	r22, r22
    8ffe:	77 1f       	adc	r23, r23
    9000:	88 1f       	adc	r24, r24
    9002:	bb 1f       	adc	r27, r27
    9004:	62 17       	cp	r22, r18
    9006:	73 07       	cpc	r23, r19
    9008:	84 07       	cpc	r24, r20
    900a:	ba 07       	cpc	r27, r26
    900c:	20 f0       	brcs	.+8      	; 0x9016 <__divsf3_pse+0xae>
    900e:	62 1b       	sub	r22, r18
    9010:	73 0b       	sbc	r23, r19
    9012:	84 0b       	sbc	r24, r20
    9014:	ba 0b       	sbc	r27, r26
    9016:	ee 1f       	adc	r30, r30
    9018:	88 f7       	brcc	.-30     	; 0x8ffc <__divsf3_pse+0x94>
    901a:	e0 95       	com	r30
    901c:	08 95       	ret
    901e:	29 f4       	brne	.+10     	; 0x902a <__divsf3_pse+0xc2>
    9020:	16 f0       	brts	.+4      	; 0x9026 <__divsf3_pse+0xbe>
    9022:	0c 94 34 49 	jmp	0x9268	; 0x9268 <__fp_inf>
    9026:	0c 94 f2 49 	jmp	0x93e4	; 0x93e4 <__fp_zero>
    902a:	0c 94 48 49 	jmp	0x9290	; 0x9290 <__fp_nan>

0000902e <exp>:
    902e:	0e 94 d8 49 	call	0x93b0	; 0x93b0 <__fp_splitA>
    9032:	a8 f3       	brcs	.-22     	; 0x901e <__divsf3_pse+0xb6>
    9034:	96 38       	cpi	r25, 0x86	; 134
    9036:	a0 f7       	brcc	.-24     	; 0x9020 <__divsf3_pse+0xb8>
    9038:	07 f8       	bld	r0, 7
    903a:	0f 92       	push	r0
    903c:	e8 94       	clt
    903e:	2b e3       	ldi	r18, 0x3B	; 59
    9040:	3a ea       	ldi	r19, 0xAA	; 170
    9042:	48 eb       	ldi	r20, 0xB8	; 184
    9044:	5f e7       	ldi	r21, 0x7F	; 127
    9046:	0e 94 da 4a 	call	0x95b4	; 0x95b4 <__mulsf3_pse>
    904a:	0f 92       	push	r0
    904c:	0f 92       	push	r0
    904e:	0f 92       	push	r0
    9050:	4d b7       	in	r20, 0x3d	; 61
    9052:	5e b7       	in	r21, 0x3e	; 62
    9054:	0f 92       	push	r0
    9056:	0e 94 90 4a 	call	0x9520	; 0x9520 <modf>
    905a:	e5 e4       	ldi	r30, 0x45	; 69
    905c:	f2 e0       	ldi	r31, 0x02	; 2
    905e:	0e 94 4b 49 	call	0x9296	; 0x9296 <__fp_powser>
    9062:	4f 91       	pop	r20
    9064:	5f 91       	pop	r21
    9066:	ef 91       	pop	r30
    9068:	ff 91       	pop	r31
    906a:	e5 95       	asr	r30
    906c:	ee 1f       	adc	r30, r30
    906e:	ff 1f       	adc	r31, r31
    9070:	49 f0       	breq	.+18     	; 0x9084 <exp+0x56>
    9072:	fe 57       	subi	r31, 0x7E	; 126
    9074:	e0 68       	ori	r30, 0x80	; 128
    9076:	44 27       	eor	r20, r20
    9078:	ee 0f       	add	r30, r30
    907a:	44 1f       	adc	r20, r20
    907c:	fa 95       	dec	r31
    907e:	e1 f7       	brne	.-8      	; 0x9078 <exp+0x4a>
    9080:	41 95       	neg	r20
    9082:	55 0b       	sbc	r21, r21
    9084:	0e 94 0a 4a 	call	0x9414	; 0x9414 <ldexp>
    9088:	0f 90       	pop	r0
    908a:	07 fe       	sbrs	r0, 7
    908c:	0c 94 fe 49 	jmp	0x93fc	; 0x93fc <inverse>
    9090:	08 95       	ret

00009092 <__fixsfsi>:
    9092:	0e 94 50 48 	call	0x90a0	; 0x90a0 <__fixunssfsi>
    9096:	68 94       	set
    9098:	b1 11       	cpse	r27, r1
    909a:	0c 94 f3 49 	jmp	0x93e6	; 0x93e6 <__fp_szero>
    909e:	08 95       	ret

000090a0 <__fixunssfsi>:
    90a0:	0e 94 d8 49 	call	0x93b0	; 0x93b0 <__fp_splitA>
    90a4:	88 f0       	brcs	.+34     	; 0x90c8 <__fixunssfsi+0x28>
    90a6:	9f 57       	subi	r25, 0x7F	; 127
    90a8:	98 f0       	brcs	.+38     	; 0x90d0 <__fixunssfsi+0x30>
    90aa:	b9 2f       	mov	r27, r25
    90ac:	99 27       	eor	r25, r25
    90ae:	b7 51       	subi	r27, 0x17	; 23
    90b0:	b0 f0       	brcs	.+44     	; 0x90de <__fixunssfsi+0x3e>
    90b2:	e1 f0       	breq	.+56     	; 0x90ec <__fixunssfsi+0x4c>
    90b4:	66 0f       	add	r22, r22
    90b6:	77 1f       	adc	r23, r23
    90b8:	88 1f       	adc	r24, r24
    90ba:	99 1f       	adc	r25, r25
    90bc:	1a f0       	brmi	.+6      	; 0x90c4 <__fixunssfsi+0x24>
    90be:	ba 95       	dec	r27
    90c0:	c9 f7       	brne	.-14     	; 0x90b4 <__fixunssfsi+0x14>
    90c2:	14 c0       	rjmp	.+40     	; 0x90ec <__fixunssfsi+0x4c>
    90c4:	b1 30       	cpi	r27, 0x01	; 1
    90c6:	91 f0       	breq	.+36     	; 0x90ec <__fixunssfsi+0x4c>
    90c8:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <__fp_zero>
    90cc:	b1 e0       	ldi	r27, 0x01	; 1
    90ce:	08 95       	ret
    90d0:	0c 94 f2 49 	jmp	0x93e4	; 0x93e4 <__fp_zero>
    90d4:	67 2f       	mov	r22, r23
    90d6:	78 2f       	mov	r23, r24
    90d8:	88 27       	eor	r24, r24
    90da:	b8 5f       	subi	r27, 0xF8	; 248
    90dc:	39 f0       	breq	.+14     	; 0x90ec <__fixunssfsi+0x4c>
    90de:	b9 3f       	cpi	r27, 0xF9	; 249
    90e0:	cc f3       	brlt	.-14     	; 0x90d4 <__fixunssfsi+0x34>
    90e2:	86 95       	lsr	r24
    90e4:	77 95       	ror	r23
    90e6:	67 95       	ror	r22
    90e8:	b3 95       	inc	r27
    90ea:	d9 f7       	brne	.-10     	; 0x90e2 <__fixunssfsi+0x42>
    90ec:	3e f4       	brtc	.+14     	; 0x90fc <__fixunssfsi+0x5c>
    90ee:	90 95       	com	r25
    90f0:	80 95       	com	r24
    90f2:	70 95       	com	r23
    90f4:	61 95       	neg	r22
    90f6:	7f 4f       	sbci	r23, 0xFF	; 255
    90f8:	8f 4f       	sbci	r24, 0xFF	; 255
    90fa:	9f 4f       	sbci	r25, 0xFF	; 255
    90fc:	08 95       	ret

000090fe <__floatunsisf>:
    90fe:	e8 94       	clt
    9100:	09 c0       	rjmp	.+18     	; 0x9114 <__floatsisf+0x12>

00009102 <__floatsisf>:
    9102:	97 fb       	bst	r25, 7
    9104:	3e f4       	brtc	.+14     	; 0x9114 <__floatsisf+0x12>
    9106:	90 95       	com	r25
    9108:	80 95       	com	r24
    910a:	70 95       	com	r23
    910c:	61 95       	neg	r22
    910e:	7f 4f       	sbci	r23, 0xFF	; 255
    9110:	8f 4f       	sbci	r24, 0xFF	; 255
    9112:	9f 4f       	sbci	r25, 0xFF	; 255
    9114:	99 23       	and	r25, r25
    9116:	a9 f0       	breq	.+42     	; 0x9142 <__floatsisf+0x40>
    9118:	f9 2f       	mov	r31, r25
    911a:	96 e9       	ldi	r25, 0x96	; 150
    911c:	bb 27       	eor	r27, r27
    911e:	93 95       	inc	r25
    9120:	f6 95       	lsr	r31
    9122:	87 95       	ror	r24
    9124:	77 95       	ror	r23
    9126:	67 95       	ror	r22
    9128:	b7 95       	ror	r27
    912a:	f1 11       	cpse	r31, r1
    912c:	f8 cf       	rjmp	.-16     	; 0x911e <__floatsisf+0x1c>
    912e:	fa f4       	brpl	.+62     	; 0x916e <__floatsisf+0x6c>
    9130:	bb 0f       	add	r27, r27
    9132:	11 f4       	brne	.+4      	; 0x9138 <__floatsisf+0x36>
    9134:	60 ff       	sbrs	r22, 0
    9136:	1b c0       	rjmp	.+54     	; 0x916e <__floatsisf+0x6c>
    9138:	6f 5f       	subi	r22, 0xFF	; 255
    913a:	7f 4f       	sbci	r23, 0xFF	; 255
    913c:	8f 4f       	sbci	r24, 0xFF	; 255
    913e:	9f 4f       	sbci	r25, 0xFF	; 255
    9140:	16 c0       	rjmp	.+44     	; 0x916e <__floatsisf+0x6c>
    9142:	88 23       	and	r24, r24
    9144:	11 f0       	breq	.+4      	; 0x914a <__floatsisf+0x48>
    9146:	96 e9       	ldi	r25, 0x96	; 150
    9148:	11 c0       	rjmp	.+34     	; 0x916c <__floatsisf+0x6a>
    914a:	77 23       	and	r23, r23
    914c:	21 f0       	breq	.+8      	; 0x9156 <__floatsisf+0x54>
    914e:	9e e8       	ldi	r25, 0x8E	; 142
    9150:	87 2f       	mov	r24, r23
    9152:	76 2f       	mov	r23, r22
    9154:	05 c0       	rjmp	.+10     	; 0x9160 <__floatsisf+0x5e>
    9156:	66 23       	and	r22, r22
    9158:	71 f0       	breq	.+28     	; 0x9176 <__floatsisf+0x74>
    915a:	96 e8       	ldi	r25, 0x86	; 134
    915c:	86 2f       	mov	r24, r22
    915e:	70 e0       	ldi	r23, 0x00	; 0
    9160:	60 e0       	ldi	r22, 0x00	; 0
    9162:	2a f0       	brmi	.+10     	; 0x916e <__floatsisf+0x6c>
    9164:	9a 95       	dec	r25
    9166:	66 0f       	add	r22, r22
    9168:	77 1f       	adc	r23, r23
    916a:	88 1f       	adc	r24, r24
    916c:	da f7       	brpl	.-10     	; 0x9164 <__floatsisf+0x62>
    916e:	88 0f       	add	r24, r24
    9170:	96 95       	lsr	r25
    9172:	87 95       	ror	r24
    9174:	97 f9       	bld	r25, 7
    9176:	08 95       	ret
    9178:	0e 94 72 49 	call	0x92e4	; 0x92e4 <__fp_pscA>
    917c:	20 f0       	brcs	.+8      	; 0x9186 <__floatsisf+0x84>
    917e:	19 f0       	breq	.+6      	; 0x9186 <__floatsisf+0x84>
    9180:	0e 94 79 49 	call	0x92f2	; 0x92f2 <__fp_pscB>
    9184:	50 f4       	brcc	.+20     	; 0x919a <fmod+0xc>
    9186:	0c 94 48 49 	jmp	0x9290	; 0x9290 <__fp_nan>
    918a:	0c 94 f3 49 	jmp	0x93e6	; 0x93e6 <__fp_szero>

0000918e <fmod>:
    918e:	e9 2f       	mov	r30, r25
    9190:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <__fp_split3>
    9194:	88 f3       	brcs	.-30     	; 0x9178 <__floatsisf+0x76>
    9196:	55 23       	and	r21, r21
    9198:	b1 f3       	breq	.-20     	; 0x9186 <__floatsisf+0x84>
    919a:	e7 fb       	bst	r30, 7
    919c:	62 17       	cp	r22, r18
    919e:	73 07       	cpc	r23, r19
    91a0:	84 07       	cpc	r24, r20
    91a2:	95 07       	cpc	r25, r21
    91a4:	a8 f1       	brcs	.+106    	; 0x9210 <fmod+0x82>
    91a6:	89 f3       	breq	.-30     	; 0x918a <__floatsisf+0x88>
    91a8:	e9 2f       	mov	r30, r25
    91aa:	ff 27       	eor	r31, r31
    91ac:	88 23       	and	r24, r24
    91ae:	2a f0       	brmi	.+10     	; 0x91ba <fmod+0x2c>
    91b0:	31 97       	sbiw	r30, 0x01	; 1
    91b2:	66 0f       	add	r22, r22
    91b4:	77 1f       	adc	r23, r23
    91b6:	88 1f       	adc	r24, r24
    91b8:	da f7       	brpl	.-10     	; 0x91b0 <fmod+0x22>
    91ba:	95 2f       	mov	r25, r21
    91bc:	55 27       	eor	r21, r21
    91be:	44 23       	and	r20, r20
    91c0:	32 f0       	brmi	.+12     	; 0x91ce <fmod+0x40>
    91c2:	91 50       	subi	r25, 0x01	; 1
    91c4:	50 40       	sbci	r21, 0x00	; 0
    91c6:	22 0f       	add	r18, r18
    91c8:	33 1f       	adc	r19, r19
    91ca:	44 1f       	adc	r20, r20
    91cc:	d2 f7       	brpl	.-12     	; 0x91c2 <fmod+0x34>
    91ce:	bb 27       	eor	r27, r27
    91d0:	e9 1b       	sub	r30, r25
    91d2:	f5 0b       	sbc	r31, r21
    91d4:	62 1b       	sub	r22, r18
    91d6:	73 0b       	sbc	r23, r19
    91d8:	84 0b       	sbc	r24, r20
    91da:	b1 09       	sbc	r27, r1
    91dc:	b1 f2       	breq	.-84     	; 0x918a <__floatsisf+0x88>
    91de:	22 f4       	brpl	.+8      	; 0x91e8 <fmod+0x5a>
    91e0:	62 0f       	add	r22, r18
    91e2:	73 1f       	adc	r23, r19
    91e4:	84 1f       	adc	r24, r20
    91e6:	b1 1d       	adc	r27, r1
    91e8:	31 97       	sbiw	r30, 0x01	; 1
    91ea:	2a f0       	brmi	.+10     	; 0x91f6 <fmod+0x68>
    91ec:	66 0f       	add	r22, r22
    91ee:	77 1f       	adc	r23, r23
    91f0:	88 1f       	adc	r24, r24
    91f2:	bb 1f       	adc	r27, r27
    91f4:	ef cf       	rjmp	.-34     	; 0x91d4 <fmod+0x46>
    91f6:	91 50       	subi	r25, 0x01	; 1
    91f8:	50 40       	sbci	r21, 0x00	; 0
    91fa:	62 f0       	brmi	.+24     	; 0x9214 <fmod+0x86>
    91fc:	41 f0       	breq	.+16     	; 0x920e <fmod+0x80>
    91fe:	88 23       	and	r24, r24
    9200:	32 f0       	brmi	.+12     	; 0x920e <fmod+0x80>
    9202:	66 0f       	add	r22, r22
    9204:	77 1f       	adc	r23, r23
    9206:	88 1f       	adc	r24, r24
    9208:	91 50       	subi	r25, 0x01	; 1
    920a:	50 40       	sbci	r21, 0x00	; 0
    920c:	c1 f7       	brne	.-16     	; 0x91fe <fmod+0x70>
    920e:	93 95       	inc	r25
    9210:	0c 94 3a 49 	jmp	0x9274	; 0x9274 <__fp_mpack>
    9214:	86 95       	lsr	r24
    9216:	77 95       	ror	r23
    9218:	67 95       	ror	r22
    921a:	9f 5f       	subi	r25, 0xFF	; 255
    921c:	d9 f7       	brne	.-10     	; 0x9214 <fmod+0x86>
    921e:	f7 cf       	rjmp	.-18     	; 0x920e <fmod+0x80>

00009220 <__fp_cmp>:
    9220:	99 0f       	add	r25, r25
    9222:	00 08       	sbc	r0, r0
    9224:	55 0f       	add	r21, r21
    9226:	aa 0b       	sbc	r26, r26
    9228:	e0 e8       	ldi	r30, 0x80	; 128
    922a:	fe ef       	ldi	r31, 0xFE	; 254
    922c:	16 16       	cp	r1, r22
    922e:	17 06       	cpc	r1, r23
    9230:	e8 07       	cpc	r30, r24
    9232:	f9 07       	cpc	r31, r25
    9234:	c0 f0       	brcs	.+48     	; 0x9266 <__fp_cmp+0x46>
    9236:	12 16       	cp	r1, r18
    9238:	13 06       	cpc	r1, r19
    923a:	e4 07       	cpc	r30, r20
    923c:	f5 07       	cpc	r31, r21
    923e:	98 f0       	brcs	.+38     	; 0x9266 <__fp_cmp+0x46>
    9240:	62 1b       	sub	r22, r18
    9242:	73 0b       	sbc	r23, r19
    9244:	84 0b       	sbc	r24, r20
    9246:	95 0b       	sbc	r25, r21
    9248:	39 f4       	brne	.+14     	; 0x9258 <__fp_cmp+0x38>
    924a:	0a 26       	eor	r0, r26
    924c:	61 f0       	breq	.+24     	; 0x9266 <__fp_cmp+0x46>
    924e:	23 2b       	or	r18, r19
    9250:	24 2b       	or	r18, r20
    9252:	25 2b       	or	r18, r21
    9254:	21 f4       	brne	.+8      	; 0x925e <__fp_cmp+0x3e>
    9256:	08 95       	ret
    9258:	0a 26       	eor	r0, r26
    925a:	09 f4       	brne	.+2      	; 0x925e <__fp_cmp+0x3e>
    925c:	a1 40       	sbci	r26, 0x01	; 1
    925e:	a6 95       	lsr	r26
    9260:	8f ef       	ldi	r24, 0xFF	; 255
    9262:	81 1d       	adc	r24, r1
    9264:	81 1d       	adc	r24, r1
    9266:	08 95       	ret

00009268 <__fp_inf>:
    9268:	97 f9       	bld	r25, 7
    926a:	9f 67       	ori	r25, 0x7F	; 127
    926c:	80 e8       	ldi	r24, 0x80	; 128
    926e:	70 e0       	ldi	r23, 0x00	; 0
    9270:	60 e0       	ldi	r22, 0x00	; 0
    9272:	08 95       	ret

00009274 <__fp_mpack>:
    9274:	9f 3f       	cpi	r25, 0xFF	; 255
    9276:	31 f0       	breq	.+12     	; 0x9284 <__fp_mpack_finite+0xc>

00009278 <__fp_mpack_finite>:
    9278:	91 50       	subi	r25, 0x01	; 1
    927a:	20 f4       	brcc	.+8      	; 0x9284 <__fp_mpack_finite+0xc>
    927c:	87 95       	ror	r24
    927e:	77 95       	ror	r23
    9280:	67 95       	ror	r22
    9282:	b7 95       	ror	r27
    9284:	88 0f       	add	r24, r24
    9286:	91 1d       	adc	r25, r1
    9288:	96 95       	lsr	r25
    928a:	87 95       	ror	r24
    928c:	97 f9       	bld	r25, 7
    928e:	08 95       	ret

00009290 <__fp_nan>:
    9290:	9f ef       	ldi	r25, 0xFF	; 255
    9292:	80 ec       	ldi	r24, 0xC0	; 192
    9294:	08 95       	ret

00009296 <__fp_powser>:
    9296:	df 93       	push	r29
    9298:	cf 93       	push	r28
    929a:	1f 93       	push	r17
    929c:	0f 93       	push	r16
    929e:	ff 92       	push	r15
    92a0:	ef 92       	push	r14
    92a2:	df 92       	push	r13
    92a4:	7b 01       	movw	r14, r22
    92a6:	8c 01       	movw	r16, r24
    92a8:	68 94       	set
    92aa:	06 c0       	rjmp	.+12     	; 0x92b8 <__fp_powser+0x22>
    92ac:	da 2e       	mov	r13, r26
    92ae:	ef 01       	movw	r28, r30
    92b0:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <__mulsf3x>
    92b4:	fe 01       	movw	r30, r28
    92b6:	e8 94       	clt
    92b8:	a5 91       	lpm	r26, Z+
    92ba:	25 91       	lpm	r18, Z+
    92bc:	35 91       	lpm	r19, Z+
    92be:	45 91       	lpm	r20, Z+
    92c0:	55 91       	lpm	r21, Z+
    92c2:	a6 f3       	brts	.-24     	; 0x92ac <__fp_powser+0x16>
    92c4:	ef 01       	movw	r28, r30
    92c6:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <__addsf3x>
    92ca:	fe 01       	movw	r30, r28
    92cc:	97 01       	movw	r18, r14
    92ce:	a8 01       	movw	r20, r16
    92d0:	da 94       	dec	r13
    92d2:	69 f7       	brne	.-38     	; 0x92ae <__fp_powser+0x18>
    92d4:	df 90       	pop	r13
    92d6:	ef 90       	pop	r14
    92d8:	ff 90       	pop	r15
    92da:	0f 91       	pop	r16
    92dc:	1f 91       	pop	r17
    92de:	cf 91       	pop	r28
    92e0:	df 91       	pop	r29
    92e2:	08 95       	ret

000092e4 <__fp_pscA>:
    92e4:	00 24       	eor	r0, r0
    92e6:	0a 94       	dec	r0
    92e8:	16 16       	cp	r1, r22
    92ea:	17 06       	cpc	r1, r23
    92ec:	18 06       	cpc	r1, r24
    92ee:	09 06       	cpc	r0, r25
    92f0:	08 95       	ret

000092f2 <__fp_pscB>:
    92f2:	00 24       	eor	r0, r0
    92f4:	0a 94       	dec	r0
    92f6:	12 16       	cp	r1, r18
    92f8:	13 06       	cpc	r1, r19
    92fa:	14 06       	cpc	r1, r20
    92fc:	05 06       	cpc	r0, r21
    92fe:	08 95       	ret
    9300:	0c 94 48 49 	jmp	0x9290	; 0x9290 <__fp_nan>

00009304 <__fp_rempio2>:
    9304:	0e 94 d8 49 	call	0x93b0	; 0x93b0 <__fp_splitA>
    9308:	d8 f3       	brcs	.-10     	; 0x9300 <__fp_pscB+0xe>
    930a:	e8 94       	clt
    930c:	e0 e0       	ldi	r30, 0x00	; 0
    930e:	bb 27       	eor	r27, r27
    9310:	9f 57       	subi	r25, 0x7F	; 127
    9312:	f0 f0       	brcs	.+60     	; 0x9350 <__fp_rempio2+0x4c>
    9314:	2a ed       	ldi	r18, 0xDA	; 218
    9316:	3f e0       	ldi	r19, 0x0F	; 15
    9318:	49 ec       	ldi	r20, 0xC9	; 201
    931a:	06 c0       	rjmp	.+12     	; 0x9328 <__fp_rempio2+0x24>
    931c:	ee 0f       	add	r30, r30
    931e:	bb 0f       	add	r27, r27
    9320:	66 1f       	adc	r22, r22
    9322:	77 1f       	adc	r23, r23
    9324:	88 1f       	adc	r24, r24
    9326:	28 f0       	brcs	.+10     	; 0x9332 <__fp_rempio2+0x2e>
    9328:	b2 3a       	cpi	r27, 0xA2	; 162
    932a:	62 07       	cpc	r22, r18
    932c:	73 07       	cpc	r23, r19
    932e:	84 07       	cpc	r24, r20
    9330:	28 f0       	brcs	.+10     	; 0x933c <__fp_rempio2+0x38>
    9332:	b2 5a       	subi	r27, 0xA2	; 162
    9334:	62 0b       	sbc	r22, r18
    9336:	73 0b       	sbc	r23, r19
    9338:	84 0b       	sbc	r24, r20
    933a:	e3 95       	inc	r30
    933c:	9a 95       	dec	r25
    933e:	72 f7       	brpl	.-36     	; 0x931c <__fp_rempio2+0x18>
    9340:	80 38       	cpi	r24, 0x80	; 128
    9342:	30 f4       	brcc	.+12     	; 0x9350 <__fp_rempio2+0x4c>
    9344:	9a 95       	dec	r25
    9346:	bb 0f       	add	r27, r27
    9348:	66 1f       	adc	r22, r22
    934a:	77 1f       	adc	r23, r23
    934c:	88 1f       	adc	r24, r24
    934e:	d2 f7       	brpl	.-12     	; 0x9344 <__fp_rempio2+0x40>
    9350:	90 48       	sbci	r25, 0x80	; 128
    9352:	0c 94 3c 49 	jmp	0x9278	; 0x9278 <__fp_mpack_finite>

00009356 <__fp_round>:
    9356:	09 2e       	mov	r0, r25
    9358:	03 94       	inc	r0
    935a:	00 0c       	add	r0, r0
    935c:	11 f4       	brne	.+4      	; 0x9362 <__fp_round+0xc>
    935e:	88 23       	and	r24, r24
    9360:	52 f0       	brmi	.+20     	; 0x9376 <__fp_round+0x20>
    9362:	bb 0f       	add	r27, r27
    9364:	40 f4       	brcc	.+16     	; 0x9376 <__fp_round+0x20>
    9366:	bf 2b       	or	r27, r31
    9368:	11 f4       	brne	.+4      	; 0x936e <__fp_round+0x18>
    936a:	60 ff       	sbrs	r22, 0
    936c:	04 c0       	rjmp	.+8      	; 0x9376 <__fp_round+0x20>
    936e:	6f 5f       	subi	r22, 0xFF	; 255
    9370:	7f 4f       	sbci	r23, 0xFF	; 255
    9372:	8f 4f       	sbci	r24, 0xFF	; 255
    9374:	9f 4f       	sbci	r25, 0xFF	; 255
    9376:	08 95       	ret

00009378 <__fp_sinus>:
    9378:	ef 93       	push	r30
    937a:	e0 ff       	sbrs	r30, 0
    937c:	07 c0       	rjmp	.+14     	; 0x938c <__fp_sinus+0x14>
    937e:	a2 ea       	ldi	r26, 0xA2	; 162
    9380:	2a ed       	ldi	r18, 0xDA	; 218
    9382:	3f e0       	ldi	r19, 0x0F	; 15
    9384:	49 ec       	ldi	r20, 0xC9	; 201
    9386:	5f eb       	ldi	r21, 0xBF	; 191
    9388:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <__addsf3x>
    938c:	0e 94 ab 49 	call	0x9356	; 0x9356 <__fp_round>
    9390:	0f 90       	pop	r0
    9392:	03 94       	inc	r0
    9394:	01 fc       	sbrc	r0, 1
    9396:	90 58       	subi	r25, 0x80	; 128
    9398:	ed e6       	ldi	r30, 0x6D	; 109
    939a:	f2 e0       	ldi	r31, 0x02	; 2
    939c:	0c 94 92 4b 	jmp	0x9724	; 0x9724 <__fp_powsodd>

000093a0 <__fp_split3>:
    93a0:	57 fd       	sbrc	r21, 7
    93a2:	90 58       	subi	r25, 0x80	; 128
    93a4:	44 0f       	add	r20, r20
    93a6:	55 1f       	adc	r21, r21
    93a8:	59 f0       	breq	.+22     	; 0x93c0 <__fp_splitA+0x10>
    93aa:	5f 3f       	cpi	r21, 0xFF	; 255
    93ac:	71 f0       	breq	.+28     	; 0x93ca <__fp_splitA+0x1a>
    93ae:	47 95       	ror	r20

000093b0 <__fp_splitA>:
    93b0:	88 0f       	add	r24, r24
    93b2:	97 fb       	bst	r25, 7
    93b4:	99 1f       	adc	r25, r25
    93b6:	61 f0       	breq	.+24     	; 0x93d0 <__fp_splitA+0x20>
    93b8:	9f 3f       	cpi	r25, 0xFF	; 255
    93ba:	79 f0       	breq	.+30     	; 0x93da <__fp_splitA+0x2a>
    93bc:	87 95       	ror	r24
    93be:	08 95       	ret
    93c0:	12 16       	cp	r1, r18
    93c2:	13 06       	cpc	r1, r19
    93c4:	14 06       	cpc	r1, r20
    93c6:	55 1f       	adc	r21, r21
    93c8:	f2 cf       	rjmp	.-28     	; 0x93ae <__fp_split3+0xe>
    93ca:	46 95       	lsr	r20
    93cc:	f1 df       	rcall	.-30     	; 0x93b0 <__fp_splitA>
    93ce:	08 c0       	rjmp	.+16     	; 0x93e0 <__fp_splitA+0x30>
    93d0:	16 16       	cp	r1, r22
    93d2:	17 06       	cpc	r1, r23
    93d4:	18 06       	cpc	r1, r24
    93d6:	99 1f       	adc	r25, r25
    93d8:	f1 cf       	rjmp	.-30     	; 0x93bc <__fp_splitA+0xc>
    93da:	86 95       	lsr	r24
    93dc:	71 05       	cpc	r23, r1
    93de:	61 05       	cpc	r22, r1
    93e0:	08 94       	sec
    93e2:	08 95       	ret

000093e4 <__fp_zero>:
    93e4:	e8 94       	clt

000093e6 <__fp_szero>:
    93e6:	bb 27       	eor	r27, r27
    93e8:	66 27       	eor	r22, r22
    93ea:	77 27       	eor	r23, r23
    93ec:	cb 01       	movw	r24, r22
    93ee:	97 f9       	bld	r25, 7
    93f0:	08 95       	ret

000093f2 <__gesf2>:
    93f2:	0e 94 10 49 	call	0x9220	; 0x9220 <__fp_cmp>
    93f6:	08 f4       	brcc	.+2      	; 0x93fa <__gesf2+0x8>
    93f8:	8f ef       	ldi	r24, 0xFF	; 255
    93fa:	08 95       	ret

000093fc <inverse>:
    93fc:	9b 01       	movw	r18, r22
    93fe:	ac 01       	movw	r20, r24
    9400:	60 e0       	ldi	r22, 0x00	; 0
    9402:	70 e0       	ldi	r23, 0x00	; 0
    9404:	80 e8       	ldi	r24, 0x80	; 128
    9406:	9f e3       	ldi	r25, 0x3F	; 63
    9408:	0c 94 9d 47 	jmp	0x8f3a	; 0x8f3a <__divsf3>
    940c:	0c 94 34 49 	jmp	0x9268	; 0x9268 <__fp_inf>
    9410:	0c 94 3a 49 	jmp	0x9274	; 0x9274 <__fp_mpack>

00009414 <ldexp>:
    9414:	0e 94 d8 49 	call	0x93b0	; 0x93b0 <__fp_splitA>
    9418:	d8 f3       	brcs	.-10     	; 0x9410 <inverse+0x14>
    941a:	99 23       	and	r25, r25
    941c:	c9 f3       	breq	.-14     	; 0x9410 <inverse+0x14>
    941e:	94 0f       	add	r25, r20
    9420:	51 1d       	adc	r21, r1
    9422:	a3 f3       	brvs	.-24     	; 0x940c <inverse+0x10>
    9424:	91 50       	subi	r25, 0x01	; 1
    9426:	50 40       	sbci	r21, 0x00	; 0
    9428:	94 f0       	brlt	.+36     	; 0x944e <ldexp+0x3a>
    942a:	59 f0       	breq	.+22     	; 0x9442 <ldexp+0x2e>
    942c:	88 23       	and	r24, r24
    942e:	32 f0       	brmi	.+12     	; 0x943c <ldexp+0x28>
    9430:	66 0f       	add	r22, r22
    9432:	77 1f       	adc	r23, r23
    9434:	88 1f       	adc	r24, r24
    9436:	91 50       	subi	r25, 0x01	; 1
    9438:	50 40       	sbci	r21, 0x00	; 0
    943a:	c1 f7       	brne	.-16     	; 0x942c <ldexp+0x18>
    943c:	9e 3f       	cpi	r25, 0xFE	; 254
    943e:	51 05       	cpc	r21, r1
    9440:	2c f7       	brge	.-54     	; 0x940c <inverse+0x10>
    9442:	88 0f       	add	r24, r24
    9444:	91 1d       	adc	r25, r1
    9446:	96 95       	lsr	r25
    9448:	87 95       	ror	r24
    944a:	97 f9       	bld	r25, 7
    944c:	08 95       	ret
    944e:	5f 3f       	cpi	r21, 0xFF	; 255
    9450:	ac f0       	brlt	.+42     	; 0x947c <ldexp+0x68>
    9452:	98 3e       	cpi	r25, 0xE8	; 232
    9454:	9c f0       	brlt	.+38     	; 0x947c <ldexp+0x68>
    9456:	bb 27       	eor	r27, r27
    9458:	86 95       	lsr	r24
    945a:	77 95       	ror	r23
    945c:	67 95       	ror	r22
    945e:	b7 95       	ror	r27
    9460:	08 f4       	brcc	.+2      	; 0x9464 <ldexp+0x50>
    9462:	b1 60       	ori	r27, 0x01	; 1
    9464:	93 95       	inc	r25
    9466:	c1 f7       	brne	.-16     	; 0x9458 <ldexp+0x44>
    9468:	bb 0f       	add	r27, r27
    946a:	58 f7       	brcc	.-42     	; 0x9442 <ldexp+0x2e>
    946c:	11 f4       	brne	.+4      	; 0x9472 <ldexp+0x5e>
    946e:	60 ff       	sbrs	r22, 0
    9470:	e8 cf       	rjmp	.-48     	; 0x9442 <ldexp+0x2e>
    9472:	6f 5f       	subi	r22, 0xFF	; 255
    9474:	7f 4f       	sbci	r23, 0xFF	; 255
    9476:	8f 4f       	sbci	r24, 0xFF	; 255
    9478:	9f 4f       	sbci	r25, 0xFF	; 255
    947a:	e3 cf       	rjmp	.-58     	; 0x9442 <ldexp+0x2e>
    947c:	0c 94 f3 49 	jmp	0x93e6	; 0x93e6 <__fp_szero>
    9480:	16 f0       	brts	.+4      	; 0x9486 <ldexp+0x72>
    9482:	0c 94 3a 49 	jmp	0x9274	; 0x9274 <__fp_mpack>
    9486:	0c 94 48 49 	jmp	0x9290	; 0x9290 <__fp_nan>
    948a:	68 94       	set
    948c:	0c 94 34 49 	jmp	0x9268	; 0x9268 <__fp_inf>

00009490 <log>:
    9490:	0e 94 d8 49 	call	0x93b0	; 0x93b0 <__fp_splitA>
    9494:	a8 f3       	brcs	.-22     	; 0x9480 <ldexp+0x6c>
    9496:	99 23       	and	r25, r25
    9498:	c1 f3       	breq	.-16     	; 0x948a <ldexp+0x76>
    949a:	ae f3       	brts	.-22     	; 0x9486 <ldexp+0x72>
    949c:	df 93       	push	r29
    949e:	cf 93       	push	r28
    94a0:	1f 93       	push	r17
    94a2:	0f 93       	push	r16
    94a4:	ff 92       	push	r15
    94a6:	c9 2f       	mov	r28, r25
    94a8:	dd 27       	eor	r29, r29
    94aa:	88 23       	and	r24, r24
    94ac:	2a f0       	brmi	.+10     	; 0x94b8 <log+0x28>
    94ae:	21 97       	sbiw	r28, 0x01	; 1
    94b0:	66 0f       	add	r22, r22
    94b2:	77 1f       	adc	r23, r23
    94b4:	88 1f       	adc	r24, r24
    94b6:	da f7       	brpl	.-10     	; 0x94ae <log+0x1e>
    94b8:	20 e0       	ldi	r18, 0x00	; 0
    94ba:	30 e0       	ldi	r19, 0x00	; 0
    94bc:	40 e8       	ldi	r20, 0x80	; 128
    94be:	5f eb       	ldi	r21, 0xBF	; 191
    94c0:	9f e3       	ldi	r25, 0x3F	; 63
    94c2:	88 39       	cpi	r24, 0x98	; 152
    94c4:	20 f0       	brcs	.+8      	; 0x94ce <log+0x3e>
    94c6:	80 3e       	cpi	r24, 0xE0	; 224
    94c8:	38 f0       	brcs	.+14     	; 0x94d8 <log+0x48>
    94ca:	21 96       	adiw	r28, 0x01	; 1
    94cc:	8f 77       	andi	r24, 0x7F	; 127
    94ce:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    94d2:	eb e8       	ldi	r30, 0x8B	; 139
    94d4:	f2 e0       	ldi	r31, 0x02	; 2
    94d6:	04 c0       	rjmp	.+8      	; 0x94e0 <log+0x50>
    94d8:	0e 94 b5 46 	call	0x8d6a	; 0x8d6a <__addsf3>
    94dc:	e8 eb       	ldi	r30, 0xB8	; 184
    94de:	f2 e0       	ldi	r31, 0x02	; 2
    94e0:	0e 94 4b 49 	call	0x9296	; 0x9296 <__fp_powser>
    94e4:	8b 01       	movw	r16, r22
    94e6:	be 01       	movw	r22, r28
    94e8:	ec 01       	movw	r28, r24
    94ea:	fb 2e       	mov	r15, r27
    94ec:	6f 57       	subi	r22, 0x7F	; 127
    94ee:	71 09       	sbc	r23, r1
    94f0:	75 95       	asr	r23
    94f2:	77 1f       	adc	r23, r23
    94f4:	88 0b       	sbc	r24, r24
    94f6:	99 0b       	sbc	r25, r25
    94f8:	0e 94 81 48 	call	0x9102	; 0x9102 <__floatsisf>
    94fc:	28 e1       	ldi	r18, 0x18	; 24
    94fe:	32 e7       	ldi	r19, 0x72	; 114
    9500:	41 e3       	ldi	r20, 0x31	; 49
    9502:	5f e3       	ldi	r21, 0x3F	; 63
    9504:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <__mulsf3x>
    9508:	af 2d       	mov	r26, r15
    950a:	98 01       	movw	r18, r16
    950c:	ae 01       	movw	r20, r28
    950e:	ff 90       	pop	r15
    9510:	0f 91       	pop	r16
    9512:	1f 91       	pop	r17
    9514:	cf 91       	pop	r28
    9516:	df 91       	pop	r29
    9518:	0e 94 cc 46 	call	0x8d98	; 0x8d98 <__addsf3x>
    951c:	0c 94 ab 49 	jmp	0x9356	; 0x9356 <__fp_round>

00009520 <modf>:
    9520:	fa 01       	movw	r30, r20
    9522:	dc 01       	movw	r26, r24
    9524:	aa 0f       	add	r26, r26
    9526:	bb 1f       	adc	r27, r27
    9528:	9b 01       	movw	r18, r22
    952a:	ac 01       	movw	r20, r24
    952c:	bf 57       	subi	r27, 0x7F	; 127
    952e:	28 f4       	brcc	.+10     	; 0x953a <modf+0x1a>
    9530:	22 27       	eor	r18, r18
    9532:	33 27       	eor	r19, r19
    9534:	44 27       	eor	r20, r20
    9536:	50 78       	andi	r21, 0x80	; 128
    9538:	20 c0       	rjmp	.+64     	; 0x957a <modf+0x5a>
    953a:	b7 51       	subi	r27, 0x17	; 23
    953c:	90 f4       	brcc	.+36     	; 0x9562 <modf+0x42>
    953e:	ab 2f       	mov	r26, r27
    9540:	00 24       	eor	r0, r0
    9542:	46 95       	lsr	r20
    9544:	37 95       	ror	r19
    9546:	27 95       	ror	r18
    9548:	01 1c       	adc	r0, r1
    954a:	a3 95       	inc	r26
    954c:	d2 f3       	brmi	.-12     	; 0x9542 <modf+0x22>
    954e:	00 20       	and	r0, r0
    9550:	71 f0       	breq	.+28     	; 0x956e <modf+0x4e>
    9552:	22 0f       	add	r18, r18
    9554:	33 1f       	adc	r19, r19
    9556:	44 1f       	adc	r20, r20
    9558:	b3 95       	inc	r27
    955a:	da f3       	brmi	.-10     	; 0x9552 <modf+0x32>
    955c:	0e d0       	rcall	.+28     	; 0x957a <modf+0x5a>
    955e:	0c 94 b4 46 	jmp	0x8d68	; 0x8d68 <__subsf3>
    9562:	61 30       	cpi	r22, 0x01	; 1
    9564:	71 05       	cpc	r23, r1
    9566:	a0 e8       	ldi	r26, 0x80	; 128
    9568:	8a 07       	cpc	r24, r26
    956a:	b9 46       	sbci	r27, 0x69	; 105
    956c:	30 f4       	brcc	.+12     	; 0x957a <modf+0x5a>
    956e:	9b 01       	movw	r18, r22
    9570:	ac 01       	movw	r20, r24
    9572:	66 27       	eor	r22, r22
    9574:	77 27       	eor	r23, r23
    9576:	88 27       	eor	r24, r24
    9578:	90 78       	andi	r25, 0x80	; 128
    957a:	30 96       	adiw	r30, 0x00	; 0
    957c:	21 f0       	breq	.+8      	; 0x9586 <modf+0x66>
    957e:	20 83       	st	Z, r18
    9580:	31 83       	std	Z+1, r19	; 0x01
    9582:	42 83       	std	Z+2, r20	; 0x02
    9584:	53 83       	std	Z+3, r21	; 0x03
    9586:	08 95       	ret

00009588 <__mulsf3>:
    9588:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <__mulsf3x>
    958c:	0c 94 ab 49 	jmp	0x9356	; 0x9356 <__fp_round>
    9590:	0e 94 72 49 	call	0x92e4	; 0x92e4 <__fp_pscA>
    9594:	38 f0       	brcs	.+14     	; 0x95a4 <__mulsf3+0x1c>
    9596:	0e 94 79 49 	call	0x92f2	; 0x92f2 <__fp_pscB>
    959a:	20 f0       	brcs	.+8      	; 0x95a4 <__mulsf3+0x1c>
    959c:	95 23       	and	r25, r21
    959e:	11 f0       	breq	.+4      	; 0x95a4 <__mulsf3+0x1c>
    95a0:	0c 94 34 49 	jmp	0x9268	; 0x9268 <__fp_inf>
    95a4:	0c 94 48 49 	jmp	0x9290	; 0x9290 <__fp_nan>
    95a8:	11 24       	eor	r1, r1
    95aa:	0c 94 f3 49 	jmp	0x93e6	; 0x93e6 <__fp_szero>

000095ae <__mulsf3x>:
    95ae:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <__fp_split3>
    95b2:	70 f3       	brcs	.-36     	; 0x9590 <__mulsf3+0x8>

000095b4 <__mulsf3_pse>:
    95b4:	95 9f       	mul	r25, r21
    95b6:	c1 f3       	breq	.-16     	; 0x95a8 <__mulsf3+0x20>
    95b8:	95 0f       	add	r25, r21
    95ba:	50 e0       	ldi	r21, 0x00	; 0
    95bc:	55 1f       	adc	r21, r21
    95be:	62 9f       	mul	r22, r18
    95c0:	f0 01       	movw	r30, r0
    95c2:	72 9f       	mul	r23, r18
    95c4:	bb 27       	eor	r27, r27
    95c6:	f0 0d       	add	r31, r0
    95c8:	b1 1d       	adc	r27, r1
    95ca:	63 9f       	mul	r22, r19
    95cc:	aa 27       	eor	r26, r26
    95ce:	f0 0d       	add	r31, r0
    95d0:	b1 1d       	adc	r27, r1
    95d2:	aa 1f       	adc	r26, r26
    95d4:	64 9f       	mul	r22, r20
    95d6:	66 27       	eor	r22, r22
    95d8:	b0 0d       	add	r27, r0
    95da:	a1 1d       	adc	r26, r1
    95dc:	66 1f       	adc	r22, r22
    95de:	82 9f       	mul	r24, r18
    95e0:	22 27       	eor	r18, r18
    95e2:	b0 0d       	add	r27, r0
    95e4:	a1 1d       	adc	r26, r1
    95e6:	62 1f       	adc	r22, r18
    95e8:	73 9f       	mul	r23, r19
    95ea:	b0 0d       	add	r27, r0
    95ec:	a1 1d       	adc	r26, r1
    95ee:	62 1f       	adc	r22, r18
    95f0:	83 9f       	mul	r24, r19
    95f2:	a0 0d       	add	r26, r0
    95f4:	61 1d       	adc	r22, r1
    95f6:	22 1f       	adc	r18, r18
    95f8:	74 9f       	mul	r23, r20
    95fa:	33 27       	eor	r19, r19
    95fc:	a0 0d       	add	r26, r0
    95fe:	61 1d       	adc	r22, r1
    9600:	23 1f       	adc	r18, r19
    9602:	84 9f       	mul	r24, r20
    9604:	60 0d       	add	r22, r0
    9606:	21 1d       	adc	r18, r1
    9608:	82 2f       	mov	r24, r18
    960a:	76 2f       	mov	r23, r22
    960c:	6a 2f       	mov	r22, r26
    960e:	11 24       	eor	r1, r1
    9610:	9f 57       	subi	r25, 0x7F	; 127
    9612:	50 40       	sbci	r21, 0x00	; 0
    9614:	9a f0       	brmi	.+38     	; 0x963c <__mulsf3_pse+0x88>
    9616:	f1 f0       	breq	.+60     	; 0x9654 <__mulsf3_pse+0xa0>
    9618:	88 23       	and	r24, r24
    961a:	4a f0       	brmi	.+18     	; 0x962e <__mulsf3_pse+0x7a>
    961c:	ee 0f       	add	r30, r30
    961e:	ff 1f       	adc	r31, r31
    9620:	bb 1f       	adc	r27, r27
    9622:	66 1f       	adc	r22, r22
    9624:	77 1f       	adc	r23, r23
    9626:	88 1f       	adc	r24, r24
    9628:	91 50       	subi	r25, 0x01	; 1
    962a:	50 40       	sbci	r21, 0x00	; 0
    962c:	a9 f7       	brne	.-22     	; 0x9618 <__mulsf3_pse+0x64>
    962e:	9e 3f       	cpi	r25, 0xFE	; 254
    9630:	51 05       	cpc	r21, r1
    9632:	80 f0       	brcs	.+32     	; 0x9654 <__mulsf3_pse+0xa0>
    9634:	0c 94 34 49 	jmp	0x9268	; 0x9268 <__fp_inf>
    9638:	0c 94 f3 49 	jmp	0x93e6	; 0x93e6 <__fp_szero>
    963c:	5f 3f       	cpi	r21, 0xFF	; 255
    963e:	e4 f3       	brlt	.-8      	; 0x9638 <__mulsf3_pse+0x84>
    9640:	98 3e       	cpi	r25, 0xE8	; 232
    9642:	d4 f3       	brlt	.-12     	; 0x9638 <__mulsf3_pse+0x84>
    9644:	86 95       	lsr	r24
    9646:	77 95       	ror	r23
    9648:	67 95       	ror	r22
    964a:	b7 95       	ror	r27
    964c:	f7 95       	ror	r31
    964e:	e7 95       	ror	r30
    9650:	9f 5f       	subi	r25, 0xFF	; 255
    9652:	c1 f7       	brne	.-16     	; 0x9644 <__mulsf3_pse+0x90>
    9654:	fe 2b       	or	r31, r30
    9656:	88 0f       	add	r24, r24
    9658:	91 1d       	adc	r25, r1
    965a:	96 95       	lsr	r25
    965c:	87 95       	ror	r24
    965e:	97 f9       	bld	r25, 7
    9660:	08 95       	ret

00009662 <pow>:
    9662:	fa 01       	movw	r30, r20
    9664:	ee 0f       	add	r30, r30
    9666:	ff 1f       	adc	r31, r31
    9668:	30 96       	adiw	r30, 0x00	; 0
    966a:	21 05       	cpc	r18, r1
    966c:	31 05       	cpc	r19, r1
    966e:	a1 f1       	breq	.+104    	; 0x96d8 <pow+0x76>
    9670:	61 15       	cp	r22, r1
    9672:	71 05       	cpc	r23, r1
    9674:	61 f4       	brne	.+24     	; 0x968e <pow+0x2c>
    9676:	80 38       	cpi	r24, 0x80	; 128
    9678:	bf e3       	ldi	r27, 0x3F	; 63
    967a:	9b 07       	cpc	r25, r27
    967c:	49 f1       	breq	.+82     	; 0x96d0 <pow+0x6e>
    967e:	68 94       	set
    9680:	90 38       	cpi	r25, 0x80	; 128
    9682:	81 05       	cpc	r24, r1
    9684:	61 f0       	breq	.+24     	; 0x969e <pow+0x3c>
    9686:	80 38       	cpi	r24, 0x80	; 128
    9688:	bf ef       	ldi	r27, 0xFF	; 255
    968a:	9b 07       	cpc	r25, r27
    968c:	41 f0       	breq	.+16     	; 0x969e <pow+0x3c>
    968e:	99 23       	and	r25, r25
    9690:	4a f5       	brpl	.+82     	; 0x96e4 <pow+0x82>
    9692:	ff 3f       	cpi	r31, 0xFF	; 255
    9694:	e1 05       	cpc	r30, r1
    9696:	31 05       	cpc	r19, r1
    9698:	21 05       	cpc	r18, r1
    969a:	19 f1       	breq	.+70     	; 0x96e2 <pow+0x80>
    969c:	e8 94       	clt
    969e:	08 94       	sec
    96a0:	e7 95       	ror	r30
    96a2:	d9 01       	movw	r26, r18
    96a4:	aa 23       	and	r26, r26
    96a6:	29 f4       	brne	.+10     	; 0x96b2 <pow+0x50>
    96a8:	ab 2f       	mov	r26, r27
    96aa:	be 2f       	mov	r27, r30
    96ac:	f8 5f       	subi	r31, 0xF8	; 248
    96ae:	d0 f3       	brcs	.-12     	; 0x96a4 <pow+0x42>
    96b0:	10 c0       	rjmp	.+32     	; 0x96d2 <pow+0x70>
    96b2:	ff 5f       	subi	r31, 0xFF	; 255
    96b4:	70 f4       	brcc	.+28     	; 0x96d2 <pow+0x70>
    96b6:	a6 95       	lsr	r26
    96b8:	e0 f7       	brcc	.-8      	; 0x96b2 <pow+0x50>
    96ba:	f7 39       	cpi	r31, 0x97	; 151
    96bc:	50 f0       	brcs	.+20     	; 0x96d2 <pow+0x70>
    96be:	19 f0       	breq	.+6      	; 0x96c6 <pow+0x64>
    96c0:	ff 3a       	cpi	r31, 0xAF	; 175
    96c2:	38 f4       	brcc	.+14     	; 0x96d2 <pow+0x70>
    96c4:	9f 77       	andi	r25, 0x7F	; 127
    96c6:	9f 93       	push	r25
    96c8:	0d d0       	rcall	.+26     	; 0x96e4 <pow+0x82>
    96ca:	0f 90       	pop	r0
    96cc:	07 fc       	sbrc	r0, 7
    96ce:	90 58       	subi	r25, 0x80	; 128
    96d0:	08 95       	ret
    96d2:	46 f0       	brts	.+16     	; 0x96e4 <pow+0x82>
    96d4:	0c 94 48 49 	jmp	0x9290	; 0x9290 <__fp_nan>
    96d8:	60 e0       	ldi	r22, 0x00	; 0
    96da:	70 e0       	ldi	r23, 0x00	; 0
    96dc:	80 e8       	ldi	r24, 0x80	; 128
    96de:	9f e3       	ldi	r25, 0x3F	; 63
    96e0:	08 95       	ret
    96e2:	4f e7       	ldi	r20, 0x7F	; 127
    96e4:	9f 77       	andi	r25, 0x7F	; 127
    96e6:	5f 93       	push	r21
    96e8:	4f 93       	push	r20
    96ea:	3f 93       	push	r19
    96ec:	2f 93       	push	r18
    96ee:	0e 94 48 4a 	call	0x9490	; 0x9490 <log>
    96f2:	2f 91       	pop	r18
    96f4:	3f 91       	pop	r19
    96f6:	4f 91       	pop	r20
    96f8:	5f 91       	pop	r21
    96fa:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    96fe:	0c 94 17 48 	jmp	0x902e	; 0x902e <exp>

00009702 <sin>:
    9702:	9f 93       	push	r25
    9704:	0e 94 82 49 	call	0x9304	; 0x9304 <__fp_rempio2>
    9708:	0f 90       	pop	r0
    970a:	07 fc       	sbrc	r0, 7
    970c:	ee 5f       	subi	r30, 0xFE	; 254
    970e:	0c 94 bc 49 	jmp	0x9378	; 0x9378 <__fp_sinus>

00009712 <square>:
    9712:	9b 01       	movw	r18, r22
    9714:	ac 01       	movw	r20, r24
    9716:	0c 94 c4 4a 	jmp	0x9588	; 0x9588 <__mulsf3>

0000971a <__unordsf2>:
    971a:	0e 94 10 49 	call	0x9220	; 0x9220 <__fp_cmp>
    971e:	88 0b       	sbc	r24, r24
    9720:	99 0b       	sbc	r25, r25
    9722:	08 95       	ret

00009724 <__fp_powsodd>:
    9724:	9f 93       	push	r25
    9726:	8f 93       	push	r24
    9728:	7f 93       	push	r23
    972a:	6f 93       	push	r22
    972c:	ff 93       	push	r31
    972e:	ef 93       	push	r30
    9730:	9b 01       	movw	r18, r22
    9732:	ac 01       	movw	r20, r24
    9734:	0e 94 c4 4a 	call	0x9588	; 0x9588 <__mulsf3>
    9738:	ef 91       	pop	r30
    973a:	ff 91       	pop	r31
    973c:	0e 94 4b 49 	call	0x9296	; 0x9296 <__fp_powser>
    9740:	2f 91       	pop	r18
    9742:	3f 91       	pop	r19
    9744:	4f 91       	pop	r20
    9746:	5f 91       	pop	r21
    9748:	0c 94 c4 4a 	jmp	0x9588	; 0x9588 <__mulsf3>

0000974c <__mulsi3>:
    974c:	db 01       	movw	r26, r22
    974e:	8f 93       	push	r24
    9750:	9f 93       	push	r25
    9752:	0e 94 17 4c 	call	0x982e	; 0x982e <__muluhisi3>
    9756:	bf 91       	pop	r27
    9758:	af 91       	pop	r26
    975a:	a2 9f       	mul	r26, r18
    975c:	80 0d       	add	r24, r0
    975e:	91 1d       	adc	r25, r1
    9760:	a3 9f       	mul	r26, r19
    9762:	90 0d       	add	r25, r0
    9764:	b2 9f       	mul	r27, r18
    9766:	90 0d       	add	r25, r0
    9768:	11 24       	eor	r1, r1
    976a:	08 95       	ret

0000976c <__udivmodhi4>:
    976c:	aa 1b       	sub	r26, r26
    976e:	bb 1b       	sub	r27, r27
    9770:	51 e1       	ldi	r21, 0x11	; 17
    9772:	07 c0       	rjmp	.+14     	; 0x9782 <__udivmodhi4_ep>

00009774 <__udivmodhi4_loop>:
    9774:	aa 1f       	adc	r26, r26
    9776:	bb 1f       	adc	r27, r27
    9778:	a6 17       	cp	r26, r22
    977a:	b7 07       	cpc	r27, r23
    977c:	10 f0       	brcs	.+4      	; 0x9782 <__udivmodhi4_ep>
    977e:	a6 1b       	sub	r26, r22
    9780:	b7 0b       	sbc	r27, r23

00009782 <__udivmodhi4_ep>:
    9782:	88 1f       	adc	r24, r24
    9784:	99 1f       	adc	r25, r25
    9786:	5a 95       	dec	r21
    9788:	a9 f7       	brne	.-22     	; 0x9774 <__udivmodhi4_loop>
    978a:	80 95       	com	r24
    978c:	90 95       	com	r25
    978e:	bc 01       	movw	r22, r24
    9790:	cd 01       	movw	r24, r26
    9792:	08 95       	ret

00009794 <__divmodhi4>:
    9794:	97 fb       	bst	r25, 7
    9796:	07 2e       	mov	r0, r23
    9798:	16 f4       	brtc	.+4      	; 0x979e <__divmodhi4+0xa>
    979a:	00 94       	com	r0
    979c:	07 d0       	rcall	.+14     	; 0x97ac <__divmodhi4_neg1>
    979e:	77 fd       	sbrc	r23, 7
    97a0:	09 d0       	rcall	.+18     	; 0x97b4 <__divmodhi4_neg2>
    97a2:	0e 94 b6 4b 	call	0x976c	; 0x976c <__udivmodhi4>
    97a6:	07 fc       	sbrc	r0, 7
    97a8:	05 d0       	rcall	.+10     	; 0x97b4 <__divmodhi4_neg2>
    97aa:	3e f4       	brtc	.+14     	; 0x97ba <__divmodhi4_exit>

000097ac <__divmodhi4_neg1>:
    97ac:	90 95       	com	r25
    97ae:	81 95       	neg	r24
    97b0:	9f 4f       	sbci	r25, 0xFF	; 255
    97b2:	08 95       	ret

000097b4 <__divmodhi4_neg2>:
    97b4:	70 95       	com	r23
    97b6:	61 95       	neg	r22
    97b8:	7f 4f       	sbci	r23, 0xFF	; 255

000097ba <__divmodhi4_exit>:
    97ba:	08 95       	ret

000097bc <__udivmodsi4>:
    97bc:	a1 e2       	ldi	r26, 0x21	; 33
    97be:	1a 2e       	mov	r1, r26
    97c0:	aa 1b       	sub	r26, r26
    97c2:	bb 1b       	sub	r27, r27
    97c4:	fd 01       	movw	r30, r26
    97c6:	0d c0       	rjmp	.+26     	; 0x97e2 <__udivmodsi4_ep>

000097c8 <__udivmodsi4_loop>:
    97c8:	aa 1f       	adc	r26, r26
    97ca:	bb 1f       	adc	r27, r27
    97cc:	ee 1f       	adc	r30, r30
    97ce:	ff 1f       	adc	r31, r31
    97d0:	a2 17       	cp	r26, r18
    97d2:	b3 07       	cpc	r27, r19
    97d4:	e4 07       	cpc	r30, r20
    97d6:	f5 07       	cpc	r31, r21
    97d8:	20 f0       	brcs	.+8      	; 0x97e2 <__udivmodsi4_ep>
    97da:	a2 1b       	sub	r26, r18
    97dc:	b3 0b       	sbc	r27, r19
    97de:	e4 0b       	sbc	r30, r20
    97e0:	f5 0b       	sbc	r31, r21

000097e2 <__udivmodsi4_ep>:
    97e2:	66 1f       	adc	r22, r22
    97e4:	77 1f       	adc	r23, r23
    97e6:	88 1f       	adc	r24, r24
    97e8:	99 1f       	adc	r25, r25
    97ea:	1a 94       	dec	r1
    97ec:	69 f7       	brne	.-38     	; 0x97c8 <__udivmodsi4_loop>
    97ee:	60 95       	com	r22
    97f0:	70 95       	com	r23
    97f2:	80 95       	com	r24
    97f4:	90 95       	com	r25
    97f6:	9b 01       	movw	r18, r22
    97f8:	ac 01       	movw	r20, r24
    97fa:	bd 01       	movw	r22, r26
    97fc:	cf 01       	movw	r24, r30
    97fe:	08 95       	ret

00009800 <__tablejump2__>:
    9800:	ee 0f       	add	r30, r30
    9802:	ff 1f       	adc	r31, r31
    9804:	88 1f       	adc	r24, r24
    9806:	8b bf       	out	0x3b, r24	; 59
    9808:	07 90       	elpm	r0, Z+
    980a:	f6 91       	elpm	r31, Z
    980c:	e0 2d       	mov	r30, r0
    980e:	19 94       	eijmp

00009810 <__umulhisi3>:
    9810:	a2 9f       	mul	r26, r18
    9812:	b0 01       	movw	r22, r0
    9814:	b3 9f       	mul	r27, r19
    9816:	c0 01       	movw	r24, r0
    9818:	a3 9f       	mul	r26, r19
    981a:	70 0d       	add	r23, r0
    981c:	81 1d       	adc	r24, r1
    981e:	11 24       	eor	r1, r1
    9820:	91 1d       	adc	r25, r1
    9822:	b2 9f       	mul	r27, r18
    9824:	70 0d       	add	r23, r0
    9826:	81 1d       	adc	r24, r1
    9828:	11 24       	eor	r1, r1
    982a:	91 1d       	adc	r25, r1
    982c:	08 95       	ret

0000982e <__muluhisi3>:
    982e:	0e 94 08 4c 	call	0x9810	; 0x9810 <__umulhisi3>
    9832:	a5 9f       	mul	r26, r21
    9834:	90 0d       	add	r25, r0
    9836:	b4 9f       	mul	r27, r20
    9838:	90 0d       	add	r25, r0
    983a:	a4 9f       	mul	r26, r20
    983c:	80 0d       	add	r24, r0
    983e:	91 1d       	adc	r25, r1
    9840:	11 24       	eor	r1, r1
    9842:	08 95       	ret

00009844 <malloc>:
    9844:	0f 93       	push	r16
    9846:	1f 93       	push	r17
    9848:	cf 93       	push	r28
    984a:	df 93       	push	r29
    984c:	82 30       	cpi	r24, 0x02	; 2
    984e:	91 05       	cpc	r25, r1
    9850:	10 f4       	brcc	.+4      	; 0x9856 <malloc+0x12>
    9852:	82 e0       	ldi	r24, 0x02	; 2
    9854:	90 e0       	ldi	r25, 0x00	; 0
    9856:	e0 91 91 26 	lds	r30, 0x2691	; 0x802691 <__flp>
    985a:	f0 91 92 26 	lds	r31, 0x2692	; 0x802692 <__flp+0x1>
    985e:	20 e0       	ldi	r18, 0x00	; 0
    9860:	30 e0       	ldi	r19, 0x00	; 0
    9862:	a0 e0       	ldi	r26, 0x00	; 0
    9864:	b0 e0       	ldi	r27, 0x00	; 0
    9866:	30 97       	sbiw	r30, 0x00	; 0
    9868:	19 f1       	breq	.+70     	; 0x98b0 <malloc+0x6c>
    986a:	40 81       	ld	r20, Z
    986c:	51 81       	ldd	r21, Z+1	; 0x01
    986e:	02 81       	ldd	r16, Z+2	; 0x02
    9870:	13 81       	ldd	r17, Z+3	; 0x03
    9872:	48 17       	cp	r20, r24
    9874:	59 07       	cpc	r21, r25
    9876:	c8 f0       	brcs	.+50     	; 0x98aa <malloc+0x66>
    9878:	84 17       	cp	r24, r20
    987a:	95 07       	cpc	r25, r21
    987c:	69 f4       	brne	.+26     	; 0x9898 <malloc+0x54>
    987e:	10 97       	sbiw	r26, 0x00	; 0
    9880:	31 f0       	breq	.+12     	; 0x988e <malloc+0x4a>
    9882:	12 96       	adiw	r26, 0x02	; 2
    9884:	0c 93       	st	X, r16
    9886:	12 97       	sbiw	r26, 0x02	; 2
    9888:	13 96       	adiw	r26, 0x03	; 3
    988a:	1c 93       	st	X, r17
    988c:	27 c0       	rjmp	.+78     	; 0x98dc <malloc+0x98>
    988e:	00 93 91 26 	sts	0x2691, r16	; 0x802691 <__flp>
    9892:	10 93 92 26 	sts	0x2692, r17	; 0x802692 <__flp+0x1>
    9896:	22 c0       	rjmp	.+68     	; 0x98dc <malloc+0x98>
    9898:	21 15       	cp	r18, r1
    989a:	31 05       	cpc	r19, r1
    989c:	19 f0       	breq	.+6      	; 0x98a4 <malloc+0x60>
    989e:	42 17       	cp	r20, r18
    98a0:	53 07       	cpc	r21, r19
    98a2:	18 f4       	brcc	.+6      	; 0x98aa <malloc+0x66>
    98a4:	9a 01       	movw	r18, r20
    98a6:	bd 01       	movw	r22, r26
    98a8:	ef 01       	movw	r28, r30
    98aa:	df 01       	movw	r26, r30
    98ac:	f8 01       	movw	r30, r16
    98ae:	db cf       	rjmp	.-74     	; 0x9866 <malloc+0x22>
    98b0:	21 15       	cp	r18, r1
    98b2:	31 05       	cpc	r19, r1
    98b4:	f9 f0       	breq	.+62     	; 0x98f4 <malloc+0xb0>
    98b6:	28 1b       	sub	r18, r24
    98b8:	39 0b       	sbc	r19, r25
    98ba:	24 30       	cpi	r18, 0x04	; 4
    98bc:	31 05       	cpc	r19, r1
    98be:	80 f4       	brcc	.+32     	; 0x98e0 <malloc+0x9c>
    98c0:	8a 81       	ldd	r24, Y+2	; 0x02
    98c2:	9b 81       	ldd	r25, Y+3	; 0x03
    98c4:	61 15       	cp	r22, r1
    98c6:	71 05       	cpc	r23, r1
    98c8:	21 f0       	breq	.+8      	; 0x98d2 <malloc+0x8e>
    98ca:	fb 01       	movw	r30, r22
    98cc:	82 83       	std	Z+2, r24	; 0x02
    98ce:	93 83       	std	Z+3, r25	; 0x03
    98d0:	04 c0       	rjmp	.+8      	; 0x98da <malloc+0x96>
    98d2:	80 93 91 26 	sts	0x2691, r24	; 0x802691 <__flp>
    98d6:	90 93 92 26 	sts	0x2692, r25	; 0x802692 <__flp+0x1>
    98da:	fe 01       	movw	r30, r28
    98dc:	32 96       	adiw	r30, 0x02	; 2
    98de:	44 c0       	rjmp	.+136    	; 0x9968 <malloc+0x124>
    98e0:	fe 01       	movw	r30, r28
    98e2:	e2 0f       	add	r30, r18
    98e4:	f3 1f       	adc	r31, r19
    98e6:	81 93       	st	Z+, r24
    98e8:	91 93       	st	Z+, r25
    98ea:	22 50       	subi	r18, 0x02	; 2
    98ec:	31 09       	sbc	r19, r1
    98ee:	28 83       	st	Y, r18
    98f0:	39 83       	std	Y+1, r19	; 0x01
    98f2:	3a c0       	rjmp	.+116    	; 0x9968 <malloc+0x124>
    98f4:	20 91 8f 26 	lds	r18, 0x268F	; 0x80268f <__brkval>
    98f8:	30 91 90 26 	lds	r19, 0x2690	; 0x802690 <__brkval+0x1>
    98fc:	23 2b       	or	r18, r19
    98fe:	41 f4       	brne	.+16     	; 0x9910 <malloc+0xcc>
    9900:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    9904:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    9908:	20 93 8f 26 	sts	0x268F, r18	; 0x80268f <__brkval>
    990c:	30 93 90 26 	sts	0x2690, r19	; 0x802690 <__brkval+0x1>
    9910:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    9914:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    9918:	21 15       	cp	r18, r1
    991a:	31 05       	cpc	r19, r1
    991c:	41 f4       	brne	.+16     	; 0x992e <malloc+0xea>
    991e:	2d b7       	in	r18, 0x3d	; 61
    9920:	3e b7       	in	r19, 0x3e	; 62
    9922:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    9926:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    992a:	24 1b       	sub	r18, r20
    992c:	35 0b       	sbc	r19, r21
    992e:	e0 91 8f 26 	lds	r30, 0x268F	; 0x80268f <__brkval>
    9932:	f0 91 90 26 	lds	r31, 0x2690	; 0x802690 <__brkval+0x1>
    9936:	e2 17       	cp	r30, r18
    9938:	f3 07       	cpc	r31, r19
    993a:	a0 f4       	brcc	.+40     	; 0x9964 <malloc+0x120>
    993c:	2e 1b       	sub	r18, r30
    993e:	3f 0b       	sbc	r19, r31
    9940:	28 17       	cp	r18, r24
    9942:	39 07       	cpc	r19, r25
    9944:	78 f0       	brcs	.+30     	; 0x9964 <malloc+0x120>
    9946:	ac 01       	movw	r20, r24
    9948:	4e 5f       	subi	r20, 0xFE	; 254
    994a:	5f 4f       	sbci	r21, 0xFF	; 255
    994c:	24 17       	cp	r18, r20
    994e:	35 07       	cpc	r19, r21
    9950:	48 f0       	brcs	.+18     	; 0x9964 <malloc+0x120>
    9952:	4e 0f       	add	r20, r30
    9954:	5f 1f       	adc	r21, r31
    9956:	40 93 8f 26 	sts	0x268F, r20	; 0x80268f <__brkval>
    995a:	50 93 90 26 	sts	0x2690, r21	; 0x802690 <__brkval+0x1>
    995e:	81 93       	st	Z+, r24
    9960:	91 93       	st	Z+, r25
    9962:	02 c0       	rjmp	.+4      	; 0x9968 <malloc+0x124>
    9964:	e0 e0       	ldi	r30, 0x00	; 0
    9966:	f0 e0       	ldi	r31, 0x00	; 0
    9968:	cf 01       	movw	r24, r30
    996a:	df 91       	pop	r29
    996c:	cf 91       	pop	r28
    996e:	1f 91       	pop	r17
    9970:	0f 91       	pop	r16
    9972:	08 95       	ret

00009974 <free>:
    9974:	cf 93       	push	r28
    9976:	df 93       	push	r29
    9978:	00 97       	sbiw	r24, 0x00	; 0
    997a:	09 f4       	brne	.+2      	; 0x997e <free+0xa>
    997c:	81 c0       	rjmp	.+258    	; 0x9a80 <free+0x10c>
    997e:	fc 01       	movw	r30, r24
    9980:	32 97       	sbiw	r30, 0x02	; 2
    9982:	12 82       	std	Z+2, r1	; 0x02
    9984:	13 82       	std	Z+3, r1	; 0x03
    9986:	a0 91 91 26 	lds	r26, 0x2691	; 0x802691 <__flp>
    998a:	b0 91 92 26 	lds	r27, 0x2692	; 0x802692 <__flp+0x1>
    998e:	10 97       	sbiw	r26, 0x00	; 0
    9990:	81 f4       	brne	.+32     	; 0x99b2 <free+0x3e>
    9992:	20 81       	ld	r18, Z
    9994:	31 81       	ldd	r19, Z+1	; 0x01
    9996:	82 0f       	add	r24, r18
    9998:	93 1f       	adc	r25, r19
    999a:	20 91 8f 26 	lds	r18, 0x268F	; 0x80268f <__brkval>
    999e:	30 91 90 26 	lds	r19, 0x2690	; 0x802690 <__brkval+0x1>
    99a2:	28 17       	cp	r18, r24
    99a4:	39 07       	cpc	r19, r25
    99a6:	51 f5       	brne	.+84     	; 0x99fc <free+0x88>
    99a8:	e0 93 8f 26 	sts	0x268F, r30	; 0x80268f <__brkval>
    99ac:	f0 93 90 26 	sts	0x2690, r31	; 0x802690 <__brkval+0x1>
    99b0:	67 c0       	rjmp	.+206    	; 0x9a80 <free+0x10c>
    99b2:	ed 01       	movw	r28, r26
    99b4:	20 e0       	ldi	r18, 0x00	; 0
    99b6:	30 e0       	ldi	r19, 0x00	; 0
    99b8:	ce 17       	cp	r28, r30
    99ba:	df 07       	cpc	r29, r31
    99bc:	40 f4       	brcc	.+16     	; 0x99ce <free+0x5a>
    99be:	4a 81       	ldd	r20, Y+2	; 0x02
    99c0:	5b 81       	ldd	r21, Y+3	; 0x03
    99c2:	9e 01       	movw	r18, r28
    99c4:	41 15       	cp	r20, r1
    99c6:	51 05       	cpc	r21, r1
    99c8:	f1 f0       	breq	.+60     	; 0x9a06 <free+0x92>
    99ca:	ea 01       	movw	r28, r20
    99cc:	f5 cf       	rjmp	.-22     	; 0x99b8 <free+0x44>
    99ce:	c2 83       	std	Z+2, r28	; 0x02
    99d0:	d3 83       	std	Z+3, r29	; 0x03
    99d2:	40 81       	ld	r20, Z
    99d4:	51 81       	ldd	r21, Z+1	; 0x01
    99d6:	84 0f       	add	r24, r20
    99d8:	95 1f       	adc	r25, r21
    99da:	c8 17       	cp	r28, r24
    99dc:	d9 07       	cpc	r29, r25
    99de:	59 f4       	brne	.+22     	; 0x99f6 <free+0x82>
    99e0:	88 81       	ld	r24, Y
    99e2:	99 81       	ldd	r25, Y+1	; 0x01
    99e4:	84 0f       	add	r24, r20
    99e6:	95 1f       	adc	r25, r21
    99e8:	02 96       	adiw	r24, 0x02	; 2
    99ea:	80 83       	st	Z, r24
    99ec:	91 83       	std	Z+1, r25	; 0x01
    99ee:	8a 81       	ldd	r24, Y+2	; 0x02
    99f0:	9b 81       	ldd	r25, Y+3	; 0x03
    99f2:	82 83       	std	Z+2, r24	; 0x02
    99f4:	93 83       	std	Z+3, r25	; 0x03
    99f6:	21 15       	cp	r18, r1
    99f8:	31 05       	cpc	r19, r1
    99fa:	29 f4       	brne	.+10     	; 0x9a06 <free+0x92>
    99fc:	e0 93 91 26 	sts	0x2691, r30	; 0x802691 <__flp>
    9a00:	f0 93 92 26 	sts	0x2692, r31	; 0x802692 <__flp+0x1>
    9a04:	3d c0       	rjmp	.+122    	; 0x9a80 <free+0x10c>
    9a06:	e9 01       	movw	r28, r18
    9a08:	ea 83       	std	Y+2, r30	; 0x02
    9a0a:	fb 83       	std	Y+3, r31	; 0x03
    9a0c:	49 91       	ld	r20, Y+
    9a0e:	59 91       	ld	r21, Y+
    9a10:	c4 0f       	add	r28, r20
    9a12:	d5 1f       	adc	r29, r21
    9a14:	ec 17       	cp	r30, r28
    9a16:	fd 07       	cpc	r31, r29
    9a18:	61 f4       	brne	.+24     	; 0x9a32 <free+0xbe>
    9a1a:	80 81       	ld	r24, Z
    9a1c:	91 81       	ldd	r25, Z+1	; 0x01
    9a1e:	84 0f       	add	r24, r20
    9a20:	95 1f       	adc	r25, r21
    9a22:	02 96       	adiw	r24, 0x02	; 2
    9a24:	e9 01       	movw	r28, r18
    9a26:	88 83       	st	Y, r24
    9a28:	99 83       	std	Y+1, r25	; 0x01
    9a2a:	82 81       	ldd	r24, Z+2	; 0x02
    9a2c:	93 81       	ldd	r25, Z+3	; 0x03
    9a2e:	8a 83       	std	Y+2, r24	; 0x02
    9a30:	9b 83       	std	Y+3, r25	; 0x03
    9a32:	e0 e0       	ldi	r30, 0x00	; 0
    9a34:	f0 e0       	ldi	r31, 0x00	; 0
    9a36:	12 96       	adiw	r26, 0x02	; 2
    9a38:	8d 91       	ld	r24, X+
    9a3a:	9c 91       	ld	r25, X
    9a3c:	13 97       	sbiw	r26, 0x03	; 3
    9a3e:	00 97       	sbiw	r24, 0x00	; 0
    9a40:	19 f0       	breq	.+6      	; 0x9a48 <free+0xd4>
    9a42:	fd 01       	movw	r30, r26
    9a44:	dc 01       	movw	r26, r24
    9a46:	f7 cf       	rjmp	.-18     	; 0x9a36 <free+0xc2>
    9a48:	8d 91       	ld	r24, X+
    9a4a:	9c 91       	ld	r25, X
    9a4c:	11 97       	sbiw	r26, 0x01	; 1
    9a4e:	9d 01       	movw	r18, r26
    9a50:	2e 5f       	subi	r18, 0xFE	; 254
    9a52:	3f 4f       	sbci	r19, 0xFF	; 255
    9a54:	82 0f       	add	r24, r18
    9a56:	93 1f       	adc	r25, r19
    9a58:	20 91 8f 26 	lds	r18, 0x268F	; 0x80268f <__brkval>
    9a5c:	30 91 90 26 	lds	r19, 0x2690	; 0x802690 <__brkval+0x1>
    9a60:	28 17       	cp	r18, r24
    9a62:	39 07       	cpc	r19, r25
    9a64:	69 f4       	brne	.+26     	; 0x9a80 <free+0x10c>
    9a66:	30 97       	sbiw	r30, 0x00	; 0
    9a68:	29 f4       	brne	.+10     	; 0x9a74 <free+0x100>
    9a6a:	10 92 91 26 	sts	0x2691, r1	; 0x802691 <__flp>
    9a6e:	10 92 92 26 	sts	0x2692, r1	; 0x802692 <__flp+0x1>
    9a72:	02 c0       	rjmp	.+4      	; 0x9a78 <free+0x104>
    9a74:	12 82       	std	Z+2, r1	; 0x02
    9a76:	13 82       	std	Z+3, r1	; 0x03
    9a78:	a0 93 8f 26 	sts	0x268F, r26	; 0x80268f <__brkval>
    9a7c:	b0 93 90 26 	sts	0x2690, r27	; 0x802690 <__brkval+0x1>
    9a80:	df 91       	pop	r29
    9a82:	cf 91       	pop	r28
    9a84:	08 95       	ret

00009a86 <strtoul>:
    9a86:	3f 92       	push	r3
    9a88:	4f 92       	push	r4
    9a8a:	5f 92       	push	r5
    9a8c:	6f 92       	push	r6
    9a8e:	7f 92       	push	r7
    9a90:	8f 92       	push	r8
    9a92:	9f 92       	push	r9
    9a94:	af 92       	push	r10
    9a96:	bf 92       	push	r11
    9a98:	cf 92       	push	r12
    9a9a:	df 92       	push	r13
    9a9c:	ef 92       	push	r14
    9a9e:	ff 92       	push	r15
    9aa0:	0f 93       	push	r16
    9aa2:	1f 93       	push	r17
    9aa4:	cf 93       	push	r28
    9aa6:	df 93       	push	r29
    9aa8:	5c 01       	movw	r10, r24
    9aaa:	6b 01       	movw	r12, r22
    9aac:	7a 01       	movw	r14, r20
    9aae:	61 15       	cp	r22, r1
    9ab0:	71 05       	cpc	r23, r1
    9ab2:	19 f0       	breq	.+6      	; 0x9aba <strtoul+0x34>
    9ab4:	fb 01       	movw	r30, r22
    9ab6:	80 83       	st	Z, r24
    9ab8:	91 83       	std	Z+1, r25	; 0x01
    9aba:	e1 14       	cp	r14, r1
    9abc:	f1 04       	cpc	r15, r1
    9abe:	29 f0       	breq	.+10     	; 0x9aca <strtoul+0x44>
    9ac0:	c7 01       	movw	r24, r14
    9ac2:	02 97       	sbiw	r24, 0x02	; 2
    9ac4:	83 97       	sbiw	r24, 0x23	; 35
    9ac6:	08 f0       	brcs	.+2      	; 0x9aca <strtoul+0x44>
    9ac8:	c9 c0       	rjmp	.+402    	; 0x9c5c <strtoul+0x1d6>
    9aca:	e5 01       	movw	r28, r10
    9acc:	21 96       	adiw	r28, 0x01	; 1
    9ace:	f5 01       	movw	r30, r10
    9ad0:	10 81       	ld	r17, Z
    9ad2:	81 2f       	mov	r24, r17
    9ad4:	90 e0       	ldi	r25, 0x00	; 0
    9ad6:	0e 94 46 4f 	call	0x9e8c	; 0x9e8c <isspace>
    9ada:	89 2b       	or	r24, r25
    9adc:	11 f0       	breq	.+4      	; 0x9ae2 <strtoul+0x5c>
    9ade:	5e 01       	movw	r10, r28
    9ae0:	f4 cf       	rjmp	.-24     	; 0x9aca <strtoul+0x44>
    9ae2:	1d 32       	cpi	r17, 0x2D	; 45
    9ae4:	29 f4       	brne	.+10     	; 0x9af0 <strtoul+0x6a>
    9ae6:	21 96       	adiw	r28, 0x01	; 1
    9ae8:	f5 01       	movw	r30, r10
    9aea:	11 81       	ldd	r17, Z+1	; 0x01
    9aec:	01 e0       	ldi	r16, 0x01	; 1
    9aee:	07 c0       	rjmp	.+14     	; 0x9afe <strtoul+0x78>
    9af0:	1b 32       	cpi	r17, 0x2B	; 43
    9af2:	21 f4       	brne	.+8      	; 0x9afc <strtoul+0x76>
    9af4:	e5 01       	movw	r28, r10
    9af6:	22 96       	adiw	r28, 0x02	; 2
    9af8:	f5 01       	movw	r30, r10
    9afa:	11 81       	ldd	r17, Z+1	; 0x01
    9afc:	00 e0       	ldi	r16, 0x00	; 0
    9afe:	e1 14       	cp	r14, r1
    9b00:	f1 04       	cpc	r15, r1
    9b02:	b1 f0       	breq	.+44     	; 0x9b30 <strtoul+0xaa>
    9b04:	f0 e1       	ldi	r31, 0x10	; 16
    9b06:	ef 16       	cp	r14, r31
    9b08:	f1 04       	cpc	r15, r1
    9b0a:	29 f4       	brne	.+10     	; 0x9b16 <strtoul+0x90>
    9b0c:	b0 c0       	rjmp	.+352    	; 0x9c6e <strtoul+0x1e8>
    9b0e:	10 e3       	ldi	r17, 0x30	; 48
    9b10:	e1 14       	cp	r14, r1
    9b12:	f1 04       	cpc	r15, r1
    9b14:	01 f1       	breq	.+64     	; 0x9b56 <strtoul+0xd0>
    9b16:	2a e0       	ldi	r18, 0x0A	; 10
    9b18:	e2 16       	cp	r14, r18
    9b1a:	f1 04       	cpc	r15, r1
    9b1c:	b1 f1       	breq	.+108    	; 0x9b8a <strtoul+0x104>
    9b1e:	80 e1       	ldi	r24, 0x10	; 16
    9b20:	e8 16       	cp	r14, r24
    9b22:	f1 04       	cpc	r15, r1
    9b24:	71 f0       	breq	.+28     	; 0x9b42 <strtoul+0xbc>
    9b26:	e8 e0       	ldi	r30, 0x08	; 8
    9b28:	ee 16       	cp	r14, r30
    9b2a:	f1 04       	cpc	r15, r1
    9b2c:	f1 f4       	brne	.+60     	; 0x9b6a <strtoul+0xe4>
    9b2e:	13 c0       	rjmp	.+38     	; 0x9b56 <strtoul+0xd0>
    9b30:	10 33       	cpi	r17, 0x30	; 48
    9b32:	41 f5       	brne	.+80     	; 0x9b84 <strtoul+0xfe>
    9b34:	88 81       	ld	r24, Y
    9b36:	8f 7d       	andi	r24, 0xDF	; 223
    9b38:	88 35       	cpi	r24, 0x58	; 88
    9b3a:	49 f7       	brne	.-46     	; 0x9b0e <strtoul+0x88>
    9b3c:	19 81       	ldd	r17, Y+1	; 0x01
    9b3e:	22 96       	adiw	r28, 0x02	; 2
    9b40:	02 60       	ori	r16, 0x02	; 2
    9b42:	f0 e1       	ldi	r31, 0x10	; 16
    9b44:	ef 2e       	mov	r14, r31
    9b46:	f1 2c       	mov	r15, r1
    9b48:	88 24       	eor	r8, r8
    9b4a:	8a 94       	dec	r8
    9b4c:	98 2c       	mov	r9, r8
    9b4e:	a8 2c       	mov	r10, r8
    9b50:	af e0       	ldi	r26, 0x0F	; 15
    9b52:	ba 2e       	mov	r11, r26
    9b54:	20 c0       	rjmp	.+64     	; 0x9b96 <strtoul+0x110>
    9b56:	78 e0       	ldi	r23, 0x08	; 8
    9b58:	e7 2e       	mov	r14, r23
    9b5a:	f1 2c       	mov	r15, r1
    9b5c:	88 24       	eor	r8, r8
    9b5e:	8a 94       	dec	r8
    9b60:	98 2c       	mov	r9, r8
    9b62:	a8 2c       	mov	r10, r8
    9b64:	ef e1       	ldi	r30, 0x1F	; 31
    9b66:	be 2e       	mov	r11, r30
    9b68:	16 c0       	rjmp	.+44     	; 0x9b96 <strtoul+0x110>
    9b6a:	6f ef       	ldi	r22, 0xFF	; 255
    9b6c:	7f ef       	ldi	r23, 0xFF	; 255
    9b6e:	cb 01       	movw	r24, r22
    9b70:	97 01       	movw	r18, r14
    9b72:	0f 2c       	mov	r0, r15
    9b74:	00 0c       	add	r0, r0
    9b76:	44 0b       	sbc	r20, r20
    9b78:	55 0b       	sbc	r21, r21
    9b7a:	0e 94 de 4b 	call	0x97bc	; 0x97bc <__udivmodsi4>
    9b7e:	49 01       	movw	r8, r18
    9b80:	5a 01       	movw	r10, r20
    9b82:	09 c0       	rjmp	.+18     	; 0x9b96 <strtoul+0x110>
    9b84:	8a e0       	ldi	r24, 0x0A	; 10
    9b86:	e8 2e       	mov	r14, r24
    9b88:	f1 2c       	mov	r15, r1
    9b8a:	69 e9       	ldi	r22, 0x99	; 153
    9b8c:	86 2e       	mov	r8, r22
    9b8e:	98 2c       	mov	r9, r8
    9b90:	a8 2c       	mov	r10, r8
    9b92:	69 e1       	ldi	r22, 0x19	; 25
    9b94:	b6 2e       	mov	r11, r22
    9b96:	40 e0       	ldi	r20, 0x00	; 0
    9b98:	60 e0       	ldi	r22, 0x00	; 0
    9b9a:	70 e0       	ldi	r23, 0x00	; 0
    9b9c:	cb 01       	movw	r24, r22
    9b9e:	27 01       	movw	r4, r14
    9ba0:	0f 2c       	mov	r0, r15
    9ba2:	00 0c       	add	r0, r0
    9ba4:	66 08       	sbc	r6, r6
    9ba6:	77 08       	sbc	r7, r7
    9ba8:	fe 01       	movw	r30, r28
    9baa:	50 ed       	ldi	r21, 0xD0	; 208
    9bac:	35 2e       	mov	r3, r21
    9bae:	31 0e       	add	r3, r17
    9bb0:	29 e0       	ldi	r18, 0x09	; 9
    9bb2:	23 15       	cp	r18, r3
    9bb4:	70 f4       	brcc	.+28     	; 0x9bd2 <strtoul+0x14c>
    9bb6:	2f eb       	ldi	r18, 0xBF	; 191
    9bb8:	21 0f       	add	r18, r17
    9bba:	2a 31       	cpi	r18, 0x1A	; 26
    9bbc:	18 f4       	brcc	.+6      	; 0x9bc4 <strtoul+0x13e>
    9bbe:	39 ec       	ldi	r19, 0xC9	; 201
    9bc0:	33 2e       	mov	r3, r19
    9bc2:	06 c0       	rjmp	.+12     	; 0x9bd0 <strtoul+0x14a>
    9bc4:	2f e9       	ldi	r18, 0x9F	; 159
    9bc6:	21 0f       	add	r18, r17
    9bc8:	2a 31       	cpi	r18, 0x1A	; 26
    9bca:	30 f5       	brcc	.+76     	; 0x9c18 <strtoul+0x192>
    9bcc:	29 ea       	ldi	r18, 0xA9	; 169
    9bce:	32 2e       	mov	r3, r18
    9bd0:	31 0e       	add	r3, r17
    9bd2:	23 2d       	mov	r18, r3
    9bd4:	30 e0       	ldi	r19, 0x00	; 0
    9bd6:	2e 15       	cp	r18, r14
    9bd8:	3f 05       	cpc	r19, r15
    9bda:	f4 f4       	brge	.+60     	; 0x9c18 <strtoul+0x192>
    9bdc:	4f 3f       	cpi	r20, 0xFF	; 255
    9bde:	c9 f0       	breq	.+50     	; 0x9c12 <strtoul+0x18c>
    9be0:	86 16       	cp	r8, r22
    9be2:	97 06       	cpc	r9, r23
    9be4:	a8 06       	cpc	r10, r24
    9be6:	b9 06       	cpc	r11, r25
    9be8:	88 f0       	brcs	.+34     	; 0x9c0c <strtoul+0x186>
    9bea:	a3 01       	movw	r20, r6
    9bec:	92 01       	movw	r18, r4
    9bee:	0e 94 a6 4b 	call	0x974c	; 0x974c <__mulsi3>
    9bf2:	23 2d       	mov	r18, r3
    9bf4:	30 e0       	ldi	r19, 0x00	; 0
    9bf6:	40 e0       	ldi	r20, 0x00	; 0
    9bf8:	50 e0       	ldi	r21, 0x00	; 0
    9bfa:	62 0f       	add	r22, r18
    9bfc:	73 1f       	adc	r23, r19
    9bfe:	84 1f       	adc	r24, r20
    9c00:	95 1f       	adc	r25, r21
    9c02:	62 17       	cp	r22, r18
    9c04:	73 07       	cpc	r23, r19
    9c06:	84 07       	cpc	r24, r20
    9c08:	95 07       	cpc	r25, r21
    9c0a:	10 f4       	brcc	.+4      	; 0x9c10 <strtoul+0x18a>
    9c0c:	4f ef       	ldi	r20, 0xFF	; 255
    9c0e:	01 c0       	rjmp	.+2      	; 0x9c12 <strtoul+0x18c>
    9c10:	41 e0       	ldi	r20, 0x01	; 1
    9c12:	21 96       	adiw	r28, 0x01	; 1
    9c14:	10 81       	ld	r17, Z
    9c16:	c8 cf       	rjmp	.-112    	; 0x9ba8 <strtoul+0x122>
    9c18:	c1 14       	cp	r12, r1
    9c1a:	d1 04       	cpc	r13, r1
    9c1c:	51 f0       	breq	.+20     	; 0x9c32 <strtoul+0x1ac>
    9c1e:	44 23       	and	r20, r20
    9c20:	11 f0       	breq	.+4      	; 0x9c26 <strtoul+0x1a0>
    9c22:	21 97       	sbiw	r28, 0x01	; 1
    9c24:	03 c0       	rjmp	.+6      	; 0x9c2c <strtoul+0x1a6>
    9c26:	01 ff       	sbrs	r16, 1
    9c28:	04 c0       	rjmp	.+8      	; 0x9c32 <strtoul+0x1ac>
    9c2a:	22 97       	sbiw	r28, 0x02	; 2
    9c2c:	f6 01       	movw	r30, r12
    9c2e:	c0 83       	st	Z, r28
    9c30:	d1 83       	std	Z+1, r29	; 0x01
    9c32:	00 ff       	sbrs	r16, 0
    9c34:	07 c0       	rjmp	.+14     	; 0x9c44 <strtoul+0x1be>
    9c36:	90 95       	com	r25
    9c38:	80 95       	com	r24
    9c3a:	70 95       	com	r23
    9c3c:	61 95       	neg	r22
    9c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    9c40:	8f 4f       	sbci	r24, 0xFF	; 255
    9c42:	9f 4f       	sbci	r25, 0xFF	; 255
    9c44:	4f 3f       	cpi	r20, 0xFF	; 255
    9c46:	79 f4       	brne	.+30     	; 0x9c66 <strtoul+0x1e0>
    9c48:	82 e2       	ldi	r24, 0x22	; 34
    9c4a:	90 e0       	ldi	r25, 0x00	; 0
    9c4c:	80 93 99 26 	sts	0x2699, r24	; 0x802699 <errno>
    9c50:	90 93 9a 26 	sts	0x269A, r25	; 0x80269a <errno+0x1>
    9c54:	3f ef       	ldi	r19, 0xFF	; 255
    9c56:	2f ef       	ldi	r18, 0xFF	; 255
    9c58:	9f ef       	ldi	r25, 0xFF	; 255
    9c5a:	0d c0       	rjmp	.+26     	; 0x9c76 <strtoul+0x1f0>
    9c5c:	40 e0       	ldi	r20, 0x00	; 0
    9c5e:	30 e0       	ldi	r19, 0x00	; 0
    9c60:	20 e0       	ldi	r18, 0x00	; 0
    9c62:	90 e0       	ldi	r25, 0x00	; 0
    9c64:	08 c0       	rjmp	.+16     	; 0x9c76 <strtoul+0x1f0>
    9c66:	46 2f       	mov	r20, r22
    9c68:	37 2f       	mov	r19, r23
    9c6a:	28 2f       	mov	r18, r24
    9c6c:	04 c0       	rjmp	.+8      	; 0x9c76 <strtoul+0x1f0>
    9c6e:	10 33       	cpi	r17, 0x30	; 48
    9c70:	09 f0       	breq	.+2      	; 0x9c74 <strtoul+0x1ee>
    9c72:	67 cf       	rjmp	.-306    	; 0x9b42 <strtoul+0xbc>
    9c74:	5f cf       	rjmp	.-322    	; 0x9b34 <strtoul+0xae>
    9c76:	64 2f       	mov	r22, r20
    9c78:	73 2f       	mov	r23, r19
    9c7a:	82 2f       	mov	r24, r18
    9c7c:	df 91       	pop	r29
    9c7e:	cf 91       	pop	r28
    9c80:	1f 91       	pop	r17
    9c82:	0f 91       	pop	r16
    9c84:	ff 90       	pop	r15
    9c86:	ef 90       	pop	r14
    9c88:	df 90       	pop	r13
    9c8a:	cf 90       	pop	r12
    9c8c:	bf 90       	pop	r11
    9c8e:	af 90       	pop	r10
    9c90:	9f 90       	pop	r9
    9c92:	8f 90       	pop	r8
    9c94:	7f 90       	pop	r7
    9c96:	6f 90       	pop	r6
    9c98:	5f 90       	pop	r5
    9c9a:	4f 90       	pop	r4
    9c9c:	3f 90       	pop	r3
    9c9e:	08 95       	ret

00009ca0 <atoi>:
    9ca0:	fc 01       	movw	r30, r24
    9ca2:	88 27       	eor	r24, r24
    9ca4:	99 27       	eor	r25, r25
    9ca6:	e8 94       	clt
    9ca8:	21 91       	ld	r18, Z+
    9caa:	20 32       	cpi	r18, 0x20	; 32
    9cac:	e9 f3       	breq	.-6      	; 0x9ca8 <atoi+0x8>
    9cae:	29 30       	cpi	r18, 0x09	; 9
    9cb0:	10 f0       	brcs	.+4      	; 0x9cb6 <atoi+0x16>
    9cb2:	2e 30       	cpi	r18, 0x0E	; 14
    9cb4:	c8 f3       	brcs	.-14     	; 0x9ca8 <atoi+0x8>
    9cb6:	2b 32       	cpi	r18, 0x2B	; 43
    9cb8:	41 f0       	breq	.+16     	; 0x9cca <atoi+0x2a>
    9cba:	2d 32       	cpi	r18, 0x2D	; 45
    9cbc:	39 f4       	brne	.+14     	; 0x9ccc <atoi+0x2c>
    9cbe:	68 94       	set
    9cc0:	04 c0       	rjmp	.+8      	; 0x9cca <atoi+0x2a>
    9cc2:	0e 94 e3 4f 	call	0x9fc6	; 0x9fc6 <__mulhi_const_10>
    9cc6:	82 0f       	add	r24, r18
    9cc8:	91 1d       	adc	r25, r1
    9cca:	21 91       	ld	r18, Z+
    9ccc:	20 53       	subi	r18, 0x30	; 48
    9cce:	2a 30       	cpi	r18, 0x0A	; 10
    9cd0:	c0 f3       	brcs	.-16     	; 0x9cc2 <atoi+0x22>
    9cd2:	1e f4       	brtc	.+6      	; 0x9cda <atoi+0x3a>
    9cd4:	90 95       	com	r25
    9cd6:	81 95       	neg	r24
    9cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    9cda:	08 95       	ret

00009cdc <__ftoa_engine>:
    9cdc:	28 30       	cpi	r18, 0x08	; 8
    9cde:	08 f0       	brcs	.+2      	; 0x9ce2 <__ftoa_engine+0x6>
    9ce0:	27 e0       	ldi	r18, 0x07	; 7
    9ce2:	33 27       	eor	r19, r19
    9ce4:	da 01       	movw	r26, r20
    9ce6:	99 0f       	add	r25, r25
    9ce8:	31 1d       	adc	r19, r1
    9cea:	87 fd       	sbrc	r24, 7
    9cec:	91 60       	ori	r25, 0x01	; 1
    9cee:	00 96       	adiw	r24, 0x00	; 0
    9cf0:	61 05       	cpc	r22, r1
    9cf2:	71 05       	cpc	r23, r1
    9cf4:	39 f4       	brne	.+14     	; 0x9d04 <__ftoa_engine+0x28>
    9cf6:	32 60       	ori	r19, 0x02	; 2
    9cf8:	2e 5f       	subi	r18, 0xFE	; 254
    9cfa:	3d 93       	st	X+, r19
    9cfc:	30 e3       	ldi	r19, 0x30	; 48
    9cfe:	2a 95       	dec	r18
    9d00:	e1 f7       	brne	.-8      	; 0x9cfa <__ftoa_engine+0x1e>
    9d02:	08 95       	ret
    9d04:	9f 3f       	cpi	r25, 0xFF	; 255
    9d06:	30 f0       	brcs	.+12     	; 0x9d14 <__ftoa_engine+0x38>
    9d08:	80 38       	cpi	r24, 0x80	; 128
    9d0a:	71 05       	cpc	r23, r1
    9d0c:	61 05       	cpc	r22, r1
    9d0e:	09 f0       	breq	.+2      	; 0x9d12 <__ftoa_engine+0x36>
    9d10:	3c 5f       	subi	r19, 0xFC	; 252
    9d12:	3c 5f       	subi	r19, 0xFC	; 252
    9d14:	3d 93       	st	X+, r19
    9d16:	91 30       	cpi	r25, 0x01	; 1
    9d18:	08 f0       	brcs	.+2      	; 0x9d1c <__ftoa_engine+0x40>
    9d1a:	80 68       	ori	r24, 0x80	; 128
    9d1c:	91 1d       	adc	r25, r1
    9d1e:	df 93       	push	r29
    9d20:	cf 93       	push	r28
    9d22:	1f 93       	push	r17
    9d24:	0f 93       	push	r16
    9d26:	ff 92       	push	r15
    9d28:	ef 92       	push	r14
    9d2a:	19 2f       	mov	r17, r25
    9d2c:	98 7f       	andi	r25, 0xF8	; 248
    9d2e:	96 95       	lsr	r25
    9d30:	e9 2f       	mov	r30, r25
    9d32:	96 95       	lsr	r25
    9d34:	96 95       	lsr	r25
    9d36:	e9 0f       	add	r30, r25
    9d38:	ff 27       	eor	r31, r31
    9d3a:	e0 55       	subi	r30, 0x50	; 80
    9d3c:	fc 4f       	sbci	r31, 0xFC	; 252
    9d3e:	99 27       	eor	r25, r25
    9d40:	33 27       	eor	r19, r19
    9d42:	ee 24       	eor	r14, r14
    9d44:	ff 24       	eor	r15, r15
    9d46:	a7 01       	movw	r20, r14
    9d48:	e7 01       	movw	r28, r14
    9d4a:	05 90       	lpm	r0, Z+
    9d4c:	08 94       	sec
    9d4e:	07 94       	ror	r0
    9d50:	28 f4       	brcc	.+10     	; 0x9d5c <__ftoa_engine+0x80>
    9d52:	36 0f       	add	r19, r22
    9d54:	e7 1e       	adc	r14, r23
    9d56:	f8 1e       	adc	r15, r24
    9d58:	49 1f       	adc	r20, r25
    9d5a:	51 1d       	adc	r21, r1
    9d5c:	66 0f       	add	r22, r22
    9d5e:	77 1f       	adc	r23, r23
    9d60:	88 1f       	adc	r24, r24
    9d62:	99 1f       	adc	r25, r25
    9d64:	06 94       	lsr	r0
    9d66:	a1 f7       	brne	.-24     	; 0x9d50 <__ftoa_engine+0x74>
    9d68:	05 90       	lpm	r0, Z+
    9d6a:	07 94       	ror	r0
    9d6c:	28 f4       	brcc	.+10     	; 0x9d78 <__ftoa_engine+0x9c>
    9d6e:	e7 0e       	add	r14, r23
    9d70:	f8 1e       	adc	r15, r24
    9d72:	49 1f       	adc	r20, r25
    9d74:	56 1f       	adc	r21, r22
    9d76:	c1 1d       	adc	r28, r1
    9d78:	77 0f       	add	r23, r23
    9d7a:	88 1f       	adc	r24, r24
    9d7c:	99 1f       	adc	r25, r25
    9d7e:	66 1f       	adc	r22, r22
    9d80:	06 94       	lsr	r0
    9d82:	a1 f7       	brne	.-24     	; 0x9d6c <__ftoa_engine+0x90>
    9d84:	05 90       	lpm	r0, Z+
    9d86:	07 94       	ror	r0
    9d88:	28 f4       	brcc	.+10     	; 0x9d94 <__ftoa_engine+0xb8>
    9d8a:	f8 0e       	add	r15, r24
    9d8c:	49 1f       	adc	r20, r25
    9d8e:	56 1f       	adc	r21, r22
    9d90:	c7 1f       	adc	r28, r23
    9d92:	d1 1d       	adc	r29, r1
    9d94:	88 0f       	add	r24, r24
    9d96:	99 1f       	adc	r25, r25
    9d98:	66 1f       	adc	r22, r22
    9d9a:	77 1f       	adc	r23, r23
    9d9c:	06 94       	lsr	r0
    9d9e:	a1 f7       	brne	.-24     	; 0x9d88 <__ftoa_engine+0xac>
    9da0:	05 90       	lpm	r0, Z+
    9da2:	07 94       	ror	r0
    9da4:	20 f4       	brcc	.+8      	; 0x9dae <__ftoa_engine+0xd2>
    9da6:	49 0f       	add	r20, r25
    9da8:	56 1f       	adc	r21, r22
    9daa:	c7 1f       	adc	r28, r23
    9dac:	d8 1f       	adc	r29, r24
    9dae:	99 0f       	add	r25, r25
    9db0:	66 1f       	adc	r22, r22
    9db2:	77 1f       	adc	r23, r23
    9db4:	88 1f       	adc	r24, r24
    9db6:	06 94       	lsr	r0
    9db8:	a9 f7       	brne	.-22     	; 0x9da4 <__ftoa_engine+0xc8>
    9dba:	84 91       	lpm	r24, Z
    9dbc:	10 95       	com	r17
    9dbe:	17 70       	andi	r17, 0x07	; 7
    9dc0:	41 f0       	breq	.+16     	; 0x9dd2 <__ftoa_engine+0xf6>
    9dc2:	d6 95       	lsr	r29
    9dc4:	c7 95       	ror	r28
    9dc6:	57 95       	ror	r21
    9dc8:	47 95       	ror	r20
    9dca:	f7 94       	ror	r15
    9dcc:	e7 94       	ror	r14
    9dce:	1a 95       	dec	r17
    9dd0:	c1 f7       	brne	.-16     	; 0x9dc2 <__ftoa_engine+0xe6>
    9dd2:	e6 e5       	ldi	r30, 0x56	; 86
    9dd4:	f3 e0       	ldi	r31, 0x03	; 3
    9dd6:	68 94       	set
    9dd8:	15 90       	lpm	r1, Z+
    9dda:	15 91       	lpm	r17, Z+
    9ddc:	35 91       	lpm	r19, Z+
    9dde:	65 91       	lpm	r22, Z+
    9de0:	95 91       	lpm	r25, Z+
    9de2:	05 90       	lpm	r0, Z+
    9de4:	7f e2       	ldi	r23, 0x2F	; 47
    9de6:	73 95       	inc	r23
    9de8:	e1 18       	sub	r14, r1
    9dea:	f1 0a       	sbc	r15, r17
    9dec:	43 0b       	sbc	r20, r19
    9dee:	56 0b       	sbc	r21, r22
    9df0:	c9 0b       	sbc	r28, r25
    9df2:	d0 09       	sbc	r29, r0
    9df4:	c0 f7       	brcc	.-16     	; 0x9de6 <__ftoa_engine+0x10a>
    9df6:	e1 0c       	add	r14, r1
    9df8:	f1 1e       	adc	r15, r17
    9dfa:	43 1f       	adc	r20, r19
    9dfc:	56 1f       	adc	r21, r22
    9dfe:	c9 1f       	adc	r28, r25
    9e00:	d0 1d       	adc	r29, r0
    9e02:	7e f4       	brtc	.+30     	; 0x9e22 <__ftoa_engine+0x146>
    9e04:	70 33       	cpi	r23, 0x30	; 48
    9e06:	11 f4       	brne	.+4      	; 0x9e0c <__ftoa_engine+0x130>
    9e08:	8a 95       	dec	r24
    9e0a:	e6 cf       	rjmp	.-52     	; 0x9dd8 <__ftoa_engine+0xfc>
    9e0c:	e8 94       	clt
    9e0e:	01 50       	subi	r16, 0x01	; 1
    9e10:	30 f0       	brcs	.+12     	; 0x9e1e <__ftoa_engine+0x142>
    9e12:	08 0f       	add	r16, r24
    9e14:	0a f4       	brpl	.+2      	; 0x9e18 <__ftoa_engine+0x13c>
    9e16:	00 27       	eor	r16, r16
    9e18:	02 17       	cp	r16, r18
    9e1a:	08 f4       	brcc	.+2      	; 0x9e1e <__ftoa_engine+0x142>
    9e1c:	20 2f       	mov	r18, r16
    9e1e:	23 95       	inc	r18
    9e20:	02 2f       	mov	r16, r18
    9e22:	7a 33       	cpi	r23, 0x3A	; 58
    9e24:	28 f0       	brcs	.+10     	; 0x9e30 <__ftoa_engine+0x154>
    9e26:	79 e3       	ldi	r23, 0x39	; 57
    9e28:	7d 93       	st	X+, r23
    9e2a:	2a 95       	dec	r18
    9e2c:	e9 f7       	brne	.-6      	; 0x9e28 <__ftoa_engine+0x14c>
    9e2e:	10 c0       	rjmp	.+32     	; 0x9e50 <__ftoa_engine+0x174>
    9e30:	7d 93       	st	X+, r23
    9e32:	2a 95       	dec	r18
    9e34:	89 f6       	brne	.-94     	; 0x9dd8 <__ftoa_engine+0xfc>
    9e36:	06 94       	lsr	r0
    9e38:	97 95       	ror	r25
    9e3a:	67 95       	ror	r22
    9e3c:	37 95       	ror	r19
    9e3e:	17 95       	ror	r17
    9e40:	17 94       	ror	r1
    9e42:	e1 18       	sub	r14, r1
    9e44:	f1 0a       	sbc	r15, r17
    9e46:	43 0b       	sbc	r20, r19
    9e48:	56 0b       	sbc	r21, r22
    9e4a:	c9 0b       	sbc	r28, r25
    9e4c:	d0 09       	sbc	r29, r0
    9e4e:	98 f0       	brcs	.+38     	; 0x9e76 <__ftoa_engine+0x19a>
    9e50:	23 95       	inc	r18
    9e52:	7e 91       	ld	r23, -X
    9e54:	73 95       	inc	r23
    9e56:	7a 33       	cpi	r23, 0x3A	; 58
    9e58:	08 f0       	brcs	.+2      	; 0x9e5c <__ftoa_engine+0x180>
    9e5a:	70 e3       	ldi	r23, 0x30	; 48
    9e5c:	7c 93       	st	X, r23
    9e5e:	20 13       	cpse	r18, r16
    9e60:	b8 f7       	brcc	.-18     	; 0x9e50 <__ftoa_engine+0x174>
    9e62:	7e 91       	ld	r23, -X
    9e64:	70 61       	ori	r23, 0x10	; 16
    9e66:	7d 93       	st	X+, r23
    9e68:	30 f0       	brcs	.+12     	; 0x9e76 <__ftoa_engine+0x19a>
    9e6a:	83 95       	inc	r24
    9e6c:	71 e3       	ldi	r23, 0x31	; 49
    9e6e:	7d 93       	st	X+, r23
    9e70:	70 e3       	ldi	r23, 0x30	; 48
    9e72:	2a 95       	dec	r18
    9e74:	e1 f7       	brne	.-8      	; 0x9e6e <__ftoa_engine+0x192>
    9e76:	11 24       	eor	r1, r1
    9e78:	ef 90       	pop	r14
    9e7a:	ff 90       	pop	r15
    9e7c:	0f 91       	pop	r16
    9e7e:	1f 91       	pop	r17
    9e80:	cf 91       	pop	r28
    9e82:	df 91       	pop	r29
    9e84:	99 27       	eor	r25, r25
    9e86:	87 fd       	sbrc	r24, 7
    9e88:	90 95       	com	r25
    9e8a:	08 95       	ret

00009e8c <isspace>:
    9e8c:	91 11       	cpse	r25, r1
    9e8e:	0c 94 77 51 	jmp	0xa2ee	; 0xa2ee <__ctype_isfalse>
    9e92:	80 32       	cpi	r24, 0x20	; 32
    9e94:	19 f0       	breq	.+6      	; 0x9e9c <isspace+0x10>
    9e96:	89 50       	subi	r24, 0x09	; 9
    9e98:	85 50       	subi	r24, 0x05	; 5
    9e9a:	c8 f7       	brcc	.-14     	; 0x9e8e <isspace+0x2>
    9e9c:	08 95       	ret

00009e9e <tolower>:
    9e9e:	91 11       	cpse	r25, r1
    9ea0:	08 95       	ret
    9ea2:	81 54       	subi	r24, 0x41	; 65
    9ea4:	8a 51       	subi	r24, 0x1A	; 26
    9ea6:	08 f4       	brcc	.+2      	; 0x9eaa <tolower+0xc>
    9ea8:	80 5e       	subi	r24, 0xE0	; 224
    9eaa:	85 5a       	subi	r24, 0xA5	; 165
    9eac:	08 95       	ret

00009eae <strchr_P>:
    9eae:	fc 01       	movw	r30, r24
    9eb0:	05 90       	lpm	r0, Z+
    9eb2:	06 16       	cp	r0, r22
    9eb4:	21 f0       	breq	.+8      	; 0x9ebe <strchr_P+0x10>
    9eb6:	00 20       	and	r0, r0
    9eb8:	d9 f7       	brne	.-10     	; 0x9eb0 <strchr_P+0x2>
    9eba:	c0 01       	movw	r24, r0
    9ebc:	08 95       	ret
    9ebe:	31 97       	sbiw	r30, 0x01	; 1
    9ec0:	cf 01       	movw	r24, r30
    9ec2:	08 95       	ret

00009ec4 <strcmp_P>:
    9ec4:	fb 01       	movw	r30, r22
    9ec6:	dc 01       	movw	r26, r24
    9ec8:	8d 91       	ld	r24, X+
    9eca:	05 90       	lpm	r0, Z+
    9ecc:	80 19       	sub	r24, r0
    9ece:	01 10       	cpse	r0, r1
    9ed0:	d9 f3       	breq	.-10     	; 0x9ec8 <strcmp_P+0x4>
    9ed2:	99 0b       	sbc	r25, r25
    9ed4:	08 95       	ret

00009ed6 <strnlen_P>:
    9ed6:	fc 01       	movw	r30, r24
    9ed8:	05 90       	lpm	r0, Z+
    9eda:	61 50       	subi	r22, 0x01	; 1
    9edc:	70 40       	sbci	r23, 0x00	; 0
    9ede:	01 10       	cpse	r0, r1
    9ee0:	d8 f7       	brcc	.-10     	; 0x9ed8 <strnlen_P+0x2>
    9ee2:	80 95       	com	r24
    9ee4:	90 95       	com	r25
    9ee6:	8e 0f       	add	r24, r30
    9ee8:	9f 1f       	adc	r25, r31
    9eea:	08 95       	ret

00009eec <strtok>:
    9eec:	4c ed       	ldi	r20, 0xDC	; 220
    9eee:	52 e2       	ldi	r21, 0x22	; 34
    9ef0:	0c 94 bc 4f 	jmp	0x9f78	; 0x9f78 <strtok_r>

00009ef4 <memcpy>:
    9ef4:	fb 01       	movw	r30, r22
    9ef6:	dc 01       	movw	r26, r24
    9ef8:	02 c0       	rjmp	.+4      	; 0x9efe <memcpy+0xa>
    9efa:	01 90       	ld	r0, Z+
    9efc:	0d 92       	st	X+, r0
    9efe:	41 50       	subi	r20, 0x01	; 1
    9f00:	50 40       	sbci	r21, 0x00	; 0
    9f02:	d8 f7       	brcc	.-10     	; 0x9efa <memcpy+0x6>
    9f04:	08 95       	ret

00009f06 <strcmp>:
    9f06:	fb 01       	movw	r30, r22
    9f08:	dc 01       	movw	r26, r24
    9f0a:	8d 91       	ld	r24, X+
    9f0c:	01 90       	ld	r0, Z+
    9f0e:	80 19       	sub	r24, r0
    9f10:	01 10       	cpse	r0, r1
    9f12:	d9 f3       	breq	.-10     	; 0x9f0a <strcmp+0x4>
    9f14:	99 0b       	sbc	r25, r25
    9f16:	08 95       	ret

00009f18 <strcpy>:
    9f18:	fb 01       	movw	r30, r22
    9f1a:	dc 01       	movw	r26, r24
    9f1c:	01 90       	ld	r0, Z+
    9f1e:	0d 92       	st	X+, r0
    9f20:	00 20       	and	r0, r0
    9f22:	e1 f7       	brne	.-8      	; 0x9f1c <strcpy+0x4>
    9f24:	08 95       	ret

00009f26 <strcspn>:
    9f26:	dc 01       	movw	r26, r24
    9f28:	5d 91       	ld	r21, X+
    9f2a:	55 23       	and	r21, r21
    9f2c:	31 f0       	breq	.+12     	; 0x9f3a <strcspn+0x14>
    9f2e:	fb 01       	movw	r30, r22
    9f30:	01 90       	ld	r0, Z+
    9f32:	05 16       	cp	r0, r21
    9f34:	01 10       	cpse	r0, r1
    9f36:	e1 f7       	brne	.-8      	; 0x9f30 <strcspn+0xa>
    9f38:	b9 f7       	brne	.-18     	; 0x9f28 <strcspn+0x2>
    9f3a:	80 95       	com	r24
    9f3c:	90 95       	com	r25
    9f3e:	8a 0f       	add	r24, r26
    9f40:	9b 1f       	adc	r25, r27
    9f42:	08 95       	ret

00009f44 <strncpy>:
    9f44:	fb 01       	movw	r30, r22
    9f46:	dc 01       	movw	r26, r24
    9f48:	41 50       	subi	r20, 0x01	; 1
    9f4a:	50 40       	sbci	r21, 0x00	; 0
    9f4c:	48 f0       	brcs	.+18     	; 0x9f60 <strncpy+0x1c>
    9f4e:	01 90       	ld	r0, Z+
    9f50:	0d 92       	st	X+, r0
    9f52:	00 20       	and	r0, r0
    9f54:	c9 f7       	brne	.-14     	; 0x9f48 <strncpy+0x4>
    9f56:	01 c0       	rjmp	.+2      	; 0x9f5a <strncpy+0x16>
    9f58:	1d 92       	st	X+, r1
    9f5a:	41 50       	subi	r20, 0x01	; 1
    9f5c:	50 40       	sbci	r21, 0x00	; 0
    9f5e:	e0 f7       	brcc	.-8      	; 0x9f58 <strncpy+0x14>
    9f60:	08 95       	ret

00009f62 <strnlen>:
    9f62:	fc 01       	movw	r30, r24
    9f64:	61 50       	subi	r22, 0x01	; 1
    9f66:	70 40       	sbci	r23, 0x00	; 0
    9f68:	01 90       	ld	r0, Z+
    9f6a:	01 10       	cpse	r0, r1
    9f6c:	d8 f7       	brcc	.-10     	; 0x9f64 <strnlen+0x2>
    9f6e:	80 95       	com	r24
    9f70:	90 95       	com	r25
    9f72:	8e 0f       	add	r24, r30
    9f74:	9f 1f       	adc	r25, r31
    9f76:	08 95       	ret

00009f78 <strtok_r>:
    9f78:	fa 01       	movw	r30, r20
    9f7a:	a1 91       	ld	r26, Z+
    9f7c:	b0 81       	ld	r27, Z
    9f7e:	00 97       	sbiw	r24, 0x00	; 0
    9f80:	19 f4       	brne	.+6      	; 0x9f88 <strtok_r+0x10>
    9f82:	10 97       	sbiw	r26, 0x00	; 0
    9f84:	e1 f0       	breq	.+56     	; 0x9fbe <strtok_r+0x46>
    9f86:	cd 01       	movw	r24, r26
    9f88:	dc 01       	movw	r26, r24
    9f8a:	cd 01       	movw	r24, r26
    9f8c:	0d 90       	ld	r0, X+
    9f8e:	00 20       	and	r0, r0
    9f90:	11 f4       	brne	.+4      	; 0x9f96 <strtok_r+0x1e>
    9f92:	c0 01       	movw	r24, r0
    9f94:	13 c0       	rjmp	.+38     	; 0x9fbc <strtok_r+0x44>
    9f96:	fb 01       	movw	r30, r22
    9f98:	21 91       	ld	r18, Z+
    9f9a:	22 23       	and	r18, r18
    9f9c:	19 f0       	breq	.+6      	; 0x9fa4 <strtok_r+0x2c>
    9f9e:	20 15       	cp	r18, r0
    9fa0:	d9 f7       	brne	.-10     	; 0x9f98 <strtok_r+0x20>
    9fa2:	f3 cf       	rjmp	.-26     	; 0x9f8a <strtok_r+0x12>
    9fa4:	fb 01       	movw	r30, r22
    9fa6:	21 91       	ld	r18, Z+
    9fa8:	20 15       	cp	r18, r0
    9faa:	19 f4       	brne	.+6      	; 0x9fb2 <strtok_r+0x3a>
    9fac:	1e 92       	st	-X, r1
    9fae:	11 96       	adiw	r26, 0x01	; 1
    9fb0:	06 c0       	rjmp	.+12     	; 0x9fbe <strtok_r+0x46>
    9fb2:	22 23       	and	r18, r18
    9fb4:	c1 f7       	brne	.-16     	; 0x9fa6 <strtok_r+0x2e>
    9fb6:	0d 90       	ld	r0, X+
    9fb8:	00 20       	and	r0, r0
    9fba:	a1 f7       	brne	.-24     	; 0x9fa4 <strtok_r+0x2c>
    9fbc:	d0 01       	movw	r26, r0
    9fbe:	fa 01       	movw	r30, r20
    9fc0:	a1 93       	st	Z+, r26
    9fc2:	b0 83       	st	Z, r27
    9fc4:	08 95       	ret

00009fc6 <__mulhi_const_10>:
    9fc6:	7a e0       	ldi	r23, 0x0A	; 10
    9fc8:	97 9f       	mul	r25, r23
    9fca:	90 2d       	mov	r25, r0
    9fcc:	87 9f       	mul	r24, r23
    9fce:	80 2d       	mov	r24, r0
    9fd0:	91 0d       	add	r25, r1
    9fd2:	11 24       	eor	r1, r1
    9fd4:	08 95       	ret

00009fd6 <fgetc>:
    9fd6:	cf 93       	push	r28
    9fd8:	df 93       	push	r29
    9fda:	ec 01       	movw	r28, r24
    9fdc:	2b 81       	ldd	r18, Y+3	; 0x03
    9fde:	20 ff       	sbrs	r18, 0
    9fe0:	33 c0       	rjmp	.+102    	; 0xa048 <fgetc+0x72>
    9fe2:	26 ff       	sbrs	r18, 6
    9fe4:	0a c0       	rjmp	.+20     	; 0x9ffa <fgetc+0x24>
    9fe6:	2f 7b       	andi	r18, 0xBF	; 191
    9fe8:	2b 83       	std	Y+3, r18	; 0x03
    9fea:	8e 81       	ldd	r24, Y+6	; 0x06
    9fec:	9f 81       	ldd	r25, Y+7	; 0x07
    9fee:	01 96       	adiw	r24, 0x01	; 1
    9ff0:	8e 83       	std	Y+6, r24	; 0x06
    9ff2:	9f 83       	std	Y+7, r25	; 0x07
    9ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    9ff6:	90 e0       	ldi	r25, 0x00	; 0
    9ff8:	29 c0       	rjmp	.+82     	; 0xa04c <fgetc+0x76>
    9ffa:	22 ff       	sbrs	r18, 2
    9ffc:	0f c0       	rjmp	.+30     	; 0xa01c <fgetc+0x46>
    9ffe:	e8 81       	ld	r30, Y
    a000:	f9 81       	ldd	r31, Y+1	; 0x01
    a002:	80 81       	ld	r24, Z
    a004:	08 2e       	mov	r0, r24
    a006:	00 0c       	add	r0, r0
    a008:	99 0b       	sbc	r25, r25
    a00a:	00 97       	sbiw	r24, 0x00	; 0
    a00c:	19 f4       	brne	.+6      	; 0xa014 <fgetc+0x3e>
    a00e:	20 62       	ori	r18, 0x20	; 32
    a010:	2b 83       	std	Y+3, r18	; 0x03
    a012:	1a c0       	rjmp	.+52     	; 0xa048 <fgetc+0x72>
    a014:	31 96       	adiw	r30, 0x01	; 1
    a016:	e8 83       	st	Y, r30
    a018:	f9 83       	std	Y+1, r31	; 0x01
    a01a:	0e c0       	rjmp	.+28     	; 0xa038 <fgetc+0x62>
    a01c:	ea 85       	ldd	r30, Y+10	; 0x0a
    a01e:	fb 85       	ldd	r31, Y+11	; 0x0b
    a020:	19 95       	eicall
    a022:	97 ff       	sbrs	r25, 7
    a024:	09 c0       	rjmp	.+18     	; 0xa038 <fgetc+0x62>
    a026:	2b 81       	ldd	r18, Y+3	; 0x03
    a028:	01 96       	adiw	r24, 0x01	; 1
    a02a:	11 f0       	breq	.+4      	; 0xa030 <fgetc+0x5a>
    a02c:	80 e2       	ldi	r24, 0x20	; 32
    a02e:	01 c0       	rjmp	.+2      	; 0xa032 <fgetc+0x5c>
    a030:	80 e1       	ldi	r24, 0x10	; 16
    a032:	82 2b       	or	r24, r18
    a034:	8b 83       	std	Y+3, r24	; 0x03
    a036:	08 c0       	rjmp	.+16     	; 0xa048 <fgetc+0x72>
    a038:	2e 81       	ldd	r18, Y+6	; 0x06
    a03a:	3f 81       	ldd	r19, Y+7	; 0x07
    a03c:	2f 5f       	subi	r18, 0xFF	; 255
    a03e:	3f 4f       	sbci	r19, 0xFF	; 255
    a040:	2e 83       	std	Y+6, r18	; 0x06
    a042:	3f 83       	std	Y+7, r19	; 0x07
    a044:	99 27       	eor	r25, r25
    a046:	02 c0       	rjmp	.+4      	; 0xa04c <fgetc+0x76>
    a048:	8f ef       	ldi	r24, 0xFF	; 255
    a04a:	9f ef       	ldi	r25, 0xFF	; 255
    a04c:	df 91       	pop	r29
    a04e:	cf 91       	pop	r28
    a050:	08 95       	ret

0000a052 <fputc>:
    a052:	0f 93       	push	r16
    a054:	1f 93       	push	r17
    a056:	cf 93       	push	r28
    a058:	df 93       	push	r29
    a05a:	fb 01       	movw	r30, r22
    a05c:	23 81       	ldd	r18, Z+3	; 0x03
    a05e:	21 fd       	sbrc	r18, 1
    a060:	03 c0       	rjmp	.+6      	; 0xa068 <fputc+0x16>
    a062:	8f ef       	ldi	r24, 0xFF	; 255
    a064:	9f ef       	ldi	r25, 0xFF	; 255
    a066:	2c c0       	rjmp	.+88     	; 0xa0c0 <fputc+0x6e>
    a068:	22 ff       	sbrs	r18, 2
    a06a:	16 c0       	rjmp	.+44     	; 0xa098 <fputc+0x46>
    a06c:	46 81       	ldd	r20, Z+6	; 0x06
    a06e:	57 81       	ldd	r21, Z+7	; 0x07
    a070:	24 81       	ldd	r18, Z+4	; 0x04
    a072:	35 81       	ldd	r19, Z+5	; 0x05
    a074:	42 17       	cp	r20, r18
    a076:	53 07       	cpc	r21, r19
    a078:	44 f4       	brge	.+16     	; 0xa08a <fputc+0x38>
    a07a:	a0 81       	ld	r26, Z
    a07c:	b1 81       	ldd	r27, Z+1	; 0x01
    a07e:	9d 01       	movw	r18, r26
    a080:	2f 5f       	subi	r18, 0xFF	; 255
    a082:	3f 4f       	sbci	r19, 0xFF	; 255
    a084:	20 83       	st	Z, r18
    a086:	31 83       	std	Z+1, r19	; 0x01
    a088:	8c 93       	st	X, r24
    a08a:	26 81       	ldd	r18, Z+6	; 0x06
    a08c:	37 81       	ldd	r19, Z+7	; 0x07
    a08e:	2f 5f       	subi	r18, 0xFF	; 255
    a090:	3f 4f       	sbci	r19, 0xFF	; 255
    a092:	26 83       	std	Z+6, r18	; 0x06
    a094:	37 83       	std	Z+7, r19	; 0x07
    a096:	14 c0       	rjmp	.+40     	; 0xa0c0 <fputc+0x6e>
    a098:	8b 01       	movw	r16, r22
    a09a:	ec 01       	movw	r28, r24
    a09c:	fb 01       	movw	r30, r22
    a09e:	00 84       	ldd	r0, Z+8	; 0x08
    a0a0:	f1 85       	ldd	r31, Z+9	; 0x09
    a0a2:	e0 2d       	mov	r30, r0
    a0a4:	19 95       	eicall
    a0a6:	89 2b       	or	r24, r25
    a0a8:	e1 f6       	brne	.-72     	; 0xa062 <fputc+0x10>
    a0aa:	d8 01       	movw	r26, r16
    a0ac:	16 96       	adiw	r26, 0x06	; 6
    a0ae:	8d 91       	ld	r24, X+
    a0b0:	9c 91       	ld	r25, X
    a0b2:	17 97       	sbiw	r26, 0x07	; 7
    a0b4:	01 96       	adiw	r24, 0x01	; 1
    a0b6:	16 96       	adiw	r26, 0x06	; 6
    a0b8:	8d 93       	st	X+, r24
    a0ba:	9c 93       	st	X, r25
    a0bc:	17 97       	sbiw	r26, 0x07	; 7
    a0be:	ce 01       	movw	r24, r28
    a0c0:	df 91       	pop	r29
    a0c2:	cf 91       	pop	r28
    a0c4:	1f 91       	pop	r17
    a0c6:	0f 91       	pop	r16
    a0c8:	08 95       	ret

0000a0ca <printf>:
    a0ca:	cf 93       	push	r28
    a0cc:	df 93       	push	r29
    a0ce:	cd b7       	in	r28, 0x3d	; 61
    a0d0:	de b7       	in	r29, 0x3e	; 62
    a0d2:	ae 01       	movw	r20, r28
    a0d4:	4a 5f       	subi	r20, 0xFA	; 250
    a0d6:	5f 4f       	sbci	r21, 0xFF	; 255
    a0d8:	fa 01       	movw	r30, r20
    a0da:	61 91       	ld	r22, Z+
    a0dc:	71 91       	ld	r23, Z+
    a0de:	af 01       	movw	r20, r30
    a0e0:	80 91 95 26 	lds	r24, 0x2695	; 0x802695 <__iob+0x2>
    a0e4:	90 91 96 26 	lds	r25, 0x2696	; 0x802696 <__iob+0x3>
    a0e8:	0e 94 c7 3e 	call	0x7d8e	; 0x7d8e <vfprintf>
    a0ec:	df 91       	pop	r29
    a0ee:	cf 91       	pop	r28
    a0f0:	08 95       	ret

0000a0f2 <printf_P>:
    a0f2:	0f 93       	push	r16
    a0f4:	1f 93       	push	r17
    a0f6:	cf 93       	push	r28
    a0f8:	df 93       	push	r29
    a0fa:	cd b7       	in	r28, 0x3d	; 61
    a0fc:	de b7       	in	r29, 0x3e	; 62
    a0fe:	ae 01       	movw	r20, r28
    a100:	48 5f       	subi	r20, 0xF8	; 248
    a102:	5f 4f       	sbci	r21, 0xFF	; 255
    a104:	da 01       	movw	r26, r20
    a106:	6d 91       	ld	r22, X+
    a108:	7d 91       	ld	r23, X+
    a10a:	ad 01       	movw	r20, r26
    a10c:	03 e9       	ldi	r16, 0x93	; 147
    a10e:	16 e2       	ldi	r17, 0x26	; 38
    a110:	f8 01       	movw	r30, r16
    a112:	82 81       	ldd	r24, Z+2	; 0x02
    a114:	93 81       	ldd	r25, Z+3	; 0x03
    a116:	dc 01       	movw	r26, r24
    a118:	13 96       	adiw	r26, 0x03	; 3
    a11a:	2c 91       	ld	r18, X
    a11c:	13 97       	sbiw	r26, 0x03	; 3
    a11e:	28 60       	ori	r18, 0x08	; 8
    a120:	13 96       	adiw	r26, 0x03	; 3
    a122:	2c 93       	st	X, r18
    a124:	0e 94 c7 3e 	call	0x7d8e	; 0x7d8e <vfprintf>
    a128:	d8 01       	movw	r26, r16
    a12a:	12 96       	adiw	r26, 0x02	; 2
    a12c:	ed 91       	ld	r30, X+
    a12e:	fc 91       	ld	r31, X
    a130:	13 97       	sbiw	r26, 0x03	; 3
    a132:	23 81       	ldd	r18, Z+3	; 0x03
    a134:	27 7f       	andi	r18, 0xF7	; 247
    a136:	23 83       	std	Z+3, r18	; 0x03
    a138:	df 91       	pop	r29
    a13a:	cf 91       	pop	r28
    a13c:	1f 91       	pop	r17
    a13e:	0f 91       	pop	r16
    a140:	08 95       	ret

0000a142 <putchar>:
    a142:	60 91 95 26 	lds	r22, 0x2695	; 0x802695 <__iob+0x2>
    a146:	70 91 96 26 	lds	r23, 0x2696	; 0x802696 <__iob+0x3>
    a14a:	0c 94 29 50 	jmp	0xa052	; 0xa052 <fputc>

0000a14e <puts>:
    a14e:	0f 93       	push	r16
    a150:	1f 93       	push	r17
    a152:	cf 93       	push	r28
    a154:	df 93       	push	r29
    a156:	e0 91 95 26 	lds	r30, 0x2695	; 0x802695 <__iob+0x2>
    a15a:	f0 91 96 26 	lds	r31, 0x2696	; 0x802696 <__iob+0x3>
    a15e:	23 81       	ldd	r18, Z+3	; 0x03
    a160:	21 ff       	sbrs	r18, 1
    a162:	1b c0       	rjmp	.+54     	; 0xa19a <puts+0x4c>
    a164:	8c 01       	movw	r16, r24
    a166:	d0 e0       	ldi	r29, 0x00	; 0
    a168:	c0 e0       	ldi	r28, 0x00	; 0
    a16a:	f8 01       	movw	r30, r16
    a16c:	81 91       	ld	r24, Z+
    a16e:	8f 01       	movw	r16, r30
    a170:	60 91 95 26 	lds	r22, 0x2695	; 0x802695 <__iob+0x2>
    a174:	70 91 96 26 	lds	r23, 0x2696	; 0x802696 <__iob+0x3>
    a178:	db 01       	movw	r26, r22
    a17a:	18 96       	adiw	r26, 0x08	; 8
    a17c:	ed 91       	ld	r30, X+
    a17e:	fc 91       	ld	r31, X
    a180:	19 97       	sbiw	r26, 0x09	; 9
    a182:	88 23       	and	r24, r24
    a184:	31 f0       	breq	.+12     	; 0xa192 <puts+0x44>
    a186:	19 95       	eicall
    a188:	89 2b       	or	r24, r25
    a18a:	79 f3       	breq	.-34     	; 0xa16a <puts+0x1c>
    a18c:	df ef       	ldi	r29, 0xFF	; 255
    a18e:	cf ef       	ldi	r28, 0xFF	; 255
    a190:	ec cf       	rjmp	.-40     	; 0xa16a <puts+0x1c>
    a192:	8a e0       	ldi	r24, 0x0A	; 10
    a194:	19 95       	eicall
    a196:	89 2b       	or	r24, r25
    a198:	19 f0       	breq	.+6      	; 0xa1a0 <puts+0x52>
    a19a:	8f ef       	ldi	r24, 0xFF	; 255
    a19c:	9f ef       	ldi	r25, 0xFF	; 255
    a19e:	02 c0       	rjmp	.+4      	; 0xa1a4 <puts+0x56>
    a1a0:	8d 2f       	mov	r24, r29
    a1a2:	9c 2f       	mov	r25, r28
    a1a4:	df 91       	pop	r29
    a1a6:	cf 91       	pop	r28
    a1a8:	1f 91       	pop	r17
    a1aa:	0f 91       	pop	r16
    a1ac:	08 95       	ret

0000a1ae <sprintf>:
    a1ae:	0f 93       	push	r16
    a1b0:	1f 93       	push	r17
    a1b2:	cf 93       	push	r28
    a1b4:	df 93       	push	r29
    a1b6:	cd b7       	in	r28, 0x3d	; 61
    a1b8:	de b7       	in	r29, 0x3e	; 62
    a1ba:	2e 97       	sbiw	r28, 0x0e	; 14
    a1bc:	cd bf       	out	0x3d, r28	; 61
    a1be:	de bf       	out	0x3e, r29	; 62
    a1c0:	0e 89       	ldd	r16, Y+22	; 0x16
    a1c2:	1f 89       	ldd	r17, Y+23	; 0x17
    a1c4:	86 e0       	ldi	r24, 0x06	; 6
    a1c6:	8c 83       	std	Y+4, r24	; 0x04
    a1c8:	09 83       	std	Y+1, r16	; 0x01
    a1ca:	1a 83       	std	Y+2, r17	; 0x02
    a1cc:	8f ef       	ldi	r24, 0xFF	; 255
    a1ce:	9f e7       	ldi	r25, 0x7F	; 127
    a1d0:	8d 83       	std	Y+5, r24	; 0x05
    a1d2:	9e 83       	std	Y+6, r25	; 0x06
    a1d4:	ae 01       	movw	r20, r28
    a1d6:	46 5e       	subi	r20, 0xE6	; 230
    a1d8:	5f 4f       	sbci	r21, 0xFF	; 255
    a1da:	68 8d       	ldd	r22, Y+24	; 0x18
    a1dc:	79 8d       	ldd	r23, Y+25	; 0x19
    a1de:	ce 01       	movw	r24, r28
    a1e0:	01 96       	adiw	r24, 0x01	; 1
    a1e2:	0e 94 c7 3e 	call	0x7d8e	; 0x7d8e <vfprintf>
    a1e6:	ef 81       	ldd	r30, Y+7	; 0x07
    a1e8:	f8 85       	ldd	r31, Y+8	; 0x08
    a1ea:	e0 0f       	add	r30, r16
    a1ec:	f1 1f       	adc	r31, r17
    a1ee:	10 82       	st	Z, r1
    a1f0:	2e 96       	adiw	r28, 0x0e	; 14
    a1f2:	cd bf       	out	0x3d, r28	; 61
    a1f4:	de bf       	out	0x3e, r29	; 62
    a1f6:	df 91       	pop	r29
    a1f8:	cf 91       	pop	r28
    a1fa:	1f 91       	pop	r17
    a1fc:	0f 91       	pop	r16
    a1fe:	08 95       	ret

0000a200 <ungetc>:
    a200:	fb 01       	movw	r30, r22
    a202:	23 81       	ldd	r18, Z+3	; 0x03
    a204:	20 ff       	sbrs	r18, 0
    a206:	12 c0       	rjmp	.+36     	; 0xa22c <ungetc+0x2c>
    a208:	26 fd       	sbrc	r18, 6
    a20a:	10 c0       	rjmp	.+32     	; 0xa22c <ungetc+0x2c>
    a20c:	8f 3f       	cpi	r24, 0xFF	; 255
    a20e:	3f ef       	ldi	r19, 0xFF	; 255
    a210:	93 07       	cpc	r25, r19
    a212:	61 f0       	breq	.+24     	; 0xa22c <ungetc+0x2c>
    a214:	82 83       	std	Z+2, r24	; 0x02
    a216:	2f 7d       	andi	r18, 0xDF	; 223
    a218:	20 64       	ori	r18, 0x40	; 64
    a21a:	23 83       	std	Z+3, r18	; 0x03
    a21c:	26 81       	ldd	r18, Z+6	; 0x06
    a21e:	37 81       	ldd	r19, Z+7	; 0x07
    a220:	21 50       	subi	r18, 0x01	; 1
    a222:	31 09       	sbc	r19, r1
    a224:	26 83       	std	Z+6, r18	; 0x06
    a226:	37 83       	std	Z+7, r19	; 0x07
    a228:	99 27       	eor	r25, r25
    a22a:	08 95       	ret
    a22c:	8f ef       	ldi	r24, 0xFF	; 255
    a22e:	9f ef       	ldi	r25, 0xFF	; 255
    a230:	08 95       	ret

0000a232 <__ultoa_invert>:
    a232:	fa 01       	movw	r30, r20
    a234:	aa 27       	eor	r26, r26
    a236:	28 30       	cpi	r18, 0x08	; 8
    a238:	51 f1       	breq	.+84     	; 0xa28e <__ultoa_invert+0x5c>
    a23a:	20 31       	cpi	r18, 0x10	; 16
    a23c:	81 f1       	breq	.+96     	; 0xa29e <__ultoa_invert+0x6c>
    a23e:	e8 94       	clt
    a240:	6f 93       	push	r22
    a242:	6e 7f       	andi	r22, 0xFE	; 254
    a244:	6e 5f       	subi	r22, 0xFE	; 254
    a246:	7f 4f       	sbci	r23, 0xFF	; 255
    a248:	8f 4f       	sbci	r24, 0xFF	; 255
    a24a:	9f 4f       	sbci	r25, 0xFF	; 255
    a24c:	af 4f       	sbci	r26, 0xFF	; 255
    a24e:	b1 e0       	ldi	r27, 0x01	; 1
    a250:	3e d0       	rcall	.+124    	; 0xa2ce <__ultoa_invert+0x9c>
    a252:	b4 e0       	ldi	r27, 0x04	; 4
    a254:	3c d0       	rcall	.+120    	; 0xa2ce <__ultoa_invert+0x9c>
    a256:	67 0f       	add	r22, r23
    a258:	78 1f       	adc	r23, r24
    a25a:	89 1f       	adc	r24, r25
    a25c:	9a 1f       	adc	r25, r26
    a25e:	a1 1d       	adc	r26, r1
    a260:	68 0f       	add	r22, r24
    a262:	79 1f       	adc	r23, r25
    a264:	8a 1f       	adc	r24, r26
    a266:	91 1d       	adc	r25, r1
    a268:	a1 1d       	adc	r26, r1
    a26a:	6a 0f       	add	r22, r26
    a26c:	71 1d       	adc	r23, r1
    a26e:	81 1d       	adc	r24, r1
    a270:	91 1d       	adc	r25, r1
    a272:	a1 1d       	adc	r26, r1
    a274:	20 d0       	rcall	.+64     	; 0xa2b6 <__ultoa_invert+0x84>
    a276:	09 f4       	brne	.+2      	; 0xa27a <__ultoa_invert+0x48>
    a278:	68 94       	set
    a27a:	3f 91       	pop	r19
    a27c:	2a e0       	ldi	r18, 0x0A	; 10
    a27e:	26 9f       	mul	r18, r22
    a280:	11 24       	eor	r1, r1
    a282:	30 19       	sub	r19, r0
    a284:	30 5d       	subi	r19, 0xD0	; 208
    a286:	31 93       	st	Z+, r19
    a288:	de f6       	brtc	.-74     	; 0xa240 <__ultoa_invert+0xe>
    a28a:	cf 01       	movw	r24, r30
    a28c:	08 95       	ret
    a28e:	46 2f       	mov	r20, r22
    a290:	47 70       	andi	r20, 0x07	; 7
    a292:	40 5d       	subi	r20, 0xD0	; 208
    a294:	41 93       	st	Z+, r20
    a296:	b3 e0       	ldi	r27, 0x03	; 3
    a298:	0f d0       	rcall	.+30     	; 0xa2b8 <__ultoa_invert+0x86>
    a29a:	c9 f7       	brne	.-14     	; 0xa28e <__ultoa_invert+0x5c>
    a29c:	f6 cf       	rjmp	.-20     	; 0xa28a <__ultoa_invert+0x58>
    a29e:	46 2f       	mov	r20, r22
    a2a0:	4f 70       	andi	r20, 0x0F	; 15
    a2a2:	40 5d       	subi	r20, 0xD0	; 208
    a2a4:	4a 33       	cpi	r20, 0x3A	; 58
    a2a6:	18 f0       	brcs	.+6      	; 0xa2ae <__ultoa_invert+0x7c>
    a2a8:	49 5d       	subi	r20, 0xD9	; 217
    a2aa:	31 fd       	sbrc	r19, 1
    a2ac:	40 52       	subi	r20, 0x20	; 32
    a2ae:	41 93       	st	Z+, r20
    a2b0:	02 d0       	rcall	.+4      	; 0xa2b6 <__ultoa_invert+0x84>
    a2b2:	a9 f7       	brne	.-22     	; 0xa29e <__ultoa_invert+0x6c>
    a2b4:	ea cf       	rjmp	.-44     	; 0xa28a <__ultoa_invert+0x58>
    a2b6:	b4 e0       	ldi	r27, 0x04	; 4
    a2b8:	a6 95       	lsr	r26
    a2ba:	97 95       	ror	r25
    a2bc:	87 95       	ror	r24
    a2be:	77 95       	ror	r23
    a2c0:	67 95       	ror	r22
    a2c2:	ba 95       	dec	r27
    a2c4:	c9 f7       	brne	.-14     	; 0xa2b8 <__ultoa_invert+0x86>
    a2c6:	00 97       	sbiw	r24, 0x00	; 0
    a2c8:	61 05       	cpc	r22, r1
    a2ca:	71 05       	cpc	r23, r1
    a2cc:	08 95       	ret
    a2ce:	9b 01       	movw	r18, r22
    a2d0:	ac 01       	movw	r20, r24
    a2d2:	0a 2e       	mov	r0, r26
    a2d4:	06 94       	lsr	r0
    a2d6:	57 95       	ror	r21
    a2d8:	47 95       	ror	r20
    a2da:	37 95       	ror	r19
    a2dc:	27 95       	ror	r18
    a2de:	ba 95       	dec	r27
    a2e0:	c9 f7       	brne	.-14     	; 0xa2d4 <__ultoa_invert+0xa2>
    a2e2:	62 0f       	add	r22, r18
    a2e4:	73 1f       	adc	r23, r19
    a2e6:	84 1f       	adc	r24, r20
    a2e8:	95 1f       	adc	r25, r21
    a2ea:	a0 1d       	adc	r26, r0
    a2ec:	08 95       	ret

0000a2ee <__ctype_isfalse>:
    a2ee:	99 27       	eor	r25, r25
    a2f0:	88 27       	eor	r24, r24

0000a2f2 <__ctype_istrue>:
    a2f2:	08 95       	ret

0000a2f4 <_exit>:
    a2f4:	f8 94       	cli

0000a2f6 <__stop_program>:
    a2f6:	ff cf       	rjmp	.-2      	; 0xa2f6 <__stop_program>
